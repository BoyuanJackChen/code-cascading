[
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        common_elements = []\n        for i in test_tup1:\n            if i in test_tup2:\n                common_elements.append(i)\n        return common_elements\n",
        "num_ids": 78
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    #if the two tuples have the same length\n    if len(test_tup1) == len(test_tup2):\n        # if elements in the tuple are the same, return the tuple\n        if test_tup1[0] == test_tup2[0] and test_tup1[1] == test_tup2[1]:\n            return test_tup1\n        # if elements are not the same, compare each element to see if they're the same\n        else:\n            if test_tup1[0] == test_tup2[0]:\n                return test_tup1\n            elif test_tup1[1] == test_tup2[1]:\n                return test_tup1\n            else:\n                return False\n    else:\n        return False\n",
        "num_ids": 194
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return tuple(shared_elements)\n",
        "num_ids": 53
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # test_tup1 = (1, 2, 3)\n    # test_tup2 = (1, 2, 3, 4)\n    if len(test_tup1) > len(test_tup2):\n        temp = test_tup2\n        test_tup2 = test_tup1\n        test_tup1 = temp\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            pass\n        else:\n            return False\n    return True\n",
        "num_ids": 136
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_set1, test_set2 = set(test_tup1), set(test_tup2)\n    shared_elems = test_set1.intersection(test_set2)\n    return shared_elems\n",
        "num_ids": 57
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return similar_elements(test_tup2, test_tup1)\n    else:\n        result_list = []\n        for element in test_tup1:\n            if element in test_tup2:\n                result_list.append(element)\n        return result_list\n",
        "num_ids": 91
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = set(test_tup1) & set(test_tup2)\n    return tuple(shared_elements)\n",
        "num_ids": 36
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            common_elements.append(elem)\n    return common_elements\n",
        "num_ids": 53
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1)==len(test_tup2):\n        print('There is no duplicates in these two tuples')\n    else:\n        print('There are duplicates in these two tuples')\n",
        "num_ids": 55
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1) <= len(test_tup2):\n        shorter_list = test_tup1\n        longer_list = test_tup2\n    else:\n        shorter_list = test_tup2\n        longer_list = test_tup1\n    \n    # print shorter_list\n    # print longer_list\n    \n    shorter_list_set = set(shorter_list)\n    longer_list_set = set(longer_list)\n    \n    if len(shorter_list_set.intersection(longer_list_set)) > 0:\n        return (shorter_list_set.intersection(longer_list_set))\n    else:\n        return None\n",
        "num_ids": 180
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2 or n == 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    for i in range(7, int(math.sqrt(n)) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n    return False\n",
        "num_ids": 86
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    else:\n        if n%2 == 0 and n!=2:\n            return False\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i == 0:\n                return False\n        return True\n",
        "num_ids": 75
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0:\n            return True\n    return False\n",
        "num_ids": 51
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n",
        "num_ids": 37
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<2:\n        return True\n    if n==2:\n        return False\n    if n%2==0:\n        return True\n    for i in range(3,n/2,2):\n        if n%i==0:\n            return True\n    return False\ndef gcd(a,b):\n    '''\n    Write a python function to return the greatest common divisor of two numbers\n    '''\n    if b==0:\n        return a\n    return gcd(b,a%b)\ndef lcm(a,b):\n    '''\n    Write a python function to return the least common multiple of two numbers\n    '''\n    return a*b/gcd(a,b)\ndef find_hcf(x,y):\n    '''\n    Write a python function to find the highest common factor of two numbers\n    '''\n    if x<y:\n        x,y=y,x\n    while y!=0:\n        x,y=y,x%y\n    return x\ndef find_lcm(x,y):\n    '''\n    Write a python function to find the lowest common multiple of two numbers\n    '''\n    return x*y/find_hcf(x,y)\ndef product(a,b):\n    '''\n    Write a python function to return the product of two numbers\n    '''\n    if a==0 or b==0:\n        return 0\n    return a+product(a,b-1)\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a number\n    '''\n    if n==0:\n        return 1\n    return n*factorial(n-1)\ndef fibonacci(n):\n    '''\n    Write a python function to return the nth number in the Fibonacci series\n    '''\n    if n==1 or n==2:\n        return 1\n    return fibonacci(n-2)+fibonacci(n-1)\ndef sum_of_digits(n):\n    '''\n    Write a python function to return the sum of digits of a number\n    '''\n    if n==0:\n        return 0\n    return n%10+sum_of_digits(int(n/10))\ndef sum_of_squares(n):\n    '''\n    Write a python function to return the sum of the squares of all the digits of a number\n    '''\n    if n==0:\n        return 0\n    return n%10**2+sum_of_squares(int(n/10**2))\ndef sum_of_powers(n,p):\n    '''\n    Write a python function to return the sum of the pth power of each digit of a number\n    '''\n    if n==0:\n        return 0\n    return n%10**p+sum_of_powers(int(n/10**p),p)\ndef sum_of_cubes(n):\n    '''\n    Write a python function to return the sum of the cubes of all the digits of a number\n    '''\n    if n==0:\n        return 0\n    return n%10**3+sum_of_cubes(int(n/10**3))\ndef sum_of_squares_of_digits(n):\n    '''\n    Write a python function to return the sum of the squares of each digit of a number\n    '''\n    if n==0:\n        return 0\n    return n%10**2+sum_of_squares_of_digits(int(n/10**2))\ndef sum_of_cubes_of_digits(n):\n    '''\n    Write a python function to return the sum of the cubes of each digit of a number\n    '''\n    if n==0:\n        return 0\n    return n%10**3+sum_of_cubes_of_digits(int(n/10**3))\ndef sum_of_cubes_of_digits_of_powers(n,p):\n    '''\n    Write a python function to return the sum of the cubes of each digit of a number\n    '''\n    if n==0:\n        return 0\n    return n%10**p+sum_of_cubes_of_digits_of_powers(int(n/10**p),p)\ndef sum_of_squares_of_digits_of_powers(n,p):\n    '''\n    Write a python function to return the sum of the squares of each digit of a number\n    '''\n    if n==0:\n        return 0\n    return n%10**p+sum_of_squares_of_digits_of_powers(int(n/10**p),p)\ndef is_perfect(n):\n    '''\n    Write a python function to check if a number is perfect\n    '''\n    if n==0:\n        return False\n    if sum_of_squares(n)==n:\n        return True\n    return is_perfect(sum_of_squares(n))\ndef is_abundant(n):\n    '''\n    Write a python function to check if a number is abundant\n    '''\n    if n<12:\n        return False\n    if sum_of_squares(n)>n:\n        return True\n    return is_abundant(sum_of_squares(n))\ndef is_deficient(n):\n    '''\n    Write a python function to check if a number is deficient\n    '''\n    if n<12:\n        return False\n    if sum_of_squares(n)<n:\n        return True\n    return is_deficient(sum_of_squares(n))\ndef is_triangle(a,b,c):\n    '''\n    Write a python function to check if a triangle is valid\n    '''\n    if a+b>c and a+c>b and b+c>a:\n        return True\n    return False\ndef is_right_triangle(a,b,c):\n    '''\n    Write a python function to check if a right triangle is valid\n    '''\n    if a**2+b**2==c**2:\n        return True\n    return False\ndef is_right_triangle_inequality(a,b,c):\n    '''\n    Write a python function to check if a right triangle is valid\n    '''\n    if a**2+b**2>c**2:\n        return True\n    return False\ndef is_triangle_inequality(a,b,c):\n    '''\n    Write a python function to check if a triangle is valid\n    '''\n    if a+b>c and a+c>b and b+c>a:\n        return True\n    return False\ndef is_triangle_inequality_new(a,b,c):\n    '''\n    Write a python function to check if a triangle is valid\n    '''\n    if a**2+b**2>c**2:\n        return True\n    return False\ndef is_right_triangle_inequality_new(a,b,c):\n    '''\n    Write a python function to check if a right triangle is valid\n    '''\n    if a**2+b**2<c**2:\n        return True\n    return False\ndef is_triangle_inequality_new_2(a,b,c):\n    '''\n    Write a python function to check if a triangle is valid\n    '''\n    if a**2+b**2>c**2 or a**2+c**2>b**2 or b**2+c**2>a**2:\n        return True\n    return False\ndef is_triangle_inequality_new_3(a,b,c):\n    '''\n    Write a python function to check if a triangle is valid\n    '''\n    if a**2+b**2>c**2 or a**2+c**2>b**2 or b**2+c**2>a**2 or a**2+b**2==c**2:\n        return True\n    return False\ndef is_right_triangle_inequality_new_2(a,b,c):\n    '''\n    Write a python function to check if a right triangle is valid\n    '''\n    if a**2+b**2<c**2:\n        return True\n    return False\ndef is_right_triangle_inequality_new_3(a,b,c):\n    '''\n    Write a python function t",
        "num_ids": 8
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    flag = 0\n    for i in range(2, n):\n        if n % i == 0:\n            flag = 1\n            break\n    return flag\n",
        "num_ids": 39
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return all(n % i!= 0 for i in range(3, int(math.sqrt(n))+1, 2))\n",
        "num_ids": 75
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    flag = 0\n    if n <= 1:\n        return 0\n    if n == 2:\n        return 1\n    if n > 2 and n % 2 == 0:\n        return 0\n    if n > 2 and n % 3 == 0:\n        return 0\n    if n > 2 and n % 5 == 0:\n        return 0\n    for i in range(5,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return 0\n    return 1\n",
        "num_ids": 118
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<2:\n        return True\n    for i in xrange(2,n):\n        if n%i==0:\n            return True\n    return False\n",
        "num_ids": 42
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==1:\n        return 0\n    i=2\n    while i*i<=n:\n        if n%i==0:\n            return 0\n        i+=1\n    return 1\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n==1:\n        return 0\n    i=2\n    while i*i<=n:\n        if n%i==0:\n            return 0\n        i+=1\n    return 1\ndef is_prime_factor(n,m):\n    '''\n    Write a python function to identify prime factors of a number.\n    '''\n    if n%m==0:\n        return 1\n    else:\n        return 0\ndef is_perfect_square(n):\n    '''\n    Write a python function to identify perfect square numbers.\n    '''\n    if n==0:\n        return 1\n    if math.sqrt(n)==int(math.sqrt(n)):\n        return 1\n    return 0\ndef is_factorial(n):\n    '''\n    Write a python function to identify factorials.\n    '''\n    if n==1:\n        return 1\n    if n==0:\n        return 1\n    return n*is_factorial(n-1)\ndef is_permutation(n1,n2):\n    '''\n    Write a python function to identify permutation of two numbers.\n    '''\n    if n1==n2:\n        return 1\n    if n1==0 and n2==0:\n        return 1\n    if n1==0 or n2==0:\n        return 0\n    if n1>n2:\n        temp=n1\n        n1=n2\n        n2=temp\n    if n1%10==n2%10:\n        return is_permutation(n1/10,n2/10)*1\n    elif n1%10==n2%10:\n        return is_permutation(n1/10,n2/10)*0\n    else:\n        return 0\ndef is_palindrome(n):\n    '''\n    Write a python function to identify palindrome numbers.\n    '''\n    if n==0:\n        return 1\n    if n<0:\n        return 0\n    temp=n\n    rev=0\n    while temp:\n        rev=(rev*10)+temp%10\n        temp=temp/10\n    if n==rev:\n        return 1\n    else:\n        return 0\ndef is_palindrome_number(n):\n    '''\n    Write a python function to identify palindrome numbers.\n    '''\n    if n==0:\n        return 1\n    if n<0:\n        return 0\n    temp=n\n    rev=0\n    while temp:\n        rev=(rev*10)+temp%10\n        temp=temp/10\n    if n==rev:\n        return 1\n    else:\n        return 0\ndef is_happy(n):\n    '''\n    Write a python function to identify happy numbers.\n    '''\n    if n==1:\n        return 1\n    if n==0:\n        return 0\n    n=abs(n)\n    a=n\n    b=n\n    c=n\n    while True:\n        a=b\n        b=c\n        c=a+b\n        if c==1:\n            return 1\n        if c==0 or c==2:\n            return 0\ndef is_happy_number(n):\n    '''\n    Write a python function to identify happy numbers.\n    '''\n    if n==1:\n        return 1\n    if n==0:\n        return 0\n    n=abs(n)\n    a=n\n    b=n\n    c=n\n    while True:\n        a=b\n        b=c\n        c=a+b\n        if c==1:\n            return 1\n        if c==0 or c==2:\n            return 0\ndef is_power(a,b):\n    '''\n    Write a python function to identify power of two numbers.\n    '''\n    if a==b:\n        return 1\n    if b==0:\n        return 1\n    if b==1:\n        return 1\n    if b==2:\n        return a%2\n    if b%2==0:\n        return is_power(a,b/2)*is_power(a,b/2)\n    else:\n        return is_power(a,b-1)*a\ndef is_power_of_two(n):\n    '''\n    Write a python function to identify power of two numbers.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return 1\n    return is_power(2,n-1)*2\ndef is_power_of_three(n):\n    '''\n    Write a python function to identify power of three numbers.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return 1\n    if n==2:\n        return 1\n    if n%3==0:\n        return is_power(3,n/3)*1\n    else:\n        return is_power(3,n-1)*3\ndef is_power_of_four(n):\n    '''\n    Write a python function to identify power of four numbers.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return 1\n    if n==2:\n        return 1\n    if n==3:\n        return 1\n    if n%4==0:\n        return is_power(4,n/4)*1\n    else:\n        return is_power(4,n-1)*4\ndef is_power_of_five(n):\n    '''\n    Write a python function to identify power of five numbers.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return 1\n    if n==2:\n        return 1\n    if n==3:\n        return 1\n    if n%5==0:\n        return is_power(5,n/5)*1\n    else:\n        return is_power(5,n-1)*5\ndef is_power_of_ten(n):\n    '''\n    Write a python function to identify power of ten numbers.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return 1\n    if n==2:\n        return 1\n    if n==3:\n        return 1\n    if n%10==0:\n        return is_power(10,n/10)*1\n    else:\n        return is_power(10,n-1)*10\ndef is_power_of_twenty(n):\n    '''\n    Write a python function to identify power of twenty numbers.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return 1\n    if n==2:\n        return 1\n    if n==3:\n        return 1\n    if n%20==0:\n        return is_power(20,n/20)*1\n    else:\n        return is_power(20,n-1)*20\ndef is_power_of_forty(n):\n    '''\n    Write a python function to identify power of forty numbers.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return 1\n    if n==2:\n        return 1\n    if n==3:\n        return 1\n    if n%40==0:\n        return is_power(40,n/40)*1\n    else:\n        return is_power(40,n-1)*40\ndef is_power_of_fifty(n):\n    '''\n    Write a python function to identify power of fifty numbers.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return 1\n    if n==2:\n        return 1\n    if n==3:\n        return 1\n    if n%50==0:\n        return is_power(50,n/50)*1\n    else:\n        return is_power(50,n-1)*50\ndef is_power_of_sixty(n):\n    '''\n    Write a python function to identify power of sixty numbers.\n    '''\n    if n==0:\n        return 1\n    if n==",
        "num_ids": 17
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in range(n):\n        hq.heappush(h,nums[i])\n    return [hq.heappop(h) for i in range(n)]\ndef smallest_largest_sum(nums):\n    '''\n    Find the smallest and largest sum of an array of positive integers.\n    '''\n    n = len(nums)\n    smallest = sum(nums[0:2])\n    largest = sum(nums[0:2])\n    for i in range(2,n):\n        curr_sum = sum(nums[i:i+2])\n        if curr_sum < smallest:\n            smallest = curr_sum\n        if curr_sum > largest:\n            largest = curr_sum\n    return (smallest,largest)\ndef my_solution(nums):\n    '''\n    Find the sum of the proper divisors of a positive integer, n, where n is the integer value.\n    '''\n    result = 0\n    for i in range(1,nums):\n        if nums % i == 0:\n            result += i\n    return result\ndef sum_divisors(n):\n    '''\n    Find the sum of the proper divisors of a positive integer, n, where n is the integer value.\n    '''\n    result = 1\n    for i in range(2,n):\n        if n % i == 0:\n            result += i\n    return result\ndef max_product(lst):\n    '''\n    Find the maximum product of two numbers in a list.\n    '''\n    result = 0\n    for i in range(len(lst)-1):\n        for j in range(i+1,len(lst)):\n            if lst[i]*lst[j] > result:\n                result = lst[i]*lst[j]\n    return result\ndef find_max_product(lst):\n    '''\n    Find the maximum product of two numbers in a list.\n    '''\n    result = 0\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if lst[i]*lst[j] > result:\n                result = lst[i]*lst[j]\n    return result\ndef is_palindrome(s):\n    '''\n    Find if a string is a palindrome.\n    '''\n    return s == s[::-1]\ndef find_all_rotations(s):\n    '''\n    Find all rotations of a string.\n    '''\n    rotations = [s]\n    for i in range(1,len(s)):\n        rotations.append(s[i:] + s[:i])\n    return rotations\ndef reverse_words(s):\n    '''\n    Reverse each word in a string.\n    '''\n    return''.join([word[::-1] for word in s.split(' ')])\ndef find_palindrome(s):\n    '''\n    Find the longest palindrome in a string.\n    '''\n    def helper(s,left,right):\n        while left >=0 and right < len(s) and s[left] == s[right]:\n            left -= 1\n            right += 1\n        return s[left+1:right]\n    res = ''\n    for i in range(len(s)):\n        temp = helper(s,i,i)\n        if len(temp) > len(res):\n            res = temp\n        temp = helper(s,i,i+1)\n        if len(temp) > len(res):\n            res = temp\n    return res\ndef sorted_scores(unsorted_scores,h_index):\n    '''\n    Find the score of the student who got the highest score in an exam with some possible breaking ties.\n    '''\n    i = len(unsorted_scores)-1\n    while i >= 0 and unsorted_scores[i] <= h_index:\n        i -= 1\n    return unsorted_scores[i+1]\ndef max_heap(lst):\n    '''\n    Given a list of numbers, return a max heap.\n    '''\n    h = []\n    for i in range(len(lst)):\n        hq.heappush(h,lst[i])\n    return h\ndef min_heap(lst):\n    '''\n    Given a list of numbers, return a min heap.\n    '''\n    h = []\n    for i in range(len(lst)):\n        hq.heappush(h,-1*lst[i])\n    return h\ndef heap_add(h,val):\n    '''\n    Add val to the min heap, where h is the min heap and val is a number.\n    '''\n    hq.heappush(h,val)\ndef heap_pop(h):\n    '''\n    Pop the min value from the min heap, where h is the min heap and val is a number.\n    '''\n    return hq.heappop(h)\ndef find_kth_largest(lst,k):\n    '''\n    Find the kth largest number in a list.\n    '''\n    heap = min_heap(lst)\n    for i in range(k):\n        heap_pop(heap)\n    return heap_pop(heap)\ndef find_kth_smallest(lst,k):\n    '''\n    Find the kth smallest number in a list.\n    '''\n    heap = max_heap(lst)\n    for i in range(k):\n        heap_pop(heap)\n    return heap_pop(heap)\ndef longest_substring(s):\n    '''\n    Find the length of the longest substring without repeating characters.\n    '''\n    counts = {}\n    max_count = 0\n    max_start = 0\n    for i in range(len(s)):\n        if s[i] in counts:\n            counts[s[i]] += 1\n            if counts[s[i]] > max_count:\n                max_count = counts[s[i]]\n                max_start = i - counts[s[i]]\n            if counts[s[i]] == max_count:\n                max_start = i - counts[s[i]]\n        else:\n            counts[s[i]] = 1\n    return max_start\ndef find_duplicate_char(s):\n    '''\n    Find the duplicate character in a string.\n    '''\n    counts = {}\n    for i in range(len(s)):\n        if s[i] in counts:\n            counts[s[i]] += 1\n        else:\n            counts[s[i]] = 1\n    for key,val in counts.iteritems():\n        if val > 1:\n            return key\n    return None\ndef all_equal(lst):\n    '''\n    Check if all the elements in a list are equal.\n    '''\n    return lst[1:] == lst[:-1]\ndef is_anagram(s,t):\n    '''\n    Check if two strings are anagrams of each other.\n    '''\n    return sorted(s) == sorted(t)\ndef is_permutation(s,t):\n    '''\n    Check if two strings are permutations of each other.\n    '''\n    if len(s)!= len(t):\n        return False\n    h = {}\n    for i in range(len(s)):\n        if s[i] in h:\n            h[s[i]] += 1\n        else:\n            h[s[i]] = 1\n        if t[i] in h:\n            h[t[i]] -= 1\n        else:\n            h[t[i]] = -1\n    for i in h:\n        if h[i]!= 0:\n            return False\n    return True\ndef is_subsequence(s,t):\n    '''\n    Check if a string is a subsequence of a larger string.\n    '''\n    for i in range(len(s)):\n        if t[i] == s[i]:\n            continue\n        else:\n            return False\n    return True\ndef is_substring(s,t):",
        "num_ids": 51
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    result = []\n    for i in range(0,n):\n        hq.heappush(result,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]>result[0]:\n            hq.heappop(result)\n            hq.heappush(result,nums[i])\n    return result\n",
        "num_ids": 93
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq = []\n    for i in range(n):\n        hq.append(-nums[i])\n    hq.sort()\n    ans = []\n    for i in range(n):\n        ans.append(-hq[i])\n    return ans\n",
        "num_ids": 65
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq=[]\n    hq.append(nums[0])\n    for i in range(1,len(nums)):\n        if hq[0]<nums[i]:\n            hq.pop(0)\n            hq.append(nums[i])\n        if len(hq)>n:\n            hq.pop(0)\n    return hq\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq=[]\n    hq.append(nums[0])\n    for i in range(1,len(nums)):\n        if hq[0]>nums[i]:\n            hq.pop(0)\n            hq.append(nums[i])\n        if len(hq)>n:\n            hq.pop(0)\n    return hq\ndef heap_heap_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq=[]\n    hq.append(nums[0])\n    for i in range(1,len(nums)):\n        if hq[0]<nums[i]:\n            hq.pop(0)\n            hq.append(nums[i])\n        if len(hq)>n:\n            hq.pop(0)\n    return hq\ndef heap_heap_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq=[]\n    hq.append(nums[0])\n    for i in range(1,len(nums)):\n        if hq[0]>nums[i]:\n            hq.pop(0)\n            hq.append(nums[i])\n        if len(hq)>n:\n            hq.pop(0)\n    return hq\ndef heap_insert(heap,val):\n    hq=[]\n    hq.append(val)\n    if len(heap)==0:\n        hq.append(val)\n    else:\n        hq.append(heap[0])\n        if heap[0]<val:\n            hq.pop(0)\n            hq.append(val)\n        else:\n            hq.pop(0)\n    return hq\ndef heap_pop(heap):\n    hq=[]\n    if len(heap)==0:\n        hq.append(-1)\n    else:\n        hq.append(heap[0])\n        hq.append(heap.pop(0))\n    return hq\ndef heap_sort(heap):\n    '''\n    Write a function that takes a list and returns a new list that is sorted in ascending order.\n    '''\n    heap=[]\n    for i in heap:\n        hq=heap_insert(heap,i)\n    return hq\ndef heap_build(A,i):\n    '''\n    Write a function that takes an unsorted array A and a value i and returns the index of the value i in A.\n    '''\n    for i in range(len(A)):\n        if A[i]==i:\n            return i\n    return -1\ndef heap_find(heap,n):\n    '''\n    Write a function to find the nth smallest number in a heap.\n    '''\n    count=1\n    hq=heap[:]\n    hq.sort(reverse=True)\n    return hq[n-1]\ndef heap_sort2(A,i):\n    '''\n    Write a function that takes a list and returns a new list that is sorted in ascending order.\n    '''\n    heap=[]\n    for i in A:\n        hq=heap_insert(heap,i)\n    return hq\ndef heap_find2(heap,n):\n    '''\n    Write a function to find the nth largest number in a heap.\n    '''\n    count=1\n    hq=heap[:]\n    hq.sort()\n    return hq[n-1]\ndef heap_build2(A,i):\n    '''\n    Write a function to find the index of the nth smallest number in a heap.\n    '''\n    count=1\n    hq=[]\n    for i in A:\n        hq=heap_insert(hq,i)\n    return heap_find(hq,count)\ndef heap_find3(heap,n):\n    '''\n    Write a function to find the nth largest number in a heap.\n    '''\n    count=1\n    hq=[]\n    for i in A:\n        hq=heap_insert(hq,i)\n    return heap_find(hq,count)\ndef heap_build3(A,i):\n    '''\n    Write a function to find the index of the nth smallest number in a heap.\n    '''\n    count=1\n    hq=[]\n    for i in A:\n        hq=heap_insert(hq,i)\n    return heap_find2(hq,count)\ndef heap_find4(heap,n):\n    '''\n    Write a function to find the nth largest number in a heap.\n    '''\n    count=1\n    hq=[]\n    for i in A:\n        hq=heap_insert(hq,i)\n    return heap_find2(hq,count)\ndef heap_build4(A,i):\n    '''\n    Write a function to find the index of the nth smallest number in a heap.\n    '''\n    count=1\n    hq=[]\n    for i in A:\n        hq=heap_insert(hq,i)\n    return heap_find3(hq,count)\ndef heap_find5(heap,n):\n    '''\n    Write a function to find the nth largest number in a heap.\n    '''\n    count=1\n    hq=[]\n    for i in A:\n        hq=heap_insert(hq,i)\n    return heap_find3(hq,count)\ndef heap_build5(A,i):\n    '''\n    Write a function to find the index of the nth smallest number in a heap.\n    '''\n    count=1\n    hq=[]\n    for i in A:\n        hq=heap_insert(hq,i)\n    return heap_find4(hq,count)\ndef heap_find6(heap,n):\n    '''\n    Write a function to find the nth largest number in a heap.\n    '''\n    count=1\n    hq=[]\n    for i in A:\n        hq=heap_insert(hq,i)\n    return heap_find4(hq,count)\ndef heap_build6(A,i):\n    '''\n    Write a function to find the index of the nth smallest number in a heap.\n    '''\n    count=1\n    hq=[]\n    for i in A:\n        hq=heap_insert(hq,i)\n    return heap_find5(hq,count)\ndef heap_find7(heap,n):\n    '''\n    Write a function to find the nth largest number in a heap.\n    '''\n    count=1\n    hq=[]\n    for i in A:\n        hq=heap_insert(hq,i)\n    return heap_find5(hq,count)\ndef heap_build7(A,i):\n    '''\n    Write a function to find the index of the nth smallest number in a heap.\n    '''\n    count=1\n    hq=[]\n    for i in A:\n        hq=heap_insert(hq,i)\n    return heap_find6(hq,count)\ndef heap_find8(heap,n):\n    '''\n    Write a function to find the nth largest number in a heap.\n    '''\n    count=1\n",
        "num_ids": 7
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if nums == []:\n        return []\n    heapq.heapify(nums)\n    print nums\n    res = []\n    for i in range(n):\n        res.append(heapq.heappop(nums))\n    return res\n",
        "num_ids": 67
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        hq.heappop(nums)\n    return [hq.heappop(nums) for i in range(n)]\n",
        "num_ids": 56
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    q = []\n    for i in range(n):\n        hq.heappush(q,num)\n    return q\ndef find_the_kth_largest(nums,k):\n    '''\n    Write a function that takes in a list of numbers and an integer k and returns the kth largest integer in the list.\n    '''\n    hq.heapify(nums)\n    return hq.nlargest(k,nums)\ndef find_the_kth_smallest(nums,k):\n    '''\n    Write a function that takes in a list of numbers and an integer k and returns the kth smallest integer in the list.\n    '''\n    hq.heapify(nums)\n    return hq.nsmallest(k,nums)\ndef find_median_sorted_arrays(nums1,nums2):\n    '''\n    Write a function that takes in two non-empty arrays of integers, nums1 and nums2, both sorted in non-decreasing order,\n    and returns a new array containing their median.\n    '''\n    total = len(nums1) + len(nums2)\n    if total % 2 == 0:\n        return (nums1[int(total/2)]+nums2[int(total/2)])/2.0\n    else:\n        return nums1[int((total+1)/2)]\ndef find_median_sorted_arrays_fast(nums1,nums2):\n    '''\n    Write a function that takes in two non-empty arrays of integers, nums1 and nums2, both sorted in non-decreasing order,\n    and returns a new array containing their median.\n    '''\n    n1 = len(nums1)\n    n2 = len(nums2)\n    if n1 > n2:\n        nums1,nums2 = nums2,nums1\n    if n1 == 0:\n        return (nums2[n2/2]+nums2[(n2/2)-1])/2.0\n    if n2 == 0:\n        return (nums1[n1/2]+nums1[(n1/2)-1])/2.0\n    low = 0\n    high = n1\n    while low <= high:\n        i = int((low+high)/2)\n        j = int((n1+n2)/2) - i\n        if i > 0 and nums1[i-1] > nums2[j]:\n            high = i - 1\n        elif i < n1 and nums1[i] < nums2[j-1]:\n            low = i + 1\n        else:\n            if i == 0:\n                left_max = nums2[j-1]\n            elif j == 0:\n                left_max = nums1[i-1]\n            else:\n                left_max = max(nums1[i-1],nums2[j-1])\n            if (n1+n2)%2 == 1:\n                return left_max\n            if i == n1:\n                right_min = nums2[j]\n            elif j == n2:\n                right_min = nums1[i]\n            else:\n                right_min = min(nums1[i],nums2[j])\n            return (left_max + right_min)/2.0\ndef find_the_smallest_positive_divisor(n):\n    '''\n    Given a positive integer n, find the smallest positive integer that divides n evenly.\n    '''\n    low = 1\n    high = n\n    while low < high:\n        i = int((low+high)/2)\n        if i*i > n:\n            high = i\n        elif i*i < n:\n            low = i+1\n        else:\n            return i\ndef find_the_smallest_positive_divisor_fast(n):\n    '''\n    Given a positive integer n, find the smallest positive integer that divides n evenly.\n    '''\n    low = 1\n    high = n\n    while low < high:\n        i = int((low+high)/2)\n        if i*i <= n:\n            low = i+1\n        else:\n            high = i\n    return low\ndef find_the_smallest_positive_divisor_fast2(n):\n    '''\n    Given a positive integer n, find the smallest positive integer that divides n evenly.\n    '''\n    low = 1\n    high = n\n    while low < high:\n        i = int((low+high)/2)\n        if i*i <= n:\n            low = i+1\n        else:\n            high = i\n    return high\ndef is_anagram(str1,str2):\n    '''\n    Write a function that takes in two strings and returns a boolean indicating whether the strings are anagrams.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    if len(str1) == 0:\n        return True\n    dic = {}\n    for c in str1:\n        dic[c] = dic.get(c,0) + 1\n    for c in str2:\n        dic[c] = dic.get(c,0) - 1\n    for i in dic.values():\n        if i!= 0:\n            return False\n    return True\ndef is_anagram_fast(str1,str2):\n    '''\n    Write a function that takes in two strings and returns a boolean indicating whether the strings are anagrams.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    if len(str1) == 0:\n        return True\n    i = 0\n    j = 0\n    while i < len(str1):\n        if str1[i]!= str2[j]:\n            return False\n        i += 1\n        j += 1\n    return True\ndef count_vowels(s):\n    '''\n    Write a function that takes in a string and returns a tuple with the number of vowels (upper- and lower-case)\n    and the number of consonants in the string.\n    '''\n    num_vowels = 0\n    num_consonants = 0\n    for c in s:\n        if c in \"aeiouAEIOU\":\n            num_vowels += 1\n        else:\n            num_consonants += 1\n    return num_vowels,num_consonants\ndef count_vowels_fast(s):\n    '''\n    Write a function that takes in a string and returns a tuple with the number of vowels (upper- and lower-case)\n    and the number of consonants in the string.\n    '''\n    num_vowels = 0\n    num_consonants = 0\n    for c in s:\n        if c in \"aeiouAEIOU\":\n            num_vowels += 1\n        else:\n            num_consonants += 1\n    return num_vowels,num_consonants\ndef string_rotation(s1,s2):\n    '''\n    Write a function that takes in two strings and returns a boolean indicating whether the strings are rotations of each other.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    s2_prime = s2 + s2\n    if s1 in s2_prime:\n        return True\n    return False\ndef string_rotation_fast(s1,s2):\n    '''\n    Write a function that takes in two strings and returns a boolean indicating whether the strings are rotations of each other.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    i = 0\n    j = len(s1) - 1\n    while i < len(s1):\n        if s1[i]!= s2[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\ndef is_permutation(str1,str2):\n    '''\n    Write a function that takes in two strings and returns a boolean indicating whether the strings are permutations of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    dic = {}\n    for c in str1:\n        dic[c] ",
        "num_ids": 41
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]>heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap,nums[i])\n    return heap\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap=[]\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]<heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap,nums[i])\n    return heap\ndef heap_queue_smallest_or_largest(nums,n,smallest):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap=[]\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    for i in range(n,len(nums)):\n        if smallest:\n            if nums[i]<heap[0]:\n                hq.heappop(heap)\n                hq.heappush(heap,nums[i])\n        else:\n            if nums[i]>heap[0]:\n                hq.heappop(heap)\n                hq.heappush(heap,nums[i])\n    return heap\ndef heap_queue_sample(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap=[]\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]<heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap,nums[i])\n    return heap\ndef heap_queue_sample_best(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap=[]\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]<heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap,nums[i])\n    return heap\ndef heap_queue_sample_best_2(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap=[]\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]<heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap,nums[i])\n    return heap\ndef heap_queue_sample_best_3(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap=[]\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]<heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap,nums[i])\n    return heap\ndef heap_queue_sample_best_4(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap=[]\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]<heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap,nums[i])\n    return heap\ndef heap_queue_sample_best_5(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap=[]\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]<heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap,nums[i])\n    return heap\ndef heap_queue_sample_best_6(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap=[]\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]<heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap,nums[i])\n    return heap\ndef heap_queue_sample_best_7(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap=[]\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]<heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap,nums[i])\n    return heap\ndef heap_queue_sample_best_8(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap=[]\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]<heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap,nums[i])\n    return heap\ndef heap_queue_sample_best_9(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap=[]\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]<heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap,nums[i])\n    return heap\ndef heap_queue_sample_best_10(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap=[]\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]<heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap,nums[i])\n    return heap\ndef heap_queue_sample_best_1",
        "num_ids": 106
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    queue =[]\n    for num in nums:\n        if len(queue)<n:\n            hq.heappush(queue,num)\n        else:\n            if num>queue[0]:\n                hq.heappop(queue)\n                hq.heappush(queue,num)\n    return queue\n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    queue =[]\n    for num in nums:\n        if len(queue)<n:\n            hq.heappush(queue,num)\n        else:\n            if num<queue[0]:\n                hq.heappop(queue)\n                hq.heappush(queue,num)\n    return queue\ndef max_heap(nums):\n    '''\n    Write a function to find the maximum and minimum numbers from a given list of numbers.\n    '''\n    hq.heapify(nums)\n    return hq.nlargest(2,nums)[0]\ndef min_heap(nums):\n    '''\n    Write a function to find the maximum and minimum numbers from a given list of numbers.\n    '''\n    hq.heapify(nums)\n    return hq.nsmallest(2,nums)[0]\ndef merge(nums1,nums2):\n    '''\n    Write a function to merge two sorted lists into a new list.\n    '''\n    return hq.merge(nums1,nums2)\ndef partition(nums,k):\n    '''\n    Write a function to partition a list based on the kth element.\n    '''\n    nums.sort(key=lambda x:x[k])\n    return nums\ndef quick_sort(nums,start,end):\n    '''\n    Write a function to partition a list based on the kth element.\n    '''\n    if start<end:\n        q = partition(nums,start,end)\n        quick_sort(nums,0,q-1)\n        quick_sort(nums,q+1,end)\n    return nums\ndef quick_sort_with_counter(nums,start,end):\n    '''\n    Write a function to partition a list based on the kth element.\n    '''\n    if start<end:\n        q = partition(nums,start,end)\n        quick_sort_with_counter(nums,0,q-1)\n        quick_sort_with_counter(nums,q+1,end)\n    return nums\ndef insert_sort(nums):\n    '''\n    Write a function to sort a list of numbers using insertion sort\n    '''\n    for i in range(1,len(nums)):\n        temp = nums[i]\n        j=i-1\n        while j>=0 and nums[j]>temp:\n            nums[j+1]=nums[j]\n            j -= 1\n        nums[j+1] = temp\n    return nums\ndef selection_sort(nums):\n    '''\n    Write a function to sort a list of numbers using selection sort\n    '''\n    for i in range(len(nums)):\n        min_idx = i\n        for j in range(i,len(nums)):\n            if nums[min_idx] > nums[j]:\n                min_idx = j\n        nums[i],nums[min_idx] = nums[min_idx],nums[i]\n    return nums\ndef bubble_sort(nums):\n    '''\n    Write a function to sort a list of numbers using bubble sort\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums)-1-i):\n            if nums[j]>nums[j+1]:\n                nums[j],nums[j+1] = nums[j+1],nums[j]\n    return nums\ndef merge_sort(nums):\n    '''\n    Write a function to sort a list of numbers using merge sort\n    '''\n    if len(nums)>1:\n        mid = len(nums)//2\n        nums1 = nums[:mid]\n        nums2 = nums[mid:]\n        merge_sort(nums1)\n        merge_sort(nums2)\n        i1=0\n        i2=0\n        i3=0\n        while i1<len(nums1) and i2<len(nums2):\n            if nums1[i1]<nums2[i2]:\n                nums[i3]=nums1[i1]\n                i1+=1\n            else:\n                nums[i3]=nums2[i2]\n                i2+=1\n            i3+=1\n        while i1<len(nums1):\n            nums[i3]=nums1[i1]\n            i1+=1\n            i3+=1\n        while i2<len(nums2):\n            nums[i3]=nums2[i2]\n            i2+=1\n            i3+=1\n    return nums\ndef shell_sort(nums):\n    '''\n    Write a function to sort a list of numbers using shell sort\n    '''\n    h = len(nums)//2\n    while h>0:\n        for i in range(h,len(nums)):\n            j = i\n            while j>=h and nums[j]<nums[j-h]:\n                nums[j],nums[j-h] = nums[j-h],nums[j]\n                j -= h\n        h = h//2\n    return nums\ndef heap_sort(nums):\n    '''\n    Write a function to sort a list of numbers using heap sort\n    '''\n    for i in range(len(nums)-1,0,-1):\n        nums[i],nums[0] = nums[0],nums[i]\n        heapq.heapify(nums[:i])\n    return nums\ndef insertion_sort(nums):\n    '''\n    Write a function to sort a list of numbers using insertion sort\n    '''\n    for i in range(1,len(nums)):\n        temp = nums[i]\n        j=i-1\n        while j>=0 and nums[j]>temp:\n            nums[j+1]=nums[j]\n            j-=1\n        nums[j+1] = temp\n    return nums\ndef shell_sort(nums):\n    '''\n    Write a function to sort a list of numbers using shell sort\n    '''\n    h = len(nums)//2\n    while h>0:\n        for i in range(h,len(nums)):\n            j = i\n            while j>=h and nums[j]<nums[j-h]:\n                nums[j],nums[j-h] = nums[j-h],nums[j]\n                j -= h\n        h = h//2\n    return nums\ndef heap_sort_with_counter(nums):\n    '''\n    Write a function to sort a list of numbers using heap sort\n    '''\n    for i in range(len(nums)-1,0,-1):\n        heapq.heapify(nums)\n    return nums\ndef radix_sort(nums):\n    '''\n    Write a function to sort a list of numbers using radix sort\n    '''\n    for i in range(1,10):\n        for j in range(len(nums)):\n            radix = nums[j]//(10**i)%10\n            bucket = [[] for _ in range(10)]\n            bucket[radix].append(nums[j])\n            nums[j] = bucket[radix].pop()\n    return nums\ndef counting_sort(nums):\n    '''\n    Write a function to sort a list of numbers using counting sort\n    '''\n    d = max(nums)-min(nums)\n    bucket = [0]*(",
        "num_ids": 25
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    result=[]\n    for i in range(n):\n        hq.heappush(result,-nums[i])\n    return [x for x in result]\n",
        "num_ids": 42
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x==2 or x&(x-1)==0\n",
        "num_ids": 18
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    y = bin(x).split('b')[1]\n    z = y[0] + y[1] + y[2] + y[3]\n    if z == '1' or z == '0': \n        return True\n    else: \n        return False\n",
        "num_ids": 68
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0\n    \ndef is_Power_Of_Two_or_Power_Of_Two_is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0 or (x & (x-1)) == 0\n    \ndef is_Power_Of_Two_or_Power_Of_Two_is_Power_Of_Two_in_a_power_of_two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0\n    \ndef is_Power_Of_Two_or_Power_Of_Two_is_Power_Of_Two_in_a_power_of_two_or_power_of_two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0\n    \ndef is_Power_Of_Two_or_Power_Of_Two_is_Power_Of_Two_in_a_power_of_two_or_power_of_two_or_power_of_two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0\n    \ndef is_Power_Of_Two_or_Power_Of_Two_is_Power_Of_Two_in_a_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0\n    \ndef is_Power_Of_Two_or_Power_Of_Two_is_Power_Of_Two_in_a_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0\n    \ndef is_Power_Of_Two_or_Power_Of_Two_is_Power_Of_Two_in_a_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0\n    \ndef is_Power_Of_Two_or_Power_Of_Two_is_Power_Of_Two_in_a_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0\n    \ndef is_Power_Of_Two_or_Power_Of_Two_is_Power_Of_Two_in_a_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0\n    \ndef is_Power_Of_Two_or_Power_Of_Two_is_Power_Of_Two_in_a_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0 or (x & (x-1)) == 0\n    \ndef is_Power_Of_Two_or_Power_Of_Two_is_Power_Of_Two_in_a_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two_or_power_of_two (x): \n    '''\n    Write a pytho",
        "num_ids": 8
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1)==0: \n        return True \n    else:\n        return False \n",
        "num_ids": 30
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x == 0):\n        return 1\n    if (x % 2!= 0):\n        return 0\n    return is_Power_Of_Two(x/2)\n",
        "num_ids": 44
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False\n    \ndef is_Power_Of_Two_Recursive (x, y): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if y == 0:\n        return True\n    elif (x & (x - 1)) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 40
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    if x == 1:\n        return False\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 49
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x-1) == 0\n",
        "num_ids": 14
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0 or x == 1: \n        return True\n    while x % 2 == 0: \n        x /= 2\n    return x == 1\n",
        "num_ids": 40
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    if (x & (x-1)) == 0: \n        return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w+', text)\n",
        "num_ids": 18
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # using regex to find all words that are at least 4 characters long\n    p = re.compile(r'[\\w]+')\n    return p.findall(text)\n",
        "num_ids": 44
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    list=[]\n    for i in text:\n        if len(i)>=4:\n            list.append(i)\n    return list\n",
        "num_ids": 37
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    find_words = re.findall('[a-zA-Z]+', text)\n    return [word for word in find_words if len(word) > 4]\n",
        "num_ids": 43
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall('[a-zA-Z0-9]+', text)\n    for word in words:\n        if len(word) > 4:\n            print word\n",
        "num_ids": 46
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(\"[a-zA-Z0-9]{4,}\", text)\n",
        "num_ids": 28
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    res = []\n    for word in text.split():\n        if len(word) >= 4:\n            res.append(word)\n    return res\n",
        "num_ids": 38
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    list_of_words = text.split()\n    for word in list_of_words:\n        if len(word)>=4:\n            result.append(word)\n    return result\n",
        "num_ids": 53
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall('\\w{4,}', text)\n",
        "num_ids": 19
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    res = re.findall(r'\\w+',text)\n    return [r for r in res if len(r)>4]\n",
        "num_ids": 36
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n",
        "num_ids": 31
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return list(map(lambda x: x ** 2, nums))\n",
        "num_ids": 19
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n",
        "num_ids": 31
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num * num)\n",
        "num_ids": 18
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in range(len(nums)):\n        squares.append(nums[i] ** 2)\n    return squares\n",
        "num_ids": 40
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 0:\n        return 0\n    if len(str) == 1:\n        return 0\n    if len(str) == 2:\n        if str[0]!= str[1]:\n            return 1\n        else:\n            return 0\n    if len(str) == 3:\n        if str[0]!= str[2]:\n            return 1\n        elif str[1]!= str[2]:\n            return 2\n        else:\n            return 0\n    return 1+min(find_Rotations(str[1:]),find_Rotations(str[1:] + str[0]))\n",
        "num_ids": 150
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return\n",
        "num_ids": 5
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    s = str\n    temp = s+s\n    if s==temp:\n        return 0\n    for i in range(0, len(s)):\n        if s[i:] == temp[i:]:\n            return i\n        \n    return -1\nprint find_Rotations(\"arace\")\n",
        "num_ids": 73
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if str == '':\n        return 0\n    str_len = len(str)\n    if str_len == 1:\n        return 0\n    if str_len == 2:\n        if str == str[::-1]:\n            return 0\n        else:\n            return 1\n",
        "num_ids": 68
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str) \n    l = 0\n    h = n-1\n    while l<h: \n        if str[l]!= str[h]: \n            return 2\n        if str[l] == str[h]: \n            return 2\n        l = l + 1\n        h = h - 1\n    return 0\n",
        "num_ids": 84
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    n = len(str)\n    for i in range(n):\n        rotation_count = 0\n        j = 0\n        \n        for j in range(n):\n            if str[j]!= str[(j + i)%n]:\n                rotation_count += 1\n        \n        if rotation_count == 0:\n            return 0\n        else:\n            rotation_count = rotation_count % n\n            \n            return rotation_count\n            \n            \n    \n",
        "num_ids": 117
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str)==0:\n        return 0\n    temp = str[-1]+find_Rotations(str[:-1])\n    if temp == str:\n        return 1\n    else:\n        return 1+find_Rotations(str[:-1])\n",
        "num_ids": 65
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if str == str[::-1]:\n        return 0\n    if len(str) == 1:\n        return 1\n    else:\n        if str[:len(str)/2] == str[len(str)/2:]:\n            return 1\n        else:\n            return 2 + find_Rotations(str[:len(str)/2])\n",
        "num_ids": 84
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    for i in range(len(str)): \n        if str[0:i] == str[i:]: \n            return (len(str) - i) \n",
        "num_ids": 43
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    for i in range(len(str)):\n        temp = str[i:] + str[0:i]\n        if temp == temp[::-1]:\n            return len(str) - i\n    return 0\n",
        "num_ids": 53
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i = s.find(ch)\n    l = len(s)\n    if i==l-1:\n        return s[:i]\n    else:\n        return s[:i]+s[i+1:]\n",
        "num_ids": 55
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    string = s\n    x = string.replace(ch, '')\n    return x\n",
        "num_ids": 23
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    new_s = s[:s.find(ch)] + s[s.rfind(ch)+1:]\n    return new_s\n",
        "num_ids": 35
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    result = s[:s.index(ch)] + s[s.index(ch) + 1:]\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    l=s.find(ch)\n    s=s[0:l]+s[l+1:]\n    l=s.find(ch)\n    s=s[0:l]+s[l+1:]\n    return s\n",
        "num_ids": 58
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\")\n",
        "num_ids": 13
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    try:\n        if ch in s:\n            s=s.replace(ch, \"\")\n            s=s.replace(ch,\"\")\n        return s\n    except:\n        return \"Enter string only.\"\n",
        "num_ids": 52
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\",1).replace(ch,\"\")\n",
        "num_ids": 20
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\", 1).replace(ch, \"\")\n",
        "num_ids": 21
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch, '', 1)\n    s = s.replace(ch, '', 1)\n    return s\n",
        "num_ids": 34
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted([[sum(x),x] for x in M])\n",
        "num_ids": 19
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    m = len(M)\n    n = len(M[0])\n    # create a new array with the same number of rows as the input matrix\n    A = []\n    # iterate through each row of the input matrix, add them to A\n    for i in range(0,m):\n        A.append([])\n        for j in range(0,n):\n            A[i].append(M[i][j])\n    # sort A by its rows, which is the sum of each row\n    A.sort(key=sum)\n    # iterate through each row in A, and add them to M\n    for i in range(0,m):\n        for j in range(0,n):\n            M[i][j] = A[i][j]\n    return M\n",
        "num_ids": 185
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    m = len(M[0])\n    \n    for row in range(n):\n        for col in range(m):\n            # set row to -1 in every position not 0\n            for j in range(row):\n                M[row][col] -= M[j][col]\n            \n            # set col to -1 in every position not 0\n            for i in range(col):\n                M[row][col] -= M[row][i]\n                \n    # create a new list for each row\n    M = list(zip(*M))\n    \n    # sort the new list\n    return sorted(M, key=lambda x: sum(x))\n    \ndef maximize_matrix(M):\n    '''\n    Write a function to maximize a given matrix.\n    '''\n    n = len(M)\n    m = len(M[0])\n    \n    for row in range(n):\n        for col in range(m):\n            # set row to -1 in every position not 0\n            for j in range(row):\n                M[row][col] -= M[j][col]\n            \n            # set col to -1 in every position not 0\n            for i in range(col):\n                M[row][col] -= M[row][i]\n                \n    # create a new list for each row\n    M = list(zip(*M))\n    \n    # sort the new list\n    return sorted(M, key=lambda x: sum(x), reverse=True)\n    \ndef sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its columns.\n    '''\n    n = len(M)\n    m = len(M[0])\n    \n    for col in range(m):\n        for row in range(n):\n            # set row to -1 in every position not 0\n            for j in range(row):\n                M[row][col] -= M[j][col]\n            \n            # set col to -1 in every position not 0\n            for i in range(col):\n                M[row][col] -= M[row][i]\n                \n    # create a new list for each row\n    M = list(zip(*M))\n    \n    # sort the new list\n    return sorted(M, key=lambda x: sum(x))\n    \ndef sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its columns.\n    '''\n    n = len(M)\n    m = len(M[0])\n    \n    for col in range(m):\n        for row in range(n):\n            # set row to -1 in every position not 0\n            for j in range(row):\n                M[row][col] -= M[j][col]\n            \n            # set col to -1 in every position not 0\n            for i in range(col):\n                M[row][col] -= M[row][i]\n                \n    # create a new list for each row\n    M = list(zip(*M))\n    \n    # sort the new list\n    return sorted(M, key=lambda x: sum(x))\n    \ndef maximize_matrix(M):\n    '''\n    Write a function to maximize a given matrix.\n    '''\n    n = len(M)\n    m = len(M[0])\n    \n    for col in range(m):\n        for row in range(n):\n            # set row to -1 in every position not 0\n            for j in range(row):\n                M[row][col] -= M[j][col]\n            \n            # set col to -1 in every position not 0\n            for i in range(col):\n                M[row][col] -= M[row][i]\n                \n    # create a new list for each row\n    M = list(zip(*M))\n    \n    # sort the new list\n    return sorted(M, key=lambda x: sum(x), reverse=True)\n    \ndef sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    m = len(M[0])\n    \n    for row in range(n):\n        for col in range(m):\n            # set row to -1 in every position not 0\n            for j in range(row):\n                M[row][col] -= M[j][col]\n            \n            # set col to -1 in every position not 0\n            for i in range(col):\n                M[row][col] -= M[row][i]\n                \n    # create a new list for each row\n    M = list(zip(*M))\n    \n    # sort the new list\n    return sorted(M, key=lambda x: sum(x))\n    \ndef maximize_matrix(M):\n    '''\n    Write a function to maximize a given matrix.\n    '''\n    n = len(M)\n    m = len(M[0])\n    \n    for col in range(m):\n        for row in range(n):\n            # set row to -1 in every position not 0\n            for j in range(row):\n                M[row][col] -= M[j][col]\n            \n            # set col to -1 in every position not 0\n            for i in range(col):\n                M[row][col] -= M[row][i]\n                \n    # create a new list for each row\n    M = list(zip(*M))\n    \n    # sort the new list\n    return sorted(M, key=lambda x: sum(x), reverse=True)\n    \ndef sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its columns.\n    '''\n    n = len(M)\n    m = len(M[0])\n    \n    for col in range(m):\n        for row in range(n):\n            # set row to -1 in every position not 0\n            for j in range(row):\n                M[row][col] -= M[j][col]\n            \n            # set col to -1 in every position not 0\n            for i in range(col):\n                M[row][col] -= M[row][i]\n                \n    # create a new list for each row\n    M = list(zip(*M))\n    \n    # sort the new list\n    return sorted(M, key=lambda x: sum(x))\n    \ndef maximize_matrix(M):\n    '''\n    Write a function to maximize a given matrix.\n    '''\n    n = len(M)\n    m = len(M[0])\n    \n    for col in range(m):\n        for row in range(n):\n            # set row to -1 in every position not 0\n            for j in range(row):\n                M[row][col] -= M[j][col]\n            \n            # set col to -1 in every position not 0\n            for i in range(col):\n                M[row][col] -= M[row][i]\n                \n    # create a new list for each row\n    M = list(zip(*M))\n    \n    # sort the new list\n    return sorted(M, key=lambda x: sum(x), reverse=True)\n    \ndef sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its columns.\n    '''\n    n = len(M)\n    m = len(M[0])\n    \n    for row in range(n):\n        for col in range(m):\n            # set row to -1 in every position not 0\n            for j in range(row):\n                M[row][col] -= M[j][col]\n            \n            # set col to -1 in every position not 0\n            for i in range(col):\n                M[row][col] -= M[row][i]\n                \n    # create a new list for each row\n    M = list(zip(*M))\n    \n    # sort the new list\n    return sorted(M, key=lambda x: sum(x))\n    \ndef maximize_matrix(M):\n    '''\n    Write a function to maximize a given matrix.\n    '''\n    n = len(M)\n    m = len(M[0])\n    \n    for row in range(n):\n        for col in rang",
        "num_ids": 36
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_m = sorted(M, key=lambda x: sum(x))\n    return sorted_m\n",
        "num_ids": 28
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-i-1):\n            if M[j][i]+M[j+1][i] < M[j][i]+M[j+1][i+1]:\n                M[j], M[j+1] = M[j+1], M[j]\n",
        "num_ids": 89
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    result = [0]*len(M)\n    for i in xrange(len(M)):\n        result[i] = sum(M[i])\n    result.sort()\n    for i in xrange(len(M)):\n        for j in xrange(len(M[0])):\n            M[i][j] = result[i]\n    return M\n",
        "num_ids": 91
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    if rows == 0 or cols == 0:\n        return M\n    for j in xrange(cols):\n        for i in xrange(rows):\n            if i!= j:\n                val = M[i][j]\n                idx = j\n                for k in xrange(i, rows):\n                    if M[k][idx] > val:\n                        idx = k\n                        val = M[k][j]\n                M[i], M[idx] = M[idx], M[i]\n    return M\n",
        "num_ids": 148
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    m = len(M[0])\n    rowsum = [0]*n\n    for i in range(n):\n        for j in range(m):\n            rowsum[i] += M[i][j]\n    rowsum_sorted = sorted(rowsum)\n    for i in range(n):\n        for j in range(m):\n            M[i][j] = rowsum_sorted[i] - rowsum[i] + M[i][j]\n    return M\n    \n",
        "num_ids": 129
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # In this case, the matrix M is sorted in place\n    # We use in-place sorted to avoid having to copy M\n    for i in range(len(M)-1):\n        # sort row in-place\n        for j in range(len(M[i])-1):\n            if M[i][j] > M[i][j+1]:\n                temp = M[i][j+1]\n                M[i][j+1] = M[i][j]\n                M[i][j] = temp\n",
        "num_ids": 125
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sum = [sum(m) for m in M]\n    return sorted(M,key=lambda x:row_sum[M.index(x)])\n",
        "num_ids": 41
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    l = int(l)\n    b = int(b)\n    h = int(h)\n    v = l*b*h/6\n    return v\n",
        "num_ids": 41
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = l*b*h/6.0\n    return v\n",
        "num_ids": 19
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h/3.0\n    ",
        "num_ids": 15
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = ((l*b*h)/6.0)\n    return volume\n",
        "num_ids": 21
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # return (b*h) / 3\n    return (l*b*h) / 3\n    ",
        "num_ids": 26
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/3\n    \n    ",
        "num_ids": 16
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/3.0\n",
        "num_ids": 15
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (h*b*(h+b+l))/3.0\n",
        "num_ids": 21
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = l*b*h\n    return Volume\n",
        "num_ids": 15
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5 * l * b * h\n    print \"The volume of the prism is {}\".format(volume)\n    return volume\n",
        "num_ids": 35
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    result = re.match(r'^[a-z]+_[a-z]+$', text)\n    if result:\n        return True\n    else:\n        return False\n",
        "num_ids": 45
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # with re\n    return re.search(r'[a-z]{2,}_[a-z]{2,}', text) is not None\n",
        "num_ids": 41
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('[a-z]+_[a-z]+',text)\ndef text_lowercase_letter(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters and false otherwise.\n    '''\n    return re.search('[a-z]+',text)\ndef text_lowercase_letter_number(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters, numbers and underscore and false otherwise.\n    '''\n    return re.search('[a-z]+\\d+_',text)\ndef text_lowercase_letter_number_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters, numbers, underscore and false otherwise.\n    '''\n    return re.search('[a-z]+\\d+_',text)\ndef text_number_lowercase_letter(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters, numbers and underscore and false otherwise.\n    '''\n    return re.search('\\d+[a-z]+_',text)\ndef text_number_lowercase_letter_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters, numbers, underscore and false otherwise.\n    '''\n    return re.search('\\d+[a-z]+_',text)\ndef text_number_lowercase_letter_number(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters, numbers, underscore and false otherwise.\n    '''\n    return re.search('\\d+[a-z]+\\d+_',text)\ndef text_number_lowercase_letter_number_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters, numbers, underscore and false otherwise.\n    '''\n    return re.search('\\d+[a-z]+\\d+_',text)\ndef text_lowercase_letter_number(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters, numbers and underscore and false otherwise.\n    '''\n    return re.search('[a-z]+\\d+_',text)\ndef text_lowercase_letter_number_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters, numbers, underscore and false otherwise.\n    '''\n    return re.search('[a-z]+\\d+_',text)\ndef text_lowercase_letter_number_lowercase_letter(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters, numbers, underscore and lowercase letters and false otherwise.\n    '''\n    return re.search('[a-z]+\\d+[a-z]+_',text)\ndef text_lowercase_letter_number_lowercase_letter_number(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters, numbers, underscore, lowercase letters and false otherwise.\n    '''\n    return re.search('[a-z]+\\d+[a-z]+_\\d+',text)\ndef text_number_lowercase_letter_number_lowercase_letter(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters, numbers, underscore, lowercase letters and false otherwise.\n    '''\n    return re.search('\\d+[a-z]+\\d+[a-z]+_\\d+',text)\ndef text_number_lowercase_letter_number_lowercase_letter_number(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters, numbers, underscore, lowercase letters and false otherwise.\n    '''\n    return re.search('\\d+[a-z]+\\d+[a-z]+_\\d+',text)\ndef text_lowercase_letter_number_number(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters, numbers, underscore and false otherwise.\n    '''\n    return re.search('[a-z]+\\d+_\\d+',text)\ndef text_lowercase_letter_number_number_number(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters, numbers, underscore, and false otherwise.\n    '''\n    return re.search('[a-z]+\\d+_\\d+\\d+',text)\ndef text_number_lowercase_letter_number_number(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters, numbers, underscore and false otherwise.\n    '''\n    return re.search('\\d+[a-z]+\\d+_\\d+\\d+',text)\ndef text_number_lowercase_letter_number_number_number(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters, numbers, underscore, and false otherwise.\n    '''\n    return re.search('\\d+[a-z]+\\d+_\\d+\\d+',text)\ndef text_lowercase_letter_number_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters, numbers, underscore and false otherwise.\n    '''\n    return re.search('[a-z]+\\d+_[a-z]+',text)\ndef text_lowercase_letter_number_underscore_number(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters, numbers, underscore, and false otherwise.\n    '''\n    return re.search('[a-z]+\\d+_[a-z]+\\d+',text)\ndef text_number_lowercase_letter_number_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters, numbers, underscore and false otherwise.\n    '''\n    return re.search('\\d+[a-z]+\\d+_[a-z]+',text)\ndef text_number_lowercase_letter_number_underscore_number(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters, numbers, underscore, and false otherwise.\n    '''\n    return re.search('\\d+[a-z]+\\d+_[a-z]+\\d+',text)\ndef text_lowercase_letter_number_underscore_number(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters, numbers, underscore, and false otherwise.\n    '''\n    return re.search('[a-z]+\\d+_[a-z]+\\d+',text)\ndef text_lowercase_letter_number_underscore_number_number(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters, numbers, underscore, and false otherwise.\n    '''\n    return re.search('[a-z]+\\d+_[a-z]+\\d+\\d+',text)\ndef text_number_lowercase_letter_number_underscore_number(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters, numbers, underscore, and false otherwise.\n    '''\n    return re.search('\\d+[a-z]+\\d+_[a-z]+\\d+',text)\ndef text_number_lowercase_letter_number_underscore_number_number(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters, numbers, underscore, and false otherwise.\n    '''\n    return re.search('\\d+[a-z]+\\d+_[a-z]+\\d+\\d+',text)\ndef text_lowercase_letter_number_underscore_number_number(text):\n    '''\n    Write a function to that returns true if the input strin",
        "num_ids": 15
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'^[a-z]+_[a-z]+$', text)\n",
        "num_ids": 27
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('[a-z]+_[a-z]+', text)!= None\n",
        "num_ids": 25
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    import re\n    return bool(re.search(r\"[a-z]+_[a-z]+\", text))\ndef text_letter_validation(text):\n    '''\n    Write a function to that returns true if the input string contains only letters and false otherwise.\n    '''\n    import re\n    return bool(re.search(r\"[a-z]+\", text))\ndef text_letter_validation2(text):\n    '''\n    Write a function to that returns true if the input string contains only letters and false otherwise.\n    '''\n    import re\n    return bool(re.search(r\"[a-zA-Z]+\", text))\ndef text_digit_validation(text):\n    '''\n    Write a function to that returns true if the input string contains only digits and false otherwise.\n    '''\n    import re\n    return bool(re.search(r\"[0-9]+\", text))\ndef text_digit_validation2(text):\n    '''\n    Write a function to that returns true if the input string contains only digits and false otherwise.\n    '''\n    import re\n    return bool(re.search(r\"[0-9]+\", text))\ndef text_digit_validation3(text):\n    '''\n    Write a function to that returns true if the input string contains only digits and false otherwise.\n    '''\n    import re\n    return bool(re.search(r\"\\d+\", text))\ndef text_digit_validation4(text):\n    '''\n    Write a function to that returns true if the input string contains only digits and false otherwise.\n    '''\n    import re\n    return bool(re.search(r\"[0-9]\", text))\ndef text_digit_validation5(text):\n    '''\n    Write a function to that returns true if the input string contains only digits and false otherwise.\n    '''\n    import re\n    return bool(re.search(r\"\\d\", text))\ndef text_digit_validation6(text):\n    '''\n    Write a function to that returns true if the input string contains only digits and false otherwise.\n    '''\n    import re\n    return bool(re.search(r\"\\d+\", text))\ndef text_digit_validation7(text):\n    '''\n    Write a function to that returns true if the input string contains only digits and false otherwise.\n    '''\n    import re\n    return bool(re.search(r\"\\d\", text))\ndef text_digit_validation8(text):\n    '''\n    Write a function to that returns true if the input string contains only digits and false otherwise.\n    '''\n    import re\n    return bool(re.search(r\"\\d\", text))\ndef text_digit_validation9(text):\n    '''\n    Write a function to that returns true if the input string contains only digits and false otherwise.\n    '''\n    import re\n    return bool(re.search(r\"\\d\", text))\ndef text_digit_validation10(text):\n    '''\n    Write a function to that returns true if the input string contains only digits and false otherwise.\n    '''\n    import re\n    return bool(re.search(r\"\\d\", text))\ndef text_digit_validation11(text):\n    '''\n    Write a function to that returns true if the input string contains only digits and false otherwise.\n    '''\n    import re\n    return bool(re.search(r\"\\d\", text))\ndef text_digit_validation12(text):\n    '''\n    Write a function to that returns true if the input string contains only digits and false otherwise.\n    '''\n    import re\n    return bool(re.search(r\"\\d\", text))\ndef text_digit_validation13(text):\n    '''\n    Write a function to that returns true if the input string contains only digits and false otherwise.\n    '''\n    import re\n    return bool(re.search(r\"\\d\", text))\ndef text_digit_validation14(text):\n    '''\n    Write a function to that returns true if the input string contains only digits and false otherwise.\n    '''\n    import re\n    return bool(re.search(r\"\\d\", text))\ndef text_digit_validation15(text):\n    '''\n    Write a function to that returns true if the input string contains only digits and false otherwise.\n    '''\n    import re\n    return bool(re.search(r\"\\d\", text))\ndef text_digit_validation16(text):\n    '''\n    Write a function to that returns true if the input string contains only digits and false otherwise.\n    '''\n    import re\n    return bool(re.search(r\"\\d\", text))\ndef text_digit_validation17(text):\n    '''\n    Write a function to that returns true if the input string contains only digits and false otherwise.\n    '''\n    import re\n    return bool(re.search(r\"\\d\", text))\ndef text_digit_validation18(text):\n    '''\n    Write a function to that returns true if the input string contains only digits and false otherwise.\n    '''\n    import re\n    return bool(re.search(r\"\\d\", text))\ndef text_digit_validation19(text):\n    '''\n    Write a function to that returns true if the input string contains only digits and false otherwise.\n    '''\n    import re\n    return bool(re.search(r\"\\d\", text))\ndef text_digit_validation20(text):\n    '''\n    Write a function to that returns true if the input string contains only digits and false otherwise.\n    '''\n    import re\n    return bool(re.search(r\"\\d\", text))\ndef text_digit_validation21(text):\n    '''\n    Write a function to that returns true if the input string contains only digits and false otherwise.\n    '''\n    import re\n    return bool(re.search(r\"\\d\", text))\ndef text_digit_validation22(text):\n    '''\n    Write a function to that returns true if the input string contains only digits and false otherwise.\n    '''\n    import re\n    return bool(re.search(r\"\\d\", text))\ndef text_digit_validation23(text):\n    '''\n    Write a function to that returns true if the input string contains only digits and false otherwise.\n    '''\n    import re\n    return bool(re.search(r\"\\d\", text))\ndef text_digit_validation24(text):\n    '''\n    Write a function to that returns true if the input string contains only digits and false otherwise.\n    '''\n    import re\n    return bool(re.search(r\"\\d\", text))\ndef text_digit_validation25(text):\n    '''\n    Write a function to that returns true if the input string contains only digits and false otherwise.\n    '''\n    import re\n    return bool(re.search(r\"\\d\", text))\ndef text_digit_validation26(text):\n    '''\n    Write a function to that returns true if the input string contains only digits and false otherwise.\n    '''\n    import re\n    return bool(re.search(r\"\\d\", text))\ndef text_digit_validation27(text):\n    '''\n    Write a function to that returns true if the input string contains only digits and false otherwise.\n    '''\n    import re\n    return bool(re.search(r\"\\d\", text))\ndef text_digit_validation28(text):\n    '''\n    Write a function to that returns true if the input string contains only digits and false otherwise.\n    '''\n    import re\n    return bool(re.search(r\"\\d\", text))\ndef text_digit_validation29(text):\n    '''\n    Write a function to that returns true if the input string contains only digits and false otherwise.\n    '''\n    import re\n    return bool(re.search(r\"\\d\", text))\ndef text_digit_validation30(text):\n    '''\n    Write a function to that returns true if the input string contains only digits and false otherwise.\n    '''\n    import re\n    return bool(re.search(r\"\\d\", text))\ndef text_digit_validation31(text):\n    '''\n    Write a function to that returns true if the input string contains only digits and false otherwise.\n",
        "num_ids": 22
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'^[a-z]+_[a-z]+$',text))\n",
        "num_ids": 29
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('[a-z]+_[a-z]+', text, re.IGNORECASE)\n",
        "num_ids": 30
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'^[a-z]+_[a-z]+$', text) is not None\n",
        "num_ids": 30
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = text.lower()\n    return not (re.search('[a-z]', text) is None)\n",
        "num_ids": 30
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "num_ids": 8
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    for i in range(len(string)): \n        for j in range(NO_OF_CHARS): \n            if (string[i] == chr(j)): \n                list1.append(j) \n    return list1\ndef list_to_str(list1): \n    '''\n    Write a function to convert a list of integers to a string.\n    '''\n    string1 = \"\"\n    for i in range(len(list1)): \n        string1 += chr(list1[i])\n    return string1\n",
        "num_ids": 40
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = [] \n    for char in string:\n        if char in result:\n            pass\n        else:\n            result.append(char)\n    return result\n",
        "num_ids": 41
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    output = [] \n    for i in string: \n        if i not in output: \n            output.append(i) \n    return output \n",
        "num_ids": 39
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    for x in string:\n        list1.append(x)\n    for x in list1:\n        if x not in list2:\n            list2.append(x)\n    return list2\n",
        "num_ids": 61
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [c for c in string if c not in string2]\n    \ndef list_to_str(list): \n    '''\n    Write a function to convert a list of characters to a string.\n    '''\n    return ''.join(list)\n",
        "num_ids": 11
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if (type(string) is not str) or (type(string) is str): \n        return\n    s = list(string) \n    return s\n    \ndef list_to_str(s): \n    '''\n    Write a function to convert a list to a string.\n    '''\n    if (type(s) is not list) or (type(s) is list): \n        return\n    return ''.join(s)\n    \ndef count_chars(s): \n    '''\n    Write a function to return the number of characters in a string.\n    '''\n    if (type(s) is not str) or (type(s) is str): \n        return\n    s = s.split()\n    return len(s)\n    \ndef count_chars_dict(s): \n    '''\n    Write a function to return the number of characters in a string, using a dictionary instead of list.\n    '''\n    if (type(s) is not str) or (type(s) is str): \n        return\n    s = s.split()\n    count = {}\n    for word in s:\n        if word in count:\n            count[word] += 1\n        else:\n            count[word] = 1\n    return len(count)\n    \ndef capitalize_word(s): \n    '''\n    Write a function to capitalize the first letter of each word in a string.\n    '''\n    if (type(s) is not str) or (type(s) is str): \n        return\n    s = s.split()\n    new_string = []\n    for word in s:\n        if word:\n            new_string.append(word[0].upper() + word[1:])\n    return''.join(new_string)\n    \ndef same_words(s1, s2): \n    '''\n    Write a function to check if two strings are equal.\n    '''\n    if (type(s1) is not str) or (type(s1) is str): \n        return\n    if (type(s2) is not str) or (type(s2) is str): \n        return\n    s1 = s1.split()\n    s2 = s2.split()\n    return s1 == s2\n    \ndef count_words(s): \n    '''\n    Write a function to count the number of words in a string.\n    '''\n    if (type(s) is not str) or (type(s) is str): \n        return\n    s = s.split()\n    return len(s)\n    \ndef count_words_dict(s): \n    '''\n    Write a function to count the number of words in a string, using a dictionary instead of list.\n    '''\n    if (type(s) is not str) or (type(s) is str): \n        return\n    s = s.split()\n    count = {}\n    for word in s:\n        if word in count:\n            count[word] += 1\n        else:\n            count[word] = 1\n    return len(count)\n    \ndef swap_words(s): \n    '''\n    Write a function to swap the order of the words in a string.\n    '''\n    if (type(s) is not str) or (type(s) is str): \n        return\n    s = s.split()\n    return''.join(s[1:] + s[:1])\n    \ndef replace_last_letter(s): \n    '''\n    Write a function to replace the last letter in a string with another character.\n    '''\n    if (type(s) is not str) or (type(s) is str): \n        return\n    s = s.split()\n    if s:\n        return s[-1][:-1] + s[-1][-1]\n    return s\n    \ndef replace_last_letter_dict(s): \n    '''\n    Write a function to replace the last letter in a string with another character, using a dictionary instead of list.\n    '''\n    if (type(s) is not str) or (type(s) is str): \n        return\n    s = s.split()\n    if s:\n        count = {}\n        for word in s:\n            if word[:-1] in count:\n                count[word[:-1]] += 1\n            else:\n                count[word[:-1]] = 1\n        return count[max(count, key = lambda x: count[x])]\n    return s\n    \ndef get_word_length_map(s): \n    '''\n    Write a function to return a dictionary where the keys are the lengths of words in a string and the values are the number of words with that length.\n    '''\n    if (type(s) is not str) or (type(s) is str): \n        return\n    s = s.split()\n    count = {}\n    for word in s:\n        if len(word) in count:\n            count[len(word)] += 1\n        else:\n            count[len(word)] = 1\n    return count\n    \ndef get_longest_words(s): \n    '''\n    Write a function to return the longest word in a string.\n    '''\n    if (type(s) is not str) or (type(s) is str): \n        return\n    s = s.split()\n    return max(s, key = len)\n    \ndef get_longest_words_dict(s): \n    '''\n    Write a function to return the longest word in a string, using a dictionary instead of list.\n    '''\n    if (type(s) is not str) or (type(s) is str): \n        return\n    s = s.split()\n    count = {}\n    for word in s:\n        if len(word) in count:\n            count[len(word)] += 1\n        else:\n            count[len(word)] = 1\n    return max(count, key = lambda x: count[x])\n    \ndef get_frequency_map(s): \n    '''\n    Write a function to return a dictionary where the keys are the characters in a string and the values are the number of times those characters appear in the string.\n    '''\n    if (type(s) is not str) or (type(s) is str): \n        return\n    s = s.split()\n    count = {}\n    for word in s:\n        for letter in word:\n            if letter in count:\n                count[letter] += 1\n            else:\n                count[letter] = 1\n    return count\n    \ndef reverse_string(s): \n    '''\n    Write a function to return the reverse of a string.\n    '''\n    if (type(s) is not str) or (type(s) is str): \n        return\n    s = s.split()\n    return''.join(s[::-1])\n    \ndef is_palindrome(s): \n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if (type(s) is not str) or (type(s) is str): \n        return\n    s = s.split()\n    return s == s[::-1]\n    \ndef remove_matching_char(s): \n    '''\n    Write a function to remove matching parentheses from the string.\n    '''\n    if (type(s) is not str) or (type(s) is str): \n        return\n    return ''.join(s.split('()'))\n    \ndef remove_all_special_characters(s): \n    '''\n    Write a function to remove special characters from the string.\n    '''\n    if (type(s) is not str) or (type(s) is str): \n        return\n    return ''.join(s.split('!@#$%^&*()[]{}-=+<>?/;:,.'))\n    \ndef count_even(s): \n    '''\n    Write a function to count the number of even numbers in a list.\n    '''\n    if (type(s) is not list) or (type(s) is list): \n        return\n    return len([x for x in s if x % 2 == 0])\n    \ndef count_odd(s): \n    '''\n    Write a function to coun",
        "num_ids": 8
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = list(string)\n    list2 = []\n    for i in range(0,len(list1)):\n        if list1[i] not in list2:\n            list2.append(list1[i])\n    for i in range(0,len(list1)):\n        if list1[i] in list2:\n            list1[i] = None\n    for i in range(0,len(list1)):\n        if list1[i] == None:\n            list1[i] = \"\"\n    return list1\ndef list_to_str(list):\n    '''\n    Write a function to convert a list to a string.\n    '''\n    str1 = \"\"\n    for i in range(0,len(list)):\n        str1 = str1 + list[i]\n    return str1\ndef get_str_list(string):\n    '''\n    Write a function to convert a string to a list.\n    '''\n    list = []\n    for i in range(0,len(string)):\n        list.append(string[i])\n    return list\ndef get_list_str(list):\n    '''\n    Write a function to convert a list to a string.\n    '''\n    str1 = \"\"\n    for i in range(0,len(list)):\n        str1 = str1 + list[i]\n    return str1\ndef add_string(string1,string2):\n    '''\n    Write a function to add two strings.\n    '''\n    string3 = \"\"\n    for i in range(0,len(string1)):\n        string3 = string3 + string1[i]\n    for i in range(0,len(string2)):\n        string3 = string3 + string2[i]\n    return string3\ndef get_string_list(string):\n    '''\n    Write a function to convert a string to a list.\n    '''\n    list = []\n    for i in range(0,len(string)):\n        list.append(string[i])\n    return list\ndef get_string_list_reverse(string):\n    '''\n    Write a function to convert a string to a list in reverse order.\n    '''\n    list = []\n    for i in range(0,len(string)):\n        list.append(string[i])\n    return list[::-1]\ndef reverse_string(string):\n    '''\n    Write a function to convert a string to a list in reverse order.\n    '''\n    list = []\n    for i in range(0,len(string)):\n        list.append(string[i])\n    return list[::-1]\ndef add_string_list(list1,list2):\n    '''\n    Write a function to add two strings.\n    '''\n    str1 = \"\"\n    for i in range(0,len(list1)):\n        str1 = str1 + list1[i]\n    for i in range(0,len(list2)):\n        str1 = str1 + list2[i]\n    return str1\ndef add_string_list_reverse(list1,list2):\n    '''\n    Write a function to add two strings.\n    '''\n    str1 = \"\"\n    for i in range(0,len(list1)):\n        str1 = str1 + list1[i]\n    for i in range(0,len(list2)):\n        str1 = str1 + list2[i]\n    return str1[::-1]\ndef get_string(string1,list1,index):\n    '''\n    Write a function to add a character at given index in a string.\n    '''\n    string2 = \"\"\n    for i in range(0,len(list1)):\n        if i == index:\n            string2 = string2 + list1[i]\n    return string2\ndef get_string_reverse(string1,list1,index):\n    '''\n    Write a function to add a character at given index in a string.\n    '''\n    string2 = \"\"\n    for i in range(0,len(list1)):\n        if i == index:\n            string2 = string2 + list1[i]\n    return string2[::-1]\ndef add_string_list(list1,list2):\n    '''\n    Write a function to add two strings.\n    '''\n    str1 = \"\"\n    for i in range(0,len(list1)):\n        str1 = str1 + list1[i]\n    for i in range(0,len(list2)):\n        str1 = str1 + list2[i]\n    return str1\ndef add_string_list_reverse(list1,list2):\n    '''\n    Write a function to add two strings.\n    '''\n    str1 = \"\"\n    for i in range(0,len(list1)):\n        str1 = str1 + list1[i]\n    for i in range(0,len(list2)):\n        str1 = str1 + list2[i]\n    return str1[::-1]\ndef multiply_string(string1,string2):\n    '''\n    Write a function to multiply two strings.\n    '''\n    list = []\n    for i in range(0,len(string1)):\n        for j in range(0,len(string2)):\n            list.append(string1[i]+string2[j])\n    return list\ndef multiply_string_list(list1,list2):\n    '''\n    Write a function to multiply two strings.\n    '''\n    list = []\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            list.append(list1[i]+list2[j])\n    return list\ndef add_string_list(list1,list2):\n    '''\n    Write a function to add two strings.\n    '''\n    str1 = \"\"\n    for i in range(0,len(list1)):\n        str1 = str1 + list1[i]\n    for i in range(0,len(list2)):\n        str1 = str1 + list2[i]\n    return str1\ndef add_string_list_reverse(list1,list2):\n    '''\n    Write a function to add two strings.\n    '''\n    str1 = \"\"\n    for i in range(0,len(list1)):\n        str1 = str1 + list1[i]\n    for i in range(0,len(list2)):\n        str1 = str1 + list2[i]\n    return str1[::-1]\ndef get_first_char(string1,list1):\n    '''\n    Write a function to get the first character from a string and from a list.\n    '''\n    str1 = \"\"\n    for i in range(0,len(list1)):\n        if list1[i] == string1[0]:\n            str1 = str1 + list1[i]\n    return str1\ndef get_last_char(string1,list1):\n    '''\n    Write a function to get the last character from a string and from a list.\n    '''\n    str1 = \"\"\n    for i in range(0,len(list1)):\n        if list1[i] == string1[len(string1)-1]:\n            str1 = str1 + list1[i]\n    return str1\ndef get_first_char_reverse(string1,list1):\n    '''\n    Write a function to get the first character from a string and from a list in reverse order.\n    '''\n    str1 = \"\"\n    for i in range(0,len(list1)):\n        if list1[i] == string1[0]:\n            str1 = str1 + list1[i]\n    return str1[::-1]\ndef get_last_char_reverse(string1,list1):\n    '''\n    Write a function to get the last character from a string and from a list in reverse order.\n    '''\n    str1 = \"\"\n    for i in range(0,len(list1)):\n        if list1[i] == string1[len(string1)-1]:\n            str1 = str1 + list1[i]\n    return str1[::-1]",
        "num_ids": 64
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_str = ''\n    for i in range(len(string)): \n        if string[i] not in string[i+1:]: \n            new_str += string[i] \n    return new_str\ndef h1(string):\n    '''\n    Write a function to compute a hash value as described in class.\n    '''\n    hash_val = 0\n    for i in range(len(string)):\n        hash_val += ord(string[i])*(i+1)\n    return hash_val\n",
        "num_ids": 45
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    a = []\n    for x in string:\n        if x not in a:\n            a.append(x)\n    return a\n",
        "num_ids": 34
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    for i in string:\n        list1.append(i)\n    return list1\n",
        "num_ids": 29
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n",
        "num_ids": 18
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    n = len(arraynums)\n    if n == 0:\n        return False\n    if n == 1:\n        return False\n    if n == 2:\n        if arraynums[0] == arraynums[1]:\n            return True\n        else:\n            return False\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n    \ndef test_duplicate2():\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    nums = [1,2,3,4,5,6,7]\n    n = len(nums)\n    if n == 0:\n        return False\n    if n == 1:\n        return False\n    if n == 2:\n        if nums[0] == nums[1]:\n            return True\n        else:\n            return False\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            if nums[i] == nums[j]:\n                return True\n    return False\n",
        "num_ids": 132
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    visited = set()\n    for num in arraynums:\n        if num in visited:\n            return True\n        else:\n            visited.add(num)\n    return False\n",
        "num_ids": 46
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arraynums = set(arraynums)\n    return True if len(arraynums) == len(arraynums) else False\n",
        "num_ids": 34
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    x = 0\n    for i in arraynums:\n        x = x ^ i\n    return x == 0\n",
        "num_ids": 29
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # first sort the array and compare adjacent elements, to see if there is a duplicate\n    arraynums.sort()\n    for i in range(len(arraynums) - 1):\n        if arraynums[i] == arraynums[i+1]:\n            return True\n    return False\n",
        "num_ids": 71
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n",
        "num_ids": 58
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if arraynums == []:\n        return False\n    if arraynums == [1]:\n        return False\n    for i in range(len(arraynums)):\n        if arraynums[i] in arraynums[i+1:]:\n            return True\n    return False\n",
        "num_ids": 70
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    hsh = dict()\n    for i in range(len(arraynums)):\n        if arraynums[i] in hsh:\n            return True\n        hsh[arraynums[i]] = True\n    return False\n",
        "num_ids": 57
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    nums = set(arraynums)\n    for num in nums:\n        if arraynums.count(num) > 1:\n            return True\n    return False\n",
        "num_ids": 43
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x[0] == \"1\" and x[1] == \"2\" and x[2] == \"3\":\n        return True\n    else:\n        return False\n",
        "num_ids": 43
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if len(x) == 6:\n        if x[0] == x[1] and x[1] == x[2] and x[2] == x[3] and x[3] == x[4] and x[4] == x[5]:\n            return 'woodall'\n    return 'not woodall'\n",
        "num_ids": 79
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if len(x)>=7 and x[0]=='w' and x[1]=='o' and x[2]=='d' and x[3]=='l' and x[4]=='l' and x[5]=='b' and x[6]=='a' and x[7]=='l':\n        return True\n    return False\n",
        "num_ids": 92
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%3==0 and x%5==0:\n        return True\n    return False\n    \ndef is_sunday(x): \n    '''\n    Write a function to check if the given number is a sunday or not.\n    '''\n    return x%7==0\n    \ndef is_leap(x): \n    '''\n    Write a function to check if the given number is a leap year or not.\n    '''\n    if (x%4==0 and x%100!=0) or x%400==0:\n        return True\n    return False\n    \ndef is_abundant(x): \n    '''\n    Write a function to check if the given number is an abundant number or not.\n    '''\n    sum = 0\n    for i in range(1,x//2+1):\n        if x%i==0:\n            sum+=i\n    return sum>x\n    \ndef is_perfect(x): \n    '''\n    Write a function to check if the given number is a perfect number or not.\n    '''\n    sum = 0\n    for i in range(1,x//2+1):\n        if x%i==0:\n            sum+=i\n    return sum==x\n    \ndef is_prim(x): \n    '''\n    Write a function to check if the given number is a prime number or not.\n    '''\n    if x==1:\n        return False\n    for i in range(2,x//2+1):\n        if x%i==0:\n            return False\n    return True\n    \ndef is_perfect_square(x): \n    '''\n    Write a function to check if the given number is a perfect square number or not.\n    '''\n    import math\n    return math.sqrt(x)%1==0\n    \ndef is_perfect_cube(x): \n    '''\n    Write a function to check if the given number is a perfect cube number or not.\n    '''\n    import math\n    return math.pow(x,1/3)%1==0\n    \ndef is_square(x): \n    '''\n    Write a function to check if the given number is a square number or not.\n    '''\n    import math\n    return math.pow(x,1/2)%1==0\n    \ndef is_cube(x): \n    '''\n    Write a function to check if the given number is a cube number or not.\n    '''\n    import math\n    return math.pow(x,1/3)%1==0\n    \ndef is_triangular(x): \n    '''\n    Write a function to check if the given number is a triangular number or not.\n    '''\n    import math\n    return math.pow((x+1)/2,2)==x\n    \ndef is_leap_year(x): \n    '''\n    Write a function to check if the given number is a leap year or not.\n    '''\n    if x%400==0:\n        return True\n    if x%4==0 and x%100!=0:\n        return True\n    return False\n    \ndef is_bodi_day(x): \n    '''\n    Write a function to check if the given number is bodi day or not.\n    '''\n    if is_leap_year(x) and x%100==0 and x%400!=0:\n        return True\n    elif is_leap_year(x) and x%100!=0:\n        return True\n    return False\n    \ndef is_happy_number(x): \n    '''\n    Write a function to check if the given number is a happy number or not.\n    '''\n    sum = 0\n    while x>0:\n        sum+= (x%10)**2\n        x//=10\n    return sum==1\n    \ndef is_anagram(x,y): \n    '''\n    Write a function to check if the two given strings are anagram or not.\n    '''\n    x = sorted(x)\n    y = sorted(y)\n    return x==y\n    \ndef is_palindrome(x): \n    '''\n    Write a function to check if the given number is a palindrome or not.\n    '''\n    return x==x[::-1]\n    \ndef is_hex(x): \n    '''\n    Write a function to check if the given number is a hex number or not.\n    '''\n    if x<10 or x>15:\n        return False\n    if x>=10 and x<=15:\n        return True\n    \ndef is_oct(x): \n    '''\n    Write a function to check if the given number is a oct number or not.\n    '''\n    if x<10 or x>15:\n        return False\n    if x>=10 and x<=15:\n        return True\n    \ndef is_binary(x): \n    '''\n    Write a function to check if the given number is a binary number or not.\n    '''\n    if x<2 or x>15:\n        return False\n    if x>=2 and x<=15:\n        return True\n    \ndef is_prim_number(x): \n    '''\n    Write a function to check if the given number is a prime number or not.\n    '''\n    if x==1:\n        return False\n    if x%2==0:\n        return False\n    for i in range(3,x//2+1):\n        if x%i==0:\n            return False\n    return True\n    \ndef is_perfect_number(x): \n    '''\n    Write a function to check if the given number is a perfect number or not.\n    '''\n    sum = 0\n    for i in range(1,x//2+1):\n        if x%i==0:\n            sum+=i\n    return sum==x\n    \ndef is_fibonacci(x): \n    '''\n    Write a function to check if the given number is a fibonacci number or not.\n    '''\n    if x<=1:\n        return False\n    if x==2:\n        return True\n    a,b=0,1\n    while x>=a+b:\n        a,b=b,a+b\n        if x==a+b:\n            return True\n    return False\n    \ndef is_abundant_number(x): \n    '''\n    Write a function to check if the given number is an abundant number or not.\n    '''\n    sum = 0\n    for i in range(1,x//2+1):\n        if x%i==0:\n            sum+=i\n    return sum>x\n    \ndef is_abundant_number(x): \n    '''\n    Write a function to check if the given number is an abundant number or not.\n    '''\n    if x<=1:\n        return False\n    if x==2:\n        return True\n    if x%2==0:\n        return False\n    for i in range(3,x//2+1):\n        if x%i==0:\n            return False\n    return True\n    \ndef is_abundant_number(x): \n    '''\n    Write a function to check if the given number is an abundant number or not.\n    '''\n    if x<=1:\n        return False\n    if x==2:\n        return True\n    if x%2==0:\n        return False\n    for i in range(3,x//2+1):\n        if x%i==0:\n            return False\n    return True\n    \ndef is_abundant_number(x): \n    '''\n    Write a function to check if the given number is an abundant number or not.\n    '''\n    if x<=1:\n        return False\n    if x==2:\n        return True\n    if x%2==0:\n        return False\n    for i in range(3,x//2+1):\n        if x%i==0:\n            return False\n    return True\n    \ndef is_abundant_number(x): \n    '''\n    Write a function to check if the given number is an abundant number or not.\n    '''\n    if x<=1:\n        return False\n    if x==2:\n        return True\n    if x%2==0:\n        retur",
        "num_ids": 37
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%2==0:\n        print('This is not a woodball number')\n    else:\n        print('This is a woodball number')\n",
        "num_ids": 38
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 't' or x == 'T' or x == 'Tg' or x == 'Tg1' or x == 'Tg2':\n        return True\n    else:\n        return False\n",
        "num_ids": 51
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x in (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20):\n        return True\n    else:\n        return False\n",
        "num_ids": 60
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return (x % 3 == 0 and x % 5 == 0)\n",
        "num_ids": 18
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%11==0:\n        return True\n    else:\n        return False\n    \n",
        "num_ids": 25
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    for i in x:\n        if i in 'aeiou':\n            return 'Not Woodall'\n    return 'Is Woodall'\n",
        "num_ids": 35
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return (num == int(str(num)[::-1]))\n",
        "num_ids": 19
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == (2 * str(num)[::-1])\n",
        "num_ids": 18
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == num[::-1]*2\n",
        "num_ids": 15
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        return False\n    num = abs(num)\n    original = num\n    temp = 0\n    while num:\n        temp = num % 10\n        num = num // 10\n        if temp == 1 and num == 0:\n            return True\n    if original == temp:\n        return False\n    else:\n        return True\n",
        "num_ids": 84
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_str = str(num)\n    rev_num_str = num_str[::-1]\n    return int(num_str) == (int(rev_num_str) * 2)\n",
        "num_ids": 50
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if (num==0):\n        return True\n    elif (num%10==0):\n        return False\n    else:\n        return (num%10==((num//10)%10))\n",
        "num_ids": 49
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    a = str(num)\n    b = str(num)[::-1]\n    if a == b:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num%10 == (num//10)%10\n",
        "num_ids": 16
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    if num == num[::-1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    #if num is even\n    if num % 2 == 0:\n        return False\n    else:\n        #invert\n        rev = 0\n        while num > 0:\n            rev = rev * 10 + num % 10\n            num = num / 10\n        return (rev == (num - 1))\n",
        "num_ids": 72
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = arr[0]\n    for i in range(1, len(arr)) :\n        if arr[i] > max_num :\n            max_num = arr[i]\n    return max_num\n",
        "num_ids": 54
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0 : \n        return 0\n    if len(arr) == 1 : \n        return arr[0]\n    else : \n        return max(arr[0]+find_Max_Num(arr[2:]), arr[1]+find_Max_Num(arr[3:]))\n",
        "num_ids": 75
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    return max(arr)\n",
        "num_ids": 9
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    if len(arr) == 0 :\n        return 0\n    \n    arr = sorted(arr)\n    \n    # print(arr)\n    \n    last_digit = arr[len(arr)-1]\n    \n    if last_digit > 0 :\n        return last_digit\n    else :\n        return find_Max_Num(arr[0:len(arr)-1])\n",
        "num_ids": 93
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0 : \n        return None\n    if len(arr) == 1 : \n        return arr[0]\n",
        "num_ids": 35
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr)==1 : \n        return arr[0]\n    if len(arr)==2 : \n        if arr[0]>arr[1] : \n            return arr[0]\n        else : \n            return arr[1]\n    if len(arr)>2 : \n        if arr[0]>arr[1] : \n            return arr[0]\n        else : \n            return arr[1]\n",
        "num_ids": 108
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return max(arr[0]*10**(len(arr)-1),find_Max_Num(arr[1:]))\n",
        "num_ids": 53
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    s = len(arr)\n    max_num = 0\n    for i in range(s-1, 0, -1) : \n        if arr[i] > max_num : \n            max_num = arr[i]\n    return max_num\n    \ndef find_Min_Num(arr) : \n    '''\n    Write a python function to find the smallest number that can be formed with the given list of digits.\n    '''\n    s = len(arr)\n    min_num = arr[0]\n    for i in range(1, s) : \n        if arr[i] < min_num : \n            min_num = arr[i]\n    return min_num\n",
        "num_ids": 62
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    length = len(arr)\n    if (length == 1):\n        return arr[0]\n    else :\n        return max(arr[0]*arr[1], arr[1]*arr[0])\n",
        "num_ids": 52
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    temp = []\n    for i in range(len(arr)) :\n        temp.append(arr[i])\n        temp.sort(reverse = True)\n    return temp[0]\n",
        "num_ids": 46
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x>0 and y<0 or x<0 and y>0\n",
        "num_ids": 20
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x*y<0\n    \ndef check_octagon(r1,r2):\n    '''\n    Write a python function to check whether the given radius r1 and r2 are opposite sides of an octagon or not.\n    '''\n    return opposite_Signs(r1**2,r2**2)\n    \ndef check_octagon_2(r1,r2):\n    '''\n    Write a python function to check whether the given radius r1 and r2 are opposite sides of an octagon or not.\n    '''\n    return r1**2+r2**2>max(r1**2,r2**2)*2\n    \ndef check_octagon_3(r1,r2):\n    '''\n    Write a python function to check whether the given radius r1 and r2 are opposite sides of an octagon or not.\n    '''\n    return r1**2+r2**2<min(r1**2,r2**2)*2\n    \ndef check_octagon_4(r1,r2):\n    '''\n    Write a python function to check whether the given radius r1 and r2 are opposite sides of an octagon or not.\n    '''\n    return r1**2+r2**2==max(r1**2,r2**2)*2\n    \ndef check_octagon_5(r1,r2):\n    '''\n    Write a python function to check whether the given radius r1 and r2 are opposite sides of an octagon or not.\n    '''\n    return r1**2+r2**2==min(r1**2,r2**2)*2\n",
        "num_ids": 28
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x>0)==(y<0)\n",
        "num_ids": 16
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0:\n        return True\n    elif x>0 and y<0:\n        return True\n    else:\n        return False\n    \n",
        "num_ids": 43
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y<0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0 or x<0 and y>0:\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0 or x>0 and y<0:\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        result = 1\n        last_n = 0\n        while result <= n:\n            if result < n:\n                last_n += result\n            else:\n                last_n -= result\n            result += 1\n        return last_n\n",
        "num_ids": 72
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)/2\n",
        "num_ids": 15
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Compute the nth octagonal number\n    octagonal = (n*(3*n - 1))/2\n    return (octagonal)\n",
        "num_ids": 37
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return pow(n*(3*n-1),2)\n",
        "num_ids": 18
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n*(3*n - 1))/2\n",
        "num_ids": 32
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2 * (2 * (2 * n + 1) ** 2 + 1) / (2 * n + 1)\n",
        "num_ids": 45
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return 8 * (n - 1) + 1\n",
        "num_ids": 41
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n - 1) / 2\n",
        "num_ids": 16
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    n -= 1\n    i = 1\n    octa_num = 1\n    while i!= n:\n        octa_num += 1\n        i += 1\n        octa_num += 8 * octa_num * (1 - 2 * octa_num)\n",
        "num_ids": 65
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        return 7*(n-1)+2*(n-2)\n",
        "num_ids": 46
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if sum(map(int, list(s[i:j+1]))) == j-i+1:\n                count += 1\n    return count\n",
        "num_ids": 69
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    hash = defaultdict(int)\n    for i in range(n):\n        hash[s[i]] += 1\n        if i < n-1:\n            hash[s[i]+s[i+1]] += 1\n    total = 0\n    for i in range(10):\n        if i in hash:\n            total += hash[i] * (hash[i] - 1)//2\n    return total\n",
        "num_ids": 107
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    length = len(s)\n    count = 0\n    for i in range(length):\n        j = i\n        current = 0\n        while j < length and current < 10:\n            current += int(s[j])\n            j += 1\n        if current == j-i:\n            count += 1\n    return count\n",
        "num_ids": 78
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s)<=0:\n        return 0\n    \n    count = 0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            if sum([int(x) for x in s[i:j+1]]) == len(s[i:j+1]):\n                count += 1\n    return count\n",
        "num_ids": 92
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substrings = []\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if sum([int(c) for c in s[i:j + 1]]) == len(s[i:j + 1]):\n                substrings.append(s[i:j + 1])\n    return len(substrings)\n",
        "num_ids": 92
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    c = 0\n    for i in xrange(len(s)):\n        for j in xrange(i,len(s)+1):\n            if (sum(map(int,list(s[i:j]))) == len(s[i:j])):\n                c+=1\n    return c\n",
        "num_ids": 74
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count=0\n    m=defaultdict(int)\n    for i in range(len(s)):\n        m[s[i]]+=1\n    for key in m:\n        count+=m[key]*(m[key]-1)//2\n    return count\ndef Min_Window_Substrings(s, t):\n    '''\n    Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).\n    '''\n    if len(s) < len(t):\n        return \"\"\n    m = defaultdict(int)\n    for i in t:\n        m[i] += 1\n    n = len(s)\n    nums = len(t)\n    end = start = 0\n    res = \"\"\n    count = 0\n    char_ind = defaultdict(int)\n    while end < n:\n        while count < nums and end < n:\n            curr_char = s[end]\n            char_ind[curr_char] += 1\n            if char_ind[curr_char] <= m[curr_char]:\n                count += 1\n            end += 1\n        if count == nums:\n            while count == nums and start < n:\n                curr_char = s[start]\n                if char_ind[curr_char] == m[curr_char]:\n                    count -= 1\n                char_ind[curr_char] -= 1\n                start += 1\n            if count == nums:\n                if not res or end - start < len(res):\n                    res = s[start:end]\n    return res\ndef number_of_Substrings(s):\n    '''\n    Given a string S, find the number of substrings with K distinct characters.\n    '''\n    nums = len(s)\n    count = 0\n    char_ind = defaultdict(int)\n    for i in range(nums):\n        char_ind[s[i]] += 1\n    count = 0\n    for i in range(nums):\n        while count < nums and len(char_ind) <= i:\n            char_ind[s[i]] += 1\n            count += 1\n        count -= 1\n        if len(char_ind) == i + 1:\n            count += 1\n        count -= 1\n    return count\ndef valid_Brackets(s):\n    '''\n    Given a string S, find if it is balanced. A balanced string is a string where the following conditions are satisfied:\n    - The brackets \"[]\" or \"()\" may not be nested.\n    - The brackets \"[}\" or \"()\" may not be nested when followed by a closing bracket.\n    - The brackets \"()\" or \"()[]{}\" may not be nested when followed by a closing bracket.\n    '''\n    nums = len(s)\n    stk = []\n    for i in range(nums):\n        if s[i] == '(' or s[i] == '[' or s[i] == '{':\n            stk.append(s[i])\n        elif s[i] == ')' or s[i] == ']' or s[i] == '}':\n            if len(stk) == 0:\n                return False\n            else:\n                if (s[i] == ')' and stk[-1] == '(') or (s[i] == ']' and stk[-1] == '[') or (s[i] == '}' and stk[-1] == '{'):\n                    stk.pop()\n                else:\n                    return False\n    if len(stk) == 0:\n        return True\n    else:\n        return False\ndef Remove_Duplicates(nums):\n    '''\n    Given a list of numbers, remove all duplicates from it. Do not use set().\n    '''\n    nums.sort()\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        if nums[i] == nums[i-1]:\n            del nums[i]\n    return len(nums)\ndef Reverse(nums, start, end):\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1\ndef Rotate_Array(nums, start, end):\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1\ndef Rotate_Array_Optimized(nums, start, end):\n    nums[start], nums[end] = nums[end], nums[start]\ndef Rotate_Arrays(nums1, nums2):\n    nums1.reverse()\n    nums2.reverse()\ndef Merge(nums1, m, nums2, n):\n    '''\n    Given two sorted integer arrays A and B, merge B into A as one sorted array.\n    '''\n    for i in range(n):\n        nums1[m+i] = nums2[i]\n    for i in range(n):\n        nums1.sort()\ndef Merge_2(nums1, m, nums2, n):\n    '''\n    Given two sorted integer arrays A and B, merge B into A as one sorted array.\n    '''\n    nums1_index = m+n-1\n    nums2_index = n-1\n    nums1_index = m-1\n    while nums2_index >= 0:\n        if nums1_index < 0:\n            nums1[nums1_index] = nums2[nums2_index]\n            nums2_index -= 1\n        elif nums2_index < 0:\n            pass\n        elif nums1[nums1_index] < nums2[nums2_index]:\n            nums1[nums1_index] = nums2[nums2_index]\n            nums2_index -= 1\n        else:\n            nums1[nums1_index] = nums1[nums1_index+1]\n            nums1_index -= 1\ndef Insertion_Sort(nums):\n    '''\n    Given a list of integers, sort them in non-decreasing order using insertion sort.\n    '''\n    for i in range(1, len(nums)):\n        curr = nums[i]\n        j = i\n        while j > 0 and nums[j-1] > curr:\n            nums[j] = nums[j-1]\n            j -= 1\n        nums[j] = curr\ndef Insertion_Sort_2(nums):\n    '''\n    Given a list of integers, sort them in non-decreasing order using insertion sort.\n    '''\n    for i in range(1, len(nums)):\n        curr = nums[i]\n        j = i\n        while j > 0 and curr < nums[j-1]:\n            nums[j] = nums[j-1]\n            j -= 1\n        nums[j] = curr\ndef Find_Min(nums):\n    '''\n    Find the minimum element in the list.\n    '''\n    res = 0\n    for i in range(len(nums)):\n        if nums[i] < nums[res]:\n            res = i\n    return res\ndef Find_Min_2(nums):\n    '''\n    Find the minimum element in the list.\n    '''\n    if len(nums) == 0:\n        return -1\n    min_index = 0\n    for i in range(1, len(nums)):\n        if nums[i] < nums[min_index]:\n            min_index = i\n    return min_index\ndef Find_Min_3(nums):\n    '''\n    Find the minimum element in the list.\n    '''\n    min_index = 0\n    for i in range(1, len(nums)):\n        if nums[i] < nums[min_index]:\n            min_index = i\n    return min_index\ndef Find_Min_4(nums):\n    '''\n    Find the minimum element in the list.\n    '''\n    if len(nums) == 0:\n        retur",
        "num_ids": 16
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            if sum([int(x) for x in list(s[i:j+1])]) == len(list(s[i:j+1])):\n                ans += 1\n    return ans\n",
        "num_ids": 81
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if not s:\n        return 0\n    elif len(s) == 1:\n        return 1 if int(s) == len(s) else 0\n    result = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            result[s[i:j]] += 1\n    return sum(result.values())\n",
        "num_ids": 98
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n+1):\n            if int(s[i:j])==j-i:\n                count += 1\n    return count\n",
        "num_ids": 64
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # the first element of the list is the smallest\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n",
        "num_ids": 49
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) < 1:\n        return False\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest\n",
        "num_ids": 65
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs == []:\n        return None\n    return min(xs)\n",
        "num_ids": 21
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    num = 0\n    for x in xs:\n        if x < num:\n            num = x\n    return num\n",
        "num_ids": 31
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_num = xs[0]\n    for i in xs:\n        if i < smallest_num:\n            smallest_num = i\n    return smallest_num\n",
        "num_ids": 45
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    # TODO\n    \n    return max_diff\n",
        "num_ids": 22
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list = sorted(test_list)\n    max_difference = 0\n    for i in range(len(test_list)):\n        if i == len(test_list)-1:\n            break\n        max_difference = max(abs(test_list[i] - test_list[i+1]), max_difference)\n    return max_difference\n",
        "num_ids": 90
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in xrange(len(test_list)):\n        for j in xrange(len(test_list)):\n            if i!= j:\n                diff = abs(test_list[i] - test_list[j])\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff\n",
        "num_ids": 88
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff_list = []\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            diff_list.append(test_list[i]-test_list[j])\n    return max(diff_list)\n",
        "num_ids": 71
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    my_list = list()\n    for i in range(0, len(test_list)):\n        for j in range(i, len(test_list)):\n            if test_list[i]!= test_list[j]:\n                my_list.append((test_list[i], test_list[j]))\n    return max(my_list)\n",
        "num_ids": 89
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list.sort()\n    length = len(test_list)\n    max_diff = 0\n    for i in range(0, length):\n        diff = test_list[i] - test_list[i+1]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n",
        "num_ids": 79
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    sorted_list = sorted(test_list)\n    for i in range(len(sorted_list)-1):\n        difference = sorted_list[i+1] - sorted_list[i]\n        print difference\n",
        "num_ids": 55
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pair_list = []\n    max_diff = None\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i]!= test_list[j]:\n                pair_list.append((test_list[i], test_list[j]))\n",
        "num_ids": 82
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    #base case\n    if len(test_list) <= 3:\n        return 0\n",
        "num_ids": 23
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    from itertools import combinations\n    for i in combinations(test_list,2):\n        print (abs(i[0]-i[1]))\n        \n",
        "num_ids": 40
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n",
        "num_ids": 23
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks,key=lambda x:x[1])\n",
        "num_ids": 19
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subject_marks = sorted(subjectmarks, key = lambda subject_marks: subject_marks[1])\n    return subject_marks\n",
        "num_ids": 32
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subj_marks = [(x,y) for x,y in subjectmarks]\n    return sorted(subj_marks, key = lambda x:x[1])\n",
        "num_ids": 41
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subject_marks = []\n    for k,v in subjectmarks:\n        subject_marks.append((k,v))\n    subject_marks.sort(key = lambda x: x[1], reverse = True)\n    return subject_marks\n",
        "num_ids": 58
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks,key=lambda x: x[1])\n",
        "num_ids": 19
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda student: student[1])\n",
        "num_ids": 19
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks,key=lambda x:x[1])\n",
        "num_ids": 19
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples on second element\n    sorted_marks = sorted(subjectmarks, key = lambda x:x[1])\n    return sorted_marks\n",
        "num_ids": 41
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subj_marks = list()\n    for i in subjectmarks:\n        subj_marks.append((i[1], i[0]))\n",
        "num_ids": 37
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 50
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 45
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 50
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 38
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 66
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # If the list is a scalar (has a single element),\n    # return the element (a number).\n    if len(data_list)==1:\n        return data_list[0]\n    else:\n        # Otherwise, recurse (call the function, passing\n        # in the rest of the list)\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 99
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    return recursive_list_sum(data_list[1:]) + data_list[0]\n",
        "num_ids": 38
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return recursive_list_sum(data_list[1:]) + data_list[0]\n",
        "num_ids": 50
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if type(data_list)!= list:\n        return data_list\n",
        "num_ids": 20
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    if len(data_list) == 0:\n        return 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n",
        "num_ids": 67
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos = 0\n    for item in list:\n        if item > 0:\n            pos += 1\n    return pos\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for number in list:\n        if number > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    print count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos = 0\n    for num in list:\n        if num > 0:\n            pos += 1\n    return pos\n    \ndef neg_count(list):\n    '''\n    Write a python function to count the number of negative numbers in a list.\n    '''\n    neg = 0\n    for num in list:\n        if num < 0:\n            neg += 1\n    return neg\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count = count + 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(x>0 for x in list)\n",
        "num_ids": 15
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for item in list:\n        if item > 0:\n            count = count + 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    n = n + 1\n    a = [0] * (n)\n    a[0] = 1\n    for i in range(1, n):\n        a[i] = i * a[i-1]\n    return a[n-1]\n",
        "num_ids": 63
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    memo = {0:1, 1:1, 2:2}\n    \n    for i in range(3,n+1):\n        memo[i] = memo[i-1] + memo[i-2]\n    \n    return memo[n]\n",
        "num_ids": 67
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return bell_number_rec(n)\n    \ndef bell_number_rec(n):\n    '''\n    The function bell_number_rec computes the number of ways to partition the set of Bell numbers to make n partitions.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    else:\n        return bell_number_rec(n-1) + bell_number_rec(n-2)\n",
        "num_ids": 52
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 5\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n",
        "num_ids": 84
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + bell_number(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    return bell_number(n - 1) + bell_number(n - 2)\n",
        "num_ids": 44
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return bell(n)\n",
        "num_ids": 9
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n",
        "num_ids": 37
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n",
        "num_ids": 49
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    d = [0] * (n+1)\n    d[0] = 1\n    d[1] = 1\n    for i in range(2, n+1):\n        d[i] = d[i-1] + d[i-2]\n    return d[n]\n",
        "num_ids": 71
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)==0:\n        return True\n    elif len(A)==1:\n        return True\n    else:\n        return (A[0]<=A[1] and A[-1]>=A[-2]) or (A[0]>=A[1] and A[-1]<=A[-2])\n",
        "num_ids": 87
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # for i in range(1, len(A)):\n    #     if A[i] <= A[i-1]:\n    #         return False\n    # return True\n",
        "num_ids": 44
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 0: \n        return True\n    return A[0] <= A[1] <= A[2] <= A[3] <= A[4] <= A[5]\n",
        "num_ids": 49
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if A[i]>=A[i+1]:\n            continue\n        else:\n            return False\n    return True\n    \nprint is_Monotonic([1,1,2,3,4])\n",
        "num_ids": 65
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i+1] for i in xrange(len(A)-1)) or\n        all(A[i] >= A[i+1] for i in xrange(len(A)-1)))\n",
        "num_ids": 59
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # if A is empty, return false\n    if len(A) == 0:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return all(A[i] <= A[i+1] for i in xrange(len(A)-1)) or all(A[i] >= A[i+1] for i in xrange(len(A)-1))\n",
        "num_ids": 56
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i]<=A[i+1] for i in range(len(A)-1)) or all(A[i]>=A[i+1] for i in range(len(A)-1)))\n",
        "num_ids": 57
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    A.sort()\n    for i in range(len(A)-1):\n        if A[i]>A[i+1]:\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    print \"Is monotonic? \",A[0]<=A[1]<=A[2]<=A[3]<=A[4]<=A[5]<=A[6]<=A[7]<=A[8]<=A[9]<=A[10]<=A[11]<=A[12]<=A[13]<=A[14]<=A[15]<=A[16]<=A[17]<=A[18]<=A[19]<=A[20]<=A[21]<=A[22]<=A[23]<=A[24]<=A[25]<=A[26]<=A[27]<=A[28]<=A[29]<=A[30]<=A[31]<=A[32]<=A[33]<=A[34]<=A[35]<=A[36]<=A[37]<=A[38]<=A[39]<=A[40]<=A[41]<=A[42]<=A[43]<=A[44]<=A[45]<=A[46]<=A[47]<=A[48]<=A[49]<=A[50]<=A[51]<=A[52]<=A[53]<=A[54]<=A[55]<=A[56]<=A[57]<=A[58]<=A[59]<=A[60]<=A[61]<=A[62]<=A[63]<=A[64]<=A[65]<=A[66]<=A[67]<=A[68]<=A[69]<=A[70]<=A[71]<=A[72]<=A[73]<=A[74]<=A[75]<=A[76]<=A[77]<=A[78]<=A[79]<=A[80]<=A[81]<=A[82]<=A[83]<=A[84]<=A[85]<=A[86]<=A[87]<=A[88]<=A[89]<=A[90]<=A[91]<=A[92]<=A[93]<=A[94]<=A[95]<=A[96]<=A[97]<=A[98]<=A[99]<=A[100]<=A[101]<=A[102]<=A[103]<=A[104]<=A[105]<=A[106]<=A[107]<=A[108]<=A[109]<=A[110]<=A[111]<=A[112]<=A[113]<=A[114]<=A[115]<=A[116]<=A[117]<=A[118]<=A[119]<=A[120]<=A[121]<=A[122]<=A[123]<=A[124]<=A[125]<=A[126]<=A[127]<=A[128]<=A[129]<=A[130]<=A[131]<=A[132]<=A[133]<=A[134]<=A[135]<=A[136]<=A[137]<=A[138]<=A[139]<=A[140]<=A[141]<=A[142]<=A[143]<=A[144]<=A[145]<=A[146]<=A[147]<=A[148]<=A[149]<=A[150]<=A[151]<=A[152]<=A[153]<=A[154]<=A[155]<=A[156]<=A[157]<=A[158]<=A[159]<=A[160]<=A[161]<=A[162]<=A[163]<=A[164]<=A[165]<=A[166]<=A[167]<=A[168]<=A[169]<=A[170]<=A[171]<=A[172]<=A[173]<=A[174]<=A[175]<=A[176]<=A[177]<=A[178]<=A[179]<=A[180]<=A[181]<=A[182]<=A[183]<=A[184]<=A[185]<=A[186]<=A[187]<=A[188]<=A[189]<=A[190]<=A[191]<=A[192]<=A[193]<=A[194]<=A[195]<=A[196]<=A[197]<=A[198]<=A[199]<=A[200]<=A[201]<=A[202]<=A[203]<=A[204]<=A[205]<=A[206]<=A[207]<=A[208]<=A[209]<=A[210]<=A[211]<=A[212]<=A[213]<=A[214]<=A[215]<=A[216]<=A[217]<=A[218]<=A[219]<=A[220]<=A[221]<=A[222]<=A[223]<=A[224]<=A[225]<=A[226]<=A[227]<=A[228]<=A[229]<=A[230]<=A[231]<=A[232]<=A[233]<=A[234]<=A[235]<=A[236]<=A[237]<=A[238]<=A[239]<=A[240]<=A[241]<=A[242]<=A[243]<=A[244]<=A[245]<=A[246]<=A[247]<=A[248]<=A[249]<=A[250]<=A[251]<=A[252]<=A[253]<=A[254]<=A[255]<=A[256]<=A[257]<=A[258]<=A[259]<=A[260]<=A[261]<=A[262]<=A[263]<=A[264]<=A[265]<=A[266]<=A[267]<=A[268]<=A[269]<=A[270]<=A[271]<=A[272]<=A[273]<=A[274]<=A[275]<=A[276]<=A[277]<=A[278]<=A[279]<=A[280]<=A[281]<=A[282]<=A[283]<=A[284]<=A[285]<=A[286]<=A[287]<=A[288]<=A[289]<=A[290]<=A[291]<=A[292]<=A[293]<=A[294]<=A[295]<=A[296]<=A[297]<=A[298]<=A[299]<=A[300]<=A[301]<=A[302]<=A[303]<=A[304]<=A[305]<=A[306]<=A[307]<=A[308]<=A[309]<=A[310]<=A[311]<=A[312]<=A[313]<=A[314]<=A[315]<=A[316]<=A[317]<=A[318]<=A[319]<=A[320]<=A[321]<=A[322]<=A[323]<=A[324]<=A[325]<=A[326]<=A[327]<=A[328]<=A[329]<=A[330]<=A[331]<=A[332]<=A[33",
        "num_ids": 2012
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # start = 0\n    # end = 0\n    # for i in range(len(l)):\n    #     if l[i] == s[0]:\n    #         start = i\n    #         break\n    # for i in range(len(l)):\n    #     if l[i] == s[-1]:\n    #         end = i\n    #         break\n    # if start == end:\n    #     return True\n    # else:\n    #     return False\n    return s in l\n",
        "num_ids": 124
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n",
        "num_ids": 43
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sublist = s[:]\n    while sublist:\n        try:\n            l.remove(sublist[-1])\n            sublist.pop()\n        except ValueError:\n            return False\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    start = 0\n    while True:\n        try:\n            if s[0:len(l)] == l:\n                return True\n        except IndexError:\n            return False\n        try:\n            s = s[len(l):]\n            start += 1\n        except IndexError:\n            return False\n",
        "num_ids": 74
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return l == s or any(l[:len(s)] == s for s in l)\n",
        "num_ids": 25
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) <= len(s):\n        return False\n    for i in range(len(s)):\n        if l[i] == s[i]:\n            pass\n        else:\n            return False\n    return True\n",
        "num_ids": 57
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)-len(s)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n",
        "num_ids": 42
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sublist = s\n    return sublist in l\n",
        "num_ids": 15
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    n = len(s)\n    if len(l) < n:\n        return False\n    for i in range(len(l) - n + 1):\n        if l[i:i + n] == s:\n            return True\n    return False\n",
        "num_ids": 62
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    def compare(l, s):\n        if len(l) == len(s):\n            for i in xrange(len(l)):\n                if l[i]!= s[i]:\n                    return False\n            return True\n        else:\n            return False\n    \n    for i in xrange(len(l) - len(s) + 1):\n        if compare(l[i:i+len(s)], s):\n            return True\n    return False\n",
        "num_ids": 113
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    hash_map = {}\n    for i in Input:\n        length = len(i)\n        if length in hash_map:\n            hash_map[length] += 1\n        else:\n            hash_map[length] = 1\n    for i in hash_map:\n        if hash_map[i] > 1:\n            return False\n    return True\n",
        "num_ids": 86
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return 0\n    x = len(Input[0])\n    for i in range(1,len(Input)):\n        if len(Input[i])!= x:\n            return 0\n    return 1\n",
        "num_ids": 61
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    def equal_len(t1, t2):\n        if len(t1) == len(t2):\n            return True\n        else:\n            return False\n    return equal_len(Input)\n",
        "num_ids": 50
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return Input.count(Input[0]) == len(Input)\n",
        "num_ids": 18
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    List = []\n    for i in Input:\n        List.append(len(i))\n    print List\n",
        "num_ids": 30
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    def equals(a,b):\n        if len(a)!=len(b):\n            return False\n        else:\n            return all([x==y for x,y in zip(a,b)])\n    \n    Input = tuple(Input)\n    return all([equals(t, Input[0]) for t in Input])\n    \nassert find_equal_tuple(['a','b','c','d','e'])\nassert find_equal_tuple(('a','b','c','d','e'))\nassert not find_equal_tuple(('a','b','c','d','f'))\nassert find_equal_tuple(('a','a','a','a','a'))\nassert not find_equal_tuple(('a','a','b','a','a'))\nassert not find_equal_tuple(('a','a','a','a','a','a','a','a','a','a'))",
        "num_ids": 220
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    def get_length(tup):\n        return len(tup)\n    return map(get_length, Input)\n",
        "num_ids": 31
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    L = len(Input)\n    if L <= 1:\n        return True\n    flag = True\n    for i in range(L-1):\n        if len(Input[i])!= len(Input[i+1]):\n            flag = False\n            break\n    return flag\n",
        "num_ids": 69
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    final_dict = {}\n    for i in Input:\n        if len(i) not in final_dict:\n            final_dict[len(i)] = [i]\n        else:\n            final_dict[len(i)].append(i)\n",
        "num_ids": 61
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return not len(set(len(t) for t in Input))\n",
        "num_ids": 19
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        if i == 0:\n            continue\n        temp = nums[i]\n        j = i - 1\n        while j >= 0 and nums[j] > temp:\n            nums[j + 1] = nums[j]\n            j = j - 1\n            nums[j + 1] = temp\n    return nums\n",
        "num_ids": 94
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    min_num = min(nums)\n    max_num = max(nums)\n    gap = (max_num - min_num) / len(nums)\n    sorted_nums = []\n    while min_num < max_num:\n        sorted_nums.append(min_num)\n        min_num += gap\n    sorted_nums.append(max_num)\n    return sorted_nums\n",
        "num_ids": 105
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums), 1, -1):\n        gap = 1\n        for j in range(0, i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n                gap = 0\n        if gap == 0:\n            break\n    return nums\n",
        "num_ids": 100
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    for i in range(len(nums) - 1):\n        for j in range(len(nums) - 1 - i):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    return nums\n",
        "num_ids": 84
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Initialize the variables\n    swapped = True\n    start = 0\n    end = len(nums) - 1\n    while (swapped == True):\n        swapped = False\n        for i in range(start, end):\n            if (nums[i] > nums[i+1]):\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n        if (swapped == False):\n            break\n        swapped = False\n        end = end - 1\n        for i in range(end-1, start-1, -1):\n            if (nums[i] > nums[i+1]):\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n        start = start + 1\n    return nums\n",
        "num_ids": 214
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    sort_size = len(nums)\n    if sort_size < 2:\n        return nums\n    i = 0\n    while i < sort_size - 1:\n        j = i + 1\n        while j < sort_size:\n            if nums[j] < nums[i]:\n                temp = nums[j]\n                nums[j] = nums[i]\n                nums[i] = temp\n            j += 1\n        i += 1\n    return nums\n",
        "num_ids": 119
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    if len(nums) == 1:\n        return nums\n    \n    for i in range(0, len(nums)-1):\n        j = i + 1\n        while j < len(nums) and nums[j] < nums[i]:\n            nums[j], nums[i] = nums[i], nums[j]\n            j += 1\n    return nums\n",
        "num_ids": 100
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) < 2:\n        return nums\n    min_num = min(nums)\n    min_num_idx = nums.index(min_num)\n    nums[:] = [x - min_num for x in nums]\n    max_num = max(nums)\n    max_num_idx = nums.index(max_num)\n    if min_num_idx > max_num_idx:\n        nums[:] = [x + min_num for x in nums]\n    else:\n        nums[:] = [x + max_num for x in nums]\n    return nums + [min_num]\n",
        "num_ids": 165
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n",
        "num_ids": 18
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    list_len = len(nums)\n    gap = list_len\n    swapped = True\n    \n    while gap!= 1 or swapped:\n        swapped = False\n        gap = max(1, int(gap/1.25))\n        for i in range(0, list_len - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n",
        "num_ids": 124
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a = math.floor(math.sqrt(n))\n    b = math.ceil(math.sqrt(n))\n    return (a*a == n or b*b == n)\n",
        "num_ids": 49
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    i = 1\n    while(i**2<=n):\n        if(i**2-n in xrange(1,n)):\n            return True\n        i+=1\n    return False\n",
        "num_ids": 51
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n>=0:\n        if n<=1:\n            return True\n        else:\n            root=int(sqrt(n))\n            if root**2==n:\n                return True\n            else:\n                return False\n    else:\n        return False\n",
        "num_ids": 66
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if(int(math.sqrt(n))**2 == n):\n        return True\n    else:\n        return False\n    \ndef dif_Factors(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two factors or not.\n    '''\n    dif_list = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0:\n            dif_list.append(i)\n            dif_list.append(n/i)\n    if dif_list == []:\n        return True\n    else:\n        return False\n    \ndef amicable(n):\n    '''\n    Write a python function to check whether the given number is amicable or not.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if n%i == 0 and dif_Square(i) and dif_Factors(i) and dif_Square(n/i):\n            sum += i\n    if sum == n:\n        return True\n    else:\n        return False\n    \ndef amicable_triangle(n):\n    '''\n    Write a python function to find the sum of all the amicable numbers between 1 and N.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if amicable(i):\n            sum += i\n    return sum\n    \ndef amicable_fibonacci(n):\n    '''\n    Write a python function to find the sum of all the amicable numbers between 1 and N.\n    '''\n    sum = 0\n    sum_f = [1, 2]\n    while sum < n:\n        if amicable(sum_f[-1]):\n            sum += sum_f[-1]\n        sum_f.append(sum_f[-1]+sum_f[-2])\n    return sum\n",
        "num_ids": 76
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    s = int(n**0.5)\n    diff = s**2 - n\n    if (abs(diff) < n):\n        return True\n    else:\n        return False\n",
        "num_ids": 46
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a, b = 2, 1\n    while a*a <= n:\n        b = a\n        a += 1\n    return a*a == n\n    \ndef sieve(n): \n    '''\n    Write a python function to return the number of prime numbers less than the given number.\n    '''\n    num_list = [True for i in range(n)] \n    for i in range(3, int(math.sqrt(n))+1, 2): \n        if num_list[i]: \n            for j in range(i*i, n, i): \n                num_list[j] = False\n    count = 0\n    for i in range(3, n, 2):\n        if num_list[i]:\n            count += 1\n    return count\n    \ndef prime_list(n):\n    '''\n    Write a python function to return the list of prime numbers less than the given number.\n    '''\n    prime_list = [True for i in range(n)]\n    for i in range(2, int(math.sqrt(n))):\n        if prime_list[i]:\n            for j in range(i*i, n, i):\n                prime_list[j] = False\n    return [i for i in range(2, n) if prime_list[i]]\n    \ndef fizz_buzz(n):\n    '''\n    Write a python function to return the values of fizz and buzz numbers.\n    '''\n    if n%3 == 0 and n%5 == 0:\n        return 'Fizz Buzz'\n    elif n%3 == 0:\n        return 'Fizz'\n    elif n%5 == 0:\n        return 'Buzz'\n    else:\n        return n\n    \ndef s(l):\n    '''\n    Write a python function to return the sum of the elements of the list.\n    '''\n    return sum(l)\n    \ndef prime_factors(n):\n    '''\n    Write a python function to return the list of prime factors of a number.\n    '''\n    factors = []\n    while n%2 == 0:\n        factors.append(2)\n        n = n/2\n    for i in range(3,int(math.sqrt(n))+1,2):\n        while n%i==0:\n            factors.append(i)\n            n = n/i\n    if n > 2:\n        factors.append(n)\n    return factors\n    \ndef test_fizz_buzz():\n    '''\n    Write a python function to test the fizz_buzz function.\n    '''\n    print(fizz_buzz(15))\n    print(fizz_buzz(18))\n    print(fizz_buzz(3))\n    print(fizz_buzz(4))\n    print(fizz_buzz(5))\n    print(fizz_buzz(6))\n    print(fizz_buzz(7))\n    print(fizz_buzz(8))\n    print(fizz_buzz(9))\n    print(fizz_buzz(10))\n    print(fizz_buzz(11))\n    print(fizz_buzz(12))\n    print(fizz_buzz(13))\n    print(fizz_buzz(14))\n    print(fizz_buzz(16))\n    print(fizz_buzz(17))\n    print(fizz_buzz(18))\n    print(fizz_buzz(19))\n    print(fizz_buzz(20))\n    print(fizz_buzz(21))\n    print(fizz_buzz(22))\n    print(fizz_buzz(23))\n    print(fizz_buzz(24))\n    print(fizz_buzz(25))\n    print(fizz_buzz(26))\n    print(fizz_buzz(27))\n    print(fizz_buzz(28))\n    print(fizz_buzz(29))\n    print(fizz_buzz(30))\n    print(fizz_buzz(31))\n    print(fizz_buzz(32))\n    print(fizz_buzz(33))\n    print(fizz_buzz(34))\n    print(fizz_buzz(35))\n    print(fizz_buzz(36))\n    print(fizz_buzz(37))\n    print(fizz_buzz(38))\n    print(fizz_buzz(39))\n    print(fizz_buzz(40))\n    print(fizz_buzz(41))\n    print(fizz_buzz(42))\n    print(fizz_buzz(43))\n    print(fizz_buzz(44))\n    print(fizz_buzz(45))\n    print(fizz_buzz(46))\n    print(fizz_buzz(47))\n    print(fizz_buzz(48))\n    print(fizz_buzz(49))\n    print(fizz_buzz(50))\n    print(fizz_buzz(51))\n    print(fizz_buzz(52))\n    print(fizz_buzz(53))\n    print(fizz_buzz(54))\n    print(fizz_buzz(55))\n    print(fizz_buzz(56))\n    print(fizz_buzz(57))\n    print(fizz_buzz(58))\n    print(fizz_buzz(59))\n    print(fizz_buzz(60))\n    print(fizz_buzz(61))\n    print(fizz_buzz(62))\n    print(fizz_buzz(63))\n    print(fizz_buzz(64))\n    print(fizz_buzz(65))\n    print(fizz_buzz(66))\n    print(fizz_buzz(67))\n    print(fizz_buzz(68))\n    print(fizz_buzz(69))\n    print(fizz_buzz(70))\n    print(fizz_buzz(71))\n    print(fizz_buzz(72))\n    print(fizz_buzz(73))\n    print(fizz_buzz(74))\n    print(fizz_buzz(75))\n    print(fizz_buzz(76))\n    print(fizz_buzz(77))\n    print(fizz_buzz(78))\n    print(fizz_buzz(79))\n    print(fizz_buzz(80))\n    print(fizz_buzz(81))\n    print(fizz_buzz(82))\n    print(fizz_buzz(83))\n    print(fizz_buzz(84))\n    print(fizz_buzz(85))\n    print(fizz_buzz(86))\n    print(fizz_buzz(87))\n    print(fizz_buzz(88))\n    print(fizz_buzz(89))\n    print(fizz_buzz(90))\n    print(fizz_buzz(91))\n    print(fizz_buzz(92))\n    print(fizz_buzz(93))\n    print(fizz_buzz(94))\n    print(fizz_buzz(95))\n    print(fizz_buzz(96))\n    print(fizz_buzz(97))\n    print(fizz_buzz(98))\n    print(fizz_buzz(99))\n    print(fizz_buzz(100))\n    print(fizz_buzz(101))\n    print(fizz_buzz(102))\n    print(fizz_buzz(103))\n    print(fizz_buzz(104))\n    print(fizz_buzz(105))\n    print(fizz_buzz(106))\n    print(fizz_buzz(107))\n    print(fizz_buzz(108))\n    print(fizz_buzz(109))\n    print(fizz_buzz(110))\n    print(fizz_buzz(111))\n    print(fizz_buzz(112))\n    print(fizz_buzz(113))\n    print(fizz_buzz(114))\n    print(fizz_buzz(115))\n    print(fizz_buzz(116))\n    print",
        "num_ids": 1384
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    root = math.sqrt(n)\n    if math.ceil(root)**2 == n:\n        return True\n    else:\n        return False\ndef dif_Triangle(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two triangles or not.\n    '''\n    a = int(math.sqrt(2*n))\n    b = int(math.sqrt(2*n) + 1)\n    if a**2 + b**2 == n:\n        return True\n    else:\n        return False\ndef dif_Triangle(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two triangles or not.\n    '''\n    a = int(math.sqrt(2*n))\n    b = int(math.sqrt(2*n) + 1)\n    if a**2 + b**2 == n:\n        return True\n    else:\n        return False\n",
        "num_ids": 60
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n == 1):\n        return False\n    if (n == 2):\n        return True\n    k = int(math.sqrt(n))\n    if (n % (k**2) == 0):\n        return True\n    else:\n        return False\n    \ndef dif_Triangle(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two triangles or not.\n    '''\n    if (n == 1):\n        return False\n    if (n == 2):\n        return True\n    for i in range(2,n):\n        if (i**2 == n-i):\n            return True\n    return False\n    \ndef dif_Pentagonal(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two pentagonal numbers or not.\n    '''\n    if (n == 1):\n        return False\n    if (n == 2):\n        return True\n    for i in range(3,n):\n        if (i**2 - i/2 == n):\n            return True\n    return False\n    \ndef dif_Hexagonal(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two hexagonal numbers or not.\n    '''\n    if (n == 1):\n        return False\n    if (n == 2):\n        return True\n    for i in range(3,n):\n        if (i**2 - 2*i + 1 == n):\n            return True\n    return False\n    \ndef dif_Heptagonal(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two heptagonal numbers or not.\n    '''\n    if (n == 1):\n        return False\n    if (n == 2):\n        return True\n    for i in range(3,n):\n        if (i**2 - 3*i + 2 == n):\n            return True\n    return False\n    \ndef dif_Octagonal(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two octagonal numbers or not.\n    '''\n    if (n == 1):\n        return False\n    if (n == 2):\n        return True\n    for i in range(3,n):\n        if (i**2 - 2*i + 3 == n):\n            return True\n    return False\n    \ndef dif_Nonagonal(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two nonagonal numbers or not.\n    '''\n    if (n == 1):\n        return False\n    if (n == 2):\n        return True\n    for i in range(3,n):\n        if (i**2 - i + 2 == n):\n            return True\n    return False\n    \ndef dif_Decagonal(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two decagonal numbers or not.\n    '''\n    if (n == 1):\n        return False\n    if (n == 2):\n        return True\n    for i in range(3,n):\n        if (i**2 - i - 1 == n):\n            return True\n    return False\n    \ndef dif_Undecagonal(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two undecagonal numbers or not.\n    '''\n    if (n == 1):\n        return False\n    if (n == 2):\n        return True\n    for i in range(3,n):\n        if (i**2 - i + 2 == n):\n            return True\n    return False\n    \ndef dif_Fibonacci(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two fibonacci numbers or not.\n    '''\n    if (n == 1):\n        return False\n    if (n == 2):\n        return True\n    for i in range(3,n):\n        if (i**2 == n - 2*i):\n            return True\n    return False\n    \ndef dif_Lucas(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two Lucas numbers or not.\n    '''\n    if (n == 1):\n        return False\n    if (n == 2):\n        return True\n    for i in range(3,n):\n        if (i**2 + 1 == n):\n            return True\n    return False\n    \ndef dif_Hybrid(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two hybrid numbers or not.\n    '''\n    if (n == 1):\n        return False\n    if (n == 2):\n        return True\n    for i in range(3,n):\n        if (i**2 + 1 == n or i**2 - 1 == n):\n            return True\n    return False\n    \ndef dif_Fibonacci_Number(n):\n    '''\n    Write a python function to find the nth Fibonacci Number.\n    '''\n    Fibonacci_number = [1,1]\n    for i in range(2,n+1):\n        Fibonacci_number.append(Fibonacci_number[-2] + Fibonacci_number[-1])\n    return Fibonacci_number[n-1]\n    \ndef dif_Pentagonal_Number(n):\n    '''\n    Write a python function to find the nth pentagonal number.\n    '''\n    pentagonal_number = [1,1]\n    for i in range(2,n+1):\n        pentagonal_number.append(pentagonal_number[-2] + pentagonal_number[-1])\n    return pentagonal_number[n-1]\n    \ndef dif_Hexagonal_Number(n):\n    '''\n    Write a python function to find the nth hexagonal number.\n    '''\n    hexagonal_number = [1,1]\n    for i in range(2,n+1):\n        hexagonal_number.append(hexagonal_number[-2] + hexagonal_number[-1])\n    return hexagonal_number[n-1]\n    \ndef dif_Heptagonal_Number(n):\n    '''\n    Write a python function to find the nth heptagonal number.\n    '''\n    heptagonal_number = [1,1]\n    for i in range(2,n+1):\n        heptagonal_number.append(heptagonal_number[-2] + heptagonal_number[-1])\n    return heptagonal_number[n-1]\n    \ndef dif_Octagonal_Number(n):\n    '''\n    Write a python function to find the nth octagonal number.\n    '''\n    octagonal_number = [1,1]\n    for i in range(2,n+1):\n        octagonal_number.append(octagonal_number[-2] + octagonal_number[-1])\n    return octagonal_number[n-1]\n    \ndef dif_Nonagonal_Number(n):\n    '''\n    Write a python function to find the nth nonagonal number.\n    '''\n    nonagonal_number = [1,1]\n    for i in range(2,n+1):\n        nonagonal_number.append(nonagonal_number[-2] + nonagonal_number[-1])\n    return nonagonal_number[n-1]\n    \ndef dif_Decagonal_Number(n):\n    '''\n    Write a python function to find the nth decagonal number.\n    '''\n    decagonal_number = [1,1]\n    for i in range(2,n+1):\n        decagonal_number.append(decagonal_number[-2] + decagonal_number[-1])\n    return decagonal_number[n-1]\n    \ndef dif_Undecagonal_Number(n):\n    '''\n    Write a python function to find the nth undecagonal number.\n    '''\n    undecagonal_number = [1,1]\n    for i in range(2,n+1):\n        undecagonal_number.append(unde",
        "num_ids": 39
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def is_Square(x): \n        '''\n        Write a python function to check whether the given number can be represented as the difference of two squares or not.\n        '''\n        if x==0: \n            return True\n        elif x<0: \n            return False\n        else: \n            return is_Square(x//2)\n    if is_Square(n)==True: \n        print(\"n=\",n,\" is the difference of two squares.\")\n    else: \n        print(\"n=\",n,\" is not the difference of two squares.\")\ndef dif_Triangle(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two triangles or not.\n    '''\n    def is_Triangle(x): \n        '''\n        Write a python function to check whether the given number can be represented as the difference of two triangles or not.\n        '''\n        if x==0: \n            return True\n        elif x<0: \n            return False\n        else: \n            return is_Triangle(x//3)\n    if is_Triangle(n)==True: \n        print(\"n=\",n,\" is the difference of two triangles.\")\n    else: \n        print(\"n=\",n,\" is not the difference of two triangles.\")\ndef dif_Heptagon(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two heptagons or not.\n    '''\n    def is_Heptagon(x): \n        '''\n        Write a python function to check whether the given number can be represented as the difference of two heptagons or not.\n        '''\n        if x==0: \n            return True\n        elif x<0: \n            return False\n        else: \n            return is_Heptagon(x//7)\n    if is_Heptagon(n)==True: \n        print(\"n=\",n,\" is the difference of two heptagons.\")\n    else: \n        print(\"n=\",n,\" is not the difference of two heptagons.\")\ndef dif_Octagon(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two octagons or not.\n    '''\n    def is_Octagon(x): \n        '''\n        Write a python function to check whether the given number can be represented as the difference of two octagons or not.\n        '''\n        if x==0: \n            return True\n        elif x<0: \n            return False\n        else: \n            return is_Octagon(x//8)\n    if is_Octagon(n)==True: \n        print(\"n=\",n,\" is the difference of two octagons.\")\n    else: \n        print(\"n=\",n,\" is not the difference of two octagons.\")\ndef dif_Tetrahedron(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two tetrahedrons or not.\n    '''\n    def is_Tetrahedron(x): \n        '''\n        Write a python function to check whether the given number can be represented as the difference of two tetrahedrons or not.\n        '''\n        if x==0: \n            return True\n        elif x<0: \n            return False\n        else: \n            return is_Tetrahedron(x//4)\n    if is_Tetrahedron(n)==True: \n        print(\"n=\",n,\" is the difference of two tetrahedrons.\")\n    else: \n        print(\"n=\",n,\" is not the difference of two tetrahedrons.\")\ndef dif_Dodecahedron(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two dodecahedrons or not.\n    '''\n    def is_Dodecahedron(x): \n        '''\n        Write a python function to check whether the given number can be represented as the difference of two dodecahedrons or not.\n        '''\n        if x==0: \n            return True\n        elif x<0: \n            return False\n        else: \n            return is_Dodecahedron(x//5)\n    if is_Dodecahedron(n)==True: \n        print(\"n=\",n,\" is the difference of two dodecahedrons.\")\n    else: \n        print(\"n=\",n,\" is not the difference of two dodecahedrons.\")\ndef dif_Icosahedron(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two icosahedrons or not.\n    '''\n    def is_Icosahedron(x): \n        '''\n        Write a python function to check whether the given number can be represented as the difference of two icosahedrons or not.\n        '''\n        if x==0: \n            return True\n        elif x<0: \n            return False\n        else: \n            return is_Icosahedron(x//6)\n    if is_Icosahedron(n)==True: \n        print(\"n=\",n,\" is the difference of two icosahedrons.\")\n    else: \n        print(\"n=\",n,\" is not the difference of two icosahedrons.\")\ndef dif_Truncated_Pentagon(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two truncated pentagons or not.\n    '''\n    def is_Truncated_Pentagon(x): \n        '''\n        Write a python function to check whether the given number can be represented as the difference of two truncated pentagons or not.\n        '''\n        if x==0: \n            return True\n        elif x<0: \n            return False\n        else: \n            return is_Truncated_Pentagon(x//5)\n    if is_Truncated_Pentagon(n)==True: \n        print(\"n=\",n,\" is the difference of two truncated pentagons.\")\n    else: \n        print(\"n=\",n,\" is not the difference of two truncated pentagons.\")\ndef dif_Truncated_Hexagon(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two truncated hexagons or not.\n    '''\n    def is_Truncated_Hexagon(x): \n        '''\n        Write a python function to check whether the given number can be represented as the difference of two truncated hexagons or not.\n        '''\n        if x==0: \n            return True\n        elif x<0: \n            return False\n        else: \n            return is_Truncated_Hexagon(x//6)\n    if is_Truncated_Hexagon(n)==True: \n        print(\"n=\",n,\" is the difference of two truncated hexagons.\")\n    else: \n        print(\"n=\",n,\" is not the difference of two truncated hexagons.\")\ndef dif_Truncated_Heptagon(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two truncated heptagons or not.\n    '''\n    def is_Truncated_Heptagon(x): \n        '''\n        Write a python function to check whether the given number can be represented as the difference of two truncated heptagons or not.\n        '''\n        if x==0: \n            return True\n        elif x<0: \n            return False\n        else: \n            return is_Truncated_Heptagon(x//7)\n    if is_Truncated_Heptagon(n)==True: \n        print(\"n=\",n,\" is the difference of two truncated heptagons.\")\n    else: \n        print(\"n=\",n,\" is not the difference of two truncated heptagons.\")\ndef dif_Truncated_Octagon(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two truncated octagons or not.\n    '''\n    def is_Truncated_Octagon(x):",
        "num_ids": 15
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def check(x): \n        if (x == 1 or x == 0): \n            return False\n        if x < 0: \n            return False\n        sqr = x**0.5\n        if int(sqr)**2 == x: \n            return True\n        else: \n            return False\n    d = []\n    for x in range(1,n+1): \n        d.append(check(x))\n    return d\n",
        "num_ids": 109
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if patterns[i] == '#':\n            if not colors[i] == colors[i+1]:\n                return False\n        elif patterns[i] == '.':\n            if colors[i] == colors[i+1]:\n                return False\n    return True\n",
        "num_ids": 79
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) == len(patterns):\n        pattern = patterns[0]\n        for i in range(1,len(patterns)):\n            if len(pattern)!= len(patterns[i]):\n                return False\n            for j in range(len(pattern)):\n                if pattern[j]!= patterns[i][j]:\n                    return False\n        return True\n    else:\n        return False\n",
        "num_ids": 102
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    def helper(s, i, j):\n        if i == j:\n            return True\n        if i < j:\n            return s[i] == s[j] and helper(s, i+1, j-1)\n",
        "num_ids": 56
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    if n == 0:\n        return True\n    if n == 1:\n        return colors[0] == patterns[0]\n    for i in range(n):\n        if colors[i]!= patterns[i]:\n            return False\n    return is_samepatterns(colors[n:], patterns[n:])\n",
        "num_ids": 87
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for idx in range(len(colors)):\n        if colors[idx]!= patterns[idx]:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    positions = [0]\n    for pattern in patterns:\n        if pattern == 'RRDD':\n            positions.append(positions[-1] + 1)\n        elif pattern == 'RDRR':\n            positions.append(positions[-1] - 1)\n        elif pattern == 'DRRD':\n            positions.append(positions[-1] - 4)\n        elif pattern == 'RDRD':\n            positions.append(positions[-1] + 4)\n        elif pattern == 'DRRDR':\n            positions.append(positions[-1] - 8)\n        elif pattern == 'DRRDRR':\n            positions.append(positions[-1] + 8)\n    return colors[positions[-1]] == colors[positions[0]]\n    \n    \ndef permute(num_colors, patterns):\n    colors = ['r', 'b', 'g', 'y']\n    for i in range(num_colors):\n        if not is_samepatterns(colors, patterns):\n            return False\n    return True\n    \n",
        "num_ids": 266
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Each color in the sequence has to be in the array\n    for color in patterns:\n        if not color in colors:\n            return False\n    \n    # Check that each pair of colors are the same\n    for i in range(len(patterns)):\n        if patterns[i] == patterns[i+1]:\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 91
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    if len(colors)!= len(patterns):\n        return False\n    \n    color_to_check = colors[0]\n    \n    for i in range(1, len(colors)):\n        if patterns[i] == 0:\n            color_to_check = colors[i]\n        elif patterns[i] == 1:\n            if color_to_check == colors[i]:\n                return False\n            else:\n                color_to_check = colors[i]\n        else:\n            if color_to_check == colors[i]:\n                return True\n            else:\n                color_to_check = colors[i]\n    \n    return False\n",
        "num_ids": 162
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # the patterns array will be an array of numbers, where each number represents a color.\n    # the current color to match is colors[i]\n    # the pattern to check is patterns[i]\n    # you'll want to return true if the colors match\n    # you'll want to return false if they don't match\n    # your function should return true if colors == patterns\n    # your function should return false if colors!= patterns\n    \n    # NOTE: color.is_samepatterns() will return false if color is a pattern, and will return true if color is not a pattern\n    \n    # use for loop to compare colors\n    # check to see if the colors match the pattern\n    # if they match, use another for loop to iterate through the patterns\n    # if they don't match, return false\n    \n    for i in range(len(patterns)):\n        if (colors[i]!= patterns[i]):\n            return False\n    \n    return True\n",
        "num_ids": 225
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    count = 0\n    for i in test_list:\n        if all(j%K == 0 for j in i):\n            count+=1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    results = []\n    for tup in test_list:\n        if all(int(elem) % K == 0 for elem in tup):\n            results.append(tup)\n",
        "num_ids": 47
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return list(filter(lambda x: all([True if (y % K == 0) else False for y in x]), test_list))\n",
        "num_ids": 34
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for a, b in test_list:\n        if b%K == 0:\n            result.append((a,b))\n    return result\n",
        "num_ids": 41
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    div_tuples = []\n    for tup in test_list:\n        flag = True\n        for ele in tup:\n            if (ele%K)!= 0:\n                flag = False\n                break\n        if flag == True:\n            div_tuples.append(tup)\n    return div_tuples\n",
        "num_ids": 78
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    for each_tuple in test_list:\n        if all(x%K == 0 for x in each_tuple):\n            res.append(each_tuple)\n    return res\n",
        "num_ids": 52
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    output = []\n    for tup in test_list:\n        if tup[0]%K == 0 and tup[1]%K == 0:\n            output.append(tup)\n    return output\n",
        "num_ids": 53
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    for tup in test_list:\n        if len(tup) == K:\n            s = set(tup)\n            if len(s) == K:\n                res.append(tup)\n    return res\n",
        "num_ids": 60
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    results = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            results.append(tup)\n    return results\n",
        "num_ids": 46
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for x in test_list:\n        if x[0]%K!=0:\n            return False\n        elif x[1]%K!=0:\n            return False\n        elif x[2]%K!=0:\n            return False\n    return True\n",
        "num_ids": 68
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11 == 0\n",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        print 'is divisible by 11'\n    else:\n        print 'is not divisible by 11'\n",
        "num_ids": 36
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0: \n        return True\n    else: \n        return False\n",
        "num_ids": 25
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_Diff2(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_Diff3(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_Diff4(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_Diff5(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_Diff6(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_Diff7(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_Diff8(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_Diff9(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_Diff10(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_Diff11(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_Diff12(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_Diff13(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_Diff14(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_Diff15(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_Diff16(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_Diff17(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_Diff18(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_Diff19(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_Diff20(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_Diff21(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_Diff22(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_Diff23(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_Diff24(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_Diff25(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_Diff26(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_Diff27(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_Diff28(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_Diff29(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_Diff30(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_Diff31(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_Diff32(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_Diff33(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_Diff34(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_Diff35(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_Diff36(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_Diff37(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '",
        "num_ids": 21
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    return False\n",
        "num_ids": 19
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0): \n        return True\n    else: \n        return False\n",
        "num_ids": 26
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11) == 0: \n        return True\n    else: \n        return False\ndef main():\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    num = int(raw_input('Enter a number:'))\n    if is_Diff(num): \n        print 'The number is divisible by 11'\n    else: \n        print 'The number is not divisible by 11'\nmain()",
        "num_ids": 59
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n",
        "num_ids": 10
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    #if len(s)%2!=0:\n        #return True\n    #else:\n        #return False\n    return len(s)%2==0\n",
        "num_ids": 42
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1:\n        return True\n    else:\n        return False\n    \n",
        "num_ids": 28
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2\n",
        "num_ids": 11
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2!=0\n",
        "num_ids": 14
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==0\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0: \n        return True\n    else: \n        return False\n",
        "num_ids": 28
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2!=0\n",
        "num_ids": 14
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    n = len(s)\n    return n % 2 == 0\n",
        "num_ids": 18
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n",
        "num_ids": 13
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    total = 0\n    for i in range(1, n):\n        total += i\n    \n    return total\n",
        "num_ids": 31
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 4\n    elif n == 2:\n        return 10\n    elif n == 3:\n        return 20\n    elif n == 4:\n        return 40\n    elif n == 5:\n        return 60\n    elif n == 6:\n        return 70\n    elif n == 7:\n        return 90\n    elif n == 8:\n        return 120\n    elif n == 9:\n        return 140\n    elif n == 10:\n        return 160\n    elif n == 11:\n        return 180\n    elif n == 12:\n        return 200\n    elif n == 13:\n        return 220\n    elif n == 14:\n        return 240\n    elif n == 15:\n        return 260\n    elif n == 16:\n        return 280\n    elif n == 17:\n        return 300\n    elif n == 18:\n        return 320\n    elif n == 19:\n        return 340\n    elif n == 20:\n        return 360\n    elif n == 21:\n        return 380\n    elif n == 22:\n        return 400\n    elif n == 23:\n        return 420\n    elif n == 24:\n        return 440\n    elif n == 25:\n        return 460\n    elif n == 26:\n        return 480\n    elif n == 27:\n        return 500\n    elif n == 28:\n        return 520\n    elif n == 29:\n        return 540\n    elif n == 30:\n        return 560\n    elif n == 31:\n        return 580\n    elif n == 32:\n        return 600\n    elif n == 33:\n        return 620\n    elif n == 34:\n        return 640\n    elif n == 35:\n        return 660\n    elif n == 36:\n        return 680\n    elif n == 37:\n        return 700\n    elif n == 38:\n        return 720\n    elif n == 39:\n        return 740\n    elif n == 40:\n        return 760\n    elif n == 41:\n        return 780\n    elif n == 42:\n        return 800\n    elif n == 43:\n        return 820\n    elif n == 44:\n        return 840\n    elif n == 45:\n        return 860\n    elif n == 46:\n        return 880\n    elif n == 47:\n        return 900\n    elif n == 48:\n        return 920\n    elif n == 49:\n        return 940\n    elif n == 50:\n        return 960\n    elif n == 51:\n        return 980\n    elif n == 52:\n        return 1000\n    elif n == 53:\n        return 1020\n    elif n == 54:\n        return 1040\n    elif n == 55:\n        return 1060\n    elif n == 56:\n        return 1080\n    elif n == 57:\n        return 1100\n    elif n == 58:\n        return 1120\n    elif n == 59:\n        return 1140\n    elif n == 60:\n        return 1160\n    elif n == 61:\n        return 1180\n    elif n == 62:\n        return 1200\n    elif n == 63:\n        return 1220\n    elif n == 64:\n        return 1240\n    elif n == 65:\n        return 1260\n    elif n == 66:\n        return 1280\n    elif n == 67:\n        return 1300\n    elif n == 68:\n        return 1320\n    elif n == 69:\n        return 1340\n    elif n == 70:\n        return 1360\n    elif n == 71:\n        return 1380\n    elif n == 72:\n        return 1400\n    elif n == 73:\n        return 1420\n    elif n == 74:\n        return 1440\n    elif n == 75:\n        return 1460\n    elif n == 76:\n        return 1480\n    elif n == 77:\n        return 1500\n    elif n == 78:\n        return 1520\n    elif n == 79:\n        return 1540\n    elif n == 80:\n        return 1560\n    elif n == 81:\n        return 1580\n    elif n == 82:\n        return 1600\n    elif n == 83:\n        return 1620\n    elif n == 84:\n        return 1640\n    elif n == 85:\n        return 1660\n    elif n == 86:\n        return 1680\n    elif n == 87:\n        return 1700\n    elif n == 88:\n        return 1720\n    elif n == 89:\n        return 1740\n    elif n == 90:\n        return 1760\n    elif n == 91:\n        return 1780\n    elif n == 92:\n        return 1800\n    elif n == 93:\n        return 1820\n    elif n == 94:\n        return 1840\n    elif n == 95:\n        return 1860\n    elif n == 96:\n        return 1880\n    elif n == 97:\n        return 1900\n    elif n == 98:\n        return 1920\n    elif n == 99:\n        return 1940\n    elif n == 100:\n        return 1960\n    elif n == 101:\n        return 1980\n    elif n == 102:\n        return 2000\n    elif n == 103:\n        return 2020\n    elif n == 104:\n        return 2040\n    elif n == 105:\n        return 2060\n    elif n == 106:\n        return 2080\n    elif n == 107:\n        return 2100\n    elif n == 108:\n        return 2120\n    elif n == 109:\n        return 2140\n    elif n == 110:\n        return 2160\n    elif n == 111:\n        return 2180\n    elif n == 112:\n        return 2200\n    elif n == 113:\n        return 2220\n    elif n == 114:\n        return 2240\n    elif n == 115:\n        return 2260\n    elif n == 116:\n        return 2280\n    elif n == 117:\n        return 2300\n    elif n == 118:\n        return 2320\n    elif n == 119:\n        return 2340\n    elif n == 120:\n        return 2360\n    elif n == 121:\n        return 2380\n    elif n == 122:\n        return 2400\n    elif n == 123:\n        return 2420\n    elif n == 124:\n        return 2440\n    elif n == 125:\n        return 2460\n    elif n == 126:\n        return 2480\n    elif n == 127:\n        return 2500\n    elif n == 128:\n        return 2520\n    elif n == 129:\n        return 2540\n    elif n == 130:\n        return 2560\n    elif n == 131:\n        return 2580\n    elif n == 132:\n        return 2600\n    elif n == 133:\n        return 2620\n    elif n == 134:\n        return 2640\n    elif n == 135:\n        return 2660\n    elif n == 136:\n        return 2680\n    elif n == 137:\n        return 2700\n    elif n == 138:\n        return 2720\n    elif n == 139:\n        return 2740\n    elif n == 140:\n        return 2760\n    elif n == 141:\n        return 2780\n    elif n == 142:\n        return 2800\n    elif n == 143:\n        return 2820\n    elif n == 144:\n        return 2840\n    elif n == 145:\n        return 2860\n    elif n == 146:\n        return 2880\n    elif n == 147:\n        return 2900\n    elif n == 148:\n        return 2920\n    elif n == 149:\n        return 2940\n    elif n == 150:\n        return 2960\n    elif n == 151:\n        return 2980\n    elif n == 152:\n        return 3000\n    elif n == 153:\n        return 3020\n    elif n == 154:\n        return 3040\n    elif n == 155:\n        return 3060\n    elif n == 156:\n        return 3080\n    elif n == 157:\n        return 3100\n    elif n == 158:\n        return 3120\n    elif n == 159:\n        return 3140\n    elif n == 160:\n        return 3160\n    elif n == 161:\n    ",
        "num_ids": 2016
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # n = 1\n    # 1\n    # 1 + 3 + 3 + 3 = 10\n    # 1 + 3 + 3 + 3 + 3 = 22\n    # 1 + 3 + 3 + 3 + 3 + 3 = 38\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 = 82\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 164\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 302\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 728\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 2256\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 6800\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 15552\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 3024\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 3936\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 5840\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 7552\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 1672\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 3264\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 5248\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 8280\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 1488\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 2828\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 4704\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 832\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 1520\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 2976\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 4992\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 728\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 1568\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 3024\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 3936\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 5840\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 7552\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 1672\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 3264\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 5248\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 8280\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 1488\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 2828\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 4704\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 832\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 1520\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 2976\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 4992\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 728\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 1568\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 3024\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 3936\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 5840\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 7552\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 1672\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 3264\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 5248\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 8280\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 1488\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 2828\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 4704\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 832\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 1520\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 2976\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 4992\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 728\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 1568\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 3024\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 3936\n    # 1 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 5840\n    # 1 + 3 + 3 ",
        "num_ids": 2016
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)/6\n",
        "num_ids": 18
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    num = 1\n    for i in range(n):\n        num = num*(i+1)\n    return num\n",
        "num_ids": 31
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # TODO:\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    #tetrahedral number is sum of powers of 4\n    return sum([n**i for i in range(4,n+1)])\n",
        "num_ids": 36
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)*(n+3)//4\n",
        "num_ids": 24
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int(math.pow(n,3) / 4 + 1)\n",
        "num_ids": 21
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 / 3 * math.pi * (r ** 3)\n",
        "num_ids": 18
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * (r**3)\n",
        "num_ids": 18
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3)*(math.pi)*(r**3)\n    return v\n",
        "num_ids": 25
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return ((4/3)*math.pi*(r**3))\n",
        "num_ids": 19
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*3.14159265359*r**3\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return 3.14159265359*r**2*h\ndef volume_cube(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return s**3\ndef volume_sphere_test():\n    '''\n    Test function for the volume_sphere function.\n    '''\n    print \"Test 1: volume_sphere(1) == 4/3*3.14159265359\"\n    print \"Expected: 4/3*3.14159265359\"\n    print \"Actual: \",volume_sphere(1)\n    print \"Test 2: volume_sphere(10) == 4/3*3.14159265359\"\n    print \"Expected: 4/3*3.14159265359\"\n    print \"Actual: \",volume_sphere(10)\ndef volume_cylinder_test():\n    '''\n    Test function for the volume_cylinder function.\n    '''\n    print \"Test 1: volume_cylinder(1,10) == 3.14159265359*1**2*10\"\n    print \"Expected: 3.14159265359*1**2*10\"\n    print \"Actual: \",volume_cylinder(1,10)\n    print \"Test 2: volume_cylinder(2,10) == 3.14159265359*2**2*10\"\n    print \"Expected: 3.14159265359*2**2*10\"\n    print \"Actual: \",volume_cylinder(2,10)\ndef volume_cube_test():\n    '''\n    Test function for the volume_cube function.\n    '''\n    print \"Test 1: volume_cube(10) == 10**3\"\n    print \"Expected: 10**3\"\n    print \"Actual: \",volume_cube(10)\n    print \"Test 2: volume_cube(10) == 10**3\"\n    print \"Expected: 10**3\"\n    print \"Actual: \",volume_cube(10)\ndef volume_sphere_test():\n    '''\n    Test function for the volume_sphere function.\n    '''\n    print \"Test 1: volume_sphere(1) == 4/3*3.14159265359\"\n    print \"Expected: 4/3*3.14159265359\"\n    print \"Actual: \",volume_sphere(1)\n    print \"Test 2: volume_sphere(10) == 4/3*3.14159265359\"\n    print \"Expected: 4/3*3.14159265359\"\n    print \"Actual: \",volume_sphere(10)\ndef volume_cylinder_test():\n    '''\n    Test function for the volume_cylinder function.\n    '''\n    print \"Test 1: volume_cylinder(1,10) == 3.14159265359*1**2*10\"\n    print \"Expected: 3.14159265359*1**2*10\"\n    print \"Actual: \",volume_cylinder(1,10)\n    print \"Test 2: volume_cylinder(2,10) == 3.14159265359*2**2*10\"\n    print \"Expected: 3.14159265359*2**2*10\"\n    print \"Actual: \",volume_cylinder(2,10)\ndef volume_cube_test():\n    '''\n    Test function for the volume_cube function.\n    '''\n    print \"Test 1: volume_cube(10) == 10**3\"\n    print \"Expected: 10**3\"\n    print \"Actual: \",volume_cube(10)\n    print \"Test 2: volume_cube(10) == 10**3\"\n    print \"Expected: 10**3\"\n    print \"Actual: \",volume_cube(10)\ndef area_square_test():\n    '''\n    Test function for the area_square function.\n    '''\n    print \"Test 1: area_square(10) == 100\"\n    print \"Expected: 100\"\n    print \"Actual: \",area_square(10)\n    print \"Test 2: area_square(10) == 100\"\n    print \"Expected: 100\"\n    print \"Actual: \",area_square(10)\ndef area_triangle_test():\n    '''\n    Test function for the area_triangle function.\n    '''\n    print \"Test 1: area_triangle(10,5) == 30\"\n    print \"Expected: 30\"\n    print \"Actual: \",area_triangle(10,5)\n    print \"Test 2: area_triangle(10,5) == 30\"\n    print \"Expected: 30\"\n    print \"Actual: \",area_triangle(10,5)\ndef area_rectangle_test():\n    '''\n    Test function for the area_rectangle function.\n    '''\n    print \"Test 1: area_rectangle(10,5) == 50\"\n    print \"Expected: 50\"\n    print \"Actual: \",area_rectangle(10,5)\n    print \"Test 2: area_rectangle(10,5) == 50\"\n    print \"Expected: 50\"\n    print \"Actual: \",area_rectangle(10,5)\ndef area_sphere_test():\n    '''\n    Test function for the area_sphere function.\n    '''\n    print \"Test 1: area_sphere(10) == 314.159265359\"\n    print \"Expected: 314.159265359\"\n    print \"Actual: \",area_sphere(10)\n    print \"Test 2: area_sphere(10) == 314.159265359\"\n    print \"Expected: 314.159265359\"\n    print \"Actual: \",area_sphere(10)\ndef area_cube_test():\n    '''\n    Test function for the area_cube function.\n    '''\n    print \"Test 1: area_cube(10) == 1000\"\n    print \"Expected: 1000\"\n    print \"Actual: \",area_cube(10)\n    print \"Test 2: area_cube(10) == 1000\"\n    print \"Expected: 1000\"\n    print \"Actual: \",area_cube(10)\ndef area_rectangle_test():\n    '''\n    Test function for the area_rectangle function.\n    '''\n    print \"Test 1: area_rectangle(10,5) == 50\"\n    print \"Expected: 50\"\n    print \"Actual: \",area_rectangle(10,5)\n    print \"Test 2: area_rectangle(10,5) == 50\"\n    print \"Expected: 50\"\n    print \"Actual: \",area_rectangle(10,5)\ndef area_triangle_test():\n    '''\n    Test function for the area_triangle function.\n    '''\n    print \"Test 1: area_triangle(10,5) == 30\"\n    print \"Expected: 30\"\n    print \"Actual: \",area_triangle(10,5)\n    print \"Test 2: area_triangle(10,5) == 30\"\n    print \"Expected: 30\"\n    print \"Actual: \",area_triangle(10,5)\ndef area_circle_test():\n    '''\n    Test function for the area_circle function.\n    '''\n    print \"Test 1: area_circle(10) == 314.159265359\"\n    print \"Expected: 314.159265359\"\n    print \"Actual: \",area_circle(10)\n    print \"Test 2: area_circle(10) == 314.159265359\"\n    print \"Expected: 314.159265359\"\n    print \"Actual: \",area_circle(10)\ndef perimeter_sphere_test():\n    '''\n    Test function for the perimeter_sphere function.\n    '''\n    print \"Test 1: perimeter_sphere(10) == 12*3.14159265359\"\n    print \"Expected: 12*3.14159265359\"\n    print \"Actual: \",perimeter_sphere(10)\n    print \"Test 2: perimeter_sphere(10) == 12*3.14159265359\"\n    print \"Expected: 12*3.14159265359\"\n    print \"Actual: \",perimeter_s",
        "num_ids": 109
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * math.pow(r,3)\n    return v\n",
        "num_ids": 29
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #pi = 3.1415926535897932384626\n    #r = float(input())\n    #v = (4/3.0) * pi * (r**3)\n    return (4/3.0) * (math.pi * (r**3))\n",
        "num_ids": 68
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4.0/3.0)*math.pi*(r**3)\n    return volume\n",
        "num_ids": 28
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * (r**3)\n",
        "num_ids": 18
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r = float(r)\n    return (4/3)*math.pi*(r**3)\n",
        "num_ids": 27
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    import string\n    import collections\n    result = 0\n    for i in strr:\n        result = (result + ord(i))%26\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return chr((ord(strr) + 6)%26 + ord('a'))\ndef get_Char_2(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return chr(((ord(strr) + 19)%26 + ord('a'))%26)\n",
        "num_ids": 28
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = 0\n    for i in strr:\n        res = res + ord(i)\n    return res%26\ndef get_Key(text):  \n    '''\n    Write a python function to convert the string to a key by adding the ASCII value of all the characters of the string modulo 26.\n    '''\n    res = 0\n    for i in text:\n        res = res + ord(i)\n    return res%26\ndef caesar(plain_text,shift):  \n    '''\n    Write a python function to encode the given plain text using caesar cipher.\n    \n    '''\n    result = \"\"  \n    for i in plain_text:  \n        if (ord(i)>=97 and ord(i)<=122):  \n            result += chr((ord(i)-97+shift)%26 + 97)  \n        else:  \n            result += i  \n    return result\ndef get_plain_text(cipher_text):  \n    '''\n    Write a python function to decode the given cipher text using caesar cipher.\n    \n    '''\n    result = \"\"  \n    for i in cipher_text:  \n        if (ord(i)>=97 and ord(i)<=122):  \n            result += chr((ord(i)-97-get_Char(get_key(result)))%26 + 97)  \n        else:  \n            result += i  \n    return result\ndef encrypt(text):  \n    '''\n    Write a python function to encode the given plain text using caesar cipher.\n    \n    '''\n    return caesar(text,3)\ndef decrypt(cipher):  \n    '''\n    Write a python function to decode the given cipher text using caesar cipher.\n    \n    '''\n    return caesar(cipher,-3)\ndef xor(plain_text,key):\n    '''\n    Write a python function to encode the given plain text using xor cipher.\n    \n    '''\n    return plain_text ^ key\ndef xor_decrypt(cipher_text,key):\n    '''\n    Write a python function to decode the given cipher text using xor cipher.\n    \n    '''\n    return xor(cipher_text,key)\ndef xor_decrypt_file(file,key):\n    '''\n    Write a python function to decode the given file using xor cipher.\n    \n    '''\n    f = open(file, 'rb')\n    contents = f.read()\n    f.close()\n    f = open(file, 'wb')\n    f.write(xor_decrypt(contents,key))\n    f.close()\ndef print_menu():\n    print \"1. Encode\"\n    print \"2. Decode\"\n    print \"3. Exit\"\n    print \"Enter choice:\",\ndef get_choice():\n    return int(raw_input())\ndef get_text():\n    return raw_input(\"Enter plain text: \")\ndef get_key():\n    return raw_input(\"Enter key: \")\ndef main():\n    while(1):\n        print_menu()\n        choice = get_choice()\n        if(choice==1):\n            text = get_text()\n            print \"Encrypted text:\",encrypt(text)\n        elif(choice==2):\n            text = get_text()\n            key = get_key()\n            print \"Decrypted text:\",decrypt(text)\n        elif(choice==3):\n            break\n        else:\n            print \"Enter valid choice\"\nmain(",
        "num_ids": 273
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = 0\n    for x in strr:\n        res = (res+ord(x))%26\n    return chr(res+97)\n",
        "num_ids": 38
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return chr(sum(map(lambda x: ord(x),strr)) % 26)\n",
        "num_ids": 25
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_list = []\n    for i in strr:\n        char_list.append(ord(i))\n    print(char_list)\n    char_val = sum(char_list) % 26\n    return chr(char_val + ord('A'))\n",
        "num_ids": 66
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return reduce(lambda x, y: x + (ord(y) - ord('a') + 1) % 26, strr, 0)\n",
        "num_ids": 35
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # print(strr)\n    sum_of_chars = 0\n    for i in strr:\n        sum_of_chars = sum_of_chars + ord(i)\n    # print(sum_of_chars)\n    return chr((sum_of_chars % 26) + 97)\n",
        "num_ids": 78
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res=''\n    for i in strr:\n        res+=chr((ord(i)-ord('a')+1)%26+ord('a'))\n    return res\n",
        "num_ids": 45
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    return sum([ord(s) for s in strr]) % 26\n",
        "num_ids": 21
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return n * (n + 1) / 2\n",
        "num_ids": 14
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [0]\n    \n    def next_number(seq):\n        '''\n        Generates the next number in the sequence\n        '''\n        \n        if len(seq) == 1:\n            return 1\n        elif len(seq) == 2:\n            return seq[0] + seq[1]\n        else:\n            return seq[-1] + seq[-2]\n        \n    \n    while len(seq) <= n:\n        seq.append(next_number(seq))\n        \n    return seq[n]\n    \n",
        "num_ids": 96
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    newman = [1,0,1,0,1,0,1,0,1]\n    while len(sequence) < n:\n        if newman == newman[::-1]:\n            sequence.append(0)\n            newman.pop(0)\n            newman.append(sequence[-1])\n        else:\n            newman = [sum(i) for i in zip(newman[1:], newman[:-1])]\n            sequence.append(1)\n    return sequence[-1]\n",
        "num_ids": 133
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    nums = []\n    for i in range(1, n+1):\n        nums.append(i**2)\n    return nums\n",
        "num_ids": 37
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return sequence(n-1) + 4*sequence(n-2)\n",
        "num_ids": 35
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    seq = [0,1,1,2]\n    \n    while seq[-1] < n:\n        new_number = seq[-1] + seq[-2]\n        seq.append(new_number)\n        \n    return seq[-1]\n",
        "num_ids": 67
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    # 1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,317811,514229,832040,1346269,2178309,3524578,5702887,9227465,14930352,24157817,39088169,63245986,102334155,165580141,267914296,433494437,701408733,1134903170,1836311903,2971215073,4807526976,7778981036,12586269025,20365011074\n    \n    for i in xrange(1,n+1): \n        \n        if i == 1:\n            yield 1\n        elif i == 2:\n            yield 2\n        elif i == 3:\n            yield 3\n        else:\n            yield sum(sequence(i-1))\n            \n    \n    \n",
        "num_ids": 263
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    res = []\n    prev = 0\n    for i in range(1,n):\n        prev = prev + 2*(2**i)\n        res.append(prev)\n    return res\n",
        "num_ids": 48
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    def newman_c_sequence(n):\n        if n==0:\n            return 0\n        if n==1:\n            return 1\n        return newman_c_sequence(n-1) + newman_c_sequence(n-2)\n    return newman_c_sequence(n)\n",
        "num_ids": 74
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    nth = 1\n    while nth < 7:\n        nth += 1\n        print(nth)\n    print(nth)\n",
        "num_ids": 36
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    if r == 0:\n        return 0\n    return 4 * math.pi * r**2\n",
        "num_ids": 25
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    if r<0:\n        return 0\n    area=4*math.pi*r**2\n    return area\n",
        "num_ids": 30
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    #calculate volume\n    v = 4/3 * math.pi * r**3\n    #calculate surface area\n    sa = 4 * math.pi * r**2\n    return v, sa\n",
        "num_ids": 51
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4 * math.pi * r**2)\n",
        "num_ids": 16
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4.0 * math.pi * r**2\n",
        "num_ids": 16
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 4 * math.pi * r**2\n    return s\n    \ndef surfacearea_sphere_with_matrix(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n    \ndef surfacearea_sphere_with_vector(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    import numpy as np\n    return 4 * np.pi * r**2\n    \ndef surfacearea_sphere_with_numpy(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    import numpy as np\n    return 4 * np.pi * r**2\n    \ndef surfacearea_sphere_with_for(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 0\n    for i in range(0, r):\n        s += 4 * math.pi * r**2\n    return s\n",
        "num_ids": 35
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    if isinstance(r,int) or isinstance(r,float):\n        #if the radius is a number\n        if r<0:\n            #if the radius is negative\n            return None\n        else:\n            #if the radius is positive\n            #surface area of sphere is 4 times pi times radius squared\n            return 4*math.pi*r**2\n    else:\n        #if the radius is a string or a list\n        #print \"Not a valid input\"\n        return None\n",
        "num_ids": 116
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    \n    pi = math.pi\n    \n    sphere_surfacearea = 4*pi*r**2\n    \n    return sphere_surfacearea\n",
        "num_ids": 37
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4.0 * math.pi * r**2.0\n    return area\n",
        "num_ids": 23
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3.0 * math.pi * r * r * r\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return math.pi * r * (r + h)\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r * r * h /3.0\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h + 2 * math.pi * r * r\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * r * r * h\ndef surfacearea_cone_sphere(r,h):\n    '''\n    Write a function to find the surface area of a cone-sphere.\n    '''\n    return math.pi * r * (r + h)\ndef volume_cone_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone-sphere.\n    '''\n    return math.pi * r * r * h/3.0\ndef volume_sphere_cylinder(r,h):\n    '''\n    Write a function to find the volume of a sphere-cylinder.\n    '''\n    return math.pi * r * r * h / 3.0\ndef volume_cylinder_sphere(r,h):\n    '''\n    Write a function to find the volume of a cylinder-sphere.\n    '''\n    return math.pi * r * r * h\ndef volume_sphere_cone(r,h):\n    '''\n    Write a function to find the volume of a sphere-cone.\n    '''\n    return math.pi * r * r * h /3.0\ndef volume_cone_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone-sphere.\n    '''\n    return math.pi * r * r * h /3.0\ndef surfacearea_ball(r,h):\n    '''\n    Write a function to find the surface area of a ball.\n    '''\n    return 4 * math.pi * r * (r + h)\ndef volume_ball(r,h):\n    '''\n    Write a function to find the volume of a ball.\n    '''\n    return 4.0/3.0 * math.pi * r * r * h\ndef surfacearea_ball_cube(r,h):\n    '''\n    Write a function to find the surface area of a ball-cube.\n    '''\n    return 4 * math.pi * r * (r + h)\ndef volume_ball_cube(r,h):\n    '''\n    Write a function to find the volume of a ball-cube.\n    '''\n    return 4.0/3.0 * math.pi * r * r * h\ndef surfacearea_cube(r):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6 * r * r\ndef volume_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return r * r * r\ndef surfacearea_cube_dodecahedron(r):\n    '''\n    Write a function to find the surface area of a cube-dodecahedron.\n    '''\n    return 12 * r * r\ndef volume_cube_dodecahedron(r):\n    '''\n    Write a function to find the volume of a cube-dodecahedron.\n    '''\n    return r * r * r * 1.0/3.0\ndef surfacearea_dodecahedron(r):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    return 20 * math.pi * r * r\ndef volume_dodecahedron(r):\n    '''\n    Write a function to find the volume of a dodecahedron.\n    '''\n    return 5 * math.pi * r * r * 1.0/3.0\ndef surfacearea_tetrahedron(r):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    return 4 * r * r\ndef volume_tetrahedron(r):\n    '''\n    Write a function to find the volume of a tetrahedron.\n    '''\n    return r * r * r / 3.0\ndef surfacearea_tetrahedron_cube(r):\n    '''\n    Write a function to find the surface area of a tetrahedron-cube.\n    '''\n    return 4 * math.pi * r * (r + 1)\ndef volume_tetrahedron_cube(r):\n    '''\n    Write a function to find the volume of a tetrahedron-cube.\n    '''\n    return math.pi * r * r * (r + 1) / 3.0\ndef surfacearea_icosahedron(r):\n    '''\n    Write a function to find the surface area of a icosahedron.\n    '''\n    return 12 * r * r\ndef volume_icosahedron(r):\n    '''\n    Write a function to find the volume of a icosahedron.\n    '''\n    return math.pi * r * r * 3 * (3 + math.sqrt(5)) / 4.0\ndef surfacearea_icosahedron_cube(r):\n    '''\n    Write a function to find the surface area of an icosahedron-cube.\n    '''\n    return 12 * math.pi * r * (r + 1)\ndef volume_icosahedron_cube(r):\n    '''\n    Write a function to find the volume of an icosahedron-cube.\n    '''\n    return math.pi * r * r * (r + 1) * (r + 1) / 4.0\ndef surfacearea_triangular_prism(a,b,c):\n    '''\n    Write a function to find the surface area of a triangular prism.\n    '''\n    return a * b + b * c + c * a\ndef volume_triangular_prism(a,b,c):\n    '''\n    Write a function to find the volume of a triangular prism.\n    '''\n    return a * b * c / 6.0\ndef surfacearea_parallelogram(a,b):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    return 2 * a * b\ndef volume_parallelogram(a,b):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    return a * b\ndef surfacearea_rectangular_prism(a,b):\n    '''\n    Write a function to find the surface area of a rectangular prism.\n    '''\n    return 2 * (a + b) * (a + b)\ndef volume_rectangular_prism(a,b):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return a * b\ndef surfacearea_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return a * b / 2.0\ndef volume_triangle(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return (a * b * c) / 6.0\ndef surfacearea_rectangle(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a * b\ndef volume_rectangle(a,b):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return a * b\ndef surfacearea_rectangular_triangle(a,b):\n    '''\n    Write a function to find the surface area of a rectangular-triangle.\n    '''\n    return 2 * ",
        "num_ids": 7
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(2*n-1)\n",
        "num_ids": 14
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int((n**2 - n) / 2)\n",
        "num_ids": 16
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return int(((n+1)**(3/2))/2)\n",
        "num_ids": 48
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (2**(n-1)*(n**2+n+1)/2)\n",
        "num_ids": 24
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(n*(2*n-1)/2)\n",
        "num_ids": 18
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(n*(2*n - 1)/2)\n",
        "num_ids": 18
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    i = 1\n    s = i * (3 * i - 1) / 2\n    while s < n:\n        i += 1\n        s = i * (3 * i - 1) / 2\n    return s\n",
        "num_ids": 53
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # this function works for any n >= 1\n    return n*(2*n-1)\n",
        "num_ids": 25
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(2*n**2-1)/2\n",
        "num_ids": 17
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n**2 + n) * (3*n - 1) // 2\n",
        "num_ids": 22
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if isinstance(dict1, dict) and isinstance(dict2, dict) and isinstance(dict3, dict):\n        if len(dict1) == 0:\n            return dict2\n        elif len(dict2) == 0:\n            return dict1\n        elif len(dict3) == 0:\n            return dict2\n        else:\n            return dict(dict1.items() + dict2.items() + dict3.items())\n    else:\n        return \"Not a valid dictionary\"\n",
        "num_ids": 120
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key1 in dict1:\n        res[key1] = dict1[key1]\n    for key2 in dict2:\n        res[key2] = dict2[key2]\n    for key3 in dict3:\n        res[key3] = dict3[key3]\n    return res\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key in dict1:\n        res[key] = dict1[key]\n    for key in dict2:\n        res[key] = dict2[key]\n    return res\ndef merge_dictionaries_one(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key in dict1:\n        if key in dict2:\n            res[key] = dict1[key] + dict2[key]\n        else:\n            res[key] = dict1[key]\n    for key in dict2:\n        if key not in dict1:\n            res[key] = dict2[key]\n    return res\ndef merge_dictionaries_one(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key in dict1:\n        if key in dict2:\n            res[key] = dict1[key] + dict2[key]\n        else:\n            res[key] = dict1[key]\n    for key in dict2:\n        if key not in dict1:\n            res[key] = dict2[key]\n    return res\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key1 in dict1:\n        res[key1] = dict1[key1]\n    for key2 in dict2:\n        res[key2] = dict2[key2]\n    for key3 in dict3:\n        res[key3] = dict3[key3]\n    return res\ndef merge_dictionaries_two(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key in dict1:\n        res[key] = dict1[key]\n    for key in dict2:\n        res[key] = dict2[key]\n    return res\ndef merge_dictionaries_one(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key in dict1:\n        if key in dict2:\n            res[key] = dict1[key] + dict2[key]\n        else:\n            res[key] = dict1[key]\n    for key in dict2:\n        if key not in dict1:\n            res[key] = dict2[key]\n    return res\ndef merge_dictionaries_one(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key in dict1:\n        if key in dict2:\n            res[key] = dict1[key] + dict2[key]\n        else:\n            res[key] = dict1[key]\n    for key in dict2:\n        if key not in dict1:\n            res[key] = dict2[key]\n    return res\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key1 in dict1:\n        res[key1] = dict1[key1]\n    for key2 in dict2:\n        res[key2] = dict2[key2]\n    for key3 in dict3:\n        res[key3] = dict3[key3]\n    return res\ndef merge_dictionaries_two(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key in dict1:\n        res[key] = dict1[key]\n    for key in dict2:\n        res[key] = dict2[key]\n    return res\ndef merge_dictionaries_one(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key in dict1:\n        if key in dict2:\n            res[key] = dict1[key] + dict2[key]\n        else:\n            res[key] = dict1[key]\n    for key in dict2:\n        if key not in dict1:\n            res[key] = dict2[key]\n    return res\ndef merge_dictionaries_one(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key in dict1:\n        if key in dict2:\n            res[key] = dict1[key] + dict2[key]\n        else:\n            res[key] = dict1[key]\n    for key in dict2:\n        if key not in dict1:\n            res[key] = dict2[key]\n    return res\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key1 in dict1:\n        res[key1] = dict1[key1]\n    for key2 in dict2:\n        res[key2] = dict2[key2]\n    for key3 in dict3:\n        res[key3] = dict3[key3]\n    return res\ndef merge_dictionaries_two(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key in dict1:\n        res[key] = dict1[key]\n    for key in dict2:\n        res[key] = dict2[key]\n    return res\ndef merge_dictionaries_one(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key in dict1:\n        if key in dict2:\n            res[key] = dict1[key] + dict2[key]\n        else:\n            res[key] = dict1[key]\n    for key in dict2:\n        if key not in dict1:\n            res[key] = dict2[key]\n    return res\ndef merge_dictionaries_one(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key in dict1:\n        if key in dict2:\n            res[key] = dict1[key] + dict2[key]\n        else:\n            res[key] = dict1[key]\n    for key in dict2:\n        if key not in dict1:\n            res[key] = dict2[key]\n    return res\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key1 in dict1:\n        res[key1] = dict1[key1]\n    for key2 in dict2:\n        res[key2] = dict2[key2]\n    for key3 in dict3:\n        res[key3] = dict3[key3]\n    return res\ndef merge_dictionaries_two(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key in dict1:\n        res[key] = dict1[key]\n    for key in dict2:\n        re",
        "num_ids": 37
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = {}\n    for i, key in enumerate(dict1.keys()):\n        new_dict[key] = dict1[key]\n",
        "num_ids": 39
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key in dict1:\n        if key in dict2:\n            res[key] = [dict1[key], dict2[key], dict3[key]]\n        elif key in dict3:\n            res[key] = [dict1[key], dict3[key], dict2[key]]\n        else:\n            res[key] = dict1[key]\n    for key in dict2:\n        if key not in res:\n            res[key] = dict2[key]\n    for key in dict3:\n        if key not in res:\n            res[key] = dict3[key]\n    return res\n",
        "num_ids": 154
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if type(dict1) is not dict:\n        raise ValueError('Expected type dict1')\n    if type(dict2) is not dict:\n        raise ValueError('Expected type dict2')\n    if type(dict3) is not dict:\n        raise ValueError('Expected type dict3')\n    \n    for key in dict1:\n        if key in dict2 and dict1[key] == dict2[key]:\n            dict1[key] = dict3[key]\n        else:\n            dict1[key] = dict2[key]\n    return dict1\n",
        "num_ids": 138
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if dict1 and dict2 and dict3:\n        for key in dict1:\n            if key in dict2:\n                if key in dict3:\n                    print \"key =\",key,\"dict1[key] = \",dict1[key],\"dict2[key] = \",dict2[key],\"dict3[key] = \",dict3[key]\n                else:\n                    dict3[key] = dict2[key]\n            else:\n                dict3[key] = dict1[key]\n    return dict3\n",
        "num_ids": 122
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if not isinstance(dict1, dict) and not isinstance(dict2, dict) and not isinstance(dict3, dict):\n        return None\n    \n    if not isinstance(dict1, dict):\n        return dict2\n    if not isinstance(dict2, dict):\n        return dict3\n    if not isinstance(dict3, dict):\n        return None\n    dict4 = dict1.copy()\n    dict4.update(dict2)\n    dict4.update(dict3)\n    return dict4\n",
        "num_ids": 125
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for item in dict1:\n        dict4[item] = dict1[item]\n    for item in dict2:\n        dict4[item] = dict2[item]\n    for item in dict3:\n        dict4[item] = dict3[item]\n    return dict4\n",
        "num_ids": 76
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2,**dict3}\n",
        "num_ids": 18
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    print ct.ChainMap(dict1,dict2,dict3)\n    return ct.ChainMap(dict1,dict2,dict3)\n    \ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    return ct.ChainMap(dict1,dict2)\n    \n",
        "num_ids": 19
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    print(freq)\n    #return freq\n",
        "num_ids": 27
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_dict = collections.Counter(list1)\n    return count_dict\n",
        "num_ids": 21
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    c=collections.Counter(list1)\n    return c\ndef freq_count_general(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    c=collections.defaultdict(int)\n    for i in list1:\n        c[i]+=1\n    return c\ndef perm(n,r):\n    '''\n    Write a recursive function to compute the value of n!/r! for a given n and r.\n    '''\n    if r==1:\n        return n\n    else:\n        return n*perm(n-1,r-1)\ndef perm_general(n,r):\n    '''\n    Write a recursive function to compute the value of n!/r! for a given n and r.\n    '''\n    if r==1:\n        return n\n    else:\n        return n*perm_general(n-1,r-1)\ndef perm_fun(n,r):\n    '''\n    Write a recursive function to compute the value of n!/r! for a given n and r.\n    '''\n    return perm(n,r)//perm(n-r,r)\ndef perm_fun_general(n,r):\n    '''\n    Write a recursive function to compute the value of n!/r! for a given n and r.\n    '''\n    return perm_general(n,r)//perm_general(n-r,r)\ndef cn(n,r):\n    '''\n    Write a recursive function to compute the value of n!/r! for a given n and r.\n    '''\n    if r==1:\n        return n\n    else:\n        return n*cn(n-1,r-1)\ndef cn_general(n,r):\n    '''\n    Write a recursive function to compute the value of n!/r! for a given n and r.\n    '''\n    if r==1:\n        return n\n    else:\n        return n*cn_general(n-1,r-1)\ndef cn_fun(n,r):\n    '''\n    Write a recursive function to compute the value of n!/r! for a given n and r.\n    '''\n    return cn(n,r)//cn(n-r,r)\ndef cn_fun_general(n,r):\n    '''\n    Write a recursive function to compute the value of n!/r! for a given n and r.\n    '''\n    return cn_general(n,r)//cn_general(n-r,r)\ndef factorial(n):\n    '''\n    Write a recursive function to compute n! for a given n.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\ndef factorial_general(n):\n    '''\n    Write a recursive function to compute n! for a given n.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*factorial_general(n-1)\ndef factorial_fun(n):\n    '''\n    Write a recursive function to compute n! for a given n.\n    '''\n    return factorial(n)//factorial(n-1)\ndef factorial_fun_general(n):\n    '''\n    Write a recursive function to compute n! for a given n.\n    '''\n    return factorial_general(n)//factorial_general(n-1)\ndef factorial_fun_fun(n):\n    '''\n    Write a recursive function to compute n! for a given n.\n    '''\n    return factorial_fun(n)//factorial_fun(n-1)\ndef factorial_fun_fun_general(n):\n    '''\n    Write a recursive function to compute n! for a given n.\n    '''\n    return factorial_fun_general(n)//factorial_fun_general(n-1)\ndef fib(n):\n    '''\n    Write a recursive function to compute the nth fibonacci number for a given n.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\ndef fib_general(n):\n    '''\n    Write a recursive function to compute the nth fibonacci number for a given n.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fib_general(n-1) + fib_general(n-2)\ndef fib_fun(n):\n    '''\n    Write a recursive function to compute the nth fibonacci number for a given n.\n    '''\n    return fib(n)//fib(n-1)\ndef fib_fun_general(n):\n    '''\n    Write a recursive function to compute the nth fibonacci number for a given n.\n    '''\n    return fib_general(n)//fib_general(n-1)\ndef fib_fun_fun(n):\n    '''\n    Write a recursive function to compute the nth fibonacci number for a given n.\n    '''\n    return fib_fun(n)//fib_fun(n-1)\ndef fib_fun_fun_general(n):\n    '''\n    Write a recursive function to compute the nth fibonacci number for a given n.\n    '''\n    return fib_fun_general(n)//fib_fun_general(n-1)\ndef fib_fun_fun_fun(n):\n    '''\n    Write a recursive function to compute the nth fibonacci number for a given n.\n    '''\n    return fib_fun_fun(n)//fib_fun_fun(n-1)\ndef fib_fun_fun_fun_general(n):\n    '''\n    Write a recursive function to compute the nth fibonacci number for a given n.\n    '''\n    return fib_fun_fun_general(n)//fib_fun_fun_general(n-1)\ndef fib_fun_fun_fun_fun(n):\n    '''\n    Write a recursive function to compute the nth fibonacci number for a given n.\n    '''\n    return fib_fun_fun_fun(n)//fib_fun_fun_fun(n-1)\ndef fib_fun_fun_fun_fun_general(n):\n    '''\n    Write a recursive function to compute the nth fibonacci number for a given n.\n    '''\n    return fib_fun_fun_fun_fun_general(n)//fib_fun_fun_fun_fun_general(n-1)\ndef fib_fun_fun_fun_fun_fun(n):\n    '''\n    Write a recursive function to compute the nth fibonacci number for a given n.\n    '''\n    return fib_fun_fun_fun_fun_fun(n)//fib_fun_fun_fun_fun_fun(n-1)\ndef fib_fun_fun_fun_fun_fun_general(n):\n    '''\n    Write a recursive function to compute the nth fibonacci number for a given n.\n    '''\n    return fib_fun_fun_fun_fun_fun_fun_general(n)//fib_fun_fun_fun_fun_fun_fun_general(n-1)\ndef fib_fun_fun_fun_fun_fun_fun_general(n):\n    '''\n    Write a recursive function to compute the nth fibonacci number for a given n.\n    '''\n    return fib_fun_fun_fun_fun_fun_fun_fun_general(n)//fib_fun_fun_fun_fun_fun_fun_fun_general(n-1)\ndef fib_fun_fun_fun_fun_fun_fun_general(n):\n    '''\n    Write a recursive function to compute the nth fibonacci number for a given n.\n    '''\n    return fib_fun_fun_fun_fun_fun_fun_fun_general(n)//fib_fun_fun_fun_fun_fun_fun_fun_fun_general(n-1)\ndef fib_fun_fun_fun_fun_fun_fun_fun_general(n):\n",
        "num_ids": 73
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1={}\n    for i in list1:\n        if i in dict1:\n            dict1[i]+=1\n        else:\n            dict1[i]=1\n    return dict1\n",
        "num_ids": 50
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = collections.Counter(list1)\n    return count\n",
        "num_ids": 17
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    if not list1:\n        return {}\n    else:\n        counts = collections.defaultdict(int)\n        for item in list1:\n            counts[item] += 1\n        return counts\ndef most_common(list1):\n    '''\n    Write a function that takes a list of numbers and returns a list of the most common numbers.\n    '''\n    if not list1:\n        return []\n    counts = collections.Counter(list1)\n    return counts.most_common(n=1)\ndef is_power_of_two(n):\n    '''\n    Write a function that returns true if the number is a power of two.\n    '''\n    if n == 0:\n        return False\n    return n & (n-1) == 0\ndef get_power_of_two(n):\n    '''\n    Write a function that takes an integer and returns the power of two that is closest to the integer.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return n\n    if n == 2:\n        return 2\n    if n & (n-1) == 0:\n        return n\n    return pow(2, int(n.bit_length()) + 1)\ndef binary_search(arr, target):\n    '''\n    Write a function that takes an array of numbers and a target number and returns the index of the target number if found.\n    If the target is not found, return -1.\n    '''\n    if not arr:\n        return -1\n    if arr[0] == target:\n        return 0\n    if arr[-1] == target:\n        return len(arr)-1\n    if arr[0] > target:\n        return -1\n    if arr[-1] < target:\n        return -1\n    l, r = 0, len(arr)-1\n    while l < r:\n        mid = l + (r - l) // 2\n        if arr[mid] < target:\n            l = mid + 1\n        elif arr[mid] > target:\n            r = mid - 1\n        else:\n            return mid\n    return -1\ndef find_unique_number(list1):\n    '''\n    Write a function that takes a list of numbers and returns a list of the unique numbers.\n    '''\n    if not list1:\n        return []\n    else:\n        return [x for x in list1 if list1.count(x) == 1]\ndef get_number_of_2(n):\n    '''\n    Write a function that takes an integer and returns the number of 2s that are inside of it.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n & 1 == 0:\n        return 1 + get_number_of_2(n // 2)\n    return get_number_of_2(n // 2) + 1\ndef get_last_kth(list1, k):\n    '''\n    Write a function that takes a list of numbers and returns the last kth number in the list.\n    '''\n    if not list1:\n        return\n    elif k > len(list1):\n        return\n    else:\n        return list1[-k]\ndef get_last_kth_index(list1, k):\n    '''\n    Write a function that takes a list of numbers and returns the index of the last kth number in the list.\n    '''\n    if not list1:\n        return\n    elif k > len(list1):\n        return\n    else:\n        return len(list1) - k\ndef are_balanced(s):\n    '''\n    Write a function that takes a string of characters and returns True if the string is balanced.\n    A string is balanced if it starts and ends with the same character.\n    '''\n    if not s:\n        return False\n    if len(s) == 1:\n        return True\n    if s[0]!= s[-1]:\n        return False\n    return are_balanced(s[1:-1])\ndef get_anagrams(str1):\n    '''\n    Write a function that takes a string and returns the set of all anagrams of the string.\n    '''\n    if not str1:\n        return []\n    counts = collections.defaultdict(int)\n    for c in str1:\n        counts[c] += 1\n    return [c for c in counts if counts[c] > 1]\ndef remove_from_string(str1, chars):\n    '''\n    Write a function that takes a string and removes the characters in the string.\n    '''\n    if not str1:\n        return\n    elif not chars:\n        return str1\n    else:\n        return str1.replace(chars[0], \"\")\ndef is_anagram(str1, str2):\n    '''\n    Write a function that takes two strings and returns true if the strings are anagrams.\n    '''\n    if not str1:\n        return False\n    elif not str2:\n        return False\n    return sorted(str1) == sorted(str2)\ndef count_items(list1):\n    '''\n    Write a function that takes a list of strings and returns a dictionary where the key is the string and the value is the number of times the string occurs in the list.\n    '''\n    if not list1:\n        return {}\n    counts = collections.defaultdict(int)\n    for item in list1:\n        counts[item] += 1\n    return counts\ndef count_in_string(str1, sub_str):\n    '''\n    Write a function that takes a string and a substring and returns the number of times the substring occurs in the string.\n    '''\n    if not str1:\n        return 0\n    elif not sub_str:\n        return 0\n    elif len(sub_str) > len(str1):\n        return 0\n    else:\n        return str1.count(sub_str)\ndef are_anagrams(str1, str2):\n    '''\n    Write a function that takes two strings and returns true if the strings are anagrams.\n    '''\n    if not str1:\n        return False\n    elif not str2:\n        return False\n    return sorted(str1) == sorted(str2)\ndef replace_substring(str1, old_str, new_str):\n    '''\n    Write a function that takes a string and replaces all instances of old_str with new_str.\n    '''\n    if not str1:\n        return\n    elif not old_str:\n        return\n    elif not new_str:\n        return\n    else:\n        return str1.replace(old_str, new_str)\ndef get_average_of_numbers(list1):\n    '''\n    Write a function that takes a list of numbers and returns the average.\n    '''\n    if not list1:\n        return 0\n    else:\n        return sum(list1) / len(list1)\ndef swap_first_and_last(list1):\n    '''\n    Write a function that takes a list of strings and swaps the first and last characters of each string in the list.\n    '''\n    if not list1:\n        return\n    elif len(list1) == 1:\n        return list1\n    elif len(list1) == 2:\n        return list1[1], list1[0]\n    else:\n        return list1[-1], list1[0]\ndef get_max_and_min(list1):\n    '''\n    Write a function that takes a list of numbers and returns the largest and smallest values in the list.\n    '''\n    if not list1:\n        return (None, None)\n    else:\n        return max(list1), min(list1)\ndef get_max_and_min_index(list1):\n    '''\n    Write a function that takes a list of numbers and returns the index of the largest and smallest values in the list.\n    '''\n    if not list1:\n        return (None, None)\n    else:\n        return (list1.index(max(list1)), list1.index(min(list1)))\ndef find_triplets_in_list(list1):\n    '''\n    Write a function that takes a list of numbers and returns a list of tuples where the first number in each tuple is the sum of the numbers, the second numbe",
        "num_ids": 37
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = collections.Counter(list1)\n    return count\ndef get_max_freq(list2):\n    '''\n    Write a function to get the maximum frequency of all the elements in a list.\n    '''\n    count = collections.Counter(list2)\n    m = count.most_common(1)\n    return m[0][1]\ndef count_words(string):\n    '''\n    Write a function to get the count of all words in a string.\n    '''\n    s = string.split()\n    return len(s)\ndef freq_count_words(string):\n    '''\n    Write a function to get the frequency of all words in a string.\n    '''\n    s = string.split()\n    count = collections.Counter(s)\n    return count\ndef longest_word(string):\n    '''\n    Write a function to get the longest word in a string.\n    '''\n    s = string.split()\n    return max(s, key=len)\ndef get_longest_words(string):\n    '''\n    Write a function to get the longest words in a string.\n    '''\n    s = string.split()\n    return list(sorted(s, key=len))\ndef count_vowels(string):\n    '''\n    Write a function to get the number of vowels in a string.\n    '''\n    s = string.lower()\n    count = 0\n    for i in s:\n        if i in 'aeiou':\n            count += 1\n    return count\ndef count_consonants(string):\n    '''\n    Write a function to get the number of consonants in a string.\n    '''\n    s = string.lower()\n    count = 0\n    for i in s:\n        if i not in 'aeiou':\n            count += 1\n    return count\ndef has_duplicates(list1):\n    '''\n    Write a function to check if a list has duplicates.\n    '''\n    s = set(list1)\n    return len(s)!= len(list1)\ndef has_duplicates_list(list1):\n    '''\n    Write a function to check if a list has duplicates.\n    '''\n    for i in list1:\n        if list1.count(i) > 1:\n            return True\n    return False\ndef count_duplicates(list1):\n    '''\n    Write a function to get the number of duplicates in a list.\n    '''\n    return len(list1) - len(set(list1))\ndef remove_duplicates(list1):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    return list(set(list1))\ndef remove_duplicates_list(list1):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    return list(set(list1))\ndef intersection(list1, list2):\n    '''\n    Write a function to get the intersection of two lists.\n    '''\n    return list(set(list1).intersection(list2))\ndef intersection_list(list1, list2):\n    '''\n    Write a function to get the intersection of two lists.\n    '''\n    return list(set(list1).intersection(list2))\ndef union(list1, list2):\n    '''\n    Write a function to get the union of two lists.\n    '''\n    return list(set(list1).union(list2))\ndef union_list(list1, list2):\n    '''\n    Write a function to get the union of two lists.\n    '''\n    return list(set(list1).union(list2))\ndef get_common_words(string1, string2):\n    '''\n    Write a function to get the common words in two strings.\n    '''\n    s1 = string1.split()\n    s2 = string2.split()\n    return list(set(s1).intersection(s2))\ndef get_common_words_list(string1, string2):\n    '''\n    Write a function to get the common words in two strings.\n    '''\n    s1 = string1.split()\n    s2 = string2.split()\n    return list(set(s1).intersection(s2))\ndef get_common_words_set(string1, string2):\n    '''\n    Write a function to get the common words in two strings.\n    '''\n    s1 = string1.split()\n    s2 = string2.split()\n    return list(set(s1).intersection(s2))\ndef get_common_words_set_alt(string1, string2):\n    '''\n    Write a function to get the common words in two strings.\n    '''\n    s1 = string1.split()\n    s2 = string2.split()\n    return set(s1).intersection(s2)\ndef find_char(string, char):\n    '''\n    Write a function to find a character in a string.\n    '''\n    return string.index(char)\ndef find_char_list(string, char):\n    '''\n    Write a function to find a character in a string.\n    '''\n    return string.index(char)\ndef find_char_list_alt(string, char):\n    '''\n    Write a function to find a character in a string.\n    '''\n    return [i for i in range(len(string)) if string[i] == char][0]\ndef find_char_list_alt2(string, char):\n    '''\n    Write a function to find a character in a string.\n    '''\n    return [i for i, ch in enumerate(string) if ch == char][0]\ndef get_words_by_len(list1):\n    '''\n    Write a function to get words in a list with lengths 2 to 5\n    '''\n    return [i for i in list1 if 2 <= len(i) <= 5]\ndef get_words_by_len_list(list1):\n    '''\n    Write a function to get words in a list with lengths 2 to 5\n    '''\n    return [i for i in list1 if 2 <= len(i) <= 5]\ndef get_words_by_len_list_alt(list1):\n    '''\n    Write a function to get words in a list with lengths 2 to 5\n    '''\n    return list(filter(lambda x: 2 <= len(x) <= 5, list1))\ndef get_words_by_len_list_alt2(list1):\n    '''\n    Write a function to get words in a list with lengths 2 to 5\n    '''\n    return list(filter(lambda x: 2 <= len(x) <= 5, list1))\ndef get_words_by_len_list_alt3(list1):\n    '''\n    Write a function to get words in a list with lengths 2 to 5\n    '''\n    return [i for i in list1 if 2 <= len(i) <= 5]\ndef get_words_by_len_list_alt4(list1):\n    '''\n    Write a function to get words in a list with lengths 2 to 5\n    '''\n    return [i for i in list1 if 2 <= len(i) <= 5]\ndef get_words_by_len_list_alt5(list1):\n    '''\n    Write a function to get words in a list with lengths 2 to 5\n    '''\n    return [i for i in list1 if 2 <= len(i) <= 5]\ndef count_words_by_len(string):\n    '''\n    Write a function to get the count of words in a string with lengths 2 to 5\n    '''\n    s = string.split()\n    return len([i for i in s if 2 <= len(i) <= 5])\ndef count_words_by_len_list(string):\n    '''\n    Write a function to get the count of words in a string with lengths 2 to 5\n    '''\n    s = string.split()\n    return len([i for i in s if 2 <= len(i) <= 5])\ndef count_words_by_len_list_alt(string):\n    '''\n    Write a function to get the count of words in a string with lengths 2 to 5\n    '''\n    s = string.split()\n    return len([i for i in s i",
        "num_ids": 20
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d1 = collections.Counter(list1)\n    return d1\ndef biggest(list1):\n    '''\n    Write a function to find the biggest element in a list.\n    '''\n    max = 0\n    for i in list1:\n        if max < i:\n            max = i\n    return max\ndef get_len(list1):\n    '''\n    Write a function to get the length of a list.\n    '''\n    return len(list1)\ndef mean(list1):\n    '''\n    Write a function to get the mean of a list.\n    '''\n    mean = sum(list1) / len(list1)\n    return mean\ndef median(list1):\n    '''\n    Write a function to get the median of a list.\n    '''\n    list1.sort()\n    if len(list1) % 2 == 0:\n        mid = (len(list1) / 2)\n        mid = (list1[mid] + list1[mid - 1]) / 2\n        return mid\n    else:\n        mid = len(list1) / 2\n        return list1[mid]\ndef mode(list1):\n    '''\n    Write a function to get the mode of a list.\n    '''\n    d1 = collections.Counter(list1)\n    max = 0\n    for key in d1:\n        if d1[key] > max:\n            max = d1[key]\n            mode = key\n    return mode\ndef std_dev(list1):\n    '''\n    Write a function to get the standard deviation of a list.\n    '''\n    mean1 = mean(list1)\n    total = 0\n    for i in list1:\n        total += (i - mean1) ** 2\n    std = (total / (len(list1) - 1)) ** 0.5\n    return std\ndef smallest(list1):\n    '''\n    Write a function to find the smallest element in a list.\n    '''\n    min = list1[0]\n    for i in list1:\n        if min > i:\n            min = i\n    return min\ndef get_list(list1):\n    '''\n    Write a function to get the smallest element in a list.\n    '''\n    list1.sort()\n    return list1[0]\ndef split_list(list1):\n    '''\n    Write a function to split a list into 2 equal parts.\n    '''\n    l1 = len(list1)\n    divide = l1 / 2\n    if l1 % 2 == 0:\n        l2 = list1[:divide]\n        l3 = list1[divide:]\n    else:\n        l2 = list1[:divide]\n        l3 = list1[divide + 1:]\n    return l2, l3\ndef split_list(list1):\n    '''\n    Write a function to split a list into 2 equal parts.\n    '''\n    l1 = len(list1)\n    divide = l1 / 2\n    if l1 % 2 == 0:\n        l2 = list1[:divide]\n        l3 = list1[divide:]\n    else:\n        l2 = list1[:divide]\n        l3 = list1[divide + 1:]\n    return l2, l3\ndef create_list(list1):\n    '''\n    Write a function to create a new list from an existing list.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(i)\n    return list2\ndef remove_duplicates(list1):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    new_list = []\n    for i in list1:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\ndef freq_count_dict(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d1 = {}\n    for i in list1:\n        if i in d1:\n            d1[i] += 1\n        else:\n            d1[i] = 1\n    return d1\ndef biggest_dict(list1):\n    '''\n    Write a function to find the biggest element in a list.\n    '''\n    max = 0\n    for i in list1:\n        if max < i:\n            max = i\n    return max\ndef get_len_dict(list1):\n    '''\n    Write a function to get the length of a list.\n    '''\n    return len(list1)\ndef mean_dict(list1):\n    '''\n    Write a function to get the mean of a list.\n    '''\n    mean = sum(list1) / len(list1)\n    return mean\ndef median_dict(list1):\n    '''\n    Write a function to get the median of a list.\n    '''\n    list1.sort()\n    if len(list1) % 2 == 0:\n        mid = (len(list1) / 2)\n        mid = (list1[mid] + list1[mid - 1]) / 2\n        return mid\n    else:\n        mid = len(list1) / 2\n        return list1[mid]\ndef mode_dict(list1):\n    '''\n    Write a function to get the mode of a list.\n    '''\n    d1 = {}\n    for i in list1:\n        if i in d1:\n            d1[i] += 1\n        else:\n            d1[i] = 1\n    max = 0\n    for key in d1:\n        if d1[key] > max:\n            max = d1[key]\n            mode = key\n    return mode\ndef std_dev_dict(list1):\n    '''\n    Write a function to get the standard deviation of a list.\n    '''\n    mean1 = mean_dict(list1)\n    total = 0\n    for i in list1:\n        total += (i - mean1) ** 2\n    std = (total / (len(list1) - 1)) ** 0.5\n    return std\ndef smallest_dict(list1):\n    '''\n    Write a function to find the smallest element in a list.\n    '''\n    min = list1[0]\n    for i in list1:\n        if min > i:\n            min = i\n    return min\ndef get_list_dict(list1):\n    '''\n    Write a function to get the smallest element in a list.\n    '''\n    list1.sort()\n    return list1[0]\ndef split_list_dict(list1):\n    '''\n    Write a function to split a list into 2 equal parts.\n    '''\n    l1 = len(list1)\n    divide = l1 / 2\n    if l1 % 2 == 0:\n        l2 = list1[:divide]\n        l3 = list1[divide:]\n    else:\n        l2 = list1[:divide]\n        l3 = list1[divide + 1:]\n    return l2, l3\ndef create_list_dict(list1):\n    '''\n    Write a function to create a new list from an existing list.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(i)\n    return list2\ndef remove_duplicates_dict(list1):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    new_list = []\n    for i in list1:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\ndef freq_count_dict_dict(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d1 = {}\n    for i in list1:\n        if i in d1:\n            d1[i] += 1\n        else:\n            d1[i] = 1\n    return d1\ndef biggest_dict_dict(list1):\n    '''\n    Write a function to find the biggest element in a list.\n    '''\n    max = 0\n    for i in list1:\n        if max < i:\n            max = i\n    retur",
        "num_ids": 30
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = collections.Counter(list1)\n    return count\n",
        "num_ids": 17
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = {}\n    for i in list1:\n        if i in count.keys():\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N > 1:\n        return closest_num(N - 1)\n    elif N == 1:\n        return 0\n    elif N < 0:\n        return 1000000000\n    else:\n        return N\n",
        "num_ids": 53
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 10:\n        return N-1\n    elif N > 10 and N <= 20:\n        return N-10\n    elif N > 20 and N <= 100:\n        return N-20\n    elif N > 100 and N <= 1000:\n        return N-100\n    elif N > 1000 and N <= 10000:\n        return N-1000\n    elif N > 10000:\n        return N-10000\n",
        "num_ids": 101
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 5:\n        return 0\n    if N <= 11:\n        return 1\n    if N <= 19:\n        return 2\n    if N <= 23:\n        return 3\n    if N <= 37:\n        return 4\n    if N <= 49:\n        return 5\n    if N <= 57:\n        return 6\n    if N <= 65:\n        return 7\n    if N <= 81:\n        return 8\n    if N <= 99:\n        return 9\n    if N <= 109:\n        return 10\n    if N <= 113:\n        return 11\n    if N <= 127:\n        return 12\n    if N <= 131:\n        return 13\n    if N <= 137:\n        return 14\n    if N <= 149:\n        return 15\n    if N <= 159:\n        return 16\n    if N <= 161:\n        return 17\n    if N <= 167:\n        return 18\n    if N <= 173:\n        return 19\n    if N <= 179:\n        return 20\n    if N <= 181:\n        return 21\n    if N <= 191:\n        return 22\n    if N <= 193:\n        return 23\n    if N <= 197:\n        return 24\n    if N <= 199:\n        return 25\n    if N <= 209:\n        return 26\n    if N <= 211:\n        return 27\n    if N <= 223:\n        return 28\n    if N <= 227:\n        return 29\n    if N <= 229:\n        return 30\n    if N <= 233:\n        return 31\n    if N <= 239:\n        return 32\n    if N <= 241:\n        return 33\n    if N <= 251:\n        return 34\n    if N <= 253:\n        return 35\n    if N <= 257:\n        return 36\n    if N <= 511:\n        return 37\n    if N <= 523:\n        return 38\n    if N <= 541:\n        return 39\n    if N <= 559:\n        return 40\n    if N <= 571:\n        return 41\n    if N <= 583:\n        return 42\n    if N <= 591:\n        return 43\n    if N <= 601:\n        return 44\n    if N <= 607:\n        return 45\n    if N <= 613:\n        return 46\n    if N <= 629:\n        return 47\n    if N <= 647:\n        return 48\n    if N <= 653:\n        return 49\n    if N <= 667:\n        return 50\n    if N <= 679:\n        return 51\n    if N <= 691:\n        return 52\n    if N <= 701:\n        return 53\n    if N <= 709:\n        return 54\n    if N <= 719:\n        return 55\n    if N <= 727:\n        return 56\n    if N <= 733:\n        return 57\n    if N <= 739:\n        return 58\n    if N <= 757:\n        return 59\n    if N <= 767:\n        return 60\n    if N <= 773:\n        return 61\n    if N <= 787:\n        return 62\n    if N <= 793:\n        return 63\n    if N <= 801:\n        return 64\n    if N <= 807:\n        return 65\n    if N <= 813:\n        return 66\n    if N <= 831:\n        return 67\n    if N <= 847:\n        return 68\n    if N <= 853:\n        return 69\n    if N <= 857:\n        return 70\n    if N <= 863:\n        return 71\n    if N <= 877:\n        return 72\n    if N <= 883:\n        return 73\n    if N <= 887:\n        return 74\n    if N <= 893:\n        return 75\n    if N <= 901:\n        return 76\n    if N <= 907:\n        return 77\n    if N <= 913:\n        return 78\n    if N <= 917:\n        return 79\n    if N <= 929:\n        return 80\n    if N <= 937:\n        return 81\n    if N <= 941:\n        return 82\n    if N <= 949:\n        return 83\n    if N <= 953:\n        return 84\n    if N <= 967:\n        return 85\n    if N <= 979:\n        return 86\n    if N <= 991:\n        return 87\n    if N <= 997:\n        return 88\n    if N <= 1003:\n        return 89\n    if N <= 1009:\n        return 90\n    if N <= 1015:\n        return 91\n    if N <= 1021:\n        return 92\n    if N <= 1027:\n        return 93\n    if N <= 1033:\n        return 94\n    if N <= 1039:\n        return 95\n    if N <= 1049:\n        return 96\n    if N <= 1059:\n        return 97\n    if N <= 1071:\n        return 98\n    if N <= 1077:\n        return 99\n    if N <= 1083:\n        return 100\n    if N <= 1089:\n        return 101\n    if N <= 1095:\n        return 102\n    if N <= 1103:\n        return 103\n    if N <= 1109:\n        return 104\n    if N <= 1115:\n        return 105\n    if N <= 1121:\n        return 106\n    if N <= 1127:\n        return 107\n    if N <= 1133:\n        return 108\n    if N <= 1139:\n        return 109\n    if N <= 1151:\n        return 110\n    if N <= 1153:\n        return 111\n    if N <= 1169:\n        return 112\n    if N <= 1177:\n        return 113\n    if N <= 1183:\n        return 114\n    if N <= 1193:\n        return 115\n    if N <= 1201:\n        return 116\n    if N <= 1209:\n        return 117\n    if N <= 1217:\n        return 118\n    if N <= 1233:\n        return 119\n    if N <= 1239:\n        return 120\n    if N <= 1251:\n        return 121\n    if N <= 1257:\n        return 122\n    if N <= 1263:\n        return 123\n    if N <= 1269:\n        return 124\n    if N <= 1275:\n        return 125\n    if N <= 1281:\n        return 126\n    if N <= 1287:\n        return 127\n    if N <= 1293:\n        return 128\n    if N <= 1299:\n        return 129\n    if N <= 1315:\n        return 130\n    if N <= 1331:\n        return 131\n    if N <= 1337:\n        return 132\n    if N <= 1343:\n        return 133\n    if N <= 1349:\n        return 134\n    if N <= 1353:\n        return 135\n    if N <= 1359:\n        return 136\n    if N <= 1365:\n        return 137\n    if N <= 1371:\n        return 138\n    if N <= 1377:\n        return 139\n    if N <= 1383:\n        return 140\n    if N <= 1389:\n        return 141\n    if N <= 1395:\n        return 142\n    if N <= 1401:\n        return 143\n    if N <= 1407:\n        return 144\n    if N <= 1413:\n        return 145\n    if N <= 1419:\n        return 146\n    if N <= 1425:\n        return 147\n    if N <= 1431:\n        return 148\n    if N <= 1437:\n        return 149\n    if N <= 1443:\n        return 150\n    if N <= 1449:\n        return 151\n    if N <= 1455:\n        return 152\n    if N <= 1461:\n        return 153\n    if N <= 1467:\n        return 154\n    if N <= 1473:\n        return 155\n    if N <= 1479:\n        return 156\n    if N <= 1485:\n        return 157\n    if N <= 1491:\n        return 158\n    if N <= 1497:\n        return 159\n    if N <= 1503:\n        return 160\n    if N <= 1509:\n        return 161\n    if N <= 1515:\n        return 162\n    if N <= 1521:\n        return 163\n    if N <= 1527:\n        return 164\n    if N <= 1533:\n        return 165\n    if N <= 1539:\n        return 166\n    if N <= 1545:\n        return 167\n    if N <= 1551:\n        return 168\n    if N <= 1557:\n        return 169\n    if N <= 1563:\n        return 170\n    if N <= 1",
        "num_ids": 2020
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return min(sorted([i for i in range(N, 1, -1) if i-1 in N]), key = lambda x: abs(x-N))\n",
        "num_ids": 41
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 1\n",
        "num_ids": 13
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return -1\n    if N == 1:\n        return 0\n    left, right = 1, N\n    while left <= right:\n        mid = (left + right) / 2\n        if mid - 1 < 0:\n            return mid\n        if abs(mid - N) < abs(mid - (mid - 1)):\n            return mid\n        elif abs(mid - N) == abs(mid - (mid - 1)):\n            return (mid + 1) if mid + 1 < N else mid\n        elif abs(mid - N) > abs(mid - (mid - 1)):\n            left = mid + 1\n        else:\n            right = mid - 1\n    return mid\n",
        "num_ids": 169
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 1\n    lower = closest_num(N - 1)\n    if abs(lower - N) > abs(upper - N):\n        return upper\n    return lower\n",
        "num_ids": 49
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return min(N*10, 10*N+1)\n    \ndef slow_closest_num(N):\n    '''\n    Write a function that finds the closest number to N that's divisible by 10.\n    '''\n    for i in range(N, 100, 10):\n        if i % 10 == 0:\n            return i\n    \ndef sum_of_divisors(N):\n    '''\n    Return the sum of the proper divisors of N.\n    '''\n    total = 0\n    for i in range(1, N):\n        if N % i == 0:\n            total += i\n    return total\n    \ndef list_of_divisors(N):\n    '''\n    Return a sorted list of the proper divisors of N.\n    '''\n    divisors = []\n    for i in range(1, N):\n        if N % i == 0:\n            divisors.append(i)\n    divisors.sort()\n    return divisors\n    \ndef prime_factorization(N):\n    '''\n    Returns a sorted list of the prime factors of N.\n    '''\n    divisors = []\n    for i in range(2, N):\n        if N % i == 0:\n            divisors.append(i)\n    divisors.sort()\n    return divisors\n    \ndef prime_factorization_dict(N):\n    '''\n    Return a dictionary of the prime factors of N.\n    '''\n    divisors = {}\n    for i in range(2, N):\n        if N % i == 0:\n            divisors[i] = 1\n    return divisors\n    \ndef is_prime(N):\n    '''\n    Return True if N is a prime number, False otherwise.\n    '''\n    for i in range(2, N):\n        if N % i == 0:\n            return False\n    return True\n    \ndef is_prime_number(N):\n    '''\n    Returns True if N is a prime number, False otherwise.\n    '''\n    if N < 0:\n        return False\n    if N == 0 or N == 1:\n        return False\n    for i in range(2, N):\n        if N % i == 0:\n            return False\n    return True\n    \ndef is_superprime(N):\n    '''\n    Return True if N is a superprime number, False otherwise.\n    '''\n    if N < 0:\n        return False\n    if N == 0 or N == 1:\n        return False\n    for i in range(2, N):\n        if N % i == 0:\n            return False\n    return True\n    \ndef is_superprime_number(N):\n    '''\n    Returns True if N is a superprime number, False otherwise.\n    '''\n    if N < 0:\n        return False\n    if N == 0 or N == 1:\n        return False\n    for i in range(2, N):\n        if N % i == 0:\n            return False\n    return True\n    \ndef is_palindrome(N):\n    '''\n    Return True if N is a palindrome, False otherwise.\n    '''\n    if N < 0:\n        return False\n    n = N\n    if n == 0:\n        return True\n    length = len(str(n))\n    for i in range(length/2):\n        if str(n)[i]!= str(n)[length-i-1]:\n            return False\n    return True\n    \ndef is_palindrome_number(N):\n    '''\n    Returns True if N is a palindrome, False otherwise.\n    '''\n    if N < 0:\n        return False\n    if N == 0:\n        return True\n    n = N\n    length = len(str(n))\n    for i in range(length/2):\n        if str(n)[i]!= str(n)[length-i-1]:\n            return False\n    return True\n    \ndef is_prime_p_1(N):\n    '''\n    Return True if N is a prime with one factor, False otherwise.\n    '''\n    if N < 0:\n        return False\n    if N == 0 or N == 1:\n        return False\n    for i in range(2, N):\n        if N % i == 0:\n            return False\n    return True\n    \ndef is_prime_p_2(N):\n    '''\n    Return True if N is a prime with two factors, False otherwise.\n    '''\n    if N < 0:\n        return False\n    if N == 0 or N == 1:\n        return False\n    for i in range(2, N):\n        if N % i == 0:\n            return False\n    return True\n    \ndef is_prime_p_3(N):\n    '''\n    Return True if N is a prime with three factors, False otherwise.\n    '''\n    if N < 0:\n        return False\n    if N == 0 or N == 1:\n        return False\n    for i in range(2, int(N**0.5)+1):\n        if N % i == 0:\n            return False\n    return True\n    \ndef is_prime_p_4(N):\n    '''\n    Return True if N is a prime with four factors, False otherwise.\n    '''\n    if N < 0:\n        return False\n    if N == 0 or N == 1:\n        return False\n    for i in range(2, int(N**0.5)+1):\n        if N % i == 0:\n            return False\n    return True\n    \ndef is_prime_p_5(N):\n    '''\n    Return True if N is a prime with five factors, False otherwise.\n    '''\n    if N < 0:\n        return False\n    if N == 0 or N == 1:\n        return False\n    for i in range(2, int(N**0.5)+1):\n        if N % i == 0:\n            return False\n    return True\n    \ndef is_prime_p_6(N):\n    '''\n    Return True if N is a prime with six factors, False otherwise.\n    '''\n    if N < 0:\n        return False\n    if N == 0 or N == 1:\n        return False\n    for i in range(2, int(N**0.5)+1):\n        if N % i == 0:\n            return False\n    return True\n    \ndef is_prime_p_7(N):\n    '''\n    Return True if N is a prime with seven factors, False otherwise.\n    '''\n    if N < 0:\n        return False\n    if N == 0 or N == 1:\n        return False\n    for i in range(2, int(N**0.5)+1):\n        if N % i == 0:\n            return False\n    return True\n    \ndef is_prime_p_8(N):\n    '''\n    Return True if N is a prime with eight factors, False otherwise.\n    '''\n    if N < 0:\n        return False\n    if N == 0 or N == 1:\n        return False\n    for i in range(2, int(N**0.5)+1):\n        if N % i == 0:\n            return False\n    return True\n    \ndef is_prime_p_9(N):\n    '''\n    Return True if N is a prime with nine factors, False otherwise.\n    '''\n    if N < 0:\n        return False\n    if N == 0 or N == 1:\n        return False\n    for i in range(2, int(N**0.5)+1):\n        if N % i == 0:\n            return False\n    return True\n    \ndef is_prime_p_10(N):\n    '''\n    Return True if N is a prime with ten factors, False otherwise.\n    '''\n    if N < 0:\n        return False\n    if N == 0 or N == 1:\n        return False\n    for i in range(2, int(N**0.5)+1):\n        if N % i == 0:\n            return False\n    return True\n    \ndef is_prime_p_11(N):\n    '''\n    Return True if N is a prime with eleven factors, False otherwise.\n    '''\n    if N < 0:\n        return False\n    if N == 0 or N == 1:\n        return False\n    for i in range(2, int(N**0.5)+1):\n        i",
        "num_ids": 49
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    import math\n    from bisect import bisect_right\n    r = int(math.floor(math.sqrt(N)))\n    d = r\n    for i in range(r, 0, -1):\n        if (N % i == 0):\n            d = i\n            break\n    d = N/d\n    left = int(math.floor(math.sqrt(d)))\n    right = int(math.ceil(math.sqrt(d)))\n    for i in range(left, d+1):\n        if (abs(i - d) < abs(right - d)):\n            right = i\n    return d\n    \nprint closest_num(7)\nprint closest_num(7.5)\nprint closest_num(8)\nprint closest_num(9)\nprint closest_num(10)\nprint closest_num(13)\nprint closest_num(16)\nprint closest_num(19)\nprint closest_num(26)\nprint closest_num(37)\nprint closest_num(49)\nprint closest_num(50)\nprint closest_num(53)\nprint closest_num(57)\nprint closest_num(60)\nprint closest_num(61)\nprint closest_num(62)\nprint closest_num(63)\nprint closest_num(64)\nprint closest_num(65)\nprint closest_num(66)\nprint closest_num(67)\nprint closest_num(69)\nprint closest_num(70)\nprint closest_num(72)\nprint closest_num(73)\nprint closest_num(74)\nprint closest_num(75)\nprint closest_num(76)\nprint closest_num(77)\nprint closest_num(78)\nprint closest_num(79)\nprint closest_num(80)\nprint closest_num(81)\nprint closest_num(82)\nprint closest_num(83)\nprint closest_num(84)\nprint closest_num(85)\nprint closest_num(86)\nprint closest_num(87)\nprint closest_num(88)\nprint closest_num(89)\nprint closest_num(90)\nprint closest_num(91)\nprint closest_num(92)\nprint closest_num(93)\nprint closest_num(94)\nprint closest_num(95)\nprint closest_num(96)\nprint closest_num(97)\nprint closest_num(98)\nprint closest_num(99)\nprint closest_num(100)\nprint closest_num(101)\nprint closest_num(102)\nprint closest_num(103)\nprint closest_num(104)\nprint closest_num(105)\nprint closest_num(106)\nprint closest_num(107)\nprint closest_num(108)\nprint closest_num(109)\nprint closest_num(110)\nprint closest_num(111)\nprint closest_num(112)\nprint closest_num(113)\nprint closest_num(114)\nprint closest_num(115)\nprint closest_num(116)\nprint closest_num(117)\nprint closest_num(118)\nprint closest_num(119)\nprint closest_num(120)\nprint closest_num(121)\nprint closest_num(122)\nprint closest_num(123)\nprint closest_num(124)\nprint closest_num(125)\nprint closest_num(126)\nprint closest_num(127)\nprint closest_num(128)\nprint closest_num(129)\nprint closest_num(130)\nprint closest_num(131)\nprint closest_num(132)\nprint closest_num(133)\nprint closest_num(134)\nprint closest_num(135)\nprint closest_num(136)\nprint closest_num(137)\nprint closest_num(138)\nprint closest_num(139)\nprint closest_num(140)\nprint closest_num(141)\nprint closest_num(142)\nprint closest_num(143)\nprint closest_num(144)\nprint closest_num(145)\nprint closest_num(146)\nprint closest_num(147)\nprint closest_num(148)\nprint closest_num(149)\nprint closest_num(150)\nprint closest_num(151)\nprint closest_num(152)\nprint closest_num(153)\nprint closest_num(154)\nprint closest_num(155)\nprint closest_num(156)\nprint closest_num(157)\nprint closest_num(158)\nprint closest_num(159)\nprint closest_num(160)\nprint closest_num(161)\nprint closest_num(162)\nprint closest_num(163)\nprint closest_num(164)\nprint closest_num(165)\nprint closest_num(166)\nprint closest_num(167)\nprint closest_num(168)\nprint closest_num(169)\nprint closest_num(170)\nprint closest_num(171)\nprint closest_num(172)\nprint closest_num(173)\nprint closest_num(174)\nprint closest_num(175)\nprint closest_num(176)\nprint closest_num(177)\nprint closest_num(178)\nprint closest_num(179)\nprint closest_num(180)\nprint closest_num(181)\nprint closest_num(182)\nprint closest_num(183)\nprint closest_num(184)\nprint closest_num(185)\nprint closest_num(186)\nprint closest_num(187)\nprint closest_num(188)\nprint closest_num(189)\nprint closest_num(190)\nprint closest_num(191)\nprint closest_num(192)\nprint closest_num(193)\nprint closest_num(194)\nprint closest_num(195)\nprint closest_num(196)\nprint closest_num(197)\nprint closest_num(198)\nprint closest_num(199)\nprint closest_num(200)\nprint closest_num(201)\nprint closest_num(202)\nprint closest_num(203)\nprint closest_num(204)\nprint closest_num(205)\nprint closest_num(206)\nprint closest_num(207)\nprint closest_num(208)\nprint closest_num(209)\nprint closest_num(210)\nprint closest_num(211)\nprint closest_num(212)\nprint closest_num(213)\nprint closest_num(214)\nprint closest_num(215)\nprint closest_num(216)\nprint closest_num(217)\nprint closest_num(218)\nprint closest_num(219)\nprint closest_num(220)\nprint closest_num(221)\nprint closest_num(222)\nprint closest_num(223)\nprint closest_num(224)\nprint closest_num(225)\nprint closest_num(226)\nprint closest_num(227)\nprint closest_num(228)\nprint closest_num(229)\nprint closest_num(230)\nprint closest_num(231)\nprint closest_num(232)\nprint closest_num(233)\nprint closest_num(234)\nprint closest_num(235)\nprint closest_num(236)\nprint closest_num(237)\nprint closest_num(238)\nprint closest_num(239)\nprint closest_num(240)\nprint closest_num(241)\nprint closest_num(242)\nprint closest_num(243)\nprint closest_num(244)\nprint closest_num(245)\nprint closest_num(246)\nprint closest_num(247)\nprint closest_num(248)\nprint closest_num(249)\nprint closest_num(250)\nprint closest_num(251)\nprint closest_num(252)\nprint closest_num(253)\nprint closest_num(254)\nprint closest_num(255)\nprint closest_num(256)\nprint closest_num(257)\nprint closest_num(258)\nprint closest_num(259)\nprint closest_num(260)\nprint closest_num(261)\nprint closest_num(262)\nprint closest_num(263)\nprint closest_num(264)\nprint closest_num(265)\nprint closest_num(266)\nprint closest_num(267)\nprint closest_num(268)\nprint closest_num(269)\nprint closest_num(270)\nprint closest_num(271)\nprint closest_num(272)\nprint closest_num(273)\nprint closest_num(274)\nprint closest_num(275)\nprint closest_num(276)\nprint closest_num(277)\nprint closest_num(278)\nprint closest_num(279)\nprint closest_num(280)",
        "num_ids": 2019
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    a=0\n    for i in list1:\n        if len(i)>a:\n            a=len(i)\n    return a\n",
        "num_ids": 37
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max=0\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\n",
        "num_ids": 37
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    n = len(max(list1, key=len))\n    return n\n",
        "num_ids": 21
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    l=[]\n    for i in list1:\n        l.append(len(i))\n    return max(l)\n",
        "num_ids": 32
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return max(len(i) for i in list1)\n",
        "num_ids": 17
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    print ''.join(list1)\n    return len(max(list1, key=len))\n",
        "num_ids": 26
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n    return max_len\n",
        "num_ids": 56
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    \n    long_word = \"\"\n    for word in list1:\n        if len(word) > len(long_word):\n            long_word = word\n    return len(long_word)\n",
        "num_ids": 49
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return max(len(x) for x in list1)\n",
        "num_ids": 17
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length = len(list1[0])\n    for item in list1:\n        if len(item) > length:\n            length = len(item)\n    return length\n",
        "num_ids": 43
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1\n",
        "num_ids": 11
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    pos = -1\n    for i in range(0,len(str1)):\n        if str1.startswith(sub_str, i):\n            pos = i\n            break\n    return pos\n",
        "num_ids": 51
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1.split():\n        if word.startswith(sub_str):\n            print word\n",
        "num_ids": 29
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # case insensitive comparison\n    str1 = str1.lower()\n    sub_str = sub_str.lower()\n    \n    # check if the substring is found in any of the strings\n    for string in str1:\n        if sub_str in string:\n            return True\n    \n    return False\n",
        "num_ids": 74
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print \"Yes, the substring is present\"\n    else:\n        print \"No, the substring is not present\"\n",
        "num_ids": 41
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(str1) < len(sub_str):\n        return False\n",
        "num_ids": 21
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) == 0:\n        return True\n    if len(str1) < len(sub_str):\n        return False\n    if len(str1) == 0:\n        return False\n    if len(sub_str) == 1:\n        return sub_str in str1\n    for index in range(len(str1) - len(sub_str) + 1):\n        if sub_str == str1[index:index+len(sub_str)]:\n            return True\n    return False\n",
        "num_ids": 124
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1\n",
        "num_ids": 11
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1) - len(sub_str) + 1):\n        sub_string = str1[i:i+len(sub_str)]\n        if sub_string == sub_str:\n            return True\n    return False\n",
        "num_ids": 62
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 10:\n        return False\n    s = str(n)\n    for i in range(len(s) - 1):\n        if s[i] > s[i+1]:\n            return False\n    return True\n",
        "num_ids": 57
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n&(n-1) == 0\n",
        "num_ids": 14
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in range(1, len(s)):\n        if s[i] < s[i-1]:\n            return False\n    return True\n    \ndef is_undulating_v2(n): \n    s = str(n)\n    for i in range(1, len(s)):\n        if s[i] < s[i-1]:\n            return False\n    return True\n",
        "num_ids": 105
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if len(str(n)) <= 2:\n        return False\n    r = n % 10\n    l = len(str(n))\n    c = 0\n    while l > 2:\n        l -= 1\n        if l == 0:\n            c += 1\n            break\n        if r == n % (l - 1):\n            c += 1\n    if c == l - 2:\n        return True\n    return False\n",
        "num_ids": 101
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    div = [1,2,3,4,5,6,7,8,9]\n    for i in xrange(len(div)):\n        if n % div[i]!= 0:\n            return False\n    return True\n",
        "num_ids": 59
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n == 1 or n == 7 or n == 8 or n == 11\n",
        "num_ids": 20
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    string = str(n)\n    list = []\n    for i in xrange(1,len(string)):\n        if int(string[i]) < int(string[i-1]):\n            return False\n        elif int(string[i]) > int(string[i-1]):\n            list.append(int(string[i-1]))\n    if len(list)%2 == 1:\n        return False\n    else:\n        return True\n",
        "num_ids": 112
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Since a number is undulating if and only if\n    # a) it is divisible by either 3 or 5, \n    # b) its last digit is 0, and \n    # c) the number itself is divisible by 3 or 5.\n    # You can use any method of checking if a number is divisible.\n    # If it passes all the conditions, return True. Otherwise, return False.\n    return True if n % 3 == 0 or n % 5 == 0 and n%9==0 else False\n",
        "num_ids": 119
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    digits = list(str(n))\n    for i in range(1, len(digits)):\n        if int(digits[i]) < int(digits[i-1]):\n            return False\n    return True\n",
        "num_ids": 57
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    count = 0\n    for i in range(1, len(str(n))):\n        if int(str(n)[i]) > int(str(n)[i-1]):\n            count += 1\n        elif int(str(n)[i]) < int(str(n)[i-1]):\n            count -= 1\n    return count == 0\n",
        "num_ids": 86
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a * power(a, b-1)\n",
        "num_ids": 42
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b > 1:\n        return a*power(a,b-1)\n    elif b < 0:\n        return 1/power(a,-b)\n",
        "num_ids": 65
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    \n    if(b==1):\n        return a\n    elif(b==0):\n        return 1\n    elif(b%2==1):\n        return a*power(a,b-1)\n    else:\n        return power(a*a,b/2)\n",
        "num_ids": 70
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    def recur_power(a,b):\n        if b == 1:\n            return a\n        else:\n            return a*recur_power(a, b-1)\n    return recur_power(a, b)\n",
        "num_ids": 57
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a * power(a, b-1)\n",
        "num_ids": 42
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    \n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1/a**abs(b)\n    else:\n        return a**b\n",
        "num_ids": 44
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b%2==0:\n        return power(a*a,b/2)\n    else:\n        return a*power(a,b-1)\n    \ndef base(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result=1\n    for i in range(b):\n        result=result*a\n    return result\n    \ndef base(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result=1\n    while b>0:\n        result=result*a\n        b=b-1\n    return result\n    \ndef base(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b%2==0:\n        return base(a*a,b/2)\n    else:\n        return a*base(a,b-1)\n    \ndef base(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b%2==0:\n        return base(a*a,b/2)\n    else:\n        return a*base(a,b-1)\n    \ndef base(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b%2==0:\n        return base(a*a,b/2)\n    else:\n        return a*base(a,b-1)\n    \ndef base(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b%2==0:\n        return base(a*a,b/2)\n    else:\n        return a*base(a,b-1)\n    \ndef base(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b%2==0:\n        return base(a*a,b/2)\n    else:\n        return a*base(a,b-1)\n    \ndef base(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b%2==0:\n        return base(a*a,b/2)\n    else:\n        return a*base(a,b-1)\n    \ndef base(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b%2==0:\n        return base(a*a,b/2)\n    else:\n        return a*base(a,b-1)\n    \ndef base(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b%2==0:\n        return base(a*a,b/2)\n    else:\n        return a*base(a,b-1)\n    \ndef base(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b%2==0:\n        return base(a*a,b/2)\n    else:\n        return a*base(a,b-1)\n    \ndef base(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b%2==0:\n        return base(a*a,b/2)\n    else:\n        return a*base(a,b-1)\n    \ndef base(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b%2==0:\n        return base(a*a,b/2)\n    else:\n        return a*base(a,b-1)\n    \ndef base(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b%2==0:\n        return base(a*a,b/2)\n    else:\n        return a*base(a,b-1)\n    \ndef base(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b%2==0:\n        return base(a*a,b/2)\n    else:\n        return a*base(a,b-1)\n    \ndef base(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b%2==0:\n        return base(a*a,b/2)\n    else:\n        return a*base(a,b-1)\n    \ndef base(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b%2==0:\n        return base(a*a,b/2)\n    else:\n        return a*base(a,b-1)\n    \ndef base(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b%2==0:\n        return base(a*a,b/2)\n    else:\n        return a*base(a,b-1)\n    \ndef base(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b%2==0:\n        return base(a*a,b/2)\n    else:\n        return a*base(a,b-1)\n    \ndef base(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b%2==0:\n        return base(a*a,b/2)\n    else:\n        return a*base(a,b-1)\n    \ndef base(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b%2==0:\n        return base(a*a,b/2)\n    else:\n        return a*base(a,b-1)\n    \ndef base(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b%2==0:\n        return base(a*a,b/2)\n    else:\n        return a*base(a,b-1)\n    \ndef base(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b%2==0:\n        return base(a*a,b/2)\n    els",
        "num_ids": 38
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b%2 == 1:\n        return a*power(a,b-1)\n    else:\n        return power(a*a,b/2)\n    \n    return power(a,b-1)\n    ",
        "num_ids": 77
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b<0:\n        return 1.0/(a*power(a,-b))\n    elif b==0:\n        return 1.0\n    elif b>0:\n        return a*power(a,b-1)\n",
        "num_ids": 59
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    x=sorted(test_list,key=itemgetter(1))\n    return x[0]\n",
        "num_ids": 28
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key = itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    temp = []\n    for i in test_list:\n        temp.append(i[1])\n    minimum = min(temp)\n    minimum_index = temp.index(minimum)\n    return test_list[minimum_index][0]\n",
        "num_ids": 59
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list,key=itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list,key=itemgetter(1))\n    return sorted_list[0]\n",
        "num_ids": 32
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # res = [i for i,x in enumerate(sorted(test_list, key=itemgetter(1),reverse=True))]\n    # print(res)\n    \n    return sorted(test_list, key=itemgetter(1),reverse=True)[0][0]\n    \n    # def index_minimum(test_list):\n    #     '''\n    #     Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    #     '''\n    #     return sorted(test_list, key=lambda x: x[1], reverse=True)[0][0]\n",
        "num_ids": 30
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst_length = []\n    for each_list in lst:\n        lst_length.append(len(each_list))\n",
        "num_ids": 35
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    Min = 0\n    for i in lst:\n        if len(i) < len(lst[Min]):\n            Min = lst.index(i)\n    return Min\n",
        "num_ids": 46
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = min([len(i) for i in lst])\n    return m\n    \ndef Find_Index_of_Min_Length(lst):  \n    '''\n    Write a python function to find the index of the smallest list in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = min([len(i) for i in lst])\n    return lst.index(min(lst, key = len))\n    \ndef Find_Index_of_Max_Length(lst):  \n    '''\n    Write a python function to find the index of the longest list in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = max([len(i) for i in lst])\n    return lst.index(max(lst, key = len))\n    \ndef Find_Sum_of_Lengths(lst):\n    '''\n    Write a python function to find the sum of lengths of all lists in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = sum([len(i) for i in lst])\n    return m\n    \ndef Find_Average_Length(lst):  \n    '''\n    Write a python function to find the average length of all lists in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = Find_Sum_of_Lengths(lst)/len(lst)\n    return m\n    \ndef Find_Index_of_Average_Length(lst):  \n    '''\n    Write a python function to find the index of the list with the average length in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = Find_Average_Length(lst)\n    return lst.index(m)\n    \ndef Find_Maximum_Length(lst):  \n    '''\n    Write a python function to find the length of the longest list in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = max([len(i) for i in lst])\n    return m\n    \ndef Find_Index_of_Maximum_Length(lst):  \n    '''\n    Write a python function to find the index of the longest list in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = max([len(i) for i in lst])\n    return lst.index(m)\n    \ndef Find_Number_of_Lists(lst):  \n    '''\n    Write a python function to find the number of lists in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    return m\n    \ndef Find_Average_Length_of_Lists(lst):  \n    '''\n    Write a python function to find the average length of all lists in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = Find_Sum_of_Lengths(lst)/m\n    return m\n    \ndef Find_Maximum_Length_of_Lists(lst):  \n    '''\n    Write a python function to find the length of the longest list in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = max([len(i) for i in lst])\n    return m\n    \ndef Find_Index_of_Maximum_Length_of_Lists(lst):  \n    '''\n    Write a python function to find the index of the longest list in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = max([len(i) for i in lst])\n    return lst.index(m)\n    \ndef Find_Index_of_Maximum_Length_of_Lists(lst):  \n    '''\n    Write a python function to find the index of the longest list in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = max([len(i) for i in lst])\n    return lst.index(m)\n    \ndef Find_Index_of_Maximum_Length_of_Lists(lst):  \n    '''\n    Write a python function to find the index of the longest list in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = max([len(i) for i in lst])\n    return lst.index(m)\n    \ndef Find_Index_of_Maximum_Length_of_Lists(lst):  \n    '''\n    Write a python function to find the index of the longest list in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = max([len(i) for i in lst])\n    return lst.index(m)\n    \ndef Find_Index_of_Maximum_Length_of_Lists(lst):  \n    '''\n    Write a python function to find the index of the longest list in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = max([len(i) for i in lst])\n    return lst.index(m)\n    \ndef Find_Index_of_Maximum_Length_of_Lists(lst):  \n    '''\n    Write a python function to find the index of the longest list in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = max([len(i) for i in lst])\n    return lst.index(m)\n    \ndef Find_Index_of_Maximum_Length_of_Lists(lst):  \n    '''\n    Write a python function to find the index of the longest list in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = max([len(i) for i in lst])\n    return lst.index(m)\n    \ndef Find_Index_of_Maximum_Length_of_Lists(lst):  \n    '''\n    Write a python function to find the index of the longest list in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = max([len(i) for i in lst])\n    return lst.index(m)\n    \ndef Find_Index_of_Maximum_Length_of_Lists(lst):  \n    '''\n    Write a python function to find the index of the longest list in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = max([len(i) for i in lst])\n    return lst.index(m)\n    \ndef Find_Index_of_Maximum_Length_of_Lists(lst):  \n    '''\n    Write a python function to find the index of the longest list in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = max([len(i) for i in lst])\n    return lst.index(m)\n    \ndef Find_Index_of_Maximum_Length_of_Lists(lst):  \n    '''\n    Write a python function to find the index of the longest list in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    m = max([len(i) for i in lst])\n    return lst.index(m)\n    \ndef Find_Index_of_Maximum_Length_of_Lists(lst):  ",
        "num_ids": 70
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = 0\n    for i in range(len(lst)):\n        if(len(lst[i]) > min):\n            min = len(lst[i])\n    print(\"The length of the smallest list is: \", min)\n    return min\n",
        "num_ids": 64
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    minlen = min(len(lst2) for lst2 in lst)\n    return minlen\n",
        "num_ids": 28
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in lst:\n        if len(i) <= min_len:\n            min_len = len(i)\n    return min_len\n",
        "num_ids": 51
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for item in lst:\n        if len(item) < min_len:\n            min_len = len(item)\n    return min_len\n",
        "num_ids": 51
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lens=lst[0]\n    for l in lst:\n        if len(l)<len(lens):\n            lens=l\n    return lens\n",
        "num_ids": 43
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if not lst:\n        return 0\n    m = len(lst[0])\n    for l in lst:\n        if len(l) < m:\n            m = len(l)\n    return m\n",
        "num_ids": 54
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    mini_len = len(lst[0])\n    for item in lst:\n        if len(item) < mini_len:\n            mini_len = len(item)\n    return mini_len\n",
        "num_ids": 51
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    count = 0\n    while i <= n:\n        if n % i == 0:\n            count = count + 1\n        i = i + 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div_count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_count += 1\n    return div_count\n",
        "num_ids": 44
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    count = 0\n    while i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "num_ids": 36
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 2\n    c = 0\n    while i < n:\n        if n%i == 0:\n            c = c+1\n        i = i+1\n    return c\n",
        "num_ids": 46
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n<=1:\n        return 1\n    else:\n        count=1\n        for i in range(1,n+1):\n            if n%i==0:\n                count+=1\n        return count\n",
        "num_ids": 54
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = [0 for i in range(n+1)]\n    for i in range(1, n+1):\n        div[i] = sum(j for j in range(1, i//2 + 1) if i % j == 0)\n    return div\n",
        "num_ids": 64
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors=[]\n    d=2\n    while d<n:\n        if n%d==0:\n            divisors.append(d)\n        d+=1\n    return len(divisors)\n",
        "num_ids": 54
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n%i == 0:\n            divisors.append(i)\n    return divisors\n",
        "num_ids": 47
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 2\n    l = []\n    while i < n:\n        if n % i == 0:\n            l.append(i)\n        i += 1\n    l.append(n)\n    return l\n",
        "num_ids": 53
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    import operator\n    dic_freq = {}\n    for i in list1:\n        if i in dic_freq:\n            dic_freq[i] = dic_freq[i]+1\n        else:\n            dic_freq[i] = 1\n    return dic_freq\n",
        "num_ids": 78
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n",
        "num_ids": 51
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for i in list1:\n        try:\n            frequency_dict[i] += 1\n        except KeyError:\n            frequency_dict[i] = 1\n    return frequency_dict\n",
        "num_ids": 53
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list_dict = {}\n    for i in list1:\n        list_dict[i] = list_dict.get(i, 0) + 1\n    return list_dict\n",
        "num_ids": 44
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list1 = [1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,",
        "num_ids": 2009
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for i in range(len(list1)):\n        if list1[i] not in d:\n            d[list1[i]] = 1\n        else:\n            d[list1[i]] += 1\n    return d\n",
        "num_ids": 62
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    counts = {}\n    for i in list1:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    return counts\n",
        "num_ids": 49
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freqs = {}\n    for i in list1:\n        if i not in freqs:\n            freqs[i] = 1\n        else:\n            freqs[i] += 1\n    return freqs\n",
        "num_ids": 52
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    result = {}\n    for i in list1:\n        try:\n            result[i] += 1\n        except KeyError:\n            result[i] = 1\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    for i in range(len(numbers)):\n        numbers[i] *= len(numbers)\n        numbers[i] /= len(numbers)\n    return numbers\n",
        "num_ids": 47
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    num = 1\n    for i in range(0,len(numbers)):\n        num = num * numbers[i]\n    return num\n",
        "num_ids": 36
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total/len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total/len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    total /= len(numbers)\n    return total\n",
        "num_ids": 34
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result = result * num\n    return result\n",
        "num_ids": 25
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    try:\n        result = reduce(lambda x, y: x*y, numbers)\n        return result / len(numbers)\n    except TypeError:\n        return None\n        \nmultiply_num([1,2,3,4,5])",
        "num_ids": 61
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total/len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return reduce(lambda x, y: x*y, numbers) / len(numbers)\n",
        "num_ids": 24
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n > 1:\n        decimal_to_binary(n//2)\n    print(n % 2, end = \"\")\n",
        "num_ids": 34
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n",
        "num_ids": 15
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_list = []\n    while n > 0:\n        binary_list.append(str(n % 2))\n        n /= 2\n    return \"\".join(binary_list[::-1])\n",
        "num_ids": 51
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    bits = ''\n    while n:\n        bits = str(n%2) + bits\n        n = n/2\n",
        "num_ids": 31
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\",\"\")\n",
        "num_ids": 15
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return \"0\"\n",
        "num_ids": 16
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n",
        "num_ids": 15
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    s = \"\"\n    while n > 0:\n        if n%2 == 0:\n            s = \"0\" + s\n        else:\n            s = \"1\" + s\n        n = n//2\n    return s\n",
        "num_ids": 69
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    bin = []\n    while n > 0:\n        bin.append(str(n % 2))\n        n = n // 2\n    bin.reverse()\n    return ''.join(bin)\n",
        "num_ids": 48
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    remainder = abs(n) % 2\n    if n < 0:\n        remainder = 1\n    return str(decimal_to_binary(abs(n) / 2)) + str(remainder)\n",
        "num_ids": 67
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    temp=num\n    while temp<=num:\n        temp+=1\n    return temp\n",
        "num_ids": 24
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if str(num) == str(num)[::-1]:\n        return int(num + 1)\n    else:\n        return num - 1\ndef is_palindrome(num):\n    '''\n    Write a function to check whether an integer is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\ndef is_palindrome_or_str(string):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome_or_str_recursive(string):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    if len(string) <= 1:\n        return True\n    if string[0] == string[-1]:\n        return is_palindrome_or_str_recursive(string[1:-1])\n    else:\n        return False\ndef find_duplicates(arr):\n    '''\n    Write a function to find duplicates in a sorted array.\n    '''\n    duplicates = []\n    for i in xrange(len(arr)):\n        if arr[i] == arr[i - 1] and arr[i] not in duplicates:\n            duplicates.append(arr[i])\n    return duplicates\ndef find_duplicates_recursive(arr):\n    '''\n    Write a function to find duplicates in a sorted array.\n    '''\n    if len(arr) <= 1:\n        return []\n    if arr[0] == arr[1]:\n        return [arr[0]] + find_duplicates_recursive(arr[2:])\n    else:\n        return [arr[0]] + find_duplicates_recursive(arr[1:])\ndef find_min_num_recursive(arr):\n    '''\n    Write a function to find the minimum number in a list.\n    '''\n    if arr == []:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    mid = len(arr) / 2\n    if arr[mid] > arr[mid - 1]:\n        return find_min_num_recursive(arr[:mid])\n    else:\n        return find_min_num_recursive(arr[mid:])\ndef find_max_num_recursive(arr):\n    '''\n    Write a function to find the maximum number in a list.\n    '''\n    if arr == []:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    mid = len(arr) / 2\n    if arr[mid] < arr[mid - 1]:\n        return find_max_num_recursive(arr[mid:])\n    else:\n        return find_max_num_recursive(arr[:mid])\ndef find_max_num_recursive_efficient(arr):\n    '''\n    Write a function to find the maximum number in a list.\n    '''\n    if arr == []:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    mid = len(arr) / 2\n    if arr[mid] < arr[mid - 1]:\n        return find_max_num_recursive_efficient(arr[mid:])\n    else:\n        return find_max_num_recursive_efficient(arr[:mid])\ndef find_max_num(arr):\n    '''\n    Write a function to find the maximum number in a list.\n    '''\n    if arr == []:\n        return None\n    max_num = arr[0]\n    for num in arr[1:]:\n        if num > max_num:\n            max_num = num\n    return max_num\ndef find_max_num_efficient(arr):\n    '''\n    Write a function to find the maximum number in a list.\n    '''\n    if arr == []:\n        return None\n    max_num = arr[0]\n    max_num_index = 0\n    for i in xrange(1, len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n            max_num_index = i\n    return max_num\ndef find_min_num(arr):\n    '''\n    Write a function to find the minimum number in a list.\n    '''\n    if arr == []:\n        return None\n    min_num = arr[0]\n    for num in arr[1:]:\n        if num < min_num:\n            min_num = num\n    return min_num\ndef find_min_num_efficient(arr):\n    '''\n    Write a function to find the minimum number in a list.\n    '''\n    if arr == []:\n        return None\n    min_num = arr[0]\n    min_num_index = 0\n    for i in xrange(1, len(arr)):\n        if arr[i] < min_num:\n            min_num = arr[i]\n            min_num_index = i\n    return min_num\ndef find_common_prefix(arr):\n    '''\n    Write a function to find the longest common prefix in a list.\n    '''\n    if arr == []:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    mid = len(arr) / 2\n    if arr[mid] == arr[mid - 1]:\n        return find_common_prefix(arr[:mid])\n    else:\n        return find_common_prefix(arr[mid:])\ndef find_common_prefix_efficient(arr):\n    '''\n    Write a function to find the longest common prefix in a list.\n    '''\n    if arr == []:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    mid = len(arr) / 2\n    if arr[mid] == arr[mid - 1]:\n        return find_common_prefix_efficient(arr[:mid])\n    else:\n        return find_common_prefix_efficient(arr[mid:])\ndef find_common_prefix_length(arr):\n    '''\n    Write a function to find the longest common prefix in a list.\n    '''\n    if arr == []:\n        return None\n    if len(arr) == 1:\n        return len(arr[0])\n    mid = len(arr) / 2\n    if arr[mid] == arr[mid - 1]:\n        return find_common_prefix_length(arr[:mid])\n    else:\n        return find_common_prefix_length(arr[mid:])\ndef find_common_prefix_length_efficient(arr):\n    '''\n    Write a function to find the longest common prefix in a list.\n    '''\n    if arr == []:\n        return None\n    if len(arr) == 1:\n        return len(arr[0])\n    mid = len(arr) / 2\n    if arr[mid] == arr[mid - 1]:\n        return find_common_prefix_length_efficient(arr[:mid])\n    else:\n        return find_common_prefix_length_efficient(arr[mid:])\ndef find_longest_common_prefix(arr):\n    '''\n    Write a function to find the longest common prefix in a list.\n    '''\n    if arr == []:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    mid = len(arr) / 2\n    if arr[mid] == arr[mid - 1]:\n        return find_longest_common_prefix(arr[:mid])\n    else:\n        return find_longest_common_prefix(arr[mid:])\ndef find_longest_common_prefix_efficient(arr):\n    '''\n    Write a function to find the longest common prefix in a list.\n    '''\n    if arr == []:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    mid = len(arr) / 2\n    if arr[mid] == arr[mid - 1]:\n        return find_longest_common_prefix_efficient(arr[:mid])\n    else:\n        return find_longest_common_prefix_efficient(arr[mid:])\ndef rotate_string(s, k):\n    '''\n    Write a function to rotate string.\n",
        "num_ids": 11
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if str(num) == str(num)[::-1]:\n        return num + 1\n    else:\n        return None\ndef find_largest_palindrome(num):\n    '''\n    Write a function to find the largest palindrome of a specified integer, returned as an integer.\n    '''\n    if num <= 0:\n        return None\n    else:\n        while num > 0:\n            if str(num) == str(num)[::-1]:\n                return num\n            else:\n                num -= 1\ndef find_num_divisors(num):\n    '''\n    Write a function to find the number of divisors of a number.\n    '''\n    count = 0\n    for i in range(1, num+1):\n        if num % i == 0:\n            count += 1\n    return count\ndef factorial(num):\n    '''\n    Write a function to compute factorial of a number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return num * factorial(num-1)\ndef find_num_letters(sentence):\n    '''\n    Write a function to count the number of letters of a given sentence.\n    '''\n    count = 0\n    for i in sentence:\n        if i.isalpha():\n            count += 1\n    return count\ndef find_num_vowels(sentence):\n    '''\n    Write a function to count the number of vowels in a given sentence.\n    '''\n    count = 0\n    for i in sentence:\n        if i in 'aeiou':\n            count += 1\n    return count\ndef count_vowels(sentence):\n    '''\n    Write a function to count the number of vowels in a given sentence.\n    '''\n    count = 0\n    for i in sentence:\n        if i in 'aeiou':\n            count += 1\n    return count\ndef num_to_list(num):\n    '''\n    Write a function to convert an integer to a list of digits.\n    '''\n    if num == 0:\n        return [0]\n    digits = []\n    while num > 0:\n        digits.append(num % 10)\n        num = num // 10\n    return digits\ndef list_to_num(digits):\n    '''\n    Write a function to convert a list of digits to an integer.\n    '''\n    num = 0\n    for i in digits:\n        num = num * 10 + i\n    return num\ndef sub_list(a,b):\n    '''\n    Write a function to check if a list is a sublist of another list.\n    '''\n    if b == []:\n        return True\n    elif a == []:\n        return False\n    else:\n        if len(a) <= len(b):\n            return b == a[:len(b)]\n        else:\n            return sub_list(a[1:], b)\ndef is_anagram(a,b):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    if len(a)!= len(b):\n        return False\n    else:\n        a = sorted(a)\n        b = sorted(b)\n        if a == b:\n            return True\n        else:\n            return False\ndef is_anagram_in_string(a, b):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    a = sorted(a)\n    b = sorted(b)\n    if a == b:\n        return True\n    else:\n        return False\ndef is_anagram_in_list(a,b):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    a = sorted(a)\n    b = sorted(b)\n    if a == b:\n        return True\n    else:\n        return False\ndef is_anagram_in_dict(a,b):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    a = sorted(a)\n    b = sorted(b)\n    if a == b:\n        return True\n    else:\n        return False\ndef is_anagram_in_tuple(a,b):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    a = sorted(a)\n    b = sorted(b)\n    if a == b:\n        return True\n    else:\n        return False\ndef is_anagram_in_set(a,b):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    a = sorted(a)\n    b = sorted(b)\n    if a == b:\n        return True\n    else:\n        return False\ndef is_anagram_in_string_dict(a,b):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    a = sorted(a)\n    b = sorted(b)\n    if a == b:\n        return True\n    else:\n        return False\ndef get_num_letters_in_string(sentence):\n    '''\n    Write a function to find the number of letters in a given string.\n    '''\n    return len(sentence)\ndef get_num_vowels_in_string(sentence):\n    '''\n    Write a function to find the number of vowels in a given string.\n    '''\n    count = 0\n    for i in sentence:\n        if i in 'aeiou':\n            count += 1\n    return count\ndef is_palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return string == string[::-1]\ndef count_vowels_in_string(sentence):\n    '''\n    Write a function to count the number of vowels in a given sentence.\n    '''\n    count = 0\n    for i in sentence:\n        if i in 'aeiou':\n            count += 1\n    return count\ndef find_max_in_list(lst):\n    '''\n    Write a function to find the maximum number in a list.\n    '''\n    max = lst[0]\n    for i in lst:\n        if i > max:\n            max = i\n    return max\ndef is_prime(num):\n    '''\n    Write a function to check if a given number is prime.\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        for i in range(2,num):\n            if num % i == 0:\n                return False\n        return True\ndef print_factorial(num):\n    '''\n    Write a function to print the factorial of a given number.\n    '''\n    if num < 0:\n        print('Factorial cannot be found for a negative number')\n    elif num == 0:\n        print('Factorial is 1')\n    else:\n        fact = 1\n        for i in range(1,num+1):\n            fact *= i\n        print('Factorial of',num,'is',fact)\ndef print_list_of_divisors(num):\n    '''\n    Write a function to print the divisors of a given number.\n    '''\n    if num < 0:\n        print('Divisor cannot be found for a negative number')\n    elif num == 0:\n        print('Divisor is 1')\n    else:\n        for i in range(1,num+1):\n            if num % i == 0:\n                print(i, end=' ')\ndef print_list_of_factorials(num):\n    '''\n    Write a function to print the factorial of a given number.\n    '''\n    if num < 0:\n        print('Factorial cannot be found for a negative number')\n    elif num == 0:\n        print('Factorial is 1')\n    else:\n        fact = 1\n        for i in range(1,num+1):\n            fact *= i\n        print(num,'!',fact)\ndef print_num_divisor",
        "num_ids": 86
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num==0:\n        return 1\n    if num==1:\n        return 2\n    else:\n        num+=1\n        while num%10==0:\n            num/=10\n        while num%10==9:\n            num-=1\n        return num\n",
        "num_ids": 67
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num <= 99:\n        return num + 1\n    if num % 2 == 1:\n        return int(str(num) + str(num)[::-1])\n    else:\n        return int(str(num - 1) + str(num - 1)[::-1])\n",
        "num_ids": 68
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == int(num[::-1]):\n        return int(num + '1' + '0' * (len(num) - 1))\n    else:\n        return int(num[:-1] + '9' + '0' * (len(num) - 1))\n",
        "num_ids": 70
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 1\n    if num == 1:\n        return 2\n    if num == 2:\n        return 3\n    if num == 3:\n        return 5\n    if num == 4:\n        return 7\n    if num == 5:\n        return 11\n    if num == 6:\n        return 13\n    if num == 7:\n        return 17\n    if num == 8:\n        return 19\n    if num == 9:\n        return 23\n    if num == 10:\n        return 29\n    if num == 11:\n        return 31\n    if num == 12:\n        return 37\n    if num == 13:\n        return 43\n    if num == 14:\n        return 47\n    if num == 15:\n        return 53\n    if num == 16:\n        return 59\n    if num == 17:\n        return 65\n    if num == 18:\n        return 71\n    if num == 19:\n        return 77\n    if num == 20:\n        return 83\n    if num == 21:\n        return 89\n    if num == 22:\n        return 95\n    if num == 23:\n        return 101\n    if num == 24:\n        return 107\n    if num == 25:\n        return 113\n    if num == 26:\n        return 119\n    if num == 27:\n        return 125\n    if num == 28:\n        return 131\n    if num == 29:\n        return 137\n    if num == 30:\n        return 143\n    if num == 31:\n        return 149\n    if num == 32:\n        return 155\n    if num == 33:\n        return 161\n    if num == 34:\n        return 167\n    if num == 35:\n        return 173\n    if num == 36:\n        return 179\n    if num == 37:\n        return 185\n    if num == 38:\n        return 191\n    if num == 39:\n        return 197\n    if num == 40:\n        return 203\n    if num == 41:\n        return 209\n    if num == 42:\n        return 215\n    if num == 43:\n        return 221\n    if num == 44:\n        return 227\n    if num == 45:\n        return 233\n    if num == 46:\n        return 239\n    if num == 47:\n        return 245\n    if num == 48:\n        return 251\n    if num == 49:\n        return 257\n    if num == 50:\n        return 263\n    if num == 51:\n        return 269\n    if num == 52:\n        return 275\n    if num == 53:\n        return 281\n    if num == 54:\n        return 287\n    if num == 55:\n        return 293\n    if num == 56:\n        return 307\n    if num == 57:\n        return 313\n    if num == 58:\n        return 317\n    if num == 59:\n        return 323\n    if num == 60:\n        return 329\n    if num == 61:\n        return 335\n    if num == 62:\n        return 341\n    if num == 63:\n        return 347\n    if num == 64:\n        return 353\n    if num == 65:\n        return 359\n    if num == 66:\n        return 365\n    if num == 67:\n        return 371\n    if num == 68:\n        return 377\n    if num == 69:\n        return 383\n    if num == 70:\n        return 389\n    if num == 71:\n        return 395\n    if num == 72:\n        return 401\n    if num == 73:\n        return 409\n    if num == 74:\n        return 415\n    if num == 75:\n        return 421\n    if num == 76:\n        return 427\n    if num == 77:\n        return 433\n    if num == 78:\n        return 439\n    if num == 79:\n        return 445\n    if num == 80:\n        return 451\n    if num == 81:\n        return 457\n    if num == 82:\n        return 463\n    if num == 83:\n        return 469\n    if num == 84:\n        return 475\n    if num == 85:\n        return 481\n    if num == 86:\n        return 487\n    if num == 87:\n        return 493\n    if num == 88:\n        return 499\n    if num == 89:\n        return 505\n    if num == 90:\n        return 511\n    if num == 91:\n        return 517\n    if num == 92:\n        return 523\n    if num == 93:\n        return 529\n    if num == 94:\n        return 535\n    if num == 95:\n        return 541\n    if num == 96:\n        return 547\n    if num == 97:\n        return 553\n    if num == 98:\n        return 559\n    if num == 99:\n        return 565\n    if num == 100:\n        return 571\n    if num == 101:\n        return 577\n    if num == 102:\n        return 583\n    if num == 103:\n        return 589\n    if num == 104:\n        return 595\n    if num == 105:\n        return 601\n    if num == 106:\n        return 607\n    if num == 107:\n        return 613\n    if num == 108:\n        return 619\n    if num == 109:\n        return 625\n    if num == 110:\n        return 631\n    if num == 111:\n        return 637\n    if num == 112:\n        return 643\n    if num == 113:\n        return 649\n    if num == 114:\n        return 655\n    if num == 115:\n        return 661\n    if num == 116:\n        return 667\n    if num == 117:\n        return 673\n    if num == 118:\n        return 679\n    if num == 119:\n        return 685\n    if num == 120:\n        return 691\n    if num == 121:\n        return 697\n    if num == 122:\n        return 703\n    if num == 123:\n        return 709\n    if num == 124:\n        return 715\n    if num == 125:\n        return 721\n    if num == 126:\n        return 727\n    if num == 127:\n        return 733\n    if num == 128:\n        return 739\n    if num == 129:\n        return 745\n    if num == 130:\n        return 751\n    if num == 131:\n        return 757\n    if num == 132:\n        return 763\n    if num == 133:\n        return 769\n    if num == 134:\n        return 775\n    if num == 135:\n        return 781\n    if num == 136:\n        return 787\n    if num == 137:\n        return 793\n    if num == 138:\n        return 799\n    if num == 139:\n        return 805\n    if num == 140:\n        return 811\n    if num == 141:\n        return 817\n    if num == 142:\n        return 823\n    if num == 143:\n        return 829\n    if num == 144:\n        return 835\n    if num == 145:\n        return 841\n    if num == 146:\n        return 847\n    if num == 147:\n        return 853\n    if num == 148:\n        return 859\n    if num == 149:\n        return 865\n    if num == 150:\n        return 871\n    if num == 151:\n        return 877\n    if num == 152:\n        return 883\n    if num == 153:\n        return 889\n    if num == 154:\n        return 895\n    if num == 155:\n        return 901\n    if num == 156:\n        return 907\n    if num == 157:\n        return 913\n    if num == 158:\n        return 919\n    if num == 159:\n        return 925\n    if num == 160:\n        return 931\n    if num == 161:\n        return 937\n    if num == 162:\n        return 943\n    if num == 163:\n        return 949\n    if num == 164:\n        return 955\n    if num == 165:\n        return 961\n    if num == 166:\n        return 967\n    if num == 167:\n        return 973\n    if num == 168:\n        return 979\n    if num == 169:\n        return 985\n    if num == 170:\n        return 991\n    if num == 171:\n        return 997\n    if num == 172:\n        return 1003\n    if num == 173:\n        return 1009",
        "num_ids": 2001
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n",
        "num_ids": 28
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == int('9' * int(len(str(num)) / 2)):\n        return int('0' + str(num) * 2)\n    elif num == int('1' + '0' * (int(len(str(num)) / 2) - 1)):\n        return int('2' + '0' * (int(len(str(num)) / 2) - 1) + '1')\n    else:\n        return int(str(num) + str(num)[::-1])\n",
        "num_ids": 123
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_list = [int(x) for x in str(num)]\n    new_num_list = num_list[::-1]\n    for i in range(len(new_num_list)):\n        if new_num_list[i] < 9:\n            new_num_list[i] += 1\n            break\n        elif i == len(new_num_list) - 1:\n            new_num_list[i] = 0\n            break\n        new_num_list[i] = 0\n    return int(\"\".join(str(x) for x in new_num_list[::-1]))\n",
        "num_ids": 151
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        raise ValueError('k is out of bounds')\n    \n    i = 0\n    while i < len(arr) - 1:\n        if arr[i] > arr[i + 1]:\n            i += 1\n        elif arr[i] == arr[i + 1]:\n            i += 2\n        else:\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n            i += 1\n    return arr[k - 1]\n",
        "num_ids": 123
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if arr == []:\n        return None\n    if k > len(arr):\n        return None\n    left, right = 0, len(arr)\n    while left < right:\n        pivot = left + (right - left) // 2\n        if arr[pivot] == k:\n            return arr[pivot]\n        elif arr[pivot] > k:\n            right = pivot\n        else:\n            left = pivot + 1\n    return arr[left]\n",
        "num_ids": 113
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if arr == []:\n        return None\n    else:\n        return arr[k-1]\n",
        "num_ids": 26
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    i = 1\n    while i < len(arr):\n        arr[i], arr[i-1] = arr[i-1], arr[i]\n        i += 2\n    arr[-k], arr[-1] = arr[-1], arr[-k]\n    return arr[-1]\n",
        "num_ids": 77
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr = arr[::-1]\n    for i in range(len(arr)):\n        if i + k - 1 < len(arr):\n            return arr[i + k - 1]\n    return None\n",
        "num_ids": 52
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    #Your code here\n    for i in range(len(arr)):\n        if i+1 == k:\n            return arr[i]\n",
        "num_ids": 36
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # base case: if k is out of bounds\n    if k > len(arr) or k < 1:\n        return None\n    # keep track of the left and right pointers\n    left = 0\n    right = len(arr) - 1\n    # find the kth element\n    while left <= right:\n        pivot = (left + right) // 2\n        # if k is in the left half\n        if arr[pivot] < k:\n            left = pivot + 1\n        # if k is in the right half\n        elif arr[pivot] > k:\n            right = pivot - 1\n        # if k is equal to the current value\n        else:\n            return arr[pivot]\n    # if the kth element is not in the array\n    return None\n",
        "num_ids": 182
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[:1].upper() + word[1:].lower() for word in word.split('_')])\n",
        "num_ids": 34
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([x.capitalize() for x in word.split('_')])\n",
        "num_ids": 24
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return reduce(lambda x, y: x + y if y.isupper() else x + '_' + y, word.split('_'))\n",
        "num_ids": 37
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    new_string = \"\"\n    for char in word:\n        if char == \"-\" or char == \"_\":\n            new_string += \" \"\n        else:\n            new_string += char.upper()\n    return new_string\n",
        "num_ids": 56
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    res = ''\n    for i, char in enumerate(word):\n        if char.isupper():\n            if i!= 0:\n                res += '_'\n            res += char.lower()\n        else:\n            res += char\n",
        "num_ids": 59
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    import re\n    if not word:\n        return \"\"\n    first = word[0]\n    if first.isupper():\n        return word\n    word = re.sub(r'(^_*[a-z]|_*[a-z]|[a-z]_*$)', '', word)\n    word = word.replace(\"_\", \"\")\n    word = first + word.title()\n    return word\n",
        "num_ids": 104
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if not word: return ''\n    if '_' in word:\n        return snake_to_camel_dict(word)\n    word = ''.join(word.split('_'))\n    return word[0].upper() + word[1:]\n",
        "num_ids": 62
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    head = ''\n    tail = ''\n    for c in word:\n        if c == '_':\n            head += c\n        elif c == '-':\n            head += c\n            tail += c\n        else:\n            head += c\n            tail += c\n    return head.capitalize() + tail\n",
        "num_ids": 75
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word==None:\n        return\n    word_list=word.split('_')\n    first_word=word_list[0]\n    result=first_word.upper()\n    for i in range(1,len(word_list)):\n        result+=''.join([w.upper() for w in word_list[i].split('_')])\n    return result\n",
        "num_ids": 92
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    snake_words = snake_case_to_words(word)\n    camel_case = \"\"\n",
        "num_ids": 27
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    matrix = [[0 for i in range(m)] for j in range(n)]\n    for i in range(m):\n        if i%2 == 0:\n            matrix[i/2][i] = 1\n        else:\n            matrix[n - i/2 - 1][i] = 1\n    return matrix\n",
        "num_ids": 79
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n > m:\n        n, m = m, n\n    a = 1\n    if n == m:\n        return a\n    if m == 1:\n        for i in range(n):\n            a = a * (n - i)\n        return a\n    for i in range(1, m+1):\n        a = a * (n - i) / i\n    return a\n",
        "num_ids": 95
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # if the n and m are equal, then the number is 3n + 2m = 2m + 3n + 2\n    # if the n and m are not equal, then the number is 3n + 2m + 2 = 2m + 3n + 2 + 2\n    if n == m:\n        return 2*m\n    else:\n        return 2*m + 2\n",
        "num_ids": 88
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    from fractions import gcd\n    def find_Eulerian_number(n, m):\n        if n > m:\n            return find_Eulerian_number(m, n)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        else:\n            return find_Eulerian_number(n-1, m) + find_Eulerian_number(n, m-1)\n    return (find_Eulerian_number(n, m))\n",
        "num_ids": 120
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = [0]*(n+m)\n    a[n] = 1\n    for i in xrange(1, n+m):\n        if i < n:\n            a[i] = a[i-1] + 1\n        else:\n            a[i] = a[i-1] - 1\n    return a[n]\n",
        "num_ids": 85
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < 1 or m < 1: \n        return 0 \n    if n == 1: \n        return m \n    if n == m: \n        return (n * (n - 1)) // 2 \n    return (m * (m - 1)) // 2 + (n - 1) * m \n",
        "num_ids": 76
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = n\n    if n%2 == 0:\n        while n%2 == 0:\n            n /= 2\n            a -= 1\n    elif n%2 == 1:\n        while n%2 == 1:\n            n /= 2\n            a -= 1\n    if m%2 == 0:\n        while m%2 == 0:\n            m /= 2\n            a -= 1\n    elif m%2 == 1:\n        while m%2 == 1:\n            m /= 2\n            a -= 1\n    if a == 0:\n        return 1\n    else:\n        return 0\n",
        "num_ids": 144
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Your code here\n    \n    # dp[i][j] = (m - i) * (n - j)\n    # dp[i][j] = (i - j) * (n - j)\n    # dp[i][j] = i * (n - j)\n    # dp[i][j] = i * (n - j)\n    # dp[i][j] = (i - j) * n\n    \n    # for i in xrange(m):\n    #     for j in xrange(n):\n    #         dp[i][j] = dp[i][j] - (i - j) * m\n    \n    # for i in xrange(m):\n    #     for j in xrange(n):\n    #         dp[i][j] = dp[i][j] - i * m\n    #     for j in xrange(n):\n    #         dp[i][j] = dp[i][j] - j * m\n    \n    # for i in xrange(m):\n    #     for j in xrange(n):\n    #         dp[i][j] = dp[i][j] - i * m - j * n\n    \n    # for i in xrange(m):\n    #     for j in xrange(n):\n    #         dp[i][j] = dp[i][j] - i * m - j * n\n    \n    # for i in xrange(m):\n    #     for j in xrange(n):\n    #         dp[i][j] = dp[i][j] - i * m - j * n\n    \n    # for i in xrange(m):\n    #     for j in xrange(n):\n    #         dp[i][j] = dp[i][j] - i * m - j * n\n    \n    # for i in xrange(m):\n    #     for j in xrange(n):\n    #         dp[i][j] = dp[i][j] - i * m - j * n\n    \n    # for i in xrange(m):\n    #     for j in xrange(n):\n    #         dp[i][j] = dp[i][j] - i * m - j * n\n    \n    # for i in xrange(m):\n    #     for j in xrange(n):\n    #         dp[i][j] = dp[i][j] - i * m - j * n\n    \n    # for i in xrange(m):\n    #     for j in xrange(n):\n    #         dp[i][j] = dp[i][j] - i * m - j * n\n    \n    # for i in xrange(m):\n    #     for j in xrange(n):\n    #         dp[i][j] = dp[i][j] - i * m - j * n\n    \n    # for i in xrange(m):\n    #     for j in xrange(n):\n    #         dp[i][j] = dp[i][j] - i * m - j * n\n    \n    # for i in xrange(m):\n    #     for j in xrange(n):\n    #         dp[i][j] = dp[i][j] - i * m - j * n\n    \n    # for i in xrange(m):\n    #     for j in xrange(n):\n    #         dp[i][j] = dp[i][j] - i * m - j * n\n    \n    # for i in xrange(m):\n    #     for j in xrange(n):\n    #         dp[i][j] = dp[i][j] - i * m - j * n\n    \n    # for i in xrange(m):\n    #     for j in xrange(n):\n    #         dp[i][j] = dp[i][j] - i * m - j * n\n    \n    # for i in xrange(m):\n    #     for j in xrange(n):\n    #         dp[i][j] = dp[i][j] - i * m - j * n\n    \n    # for i in xrange(m):\n    #     for j in xrange(n):\n    #         dp[i][j] = dp[i][j] - i * m - j * n\n    \n    # for i in xrange(m):\n    #     for j in xrange(n):\n    #         dp[i][j] = dp[i][j] - i * m - j * n\n    \n    # for i in xrange(m):\n    #     for j in xrange(n):\n    #         dp[i][j] = dp[i][j] - i * m - j * n\n    \n    # for i in xrange(m):\n    #     for j in xrange(n):\n    #         dp[i][j] = dp[i][j] - i * m - j * n\n    \n    # for i in xrange(m):\n    #     for j in xrange(n):\n    #         dp[i][j] = dp[i][j] - i * m - j * n\n    \n    # for i in xrange(m):\n    #     for j in xrange(n):\n    #         dp[i][j] = dp[i][j] - i * m - j * n\n    \n    # for i in xrange(m):\n    #     for j in xrange(n):\n    #         dp[i][j] = dp[i][j] - i * m - j * n\n    \n    # for i in xrange(m):\n    #     for j in xrange(n):\n    #         dp[i][j] = dp[i][j] - i * m - j * n\n    \n    # for i in xrange(m):\n    #     for j in xrange(n):\n    #         dp[i][j] = dp[i][j] - i * m - j * n\n    \n    # for i in xrange(m):\n    #     for j in xrange(n):\n    #         dp[i][j] = dp[i][j] - i * m - j * n\n    \n    # for i in xrange(m):\n    #     for j in xrange(n):\n    #         dp[i][j] = dp[i][j] - i * m - j * n\n    \n    # for i in xrange(m):\n    #     for j in xrange(n):\n    #         dp[i][j] = dp[i][j] - i * m - j * n\n    \n    # for i in xrange(m):\n    #     for j in xrange(n):\n    #         dp[i][j] = dp[i][j] - i * m - j * n\n    \n    # for i in xrange(m):\n    #     for j in xrange(n):\n    #         dp[i][j] = dp[i][j] - i * m - j * n\n    \n    # for i in xrange(m):\n    #     for j in xrange(n):\n    #         dp[i][j] = dp[i][j] - i * m - j * n\n    \n    # for i in xrange(m):\n    #     for j in xrange(n):\n    #         dp[i][j] = dp[i][j] - i * m - j * n\n    \n    # for i in xrange(m):\n    #     for j in xrange(n):\n    #         dp[i][j] = dp[i][j] - i * m - j * n\n    \n    # for i in xrange(m):\n    #     for j in xrange(n):\n    #         dp[i][j] = dp[i][j] - i * m - j * n\n    \n    # for i in xrange(m):\n    ",
        "num_ids": 1937
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    edges = []\n    for i in range(1,n+1):\n        edges.append([])\n        for j in range(1,m+1):\n            edges[i-1].append(0)\n",
        "num_ids": 57
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n * (n - 1) // 2 - m * (m - 1) // 2\n",
        "num_ids": 24
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for string in input_list:\n        sorted_list.append(sorted(string))\n    return sorted_list\n",
        "num_ids": 39
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n    for sublist in input_list:\n        sublist.sort()\n        output_list.append(sublist)\n    return output_list\n",
        "num_ids": 43
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # TODO: Write this function\n    return None\n",
        "num_ids": 15
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n",
        "num_ids": 9
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(l) for l in input_list]\n",
        "num_ids": 18
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublists = [list(x) for x in input_list]\n",
        "num_ids": 19
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output = []\n    for sublist in input_list:\n        output.append(sorted(sublist))\n    return output\n",
        "num_ids": 33
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(x) for x in input_list]\n",
        "num_ids": 18
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for item in input_list:\n        item.sort()\n        new_list.append(item)\n    return new_list\n",
        "num_ids": 40
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if len(input_list) == 1:\n        return input_list\n    elif len(input_list) == 0:\n        return []\n    else:\n        first_half = sort_sublists(input_list[:len(input_list)//2])\n        second_half = sort_sublists(input_list[len(input_list)//2:])\n        return merge_sublists(first_half, second_half)\n",
        "num_ids": 107
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([True for i in lst if i])\n    ",
        "num_ids": 17
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count = count + 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(map(bool,lst))\n",
        "num_ids": 14
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([x for x in lst if x])\n",
        "num_ids": 16
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    c=0\n    for i in lst:\n        if i:\n            c+=1\n    return c\nprint(count([True, False, True, False, True, True]))\n",
        "num_ids": 47
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum([bool(val) for val in lst])\n    \ndef index(lst):   \n    '''\n    Write a python function to find the index of the first element of the\n    list that meets the given condition.\n    '''\n    for index, val in enumerate(lst):\n        if bool(val):\n            return index\n    return -1\n    \ndef distinct(lst):   \n    '''\n    Write a python function to find the distinct numbers in the given list.\n    '''\n    return len(set(lst))\n    \ndef freq(lst):   \n    '''\n    Write a python function to find the most frequent elements in the given list.\n    '''\n    return max(set(lst), key=lst.count)\n    \ndef minmax(lst):   \n    '''\n    Write a python function to find the minimum and maximum elements in the given\n    list.\n    '''\n    return min(lst), max(lst)\n    \ndef sort(lst):   \n    '''\n    Write a python function to sort the elements of the given list in ascending\n    order.\n    '''\n    lst.sort()\n    return lst\n    \ndef map(fn, lst):   \n    '''\n    Write a python function to apply a given function to each element of the\n    given list.\n    '''\n    return [fn(x) for x in lst]\n    \ndef zip(*lst):   \n    '''\n    Write a python function to combine each element of the given lists in\n    tuples.\n    '''\n    return list(zip(*lst))\n    \ndef unzip(zipped_list):   \n    '''\n    Write a python function to unzip a list of tuples.\n    '''\n    return list(zip(*zipped_list))\n    \ndef reverse(lst):   \n    '''\n    Write a python function to reverse a list.\n    '''\n    return lst[::-1]\n    \ndef reverse1(lst):   \n    '''\n    Write a python function to reverse a list.\n    '''\n    return lst[::-1]\n    \ndef group(lst, fn):   \n    '''\n    Write a python function to group elements of a list according to the\n    function given.\n    '''\n    res = [[], [], [], [], [], [], [], [], [], []]\n    for val in lst:\n        res[fn(val)].append(val)\n    return res\n    \ndef split(lst, fn):   \n    '''\n    Write a python function to split the elements of the given list into two\n    lists based on the output of the given function.\n    '''\n    return list(zip(*[(x, i) for i, x in enumerate(lst) if fn(x) == 0]))\n    \ndef reduce(fn, lst):   \n    '''\n    Write a python function to reduce a list by repeatedly applying the given\n    function to each consecutive pair of elements in the list.\n    '''\n    return reduce(fn, lst[1:], lst[0]) if lst else lst\n    \ndef all(fn, lst):   \n    '''\n    Write a python function to check if the given list contains all the\n    elements of the given list.\n    '''\n    return len(lst) == count(fn(val) for val in lst)\n    \ndef any(fn, lst):   \n    '''\n    Write a python function to check if the given list contains any elements\n    of the given list.\n    '''\n    return 1 in [fn(val) for val in lst]\n    \ndef sort_and_reverse(lst):   \n    '''\n    Write a python function to sort and reverse a list.\n    '''\n    lst.sort()\n    lst.reverse()\n    return lst\n    \ndef sort_and_reverse1(lst):   \n    '''\n    Write a python function to sort and reverse a list.\n    '''\n    return sorted(lst, reverse=True)\n    \ndef sort_and_reverse2(lst):   \n    '''\n    Write a python function to sort and reverse a list.\n    '''\n    return sorted(lst, reverse=True)\n    \ndef sort_and_reverse3(lst):   \n    '''\n    Write a python function to sort and reverse a list.\n    '''\n    return sorted(lst, reverse=True)\n    \ndef sort_and_reverse4(lst):   \n    '''\n    Write a python function to sort and reverse a list.\n    '''\n    return sorted(lst, reverse=True)\n    \ndef sort_and_reverse5(lst):   \n    '''\n    Write a python function to sort and reverse a list.\n    '''\n    return sorted(lst, reverse=True)\n    \ndef sort_and_reverse6(lst):   \n    '''\n    Write a python function to sort and reverse a list.\n    '''\n    return sorted(lst, reverse=True)\n    \ndef sort_and_reverse7(lst):   \n    '''\n    Write a python function to sort and reverse a list.\n    '''\n    return sorted(lst, reverse=True)\n    \ndef sort_and_reverse8(lst):   \n    '''\n    Write a python function to sort and reverse a list.\n    '''\n    return sorted(lst, reverse=True)\n    \ndef sort_and_reverse9(lst):   \n    '''\n    Write a python function to sort and reverse a list.\n    '''\n    return sorted(lst, reverse=True)\n    \ndef sort_and_reverse10(lst):   \n    '''\n    Write a python function to sort and reverse a list.\n    '''\n    return sorted(lst, reverse=True)\n    \ndef sort_and_reverse11(lst):   \n    '''\n    Write a python function to sort and reverse a list.\n    '''\n    return sorted(lst, reverse=True)\n    \ndef sort_and_reverse12(lst):   \n    '''\n    Write a python function to sort and reverse a list.\n    '''\n    return sorted(lst, reverse=True)\n    \ndef sort_and_reverse13(lst):   \n    '''\n    Write a python function to sort and reverse a list.\n    '''\n    return sorted(lst, reverse=True)\n    \ndef sort_and_reverse14(lst):   \n    '''\n    Write a python function to sort and reverse a list.\n    '''\n    return sorted(lst, reverse=True)\n    \ndef sort_and_reverse15(lst):   \n    '''\n    Write a python function to sort and reverse a list.\n    '''\n    return sorted(lst, reverse=True)\n    \ndef sort_and_reverse16(lst):   \n    '''\n    Write a python function to sort and reverse a list.\n    '''\n    return sorted(lst, reverse=True)\n    \ndef sort_and_reverse17(lst):   \n    '''\n    Write a python function to sort and reverse a list.\n    '''\n    return sorted(lst, reverse=True)\n    \ndef sort_and_reverse18(lst):   \n    '''\n    Write a python function to sort and reverse a list.\n    '''\n    return sorted(lst, reverse=True)\n    \ndef sort_and_reverse19(lst):   \n    '''\n    Write a python function to sort and reverse a list.\n    '''\n    return sorted(lst, reverse=True)\n    \ndef sort_and_reverse20(lst):   \n    '''\n    Write a python function to sort and reverse a list.\n    '''\n    return sorted(lst, reverse=True)\n    \ndef sort_and_reverse21(lst):   \n    '''\n    Write a python function to sort and reverse a list.\n    '''\n    return sorted(lst, reverse=True)\n    \ndef sort_and_reverse22(lst):   \n    '''\n    Write a python function to sort and reverse a list.\n    '''\n    return sorted(lst, reverse=True)\n    \ndef sort_and_reverse23(lst):   \n    '''\n    Write a python function t",
        "num_ids": 8
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum([i is True for i in lst])\n",
        "num_ids": 16
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for ele in lst:\n        if(ele==True):\n            count=count+1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if not isinstance(test_list, list):\n        raise Exception(\"Wrong input type\")\n    if not isinstance(test_tup, tuple):\n        raise Exception(\"Wrong input type\")\n    for i in range(len(test_tup)):\n        if isinstance(test_tup[i], list):\n            test_list.extend(test_tup[i])\n        else:\n            test_list.append(test_tup[i])\n    return test_list\n",
        "num_ids": 120
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_tup.append(test_list[i])\n    return test_tup\n",
        "num_ids": 38
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list) == len(test_tup):\n            test_tup.append(test_list[i])\n        else:\n            pass\n    return test_tup\n",
        "num_ids": 62
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    \n    for i in range(len(test_tup)):\n        test_list.append(test_tup[i])\n    \n    return\n",
        "num_ids": 39
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if len(test_list) > len(test_tup):\n        test_list += ['']*(len(test_tup) - len(test_list))\n    elif len(test_list) < len(test_tup):\n        test_tup += ('') * (len(test_list) - len(test_tup))\n    \n    return test_list + test_tup\n",
        "num_ids": 101
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_tup:\n        test_list.append(item)\n    return test_list\n",
        "num_ids": 28
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup = test_tup + (item,)\n    return test_tup\n",
        "num_ids": 33
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    assert type(test_list) == list\n    assert type(test_tup) == tuple\n    if len(test_tup) == 2:\n        test_tup += (0, 0)\n    if len(test_tup) == 4:\n        test_tup += (0, 0, 0, 0)\n    return test_list + test_tup\n",
        "num_ids": 90
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #List1 = [1,2,4,5,6,7,8,9,10]\n    #List2 = [3,6,7,8]\n    #List3 = [5,7,10,11,12]\n    #merged_list = merge_sorted_list(List1,List2,List3)\n    #print(merged_list)\n    \n    List1 = num1\n    List2 = num2\n    List3 = num3\n    length1 = len(List1)\n    length2 = len(List2)\n    length3 = len(List3)\n    #print(length1)\n    #print(length2)\n    #print(length3)\n    merged_list = []\n    if(length1 == 0):\n        merged_list = List2\n        return merged_list\n    if(length2 == 0):\n        merged_list = List1\n        return merged_list\n    if(length3 == 0):\n        merged_list = List1\n        return merged_list\n    if(length1 < length2 and length1 < length3):\n        merged_list = List1\n        return merged_list\n    if(length2 < length1 and length2 < length3):\n        merged_list = List2\n        return merged_list\n    if(length3 < length1 and length3 < length2):\n        merged_list = List3\n        return merged_list\n    \n    #print(\"merging\")\n    \n    if(length1 == length2 and length1 == length3):\n        merged_list = List1 + List2 + List3\n        return merged_list\n    if(length1 == length2):\n        merged_list = List1 + List2\n        return merged_list\n    if(length1 == length3):\n        merged_list = List1 + List3\n        return merged_list\n    if(length2 == length3):\n        merged_list = List2 + List3\n        return merged_list\n    if(length1 > length2 and length1 > length3):\n        merged_list = List1 + List2\n        return merged_list\n    if(length2 > length1 and length2 > length3):\n        merged_list = List2 + List3\n        return merged_list\n    if(length3 > length1 and length3 > length2):\n        merged_list = List3 + List2\n        return merged_list\n    \n    \ndef binary_search(List,target,low,high):\n    if(low > high):\n        return False\n    mid = low + (high-low)//2\n    if(target == List[mid]):\n        return True\n    if(target > List[mid]):\n        return binary_search(List,target,mid+1,high)\n    else:\n        return binary_search(List,target,low,mid-1)\n",
        "num_ids": 685
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    n = [num1,num2,num3]\n    ans = []\n    for i in range(len(n)):\n        if i%2==0:\n            ans.append(n[i])\n    return sorted(ans)\n",
        "num_ids": 59
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    m = []\n    n = []\n    o = []\n    heapq.merge(m,num1)\n    heapq.merge(n,num2)\n    heapq.merge(o,num3)\n    if m==n and n==o:\n        return m\n    else:\n        return m+n+o\n",
        "num_ids": 86
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    res=[]\n    while num1 and num2:\n        if num1[0]<num2[0]:\n            res.append(num1.pop(0))\n        elif num2[0]<num1[0]:\n            res.append(num2.pop(0))\n        else:\n            res.append(num2.pop(0))\n            res.append(num1.pop(0))\n    while num1:\n        res.append(num1.pop(0))\n    while num2:\n        res.append(num2.pop(0))\n    return res\ndef count_characters(s):\n    '''\n    Write a function that takes a string and counts the number of each character\n    '''\n    d={}\n    for i in s:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return d\ndef is_anagram(word1,word2):\n    '''\n    Write a function that takes two strings and returns True if the two words are anagrams\n    '''\n    return sorted(word1)==sorted(word2)\ndef fizz_buzz(n):\n    '''\n    Write a function that takes a number n and returns FizzBuzz if n is divisible by 3\n    and Fizz if n is divisible by 5\n    and Buzz if n is divisible by both 3 and 5\n    and returns n otherwise.\n    '''\n    if n%3==0 and n%5==0:\n        return 'FizzBuzz'\n    if n%3==0:\n        return 'Fizz'\n    if n%5==0:\n        return 'Buzz'\n    else:\n        return n\ndef is_palindrome(string):\n    '''\n    Write a function that takes a string and returns True if the string is a palindrome\n    '''\n    return string == string[::-1]\ndef max_product(a,b):\n    '''\n    Write a function that takes two numbers and returns their product with maximum\n    number of digits and without the leading zeroes.\n    '''\n    return int(''.join(str(max(a,b)) for x in [str(a),str(b)] if x))\ndef is_anagram(s1,s2):\n    '''\n    Write a function that takes two strings and returns True if they are anagrams\n    and False otherwise.\n    '''\n    s1,s2=s1.lower(),s2.lower()\n    dic1,dic2={},{}\n    for i in s1:\n        if i in dic1:\n            dic1[i]+=1\n        else:\n            dic1[i]=1\n    for i in s2:\n        if i in dic2:\n            dic2[i]+=1\n        else:\n            dic2[i]=1\n    return dic1==dic2\ndef is_anagram(s1,s2):\n    '''\n    Write a function that takes two strings and returns True if they are anagrams\n    and False otherwise.\n    '''\n    s1,s2=s1.lower(),s2.lower()\n    if len(s1)==len(s2):\n        dic1,dic2={},{}\n        for i in s1:\n            if i in dic1:\n                dic1[i]+=1\n            else:\n                dic1[i]=1\n        for i in s2:\n            if i in dic2:\n                dic2[i]+=1\n            else:\n                dic2[i]=1\n        return dic1==dic2\n    else:\n        return False\ndef count_vowels(s):\n    '''\n    Write a function that takes a string and returns the number of vowels it contains\n    '''\n    return len([x for x in s if x in 'aeiou'])\ndef find_word(l,word):\n    '''\n    Write a function that takes a list of words and a string and returns a list of words\n    that have that string as a prefix.\n    '''\n    res=[]\n    for i in l:\n        if i.startswith(word):\n            res.append(i)\n    return res\ndef increment_string(s):\n    '''\n    Write a function that takes a string representing an integer and returns the\n    string representing the integer plus 1. For example, \"123\" should return \"124\".\n    If the number is negative, return the string \"\".\n    '''\n    if s=='':\n        return '1'\n    if s[0]=='-':\n        return ''\n    if s=='9':\n        return '0'\n    res=[]\n    for i in s:\n        res.append(i)\n    if res[-1]=='9':\n        res[-1]='0'\n        res.append('1')\n    else:\n        res[-1]='1'\n    return ''.join(res)\ndef is_valid(s):\n    '''\n    Write a function that takes a string and returns True if the string is valid\n    '''\n    stack=[]\n    for i in s:\n        if i=='(' or i=='[' or i=='{':\n            stack.append(i)\n        elif i==')' or i==']' or i=='}':\n            if len(stack)==0:\n                return False\n            elif stack.pop()=='(':\n                continue\n            else:\n                return False\n    if len(stack)==0:\n        return True\n    return False\ndef reverse_string(s):\n    '''\n    Write a function that takes a string and returns the reverse of the string.\n    '''\n    return s[::-1]\ndef find_greatest(s,l):\n    '''\n    Write a function that takes a list of strings and returns the string in that list\n    that has the highest number of vowels and returns the number of vowels in that string.\n    '''\n    res,max_vowels=None,0\n    for i in l:\n        vowel_count=0\n        for j in i:\n            if j in 'aeiou':\n                vowel_count+=1\n        if vowel_count>max_vowels:\n            max_vowels=vowel_count\n            res=i\n    return res,max_vowels\ndef find_greatest_2(l):\n    '''\n    Write a function that takes a list of strings and returns the string in that list\n    that has the highest number of vowels and returns the number of vowels in that string.\n    '''\n    res,max_vowels=None,0\n    for i in l:\n        vowel_count=0\n        for j in i:\n            if j in 'aeiou':\n                vowel_count+=1\n        if vowel_count>max_vowels:\n            max_vowels=vowel_count\n            res=i\n    return res,max_vowels\ndef is_valid_paren(s):\n    '''\n    Write a function that takes a string and returns True if the string is valid\n    and returns False otherwise.\n    '''\n    stack=[]\n    for i in s:\n        if i in '([{':\n            stack.append(i)\n        elif i in ')]}':\n            if len(stack)==0:\n                return False\n            elif (stack.pop()=='(' and i==')') or (stack.pop()=='[' and i==']') or (stack.pop()=='{' and i=='}'):\n                continue\n            else:\n                return False\n    if len(stack)==0:\n        return True\n    return False\ndef is_valid_paren_2(s):\n    '''\n    Write a function that takes a string and returns True if the string is valid\n    and returns False otherwise.\n    '''\n    stack=[]\n    for i in s:\n        if i in '([{':\n            stack.append(i)\n        elif i in ')]}':\n            if len(stack)==0:\n                return False\n            elif (stack.pop()=='(' and i==')') or (stack.pop()=='[' and i==']') or (stack.pop(",
        "num_ids": 91
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    merged_list.append(num1)\n    merged_list.append(num2)\n    merged_list.append(num3)\n    merged_list.sort()\n    return merged_list\n",
        "num_ids": 61
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 is None:\n        return num2 if num2 is None else num2\n    if num2 is None:\n        return num1 if num1 is None else num1\n    if num3 is None:\n        return num1 + num2\n    i, j = 0, 0\n    result = []\n    while i < len(num1) and j < len(num2):\n        if num1[i] < num2[j]:\n            result.append(num1[i])\n            i += 1\n        else:\n            result.append(num2[j])\n            j += 1\n    if i == len(num1):\n        result += num2[j:]\n    elif j == len(num2):\n        result += num1[i:]\n    return result\n",
        "num_ids": 185
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    i = 0\n    j = 0\n    k = 0\n    num1_len = len(num1)\n    num2_len = len(num2)\n    num3_len = len(num3)\n    while i < num1_len and j < num2_len and k < num3_len:\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            merged_list.append(num1[i])\n            i+=1\n        elif num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j+=1\n        else:\n            merged_list.append(num3[k])\n            k+=1\n    while i < num1_len:\n        merged_list.append(num1[i])\n        i+=1\n    while j < num2_len:\n        merged_list.append(num2[j])\n        j+=1\n    while k < num3_len:\n        merged_list.append(num3[k])\n        k+=1\n    return merged_list\n",
        "num_ids": 280
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    new_num = []\n    i,j,k = 0,0,0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j]:\n            if num1[i] < num3[k]:\n                new_num.append(num1[i])\n                i+=1\n            else:\n                new_num.append(num3[k])\n                k+=1\n        elif num2[j] < num3[k]:\n            new_num.append(num2[j])\n            j+=1\n        else:\n            new_num.append(num3[k])\n            k+=1\n    if i == len(num1):\n        new_num.extend(num2[j:])\n    elif j == len(num2):\n        new_num.extend(num3[k:])\n    return new_num\n",
        "num_ids": 228
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # print(num1)\n    # print(num2)\n    # print(num3)\n    heapq.heappush(num1,num2)\n    heapq.heappush(num1,num3)\n    # print(num1)\n    # return heapq.merge(num1,num2,num3)\n",
        "num_ids": 85
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return sorted(num1+num2+num3)\n    \ndef merge_sorted_list_2(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return sorted(num1+num2+num3)\n",
        "num_ids": 16
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Base Case\n    if (n == 0):\n        return 1\n",
        "num_ids": 19
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    result = [0]*n\n    for i in range(n):\n        for j in range(len(s)):\n            result[i] += int(s[j])\n        for j in range(len(s)):\n            result[i] += int(s[-(j+1)])\n    return result\n",
        "num_ids": 78
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    N=len(s)\n    count=0\n    for i in range(n):\n        val=''\n        for j in range(N-1,-1,-1):\n            val=val+s[j]\n        if (int(val,2)%2):\n            count=count+1\n        s=val\n    return count\n    \nif __name__=='__main__':\n    s=input(\"Enter the string:\")\n    n=int(input(\"Enter the number of times to rotate:\"))\n    print(odd_Equivalent(s,n))\n    \n    ",
        "num_ids": 140
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if len(s) == 1:\n        return 0\n    else:\n        if len(s) % 2 == 1:\n            if s[0] == '1' and s[len(s)-1] == '0':\n                return 2 * n + odd_Equivalent(s[1:len(s)-1],n)\n            elif s[0] == '0' and s[len(s)-1] == '1':\n                return 2 * n + odd_Equivalent(s[1:len(s)-1],n)\n            else:\n                return odd_Equivalent(s[1:len(s)-1],n)\n        else:\n            if s[0] == '1' and s[len(s)-1] == '0':\n                return 2 * n\n            elif s[0] == '0' and s[len(s)-1] == '1':\n                return 2 * n\n            else:\n                return n\n",
        "num_ids": 226
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #binary=0\n    #for i in s:\n    #    binary+=int(i)\n    #b=list(s)\n    #b.reverse()\n    #count=0\n    #for i in range(len(b)):\n    #    if b[i]==\"1\":\n    #        count+=2**(len(b)-i-1)\n    #return count\n    def convert(s):\n        #s = s.replace(\"1\",\"a\").replace(\"0\",\"b\")\n        s = s.replace(\"0\", \"a\").replace(\"1\", \"b\")\n        return s\n    \n    def convert_back(s):\n        #s = s.replace(\"1\",\"a\").replace(\"0\",\"b\")\n        s = s.replace(\"a\", \"1\").replace(\"b\", \"0\")\n        return s\n    def convert_reverse(s):\n        s = s.replace(\"a\", \"0\").replace(\"b\", \"1\")\n        return s\n    \n    def convert_reverse_back(s):\n        s = s.replace(\"0\", \"a\").replace(\"1\", \"b\")\n        return s\n    \n    def rotate_bit_by_bit(s,n):\n        b = list(s)\n        \n        #for i in range(len(b)):\n        #    if b[i] == \"1\":\n        #        b[i] = \"0\"\n        #    else:\n        #        b[i] = \"1\"\n        \n        b = ''.join(b)\n        \n        #b = ''.join(b)\n        \n        #n = n % len(b)\n        #print(b)\n        #print(n)\n        \n        #b = b[n:] + b[:n]\n        \n        #b = b[n:] + b[:n]\n        \n        b = b[n:] + b[:n]\n        \n        #print(b)\n        \n        return b\n        \n    def rotate_bit_by_bit_back_n(s,n):\n        b = list(s)\n        \n        #for i in range(len(b)):\n        #    if b[i] == \"1\":\n        #        b[i] = \"0\"\n        #    else:\n        #        b[i] = \"1\"\n        \n        b = ''.join(b)\n        \n        #b = ''.join(b)\n        \n        #n = n % len(b)\n        #print(b)\n        #print(n)\n        \n        #b = b[n:] + b[:n]\n        \n        #b = b[n:] + b[:n]\n        \n        b = b[n:] + b[:n]\n        \n        #print(b)\n        \n        return b\n        \n    def flip_bits(s,n):\n        b = list(s)\n        \n        for i in range(n):\n            if b[i] == \"1\":\n                b[i] = \"0\"\n            else:\n                b[i] = \"1\"\n                \n        b = ''.join(b)\n        \n        return b\n    \n    def flip_bits_back_n(s,n):\n        b = list(s)\n        \n        for i in range(n):\n            if b[i] == \"0\":\n                b[i] = \"1\"\n            else:\n                b[i] = \"0\"\n                \n        b = ''.join(b)\n        \n        return b\n    \n    def odd_value(s,n):\n        b = list(s)\n        count=0\n        for i in range(len(b)):\n            if b[i]==\"1\":\n                count+=2**(len(b)-i-1)\n        \n        return count\n    \n    \n    def flip_bits_odd_value(s,n):\n        b = list(s)\n        count=0\n        for i in range(len(b)):\n            if b[i]==\"1\":\n                count+=2**(len(b)-i-1)\n        \n        return count\n    \n    def flip_bits_odd_value_back_n(s,n):\n        b = list(s)\n        count=0\n        for i in range(len(b)):\n            if b[i]==\"1\":\n                count+=2**(len(b)-i-1)\n        \n        return count\n    \n    def odd_Equivalent_back_n(s,n):\n        b = list(s)\n        \n        b = ''.join(b)\n        \n        #n = n % len(b)\n        #print(b)\n        #print(n)\n        \n        b = b[n:] + b[:n]\n        \n        b = ''.join(b)\n        \n        return b\n    \n    \n    if n==0:\n        return \"0\"\n    elif n==1:\n        return convert(s)\n    else:\n        #print(len(s))\n        #print(n)\n        #b = list(s)\n        #print(b)\n        #b = ''.join(b)\n        #print(b)\n        \n        #s = b[n:] + b[:n]\n        #print(s)\n        #s = ''.join(s)\n        #print(s)\n        \n        #return flip_bits_back_n(s,n)\n        \n        #return flip_bits_odd_value_back_n(s,n)\n        \n        #return flip_bits_odd_value(s,n)\n        \n        #return flip_bits_odd_value_back_n(s,n)\n        \n        #return flip_bits(s,n)\n        \n        #return flip_bits_back_n(s,n)\n        \n        #return flip_bits_odd_value(s,n)\n        \n        #return flip_bits_back_n(s,n)\n        \n        #return flip_bits_odd_value(s,n)\n        \n        #return flip_bits(s,n)\n        \n        #return flip_bits_back_n(s,n)\n        \n        #return flip_bits_odd_value(s,n)\n        \n        #return flip_bits(s,n)\n        \n        #return flip_bits(s,n)\n        \n        #return flip_bits(s,n)\n        \n        #return flip_bits(s,n)\n        \n        #return flip_bits_odd_value(s,n)\n        \n        #return flip_bits_odd_value(s,n)\n        \n        #return flip_bits_odd_value(s,n)\n        \n        #return flip_bits(s,n)\n        \n        #return flip_bits(s,n)\n        \n        #return flip_bits(s,n)\n        \n        #return flip_bits(s,n)\n        \n        #return flip_bits(s,n)\n        \n        #return flip_bits(s,n)\n        \n        #return flip_bits(s,n)\n        \n        #return flip_bits(s,n)\n        \n        #return flip_bits(s,n)\n        \n        #return flip_bits(s,n)\n        \n        #return flip_bits(s,n)\n        \n        #return flip_bits(s,n)\n        \n        #return flip_bits(s,n)\n        \n        #return flip_bits(s,n)\n        \n        #return flip_bits(s,n)\n        \n        #return flip_bits(s,n)\n        \n        #return flip_bits(s,n)\n        \n        #return flip_bits(s,n)\n        \n        #return flip_bits(s,n)\n        \n        #return flip_bits(s,n)\n        \n        #return flip_bits(s,n)\n        \n        #return flip_bits(s,n)\n        \n        #return flip_bits(s,n)\n        \n        #return flip_bits(s,n)\n        \n        #return flip_bits(s,n)\n        \n        #return flip_bits(s,n)\n        \n        #return flip_bits(s,n)",
        "num_ids": 2002
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    res=0\n    for i in range(n):\n        s=s[1:]+s[0]\n        res+=s.count('1')\n    return res\n",
        "num_ids": 43
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if len(s)==1:\n        if int(s)%2:\n            return 1\n        else:\n            return 0\n    else:\n        count=0\n        if (int(s[0])%2==1):\n            count+=odd_Equivalent(s[1:],n)\n        if (int(s[-1])%2==1):\n            count+=odd_Equivalent(s[:-1],n)\n        if (int(s[0])%2==1):\n            count+=odd_Equivalent(s[-1]+s[1:],n)\n        if (int(s[-1])%2==1):\n            count+=odd_Equivalent(s[:-1]+s[1:],n)\n        return count\n",
        "num_ids": 183
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    import string\n    c = 0\n    s = s[::-1]\n    for i in range(n):\n        s = s[1:] + s[0]\n        for j in s:\n            if j in string.ascii_lowercase:\n                s = s.replace(j, '0')\n            elif j in string.ascii_uppercase:\n                s = s.replace(j, '1')\n            else:\n                pass\n        if s.count('1') % 2!= 0:\n            c += 1\n    return c\n",
        "num_ids": 137
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if s == '':\n        return 0\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return 0\n    else:\n        return odd_Equivalent(s[1:],n-1) + odd_Equivalent(s[0]+s[2:],n-1) + odd_Equivalent(s[0]+s[1:],n-1)\n    \n    \ndef find_reverse(s,n):\n    '''\n    Write a python function to find the reverse of a string.\n    '''\n    if n == 0:\n        return s\n    else:\n        return find_reverse(s[1:],n-1) + s[0]\n    \ndef count_rotations(s):\n    '''\n    Write a python function to count the number of rotation of a string.\n    '''\n    if s == '':\n        return 0\n    if len(s) == 1:\n        return 0\n    if s[0] == s[1]:\n        return 1 + count_rotations(s[1:])\n    else:\n        return count_rotations(s[1:])\n    \ndef replace_char(s,n,s1):\n    '''\n    Write a python function to replace the first occurence of a character with the character s1.\n    '''\n    if n == len(s):\n        return s\n    if s[n] == s1:\n        return s[:n] + s1 + s[n+1:]\n    else:\n        return replace_char(s,n+1,s1)\n",
        "num_ids": 64
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def mypow(x,n):\n        if n == 0:\n            return 1\n        if n == 1:\n            return x\n        if n%2 == 1:\n            return mypow(x*x,n//2)*x\n        else:\n            return mypow(x*x,n//2)\n",
        "num_ids": 79
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    \n    #list to store common elements\n    common_elements=[]\n    \n    #traverse the list and find common elements\n    for innerlist in nestedlist:\n        for element in innerlist:\n            if element not in common_elements:\n                common_elements.append(element)\n                \n    \n    #return the common_elements list\n    return common_elements\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2011
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return set.intersection(*map(set,nestedlist))\n",
        "num_ids": 18
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return set(reduce(lambda x,y:x if y in x else x+[y], nestedlist,[]))\n",
        "num_ids": 31
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    if isinstance(nestedlist, list):\n        for item in nestedlist:\n            result = result + common_in_nested_lists(item)\n        return result\n    else:\n        return [nestedlist]\n",
        "num_ids": 60
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return list(set.intersection(*map(set, nestedlist)))\n",
        "num_ids": 19
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def common_in_list(nestedlist):\n        list_of_common_elements = []\n        for list in nestedlist:\n            for element in list:\n                if element not in list_of_common_elements:\n                    list_of_common_elements.append(element)\n        return list_of_common_elements\n    result = common_in_list(nestedlist)\n    return result\n",
        "num_ids": 101
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if nestedlist == [[]] or nestedlist == []:\n        return []\n    common = []\n    for i in range(len(nestedlist)):\n        if common == []:\n            common = set(nestedlist[i])\n            continue\n        common = common & set(nestedlist[i])\n    return list(common)\n",
        "num_ids": 82
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    sortedlist = sorted(nestedlist)\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist)):\n            if i == j:\n                continue\n            if sortedlist[i] == sortedlist[j]:\n                sortedlist[j] = None\n    return [x for x in sortedlist if x!= None]\n",
        "num_ids": 92
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in nestedlist[0]:\n        for j in nestedlist[1]:\n            if i == j:\n                common.append(i)\n    return common\n",
        "num_ids": 46
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return int(text)\n    else:\n        return text\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return re.match(r'^\\d+$', text) is not None\n",
        "num_ids": 22
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    text = text.strip()\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n",
        "num_ids": 38
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return all(not (list1[i])) for i in range(len(list1))\n    \ndef count_value(dict1):\n    '''\n    Write a function to count the value of a dictionary.\n    '''\n    return sum(dict1.values())\n",
        "num_ids": 12
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return all(d == {} for d in list1)\n",
        "num_ids": 16
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if len(d) > 0:\n            return False\n    return True\n",
        "num_ids": 28
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for element in list1:\n        if element:\n            return False\n    return True\n    \ndef get_dict_values(dict1):\n    '''\n    Write a function to get all values from a dictionary\n    '''\n    list1 = []\n    for key in dict1:\n        list1.append(dict1[key])\n    return list1\n",
        "num_ids": 33
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    #for i in range(len(list1)):\n    #    print(list1[i])\n    #    if list1[i]!= {}:\n    #        return False\n    #return True\n    for i in list1:\n        if i:\n            return False\n    return True\n    \ndef empty_list(list1):\n    for i in list1:\n        if i:\n            return False\n    return True\n",
        "num_ids": 105
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i.keys())!= 0:\n            return False\n    return True\n",
        "num_ids": 31
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if not nums:\n        return 0\n    res = 0\n    for num in nums:\n        res *= 10\n        res += num\n    return res\n",
        "num_ids": 41
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n",
        "num_ids": 10
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i\n    return sum\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n",
        "num_ids": 10
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num_sum = 0\n    for num in nums:\n        num_sum += num\n    return num_sum\n",
        "num_ids": 30
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num_str = [str(num) for num in nums]\n    num_str.reverse()\n    num_str = int(''.join(num_str))\n    return num_str\n",
        "num_ids": 48
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # naive solution\n    return sum(nums)\n",
        "num_ids": 15
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    res = 0\n    for i in range(len(nums)):\n        res += nums[i] * 10**(len(nums)-1-i)\n    return res\n",
        "num_ids": 46
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                pass\n    return test_list\n",
        "num_ids": 70
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for i, value in enumerate(sublist):\n            if isinstance(value, int) or isinstance(value, float):\n                sublist[i] = float(value)\n    return test_list\n",
        "num_ids": 61
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for item in test_list:\n        try:\n            float_list.append(float(item))\n        except ValueError:\n            float_list.append(0)\n    return float_list\n",
        "num_ids": 56
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = float(test_list[i][j])\n    return test_list\n",
        "num_ids": 59
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [[float(e) for e in l] for l in test_list]\n",
        "num_ids": 22
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n",
        "num_ids": 72
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for idx, elem in enumerate(test_list):\n        if isinstance(elem, list):\n            test_list[idx] = list_to_float(elem)\n        else:\n            try:\n                test_list[idx] = float(elem)\n            except:\n                pass\n    return test_list\n",
        "num_ids": 84
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for item in test_list:\n        if item == None or type(item) == str:\n            new_list.append(None)\n        else:\n            try:\n                new_list.append(float(item))\n            except:\n                new_list.append(None)\n    return new_list\n",
        "num_ids": 82
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(i) if type(i) is not str else i for i in test_list]\n",
        "num_ids": 27
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    def try_convert(elem):\n        try:\n            return float(elem)\n        except ValueError:\n            return elem\n    return [[try_convert(elem) for elem in row] for row in test_list]\n",
        "num_ids": 61
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    \n    return string.split(\" \")\n",
        "num_ids": 13
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return list(string.split(\" \"))\n",
        "num_ids": 13
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    result_list = []\n    sub_list = []\n    string = string.replace(' ', '')\n    for i in string:\n        sub_list.append(i)\n    result_list.append(sub_list)\n    return result_list\n",
        "num_ids": 62
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # use string.split() to split the string\n    # convert the returned string to a list using a list comprehension\n    return [x for x in string.split()]\n",
        "num_ids": 41
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    if string == '':\n        return []\n    return string.split(' ')\n",
        "num_ids": 22
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    l = string.split(' ')\n    return l\n",
        "num_ids": 16
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n",
        "num_ids": 11
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr is None or len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    return search(arr[1:]) if arr[0] == arr[1] else arr[0]\n",
        "num_ids": 62
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    l = len(arr)\n    if l == 1:\n        return arr[0]\n",
        "num_ids": 24
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0]!= arr[1]:\n        return arr[0]\n    if arr[0] == arr[1]:\n        return search(arr[2:])\n",
        "num_ids": 75
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr is None:\n        return -1\n",
        "num_ids": 14
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr == []:\n        return -1\n    if arr[0]!= arr[1]:\n        return arr[0]\n    elif arr[1]!= arr[2]:\n        return arr[1]\n    else:\n        return arr[2]\n",
        "num_ids": 66
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n=len(arr)\n    if n==1:\n        return arr[0]\n    if n==2:\n        return -1\n    low=0\n    high=n-1\n    while low<=high:\n        mid=(low+high)//2\n        if arr[mid]==arr[mid+1] and mid!=n-1:\n            low=mid+1\n        elif arr[mid]==arr[mid-1] and mid!=0:\n            high=mid-1\n        else:\n            return arr[mid]\n    return -1\n",
        "num_ids": 139
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    #write your code here\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 0:\n        return -1\n    else:\n        left = arr[0]\n        right = arr[len(arr)-1]\n        mid = len(arr)/2\n        if arr[mid] == left:\n            return search(arr[mid+1:])\n        elif arr[mid] == right:\n            return search(arr[:mid])\n        elif left < arr[mid] < right:\n            return arr[mid]\n        else:\n            if left < arr[mid]:\n                return search(arr[:mid])\n            else:\n                return search(arr[mid+1:])\n",
        "num_ids": 177
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # return arr[0] if arr.count(arr[0]) == 1 else search(arr[1:])\n",
        "num_ids": 29
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    x = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] == x:\n            x = arr[i]\n        else:\n            return x\n    return -1\n",
        "num_ids": 55
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if i == 0:\n            arr[i] = arr[i]\n        else:\n            if arr[i] == arr[i - 1]:\n                pass\n            else:\n                arr[i] = arr[i]\n",
        "num_ids": 68
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(tuple(i))\n    list3 = sorted(list2, key=lambda x:x[0]*x[1])\n    return list3[-1]\n",
        "num_ids": 61
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            abs_product = abs(list1[i][0] * list1[i][1]) * abs(list1[j][0] * list1[j][1])\n            max_product.append(abs_product)\n    print max(max_product)\n",
        "num_ids": 101
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -1\n    for (x,y) in list1:\n        if (x>y):\n            max_product = max(max_product, x*y)\n        else:\n            max_product = max(max_product, y*x)\n    return max_product\n",
        "num_ids": 72
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in xrange(0,len(list1),2):\n        if list1[i] < 0 and list1[i+1] < 0:\n            max_product = max(max_product, abs(list1[i]*list1[i+1]))\n        elif list1[i] < 0 or list1[i+1] < 0:\n            max_product = max(max_product, abs(list1[i]*list1[i+1]))\n    return max_product\n",
        "num_ids": 131
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) == 1:\n        return (list1[0][0]*list1[0][1], list1[0][0], list1[0][1])\n    max_prod = (-1*(float('inf')), -1, float('inf'))\n    for i in range(0, len(list1)-1):\n        for j in range(i+1, len(list1)):\n            prod = list1[i][0]*list1[i][1]*list1[j][0]*list1[j][1]\n            if abs(prod) > abs(max_prod[0]):\n                max_prod = (prod, list1[i], list1[j])\n    return max_prod\n",
        "num_ids": 186
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = max(abs(list1[0][0] * list1[0][1] * list1[1][0] * list1[1][1]), abs(list1[0][0] * list1[0][1] * list1[2][0] * list1[2][1]), abs(list1[1][0] * list1[1][1] * list1[2][0] * list1[2][1]), abs(list1[0][0] * list1[1][0] * list1[2][0] * list1[2][1]), abs(list1[0][0] * list1[1][1] * list1[2][0] * list1[2][1]), abs(list1[1][0] * list1[1][1] * list1[2][0] * list1[2][1]), abs(list1[0][0] * list1[1][0] * list1[2][1] * list1[2][1]), abs(list1[0][0] * list1[1][1] * list1[2][0] * list1[2][1]), abs(list1[0][1] * list1[1][0] * list1[2][0] * list1[2][1]), abs(list1[0][1] * list1[1][1] * list1[2][0] * list1[2][1]))\n    return max_product\n",
        "num_ids": 347
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    result = []\n    for tup1, tup2 in list1:\n        result.append((tup1 * tup2, tup1, tup2))\n    return max(result)\n",
        "num_ids": 50
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            if list1[i][0]*list1[j][0]<list1[i][1]*list1[j][1]:\n                list1[i],list1[j]=list1[j],list1[i]\n    return list1\n",
        "num_ids": 94
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1_len = len(list1)\n    if list1_len < 2:\n        return\n    # initialize the max_prod and min_prod\n    max_prod = -1\n    min_prod = 1\n    for i in xrange(0, list1_len - 1):\n        for j in xrange(i + 1, list1_len):\n            # print list1[i], list1[j]\n            if max_prod < list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]:\n                max_prod = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if min_prod > list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]:\n                min_prod = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n    return max_prod, min_prod\n",
        "num_ids": 272
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for index1 in range(len(list1)):\n        for index2 in range(len(list1[index1])):\n            if index2 + 1 < len(list1[index1]):\n                #print(list1[index1][index2], list1[index1][index2 + 1])\n                max_product = max(max_product, abs(list1[index1][index2] * list1[index1][index2 + 1]))\n    return max_product\n",
        "num_ids": 124
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for number in range(1, limit):\n        if is_amicable(number) and is_amicable(sum(get_factors(number))):\n            total += number\n    return total\n",
        "num_ids": 53
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_factors(number):\n        total = 1\n        for i in xrange(2, int(number**0.5 + 1)):\n            if number % i == 0:\n                total += i\n                total += int(number / i)\n        return total\n",
        "num_ids": 66
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum(x for x in range(1, limit) if get_sum(x) == x)\n",
        "num_ids": 27
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for x in range(1,limit):\n        s = 0\n        y = int(x)\n        while y!= 0:\n            r = y % 10\n            s = s + r\n            y = y / 10\n        if s == x:\n            amicable_numbers.append(x)\n    return sum(amicable_numbers)\n",
        "num_ids": 94
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = [sum(factor_list(i)) for i in range(1,limit)]\n    return sum([i for i in range(1,limit) if amicable_numbers[i-1]!= i and amicable_numbers[amicable_numbers[i-1]-1] == i])\n",
        "num_ids": 79
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for n in range(1, limit+1):\n        divisor_sum = sum_of_divisors(n)\n        if divisor_sum!= n:\n            divisor_sum = sum_of_divisors(divisor_sum)\n            if n == divisor_sum and n!= divisor_sum:\n                sum += n\n    return sum\n",
        "num_ids": 101
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = [i for i in range(1, limit)]\n    amicable_numbers_sum = sum(amicable_numbers)\n    return amicable_numbers_sum\n",
        "num_ids": 49
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_of_amicable_numbers = 0\n    for i in range(1,limit+1):\n        if is_amicable_number(i):\n            sum_of_amicable_numbers += i\n    return sum_of_amicable_numbers\n",
        "num_ids": 65
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_nums_set = set()\n    for num in range(1, limit):\n        if num == sum(factor_sum(num)):\n            amicable_nums_set.add(num)\n    return sum(amicable_nums_set)\n",
        "num_ids": 66
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    result = 0\n    for number in range(1,limit):\n        if number > 1:\n            amicable_numbers = set()\n            for divisor in range(2,int(math.sqrt(number)) + 1):\n                if number % divisor == 0:\n                    amicable_numbers.add(number/divisor)\n            if sum(amicable_numbers) == number and number!= sum(amicable_numbers):\n                result += number\n    return result\n",
        "num_ids": 119
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n",
        "num_ids": 16
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a_re = abs(a)\n    b_re = abs(b)\n    a_im = a.imag\n    b_im = b.imag\n    res = a_re*b_re + a_im*b_im\n    res /= a_re*a_re + b_re*b_re + a_im*a_im + b_im*b_im\n    return cmath.acos(res)\n",
        "num_ids": 106
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    complex_a = complex(a)\n    complex_b = complex(b)\n    angle = cmath.phase(complex_a * complex_b)\n    if angle < 0:\n        angle = 2 * math.pi + angle\n    return angle\n",
        "num_ids": 61
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # cmath.phase(complex(a,b))\n    #return cmath.phase(complex(a,b))\n    if a ==0 and b == 0:\n        return 0\n    if a == 0:\n        return (cmath.pi*cmath.phase(b)/2)\n    elif b ==0:\n        return (cmath.pi*cmath.phase(a)/2)\n    else:\n        return (cmath.atan(a/b))\n",
        "num_ids": 114
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    r = a*a + b*b\n    theta = cmath.phase(complex(a,b))\n    if theta < 0:\n        theta = 2*cmath.pi + theta\n    return theta\ndef digsub_2_1(num):\n    '''\n    Write a function to get the sum of the digits of a positive integer using recursion.\n    '''\n    if num == 0:\n        return 0\n    else:\n        dig_sum = num%10 + digsub_2_1(num//10)\n        return dig_sum\ndef find_maximum_coin(coins):\n    '''\n    Write a function to return the maximum number of coins from a list of coins.\n    '''\n    if len(coins) == 0:\n        return 0\n    else:\n        return max(coins[0]+find_maximum_coin(coins[2:]),find_maximum_coin(coins[1:]))\ndef check_armstrong(num):\n    '''\n    Write a function to check whether an integer is an armstrong number.\n    '''\n    num_copy = num\n    sum = 0\n    while num_copy > 0:\n        dig = num_copy%10\n        sum += dig**3\n        num_copy //= 10\n    if num == sum:\n        return True\n    else:\n        return False\ndef find_maximum_subarray(A,low,high):\n    '''\n    Write a function to find the maximum sum of a subarray within a one-dimensional array of numbers.\n    '''\n    if low == high:\n        return low,high,A[low]\n    else:\n        mid = (low+high)//2\n        left_low,left_high,left_sum = find_maximum_subarray(A,low,mid)\n        right_low,right_high,right_sum = find_maximum_subarray(A,mid+1,high)\n        cross_low,cross_high,cross_sum = find_maxcrossing_subarray(A,low,mid,high)\n        if left_sum >= right_sum and left_sum >= cross_sum:\n            return left_low,left_high,left_sum\n        elif right_sum >= left_sum and right_sum >= cross_sum:\n            return right_low,right_high,right_sum\n        else:\n            return cross_low,cross_high,cross_sum\ndef find_maxcrossing_subarray(A,low,mid,high):\n    '''\n    Write a function to find the maximum sum of a subarray within a one-dimensional array of numbers.\n    '''\n    left_sum = -float('inf')\n    summ = 0\n    for i in range(mid,low-1,-1):\n        summ += A[i]\n        if summ > left_sum:\n            left_sum = summ\n            left_low = i\n    right_sum = -float('inf')\n    summ = 0\n    for i in range(mid+1,high+1):\n        summ += A[i]\n        if summ > right_sum:\n            right_sum = summ\n            right_high = i\n    return left_low,right_high,(left_sum + right_sum)\ndef find_maximum_product_subarray(A,low,high):\n    '''\n    Write a function to find the maximum sum of a subarray within a one-dimensional array of numbers.\n    '''\n    if low == high:\n        return low,high,A[low]\n    else:\n        mid = (low+high)//2\n        left_low,left_high,left_sum = find_maximum_product_subarray(A,low,mid)\n        right_low,right_high,right_sum = find_maximum_product_subarray(A,mid+1,high)\n        cross_low,cross_high,cross_sum = find_maxcrossing_subarray(A,low,mid,high)\n        if left_sum >= right_sum and left_sum >= cross_sum:\n            return left_low,left_high,left_sum\n        elif right_sum >= left_sum and right_sum >= cross_sum:\n            return right_low,right_high,right_sum\n        else:\n            return cross_low,cross_high,cross_sum\ndef find_maximum_product_subarray(A,low,high):\n    '''\n    Write a function to find the maximum sum of a subarray within a one-dimensional array of numbers.\n    '''\n    if low == high:\n        return low,high,A[low]\n    else:\n        mid = (low+high)//2\n        left_low,left_high,left_sum = find_maximum_product_subarray(A,low,mid)\n        right_low,right_high,right_sum = find_maximum_product_subarray(A,mid+1,high)\n        cross_low,cross_high,cross_sum = find_maxcrossing_subarray(A,low,mid,high)\n        if left_sum >= right_sum and left_sum >= cross_sum:\n            return left_low,left_high,left_sum\n        elif right_sum >= left_sum and right_sum >= cross_sum:\n            return right_low,right_high,right_sum\n        else:\n            return cross_low,cross_high,cross_sum\ndef find_maximum_product_subarray(A,low,high):\n    '''\n    Write a function to find the maximum sum of a subarray within a one-dimensional array of numbers.\n    '''\n    if low == high:\n        return low,high,A[low]\n    else:\n        mid = (low+high)//2\n        left_low,left_high,left_sum = find_maximum_product_subarray(A,low,mid)\n        right_low,right_high,right_sum = find_maximum_product_subarray(A,mid+1,high)\n        cross_low,cross_high,cross_sum = find_maxcrossing_subarray(A,low,mid,high)\n        if left_sum >= right_sum and left_sum >= cross_sum:\n            return left_low,left_high,left_sum\n        elif right_sum >= left_sum and right_sum >= cross_sum:\n            return right_low,right_high,right_sum\n        else:\n            return cross_low,cross_high,cross_sum\ndef check_euler(num):\n    '''\n    Write a function to check whether a positive integer is evenly divisible by the sum of its digits.\n    '''\n    num_copy = num\n    sum = 0\n    while num_copy > 0:\n        dig = num_copy%10\n        sum += dig\n        num_copy //= 10\n    if num % sum == 0:\n        return True\n    else:\n        return False\ndef find_largest_prime_factor(num):\n    '''\n    Write a function to find the largest prime factor of a positive integer.\n    '''\n    if num == 1:\n        return 1\n    elif num < 0:\n        return None\n    else:\n        prime = 2\n        while num > 1:\n            if num%prime == 0:\n                num /= prime\n                return prime\n            elif num < prime:\n                prime = num\n                break\n            else:\n                prime += 1\ndef smallest_multiple(num):\n    '''\n    Write a function to find the smallest positive number that is evenly divisible by all of the numbers from 1 to 20.\n    '''\n    if num == 1:\n        return num\n    else:\n        num_copy = num\n        smallest_num = 1\n        while num_copy > 0:\n            dig = num_copy%10\n            if dig > smallest_num:\n                smallest_num = dig\n            num_copy //= 10\n        return smallest_num*(num//smallest_num)\ndef find_palindrome(num):\n    '''\n    Write a function to check whether a string is a palindrome.\n    '''\n    if len(num) == 1:\n        return True\n    else:\n        if num[0] == num[-1]:\n            return find_palindrome(num[1:-1])\n        else:\n            return False\ndef matrix_multiplication(A,B):\n    '''\n    Write a function to multiply two matrices.\n    '''\n    if len(",
        "num_ids": 6
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if b==0:\n        if a.real>0:\n            return 0\n        else:\n            return cmath.pi\n    if a.imag==0:\n        if a.real>0:\n            return cmath.pi/2\n        else:\n            return 3*cmath.pi/2\n    return cmath.atan(a.imag/a.real)\n",
        "num_ids": 91
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)\n",
        "num_ids": 17
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a + b *1j\n    return cmath.phase(c)\n",
        "num_ids": 22
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)\n",
        "num_ids": 17
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)\ndef calc_abs(a,b):\n    '''\n    Calculates absolute value of a complex number\n    '''\n    return cmath.sqrt(a*a + b*b)\n",
        "num_ids": 19
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    counter = 0\n    max_length = 0\n    for i in xrange(n):\n        if (string[i] == '0'):\n            counter += 1\n        elif (string[i] == '1'):\n            counter -= 1\n        max_length = max(max_length, counter)\n    return max_length\n",
        "num_ids": 89
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) <= 1:\n        return 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(0, len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n    res = float('inf')\n    for i in range(len(string) - 1):\n        if string[i] == '0':\n            res = min(res, count_1 - count_0)\n            count_0 += 1\n            count_1 -= 1\n        else:\n            res = min(res, count_0 - count_1)\n            count_0 -= 1\n            count_1 += 1\n    return res\n",
        "num_ids": 174
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '1':\n            count += 1\n        elif string[i] == '0':\n            count -= 1\n        if count > max_diff:\n            max_diff = count\n    return max_diff\n",
        "num_ids": 81
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    ones = 0\n    zeros = 0\n    max_diff = 0\n    i = 0\n    while i < len(string):\n        while i < len(string) and string[i] == '0':\n            zeros += 1\n            i += 1\n        while i < len(string) and string[i] == '1':\n            ones += 1\n            i += 1\n        max_diff = max(max_diff, abs(zeros - ones))\n        zeros = 0\n        ones = 0\n    return max_diff\n",
        "num_ids": 127
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    dict_of_1s = {}\n    dict_of_zeros = {}\n    for i in range(len(string)):\n        if string[i] == '0':\n            if string[i] not in dict_of_zeros:\n                dict_of_zeros[string[i]] = 1\n            else:\n                dict_of_zeros[string[i]] += 1\n        else:\n            if string[i] not in dict_of_1s:\n                dict_of_1s[string[i]] = 1\n            else:\n                dict_of_1s[string[i]] += 1\n",
        "num_ids": 149
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    ans = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count -= 1\n        ans = max(ans, count)\n    return ans\n",
        "num_ids": 63
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    count = [0,0]\n    res = 0\n    for i in range(n):\n        if string[i]=='0':\n            count[0]+=1\n        else:\n            count[1]+=1\n        if count[0]==count[1]:\n            res = max(res, count[0]*2)\n        elif count[0]>count[1]:\n            res = max(res, count[0]*2-count[1])\n        else:\n            res = max(res, count[1]*2-count[0])\n    return res\n",
        "num_ids": 150
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # if the string is empty, return 0\n    if not string:\n        return 0\n",
        "num_ids": 25
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    m = 0\n    l = 0\n    m_c = 0\n    l_c = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            m_c += 1\n        else:\n            l_c += 1\n        if m_c > l_c:\n            m = m_c\n            l = l_c\n        elif m_c < l_c:\n            m = m_c\n            l = l_c\n        if m > m_c and m < l_c:\n            m = m_c\n            l = l_c\n        if m_c == l_c:\n            m = m_c\n            l = l_c\n        if i+1 == len(string):\n            if m > m_c and m < l_c:\n                m = m_c\n                l = l_c\n            if m == l_c:\n                m = m_c\n                l = l_c\n    return abs(l - m)\n",
        "num_ids": 244
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string)\n    zeros = []\n    ones = []\n    for i in xrange(length):\n        if string[i] == '0':\n            zeros.append(i)\n        elif string[i] == '1':\n            ones.append(i)\n    max_diff = 0\n    for i in xrange(len(zeros)):\n        for j in xrange(i, len(zeros)):\n            if (j - i) > max_diff:\n                max_diff = (j - i)\n    return max_diff\n",
        "num_ids": 138
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum=0\n    for i in range(1,a):\n        if (a%i==0) and (b%i==0):\n            sum+=i\n    return sum\n",
        "num_ids": 45
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Python code to find sum of\n    # all divisors\n    a = abs(a)\n    b = abs(b)\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "num_ids": 93
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    l = []\n    for i in range(1, int(a**0.5) + 1):\n        if a % i == 0:\n            if b % i == 0:\n                l.append(i)\n    return sum(l)\n",
        "num_ids": 60
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    for x in range(1,a+1):\n        if a%x == 0 and b%x == 0:\n            sum += x\n    return sum\n",
        "num_ids": 44
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return sum(gcd(a,b),lcm(a,b))\n",
        "num_ids": 21
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisors = []\n    for divisor in range(1, min(a,b)+1):\n        if a%divisor == 0 and b%divisor == 0:\n            common_divisors.append(divisor)\n    return sum(common_divisors)\n",
        "num_ids": 74
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    lsum=[]\n    for i in range(1,a):\n        if a%i == 0 and b%i == 0:\n            lsum.append(i)\n    return sum(lsum)\n",
        "num_ids": 51
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    s = 0\n    m = min(a,b)\n    for i in range(2,m+1):\n        if a%i == 0 and b%i == 0:\n            s = s + i\n    return s\n",
        "num_ids": 56
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    l = [i for i in range(1,min(a,b)+1) if a%i == b%i == 0]\n    print(l)\n    return sum(l)\n    \n",
        "num_ids": 49
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    #Divisors of a,b\n    divisors = []\n    for div in range(1,a+1):\n        if a%div == 0:\n            divisors.append(div)\n",
        "num_ids": 51
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n    \nprint multiply_int(1, 2)\nprint multiply_int(3, 4)\nprint multiply_int(-1, -2)\nprint multiply_int(-2, 2)\nprint multiply_int(0, 2)\nprint multiply_int(2, 0)\n",
        "num_ids": 71
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if (y == 0):\n        return 0\n    else:\n        return (x + multiply_int(x, y - 1))\n",
        "num_ids": 34
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    str = str.split()\n    new_str = [i for i in str if len(i) > n]\n    return new_str\n",
        "num_ids": 36
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long = []\n    for word in str:\n        if len(word) > n:\n            long.append(word)\n    return long\n",
        "num_ids": 36
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str if len(word) > n]\n",
        "num_ids": 19
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n    \nprint(long_words(6, [\"i\", \"am\", \"a\", \"test\", \"that\", \"is\", \"a\", \"short\", \"and\", \"simple\", \"sentence\"]))\n",
        "num_ids": 88
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    new_list = []\n    for word in str:\n        if len(word) > n:\n            new_list.append(word)\n    return new_list\n",
        "num_ids": 42
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return filter(lambda x: len(x) > n, str)\n",
        "num_ids": 19
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    new_list = []\n    for word in str:\n        if len(word) > n:\n            new_list.append(word)\n    return new_list\n",
        "num_ids": 42
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    if str == '':\n        return []\n    elif len(str) > n:\n        return [str]\n    else:\n        return [str] + long_words(n, str[1:])\n",
        "num_ids": 52
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    for word in str:\n        if len(word) > n:\n            print word\n",
        "num_ids": 23
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    nlist = []\n    for word in str:\n        if len(word) > n:\n            nlist.append(word)\n    return nlist\n",
        "num_ids": 39
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    def square_sum(matrix):\n        s = 0\n        for i in range(len(matrix)):\n            for j in range(len(matrix)):\n                s += matrix[i][j]\n        return s\n    \n    def is_diagonal(matrix):\n        diagonals = [[], []]\n        for i in range(len(matrix)):\n            diagonals[0].append(matrix[i][i])\n            diagonals[1].append(matrix[i][-(i+1)])\n        return square_sum(diagonals[0]) == square_sum(diagonals[1])\n",
        "num_ids": 155
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check the first row\n    if (abs(sum(my_matrix[0]))!= sum(my_matrix[0])):\n        return False\n    # Check the first column\n    if (abs(sum([row[0] for row in my_matrix]))!= sum([row[0] for row in my_matrix])):\n        return False\n    # Check the second row\n    if (abs(sum([row[1] for row in my_matrix]))!= sum([row[1] for row in my_matrix])):\n        return False\n    # Check the second column\n    if (abs(sum([row[2] for row in my_matrix]))!= sum([row[2] for row in my_matrix])):\n        return False\n    # Check the third row\n    if (abs(sum([row[3] for row in my_matrix]))!= sum([row[3] for row in my_matrix])):\n        return False\n    # Check the third column\n    if (abs(sum([row[4] for row in my_matrix]))!= sum([row[4] for row in my_matrix])):\n        return False\n    # Check the first diagonal\n    if (abs(sum([my_matrix[0][0], my_matrix[1][1], my_matrix[2][2]]))!= sum([my_matrix[0][0], my_matrix[1][1], my_matrix[2][2]])):\n        return False\n    # Check the second diagonal\n    if (abs(sum([my_matrix[0][4], my_matrix[1][3], my_matrix[2][2]]))!= sum([my_matrix[0][4], my_matrix[1][3], my_matrix[2][2]])):\n        return False\n    return True\n",
        "num_ids": 450
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    matrix_size = len(my_matrix)\n    if matrix_size == 0:\n        return False\n    if matrix_size == 1:\n        if sum(my_matrix) == 0:\n            return True\n    total = 0\n    for i in range(matrix_size):\n        total += my_matrix[i][i]\n    if total!= 0:\n        return False\n    for i in range(matrix_size):\n        total += my_matrix[i][matrix_size - 1 - i]\n    if total!= 0:\n        return False\n    total = 0\n    for i in range(matrix_size):\n        total += my_matrix[i][matrix_size - 1 - i]\n    if total!= 0:\n        return False\n    return True\n    \ndef test_magic_square_test():\n    print('test magic_square_test...')\n    matrix_a = [[1,2,3,4],\n                [5,6,7,8],\n                [9,10,11,12],\n                [13,14,15,16]]\n    assert magic_square_test(matrix_a) == True\n    matrix_b = [[2,3,4,5],\n                [6,7,8,9],\n                [10,11,12,13],\n                [14,15,16,17]]\n    assert magic_square_test(matrix_b) == False\n    matrix_c = [[1,2,3,4],\n                [5,6,7,8],\n                [9,10,11,12],\n                [13,14,15,16]]\n    assert magic_square_test(matrix_c) == False\n    matrix_d = [[1,2,3,4,5],\n                [6,7,8,9,10],\n                [11,12,13,14,15],\n                [16,17,18,19,20],\n                [21,22,23,24,25]]\n    assert magic_square_test(matrix_d) == True\n    matrix_e = [[1,2,3,4,5,6],\n                [7,8,9,10,11,12],\n                [13,14,15,16,17,18],\n                [19,20,21,22,23,24],\n                [25,26,27,28,29,30],\n                [31,32,33,34,35,36]]\n    assert magic_square_test(matrix_e) == True\n    matrix_f = [[1,2,3,4,5,6,7],\n                [8,9,10,11,12,13,14],\n                [15,16,17,18,19,20,21],\n                [22,23,24,25,26,27,28],\n                [29,30,31,32,33,34,35],\n                [36,37,38,39,40,41,42],\n                [43,44,45,46,47,48,49]]\n    assert magic_square_test(matrix_f) == False\n    matrix_g = [[1,2,3,4,5,6,7,8],\n                [9,10,11,12,13,14,15,16],\n                [17,18,19,20,21,22,23,24],\n                [25,26,27,28,29,30,31,32],\n                [33,34,35,36,37,38,39,40],\n                [41,42,43,44,45,46,47,48],\n                [49,50,51,52,53,54,55,56],\n                [57,58,59,60,61,62,63,64]]\n    assert magic_square_test(matrix_g) == True\n    matrix_h = [[1,2,3,4,5,6,7,8,9],\n                [10,11,12,13,14,15,16,17,18],\n                [19,20,21,22,23,24,25,26,27],\n                [28,29,30,31,32,33,34,35,36],\n                [37,38,39,40,41,42,43,44,45],\n                [46,47,48,49,50,51,52,53,54],\n                [55,56,57,58,59,60,61,62,63],\n                [64,65,66,67,68,69,70,71,72]]\n    assert magic_square_test(matrix_h) == False\n    matrix_i = [[1,2,3,4,5,6,7,8,9,10],\n                [11,12,13,14,15,16,17,18,19,20],\n                [21,22,23,24,25,26,27,28,29,30],\n                [31,32,33,34,35,36,37,38,39,40],\n                [41,42,43,44,45,46,47,48,49,50],\n                [51,52,53,54,55,56,57,58,59,60],\n                [61,62,63,64,65,66,67,68,69,70],\n                [71,72,73,74,75,76,77,78,79,80]]\n    assert magic_square_test(matrix_i) == True\n    matrix_j = [[1,2,3,4,5,6,7,8,9,10,11],\n                [12,13,14,15,16,17,18,19,20,21,22],\n                [23,24,25,26,27,28,29,30,31,32,33],\n                [34,35,36,37,38,39,40,41,42,43,44],\n                [45,46,47,48,49,50,51,52,53,54,55],\n                [56,57,58,59,60,61,62,63,64,65,66],\n                [67,68,69,70,71,72,73,74,75,76,77],\n                [78,79,80,81,82,83,84,85,86,87,88]]\n    assert magic_square_test(matrix_j) == False\n    matrix_k = [[1,2,3,4,5,6,7,8,9,10,11],\n                [12,13,14,15,16,17,18,19,20,21,22],\n                [23,24,25,26,27,28,29,30,31,32,33],\n                [34,35,36,37,38,39,40,41,42,43,44],\n                [45,46,47,48,49,50,51,52,53,54,55],\n                [56,57,58,59,60,61,62,63,64,65,66],\n                [67,68,69,70,71,72,73,74,75,76,77],\n                [78,79,80,81,82,83,84,85,86,87,88,89],\n                [90,91,92,93,94,95,96,97,98,99,100]]\n    assert magic_square_test(matrix_k) == False\n    matrix_l = [[1,2,3,4,5,6,7,8,9,10,11],\n                [12,13,14,15,16,17,18,19,20,21,22],\n                [23,24,25,26,27,28,29,30,31,32,33],\n                [34,35,36,37,38,39,40,41,42,43,44],\n                [45,46,47,48,49,50,51,52,53,54,55],\n                [56,57,58,59,60,61,62,63,64,65,66],\n                [67,68,69,70,71,72,73,74,75,76,77],\n                [78,79,80,81,82,83,84,85,86,87,88,89],\n                [90,91,92,93,94,95,96,97,98,99,100",
        "num_ids": 2016
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    '''\n    A magic square is an n*n matrix, where the sum of each row, column and\n    diagonal is equal to the same number.\n    '''\n    print(\"Calculating if the matrix is magic square...\")\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n",
        "num_ids": 42
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check for rows\n    for row in my_matrix:\n        if sum(row)!= 45:\n            return False\n",
        "num_ids": 32
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    if len(my_matrix) == 1:\n        return True\n",
        "num_ids": 44
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # the magic square must have an even number of elements, and a sum of a\n    # specific number, which is the sum of the diagonal elements\n    # first check if the square is square\n    if len(my_matrix) == len(my_matrix[0]):\n        # then sum the matrix, then compare to the sum of the diagonal\n        # elements\n        total_sum = 0\n        for i in range(len(my_matrix)):\n            total_sum += my_matrix[i][i]\n        if total_sum == sum(my_matrix[i][j] for i in range(len(my_matrix)) for j in range(len(my_matrix)) if i == j):\n            return True\n    else:\n        return False\n",
        "num_ids": 182
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # sum of the rows, columns, and diagonals\n    sum_rows = 0\n    sum_cols = 0\n    sum_diagonals = 0\n",
        "num_ids": 40
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if is_magic_square(my_matrix) == False:\n        print \"NO\"\n    else:\n        print \"YES\"\n",
        "num_ids": 35
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    def matrix_test(test_matrix):\n        total = sum(test_matrix[0])\n        for row in test_matrix:\n            if sum(row)!= total:\n                return False\n        total = sum(test_matrix[0])\n        for column in zip(*test_matrix):\n            if sum(column)!= total:\n                return False\n        return True\n",
        "num_ids": 94
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    \n    nums = list(set(nums))\n    \n    if not nums:\n        return None\n    \n    max_count = 0\n    for i in nums:\n        if nums.count(i) > max_count:\n            max_count = nums.count(i)\n            max_item = i\n    return max_item\n",
        "num_ids": 87
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    counter = {}\n    max_count = 1\n    result = None\n    for num in nums:\n        if num in counter:\n            counter[num] += 1\n            if counter[num] > max_count:\n                max_count = counter[num]\n                result = num\n        else:\n            counter[num] = 1\n    return result\n",
        "num_ids": 100
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    nums = defaultdict(int)\n    for num in nums:\n        nums[num]+=1\n    return nums\n",
        "num_ids": 34
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # return max([nums.count(i) for i in set(nums)])\n    return max([(i, nums.count(i)) for i in set(nums)], key=lambda x:x[1])[0]\n",
        "num_ids": 60
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = 1\n    max_item = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            max_freq += 1\n        else:\n            if max_freq > 1:\n                print max_item, max_freq\n            max_freq = 1\n            max_item = nums[i]\n    print max_item, max_freq\n",
        "num_ids": 115
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    nums = sorted(nums)\n    nums_len = len(nums)\n    for i in range(nums_len-1, 0, -1):\n        if nums[i] == nums[i-1]:\n            nums.pop(i)\n    return nums[0]\n    \ndef permutations(nums):\n    '''\n    Write a function to compute all permutations of a given string.\n    '''\n    if len(nums) == 1:\n        return [nums]\n    result = []\n    for i in range(len(nums)):\n        for perm in permutations(nums[:i]+nums[i+1:]):\n            result.append([nums[i]]+perm)\n    return result\n",
        "num_ids": 78
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if len(nums)==1:\n        return nums[0]\n    max_val=1\n    for i in range(len(nums)-1):\n        if nums[i]==nums[i+1]:\n            max_val+=1\n    return nums[max_val-1]\n",
        "num_ids": 77
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # nums = [1,2,2,3,4,4]\n    # dict = {1:2, 2:2, 3:1, 4:2}\n    dict = defaultdict(int)\n    for num in nums:\n        dict[num] += 1\n    return max(dict, key=dict.get)\n",
        "num_ids": 81
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n",
        "num_ids": 33
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for n in nums:\n        d[n] += 1\n    return d[max(d, key = d.get)]\n",
        "num_ids": 42
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # for i in range(len(str1)):\n    #     if str1[i] in 'aeiouAEIOU':\n    #         str1 = str1[:i]+str1[i+1:]+str1[i]\n    # return str1\n    vowels = 'aeiouAEIOU'\n    str2 = list(str1)\n    for i in range(len(str2)):\n        if str2[i] in vowels:\n            str2[i] = str2[i][::-1]\n    return ''.join(str2)\n    \n    # alternate\n    # vowels = 'aeiouAEIOU'\n    # str2 = list(str1)\n    # for i in range(len(str2)):\n    #     if str2[i] in vowels:\n    #         str2[i] = str2[i][::-1]\n    # return ''.join(str2)\n",
        "num_ids": 232
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    str1 = list(str1)\n    i,j = 0,len(str1)-1\n    while i<j:\n        if str1[i].lower() not in vowels:\n            i += 1\n        elif str1[j].lower() not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return ''.join(str1)\n",
        "num_ids": 148
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(\"aeiou\")\n    str1 = [i for i in str1]\n    \n    l = 0\n    h = len(str1) - 1\n    \n    while l <= h:\n        if str1[l] not in vowels:\n            l += 1\n        elif str1[h] not in vowels:\n            h -= 1\n        else:\n            str1[l], str1[h] = str1[h], str1[l]\n            l += 1\n            h -= 1\n    \n    return \"\".join(str1)\n",
        "num_ids": 140
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    # return \"\".join(x for x in str1 if x in vowels)\n    return \"\".join(vowels.symmetric_difference(set(str1)))\n",
        "num_ids": 60
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = {'a':0,'e':1,'i':2,'o':3,'u':4,'y':5}\n    str1 = list(str1)\n    l,r = 0,len(str1)-1\n    while l<r:\n        if not str1[l].lower() in vowels:\n            l+=1\n        elif not str1[r].lower() in vowels:\n            r-=1\n        else:\n            str1[l],str1[r] = str1[r],str1[l]\n            l+=1\n            r-=1\n    return \"\".join(str1)\n",
        "num_ids": 155
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    return ''.join(vowels if c in vowels else c for c in str1)\n    # use set to remove duplicate vowels\n    # use nested for loop to look at each character\n    # if character is a vowel, swap with character, otherwise keep the same character\n",
        "num_ids": 80
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    l = list(str1)\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    l_vowels = []\n    for i in l:\n        if i in vowels:\n            l_vowels.append(i)\n    l_vowels.reverse()\n    l_new = []\n    for i in l:\n        if i in vowels:\n            l_new.append(l_vowels.pop())\n        else:\n            l_new.append(i)\n    return ''.join(l_new)\n",
        "num_ids": 141
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1 = list(str1)\n    list1 = []\n    for i in range(len(str1)):\n        if str1[i] == 'a' or str1[i] == 'e' or str1[i] == 'i' or str1[i] == 'o' or str1[i] == 'u' or str1[i] == 'A' or str1[i] == 'E' or str1[i] == 'I' or str1[i] == 'O' or str1[i] == 'U':\n            list1.append(str1[len(str1)-1-i])\n        else:\n            list1.append(str1[i])\n    list2 = ''.join(list1)\n    return list2\n",
        "num_ids": 185
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    string = list(str1)\n    length = len(str1)\n    i = 0\n    j = length-1\n    while i < j:\n        if string[i].lower() not in vowels and string[j].lower() not in vowels:\n            i = i + 1\n            j = j - 1\n        elif string[i].lower() in vowels and string[j].lower() not in vowels:\n            temp = string[i]\n            string[i] = string[j]\n            string[j] = temp\n            i = i + 1\n            j = j - 1\n        elif string[i].lower() not in vowels and string[j].lower() in vowels:\n            temp = string[i]\n            string[i] = string[j]\n            string[j] = temp\n            i = i + 1\n            j = j - 1\n        elif string[i].lower() in vowels and string[j].lower() in vowels:\n            i = i + 1\n            j = j - 1\n    str1 = ''.join(string)\n    return str1\n",
        "num_ids": 291
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowel_str1 = [char for char in str1]\n    vowel_str1.reverse()\n    new_str = ''.join(vowel_str1)\n    return new_str\n",
        "num_ids": 53
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "num_ids": 11
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    res = ''.join(tup1)\n    return res\n",
        "num_ids": 18
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "num_ids": 11
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for elem in tup1:\n        s = s + elem\n    return s\n",
        "num_ids": 29
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    if isinstance(tup1, tuple):\n        if len(tup1) == 1:\n            return str(tup1[0])\n        elif len(tup1) == 2:\n            return str(tup1[0])+' '+str(tup1[1])\n        else:\n            return str(tup1)\n    else:\n        return str(tup1)\n",
        "num_ids": 99
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in range(len(tup1)-1):\n        s = s + tup1[i] + ', '\n    s = s + tup1[-1]\n    return s\n",
        "num_ids": 54
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    #tup_string(('a','b','c')) -> 'a,b,c'\n    string = ''\n    for elem in tup1:\n        string += elem\n    return string\n",
        "num_ids": 51
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_str = \"\"\n    for i in range(len(tup1)):\n        if i == len(tup1)-1:\n            tup_str = tup_str + tup1[i]\n        else:\n            tup_str = tup_str + tup1[i] +''\n    return tup_str\n",
        "num_ids": 86
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ','.join(str(i) for i in tup1)\n",
        "num_ids": 21
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "num_ids": 11
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for i in nums:\n        if i < 0:\n            total += i\n    return total\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for x in nums:\n        if x < 0:\n            total = total + x\n    return total\n    ",
        "num_ids": 34
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum = sum + i\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    s = 0\n    for num in nums:\n        if num < 0:\n            s += num\n    return s\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(n for n in nums if n < 0)\n",
        "num_ids": 18
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_nums_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_nums_sum += num\n",
        "num_ids": 37
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    count = 0\n    for num in nums:\n        if num < 0:\n            count += num\n    return count\n    \ndef sum_positivenum(nums):\n    '''\n    Write a function to calculate the sum of the positive numbers of a given list of numbers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += num\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([x for x in nums if x < 0])\n",
        "num_ids": 18
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) / 2\n",
        "num_ids": 17
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    \n    result = 0\n    i = 1\n    while result < n:\n        i += 1\n        result = i * (2 * i - 1) / 2\n    return result\n    \n    \nprint hexagonal_num(8)\nprint hexagonal_num(20)\n",
        "num_ids": 67
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n*(2*n-1))\n",
        "num_ids": 16
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # return (n**2 + n) // 2\n    return n*(2*n - 1)\n",
        "num_ids": 27
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 1:\n        return hexagonal_num(n - 1) ** 2 + 1\n    else:\n        return (hexagonal_num(n - 1) ** 2 + 2 * hexagonal_num(n - 1)) / 2\n",
        "num_ids": 72
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n",
        "num_ids": 14
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "num_ids": 14
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return n * (2 * n - 1)\n",
        "num_ids": 41
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return ((n * (n + 1))/2)\n",
        "num_ids": 31
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "num_ids": 14
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return float(zeroes/non_zeroes)\ndef sum_average(nums):\n    '''\n    Write a function that returns the sum of the elements of an array\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n    return sum\ndef max_average(nums):\n    '''\n    Write a function that returns the maximum average of the elements of an array of numbers.\n    '''\n    max_average = 0\n    for i in range(len(nums)):\n        average = sum_average(nums[i:])\n        if average > max_average:\n            max_average = average\n    return max_average\ndef odd_average(nums):\n    '''\n    Write a function that returns the average of the odd numbers in an array of numbers.\n    '''\n    average = 0\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            average += nums[i]\n    average = average/len(nums)\n    return average\ndef count_unique(nums):\n    '''\n    Write a function that returns the number of unique elements in an array of distinct integers.\n    '''\n    unique = []\n    for i in range(len(nums)):\n        if nums[i] not in unique:\n            unique.append(nums[i])\n    return len(unique)\ndef unique_sort(nums):\n    '''\n    Write a function that returns a sorted array of the unique elements in an array of integers.\n    '''\n    unique = []\n    for i in range(len(nums)):\n        if nums[i] not in unique:\n            unique.append(nums[i])\n    unique.sort()\n    return unique\ndef number_count(nums):\n    '''\n    Write a function that returns the number of equal integers in an array of numbers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if nums[i] == nums[j] and i!= j:\n                count += 1\n    return count\ndef swap_sort(nums):\n    '''\n    Write a function that swaps the elements of an array, in place, such that the relative order of the elements is maintained.\n    '''\n    for i in range(len(nums)):\n        if nums[i] > nums[i+1]:\n            temp = nums[i]\n            nums[i] = nums[i+1]\n            nums[i+1] = temp\ndef bubble_sort(nums):\n    '''\n    Write a function that bubbles the smaller elements of an array, in place, to the left of the equal elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums)-1, i, -1):\n            if nums[j] < nums[j-1]:\n                temp = nums[j]\n                nums[j] = nums[j-1]\n                nums[j-1] = temp\ndef quick_sort(nums):\n    '''\n    Write a function that implements quick sort, which is similar to selection sort, but partitions an array in-place.\n    '''\n    if len(nums) == 1:\n        return nums\n    else:\n        pivot = nums[0]\n        left = []\n        right = []\n        for i in range(1, len(nums)):\n            if nums[i] < pivot:\n                left.append(nums[i])\n            elif nums[i] > pivot:\n                right.append(nums[i])\n            else:\n                continue\n        return quick_sort(left) + [pivot] + quick_sort(right)\ndef selection_sort(nums):\n    '''\n    Write a function that implements selection sort, which is similar to bubble sort, but swaps the elements of the array in place.\n    '''\n    for i in range(len(nums)):\n        min_index = i\n        for j in range(i+1, len(nums)):\n            if nums[j] < nums[min_index]:\n                min_index = j\n        temp = nums[i]\n        nums[i] = nums[min_index]\n        nums[min_index] = temp\ndef merge_sort(nums):\n    '''\n    Write a function that implements merge sort, which is similar to insertion sort, but merges two arrays in-place.\n    '''\n    if len(nums) > 1:\n        mid = len(nums)//2\n        left = nums[:mid]\n        right = nums[mid:]\n        merge_sort(left)\n        merge_sort(right)\n        merge(nums, left, right)\ndef merge(nums, left, right):\n    '''\n    Merges two sorted arrays in-place.\n    '''\n    k = 0\n    l = 0\n    r = 0\n    while k < len(left) and l < len(right):\n        if left[k] <= right[l]:\n            nums[r] = left[k]\n            k += 1\n        else:\n            nums[r] = right[l]\n            l += 1\n        r += 1\n    while l < len(right):\n        nums[r] = right[l]\n        l += 1\n        r += 1\n    while k < len(left):\n        nums[r] = left[k]\n        k += 1\n        r += 1\ndef insertion_sort(nums):\n    '''\n    Write a function that implements insertion sort, which is similar to selection sort, but inserts elements into an array in-place.\n    '''\n    for i in range(1, len(nums)):\n        current = nums[i]\n        j = i - 1\n        while j >= 0 and nums[j] > current:\n            nums[j+1] = nums[j]\n            j -= 1\n        nums[j+1] = current\ndef binary_search(nums, target):\n    '''\n    Write a function that implements binary search, which is similar to linear search, but uses a search space that is half the size of the array each time.\n    '''\n    if len(nums) == 0:\n        return -1\n    else:\n        mid = len(nums)//2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < target:\n            return binary_search(nums[mid+1:], target)\n        else:\n            return binary_search(nums[:mid], target)\ndef power_set(nums):\n    '''\n    Write a function that returns the power set of an array.\n    '''\n    power = [[]]\n    for i in range(len(nums)):\n        for j in range(len(power)):\n            power.append(power[j] + [nums[i]])\n    return power\ndef find_set(nums):\n    '''\n    Write a function that returns the element of an array that corresponds to a set of the same elements.\n    '''\n    for i in range(len(nums)):\n        if len(nums)!= len(power_set(nums)[i]):\n            return nums[i]\ndef find_max_recur(nums):\n    '''\n    Write a function that returns the maximum element of an array recursively.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        return max(nums[0], find_max_recur(nums[1:]))\ndef find_max_loop(nums):\n    '''\n    Write a function that returns the maximum element of an array recursively.\n    '''\n    max_element = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > max_element:\n        ",
        "num_ids": 42
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count/len(nums)\n",
        "num_ids": 37
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n = len(nums)\n    zeros = 0\n    nonzeros = 0\n    for i in range(n):\n        if nums[i] == 0:\n            zeros += 1\n        else:\n            nonzeros += 1\n    return zeros/float(nonzeros)\n",
        "num_ids": 73
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for i in nums:\n        if i == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return float(zeroes)/non_zeroes\n",
        "num_ids": 61
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero_count = 0\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return zero_count/non_zero_count\n",
        "num_ids": 65
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count / len(nums)\ndef prefix_sums(nums):\n    '''\n    Calculate all prefix sums of nums.\n    '''\n    pre_sum = [0] * len(nums)\n    for i in range(len(nums)):\n        pre_sum[i] = pre_sum[i-1] + nums[i]\n    return pre_sum\ndef kadane(nums):\n    '''\n    Implement kadane's algorithm for maximum subarray sum.\n    '''\n    max_sum = nums[0]\n    max_sum_ending = nums[0]\n    for i in range(1, len(nums)):\n        max_sum_ending = max(max_sum_ending + nums[i], nums[i])\n        max_sum = max(max_sum, max_sum_ending)\n    return max_sum\ndef max_sub_array(nums):\n    '''\n    Implement Kadane's algorithm for maximum subarray sum.\n    '''\n    max_sum = nums[0]\n    max_sum_ending = nums[0]\n    for i in range(1, len(nums)):\n        max_sum_ending = max(max_sum_ending + nums[i], nums[i])\n        max_sum = max(max_sum_ending, max_sum)\n    return max_sum\ndef longest_increase_subsequence(nums):\n    '''\n    Write a function to find the longest increasing subsequence of an array of integers.\n    '''\n    longest_seq = [1] * len(nums)\n    for i in range(1, len(nums)):\n        for j in range(0, i):\n            if nums[i] > nums[j]:\n                longest_seq[i] = max(longest_seq[i], longest_seq[j] + 1)\n    return max(longest_seq)\ndef min_sub_array(nums):\n    '''\n    Write a function that takes in an array of positive integers and returns the\n    minimum sum of any contiguous subarray of the array.\n    '''\n    min_sum = nums[0]\n    min_sum_ending = nums[0]\n    for i in range(1, len(nums)):\n        min_sum_ending = min(min_sum_ending + nums[i], nums[i])\n        min_sum = min(min_sum_ending, min_sum)\n    return min_sum\ndef find_first_duplicate(nums):\n    '''\n    Given an array of integers, find the index of the first integer that appears twice.\n    If no integer appears twice, return -1.\n    '''\n    for i in range(len(nums)):\n        if nums[abs(nums[i])] < 0:\n            return i\n        else:\n            nums[abs(nums[i])] = -1 * nums[abs(nums[i])]\n    return -1\ndef three_sum_closest(nums, target):\n    '''\n    Write a function that takes in an array of distinct integers and a target integer.\n    The function should return the sum of the three integers closest to the target.\n    '''\n    nums.sort()\n    closest = nums[0] + nums[1] + nums[2]\n    for i in range(len(nums)):\n        j = i + 1\n        k = len(nums) - 1\n        while j < k:\n            total = nums[i] + nums[j] + nums[k]\n            if abs(total - target) < abs(closest - target):\n                closest = total\n            if total < target:\n                j += 1\n            elif total > target:\n                k -= 1\n            else:\n                return target\n    return closest\ndef find_missing_number(nums):\n    '''\n    Write a function that takes in an array of distinct integers and returns the\n    missing integer.\n    '''\n    nums.sort()\n    for i in range(len(nums)):\n        if i!= nums[i]:\n            return i\n    return len(nums)\ndef linear_search(nums, target):\n    '''\n    A linear search algorithm for finding target in nums.\n    '''\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return i\n    return -1\ndef two_sum(nums, target):\n    '''\n    A linear search algorithm that returns the indices of the two numbers that sum to\n    target.\n    '''\n    for i in range(len(nums)):\n        j = i + 1\n        while j < len(nums):\n            if nums[i] + nums[j] == target:\n                return [i, j]\n            j += 1\n    return [-1, -1]\ndef find_number_smaller_than(nums, target):\n    '''\n    Write a function that takes in an array of integers and returns the number\n    of elements of the array that are smaller than the given integer target.\n    '''\n    count = 0\n    for i in nums:\n        if i < target:\n            count += 1\n    return count\ndef count_vowels(string):\n    '''\n    Write a function that takes in a string of characters and returns the number\n    of vowels (a, e, i, o, u) in the string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in string:\n        if i in vowels:\n            count += 1\n    return count\ndef insert_vowels(string, insert):\n    '''\n    Write a function that takes in a string of characters and inserts the given\n    string of characters at the start of the string. The new characters should be\n    inserted without changing the order of the existing characters.\n    '''\n    string = string + insert\n    return string\ndef insert_vowels2(string, insert):\n    '''\n    Write a function that takes in a string of characters and inserts the given\n    string of characters at the start of the string. The new characters should be\n    inserted without changing the order of the existing characters.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_string = []\n    for i in string:\n        if i in vowels:\n            new_string.append(insert)\n        new_string.append(i)\n    return ''.join(new_string)\ndef find_string_anagrams(string):\n    '''\n    Write a function that takes in a string and returns a list of all the anagrams\n    of the string.\n    '''\n    anagrams = []\n    for i in range(len(string)):\n        j = i + 1\n        while j < len(string):\n            if sorted(string[i:j+1]) == sorted(string[j:len(string)]):\n                anagrams.append(string[i:j+1])\n            j += 1\n    return anagrams\ndef find_string_anagrams2(string):\n    '''\n    Write a function that takes in a string and returns a list of all the anagrams\n    of the string.\n    '''\n    anagrams = []\n    for i in range(len(string)):\n        j = i + 1\n        while j < len(string):\n            if sorted(string[i:j+1]) == sorted(string[j:len(string)]):\n                anagrams.append(string[i:j+1])\n            j += 1\n    return anagrams\ndef find_string_anagrams3(string):\n    '''\n    Write a function that takes in a string and returns a list of all the anagrams\n    of the string.\n    '''\n    anagrams = []\n    for i in range(len(string)):\n        j = i + 1\n        while j < len(string):\n            if sorted(string[i:j+1]) == sorted(string[j:len(string)",
        "num_ids": 60
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return zeroes/non_zeroes\n",
        "num_ids": 60
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count / float(len(nums))\n",
        "num_ids": 39
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    i=0\n    while 2**i < n:\n        if n%(2**i)==0:\n            return True\n        i+=1\n    return False\n",
        "num_ids": 42
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    s=str(n)\n    for i in range(len(s)):\n        if int(s[i])!=0:\n            if int(s[i])%2!=0:\n                return False\n            else:\n                return True\n    return False\n    \n    \ndef find_Palindrome(n):\n    '''\n    Write a python function to find the palindrome in the given number.\n    '''\n    s=str(n)\n    for i in range(len(s)//2):\n        if s[i]!=s[-i-1]:\n            return False\n    return True\n    \n",
        "num_ids": 50
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 2: return False\n    while n > 1:\n        if n%2 == 1: return False\n        n //= 2\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # If n is of the form 2^k where k is a positive integer, then n can be written as Sum_of_Powers_of_Two.\n    # Note that if n is an integer then it is a Sum_of_Powers_of_Two. \n    if n < 1: return False\n    if n == 1: return True\n    if n % 2 == 1: return False\n    k = 1\n    while n/2**k > 0:\n        k += 1\n    return n == 2**k\n",
        "num_ids": 122
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def count_bits(n):\n        return str(bin(n)).count('1')\n    if count_bits(n)<=1:\n        return True\n    else:\n        return False\n",
        "num_ids": 49
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    bin_rep = bin(n)[2:]\n    powers_of_two = [2**x for x in range(len(bin_rep)) if int(bin_rep[x])==1]\n    return all([x in powers_of_two for x in powers_of_two])\n",
        "num_ids": 70
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n    return count == 1\n",
        "num_ids": 41
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    s = str(n)\n    for i in s:\n        if i not in ['0','1']:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 0: \n        return False\n    while n!= 0: \n        if n % 2!= 0: \n            return False\n        n = n/2\n    return True\n    \ndef is_Sum_Of_Power_of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of powers of 2 or not.\n    '''\n    if n == 0: \n        return True\n    while n!= 1: \n        if n % 2 == 0: \n            n = n/2\n        else: \n            return False\n    return True\n    \ndef is_Power_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as power of 2 or not.\n    '''\n    if n == 0: \n        return False\n    while n!= 1: \n        if n % 2!= 0: \n            return False\n        n = n/2\n    return True\n    \ndef is_Power_Of_Two_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as power of 2 or not.\n    '''\n    if n == 1: \n        return True\n    elif n == 0: \n        return False\n    else: \n        if n % 2!= 0: \n            return False\n        return is_Power_Of_Two(n/2)\n    \ndef is_Power_Of_Two_3(n): \n    '''\n    Write a python function to check whether the given number can be represented as power of 2 or not.\n    '''\n    if n == 1: \n        return True\n    elif n == 0: \n        return False\n    else: \n        return is_Power_Of_Two_2(n/2)\n",
        "num_ids": 49
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    from itertools import chain, combinations\n    l = list(chain.from_iterable(combinations(range(len(str(n))), r) for r in range(1, len(str(n)) + 1)))\n    sum_of_powers_of_two = [0]\n    for k in range(len(l)):\n        if (n - sum_of_powers_of_two[k]) % 2 == 0:\n            return True\n        else:\n            sum_of_powers_of_two.append(sum_of_powers_of_two[k] + int(l[k][0]) ** 2)\n    return False\n",
        "num_ids": 155
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    \n    from math import pi\n    return 2 * pi * r\n",
        "num_ids": 18
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return r*2*math.pi\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    #return 2 * math.pi * r\n    return pi * r * 2\n",
        "num_ids": 21
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n",
        "num_ids": 16
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return pi * 2 * r\n",
        "num_ids": 16
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    \n    return 2*pi*r\n",
        "num_ids": 12
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    def extract(node):\n        if len(node) == 0:\n            return\n        elif isinstance(node[0], list):\n            for i in node:\n                extract(i)\n        else:\n            test_list.append(node)\n    test_list = []\n    extract(test_list)\n    return test_list\n",
        "num_ids": 85
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    import itertools\n    return list(itertools.chain.from_iterable(test_list))\n",
        "num_ids": 28
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n",
        "num_ids": 20
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [num for sublist in test_list for num in sublist]\n    return flattened_list\n",
        "num_ids": 31
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [x for sublist in test_list for x in sublist]\n",
        "num_ids": 20
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    return set([el for sublist in test_list for el in sublist])\n",
        "num_ids": 23
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for x in test_list:\n        result.extend(x)\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [x for i in test_list for x in i]\n",
        "num_ids": 18
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for i in test_list:\n        if isinstance(i, list):\n            for j in i:\n                result.append(j)\n        else:\n            result.append(i)\n    return result\n",
        "num_ids": 57
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for i in test_list:\n        result += i\n    return result\n",
        "num_ids": 25
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Time O(nlgn)\n    # Space O(1)\n",
        "num_ids": 19
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    curr_big = len(nums)\n    while curr_big > 1:\n        idx = 0\n        while idx < curr_big:\n            if nums[idx] > nums[idx + curr_big - 1]:\n                nums[idx], nums[idx + curr_big - 1] = nums[idx + curr_big - 1], nums[idx]\n                if idx!= 0:\n                    nums[:idx + 1] = reversed(nums[:idx + 1])\n            idx += 1\n        curr_big -= 1\n    return nums\n",
        "num_ids": 156
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1):\n        j = i\n        while j >= 0:\n            if nums[j] >= nums[j+1]:\n                break\n            nums[j], nums[j+1] = nums[j+1], nums[j]\n            j -= 1\n        print(nums)\n        if j!= 0:\n            nums[:j+1] = nums[:j+1][::-1]\n            print(nums)\n    return nums\n",
        "num_ids": 129
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums), 1, -1):\n        # print(nums[:i])\n        for j in range(1, i):\n            if nums[j-1] > nums[j]:\n                nums[j-1], nums[j] = nums[j], nums[j-1]\n            if j == 1:\n                nums[:i] = sorted(nums[:i])\n    return nums\n",
        "num_ids": 113
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return\n    N = len(nums)\n    for i in range(N, 1, -1):\n        # check for largest and swap\n        for j in range(N-i+1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n",
        "num_ids": 99
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    print nums\n    for n in xrange(len(nums)/2):\n        j = n + 1\n        while j < len(nums) and nums[j] < nums[j-1]:\n            j += 1\n        if j!= len(nums):\n            nums = swap(nums, j, len(nums)-1)\n            nums = nums[:len(nums)-n] + nums[len(nums)-n:][::-1]\n    print nums\n",
        "num_ids": 125
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    N = len(nums)\n    max_idx = nums[N-1]\n    count = 0\n    while N > 1:\n        max_idx_idx = 0\n        max_idx_val = nums[0]\n        for i in range(N):\n            if max_idx_val < nums[i]:\n                max_idx_val = nums[i]\n                max_idx_idx = i\n        count += max_idx_idx + 1\n        if max_idx_idx!= 0:\n            nums[0], nums[max_idx_idx] = nums[max_idx_idx], nums[0]\n        if N % 2 == 0:\n            nums[N-1], nums[N-2] = nums[N-2], nums[N-1]\n        N -= 1\n    print(count)\n",
        "num_ids": 224
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    nums = nums[::-1]\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            nums = swap_list(nums, i, i+1)\n    return nums\n",
        "num_ids": 59
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in xrange(n):\n        k = min(n-i, nums[i])\n        if nums[i]!= 0 and k!= 1:\n            nums[i], nums[k-1] = nums[k-1], nums[i]\n            nums[:k] = nums[:k-1:-1]\n    return nums\n",
        "num_ids": 104
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 0 or len(nums) == 1:\n        return nums\n",
        "num_ids": 26
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    num=0\n    for i in xrange(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            num+=1\n    return num\n",
        "num_ids": 56
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)!=len(list2) or len(list2)!=len(list3):\n        return None\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            count+=1\n    return count\n",
        "num_ids": 79
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            count+=1\n    return count\ndef max_different(list1,list2,list3):\n    '''\n    Write a function to find the maximum number of different items between two lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]!=list2[i]:\n            count+=1\n    return count\ndef reverse_string(string):\n    '''\n    Write a function to reverse a string\n    '''\n    return string[::-1]\ndef remove_string(string,char):\n    '''\n    Write a function to remove a character from a string\n    '''\n    return string.replace(char,'')\ndef add_string(string,char):\n    '''\n    Write a function to add a character to a string\n    '''\n    return string+char\ndef remove_duplicates(list1):\n    '''\n    Write a function to remove duplicates in a list\n    '''\n    return set(list1)\ndef split_string(string,delimiter):\n    '''\n    Write a function to split a string by delimiter\n    '''\n    return string.split(delimiter)\ndef multiply_string(string,num):\n    '''\n    Write a function to multiply a string by a number\n    '''\n    return string*num\ndef capitalize_string(string):\n    '''\n    Write a function to capitalize the first letter of a string\n    '''\n    return string.capitalize()\ndef add_in_place(list1,list2):\n    '''\n    Write a function to add items in a list in place\n    '''\n    for i in range(len(list1)):\n        list1[i]+=list2[i]\n    return list1\ndef join_string(list1,delimiter):\n    '''\n    Write a function to join a list items by delimiter\n    '''\n    return delimiter.join(list1)\ndef find_max_index(list1):\n    '''\n    Write a function to find the max index of a list\n    '''\n    max_index=list1[0]\n    for i in range(len(list1)):\n        if list1[i]>max_index:\n            max_index=list1[i]\n    return max_index\ndef find_min_index(list1):\n    '''\n    Write a function to find the min index of a list\n    '''\n    min_index=list1[0]\n    for i in range(len(list1)):\n        if list1[i]<min_index:\n            min_index=list1[i]\n    return min_index\ndef find_max_value(list1):\n    '''\n    Write a function to find the max value of a list\n    '''\n    max_value=list1[0]\n    for i in range(len(list1)):\n        if list1[i]>max_value:\n            max_value=list1[i]\n    return max_value\ndef find_min_value(list1):\n    '''\n    Write a function to find the min value of a list\n    '''\n    min_value=list1[0]\n    for i in range(len(list1)):\n        if list1[i]<min_value:\n            min_value=list1[i]\n    return min_value\ndef sort_list(list1):\n    '''\n    Write a function to sort a list in ascending order\n    '''\n    return sorted(list1)\ndef count_letters(string):\n    '''\n    Write a function to count the number of letters in a string\n    '''\n    count=0\n    for i in range(len(string)):\n        if string[i].isalpha():\n            count+=1\n    return count\ndef find_str_index(string,search):\n    '''\n    Write a function to find the index of the first occurrence of a substring in a string\n    '''\n    return string.find(search)\ndef reverse_list(list1):\n    '''\n    Write a function to reverse a list\n    '''\n    list1.reverse()\n    return list1\ndef merge_two_dicts(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into one\n    '''\n    return dict2.update(dict1)\ndef reverse_nested_list(list1):\n    '''\n    Write a function to reverse a nested list\n    '''\n    list1.reverse()\n    for i in range(len(list1)):\n        list1[i].reverse()\n    return list1\ndef flatten_list(list1):\n    '''\n    Write a function to flatten a nested list\n    '''\n    flat_list=[]\n    for i in range(len(list1)):\n        if type(list1[i])==list:\n            flat_list+=list1[i]\n        else:\n            flat_list.append(list1[i])\n    return flat_list\ndef print_key(dict1):\n    '''\n    Write a function to print keys of a dictionary\n    '''\n    for i in dict1.keys():\n        print i\ndef print_value(dict1):\n    '''\n    Write a function to print values of a dictionary\n    '''\n    for i in dict1.values():\n        print i\ndef remove_key(dict1,key):\n    '''\n    Write a function to remove a key from a dictionary\n    '''\n    del dict1[key]\n    return dict1\ndef copy_list(list1):\n    '''\n    Write a function to copy a list\n    '''\n    return list(list1)\ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary by key\n    '''\n    sorted_dict=sorted(dict1.iteritems(),key=lambda d:d[0])\n    return sorted_dict\ndef remove_duplicates_in_dict(dict1):\n    '''\n    Write a function to remove duplicates in a dictionary\n    '''\n    return {k:v for k,v in dict1.iteritems() if v not in dict1.itervalues()}\ndef modify_dict(dict1):\n    '''\n    Write a function to modify a dictionary\n    '''\n    dict1['A']='A1'\n    return dict1\ndef print_dict_key(dict1):\n    '''\n    Write a function to print keys of a dictionary\n    '''\n    for i in dict1.keys():\n        print i\ndef print_dict_value(dict1):\n    '''\n    Write a function to print values of a dictionary\n    '''\n    for i in dict1.values():\n        print i\ndef remove_dict_key(dict1,key):\n    '''\n    Write a function to remove a key from a dictionary\n    '''\n    del dict1[key]\n    return dict1\ndef map_dict_key(dict1,func):\n    '''\n    Write a function to map a dictionary key by a function\n    '''\n    return dict((func(k),v) for k,v in dict1.iteritems())\ndef map_dict_value(dict1,func):\n    '''\n    Write a function to map a dictionary value by a function\n    '''\n    return dict((k,func(v)) for k,v in dict1.iteritems())\ndef get_dict_key(dict1,key):\n    '''\n    Write a function to get a key of a dictionary\n    '''\n    return dict1[key]\ndef get_dict_value(dict1,key):\n    '''\n    Write a function to get a value of a dictionary\n    '''\n    return dict1[key]\ndef get_dict_item(dict1,key,value):\n    '''\n    Write a function to get a dictionary item\n    '''\n    return dict1[key]==value\ndef remove_dict_item(dict1,key,value):\n    '''\n    Write a function to remove a dictionary item\n    '''\n    del dict1[key]\n    return dict1\ndef get_dict_items(dict1,key",
        "num_ids": 26
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i]==list2[j]==list3[k]:\n                    count+=1\n    return count\n",
        "num_ids": 75
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        return \"Error: List lengths must be equal!\"\n    else:\n        num_same_pairs = 0\n        for x in xrange(len(list1)):\n            if list1[x] == list2[x] and list2[x] == list3[x]:\n                num_same_pairs += 1\n        return num_same_pairs\n",
        "num_ids": 113
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list1[i] == list3[i]:\n                count += 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list1[i] == list3[i]:\n                count += 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count+=1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            count+=1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    tup = tuple(Input)\n    if len(tup) == 0:\n        return 0\n    res = [1]\n    for i in xrange(len(tup)-1):\n        if tup[i] == tup[i+1]:\n            res.append(res[-1]+1)\n        else:\n            res.append(1)\n    return max(res)\n",
        "num_ids": 96
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(Input) - 1\n",
        "num_ids": 11
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if type(Input) == list:\n        return 1\n    return find_lists(Input[0]) + find_lists(Input[1])\n",
        "num_ids": 36
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return Input.count(tuple)\n",
        "num_ids": 12
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) is list:\n            count += 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return Input.count(())\n",
        "num_ids": 10
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lst = []\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n            lst.append(i)\n    return lst, count\n",
        "num_ids": 51
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    count = 0\n    for x in Input:\n        if type(x) == list:\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return [i for i in Input if isinstance(i,list)][0]\n",
        "num_ids": 22
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if Input==None: return 0\n    elif type(Input[0])==type([]): return 1 + find_lists(Input[0])\n    else: return 1\n",
        "num_ids": 43
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in xrange(len(arr)-1):\n        diff = abs(arr[i]-arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n",
        "num_ids": 69
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    n = len(arr)\n    max_diff = arr[n-1] - arr[0]\n    for i in range(1,n):\n        max_diff = max(max_diff,arr[i]-arr[i-1])\n    return max_diff\n",
        "num_ids": 72
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    diff = arr[len(arr)-1] - arr[0]\n    for i in range(len(arr)-1):\n        diff = max(diff, arr[i+1] - arr[i])\n    return diff\n",
        "num_ids": 63
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[-1] - arr[0]\n",
        "num_ids": 21
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    sorted_arr = sorted(arr)\n    return max(sorted_arr[i+1] - sorted_arr[i] for i in range(len(sorted_arr)-1))\n",
        "num_ids": 48
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) == 1:\n        return abs(arr[0])\n    max_diff = abs(arr[0] - arr[1])\n    for i in range(len(arr) - 1):\n        temp_diff = abs(arr[i] - arr[i+1])\n        if temp_diff > max_diff:\n            max_diff = temp_diff\n    return max_diff\n",
        "num_ids": 97
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    min_element = min(arr)\n    max_element = max(arr)\n    max_diff = max_element - min_element\n    for i in arr:\n        if i > min_element:\n            min_element = i\n        if i < max_element:\n            max_element = i\n    max_diff = max_element - min_element\n    return max_diff\n    \nprint max_Abs_Diff([10, 30, -15, 40, 25, 40])\n",
        "num_ids": 116
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return\n    max_diff = arr[1] - arr[0]\n    for i in range(1, len(arr)):\n        max_diff = max(max_diff, arr[i] - arr[i-1])\n    return max_diff\n",
        "num_ids": 73
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    res = 0 \n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            res = max(res, abs(arr[i]-arr[j]))\n    return res \n",
        "num_ids": 61
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[-1] - arr[0]\n",
        "num_ids": 21
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    #Takes very long if a is too big\n    #Just for practice. Remove if you can, and write the code in about 20 lines\n    #print(a, b, n)\n    x = [a, -n % a]\n    y = [b, -n // a]\n    if x[0] == y[0] and x[1] == y[1]:\n        #print('Solution found')\n        return x\n    return None\n",
        "num_ids": 107
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return 0, 1\n    if n < 0:\n        return None\n    for x in range(-n, n+1):\n        for y in range(-(n - x), n - x + 1):\n            if a * x + b * y == n:\n                return x, y\n    return None\n",
        "num_ids": 80
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    def gcd(a, b):\n        if a == 0:\n            return b\n        return gcd(b % a, a)\n    \n    def find_solution2(a, b, n):\n        if b == 0:\n            return (n / a, 0)\n        r = gcd(b, a)\n        x = n / r\n        y = n / a - (n / b) * b / r\n        return (x, y)\n    \n    return find_solution2(a, b, n)\n    ",
        "num_ids": 132
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n + 1):\n        y = (n - a * x) / b\n        if y.is_integer():\n            return (x, y)\n    return None\n",
        "num_ids": 49
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return (0, 0)\n",
        "num_ids": 17
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    def find_solutions(a, b, n, s, result):\n        if n == 0:\n            if result not in results:\n                results.append(result)\n        else:\n            if n % a == 0:\n                find_solutions(b, n / a, s, a, result + [n])\n            if n % b == 0:\n                find_solutions(a, n / b, s, b, result + [n])\n",
        "num_ids": 109
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    soln = None\n    for x in range(n):\n        for y in range(n):\n            if x*a + y*b == n:\n                soln = (x, y)\n                return soln\n    return soln\n",
        "num_ids": 59
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n + 1):\n        for y in range(1, n + 1):\n            if a * x + b * y == n:\n                return (x, y)\n",
        "num_ids": 49
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n + 1):\n        if (a * x + b) % n == 0:\n            return (x, (a * x + b) // n)\n    return None\n",
        "num_ids": 50
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # a, b, n = map(int, a.split(','))\n    # if b == 0:\n    #     return a, 1\n    # if n % b == 0:\n    #     return int(n / b), b\n    # c = n / b\n    # d = n % b\n    # for i in range(c):\n    #     a, b = b, a + b\n    # return b, c\n    if a == 0:\n        return None\n    if n % a == 0:\n        return int(n / a), a\n    else:\n        return None\n",
        "num_ids": 143
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    for i in list2:\n        list1.remove(i)\n    return list1\n",
        "num_ids": 26
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for x in list1:\n        for y in list2:\n            if x == y:\n                list1.remove(x)\n                list2.remove(y)\n                break\n    return list1, list2\n",
        "num_ids": 54
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        list1.remove(i)\n    return list1\n",
        "num_ids": 24
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        if item in list1:\n            list1.remove(item)\n    return list1\n",
        "num_ids": 32
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = list1[:]\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1\n",
        "num_ids": 41
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [elem for elem in list1 if elem not in list2]\n",
        "num_ids": 22
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1\n",
        "num_ids": 32
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for i in list1:\n        if i not in list2:\n            list3.append(i)\n    return list3\n",
        "num_ids": 39
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1\n",
        "num_ids": 32
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = list(list1)\n    list2 = list(list2)\n",
        "num_ids": 22
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return sum_series(n/2)\n    else:\n        return n + sum_series(n-2)",
        "num_ids": 61
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum(range(n+1))\n",
        "num_ids": 13
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return 'The number you have entered is not positive'\n    elif n == 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n",
        "num_ids": 51
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n",
        "num_ids": 42
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    if n % 2 == 0:\n        for i in range(n // 2):\n            sum += i\n        return sum\n    else:\n        for i in range(n // 2):\n            sum += i\n        return sum + 1\n",
        "num_ids": 62
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return n + sum_series(n-2)\n    else:\n        return sum_series(n-1)\n",
        "num_ids": 51
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    return n + sum_series(n-2)\n    \n    ",
        "num_ids": 29
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n if n < 3 else sum_series(n-2) + sum_series(n-4) if n > 2 else 1\n",
        "num_ids": 34
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + (n - 2) + (n - 4) +... + (n - 2 * i)\n",
        "num_ids": 28
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + sum_series(n - 2)\n    \ndef fibonacci(n):\n    '''\n    Calculate the nth fibonacci number.\n    '''\n    return sum_series(n)\n",
        "num_ids": 11
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    n = l\n    l = [s*(2*n-2)/2, s*(2*n-2)/2]\n    area = s/2 * (1+l[0]**2/(n**2*tan(pi/n)**2)+l[1]**2/(n**2*tan(pi/n)**2))\n    return area\n",
        "num_ids": 89
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if (l <= 0) or (s <= 0):\n        return -1\n    else:\n        return (0.25*s*l**2)/(tan(pi/s))\n",
        "num_ids": 46
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.25*s*(s+2*l)*(l+2*s))\n",
        "num_ids": 26
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (l * s**2) / (4 * tan(pi / s))\n",
        "num_ids": 22
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.25 * s * l) * tan(pi / l)\n",
        "num_ids": 21
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s < 3:\n        return 0\n    if s == 3:\n        return (l**2) / 4\n    return (l**2) * tan(pi / s)\n",
        "num_ids": 45
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*l/2)*(s**2-l**2)/(4*tan(pi/l))\n",
        "num_ids": 30
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    \n    #calculate the length of one side of the polygon\n    n=l/s\n    #calculate the area\n    A=0.5*n*s*s\n    return A\ndef are_hexagon_equilateral(s):\n    '''\n    Write a function that accepts the length of the sides of a hexagon as the input and returns the area of the hexagon.\n    '''\n    \n    #calculate the length of one side of the polygon\n    n=s*(3**0.5)\n    #calculate the area\n    A=0.5*n*s*s\n    return A\ndef are_hexagon_isosceles(s):\n    '''\n    Write a function that accepts the length of the sides of a hexagon as the input and returns the area of the hexagon.\n    '''\n    \n    #calculate the length of one side of the polygon\n    n=s*(3**0.5)\n    #calculate the area\n    A=0.5*n*s*s\n    return A\ndef are_hexagon_isosceles(s):\n    '''\n    Write a function that accepts the length of the sides of a hexagon as the input and returns the area of the hexagon.\n    '''\n    \n    #calculate the length of one side of the polygon\n    n=s*(3**0.5)\n    #calculate the area\n    A=0.5*n*s*s\n    return A\ndef are_hexagon_isosceles(s):\n    '''\n    Write a function that accepts the length of the sides of a hexagon as the input and returns the area of the hexagon.\n    '''\n    \n    #calculate the length of one side of the polygon\n    n=s*(3**0.5)\n    #calculate the area\n    A=0.5*n*s*s\n    return A\ndef are_hexagon_isosceles(s):\n    '''\n    Write a function that accepts the length of the sides of a hexagon as the input and returns the area of the hexagon.\n    '''\n    \n    #calculate the length of one side of the polygon\n    n=s*(3**0.5)\n    #calculate the area\n    A=0.5*n*s*s\n    return A\ndef are_hexagon_isosceles(s):\n    '''\n    Write a function that accepts the length of the sides of a hexagon as the input and returns the area of the hexagon.\n    '''\n    \n    #calculate the length of one side of the polygon\n    n=s*(3**0.5)\n    #calculate the area\n    A=0.5*n*s*s\n    return A\ndef are_hexagon_isosceles(s):\n    '''\n    Write a function that accepts the length of the sides of a hexagon as the input and returns the area of the hexagon.\n    '''\n    \n    #calculate the length of one side of the polygon\n    n=s*(3**0.5)\n    #calculate the area\n    A=0.5*n*s*s\n    return A\ndef are_hexagon_isosceles(s):\n    '''\n    Write a function that accepts the length of the sides of a hexagon as the input and returns the area of the hexagon.\n    '''\n    \n    #calculate the length of one side of the polygon\n    n=s*(3**0.5)\n    #calculate the area\n    A=0.5*n*s*s\n    return A\ndef are_hexagon_isosceles(s):\n    '''\n    Write a function that accepts the length of the sides of a hexagon as the input and returns the area of the hexagon.\n    '''\n    \n    #calculate the length of one side of the polygon\n    n=s*(3**0.5)\n    #calculate the area\n    A=0.5*n*s*s\n    return A\ndef are_hexagon_isosceles(s):\n    '''\n    Write a function that accepts the length of the sides of a hexagon as the input and returns the area of the hexagon.\n    '''\n    \n    #calculate the length of one side of the polygon\n    n=s*(3**0.5)\n    #calculate the area\n    A=0.5*n*s*s\n    return A\ndef are_hexagon_isosceles(s):\n    '''\n    Write a function that accepts the length of the sides of a hexagon as the input and returns the area of the hexagon.\n    '''\n    \n    #calculate the length of one side of the polygon\n    n=s*(3**0.5)\n    #calculate the area\n    A=0.5*n*s*s\n    return A\ndef are_hexagon_isosceles(s):\n    '''\n    Write a function that accepts the length of the sides of a hexagon as the input and returns the area of the hexagon.\n    '''\n    \n    #calculate the length of one side of the polygon\n    n=s*(3**0.5)\n    #calculate the area\n    A=0.5*n*s*s\n    return A\ndef are_hexagon_isosceles(s):\n    '''\n    Write a function that accepts the length of the sides of a hexagon as the input and returns the area of the hexagon.\n    '''\n    \n    #calculate the length of one side of the polygon\n    n=s*(3**0.5)\n    #calculate the area\n    A=0.5*n*s*s\n    return A\ndef are_hexagon_isosceles(s):\n    '''\n    Write a function that accepts the length of the sides of a hexagon as the input and returns the area of the hexagon.\n    '''\n    \n    #calculate the length of one side of the polygon\n    n=s*(3**0.5)\n    #calculate the area\n    A=0.5*n*s*s\n    return A\ndef are_hexagon_isosceles(s):\n    '''\n    Write a function that accepts the length of the sides of a hexagon as the input and returns the area of the hexagon.\n    '''\n    \n    #calculate the length of one side of the polygon\n    n=s*(3**0.5)\n    #calculate the area\n    A=0.5*n*s*s\n    return A\ndef are_hexagon_isosceles(s):\n    '''\n    Write a function that accepts the length of the sides of a hexagon as the input and returns the area of the hexagon.\n    '''\n    \n    #calculate the length of one side of the polygon\n    n=s*(3**0.5)\n    #calculate the area\n    A=0.5*n*s*s\n    return A\ndef are_hexagon_isosceles(s):\n    '''\n    Write a function that accepts the length of the sides of a hexagon as the input and returns the area of the hexagon.\n    '''\n    \n    #calculate the length of one side of the polygon\n    n=s*(3**0.5)\n    #calculate the area\n    A=0.5*n*s*s\n    return A\ndef are_hexagon_isosceles(s):\n    '''\n    Write a function that accepts the length of the sides of a hexagon as the input and returns the area of the hexagon.\n    '''\n    \n    #calculate the length of one side of the polygon\n    n=s*(3**0.5)\n    #calculate the area\n    A=0.5*n*s*s\n    return A\ndef are_hexagon_isosceles(s):\n    '''\n    Write a function that accepts the length of the sides of a hexagon as the input and returns the area of the hexagon.\n    '''\n    \n    #calculate the length of one sid",
        "num_ids": 14
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25 * s * l) / tan(pi/s)\n    return area\ndef midpoint(p1, p2):\n    '''\n    Write a function to calculate the midpoint between two points.\n    '''\n    midpoint = ((p1[0] + p2[0]) / 2, (p1[1] + p2[1]) / 2)\n    return midpoint\ndef dotproduct(v1, v2):\n    '''\n    Write a function to calculate the dot product of two vectors.\n    '''\n    return sum([a*b for a, b in zip(v1, v2)])\ndef crossproduct(v1, v2):\n    '''\n    Write a function to calculate the cross product of two vectors.\n    '''\n    return v1[0] * v2[1] - v1[1] * v2[0]\ndef length(v):\n    '''\n    Write a function to calculate the length of a vector.\n    '''\n    return (v[0]**2 + v[1]**2)**0.5\ndef angle(v1, v2):\n    '''\n    Write a function to calculate the angle between two vectors.\n    '''\n    return (180/pi) * (1/length(v1) * crossproduct(v1, v2))\ndef distance(p1, p2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    return length(midpoint(p1, p2))\ndef circle_area(r):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return pi * (r**2)\ndef circle_circumference(r):\n    '''\n    Write a function to calculate the circumference of a circle.\n    '''\n    return 2 * pi * r\ndef triangle_area(a, b, c):\n    '''\n    Write a function to calculate the area of a triangle given the lengths of its sides.\n    '''\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return area\ndef triangle_circumference(a, b, c):\n    '''\n    Write a function to calculate the circumference of a triangle given the lengths of its sides.\n    '''\n    return a + b + c\ndef rect_area(a, b):\n    '''\n    Write a function to calculate the area of a rectangle given the length and breadth of its sides.\n    '''\n    return a * b\ndef rect_perimeter(a, b):\n    '''\n    Write a function to calculate the perimeter of a rectangle given the length and breadth of its sides.\n    '''\n    return 2 * (a + b)\ndef isosceles_triangle_area(a, b, c):\n    '''\n    Write a function to calculate the area of an isosceles triangle given the lengths of its sides.\n    '''\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return area\ndef isosceles_triangle_perimeter(a, b, c):\n    '''\n    Write a function to calculate the perimeter of an isosceles triangle given the lengths of its sides.\n    '''\n    return a + b + c\ndef right_triangle_area(a, b, c):\n    '''\n    Write a function to calculate the area of a right triangle given the lengths of its sides.\n    '''\n    return (a * b) / 2\ndef right_triangle_perimeter(a, b, c):\n    '''\n    Write a function to calculate the perimeter of a right triangle given the lengths of its sides.\n    '''\n    return a + b + c\ndef right_triangle_height(a, b, c):\n    '''\n    Write a function to calculate the height of a right triangle given the lengths of its sides.\n    '''\n    return (a**2 + b**2) ** 0.5\ndef right_triangle_leg_length(a, b, c):\n    '''\n    Write a function to calculate the length of the hypotenuse of a right triangle given the lengths of its sides.\n    '''\n    return (a**2 + b**2) ** 0.5\ndef right_triangle_leg_height(a, b, c):\n    '''\n    Write a function to calculate the height of a right triangle given the lengths of its sides.\n    '''\n    return (a**2 + c**2) ** 0.5\ndef right_triangle_base_area(a, b, c):\n    '''\n    Write a function to calculate the area of the base of a right triangle given the lengths of its sides.\n    '''\n    return (a * b) / 2\ndef right_triangle_base_perimeter(a, b, c):\n    '''\n    Write a function to calculate the perimeter of the base of a right triangle given the lengths of its sides.\n    '''\n    return a + b + c\ndef right_triangle_apothem_area(a, b, c):\n    '''\n    Write a function to calculate the area of the apothem of a right triangle given the lengths of its sides.\n    '''\n    return (a * b * c) / (4 * ((a + b + c) / 2))\ndef right_triangle_apothem_perimeter(a, b, c):\n    '''\n    Write a function to calculate the perimeter of the apothem of a right triangle given the lengths of its sides.\n    '''\n    return sqrt(a**2 + b**2 + c**2) / 2\ndef right_triangle_opposite_area(a, b, c):\n    '''\n    Write a function to calculate the area of the opposite of a right triangle given the lengths of its sides.\n    '''\n    return (a * b) / 2\ndef right_triangle_opposite_perimeter(a, b, c):\n    '''\n    Write a function to calculate the perimeter of the opposite of a right triangle given the lengths of its sides.\n    '''\n    return a + b + c\ndef right_triangle_angle_between_lines(a, b, c):\n    '''\n    Write a function to calculate the angle between the lines of a right triangle given the lengths of its sides.\n    '''\n    return degrees(acos((a**2 + b**2 - c**2) / (2 * a * b)))\ndef right_triangle_angle_between_lines_degrees(a, b, c):\n    '''\n    Write a function to calculate the angle between the lines of a right triangle given the lengths of its sides.\n    '''\n    return degrees(acos((a**2 + b**2 - c**2) / (2 * a * b)))\ndef right_triangle_slant_angle_between_lines(a, b, c):\n    '''\n    Write a function to calculate the slant angle between the lines of a right triangle given the lengths of its sides.\n    '''\n    return degrees(acos((c**2 + b**2 - a**2) / (2 * c * b)))\ndef right_triangle_slant_angle_between_lines_degrees(a, b, c):\n    '''\n    Write a function to calculate the slant angle between the lines of a right triangle given the lengths of its sides.\n    '''\n    return degrees(acos((c**2 + b**2 - a**2) / (2 * c * b)))\ndef right_triangle_area_of_parallelogram(a, b, c):\n    '''\n    Write a function to calculate the area of a right triangle given the lengths of its sides.\n    '''\n    return a * b\ndef right_triangle_perimeter_of_parallelogram(a, b, c):\n    '''\n    Write a function to calculate the perimeter of a right triangle given the lengths of its sides.\n    '''\n    return a + b + c\ndef right_triangle_area_of_trapezium(a, b, c, d):\n    '''\n    Write a function to calculate the area of a right triangle given the lengths of its sides.\n    '''\n    s = (a + b + c + d) / ",
        "num_ids": 16
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = 0\n    for i in range(l):\n        a = a + s\n    return s * a / 2\n    \ndef area_square(a):\n    '''\n    Write a function to calculate the area of a regular square given the length of its side.\n    '''\n    return a ** 2\n",
        "num_ids": 8
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_of_divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum_of_divisors += i\n    if sum_of_divisors == n:\n        return True\n    else:\n        return False\n",
        "num_ids": 71
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return sum([i for i in range(1, n + 1) if n % i == 0]) == n \n",
        "num_ids": 29
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n % 2 == 0: \n        return n/2\n    else: \n        div = 0\n        x = 3\n        sqrt_n = int(math.sqrt(n))\n        while x <= sqrt_n: \n            if n % x == 0: \n                div += x + (n/x)\n            x += 2\n        if div == n: \n            return True\n        else: \n            return False\n",
        "num_ids": 107
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = [] \n    for i in range(1, n): \n        if n % i == 0: \n            divisors.append(i)\n    return sum(divisors) \n",
        "num_ids": 52
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for i in range(1, (n // 2) + 1): \n        if n % i == 0: \n            div_sum += i \n    return div_sum \ndef check_number(n):\n    '''\n    Write a function to check if the number is a perfect number.\n    '''\n    if n < 2: \n        return False\n    return div_sum(n) == n\ndef check_number2(n):\n    '''\n    Write a function to check if the number is a perfect number.\n    '''\n    if n < 2: \n        return False\n    sum = 1\n    for i in range(2, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            sum += i \n            sum += n // i\n    return sum == n\ndef length_of_longest_substring(s, k):\n    '''\n    Write a function to find the length of the longest substring T whose\n    k-universal characters appear in T.\n    '''\n    if k > 26 or k < 1: \n        return -1\n    substr = ''\n    for i in range(len(s)): \n        substr += s[i]\n        if s[i] not in substr[:-k]:\n            substr = substr[1:]\n    return len(substr)\ndef is_rotation(s1, s2):\n    '''\n    Write a function to determine if one string is a rotation of another string.\n    '''\n    if len(s1)!= len(s2) or not s1:\n        return False\n    return s1 in s2 + s2\ndef is_rotation_2(s1, s2):\n    '''\n    Write a function to determine if one string is a rotation of another string.\n    '''\n    if len(s1)!= len(s2) or not s1:\n        return False\n    l1 = len(s1)\n    for i in range(l1):\n        if s1[i]!= s2[l1 - i - 1]:\n            return False\n    return True\ndef is_rotation_3(s1, s2):\n    '''\n    Write a function to determine if one string is a rotation of another string.\n    '''\n    if len(s1)!= len(s2) or not s1:\n        return False\n    return s2 in s1 + s1\ndef find_missing_number(nums):\n    '''\n    Write a function that takes in a list of integers and returns the missing number.\n    '''\n    for i in range(len(nums)):\n        if nums[i] < 0 or nums[i] > len(nums):\n            return i\n    return len(nums)\ndef find_missing_number_2(nums):\n    '''\n    Write a function that takes in a list of integers and returns the missing number.\n    '''\n    for i in range(len(nums)):\n        if nums[i] < 0 or nums[i] > len(nums):\n            continue\n        new_nums = nums[:i] + nums[i + 1:]\n        if nums[i] - 1 < 0 or nums[i] - 1 >= len(new_nums):\n            return nums[i] - 1\n        if new_nums[nums[i] - 1] == nums[i]:\n            continue\n        return nums[i] - 1\n    return len(nums)\ndef find_missing_number_3(nums):\n    '''\n    Write a function that takes in a list of integers and returns the missing number.\n    '''\n    for i in range(len(nums)):\n        if nums[i] < 0 or nums[i] > len(nums):\n            continue\n        while nums[i]!= nums[nums[i] - 1]:\n            nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n            nums[i] -= 1\n    for i in range(len(nums)):\n        if nums[i]!= i:\n            return i\n    return len(nums)\ndef find_missing_number_4(nums):\n    '''\n    Write a function that takes in a list of integers and returns the missing number.\n    '''\n    for i in range(len(nums)):\n        if nums[i] < 0 or nums[i] > len(nums):\n            continue\n        nums[i], nums[nums[i] - 1] = nums[nums[i] - 1], nums[i]\n    for i in range(len(nums)):\n        if nums[i]!= i:\n            return i\n    return len(nums)\ndef find_missing_number_5(nums):\n    '''\n    Write a function that takes in a list of integers and returns the missing number.\n    '''\n    missing = len(nums)\n    for i in range(len(nums)):\n        missing ^= i ^ nums[i]\n    return missing\ndef find_missing_number_6(nums):\n    '''\n    Write a function that takes in a list of integers and returns the missing number.\n    '''\n    for i in range(len(nums)):\n        if nums[i] < 0 or nums[i] > len(nums):\n            continue\n        while nums[i]!= i and nums[nums[i] - 1]!= nums[i]:\n            nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n            nums[i] -= 1\n    for i in range(len(nums)):\n        if nums[i]!= i:\n            return i\n    return len(nums)\ndef find_missing_number_7(nums):\n    '''\n    Write a function that takes in a list of integers and returns the missing number.\n    '''\n    for i in range(len(nums)):\n        if nums[i] < 0 or nums[i] > len(nums):\n            continue\n        while nums[i]!= i and nums[nums[i] - 1]!= nums[i]:\n            nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n            nums[i] -= 1\n    for i in range(len(nums)):\n        if nums[i]!= i:\n            return i\n    return len(nums)\ndef find_missing_number_8(nums):\n    '''\n    Write a function that takes in a list of integers and returns the missing number.\n    '''\n    for i in range(len(nums)):\n        if nums[i] < 0 or nums[i] > len(nums):\n            continue\n        nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n    for i in range(len(nums)):\n        if nums[i]!= i + 1:\n            return i + 1\n    return len(nums) + 1\ndef find_missing_number_9(nums):\n    '''\n    Write a function that takes in a list of integers and returns the missing number.\n    '''\n    num_of_numbers = len(nums)\n    for i in range(num_of_numbers):\n        if nums[i] < 0 or nums[i] >= num_of_numbers:\n            return i + 1\n        # Swap current number with the value at its index\n        temp = nums[i]\n        nums[i] = nums[temp - 1]\n        nums[temp - 1] = temp\n    return num_of_numbers\ndef find_missing_number_10(nums):\n    '''\n    Write a function that takes in a list of integers and returns the missing number.\n    '''\n    num_of_numbers = len(nums)\n    for i in range(num_of_numbers):\n        if nums[i] < 0 o",
        "num_ids": 40
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor_sum = 0\n    for i in range(1,n):\n        if n%i==0:\n            divisor_sum += i\n    return divisor_sum\ndef is_power_of_two(n):\n    '''\n    Return True if n is a power of two.\n    '''\n    if n == 1:\n        return True\n    elif n == 0:\n        return False\n    else:\n        return n & (n-1) == 0\ndef is_prime(n):\n    '''\n    Return True if n is prime.\n    '''\n    if n == 2:\n        return True\n    elif n%2 == 0 and n > 2:\n        return False\n    else:\n        max = math.sqrt(n)\n        for i in range(3,1+int(max),2):\n            if n%i == 0:\n                return False\n    return True\ndef is_pythagorean_triplet(a,b,c):\n    '''\n    Return True if a,b,c is a pythagorean triple.\n    '''\n    if a**2+b**2==c**2:\n        return True\n    else:\n        return False\ndef find_max_product(n):\n    '''\n    Return the maximum product of two distinct odd numbers less than n.\n    '''\n    for i in range(n):\n        if is_prime(i) and is_prime(n-i):\n            return i*(n-i)\ndef count_binary_strings(n):\n    '''\n    Return the number of binary strings of length n.\n    '''\n    count = 0\n    for i in range(2**n):\n        count += 1\n    return count\ndef get_next_row(r):\n    '''\n    Return the row with the largest sum.\n    '''\n    res = [0]*len(r)\n    for i in range(len(r)):\n        if i == 0:\n            res[i] = r[i] + max(r[i+1:])\n        elif i == len(r)-1:\n            res[i] = r[i-1] + max(r[i-1:])\n        else:\n            res[i] = r[i-1] + r[i+1] + max(r[i-1:i+2])\n    return res\ndef get_next_row_old(r):\n    '''\n    Return the row with the largest sum.\n    '''\n    res = [0]*len(r)\n    for i in range(len(r)):\n        if i == 0:\n            res[i] = r[i] + max(r[i+1:])\n        elif i == len(r)-1:\n            res[i] = r[i-1] + max(r[i-1:])\n        else:\n            res[i] = r[i-1] + r[i+1] + max(r[i-1:i+2])\n    return res\ndef find_pythagorean_triplet(n):\n    '''\n    Return the pythagorean triple the last three digits of n form a pythagorean triple.\n    '''\n    for i in range(n):\n        for j in range(i,n):\n            for k in range(j,n):\n                if is_pythagorean_triplet(i,j,k):\n                    return i,j,k\ndef find_pythagorean_triplet_old(n):\n    '''\n    Return the pythagorean triple the last three digits of n form a pythagorean triple.\n    '''\n    for i in range(n):\n        for j in range(i,n):\n            for k in range(j,n):\n                if is_pythagorean_triplet(i,j,k):\n                    return i,j,k\ndef pythagorean_triplet_sum_old(a,b,c):\n    '''\n    Return the sum of the three sides of a pythagorean triple.\n    '''\n    if a**2+b**2==c**2:\n        return a+b+c\n    else:\n        return None\ndef pythagorean_triplet_sum(a,b,c):\n    '''\n    Return the sum of the three sides of a pythagorean triple.\n    '''\n    if a**2+b**2==c**2:\n        return a+b+c\n    else:\n        return None\ndef perfect_squares(n):\n    '''\n    Return the sum of all perfect squares less than n.\n    '''\n    sum = 0\n    for i in range(n):\n        if i*i<=n:\n            sum += i*i\n    return sum\ndef square_of_sum(n):\n    '''\n    Return the sum of the squares of the first n positive integers.\n    '''\n    return n*(n+1)*(2*n+1)/6\ndef sum_of_digits(n):\n    '''\n    Return the sum of the digits of n.\n    '''\n    sum = 0\n    while n>0:\n        sum += n%10\n        n = n//10\n    return sum\ndef is_pandigital(n):\n    '''\n    Return True if n is a pandigital number.\n    '''\n    divisor_sum = 0\n    for i in range(1,len(str(n))+1):\n        if str(i) not in str(n):\n            return False\n    return True\ndef is_pandigital_old(n):\n    '''\n    Return True if n is a pandigital number.\n    '''\n    divisor_sum = 0\n    for i in range(1,len(str(n))+1):\n        if str(i) not in str(n):\n            return False\n    return True\ndef is_pandigital_permutation_old(n):\n    '''\n    Return True if n is a permutation of a pandigital number.\n    '''\n    divisor_sum = 0\n    for i in range(1,len(str(n))+1):\n        if str(i) not in str(n):\n            return False\n    return True\ndef permutation_of_digit_old(n,k):\n    '''\n    Return True if n has a permutation of digit k.\n    '''\n    res = 0\n    for i in range(len(str(n))):\n        if str(k)==str(i+1):\n            res += 1\n    return res\ndef is_pandigital_permutation(n):\n    '''\n    Return True if n is a permutation of a pandigital number.\n    '''\n    divisor_sum = 0\n    for i in range(1,len(str(n))+1):\n        if str(i) not in str(n):\n            return False\n    return True\ndef is_pandigital_permutation(n):\n    '''\n    Return True if n is a permutation of a pandigital number.\n    '''\n    divisor_sum = 0\n    for i in range(1,len(str(n))+1):\n        if str(i) not in str(n):\n            return False\n    return True\ndef is_prime_permutation(n):\n    '''\n    Return True if n is a permutation of a prime number.\n    '''\n    divisor_sum = 0\n    for i in range(1,n+1):\n        if is_prime(i):\n            divisor_sum += 1\n    return divisor_sum == n\ndef is_permutation_of_digit(n,k):\n    '''\n    Return True if n has a permutation of digit k.\n    '''\n    res = 0\n    for i in range(len(str(n))):\n        if str(k)==str(i):\n            res += 1\n    return res\ndef permutation_of_digit(n,k):\n    '''\n    Return True if n has a permutation of digit k.\n    '''\n    res = 0\n    for i in range(len(str(n))):\n        if str(k)==str(i):\n            res += 1\n    return res\nde",
        "num_ids": 43
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    #for i in range(1,n):\n    #    if n%i == 0:\n    #        s.append(i)\n    #if sum(s) == n:\n    #    return True\n    #else:\n    #    return False\n",
        "num_ids": 63
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    try:\n        i = 1\n        a = 1\n        s = 0\n        b = n\n        while i <= b:\n            if b % i == 0:\n                a += i\n            i += 1\n        while i < b:\n            if b % i == 0:\n                a += i\n            i += 1\n        s = a\n        if n == s:\n            return True\n        else:\n            return False\n    except:\n        return False\n",
        "num_ids": 110
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    r1 = n \n    r2 = 1\n    while r1 > 1: \n        if n % r1 == 0: \n            r2 = r2 + r1\n        r1 = r1 - 1\n    return r2\ndef sum_divisor(n):\n    r = 0\n    for i in range(1, n):\n        if n % i == 0:\n            r = r + i\n    return r\ndef sum_divisors(n):\n    r1 = n \n    r2 = 1\n    while r1 > 1: \n        if n % r1 == 0:\n            r2 = r2 + r1\n        r1 = r1 - 1\n    return r2\ndef is_perfect(n):\n    s = sum_divisors(n)\n    if s == n:\n        return True\n    else:\n        return False\ndef is_abundant(n):\n    s = sum_divisors(n)\n    if s > n:\n        return True\n    else:\n        return False\ndef is_perfect_and_abundant(n):\n    s1 = sum_divisors(n)\n    if s1 == n:\n        return True, True\n    elif s1 > n:\n        return True, False\n    else:\n        return False, False\ndef is_perfect_abundant(n):\n    s1 = sum_divisors(n)\n    if s1 == n:\n        return True, True\n    elif s1 > n:\n        return True, False\n    else:\n        return False, False\ndef sieve(n):\n    a = [True] * (n + 1)\n    a[0] = a[1] = False\n    for i in range(2, math.ceil(math.sqrt(n))):\n        if a[i]:\n            for j in range(i * 2, n + 1, i):\n                a[j] = False\n    return a\ndef sum_of_sieve(a):\n    s = 0\n    for i in range(len(a)):\n        if a[i]:\n            s = s + i\n    return s\ndef div_sum_sieve(a, n):\n    s = 0\n    for i in range(len(a)):\n        if a[i] and n % i == 0:\n            s = s + i\n    return s\ndef is_perfect_abundant_sieve(a, n):\n    if n > sum_of_sieve(a):\n        return True\n    else:\n        return False\ndef main():\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    print(div_sum(20))\n    print(div_sum_sieve([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ",
        "num_ids": 1359
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_div = sum([i for i in range(1, n//2 + 1) if n % i == 0])\n    if sum_div == n:\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str_dict = {}\n    for i in range(len(str1)):\n        if str1[i].lower() not in str_dict:\n            str_dict[str1[i].lower()] = i\n    return len(str_dict)\n",
        "num_ids": 63
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    \n    count_dict = {}\n    for char in alphabet:\n        count_dict[char] = 0\n    \n    for i in range(len(str1)):\n        for char in alphabet:\n            if str1[i].lower() == char.lower():\n                count_dict[char] += 1\n                break\n    \n    return count_dict\n",
        "num_ids": 144
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return len([letter for letter in str1.lower() if letter == letter.upper()])\n",
        "num_ids": 24
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    ans = 0\n    for i in range(len(str1)):\n        if ord(str1[i]) == ord('a') + (ord(str1[i]) - ord('a')):\n            ans += 1\n    return ans\n",
        "num_ids": 69
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    dict1 = {}\n    for char in str1:\n        if char.isalpha():\n            dict1[char] = str1.count(char)\n    return dict1\n    \n",
        "num_ids": 46
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return len([i for i in range(len(str1)) if ord(str1[i])-ord('a') == i])\n",
        "num_ids": 34
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    d = {}\n    for i in range(97,123):\n        d[chr(i)] = 0\n    \n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            d[str1[i].lower()] += 1\n    return d\n",
        "num_ids": 73
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    counts = {}\n    for char in alphabet:\n        counts[char] = 0\n    for i, char in enumerate(str1):\n        counts[char.lower()] += 1\n    return counts\n",
        "num_ids": 74
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    counts = {'a':0,'b':0,'c':0,'d':0,'e':0,'f':0,'g':0,'h':0,'i':0,'j':0,'k':0,'l':0,'m':0,'n':0,'o':0,'p':0,'q':0,'r':0,'s':0,'t':0,'u':0,'v':0,'w':0,'x':0,'y':0,'z':0}\n    for char in str1.lower():\n        if char in counts:\n            counts[char] += 1\n    return counts\n",
        "num_ids": 143
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_position = {}\n    for char in str1:\n        if char in char_position:\n            char_position[char] += 1\n        else:\n            char_position[char] = 1\n    return char_position\n",
        "num_ids": 56
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    cnt = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i]^A[j]%2 == 0:\n                cnt += 1\n    return cnt\n",
        "num_ids": 64
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    s = set(A)\n    count = 0\n    for a in s:\n        if (a ^ 2) in s:\n            count += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    N = len(A)\n    if N < 2: \n        return 0\n    count = 0\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            if A[i] ^ A[j] & 1 == 0:\n                count += 1\n    return count\n",
        "num_ids": 77
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    n = len(A)\n    for i in xrange(n-1):\n        for j in xrange(i+1,n):\n            if A[i]^A[j] == 0:\n                count += 1\n    return count\n",
        "num_ids": 65
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in xrange(len(A)): \n        for j in xrange(len(A)): \n            if A[i] ^ A[j] == 0 and i!= j: \n                count += 1\n    return count\n",
        "num_ids": 65
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    def count_even_pair(A):\n        '''\n        Count the number of pairs of integers in A that xor to an even number\n        '''\n        count = 0\n        for i in range(len(A)):\n            for j in range(i, len(A)):\n                if A[i] ^ A[j] % 2 == 0:\n                    count += 1\n        return count\n    return count_even_pair(A)\n",
        "num_ids": 70
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if not A:\n        return 0\n",
        "num_ids": 12
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    xored = reduce(lambda x, y: x ^ y, A)\n    xor = xored ^ xored \n    n = 0\n    for i in A:\n        if (xor ^ i) & 1:\n            n += 1\n    return n\n",
        "num_ids": 64
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    res = 0\n    for i in A: \n        res += count_XOR_in_list(A, i)\n    return res\n",
        "num_ids": 36
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    p = 1\n    while p < n:\n        p *= 2\n    return p\n",
        "num_ids": 24
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return (1 << int(math.ceil(math.log(n,2))))\n",
        "num_ids": 23
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1<<(n-1).bit_length()\n",
        "num_ids": 16
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2 ** math.ceil(math.log2(n))\n",
        "num_ids": 19
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n = int(n)\n    assert n>=0\n    return 1<<(n-1).bit_length()\n",
        "num_ids": 31
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n & (n-1)!= 0:\n        n = n & (n-1)\n    return n\n",
        "num_ids": 30
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(n-1).bit_length()\n",
        "num_ids": 16
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    pow = 1\n    while pow < n:\n        pow *= 2\n    return pow\n",
        "num_ids": 26
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1<<(n-1).bit_length()\n",
        "num_ids": 16
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 2**(next_power_of_2(n-1))\n",
        "num_ids": 35
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for n in a:\n        if x == n:\n            count = count + 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n",
        "num_ids": 11
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n",
        "num_ids": 11
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    c=0\n    for i in a:\n        if i==x:\n            c+=1\n    return c\n    \n",
        "num_ids": 32
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n",
        "num_ids": 11
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    for i in range(len(a)):\n        if a[i]==x:\n            print(i,a[i])\n            return i\n",
        "num_ids": 38
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if a == x:\n        return 1\n    else:\n        return 0\n",
        "num_ids": 21
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    y = 0\n    for i in a:\n        if i == x:\n            y = y + 1\n    return y\n",
        "num_ids": 32
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    # check input:\n    if len(a) == 0:\n        return 0\n    \n    # special case:\n    if a[0] == x:\n        return 1\n    \n    # otherwise, perform the actual counting:\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 86
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if x in a:\n        return a.count(x)\n    else:\n        return 0\n",
        "num_ids": 26
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or n < 0:\n        return \"Invalid Input\"\n    elif m > n:\n        return sum(list1[n:]) + sum(list1[:m])\n    else:\n        return sum(list1[m:n])\n    \n",
        "num_ids": 66
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n])\n",
        "num_ids": 14
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    result = sum(list1[m:n+1])\n    return result\n",
        "num_ids": 21
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    s = 0\n    for i in range(m, n + 1):\n        s += list1[i]\n    return s\n",
        "num_ids": 33
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n",
        "num_ids": 16
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # print \"Hello\"\n    if m < 0 and m > len(list1) or n < 0 and n > len(list1) or m > n:\n        return 0\n    if m == n:\n        return list1[m]\n    else:\n        return list1[m] + sum_range_list(list1, m + 1, n)\n",
        "num_ids": 87
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for num in list1[m:n]:\n        total += num\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n):\n        sum += list1[i]\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n",
        "num_ids": 16
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n",
        "num_ids": 8
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n",
        "num_ids": 8
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5 + a + 2*math.sqrt(a**2 - a/2)\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6 + a + 2*math.sqrt(a**2 - a/2)\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return a*7 + a + 2*math.sqrt(a**2 - a/2)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*8 + a + 2*math.sqrt(a**2 - a/2)\ndef perimeter_star(a):\n    '''\n    Write a function to find the perimeter of a regular star from the length of its sides.\n    '''\n    return 4*a + 4\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*9 + a + 2*math.sqrt(a**2 - a/2)\ndef perimeter_circle(a):\n    '''\n    Write a function to find the perimeter of a circle with radius a from the radius.\n    '''\n    return 2*math.pi*a\ndef perimeter_kite(a):\n    '''\n    Write a function to find the perimeter of a kite with radius a from the radius.\n    '''\n    return 4*math.pi*a\ndef perimeter_octogon(a):\n    '''\n    Write a function to find the perimeter of a regular octogon from the length of its sides.\n    '''\n    return a*8\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    return a*4\ndef perimeter_rectangle(a,b):\n    '''\n    Write a function to find the perimeter of a regular rectangle from the length of its sides.\n    '''\n    return 2*a + 2*b\ndef perimeter_triangle(a,b):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    return a + b + math.sqrt(a**2 + b**2)\ndef perimeter_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    return a + b + c\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*7 + a + 2*math.sqrt(a**2 - a/2)\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*7 + a + 2*math.sqrt(a**2 - a/2)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*8 + a + 2*math.sqrt(a**2 - a/2)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*8 + a + 2*math.sqrt(a**2 - a/2)\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*9 + a + 2*math.sqrt(a**2 - a/2)\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*9 + a + 2*math.sqrt(a**2 - a/2)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*8\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return a*7 + a + 2*math.sqrt(a**2 - a/2)\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return a*7 + a + 2*math.sqrt(a**2 - a/2)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*8 + a + 2*math.sqrt(a**2 - a/2)\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*9 + a + 2*math.sqrt(a**2 - a/2)\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*9 + a + 2*math.sqrt(a**2 - a/2)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*8\ndef perimeter_star(a):\n    '''\n    Write a function to find the perimeter of a regular star from the length of its sides.\n    '''\n    return 4*a + 4\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5 + a + 2*math.sqrt(a**2 - a/2)\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6 + a + 2*math.sqrt(a**2 - a/2)\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return a*7 + a + 2*math.sqrt(a**2 - a/2)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*8 + a + 2*math.sqrt(a**2 - a/2)\ndef perimeter_star(a):\n    '''\n    Write a function to find the perimeter of a regular star from the length of its sides.\n    '''\n    return 4*a + 4\ndef perimeter_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    return a + b + c\ndef perimeter_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    return a + b + c\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*7 + a + 2*math.sqrt(a**2 - a/2)\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*7 + a + 2*math.sqrt(a**2 - a/2)\ndef perimeter_octagon(a):\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = a*(5*math.sqrt(5) + 5)\n    return perimeter\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    perimeter = a*(6*math.sqrt(2) + 6)\n    return perimeter\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    perimeter = a*(8*math.sqrt(2) + 8)\n    return perimeter\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    perimeter = a*(math.sqrt(2) + 2)\n    return perimeter\ndef perimeter_triangle(a):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    perimeter = 3*a\n    return perimeter\ndef perimeter_trapezoid(a, b):\n    '''\n    Write a function to find the perimeter of a regular trapezoid from the lengths of its upper and lower sides.\n    '''\n    perimeter = 2*(a + b)\n    return perimeter\ndef perimeter_tromboid(a, b):\n    '''\n    Write a function to find the perimeter of a regular tromboid from the lengths of its upper and lower sides.\n    '''\n    perimeter = 4*(a + b)\n    return perimeter\ndef perimeter_kite(a, b):\n    '''\n    Write a function to find the perimeter of a regular kite from the lengths of its upper and lower sides.\n    '''\n    perimeter = 2*(a + b)\n    return perimeter\ndef perimeter_circle(r):\n    '''\n    Write a function to find the perimeter of a circle from the radius of the circle.\n    '''\n    perimeter = 2*math.pi*r\n    return perimeter\ndef perimeter_ellipse(a, b):\n    '''\n    Write a function to find the perimeter of an ellipse from the lengths of its sides.\n    '''\n    perimeter = math.pi*a*b\n    return perimeter\ndef perimeter_rhomboid(a, b):\n    '''\n    Write a function to find the perimeter of a rhomboid from the lengths of its sides.\n    '''\n    perimeter = 4*(a + b)\n    return perimeter\ndef perimeter_hyperbola(a, b):\n    '''\n    Write a function to find the perimeter of a hyperbola from the lengths of its sides.\n    '''\n    perimeter = 4*math.pi*a*b\n    return perimeter\ndef perimeter_parabola(a):\n    '''\n    Write a function to find the perimeter of a parabola from the length of its sides.\n    '''\n    perimeter = a*(4*math.sqrt(2) + 4)\n    return perimeter\ndef perimeter_conical_ring(r, a):\n    '''\n    Write a function to find the perimeter of a conical ring from the radius and the angle of the conical ring.\n    '''\n    perimeter = 2*math.pi*r*a\n    return perimeter\ndef perimeter_conical_tube(r, a):\n    '''\n    Write a function to find the perimeter of a conical tube from the radius and the angle of the conical tube.\n    '''\n    perimeter = 2*math.pi*r*a\n    return perimeter\ndef perimeter_cone(r, a):\n    '''\n    Write a function to find the perimeter of a conical cone from the radius and the angle of the conical cone.\n    '''\n    perimeter = 2*math.pi*r*a/math.sqrt(math.cos(a/2))\n    return perimeter\ndef perimeter_conical_sphere(r, a):\n    '''\n    Write a function to find the perimeter of a conical sphere from the radius and the angle of the conical sphere.\n    '''\n    perimeter = 4*math.pi*a*r/math.sqrt(math.cos(a/2))\n    return perimeter\ndef perimeter_ellipsoid(a, b):\n    '''\n    Write a function to find the perimeter of an ellipsoid from the lengths of its sides.\n    '''\n    perimeter = 4*(a*b + b*a + a*a)\n    return perimeter\ndef perimeter_sphere(r):\n    '''\n    Write a function to find the perimeter of a sphere from the radius of the sphere.\n    '''\n    perimeter = 4*math.pi*r*r\n    return perimeter\ndef perimeter_torus(a, b):\n    '''\n    Write a function to find the perimeter of a torus from the lengths of its sides.\n    '''\n    perimeter = 2*math.pi*a*(a + b)\n    return perimeter\ndef perimeter_cylinder(r, h):\n    '''\n    Write a function to find the perimeter of a cylinder from the radius and the height of the cylinder.\n    '''\n    perimeter = 2*math.pi*r*(r + h)\n    return perimeter\ndef perimeter_cone_shell(r, h):\n    '''\n    Write a function to find the perimeter of a cone shell from the radius and the height of the cone shell.\n    '''\n    perimeter = 2*math.pi*r*(r + h)\n    return perimeter\ndef perimeter_sphere_shell(r, h):\n    '''\n    Write a function to find the perimeter of a sphere shell from the radius and the height of the sphere shell.\n    '''\n    perimeter = 4*math.pi*h*(r + h)\n    return perimeter\ndef perimeter_torus_shell(a, b, h):\n    '''\n    Write a function to find the perimeter of a torus shell from the lengths of the torus shell and the height of the torus shell.\n    '''\n    perimeter = 2*math.pi*a*(a + b) + 4*math.pi*h*(a + b)\n    return perimeter\ndef perimeter_rhomboid_shell(a, b, h):\n    '''\n    Write a function to find the perimeter of a rhomboid shell from the lengths of the rhomboid shell and the height of the rhomboid shell.\n    '''\n    perimeter = 4*(a + b) + 4*(a + b)\n    return perimeter\ndef perimeter_rectangle(a, b):\n    '''\n    Write a function to find the perimeter of a rectangle from the lengths of its sides.\n    '''\n    perimeter = 2*(a + b)\n    return perimeter\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a square from the length of its sides.\n    '''\n    perimeter = 4*a\n    return perimeter\ndef perimeter_polygon(sides):\n    '''\n    Write a function to find the perimeter of a polygon from the number of sides.\n    '''\n    perimeter = sides*(sides + 1)\n    return perimeter\ndef perimeter_triangle(sides):\n    '''\n    Write a function to find the perimeter of a triangle from the number of sides.\n    '''\n    perimeter = sides*(sides + 1)\n    return perimeter\ndef perimeter_hexagon(sides):\n    '''\n    Write a function to find the perimeter of a hexagon from the number of sides.\n    '''\n    perimeter = sides*(2*sides + 3)\n    return perimeter\ndef perimeter_octagon(sides):\n    '''\n    Write a function to find the perimeter of an octagon from the number of sides.\n    '''\n    perimeter = sides*(2*sides + 2)\n    return perimeter\ndef perimeter_kite(sides):\n    '''\n    Write a function to find the perimeter of a kite from the number of sides.\n    '''\n    perimeter = 4*sides\n    return perimeter\ndef perimeter_octagon_shell(sides, h):\n    '''\n    Write a function to find the perimeter of a octagon shell from the number of sides and the height of the octagon shell.\n    '''\n    perimeter = 4*(2*sides + h)\n    return perimeter\ndef perimeter_circle",
        "num_ids": 25
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n",
        "num_ids": 8
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5 + a*5*math.sqrt(5)\n",
        "num_ids": 20
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (5*a)\n",
        "num_ids": 10
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5 + a*2\n",
        "num_ids": 12
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n",
        "num_ids": 8
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n",
        "num_ids": 8
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    counter = 0\n    for word in s.split():\n        if word =='std':\n            counter += 1\n    return counter\n",
        "num_ids": 33
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occurance = 0\n    for i in s:\n        if i =='std':\n            occurance += 1\n    return occurance\n",
        "num_ids": 34
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n    \nprint(count_occurance('this is a test'))\n",
        "num_ids": 27
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count\n    \ndef find_longest_substring(s):\n    '''\n    Write a function to find the longest substring in a string with k unique characters.\n    '''\n    occurances = {}\n    max_length = 0\n    start = 0\n    for i in range(len(s)):\n        if s[i] in occurances:\n            occurances[s[i]] += 1\n        else:\n            occurances[s[i]] = 1\n        while len(occurances) > k:\n            occurances[s[start]] -= 1\n            if occurances[s[start]] == 0:\n                del occurances[s[start]]\n            start += 1\n        max_length = max(max_length, i - start + 1)\n    return max_length\n    \ndef substrings_with_k_distinct(s, k):\n    '''\n    Write a function to find the longest substring in a string with k distinct characters.\n    '''\n    occurances = {}\n    max_length = 0\n    start = 0\n    for i in range(len(s)):\n        if s[i] in occurances:\n            occurances[s[i]] += 1\n        else:\n            occurances[s[i]] = 1\n        while len(occurances) > k:\n            occurances[s[start]] -= 1\n            if occurances[s[start]] == 0:\n                del occurances[s[start]]\n            start += 1\n        max_length = max(max_length, i - start + 1)\n    return max_length\n    \ndef longest_substring_without_repeating_char(s):\n    '''\n    Write a function to find the longest substring in a string without repeating characters.\n    '''\n    start = 0\n    max_length = 0\n    occurances = {}\n    for i in range(len(s)):\n        if s[i] in occurances:\n            occurances[s[i]] += 1\n            start = max(start, occurances[s[i]])\n        else:\n            occurances[s[i]] = 1\n        max_length = max(max_length, i - start + 1)\n    return max_length\n",
        "num_ids": 109
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count(\"std\")\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occurence = s.count('std')\n    return occurence\n",
        "num_ids": 20
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all(type(element) == test_tuple[0] for element in test_tuple)\n",
        "num_ids": 27
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all([type(i)==type(test_tuple[0]) for i in test_tuple])\n",
        "num_ids": 29
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    elements=list(test_tuple)\n    return all(type(elements[0])==type(element) for element in elements)\n",
        "num_ids": 36
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if(len(test_tuple) == 0):\n        return True\n    else:\n        return all(isinstance(x,type(test_tuple[0])) for x in test_tuple)\n",
        "num_ids": 52
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if all(type(x) == type(test_tuple[0]) for x in test_tuple):\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_list = list(test_tuple)\n    type_list = [type(i) for i in test_list]\n    if type_list.count(type_list[0]) == len(type_list):\n        return True\n    else:\n        return False\n",
        "num_ids": 67
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    print('Given tuple: {}'.format(test_tuple))\n    test_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= test_type:\n            return False\n    return True\n",
        "num_ids": 63
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    try:\n        assert type(test_tuple) == tuple\n    except AssertionError:\n        return False\n    else:\n        return True\n",
        "num_ids": 38
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in test_tuple:\n        if type(i)!= type(test_tuple[0]):\n            return False\n    return True\n",
        "num_ids": 38
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    unique = set(test_tuple)\n    if len(unique) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # We'll need to use the counter function, so import it first\n    from collections import Counter\n",
        "num_ids": 24
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return arr[0]\n    else:\n        if arr[0] == x:\n            return is_majority(arr[1:], n - 1, x)\n        else:\n            return is_majority(arr[1:], n - 1, x)\n",
        "num_ids": 70
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # We start by getting the index of the first element of the array that is greater than or equal to the given element\n    # We then iterate through the rest of the array, and return True if the element at the current index is the majority element, else False\n    index = get_first_index(arr, x, True)\n    return is_majority_element(arr, n, index, x)\n",
        "num_ids": 92
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    return arr.count(x) > n//2\n",
        "num_ids": 15
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    arr_len = len(arr)\n    if arr_len == 0:\n        return False\n    if arr_len == 1:\n        return arr[0] == x\n",
        "num_ids": 43
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Find the number of times the element appears and return the result\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n / 2\n",
        "num_ids": 54
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # count = 0\n    # for i in range(len(arr)):\n    #     if arr[i] == x:\n    #         count += 1\n    # if count > (n/2):\n    #     return True\n    # return False\n",
        "num_ids": 62
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # count = 0\n    # for i in arr:\n    #     if i == x:\n    #         count += 1\n    # if count > n/2:\n    #     return True\n    # else:\n    #     return False\n",
        "num_ids": 59
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n",
        "num_ids": 13
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        n &= (n - 1)\n        count += 1\n    return count \n    \ndef count_Set_Bits_Recursive(n):\n    if n == 0:\n        return 0\n    return count_Set_Bits_Recursive(n & (n - 1)) + 1\n    \ndef Number_of_1_bits(number):\n    '''\n    Write a python function to count the number of 1 bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (number):\n        count += number & 1\n        number >>= 1\n    return count\n    \ndef Number_of_1_bits_Recursive(number):\n    if number == 0:\n        return 0\n    return number & 1 + Number_of_1_bits_Recursive(number >> 1)\n    \ndef print_bits(number):\n    '''\n    Write a python function to convert a decimal number into it's binary representation and print it.\n    '''\n    bits = []\n    while (number):\n        bits.append(number % 2)\n        number //= 2\n    bits.reverse()\n    print(bits)\n    \ndef print_bits_Recursive(number):\n    if number == 0:\n        return []\n    return [number % 2] + print_bits_Recursive(number >> 1)\n    \ndef is_power_of_2(number):\n    '''\n    Write a python function to check whether a given number is a power of 2 or not.\n    '''\n    if number == 1:\n        return True\n    if number == 0:\n        return False\n    if number & (number - 1)!= 0:\n        return False\n    return is_power_of_2(number >> 1)\n",
        "num_ids": 56
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n",
        "num_ids": 13
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # logic\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    if n < 0:\n        n = n & 0xFFFFFFFF\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count=0\n    while(n):\n        if n&1:\n            count+=1\n        n=n>>1\n    return count\n",
        "num_ids": 36
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    #TODO: Implement me\n    # pass\n    return n & (n-1)\n",
        "num_ids": 25
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[::2]\n",
        "num_ids": 10
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str=str[1::2]\n    return str\n",
        "num_ids": 16
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if str == None or str == \"\":\n        return \"Invalid string\"\n    else:\n        new_string = \"\"\n        for i in range(len(str)):\n            if i % 2 == 0:\n                new_string += str[i]\n        return new_string\n",
        "num_ids": 68
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = str[::2]\n    print(str)\nodd_values_string('fghi')\n",
        "num_ids": 28
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    output = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            output += str[i]\n    return output\n",
        "num_ids": 40
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[::2]\n    \ndef reverse_string(str):\n    '''\n    Write a python function to reverse a given string\n    '''\n    return str[::-1]\n    \ndef remove_words_from_string(str, word):\n    '''\n    Write a python function to remove the given word from the given string.\n    '''\n    return str.replace(word, \"\")\n    \ndef check_string_in_string(str1, str2):\n    '''\n    Write a python function to check if the given word is present in the given string.\n    '''\n    return str1.find(str2)\n    \ndef check_if_string_is_empty(str1):\n    '''\n    Write a python function to check if the given string is empty or not.\n    '''\n    return str1.strip() == \"\"\n    \ndef remove_whitespace_from_string(str1):\n    '''\n    Write a python function to remove the whitespaces from a given string.\n    '''\n    return \"\".join(str1.split())\n    \ndef get_nth_word_from_string(str1, n):\n    '''\n    Write a python function to get the nth word from the given string.\n    '''\n    return str1.split()[n]\n    \ndef count_number_of_words_in_string(str1):\n    '''\n    Write a python function to count the number of words in a given string.\n    '''\n    return len(str1.split())\n    \ndef remove_all_occurence_of_a_word_in_string(str1, word):\n    '''\n    Write a python function to remove all the occurences of the given word from the given string.\n    '''\n    return str1.replace(word, \"\")\n    \ndef count_occurence_of_a_word_in_string(str1, word):\n    '''\n    Write a python function to count the occurences of the given word in the given string.\n    '''\n    return str1.count(word)\n    \ndef capitalize_first_letter_of_string(str1):\n    '''\n    Write a python function to capitalize the first letter of the given string.\n    '''\n    return str1[0].upper() + str1[1:]\n    \ndef reverse_string_using_recursion(str1):\n    '''\n    Write a python function to reverse a given string using recursion.\n    '''\n    if len(str1) > 1:\n        return str1[len(str1) - 1] + reverse_string_using_recursion(str1[:len(str1) - 1])\n    return str1\n    \ndef factorial_recursion(num):\n    '''\n    Write a python function to calculate the factorial of the given number using recursion.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    return num * factorial_recursion(num - 1)\n    \ndef is_palindrome(str1):\n    '''\n    Write a python function to check if the given string is a palindrome or not.\n    '''\n    return str1[::-1] == str1\n    \ndef print_string_without_spaces(str1):\n    '''\n    Write a python function to print the string without the spaces.\n    '''\n    return str1.replace(\" \", \"\")\n    \ndef count_number_of_spaces_in_string(str1):\n    '''\n    Write a python function to count the number of spaces in a given string.\n    '''\n    return str1.count(\" \")\n    \ndef print_alternate_letters_in_string(str1):\n    '''\n    Write a python function to print the alternate letters in the given string.\n    '''\n    for i in range(0, len(str1), 2):\n        print(str1[i])\n    \ndef print_alternate_letters_in_string_using_for_loop(str1):\n    '''\n    Write a python function to print the alternate letters in the given string.\n    '''\n    for i in range(0, len(str1), 2):\n        print(str1[i])\n    \ndef print_alternate_letters_in_string_using_while_loop(str1):\n    '''\n    Write a python function to print the alternate letters in the given string.\n    '''\n    i = 0\n    while i < len(str1):\n        print(str1[i])\n        i += 2\n        \ndef print_alternate_letters_in_string_using_continue(str1):\n    '''\n    Write a python function to print the alternate letters in the given string.\n    '''\n    for i in range(0, len(str1), 2):\n        if i == len(str1) - 1:\n            continue\n        print(str1[i])\n    \ndef print_alternate_letters_in_string_using_continue_and_break(str1):\n    '''\n    Write a python function to print the alternate letters in the given string.\n    '''\n    for i in range(0, len(str1), 2):\n        if i == len(str1) - 1:\n            break\n        print(str1[i])\n    \ndef print_alternate_letters_in_string_using_break(str1):\n    '''\n    Write a python function to print the alternate letters in the given string.\n    '''\n    for i in range(0, len(str1), 2):\n        if i == len(str1) - 1:\n            break\n        print(str1[i])\n    \ndef remove_spaces_from_string(str1):\n    '''\n    Write a python function to remove spaces from a given string.\n    '''\n    return str1.replace(\" \", \"\")\n    \ndef print_first_letter_in_string(str1):\n    '''\n    Write a python function to print the first letter of the given string.\n    '''\n    return str1[0]\n    \ndef print_middle_3_letters(str1):\n    '''\n    Write a python function to print the middle 3 letters of the given string.\n    '''\n    return str1[len(str1) // 2 - 1: len(str1) // 2 + 2]\n    \ndef print_middle_3_letters_using_index(str1):\n    '''\n    Write a python function to print the middle 3 letters of the given string.\n    '''\n    return str1[len(str1) // 2 - 1: len(str1) // 2 + 2]\n    \ndef print_middle_3_letters_using_slice(str1):\n    '''\n    Write a python function to print the middle 3 letters of the given string.\n    '''\n    return str1[len(str1) // 2 - 1: len(str1) // 2 + 2]\n    \ndef print_middle_3_letters_using_slice_in_reverse(str1):\n    '''\n    Write a python function to print the middle 3 letters of the given string.\n    '''\n    return str1[-len(str1) // 2:]\n    \ndef print_string_in_reverse_order(str1):\n    '''\n    Write a python function to print the given string in reverse order.\n    '''\n    return str1[::-1]\n    \ndef is_palindrome_without_slice(str1):\n    '''\n    Write a python function to check if the given string is a palindrome or not.\n    '''\n    return str1 == str1[::-1]\n    \ndef is_palindrome_without_slice_in_reverse(str1):\n    '''\n    Write a python function to check if the given string is a palindrome or not.\n    '''\n    return str1 == str1[::-1]\n    \ndef is_palindrome_without_slice_in_reverse_using_while_loop(str1):\n    '''\n    Write a python function to check if the given string is a palindrome or not.\n    '''\n    i = 0\n    while i < len(str1):\n        if str1[i]!= str1[len(str1) - 1 - i]:\n            return False\n        i += 1\n    return True\n    \ndef is_palindrome_withou",
        "num_ids": 64
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = list(str)\n    for i in range(1,len(str),2):\n        str[i-1] = ''\n    return ''.join(str)\n",
        "num_ids": 44
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for index, value in enumerate(str):\n        if index % 2 == 0:\n            result = result + value\n    return result\n",
        "num_ids": 39
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if len(str)==0:\n        return \"Empty String\"\n    if len(str)==1:\n        return str\n    for i in range(len(str)-1):\n        if i%2==0:\n            print(str[i])\n    return str\n",
        "num_ids": 67
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    lst = list(str)\n    for i in range(1,len(lst),2):\n        del lst[i]\n    return ''.join(lst)\n",
        "num_ids": 45
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "num_ids": 13
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if(a<=b and a<=c):\n        return a\n    elif(b<=a and b<=c):\n        return b\n    else:\n        return c\n",
        "num_ids": 47
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n",
        "num_ids": 41
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    elif c <= a and c <= b:\n        return c\n    else:\n        return 'None'\n",
        "num_ids": 59
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n",
        "num_ids": 41
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\n",
        "num_ids": 51
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<=b and a<=c:\n        min = a\n    elif b<=a and b<=c:\n        min = b\n    else:\n        min = c\n    return min\n",
        "num_ids": 52
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n    \ndef max_of_three(a,b,c): \n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    return max(a,b,c)\n    \ndef avg_of_three(a,b,c): \n    '''\n    Write a function to find average of three numbers.\n    '''\n    return (a + b + c)/3\n    \ndef is_even(n): \n    '''\n    Write a function to check if a given number is even or not.\n    '''\n    return n%2 == 0\n    \ndef is_odd(n): \n    '''\n    Write a function to check if a given number is odd or not.\n    '''\n    return n%2!= 0\n    \ndef is_perfect_square(n): \n    '''\n    Write a function to check if a given number is perfect square or not.\n    '''\n    return int(n**(1/2)) == n**(1/2)\n    \ndef is_perfect_square2(n): \n    '''\n    Write a function to check if a given number is perfect square or not.\n    '''\n    return n**0.5 == int(n**0.5)\n    \ndef is_perfect_square3(n): \n    '''\n    Write a function to check if a given number is perfect square or not.\n    '''\n    return n**0.5%1 == 0\n    \ndef is_perfect_square4(n): \n    '''\n    Write a function to check if a given number is perfect square or not.\n    '''\n    return n**0.5%1 == 0\n    \ndef factorial(n): \n    '''\n    Write a function to compute factorial of a given number.\n    '''\n    return 1 if (n==0 or n==1) else n*factorial(n-1)\n    \ndef fibonacci(n): \n    '''\n    Write a function to compute nth number of fibonacci sequence.\n    '''\n    a,b = 0,1\n    for i in range(n):\n        a,b = b,a+b\n    return a\n    \ndef find_missing_element(lst): \n    '''\n    Write a function to find missing element of a list.\n    '''\n    return (len(lst)*(len(lst)+1))/2 - sum(lst)\n    \ndef find_missing_element2(lst): \n    '''\n    Write a function to find missing element of a list.\n    '''\n    return len(lst)*(len(lst)+1)/2 - sum(lst)\n    \ndef generate_palindrome(n): \n    '''\n    Write a function to generate all palindrome of given number.\n    '''\n    return [i for i in range(n,0,-1) if str(i) == str(i)[::-1]]\n    \ndef is_first_and_last_char_same(s): \n    '''\n    Write a function to check if a given string is palindrome or not.\n    '''\n    return s[0] == s[-1]\n    \ndef is_second_and_last_char_same(s): \n    '''\n    Write a function to check if a given string is palindrome or not.\n    '''\n    return s[1] == s[-2]\n    \ndef is_palindrome(s): \n    '''\n    Write a function to check if a given string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome2(s): \n    '''\n    Write a function to check if a given string is palindrome or not.\n    '''\n    if len(s)==0 or len(s)==1: return True\n    else: return s[0]==s[-1] and is_palindrome2(s[1:-1])\n    \ndef is_palindrome3(s): \n    '''\n    Write a function to check if a given string is palindrome or not.\n    '''\n    if len(s)==0 or len(s)==1: return True\n    else: return s[0]==s[-1] and is_palindrome3(s[1:-1])\n    \ndef is_palindrome4(s): \n    '''\n    Write a function to check if a given string is palindrome or not.\n    '''\n    if len(s)==0 or len(s)==1: return True\n    else: return s[0]==s[-1] and is_palindrome4(s[1:-1])\n    \ndef is_palindrome5(s): \n    '''\n    Write a function to check if a given string is palindrome or not.\n    '''\n    if len(s)==0 or len(s)==1: return True\n    else: return s[0]==s[-1] and is_palindrome5(s[1:-1])\n    \ndef is_palindrome6(s): \n    '''\n    Write a function to check if a given string is palindrome or not.\n    '''\n    if len(s)==0 or len(s)==1: return True\n    else: return s[0]==s[-1] and is_palindrome6(s[1:-1])\n    \ndef is_palindrome7(s): \n    '''\n    Write a function to check if a given string is palindrome or not.\n    '''\n    if len(s)==0 or len(s)==1: return True\n    else: return s[0]==s[-1] and is_palindrome7(s[1:-1])\n    \ndef is_palindrome8(s): \n    '''\n    Write a function to check if a given string is palindrome or not.\n    '''\n    if len(s)==0 or len(s)==1: return True\n    else: return s[0]==s[-1] and is_palindrome8(s[1:-1])\n    \ndef is_palindrome9(s): \n    '''\n    Write a function to check if a given string is palindrome or not.\n    '''\n    if len(s)==0 or len(s)==1: return True\n    else: return s[0]==s[-1] and is_palindrome9(s[1:-1])\n    \ndef is_palindrome10(s): \n    '''\n    Write a function to check if a given string is palindrome or not.\n    '''\n    if len(s)==0 or len(s)==1: return True\n    else: return s[0]==s[-1] and is_palindrome10(s[1:-1])\n    \ndef is_palindrome11(s): \n    '''\n    Write a function to check if a given string is palindrome or not.\n    '''\n    if len(s)==0 or len(s)==1: return True\n    else: return s[0]==s[-1] and is_palindrome11(s[1:-1])\n    \ndef is_palindrome12(s): \n    '''\n    Write a function to check if a given string is palindrome or not.\n    '''\n    if len(s)==0 or len(s)==1: return True\n    else: return s[0]==s[-1] and is_palindrome12(s[1:-1])\n    \ndef is_palindrome13(s): \n    '''\n    Write a function to check if a given string is palindrome or not.\n    '''\n    if len(s)==0 or len(s)==1: return True\n    else: return s[0]==s[-1] and is_palindrome13(s[1:-1])\n    \ndef is_palindrome14(s): \n    '''\n    Write a function to check if a given string is palindrome or not.\n    '''\n    if len(s)==0 or len(s)==1: return True\n    else: return s[0]==s[-1",
        "num_ids": 34
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "num_ids": 13
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if b<c:\n            return b\n        elif c<a:\n            return a\n        else:\n            return c\n    else:\n        if a<c:\n            return a\n        elif c<b:\n            return b\n        else:\n            return c\n",
        "num_ids": 75
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (n&l)==0 and (n&r)==0:\n        return 1\n    else:\n        return 0\n",
        "num_ids": 33
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if i&n:\n            return 0\n    return 1\n",
        "num_ids": 30
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n>=l and n<=r:\n        return all([(n>>i)&1 == 0 for i in range(l,r+1)])\n    return False\n",
        "num_ids": 45
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = 0\n    for i in range(l,r+1):\n        mask = mask | (1<<i)\n    if (mask == n):\n        return True\n    else:\n        return False\n",
        "num_ids": 51
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return(bin(n)[2:].count('0')==l and bin(n)[2:].count('1')==r)\n",
        "num_ids": 34
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l==r:\n        return True\n    else:\n        if l^r<0xFFFFFFFF:\n            return False\n        else:\n            return True\n",
        "num_ids": 41
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return n & ((2 ** l) - 1) == 0\n",
        "num_ids": 17
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    res = 0\n    for i in range(l,r+1):\n        if ((n & (1 << i)) > 0):\n            res = res + 1\n    if (res == 0):\n        return True\n    else:\n        return False\n        \ndef all_Bits_Set_In_The_Given_Range_Using_For_Loop(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    res = 0\n    for i in range(l,r+1):\n        if ((n & (1 << i)) > 0):\n            res = res + 1\n    if (res == 0):\n        return True\n    else:\n        return False\n        \ndef all_Bits_Set_In_The_Given_Range_Using_Bitwise_Operators(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    res = 0\n    mask = 1\n    for i in range(l,r+1):\n        mask = mask << 1\n        if ((n & mask) > 0):\n            res = res + 1\n    if (res == 0):\n        return True\n    else:\n        return False\n        \ndef all_Bits_Set_In_The_Given_Range_Using_Loop_and_Bitshift(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    res = 0\n    mask = 1\n    for i in range(l,r+1):\n        mask = mask << 1\n        if ((n & mask) > 0):\n            res = res + 1\n    if (res == 0):\n        return True\n    else:\n        return False\n        \ndef all_Bits_Set_In_The_Given_Range_Using_Loop_and_Bitshift2(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    res = 0\n    mask = 1\n    for i in range(l,r+1):\n        if (mask & n):\n            res = res + 1\n        mask = mask << 1\n    if (res == 0):\n        return True\n    else:\n        return False\n",
        "num_ids": 67
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # import math\n    # i = 0\n    # while i<len(n):\n    #     if(n[i] not in l and n[i] not in r):\n    #         return False\n    #     i += 1\n    # return True\n    return True if all(True if x not in l and x not in r else False for x in n) else False\n",
        "num_ids": 90
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (n&l)==0 and (n&r)==0 \n    \n    \n",
        "num_ids": 25
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = sorted(arr[:n])\n    arr.extend(sorted(arr[n:], reverse = True))\n    return arr\n",
        "num_ids": 36
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Basically this function moves all positive elements (from the end) to the front of the array\n    # Then, for every negative element we find, move it to the back of the array\n    # Then we return the array.\n    arr = list(arr)\n    \n    # First, we remove negative elements from the end\n    while (arr[-1] < 0):\n        arr.pop()\n",
        "num_ids": 92
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative = []\n    positive = []\n    for x in arr:\n        if x < 0:\n            negative.append(x)\n        else:\n            positive.append(x)\n    negative.extend(positive)\n    return negative\n",
        "num_ids": 59
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative = []\n    positive = []\n    for elem in arr:\n        if elem < 0:\n            negative.append(elem)\n        else:\n            positive.append(elem)\n    return negative + positive\n",
        "num_ids": 56
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    new_arr = []\n    for i in range(n):\n        new_arr.append(arr[i])\n    for i in range(n, len(arr)):\n        new_arr.append(arr[i])\n    return new_arr\n    \nprint re_arrange_array([1, -2, 3, -4, 5, 6, -7, 8, -9], 5)\n",
        "num_ids": 97
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    nums = []\n    for i in range(n, len(arr)):\n        nums.append(arr[i])\n    for i in range(n):\n        nums.append(arr[i])\n    return nums\n    \n",
        "num_ids": 60
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if len(arr) < n:\n        return arr\n    arr.sort()\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[0] = arr[0], arr[i]\n            break\n    return arr\n",
        "num_ids": 67
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return [-arr[i] for i in range(n)] + [arr[i] for i in range(n, len(arr)) if arr[i] >= 0]\n",
        "num_ids": 42
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    new_arr = []\n    for i in range(n):\n        new_arr.append(arr[i])\n    i = n\n    while i < len(arr):\n        new_arr.append(arr[i])\n        i += 1\n    return new_arr\n",
        "num_ids": 67
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    j = 0\n    while i < n:\n        if arr[i] < 0:\n            i += 1\n        else:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j += 1\n    return arr\n",
        "num_ids": 71
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if char=='':\n        return str1\n    else:\n        return str1.replace(' ','%s')%char\n",
        "num_ids": 33
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','')\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = list(str1)\n    for i in range(len(str1)):\n        if str1[i] =='':\n            str1[i] = char\n    return ''.join(str1)\n",
        "num_ids": 55
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','')\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new = str1.replace(' ', char)\n    return new\n",
        "num_ids": 18
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] =='':\n            str1[i] = char\n    return str1\n",
        "num_ids": 40
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','')\n",
        "num_ids": 13
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #declare a max heap\n    maxheap = []\n    #put the first n elements into the max heap\n    for i in range(n):\n        heapq.heappush(maxheap,list1[i])\n    #go through the rest of the elements in the list and check if the value of the nth element is larger than the nth element of the max heap. If it is, remove the max element and add the value of the current element\n    for i in range(n,len(list1)):\n        if list1[i] > maxheap[0]:\n            heapq.heappop(maxheap)\n            heapq.heappush(maxheap,list1[i])\n    #return the list of n largest elements\n    return maxheap\n",
        "num_ids": 187
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse = True)\n    return list1[0:n]\n",
        "num_ids": 23
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)\n",
        "num_ids": 16
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2=sorted(list1,reverse=True)[:n]\n    return list2\n",
        "num_ids": 25
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n    \ndef run_larg_nnum():\n    l = [1,8,9,10,5,3,4,11,7,6]\n    print larg_nnum(l,3)\n    \ndef larg_small(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    return heapq.nsmallest(n,list1)\n    \ndef run_larg_small():\n    l = [1,8,9,10,5,3,4,11,7,6]\n    print larg_small(l,3)\n    \ndef smallest(list1):\n    '''\n    Write a function that takes in a list and returns the smallest number in the list.\n    '''\n    return heapq.nsmallest(1,list1)\n    \ndef run_smallest():\n    l = [1,8,9,10,5,3,4,11,7,6]\n    print smallest(l)\n",
        "num_ids": 58
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=list1[:n]\n    heapq.heapify(heap)\n    for i in list1[n:]:\n        if i > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,i)\n    return heap\n",
        "num_ids": 78
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    for i in list1:\n        if len(heap) < n:\n            heapq.heappush(heap,i)\n        elif i > heap[0]:\n            heapq.heapreplace(heap,i)\n    return heap\n",
        "num_ids": 71
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    else:\n        l = []\n        for i in range(n):\n            max = heapq.nlargest(1,list1)\n            list1.remove(max[0])\n            l.append(max[0])\n        return l\n",
        "num_ids": 75
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    n=len(list1)\n    if(n>len(list1)):\n        n=len(list1)\n    return list1[n-1:n]\n",
        "num_ids": 44
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n < 0:\n        print('Invalid Input')\n        return\n    heap=[]\n    for i in range(n):\n        heapq.heappush(heap,list1[i])\n    for i in range(n,len(list1)):\n        if list1[i]>heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,list1[i])\n    return heap\n    \ndef find_val(list1,val):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the nth to last item from the list.\n    '''\n    if val < 0:\n        print('Invalid Input')\n        return\n    #n=len(list1)-val\n    #return list1[n]\n    #print(list1[n])\n    #return list1[val]\n    return list1[-val]\n",
        "num_ids": 67
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 3.14 * r * h\n",
        "num_ids": 12
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    cylinderarea=pi*r**2\n    return cylinderarea+2*pi*r*h\n",
        "num_ids": 26
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    s = 2*3.1415*r*h\n    return s\n",
        "num_ids": 20
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    a=2*r*pi*r\n    return a+2*r*pi*h+2*r*h**2\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    a=4*pi*r**2\n    return a\ndef lateralsurface_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder when the\n    sphere is a cylinder.\n    '''\n    a=4*pi*r*r+(4/3)*pi*r**3+2*pi*r*r*h+2*pi*r*h**2\n    return a\ndef c(x,y):\n    '''\n    Write a function to find the value of c when the input is of type complex.\n    '''\n    a=x**2+y**2\n    return a\ndef sin(x,y):\n    '''\n    Write a function to find the value of sin when the input is of type complex.\n    '''\n    a=x**2+y**2\n    return a**0.5\ndef cos(x,y):\n    '''\n    Write a function to find the value of cos when the input is of type complex.\n    '''\n    a=x**2+y**2\n    return a**0.5/a\ndef log(x,y):\n    '''\n    Write a function to find the value of log when the input is of type complex.\n    '''\n    a=x**2+y**2\n    return a**0.5\ndef tan(x,y):\n    '''\n    Write a function to find the value of tan when the input is of type complex.\n    '''\n    a=x**2+y**2\n    return a**0.5/a\ndef atan(x,y):\n    '''\n    Write a function to find the value of atan when the input is of type complex.\n    '''\n    a=x**2+y**2\n    return a**0.5/a\ndef cotan(x,y):\n    '''\n    Write a function to find the value of cotan when the input is of type complex.\n    '''\n    a=x**2+y**2\n    return a**0.5/a\ndef acotan(x,y):\n    '''\n    Write a function to find the value of acotan when the input is of type complex.\n    '''\n    a=x**2+y**2\n    return a**0.5/a\ndef arctan(x,y):\n    '''\n    Write a function to find the value of arctan when the input is of type complex.\n    '''\n    a=x**2+y**2\n    return a**0.5/a\ndef hypot(x,y):\n    '''\n    Write a function to find the value of hypot when the input is of type complex.\n    '''\n    a=x**2+y**2\n    return a**0.5\ndef exp(x,y):\n    '''\n    Write a function to find the value of exp when the input is of type complex.\n    '''\n    a=x**2+y**2\n    return a**0.5/a\ndef log2(x,y):\n    '''\n    Write a function to find the value of log2 when the input is of type complex.\n    '''\n    a=x**2+y**2\n    return a**0.5/a\ndef expm1(x,y):\n    '''\n    Write a function to find the value of expm1 when the input is of type complex.\n    '''\n    a=x**2+y**2\n    return a**0.5/a\ndef log10(x,y):\n    '''\n    Write a function to find the value of log10 when the input is of type complex.\n    '''\n    a=x**2+y**2\n    return a**0.5/a\ndef log1p(x,y):\n    '''\n    Write a function to find the value of log1p when the input is of type complex.\n    '''\n    a=x**2+y**2\n    return a**0.5/a\ndef lgamma(x,y):\n    '''\n    Write a function to find the value of lgamma when the input is of type complex.\n    '''\n    a=x**2+y**2\n    return a**0.5/a\ndef degrees(x,y):\n    '''\n    Write a function to find the value of degrees when the input is of type complex.\n    '''\n    a=x**2+y**2\n    return a**0.5/a\ndef radians(x,y):\n    '''\n    Write a function to find the value of radians when the input is of type complex.\n    '''\n    a=x**2+y**2\n    return a**0.5/a\ndef pi(x,y):\n    '''\n    Write a function to find the value of pi when the input is of type complex.\n    '''\n    a=x**2+y**2\n    return a**0.5/a\ndef e(x,y):\n    '''\n    Write a function to find the value of e when the input is of type complex.\n    '''\n    a=x**2+y**2\n    return a**0.5/a\ndef gamma(x,y):\n    '''\n    Write a function to find the value of gamma when the input is of type complex.\n    '''\n    a=x**2+y**2\n    return a**0.5/a\ndef loggamma(x,y):\n    '''\n    Write a function to find the value of loggamma when the input is of type complex.\n    '''\n    a=x**2+y**2\n    return a**0.5/a\ndef erf(x,y):\n    '''\n    Write a function to find the value of erf when the input is of type complex.\n    '''\n    a=x**2+y**2\n    return a**0.5/a\ndef erfc(x,y):\n    '''\n    Write a function to find the value of erfc when the input is of type complex.\n    '''\n    a=x**2+y**2\n    return a**0.5/a\ndef sqrt(x,y):\n    '''\n    Write a function to find the value of sqrt when the input is of type complex.\n    '''\n    a=x**2+y**2\n    return a**0.5/a\ndef pi2(x,y):\n    '''\n    Write a function to find the value of pi2 when the input is of type complex.\n    '''\n    a=x**2+y**2\n    return a**0.5/a\ndef sqrt2(x,y):\n    '''\n    Write a function to find the value of sqrt2 when the input is of type complex.\n    '''\n    a=x**2+y**2\n    return a**0.5/a\ndef sqrt3(x,y):\n    '''\n    Write a function to find the value of sqrt3 when the input is of type complex.\n    '''\n    a=x**2+y**2\n    return a**0.5/a\ndef sqrt5(x,y):\n    '''\n    Write a function to find the value of sqrt5 when the input is of type complex.\n    '''\n    a=x**2+y**2\n    return a**0.5/a\ndef fmod(x,y):\n    '''\n    Write a function to find the value of fmod when the input is of type complex.\n    '''\n    a=x**2+y**2\n    return a**0.5/a\ndef floor(x,y):\n    '''\n    Write a function to find the value of floor when the input is of type complex.\n    '''\n    a=x**2+y**2\n    return a**0.5/a\ndef ceil(x,y):\n    '''\n    Write a function to find the value of ceil when the input is of type complex.\n    '''\n    a=x**2+y**2\n    return a*",
        "num_ids": 17
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    # r = radius of the cylinder\n    # h = height of the cylinder\n    lateral = 2*pi*r*h\n    return lateral\n",
        "num_ids": 43
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi=math.pi\n    return r**2*pi*3 + 2*pi*r*h\n",
        "num_ids": 27
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return np.pi * (r**2 - (r-h)**2)\n",
        "num_ids": 22
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    V = pi*r**2\n    SA = V+2*r*h\n    return SA\n",
        "num_ids": 33
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # import math\n    # pi=math.pi\n    # r=float(r)\n    # h=float(h)\n    # a=pi*r**2\n    # s=2*a+2*r*h\n    # print(s)\n",
        "num_ids": 64
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    theta = 2*math.pi*(1-2*r/h)\n    return (2*math.pi*r**2 + 2*math.pi*r*h - 2*math.pi*r*math.sin(theta))/2\n",
        "num_ids": 63
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    l = float(l)\n    return l**3\n",
        "num_ids": 16
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l*l*l\n",
        "num_ids": 10
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    import math\n    return l**3\n    \ndef area_square(s):\n    '''\n    Write a function to find the area of a square given its side length.\n    '''\n    return s**2\n    \ndef area_rectangle(l,b):\n    '''\n    Write a function to find the area of a rectangle given its length and width.\n    '''\n    return l*b\n    \ndef area_triangle(b,h):\n    '''\n    Write a function to find the area of a triangle given its base and height.\n    '''\n    return (1/2)*b*h\n    \ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle given its radius.\n    '''\n    import math\n    return math.pi*r**2\n    \ndef area_trapezium(b,a,h):\n    '''\n    Write a function to find the area of a trapezium given its base, height, and top length.\n    '''\n    return 1/2*b*(a+h)\n    \ndef area_rhombus(a,b):\n    '''\n    Write a function to find the area of a rhombus given its base and height.\n    '''\n    return 1/2*a*b\n    \ndef area_parallelogram(a,b):\n    '''\n    Write a function to find the area of a square given its length and width.\n    '''\n    return a*b\n    \ndef area_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle given its length and width.\n    '''\n    return a*b\n    \ndef area_ellipse(a,b):\n    '''\n    Write a function to find the area of an ellipse given its a and b lengths.\n    '''\n    from math import pi\n    return pi*a*b\n    \ndef area_rhombus(a,b):\n    '''\n    Write a function to find the area of a rhombus given its base and height.\n    '''\n    return 1/2*a*b\n    \ndef area_cuboid(a,b,c):\n    '''\n    Write a function to find the area of a cuboid given its length, width, and height.\n    '''\n    return a*b*c\n    \ndef area_pyramid(a,b,c):\n    '''\n    Write a function to find the area of a pyramid given its base, height, and top length.\n    '''\n    return 1/2*a*c\n    \ndef area_sphere(r):\n    '''\n    Write a function to find the area of a sphere given its radius.\n    '''\n    from math import pi\n    return 4*pi*r**2\n    \ndef area_cylinder(r,h):\n    '''\n    Write a function to find the area of a cylinder given its radius and height.\n    '''\n    from math import pi\n    return 2*pi*r*(r+h)\n    \ndef area_cone(r,h):\n    '''\n    Write a function to find the area of a cone given its radius and height.\n    '''\n    from math import pi\n    return pi*r**2*h/3\n    \ndef area_sphere(r):\n    '''\n    Write a function to find the area of a sphere given its radius.\n    '''\n    from math import pi\n    return 4*pi*r**2\n    \ndef volume_pyramid(l,b,h):\n    '''\n    Write a function to find the volume of a pyramid given its length, width, and height.\n    '''\n    return 1/3*l*b*h\n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given its radius and height.\n    '''\n    from math import pi\n    return 1/3*pi*r**2*h\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given its radius.\n    '''\n    from math import pi\n    return 4/3*pi*r**3\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given its radius and height.\n    '''\n    from math import pi\n    return 1/3*pi*r**2*h\n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given its radius and height.\n    '''\n    from math import pi\n    return 1/3*pi*r**2*h/3\n    \ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its length.\n    '''\n    return l**3\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given its radius.\n    '''\n    from math import pi\n    return 4/3*pi*r**3\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given its radius and height.\n    '''\n    from math import pi\n    return 1/3*pi*r**2*h\n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given its radius and height.\n    '''\n    from math import pi\n    return 1/3*pi*r**2*h/3\n    \ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its length.\n    '''\n    return l**3\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given its radius.\n    '''\n    from math import pi\n    return 4/3*pi*r**3\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given its radius and height.\n    '''\n    from math import pi\n    return 1/3*pi*r**2*h\n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given its radius and height.\n    '''\n    from math import pi\n    return 1/3*pi*r**2*h/3\n    \ndef volume_pyramid(l,b,h):\n    '''\n    Write a function to find the volume of a pyramid given its length, width, and height.\n    '''\n    return l*b*h\n    \ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its length.\n    '''\n    return l**3\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given its radius.\n    '''\n    from math import pi\n    return 4/3*pi*r**3\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given its radius and height.\n    '''\n    from math import pi\n    return 1/3*pi*r**2*h\n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given its radius and height.\n    '''\n    from math import pi\n    return 1/3*pi*r**2*h/3\n    \ndef volume_pyramid(l,b,h):\n    '''\n    Write a function to find the volume of a pyramid given its length, width, and height.\n    '''\n    return l*b*h\n    \ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its length.\n    '''\n    return l**3\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given its radius.\n    '''\n    from math import pi\n    return 4/3*pi*r**3\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given its radius and height.\n    '''\n    from math import pi\n    return 1/3*pi*r**2*h\n    \nde",
        "num_ids": 25
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    import math\n    l = float(l)\n    return l**3\n",
        "num_ids": 20
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n ^ (n & 0x55)\n",
        "num_ids": 14
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n ^ (n & (n-1))\n",
        "num_ids": 15
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = bin(n)[2:]\n    l = len(n)\n    count = 0\n    for i in range(l):\n        if n[i]=='0':\n            count += 1\n        else:\n            break\n    return count\n",
        "num_ids": 61
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    set_bits = 0\n    while (n): \n        if n & 1: \n            set_bits += 1\n        n >>= 1\n    return set_bits \n",
        "num_ids": 44
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return (n & 0x55555555) + ((n >> 1) & 0x55555555)\n",
        "num_ids": 29
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    \n    if n < 0:\n        return -1\n    \n    res = 0\n    while n:\n        res += (n % 2)\n        n = n >> 1\n    \n    return res\n",
        "num_ids": 50
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    \n    n = bin(n)[2:]\n    x = str(n)\n    a = 0\n    b = 0\n    for i in x:\n        if i == '0':\n            a = a + 1\n        elif i == '1':\n            b = b + 1\n    \n    return int(a*'0' + b*'1')\n",
        "num_ids": 88
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = n & 0x5555555555555555\n    n = n | (n >> 1)\n    n = n | (n >> 2)\n    n = n | (n >> 4)\n    n = n | (n >> 8)\n    n = n | (n >> 16)\n    n = n | (n >> 32)\n    return n\n",
        "num_ids": 88
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0:\n        return n\n    return even_bit_set_number(n & (n - 1))\n",
        "num_ids": 31
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    res = 0\n    while n:\n        res += n & 1\n        n >>= 1\n    return res\n",
        "num_ids": 29
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = Counter(test_list)\n    return occurences\n",
        "num_ids": 20
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    list_dict = {}\n    for item in test_list:\n        list_dict[item] = list_dict.get(item,0) + 1\n    return list_dict\n",
        "num_ids": 45
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = Counter(test_list)\n    return d\n",
        "num_ids": 16
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    freq_list = []\n    for element in test_list:\n        freq_list.append(element)\n    count = Counter(freq_list)\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for tup in test_list:\n        if tup not in occurences:\n            occurences[tup] = 0\n        occurences[tup] += 1\n    return occurences\n",
        "num_ids": 58
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for i in test_list:\n        if i in result:\n            result[i] += 1\n        else:\n            result[i] = 1\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # return dict(Counter(test_list))\n    return dict(test_list)\n    \ndef update_occurences(update_list,old_dict):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    new_dict = {}\n    for item in update_list:\n        if item in new_dict:\n            new_dict[item] += 1\n        else:\n            new_dict[item] = 1\n    return new_dict\n    \ndef compute_difference(dict1, dict2):\n    '''\n    Write a function that takes in two dictionaries and returns a dictionary representing the keys and values from both dictionaries with the values \n    differing.\n    '''\n    diff_dict = {}\n    for key in dict1:\n        if dict1[key]!= dict2[key]:\n            diff_dict[key] = dict1[key]\n    for key in dict2:\n        if dict1[key]!= dict2[key]:\n            diff_dict[key] = dict2[key]\n    return diff_dict\n    \ndef compute_intersection(dict1, dict2):\n    '''\n    Write a function that takes in two dictionaries and returns a dictionary representing the keys and values from both dictionaries with the values \n    common to both dictionaries.\n    '''\n    common_dict = {}\n    for key in dict1:\n        if key in dict2 and dict1[key] == dict2[key]:\n            common_dict[key] = dict1[key]\n    return common_dict\n    \ndef compute_union(dict1, dict2):\n    '''\n    Write a function that takes in two dictionaries and returns a dictionary representing the keys and values from both dictionaries with the values \n    union of both dictionaries.\n    '''\n    union_dict = {}\n    for key in dict1:\n        union_dict[key] = dict1[key]\n    for key in dict2:\n        if key not in union_dict:\n            union_dict[key] = dict2[key]\n    return union_dict\n",
        "num_ids": 69
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = {}\n    for key, value in test_list:\n        if key not in test_dict:\n            test_dict[key] = 1\n        else:\n            test_dict[key] += 1\n",
        "num_ids": 54
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    temp = []\n    for x in test_list:\n        temp.append(x[0])\n    occurences = Counter(temp)\n    return occurences\n",
        "num_ids": 42
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = Counter(test_list)\n    return occurences\ndef weighted_mean(list_of_tuples):\n    '''\n    Write a function that takes in a list of tuples and returns a tuple of two values. The first value is the weighted mean and the second value is the sum of the squared difference from the mean of the list to each tuple in the list.\n    '''\n    list_of_values = [i[0] for i in list_of_tuples]\n    list_of_weights = [i[1] for i in list_of_tuples]\n    weighted_mean = sum(list_of_values)*(1/len(list_of_values))\n    difference = sum([(i - weighted_mean)**2 for i in list_of_values])\n    return (weighted_mean, difference)\ndef split_me(text):\n    '''\n    Write a function that takes in a string and returns a list of words in the string. For example:\n    split_me(\"Hello, how are you?\")\n    should return [\"Hello\", \"how\", \"are\", \"you\"].\n    '''\n    return text.split()\ndef get_list_of_words(string_list):\n    '''\n    Write a function that takes in a list of strings and returns a list of the words that appear in the string list.\n    '''\n    word_list = []\n    for i in string_list:\n        for j in split_me(i):\n            word_list.append(j)\n    return word_list\ndef get_unique_words(string_list):\n    '''\n    Write a function that takes in a list of strings and returns a list of the unique words in the string list.\n    '''\n    return list(set(get_list_of_words(string_list)))\ndef get_first_word_of_sentence(string_list):\n    '''\n    Write a function that takes in a list of strings and returns the first word of the string list.\n    '''\n    first_word = string_list[0]\n    return first_word\ndef get_last_word_of_sentence(string_list):\n    '''\n    Write a function that takes in a list of strings and returns the last word of the string list.\n    '''\n    last_word = string_list[-1]\n    return last_word\ndef get_all_words_but_last_word(string_list):\n    '''\n    Write a function that takes in a list of strings and returns a list of all but the last word in the string list.\n    '''\n    return string_list[:-1]\ndef get_all_words_but_first_word(string_list):\n    '''\n    Write a function that takes in a list of strings and returns a list of all but the first word in the string list.\n    '''\n    return string_list[1:]\ndef get_all_words_but_last_but_first_word(string_list):\n    '''\n    Write a function that takes in a list of strings and returns a list of all but the last but first word in the string list.\n    '''\n    return string_list[:-2]\ndef get_all_words_except_last_but_first_word(string_list):\n    '''\n    Write a function that takes in a list of strings and returns a list of all but the last but first word in the string list.\n    '''\n    return string_list[1:-1]\ndef get_all_words_except_first_word(string_list):\n    '''\n    Write a function that takes in a list of strings and returns a list of all but the first word in the string list.\n    '''\n    return string_list[1:]\ndef get_all_words_except_first_last_word(string_list):\n    '''\n    Write a function that takes in a list of strings and returns a list of all but the first and last word in the string list.\n    '''\n    return string_list[1:-1]\ndef get_all_words_except_first_last_but_first_word(string_list):\n    '''\n    Write a function that takes in a list of strings and returns a list of all but the first and last but first word in the string list.\n    '''\n    return string_list[2:-1]\ndef get_all_unique_words_in_string_list(string_list):\n    '''\n    Write a function that takes in a list of strings and returns a list of all unique words in the string list.\n    '''\n    unique_word_list = []\n    for i in string_list:\n        for j in get_all_words_except_last_but_first_word(split_me(i)):\n            if j not in unique_word_list:\n                unique_word_list.append(j)\n    return unique_word_list\ndef get_all_unique_words_in_string_list_excluding_stop_words(string_list, stop_words_list):\n    '''\n    Write a function that takes in a list of strings and a list of stop words and returns a list of all unique words in the string list excluding stop words.\n    '''\n    return get_all_unique_words_in_string_list(string_list)\ndef get_all_words_in_string_list_excluding_stop_words(string_list, stop_words_list):\n    '''\n    Write a function that takes in a list of strings and a list of stop words and returns a list of all words in the string list excluding stop words.\n    '''\n    stop_words_list = stop_words_list\n    words_list = []\n    for i in string_list:\n        for j in split_me(i):\n            if j not in stop_words_list:\n                words_list.append(j)\n    return words_list\ndef get_count_of_all_words_in_string_list(string_list):\n    '''\n    Write a function that takes in a list of strings and returns a dictionary mapping each unique word to the number of times it occurs in the string list.\n    '''\n    return Counter(get_list_of_words(string_list))\ndef get_count_of_all_words_in_string_list_excluding_stop_words(string_list, stop_words_list):\n    '''\n    Write a function that takes in a list of strings and a list of stop words and returns a dictionary mapping each unique word to the number of times it occurs in the string list excluding stop words.\n    '''\n    return Counter(get_all_words_in_string_list_excluding_stop_words(string_list, stop_words_list))\ndef get_count_of_all_unique_words_in_string_list(string_list):\n    '''\n    Write a function that takes in a list of strings and returns a dictionary mapping each unique word to the number of times it occurs in the string list.\n    '''\n    return Counter(get_all_unique_words_in_string_list(string_list))\ndef get_count_of_all_unique_words_in_string_list_excluding_stop_words(string_list, stop_words_list):\n    '''\n    Write a function that takes in a list of strings and a list of stop words and returns a dictionary mapping each unique word to the number of times it occurs in the string list excluding stop words.\n    '''\n    return Counter(get_all_unique_words_in_string_list_excluding_stop_words(string_list, stop_words_list))\ndef get_first_word_of_word_list(string_list):\n    '''\n    Write a function that takes in a list of strings and returns a list of the first word of each string in the list.\n    '''\n    first_word_list = []\n    for i in string_list:\n        first_word_list.append(get_first_word_of_sentence(split_me(i)))\n    return first_word_list\ndef get_last_word_of_word_list(string_list):\n    '''\n    Write a function that takes in a list of strings and returns a list of the last word of each string in the list.\n    '''\n    last_word_list = []\n    for i in string_list:\n        last_word_list.append(get_last_word_of",
        "num_ids": 36
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    count = 0\n    l = len(str)\n    \n    for i in range(0,l):\n        for j in range(i,l):\n            if str[i:j+1]!= '':\n                count = count + 1\n    return count\n",
        "num_ids": 67
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substrings = 0\n    for i in range(len(str)):\n        if str[i] == \" \":\n            substrings = substrings + 1\n        for j in range(i+1, len(str)):\n            if str[i]!= str[j]:\n                break\n            if str[i]!= \" \":\n                substrings = substrings + 1\n    return substrings\n",
        "num_ids": 98
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    def substrings(s): \n        return len([i for i in range(len(s)) if s[i]!= s[i-1]])\n    return sum([substrings(s) for s in str.split()])\n",
        "num_ids": 58
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    i=0\n    count=0\n    while i<len(str):\n        if i==0:\n            count+=1\n        elif str[i]!=str[i-1]:\n            count+=1\n        i+=1\n    return count\n",
        "num_ids": 63
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    return len(str) - str.count(\"\")\n",
        "num_ids": 17
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    # Python code to count number of substrings in a string \n    \n    # Function to count number of substrings \n    def countSubstrings(str): \n        count = 0\n        for i in range(len(str)): \n            for j in range(i, len(str)): \n                if (str[i] == str[j] and ((j-i+1) <= 3)): \n                    count += 1\n        return count \n",
        "num_ids": 111
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    if len(str)==0:\n        return 0\n    num=0\n    i=0\n    while(i<len(str)):\n        if str[i]!='':\n            num=num+1\n            i=i+1\n        else:\n            i=i+1\n    return num\n",
        "num_ids": 77
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # convert to lowercase\n    str = str.lower()\n    # find the number of substrings\n    # for each character\n    num_substrings = 0\n    for i in range(len(str)):\n        # for each character, we look to the right and check the right character\n        for j in range(i+1,len(str)):\n            # if right character is not same as left character\n            if str[j]!= str[i]:\n                break\n            # otherwise, we add to the number of substrings\n            num_substrings += 1\n",
        "num_ids": 134
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(str) - str.count(\" \") - str.count(\"\")\n",
        "num_ids": 22
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    result = 0\n    if str:\n        for i in range(len(str)):\n            if str[i]!='':\n                for j in range(i, len(str)):\n                    if str[j] =='':\n                        result += 1\n                        break\n                    else:\n                        result += 1\n    return result\n",
        "num_ids": 80
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 0 or m == 0:\n        return 1\n    elif n == 1:\n        return m\n    else:\n        return get_total_number_of_sequences(m,n-1) + get_total_number_of_sequences(m,n-2)\n",
        "num_ids": 71
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m == 0 or n == 0:\n        return 1\n    else:\n        return get_total_number_of_sequences(m-1,n) + get_total_number_of_sequences(m, n-1)\n",
        "num_ids": 59
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # m = 26, n = 4\n    # there are 2 sequences of length 4, (12,13,14,15), (16,17,18,19)\n    # there are 2 sequences of length 3, (13,14,15), (16,17,18)\n    # there are 2 sequences of length 2, (14,15), (16,17)\n    # there are 2 sequences of length 1, (15), (16)\n    # there are 2 sequences of length 0, (15,16)\n    # there are 3 sequences of length 1, (15,16,17), (16,17,18)\n    # there are 4 sequences of length 2, (13,14,15,16), (16,17,18,19), (16,17,18,19), (17,18,19,20)\n    # there are 5 sequences of length 3, (13,14,15,16,17), (16,17,18,19,20), (16,17,18,19,20), (17,18,19,20,21), (17,18,19,20,21), (18,19,20,21,22)\n    # there are 6 sequences of length 4, (13,14,15,16,17,18), (16,17,18,19,20,21), (16,17,18,19,20,21), (17,18,19,20,21,22), (17,18,19,20,21,22), (18,19,20,21,22,23), (18,19,20,21,22,23), (19,20,21,22,23,24)\n    # there are 8 sequences of length 5, (13,14,15,16,17,18,19), (16,17,18,19,20,21,22,23), (16,17,18,19,20,21,22,23), (17,18,19,20,21,22,23,24), (17,18,19,20,21,22,23,24), (18,19,20,21,22,23,24,25), (18,19,20,21,22,23,24,25), (19,20,21,22,23,24,25,26)\n    # there are 10 sequences of length 6, (13,14,15,16,17,18,19,20,21), (16,17,18,19,20,21,22,23,24,25), (16,17,18,19,20,21,22,23,24,25), (17,18,19,20,21,22,23,24,25,26), (17,18,19,20,21,22,23,24,25,26), (18,19,20,21,22,23,24,25,26,27), (18,19,20,21,22,23,24,25,26,27), (19,20,21,22,23,24,25,26,27,28), (19,20,21,22,23,24,25,26,27,28)\n    # there are 12 sequences of length 7, (13,14,15,16,17,18,19,20,21,22), (16,17,18,19,20,21,22,23,24,25,26,27), (16,17,18,19,20,21,22,23,24,25,26,27), (17,18,19,20,21,22,23,24,25,26,27,28), (17,18,19,20,21,22,23,24,25,26,27,28), (18,19,20,21,22,23,24,25,26,27,28,29), (18,19,20,21,22,23,24,25,26,27,28,29), (19,20,21,22,23,24,25,26,27,28,29,30), (19,20,21,22,23,24,25,26,27,28,29,30)\n    # there are 14 sequences of length 8, (13,14,15,16,17,18,19,20,21,22,23), (16,17,18,19,20,21,22,23,24,25,26,27), (16,17,18,19,20,21,22,23,24,25,26,27), (17,18,19,20,21,22,23,24,25,26,27,28), (17,18,19,20,21,22,23,24,25,26,27,28), (18,19,20,21,22,23,24,25,26,27,28,29), (18,19,20,21,22,23,24,25,26,27,28,29), (19,20,21,22,23,24,25,26,27,28,29,30), (19,20,21,22,23,24,25,26,27,28,29,30), (20,21,22,23,24,25,26,27,28,29,30,31)\n    # there are 16 sequences of length 9, (13,14,15,16,17,18,19,20,21,22,23,24), (16,17,18,19,20,21,22,23,24,25,26,27), (16,17,18,19,20,21,22,23,24,25,26,27), (17,18,19,20,21,22,23,24,25,26,27,28), (17,18,19,20,21,22,23,24,25,26,27,28), (18,19,20,21,22,23,24,25,26,27,28,29), (18,19,20,21,22,23,24,25,26,27,28,29), (19,20,21,22,23,24,25,26,27,28,29,30), (19,20,21,22,23,24,25,26,27,28,29,30), (20,21,22,23,24,25,26,27,28,29,30,31), (20,21,22,23,24,25,26,27,28,29,30,31)\n    # there are 18 sequences of length 10, (13,14,15,16,17,18,19,20,21,22,23,24,25), (16,17,18,19,20,21,22,23,24,25,26,27,28), (16,17,18,19,20,21,22,23,24,25,26,27,28), (17,18,19,20,21,22,23,24,25,26,27,28,29), (17,18,19,20,21,22,23,24,25,26,27,28,29), (18,19,20,21,22,23,24,25,26,27,28,29,30), (18,19,20,21,22,23,24,25,26,27,28,29,30), (19,20,21,22,23,24,25,26,27,28,29,30,31), (19,20,21,22,23,24,25,26,27,28,29,30,31), (20,21,22,23,24,25,26,27,28,29,30,31,32)\n    # there are 22 sequences of length 11, (13,14,15,16,17,18,19,20,21,22,23,24,25,26), (16,17,18,19,20,21,22,23,24,25,26,27,28,29), (16,17,18,19,20,21,22,23,24,25,26,27,28,29), (17,18,19,20,21,22,23,24,25,26,27,28,29,30), (17,18,19,20,21,22,23,24,25,26,27,28,29,30), (18,19,20,21,22,23,24,25,26,27,28,29,30,31), (18,1",
        "num_ids": 1973
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < 2 or n < 1:\n        return 0\n    elif m == 2 and n == 1:\n        return 1\n    else:\n        return get_total_number_of_sequences(m-1, n) + get_total_number_of_sequences(m, n-1)\n",
        "num_ids": 75
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Base case\n    if n == 1:\n        return m\n    return get_total_number_of_sequences(m,n-1) + get_total_number_of_sequences(m-1,n-1)\n",
        "num_ids": 58
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    seq = []\n    if m == 1:\n        return 1\n    elif m == 2:\n        return 2\n    else:\n        seq.append(1)\n        seq.append(1)\n        for i in range(3,n+1):\n            seq.append(seq[-2] + seq[-1])\n        return seq[-1]\n        \nprint get_total_number_of_sequences(4,2)\nprint get_total_number_of_sequences(3,4)\nprint get_total_number_of_sequences(5,6)\nprint get_total_number_of_sequences(1,1)\nprint get_total_number_of_sequences(2,1)\nprint get_total_number_of_sequences(3,1)\nprint get_total_number_of_sequences(4,1)\nprint get_total_number_of_sequences(5,1)\nprint get_total_number_of_sequences(6,1)\nprint get_total_number_of_sequences(7,1)\nprint get_total_number_of_sequences(8,1)\nprint get_total_number_of_sequences(9,1)\nprint get_total_number_of_sequences(10,1)\nprint get_total_number_of_sequences(11,1)\nprint get_total_number_of_sequences(12,1)\nprint get_total_number_of_sequences(13,1)\nprint get_total_number_of_sequences(14,1)\nprint get_total_number_of_sequences(15,1)\nprint get_total_number_of_sequences(16,1)\nprint get_total_number_of_sequences(17,1)\nprint get_total_number_of_sequences(18,1)\nprint get_total_number_of_sequences(19,1)\nprint get_total_number_of_sequences(20,1)\nprint get_total_number_of_sequences(21,1)\nprint get_total_number_of_sequences(22,1)\nprint get_total_number_of_sequences(23,1)\nprint get_total_number_of_sequences(24,1)\nprint get_total_number_of_sequences(25,1)\nprint get_total_number_of_sequences(26,1)\nprint get_total_number_of_sequences(27,1)\nprint get_total_number_of_sequences(28,1)\nprint get_total_number_of_sequences(29,1)\nprint get_total_number_of_sequences(30,1)\nprint get_total_number_of_sequences(31,1)\nprint get_total_number_of_sequences(32,1)\nprint get_total_number_of_sequences(33,1)\nprint get_total_number_of_sequences(34,1)\nprint get_total_number_of_sequences(35,1)\nprint get_total_number_of_sequences(36,1)\nprint get_total_number_of_sequences(37,1)\nprint get_total_number_of_sequences(38,1)\nprint get_total_number_of_sequences(39,1)\nprint get_total_number_of_sequences(40,1)\nprint get_total_number_of_sequences(41,1)\nprint get_total_number_of_sequences(42,1)\nprint get_total_number_of_sequences(43,1)\nprint get_total_number_of_sequences(44,1)\nprint get_total_number_of_sequences(45,1)\nprint get_total_number_of_sequences(46,1)\nprint get_total_number_of_sequences(47,1)\nprint get_total_number_of_sequences(48,1)\nprint get_total_number_of_sequences(49,1)\nprint get_total_number_of_sequences(50,1)\nprint get_total_number_of_sequences(51,1)\nprint get_total_number_of_sequences(52,1)\nprint get_total_number_of_sequences(53,1)\nprint get_total_number_of_sequences(54,1)\nprint get_total_number_of_sequences(55,1)\nprint get_total_number_of_sequences(56,1)\nprint get_total_number_of_sequences(57,1)\nprint get_total_number_of_sequences(58,1)\nprint get_total_number_of_sequences(59,1)\nprint get_total_number_of_sequences(60,1)\nprint get_total_number_of_sequences(61,1)\nprint get_total_number_of_sequences(62,1)\nprint get_total_number_of_sequences(61,2)\nprint get_total_number_of_sequences(60,2)\nprint get_total_number_of_sequences(59,2)\nprint get_total_number_of_sequences(58,2)\nprint get_total_number_of_sequences(57,2)\nprint get_total_number_of_sequences(56,2)\nprint get_total_number_of_sequences(55,2)\nprint get_total_number_of_sequences(54,2)\nprint get_total_number_of_sequences(53,2)\nprint get_total_number_of_sequences(52,2)\nprint get_total_number_of_sequences(51,2)\nprint get_total_number_of_sequences(50,2)\nprint get_total_number_of_sequences(49,2)\nprint get_total_number_of_sequences(48,2)\nprint get_total_number_of_sequences(47,2)\nprint get_total_number_of_sequences(46,2)\nprint get_total_number_of_sequences(45,2)\nprint get_total_number_of_sequences(44,2)\nprint get_total_number_of_sequences(43,2)\nprint get_total_number_of_sequences(42,2)\nprint get_total_number_of_sequences(41,2)\nprint get_total_number_of_sequences(40,2)\nprint get_total_number_of_sequences(39,2)\nprint get_total_number_of_sequences(38,2)\nprint get_total_number_of_sequences(37,2)\nprint get_total_number_of_sequences(36,2)\nprint get_total_number_of_sequences(35,2)\nprint get_total_number_of_sequences(34,2)\nprint get_total_number_of_sequences(33,2)\nprint get_total_number_of_sequences(32,2)\nprint get_total_number_of_sequences(31,2)\nprint get_total_number_of_sequences(30,2)\nprint get_total_number_of_sequences(29,2)\nprint get_total_number_of_sequences(28,2)\nprint get_total_number_of_sequences(27,2)\nprint get_total_number_of_sequences(26,2)\nprint get_total_number_of_sequences(25,2)\nprint get_total_number_of_sequences(24,2)\nprint get_total_number_of_sequences(23,2)\nprint get_total_number_of_sequences(22,2)\nprint get_total_number_of_sequences(21,2)\nprint get_total_number_of_sequences(20,2)\nprint get_total_number_of_sequences(19,2)\nprint get_total_number_of_sequences(18,2)\nprint get_total_number_of_sequences(17,2)\nprint get_total_number_of_sequences(1",
        "num_ids": 1973
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 0:\n        return 1\n    if m < 0:\n        return 0\n    elif n == 1:\n        return m\n    else:\n        return get_total_number_of_sequences(m-1,n-1) + get_total_number_of_sequences(m,n-1)\n",
        "num_ids": 80
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # if n == 0 or m == 1 or n == 1:\n    #     return 1\n    # else:\n    #     return get_total_number_of_sequences(m-1,n-1) + get_total_number_of_sequences(m-2,n-1) + get_total_number_of_sequences(m-3,n-1)\n    return get_total_number_of_sequences(m-1,n-1) + get_total_number_of_sequences(m-2,n-1) + get_total_number_of_sequences(m-3,n-1)\n",
        "num_ids": 155
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return math.factorial(n)/(math.factorial(n-m)*math.factorial(m))\n",
        "num_ids": 29
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Here we can also use the naive method\n    total_num_of_sequences = 1\n    for i in range(1, n+1):\n        total_num_of_sequences *= m - i + 1\n    return total_num_of_sequences\n    \n    \n    \n    \n    \n    ",
        "num_ids": 77
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return [x[:len(x)-1]+list2[0:len(list2)-1] for x in list1]\n    \n    \ndef replace_dictionary(dict1,dict2):\n    '''\n    Write a function that takes in two dictionaries and replaces the key in the first dictionary with the value from the second dictionary.\n    '''\n    return {key:val for key,val in dict1.items() for key2,val2 in dict2.items() if key2 == key}\n    \n",
        "num_ids": 39
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)-1):\n        list1[i] = list1[i]\n    for j in range(len(list2)):\n        list1[len(list1)-1] = list2[j]\n    return list1\n",
        "num_ids": 65
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[:-1] + list2[:]\n",
        "num_ids": 16
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) < 1 or len(list2) < 1:\n        return\n    list1[-1] = list2\n    return list1\n",
        "num_ids": 40
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1]=list2\n",
        "num_ids": 12
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    length1 = len(list1)\n    length2 = len(list2)\n    for i in range(length1):\n        if i == length1 - 1:\n            list1[i] = list2[i]\n    return list1\n",
        "num_ids": 60
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1)==0 or len(list2)==0:\n        return []\n    else:\n        list1.pop()\n        list1.extend(list2)\n        return list1\n",
        "num_ids": 52
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count = count + 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count = count + 1\n    return count\n    \ndef count_words(str1):\n    '''\n    Write a function to count the total number of words in a string.\n    '''\n    return len(str1.split())\n",
        "num_ids": 12
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_char = 0\n    for char in str1:\n        total_char += 1\n    return total_char\n",
        "num_ids": 30
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_char = 0\n    for i in str1:\n        total_char = total_char + 1\n    return total_char\n",
        "num_ids": 34
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = int(math.sqrt(N))\n    #print(x)\n    while(True):\n        if(x*x < N):\n            return x*x\n        else:\n            x += 1\n            #print(x)\n        \n",
        "num_ids": 62
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N)))\n",
        "num_ids": 19
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N)))\n    \ndef number_of_Factors(n):\n    return int(math.sqrt(n))\n",
        "num_ids": 44
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N == 1):\n        return 2\n    x = int(math.ceil(math.sqrt(N)))\n    if(x*x < N):\n        return (x*x)\n    else:\n        return (x*x+1)\n",
        "num_ids": 64
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    n=int(math.sqrt(N))\n    if N==n*n:\n        return (n+1)*(n+1)\n    else:\n        return -1\n",
        "num_ids": 46
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    S = int(math.sqrt(N))\n    S+=1\n    return S**2\ndef next_Power(N,G):\n    '''\n    Write a python function to calculate next power of a number.\n    '''\n    return (N**G)\ndef number_to_binary(N):\n    '''\n    Write a python function to convert an integer to a binary string(without leading zeros).\n    '''\n    if N==0:\n        return 0\n    i=0\n    while (2**i)<=N:\n        i+=1\n    \n    binary_string=''\n    while i>0:\n        binary_string=str(N%2)+binary_string\n        N=(N-N%2)/2\n        i-=1\n    binary_string=str(N)+binary_string\n    return binary_string\ndef binary_to_number(N):\n    '''\n    Write a python function to convert a binary string to an integer.\n    '''\n    if N==0:\n        return 0\n    i=0\n    while N%2==0:\n        N=N/2\n        i+=1\n    return int(str(N)+'0'*i)\ndef binary_string_to_number(S):\n    '''\n    Write a python function to convert a binary string to an integer.\n    '''\n    return binary_to_number(int(S))\ndef number_to_binary_string(N):\n    '''\n    Write a python function to convert an integer to a binary string(without leading zeros).\n    '''\n    if N==0:\n        return 0\n    binary_string=''\n    while (N%2)>=0:\n        binary_string=str(N%2)+binary_string\n        N=N/2\n    return binary_string\ndef number_to_string(N):\n    '''\n    Write a python function to convert an integer to a string.\n    '''\n    if N==0:\n        return '0'\n    binary_string=number_to_binary_string(N)\n    return binary_string[::-1]\ndef string_to_number(S):\n    '''\n    Write a python function to convert a string to an integer.\n    '''\n    return binary_string_to_number(S)\ndef number_to_pig_latin(N):\n    '''\n    Write a python function to convert an integer to a pig latin word.\n    '''\n    if N==0:\n        return ''\n    \n    S=str(N)\n    i=0\n    j=0\n    while i<len(S) and j<len(S):\n        while S[i]=='0':\n            i+=1\n        S=S[i:]+S[:i]\n        j+=1\n    S=S[:j]+'ay'+S[j:]\n    return S\ndef pig_latin_to_number(S):\n    '''\n    Write a python function to convert a pig latin word to an integer.\n    '''\n    S=S.lower()\n    S=S.replace(' ', '')\n    S=S.replace('ay', '')\n    return string_to_number(S)\ndef is_palindrome(N):\n    '''\n    Write a python function to determine if a number is a palindrome.\n    '''\n    if N<0:\n        return False\n    S=str(N)\n    i=0\n    j=len(S)-1\n    while i<j:\n        if S[i]!=S[j]:\n            return False\n        i+=1\n        j-=1\n    return True\ndef is_palindrome_string(S):\n    '''\n    Write a python function to determine if a string is a palindrome.\n    '''\n    if len(S)==0:\n        return True\n    if len(S)==1:\n        return True\n    if len(S)==2:\n        return True if S[0]==S[1] else False\n    S=S.lower()\n    S=S.replace(' ', '')\n    i=0\n    j=len(S)-1\n    while i<j:\n        if S[i]!=S[j]:\n            return False\n        i+=1\n        j-=1\n    return True\ndef is_palindrome_permutation(S):\n    '''\n    Write a python function to determine if a string is a permutation of a palindrome.\n    '''\n    if len(S)==0:\n        return False\n    S=S.lower()\n    S=S.replace(' ', '')\n    S=S.replace('-', '')\n    d=dict()\n    for i in S:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    if len(S)%2==1:\n        for key in d:\n            if d[key]%2==1:\n                return False\n        return True\n    else:\n        i=0\n        j=len(S)-1\n        while i<j:\n            if d[S[i]]!=d[S[j]]:\n                return False\n            i+=1\n            j-=1\n        return True\ndef is_pandigital(S):\n    '''\n    Write a python function to determine if a string is a pandigital number.\n    '''\n    if len(S)==0:\n        return False\n    S=S.lower()\n    S=S.replace(' ', '')\n    S=S.replace('-', '')\n    d=dict()\n    for i in S:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    for i in range(1,10):\n        if str(i) not in S:\n            return False\n    return True\ndef factorial(N):\n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    if N==0:\n        return 1\n    return N*factorial(N-1)\ndef is_armstrong(N):\n    '''\n    Write a python function to determine if a number is an armstrong number.\n    '''\n    S=str(N)\n    i=0\n    j=len(S)-1\n    S=int(S)\n    while i<j:\n        if S%10!=int(S/10)%10:\n            return False\n        S=S/10\n        i+=1\n        j-=1\n    return True\ndef is_power(a,b):\n    '''\n    Write a python function to determine if a number is a power of a number.\n    '''\n    if b==1:\n        return True\n    if a%b==0:\n        return True\n    return is_power(a,b-1)\ndef count_digits(N):\n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    if N==0:\n        return 0\n    S=str(N)\n    i=0\n    j=len(S)-1\n    S=int(S)\n    while i<j:\n        if S%10!=S/10%10:\n            return False\n        S=S/10\n        i+=1\n        j-=1\n    return 1+len(S)\ndef digits(N):\n    '''\n    Write a python function to find the digits in a number.\n    '''\n    if N==0:\n        return 0\n    S=str(N)\n    i=0\n    j=len(S)-1\n    S=int(S)\n    while i<j:\n        if S%10!=S/10%10:\n            return False\n        S=S/10\n        i+=1\n        j-=1\n    return int(S)\ndef is_power_of_2(N):\n    '''\n    Write a python function to determine if a number is a power of two.\n    '''\n    if N==0:\n        return False\n    S=str(N)\n    i=0\n    j=len(S)-1\n    S=int(S)\n    while i<j:\n        if S%2!=S/2%2:\n        ",
        "num_ids": 65
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.sqrt(N))+1\ndef isPerfectSquare(N): \n    '''\n    Write a python function to check whether a given number is perfect square or not.\n    '''\n    return (math.sqrt(N) - math.floor(math.sqrt(N))) == 0\ndef isPerfectSquareBrutal(N):\n    '''\n    Write a python function to check whether a given number is perfect square or not.\n    '''\n    count=0\n    for i in range(N):\n        if isPerfectSquare(i*i):\n            count+=1\n    return count == N\ndef calculate_sum_of_all_odd_perfect_squares(limit):\n    '''\n    Write a python function to find the sum of all odd perfect squares in the range.\n    '''\n    sum = 0\n    for i in range(1,limit):\n        if isPerfectSquare(i) and i % 2!= 0:\n            sum += i\n    return sum\ndef calculate_sum_of_all_odd_perfect_squares_from_list(list):\n    '''\n    Write a python function to find the sum of all odd perfect squares in the range.\n    '''\n    sum = 0\n    for i in list:\n        if isPerfectSquare(i) and i % 2!= 0:\n            sum += i\n    return sum\ndef find_sum_of_digits(N):\n    '''\n    Write a python function to find the sum of all digits of the given number.\n    '''\n    sum = 0\n    while N > 0:\n        sum += N % 10\n        N = N // 10\n    return sum\ndef find_sum_of_digits_from_list(list):\n    '''\n    Write a python function to find the sum of all digits of the given number.\n    '''\n    sum = 0\n    for i in list:\n        sum += find_sum_of_digits(i)\n    return sum\ndef reverse_a_number(N):\n    '''\n    Write a python function to reverse a given number.\n    '''\n    rev = 0\n    while N > 0:\n        rev = rev * 10 + N % 10\n        N = N // 10\n    return rev\ndef reverse_a_number_from_list(list):\n    '''\n    Write a python function to reverse a given number.\n    '''\n    rev = 0\n    for i in list:\n        rev = rev * 10 + i % 10\n    return rev\ndef find_gcd_and_lcm(a,b):\n    '''\n    Write a python function to find the greatest common divisor and least common multiple of two numbers.\n    '''\n    gcd = 1\n    lcm = 1\n    if a < b:\n        smaller = a\n    else:\n        smaller = b\n    for i in range(1,smaller+1):\n        if((a % i == 0) and (b % i == 0)):\n            gcd = i\n    lcm = (a * b) / gcd\n    return (gcd,lcm)\ndef sum_of_digit_factorials(N):\n    '''\n    Write a python function to find the sum of the factorials of all the digits of the given number.\n    '''\n    sum = 0\n    while N > 0:\n        sum += find_factorial(N % 10)\n        N = N // 10\n    return sum\ndef find_factorial(n):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if n < 0:\n        return 0\n    if n < 2:\n        return 1\n    return n * find_factorial(n-1)\ndef find_factorial_from_list(list):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if len(list) == 0:\n        return 1\n    return find_factorial(list[0]) * find_factorial_from_list(list[1:])\ndef is_palindrome(N):\n    '''\n    Write a python function to check whether a given number is palindrome or not.\n    '''\n    return str(N) == str(N)[::-1]\ndef reverse_a_number_string(N):\n    '''\n    Write a python function to reverse a given number string.\n    '''\n    revs = 0\n    while N > 0:\n        revs = revs * 10 + N % 10\n        N = N // 10\n    return revs\ndef is_palindrome_from_string(N):\n    '''\n    Write a python function to check whether a given number is palindrome or not.\n    '''\n    if len(N) == 0:\n        return True\n    if N[0]!= N[-1]:\n        return False\n    return is_palindrome_from_string(N[1:-1])\ndef check_numbers(list):\n    '''\n    Write a python function to check whether all numbers in a list are palindromes or not.\n    '''\n    for i in list:\n        if not is_palindrome(i):\n            return False\n    return True\ndef reverse_a_number_string_from_list(list):\n    '''\n    Write a python function to reverse a given number string.\n    '''\n    revs = 0\n    for i in list:\n        revs = revs * 10 + i % 10\n    return revs\ndef count_and_say(N):\n    '''\n    Write a python function to count and say.\n    '''\n    if N == 1:\n        return '1'\n    prev = count_and_say(N-1)\n    count = 1\n    result = ''\n    for i in range(len(prev)):\n        if i == len(prev) - 1 or prev[i]!= prev[i+1]:\n            result += str(count) + prev[i]\n            count = 1\n        else:\n            count += 1\n    return result\ndef count_and_say_from_list(list):\n    '''\n    Write a python function to count and say.\n    '''\n    if len(list) == 0:\n        return []\n    return count_and_say_from_list(list[1:]) + [str(len(list)) + list[0]]\ndef is_palindrome_permutation(N):\n    '''\n    Write a python function to check whether a given number is permutation of a palindrome or not.\n    '''\n    return str(N) == str(N)[::-1]\ndef is_palindrome_permutation_from_list(list):\n    '''\n    Write a python function to check whether a given number is permutation of a palindrome or not.\n    '''\n    if len(list) == 0:\n        return True\n    if list[0]!= list[-1]:\n        return False\n    return is_palindrome_permutation_from_list(list[1:-1])\ndef find_unique_binary_numbers(N):\n    '''\n    Write a python function to find the unique binary numbers in the range.\n    '''\n    s = set()\n    for i in range(2,N+1):\n        bin_i = bin(i)[2:]\n        for j in range(len(bin_i)):\n            if bin_i[j] == '1':\n                s.add(bin_i[:j] + '0' + bin_i[j+1:])\n    return s\ndef find_unique_binary_numbers_from_list(list):\n    '''\n    Write a python function to find the unique binary numbers in the range.\n    '''\n    s = set()\n    for i in list:\n        bin_i = bin(i)[2:]\n        for j in range(len(bin_i)):\n            if bin_i[j] == '1':\n                s.add(bin_i[:j] + '0' + bin_i[j+1:])\n    return s\ndef is_perfect_square_from_list(list):\n    '''\n    Write a python function to check whether all numbers in a list are perfect squares or not.\n    '''\n    for i in list:\n        if not isPerfectSquare(i):\n            return False\n    return True\ndef find_perfect_square_from",
        "num_ids": 35
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N)))\n",
        "num_ids": 19
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N)))\n",
        "num_ids": 19
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N & (N-1) == 0):\n        return N\n",
        "num_ids": 20
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n    for i in range(0, len(arr)-1):\n        if arr[i] > arr[i+1]:\n            temp = max_sum + arr[i]\n            max_sum = temp if temp > max_sum else max_sum\n        else:\n            temp = max_sum + arr[i+1]\n            max_sum = temp if temp > max_sum else max_sum\n    return max_sum\n",
        "num_ids": 108
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_ending_here = max_so_far = 0\n    for i in range(len(arr)):\n        max_ending_here = max(arr[i],max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n",
        "num_ids": 75
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    i = 1\n    max_sum = arr[0]\n    while i < len(arr):\n        if arr[i] > arr[i-1]:\n            max_sum += arr[i]\n        else:\n            max_sum -= arr[i-1]\n        i += 1\n    return max_sum\n",
        "num_ids": 77
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # O(n) time\n    # O(n) space\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        if arr[0] > arr[1]:\n            return arr[0]\n        else:\n            return arr[1]\n    # O(n) space\n    '''\n    def max_bitonic(arr, start, end):\n        '''\n        Returns the maximum sum of a bitonic sequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n        '''\n        if start == end:\n            return arr[start]\n        mid = start + (end - start) / 2\n        l_sum = max_bitonic(arr, start, mid)\n        r_sum = max_bitonic(arr, mid+1, end)\n        if l_sum < r_sum:\n            max_sum = l_sum\n            left = mid\n        else:\n            max_sum = r_sum\n            right = mid\n        sums = 0\n        curr = 0\n        for i in range(mid, start-1, -1):\n            curr += arr[i]\n            sums = max(sums, curr)\n        curr = 0\n        for i in range(mid+1, end+1):\n            curr += arr[i]\n            sums = max(sums, curr)\n        return max(max_sum, sums)\n    return max_bitonic(arr, 0, len(arr)-1)\n",
        "num_ids": 230
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n    for i in range(0, len(arr)):\n        if arr[i] > 0:\n            max_sum += arr[i]\n        elif arr[i] < 0:\n            max_sum += arr[i]\n",
        "num_ids": 64
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1: return arr[0]\n    max_sum_so_far, max_ending_here = arr[0], arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here + arr[i], arr[i])\n        max_sum_so_far = max(max_sum_so_far, max_ending_here)\n    return max_sum_so_far\n",
        "num_ids": 115
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_so_far = -1\n    n = len(arr)\n",
        "num_ids": 20
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = arr[0]\n    \n    for i in range(1, len(arr)):\n        bitonic_decreasing = arr[i] > max_sum\n        max_sum = max(max_sum, arr[i])\n        \n        if bitonic_decreasing:\n            max_sum = max(max_sum, arr[i] + max_sum)\n        \n    return max_sum\n",
        "num_ids": 102
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = arr[0]\n    i = 1\n    while i < len(arr):\n        if arr[i] > arr[i-1]:\n            max_sum = max(max_sum, arr[i]+arr[i-1])\n            i += 1\n        elif arr[i] < arr[i-1]:\n            i += 1\n        else:\n            i += 1\n    return max_sum\n",
        "num_ids": 102
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max(arr)\n",
        "num_ids": 9
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return\n",
        "num_ids": 5
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2.0\n    while guess*guess!= number:\n        guess = (guess + number/guess)/2.0\n    return guess\n",
        "num_ids": 44
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2\n    while abs(number - guess ** 2) > 0.01:\n        guess = (guess + number/guess) / 2\n    return guess\n",
        "num_ids": 46
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialise a loop\n    while True:\n        # Find the previous iteration\n        prev = number - (number / number)\n        # If the previous iteration is the same as the current, we have our answer\n        if prev == number:\n            break\n        else:\n            number = prev\n    return number\n",
        "num_ids": 73
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    n = number\n    x = n / 2.0\n    for i in range(100):\n        x = 0.5 * (x + n / x)\n    return x\n",
        "num_ids": 44
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess**2 - number) > 0.000001:\n        guess = (guess + number / guess) / 2\n    return guess\n",
        "num_ids": 47
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # how many iterations?\n    iterations = 0\n    # what is the initial value of x?\n    x = 0\n    # what is the tolerance?\n    tolerance = 0.0000001\n    # what is the guess?\n    guess = 0\n    # what is the maximum number of iterations?\n    max_iterations = 100\n",
        "num_ids": 81
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    if type(number)!= int:\n        raise ValueError('number is not a valid integer')\n    if number < 1:\n        raise ValueError('number must be at least 1')\n    return int(number ** 0.5)\n",
        "num_ids": 58
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number <= 0:\n        return None\n    \n    n = 1\n    while n * n < number:\n        n += 1\n    \n    a = (n - 1) * n / 2\n    b = n * n\n    while a - b > 1e-12:\n        midpoint = (a + b) / 2\n        if midpoint * midpoint > number:\n            b = midpoint\n        else:\n            a = midpoint\n    \n    return a\n    \n    \ndef test_babylonian_squareroot():\n    '''\n    Test the babylonian_squareroot function for several values.\n    '''\n    assert babylonian_squareroot(16) == 4\n    assert babylonian_squareroot(9) == 3\n    assert babylonian_squareroot(1) == 1\n    assert babylonian_squareroot(0) is None\n    assert babylonian_squareroot(-1) is None\n    assert babylonian_squareroot(-16) is None\n    \n    \ndef distance_formula(x1, y1, x2, y2):\n    '''\n    Write a function for computing the distance between two points in a 2D\n    plane.\n    '''\n    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n    \n    \ndef test_distance_formula():\n    '''\n    Test the distance_formula function for several values.\n    '''\n    assert distance_formula(2, 2, 2, 2) == 0\n    assert distance_formula(2, 2, 3, 2) == 1\n    assert distance_formula(2, 2, 2, 3) == 1.7320508075688772\n    assert distance_formula(2, 2, 3, 3) == 2\n    assert distance_formula(2, 2, 3, 4) == 2.8284271247461903\n    assert distance_formula(3, 2, 3, 4) == 2.8284271247461903\n    assert distance_formula(3, 3, 3, 3) == 0\n    \n    \ndef triangle_area(a, b, c):\n    '''\n    Write a function that returns the area of a triangle given the\n    lengths of its sides.\n    '''\n    return (a * b) / 2\n    \n    \ndef test_triangle_area():\n    '''\n    Test the triangle_area function for several values.\n    '''\n    assert triangle_area(5, 5, 5) == 50\n    assert triangle_area(0, 0, 0) == 0\n    assert triangle_area(5, 10, 0) == 10\n    assert triangle_area(5, 10, 5) == 50\n    assert triangle_area(5, 0, 10) == 10\n    assert triangle_area(5, 10, 0) == 10\n    assert triangle_area(5, 0, 10) == 10\n    assert triangle_area(10, 5, 5) == 50\n    assert triangle_area(10, 5, 0) == 5\n    assert triangle_area(10, 0, 5) == 5\n    assert triangle_area(10, 0, 0) == 0\n    assert triangle_area(10, 10, 10) == 100\n    \n    \ndef is_right_triangle(a, b, c):\n    '''\n    Write a function that returns True if the three sides of a triangle\n    are right-angled and False otherwise.\n    '''\n    return abs(triangle_area(a, b, c) - (a * b / 2)) < 1e-12\n    \n    \ndef test_is_right_triangle():\n    '''\n    Test the is_right_triangle function for several values.\n    '''\n    assert is_right_triangle(2, 4, 6) is True\n    assert is_right_triangle(2, 4, 3) is False\n    assert is_right_triangle(2, 4, 5) is False\n    assert is_right_triangle(2, 4, 4) is True\n    assert is_right_triangle(2, 10, 8) is False\n    assert is_right_triangle(2, 6, 3) is False\n    assert is_right_triangle(3, 4, 2) is False\n    assert is_right_triangle(4, 2, 3) is False\n    assert is_right_triangle(1, 1, 1) is True\n    assert is_right_triangle(1, 1, 1.0000000001) is True\n    assert is_right_triangle(1, 1, 0) is False\n    assert is_right_triangle(1, 0, 1) is False\n    assert is_right_triangle(0, 1, 1) is False\n    assert is_right_triangle(0, 1, 0) is False\n    \n    \ndef is_right_triangle_by_area(a, b, c):\n    '''\n    Write a function that returns True if the three sides of a triangle\n    are right-angled and False otherwise.\n    '''\n    return abs(triangle_area(a, b, c) - (a * b / 2)) < 1e-12\n    \n    \ndef test_is_right_triangle_by_area():\n    '''\n    Test the is_right_triangle_by_area function for several values.\n    '''\n    assert is_right_triangle_by_area(2, 4, 6) is True\n    assert is_right_triangle_by_area(2, 4, 3) is False\n    assert is_right_triangle_by_area(2, 4, 5) is False\n    assert is_right_triangle_by_area(2, 4, 4) is True\n    assert is_right_triangle_by_area(2, 10, 8) is False\n    assert is_right_triangle_by_area(2, 6, 3) is False\n    assert is_right_triangle_by_area(3, 4, 2) is False\n    assert is_right_triangle_by_area(4, 2, 3) is False\n    assert is_right_triangle_by_area(1, 1, 1) is True\n    assert is_right_triangle_by_area(1, 1, 1.0000000001) is True\n    assert is_right_triangle_by_area(1, 1, 0) is False\n    assert is_right_triangle_by_area(1, 0, 1) is False\n    assert is_right_triangle_by_area(0, 1, 1) is False\n    assert is_right_triangle_by_area(0, 1, 0) is False\n    \n    \ndef pythagorean_triple(a, b, c):\n    '''\n    Write a function that returns a pythagorean triple given the\n    lengths of the sides of a right-angled triangle.\n    '''\n    return (a ** 2 + b ** 2, a * b * 2, a * c * 2)\n    \n    \ndef test_pythagorean_triple():\n    '''\n    Test the pythagorean_triple function for several values.\n    '''\n    assert pythagorean_triple(2, 4, 6) == (16, 8, 12)\n    assert pythagorean_triple(2, 4, 3) == (6, 8, 5)\n    assert pythagorean_triple(2, 4, 5) == (8, 6, 4)\n    assert pythagorean_triple(2, 4, 4) == (8, 8, 4)\n    assert pythagorean_triple(2, 10, 8) == (16, 2, 4)\n    assert pythagorean_triple(2, 6, 3) == (6, 2, 3)\n    assert pythagorean_triple(3, 4, 2) == (6, 4, 2)\n    assert pythagorean_triple(4, 2, 3) == (4, 2, 3)\n    assert pythagorean_triple(1, 1, 1) == (1, 1, 1)\n    assert pythagorean_triple(1, 1, 1.0000000001) == (1, 1, 1)\n    assert pythagorean_triple(1, 1, 0) == (0, 1, 1)\n    assert pythagorean_triple(1, 0, 1) == (0, 1, 1)\n    assert pythagorea",
        "num_ids": 311
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2.0\n    while abs(guess*guess - number) >.00001:\n        guess = (guess + number/guess)/2.0\n    return guess\n",
        "num_ids": 51
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if not str:\n        return 0\n    n = len(str)\n    T = [[0 for x in range(n)] for x in range(n)] \n    maxLen = 1\n    i=0\n    while i<n:\n        T[i][i] = 1\n        i+=1\n    j = 2\n    while j<n:\n        if str[j-1]==str[j-2] and j<n-1:\n            T[j-1][j] = 2\n            j+=1\n        elif str[j-1]==str[j-2] and j==n-1:\n            T[j-1][j] = 2\n            j+=1\n        elif str[j-1]!=str[j-2]:\n            T[j-1][j] = max(T[j-2][j-1],T[j-1][j-1])\n            j+=1\n        maxLen = max(maxLen, T[j-1][j])\n    return maxLen\n",
        "num_ids": 246
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    if n < 2:\n        return n\n    dp = [[0] * n for _ in xrange(n)]\n    for i in xrange(n):\n        dp[i][i] = 1\n        for j in xrange(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n",
        "num_ids": 150
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) < 2:\n        return len(str)\n    T = [[0 for i in range(len(str))] for j in range(len(str))]\n    for i in range(len(str)-1, -1, -1):\n        for j in range(i, len(str)):\n            if str[i] == str[j]:\n                if i+1 == j:\n                    T[i][j] = 1\n                elif i+2 == j:\n                    T[i][j] = 1\n                else:\n                    T[i][j] = T[i+1][j-1] + 2\n            else:\n                T[i][j] = max(T[i][j-1], T[i+1][j])\n    return T[0][len(str)-1]\n",
        "num_ids": 198
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) < 2: \n        return len(str)\n    max_lps = 1\n    start = 0\n    end = 0\n    for i in xrange(1, len(str)): \n        # when the characters at i and i-1 are the same\n        if str[i] == str[i-1]: \n            # odd palindromic length\n            count = 1\n            while (i-count >= 0) and (i+count < len(str)) and str[i-count] == str[i+count]:\n                count += 1\n            if count > max_lps:\n                max_lps = count\n                start = i-count+1\n                end = i+count\n        # when the characters are different\n        else:\n            count = 1\n            while (i-count >= 0) and (i+count < len(str)) and str[i-count] == str[i+count]:\n                count += 1\n            # even palindromic length\n            if count > max_lps:\n                max_lps = count\n                start = i-count+1\n                end = i+count\n    return str[start:end+1]\n",
        "num_ids": 281
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    T = [[0 for x in range(len(str))] for x in range(len(str))] \n    for i in range(len(str)): \n        T[i][i] = 1\n    \n    maxLength = 1\n    start = 0\n    for L in range(2, len(str) + 1): \n        for i in range(len(str) - L + 1): \n            end = i + L - 1\n            if (str[i] == str[end] and L <= 2): \n                T[i][end] = 2\n            elif (str[i] == str[end]): \n                T[i][end] = T[i + 1][end - 1] + 2\n            else: \n                T[i][end] = max(T[i][end - 1], T[i + 1][end])\n            if (T[i][end] > maxLength): \n                maxLength = T[i][end]\n                start = i\n    return maxLength, str[start:start + maxLength] \n",
        "num_ids": 253
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for x in range(n)] for x in range(n)] \n    l = 0 \n    if str[0] == str[n - 1]:\n        l = 1\n    for i in range(1, n): \n        for j in range(1, i + 1): \n            if str[i] == str[j - 1] and i - j < 2: \n                dp[j - 1][i] = 1\n                l = max(l, 1 + dp[j - 1][i]); \n            elif str[i] == str[j - 1] and i - j >= 2: \n                dp[j - 1][i] = 1 + dp[j - 2][i - 1] \n                l = max(l, 1 + dp[j - 1][i]); \n    return l \n",
        "num_ids": 209
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def _helper(i, j):\n        if i > j:\n            return 0\n        elif i == j:\n            return 1\n        elif (i, j) in cache:\n            return cache[(i, j)]\n        elif str[i] == str[j]:\n            cache[(i, j)] = 2 + _helper(i + 1, j - 1)\n            return cache[(i, j)]\n        else:\n            cache[(i, j)] = max(_helper(i + 1, j), _helper(i, j - 1))\n            return cache[(i, j)]\n",
        "num_ids": 150
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) == 0:\n        return 0\n    elif len(str) == 1:\n        return 1\n    else:\n        max_len = 1\n        for i in range(len(str)):\n            len1 = lps(str[0:i])\n            len2 = lps(str[i:])\n            max_len = max(max_len, len1+len2)\n        return max_len\n",
        "num_ids": 105
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    dp = [[0 for j in xrange(len(str))] for i in xrange(len(str))]\n    for i in xrange(len(str)-1,-1,-1):\n        dp[i][i] = 1\n        for j in xrange(i+1,len(str)):\n            if str[i] == str[j]:\n                if j-i == 1 or dp[i+1][j-1]:\n                    dp[i][j] = 1\n    return max(map(max,dp))\n",
        "num_ids": 128
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    m = len(str)\n    maxlen = 1\n    res = [0 for i in xrange(m)]\n    for i in xrange(m):\n        res[i] = 1\n        for j in xrange(i):\n            if str[i] == str[j] and res[j]+1 > res[i]:\n                res[i] = res[j] + 1\n                maxlen = max(maxlen, res[i])\n    return maxlen\n    \n",
        "num_ids": 115
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 0:\n        return None\n    else:\n        return 1/n + harmonic_sum(n-1)\n",
        "num_ids": 32
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n",
        "num_ids": 32
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n\n",
        "num_ids": 8
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1.0 / n\n    \ndef harmonic_sum2(n):\n    '''\n    Use the formula for harmonic sum to calculate the harmonic sum of n-1.\n    '''\n    return (1 + n) / n\n",
        "num_ids": 12
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 / n + (harmonic_sum(n - 1))\n",
        "num_ids": 34
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1 / n if n == 1 else 1 / n + harmonic_sum(n-1)\n",
        "num_ids": 25
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1 + (1/n)\n",
        "num_ids": 12
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    def _harmonic_sum(n):\n        '''\n        The recursive part of the solution.\n        '''\n        if n == 0:\n            return 0\n        else:\n            return 1/n + _harmonic_sum(n-1)\n    return _harmonic_sum(n)\n",
        "num_ids": 45
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n - 1\n    \ndef digital_root(n):\n    '''\n    Write a function that takes in a number n and returns the digital root of n.\n    The digital root is the recursive sum of the digits of n.\n    '''\n    return sum([int(x) for x in str(n)])\n    \ndef factorial(n):\n    '''\n    Write a function that takes in a positive integer n and returns the factorial of n.\n    The factorial of a positive integer n is the product of all positive integers less than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    else:\n        return n * factorial(n-1)\n",
        "num_ids": 41
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n if n == 1 else 1/n + harmonic_sum(n-1)\n",
        "num_ids": 25
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    nums1 = set(array_nums1)\n    nums2 = set(array_nums2)\n    \n    if len(nums1) <= len(nums2):\n        nums = nums1\n    else:\n        nums = nums2\n    \n    return list(nums)\n",
        "num_ids": 78
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_nums = []\n    for i in array_nums1:\n        if i in array_nums2:\n            intersection_nums.append(i)\n    return intersection_nums\n",
        "num_ids": 52
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if array_nums1 == None or array_nums2 == None:\n        return None\n",
        "num_ids": 25
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1.sort()\n    array_nums2.sort()\n    intersection = []\n    i = 0\n    j = 0\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            intersection.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] > array_nums2[j]:\n            j += 1\n        else:\n            i += 1\n    return intersection\n",
        "num_ids": 146
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    i = 0\n    j = 0\n    result = []\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            result.append(array_nums1[i])\n            i+=1\n            j+=1\n        elif array_nums1[i] < array_nums2[j]:\n            i +=1\n        else:\n            j +=1\n    return result\n",
        "num_ids": 124
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1_set = set(array_nums1)\n    intersection = []\n    for num in array_nums2:\n        if num in array_nums1_set:\n            intersection.append(num)\n    return intersection\n",
        "num_ids": 63
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return [x for x in array_nums1 if x in array_nums2]\n",
        "num_ids": 24
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if not array_nums1:\n        return []\n    array_nums1.sort()\n    array_nums2.sort()\n    intersection=[]\n    i,j=0,0\n    while i<len(array_nums1) and j<len(array_nums2):\n        if array_nums1[i]==array_nums2[j]:\n            intersection.append(array_nums1[i])\n            i+=1\n            j+=1\n        elif array_nums1[i]<array_nums2[j]:\n            i+=1\n        else:\n            j+=1\n    return intersection\n",
        "num_ids": 159
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    output = []\n    for element in array_nums1:\n        if element in array_nums2:\n            output.append(element)\n    return output\n",
        "num_ids": 41
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    dict_num1 = {}\n    for num in array_nums1:\n        if num in dict_num1:\n            dict_num1[num] += 1\n        else:\n            dict_num1[num] = 1\n    print dict_num1\n",
        "num_ids": 64
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n    \ndef count_Y(tup, y): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(y)\n    \ndef count_Z(tup, z): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(z)\n    \ndef count_U(tup, u): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(u)\n    \ndef count_V(tup, v): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(v)\n    \ndef count_W(tup, w): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(w)\n    \ndef count_T(tup, t): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(t)\n    \ndef count_P(tup, p): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(p)\n    \ndef count_A(tup, a): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(a)\n    \ndef count_B(tup, b): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(b)\n    \ndef count_C(tup, c): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(c)\n    \ndef count_D(tup, d): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(d)\n    \ndef count_E(tup, e): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(e)\n    \ndef count_F(tup, f): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(f)\n    \ndef count_G(tup, g): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(g)\n    \ndef count_H(tup, h): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(h)\n    \ndef count_I(tup, i): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(i)\n    \ndef count_J(tup, j): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(j)\n    \ndef count_K(tup, k): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(k)\n    \ndef count_L(tup, l): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(l)\n    \ndef count_M(tup, m): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(m)\n    \ndef count_N(tup, n): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(n)\n    \ndef count_O(tup, o): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(o)\n    \ndef count_P(tup, p): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(p)\n    \ndef count_Q(tup, q): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(q)\n    \ndef count_R(tup, r): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(r)\n    \ndef count_S(tup, s): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(s)\n    \ndef count_T(tup, t): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(t)\n    \ndef count_U(tup, u): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(u)\n    \ndef count_V(tup, v): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(v)\n    \ndef count_W(tup, w): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(w)\n    \ndef count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n    \ndef count_Y(tup, y): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(y)\n    \ndef count_Z(tup, z): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(z)\n    \ndef count_a(tup",
        "num_ids": 21
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count = count + 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    \n    count = 0\n    for val in tup:\n        if val == x:\n            count += 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "num_ids": 12
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    occurences = 0\n    for i in tup:\n        if i == x:\n            occurences += 1\n    return occurences\n",
        "num_ids": 37
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "num_ids": 12
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup=tuple(tup)\n    return tup.count(x)\n    \nassert count_X((1,2,3,4,3,5),3)==2\nassert count_X((1,2,3,4,3,5),7)==0\nassert count_X((1,2,3,4,3,5),1)==5\nassert count_X((1,2,3,4,3,5),-1)==0\n",
        "num_ids": 114
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "num_ids": 12
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "num_ids": 12
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    a, b = tup\n    if x == a: \n        return 1 + count_X(b, x)\n    else: \n        return 0 + count_X(b, x)\n",
        "num_ids": 49
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element]+list\n",
        "num_ids": 9
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(0,len(list)):\n        list.insert(i,element)\n    return list\n",
        "num_ids": 30
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list\n",
        "num_ids": 10
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Your code here\n    return [element] + list\n",
        "num_ids": 16
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list\n    \ndef remove_element(list,element):\n    '''\n    Write a function that takes in a list and an element and removes the element from the list, and returns the resulting list.\n    '''\n    return list[:list.index(element)] + list[list.index(element) + 1:]\n    \ndef remove_element_by_index(list,index):\n    '''\n    Write a function that takes in a list and an index and removes the element from the list at the index, and returns the resulting list.\n    '''\n    return list[:index] + list[index + 1:]\n    \ndef last_element(list):\n    '''\n    Write a function that takes in a list and returns the last element of the list.\n    '''\n    return list[-1]\n    \ndef first_element(list):\n    '''\n    Write a function that takes in a list and returns the first element of the list.\n    '''\n    return list[0]\n    \ndef sort_list(list):\n    '''\n    Write a function that takes in a list and sorts the elements of the list.\n    '''\n    return sorted(list)\n    \ndef reverse_list(list):\n    '''\n    Write a function that takes in a list and reverses the elements in the list, and returns the resulting list.\n    '''\n    return list[::-1]\n    \ndef rotate_list(list,times):\n    '''\n    Write a function that takes in a list and a number of times to rotate the elements in the list, and returns the resulting list.\n    '''\n    return list[times:] + list[:times]\n    \ndef remove_elements_with_index(list,index):\n    '''\n    Write a function that takes in a list and a number of indices to remove those elements from the list, and returns the resulting list.\n    '''\n    return list[:index] + list[index + 1:]\n    \ndef slice_list(list,start_index,end_index):\n    '''\n    Write a function that takes in a list and two indices and returns the elements of the list starting at the first index up to but not including the second index.\n    '''\n    return list[start_index:end_index]\n    \ndef insert_element_at_index(list,index,element):\n    '''\n    Write a function that takes in a list, an index, and an element and inserts the element at the index, and returns the resulting list.\n    '''\n    return list[:index] + [element] + list[index:]\n    \ndef is_palindrome(word):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome (reads the same forward as backward), and False otherwise.\n    '''\n    return word == word[::-1]\n    \ndef is_rotated_string(string1,string2):\n    '''\n    Write a function that takes in two strings and returns True if the first string is a rotated version of the second string, and False otherwise.\n    '''\n    return string1[:len(string2)] == string2[-len(string1):]\n    \ndef is_rotated_string_2(string1,string2):\n    '''\n    Write a function that takes in two strings and returns True if the first string is a rotated version of the second string, and False otherwise.\n    '''\n    return len(string1) == len(string2) and string1 in string2 + string2\n    \ndef longest_substring(list):\n    '''\n    Write a function that takes in a list and returns the longest substring that is made from the list.\n    '''\n    return max(list)\n    \ndef merge_lists(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a new list made up of the first list followed by the second list, and returns the resulting new list.\n    '''\n    return list1 + list2\n    \ndef multiply_by_two(number):\n    '''\n    Write a function that takes in a number and returns the result of multiplying that number by two.\n    '''\n    return number * 2\n    \ndef is_even(number):\n    '''\n    Write a function that takes in a number and returns True if the number is even, and False otherwise.\n    '''\n    return number % 2 == 0\n    \ndef count_even(list):\n    '''\n    Write a function that takes in a list and returns the number of even numbers in the list.\n    '''\n    return len([number for number in list if is_even(number)])\n    \ndef sum_list(list):\n    '''\n    Write a function that takes in a list and returns the sum of the numbers in the list.\n    '''\n    return sum(list)\n    \ndef find_odd(list):\n    '''\n    Write a function that takes in a list and returns the first index of an odd number, and returns -1 if no odd number is found.\n    '''\n    for i, number in enumerate(list):\n        if not is_even(number):\n            return i\n    return -1\n    \ndef has_no_elements(list):\n    '''\n    Write a function that takes in a list and returns True if the list has no elements, and False otherwise.\n    '''\n    return not list\n    \ndef reverse_every_k_elements(list,k):\n    '''\n    Write a function that takes in a list and an integer k and returns the resulting list after reversing every k elements in the list.\n    '''\n    return list[::-1][::k]\n    \ndef has_elements_less_than(list,k):\n    '''\n    Write a function that takes in a list and an integer k and returns True if the list has at least k elements and False otherwise.\n    '''\n    return len(list) >= k\n    \ndef has_elements_more_than(list,k):\n    '''\n    Write a function that takes in a list and an integer k and returns True if the list has at least k elements and False otherwise.\n    '''\n    return len(list) > k\n    \ndef get_middle_of_list(list):\n    '''\n    Write a function that takes in a list and returns a new list made up of the first and last elements of the list.\n    '''\n    return [list[0],list[-1]]\n    \ndef remove_element_from_list(list,element):\n    '''\n    Write a function that takes in a list and an element and removes the element from the list, and returns the resulting list.\n    '''\n    return [element for element in list if element!= element]\n    \ndef remove_element_by_index(list,index):\n    '''\n    Write a function that takes in a list and an index and removes the element from the list at the index, and returns the resulting list.\n    '''\n    return list[:index] + list[index + 1:]\n    \ndef get_k_last_elements(list,k):\n    '''\n    Write a function that takes in a list and an integer k and returns the last k elements of the list.\n    '''\n    return list[-k:]\n    \ndef get_k_first_elements(list,k):\n    '''\n    Write a function that takes in a list and an integer k and returns the first k elements of the list.\n    '''\n    return list[:k]\n    \ndef get_index_of_first(list,element):\n    '''\n    Write a function that takes in a list and an element and returns the index of the first occurrence of the element in the list.\n    '''\n    for i, element in enumerate(list):\n        if element == element:\n            return i\n    return -1\n    \ndef get_index_of_last(list,element):\n    '''\n    Write a function that takes in a list and an element and returns the index of the last occurrence of the element in the list.\n    '''\n    for i, element in enumerate(list):\n        if element == element:\n            return i\n    return -1\n    \ndef get_index_of_second(list,element):\n    '''\n    Write a function that takes in a list and an element and returns the index of the second occurrence of the element in the list.\n    '''\n    index = get_index_of_first(list",
        "num_ids": 14
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\n",
        "num_ids": 16
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    temp_list = []\n    for i in range(len(list)):\n        temp_list.append(list[i])\n        temp_list.insert(i,element)\n    return temp_list\n",
        "num_ids": 51
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [x for x in list for y in [element] + list[:-1] if x!= y]\n",
        "num_ids": 29
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(0,len(list)):\n        result.append(list[i])\n        result.insert(i,element)\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n",
        "num_ids": 28
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        print(number,end = \"\\n\")\n        #polar coordinates are x = r*cos(phi) and y = r*sin(phi)\n        #where phi is in radians and r is absolute value of z\n        #note that the range function does not stop when z < 0, it stops at 0\n        print(\"r = \",abs(number))\n        print(\"phi = \",cmath.phase(number))\n        print()\n    \ndef convert2(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        print(number,end = \"\\n\")\n        #polar coordinates are x = r*cos(phi) and y = r*sin(phi)\n        #where phi is in radians and r is absolute value of z\n        #note that the range function does not stop when z < 0, it stops at 0\n        print(\"r = \",abs(number))\n        print(\"phi = \",cmath.phase(number))\n        print()\n",
        "num_ids": 110
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    c = complex(numbers)\n    return cmath.polar(c)\n",
        "num_ids": 22
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return abs(numbers), cmath.phase(numbers)\ndef convert(numbers):\n    '''\n    Write a python function t",
        "num_ids": 8
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z = complex(numbers)\n    return cmath.polar(z)\n",
        "num_ids": 22
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if type(numbers) == tuple:\n        magnitude = cmath.polar(numbers[0]+numbers[1]*1j)\n        angle = cmath.phase(numbers[0]+numbers[1]*1j)\n    else:\n        magnitude = cmath.polar(numbers+1j*0)\n        angle = cmath.phase(numbers+1j*0)\n    return (magnitude, angle)\n",
        "num_ids": 113
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    n = len(numbers)\n    result = []\n    for i in range(n):\n        result.append(cmath.polar(numbers[i]))\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return cmath.polar(complex(numbers))\n",
        "num_ids": 16
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def complex_to_polar(number):\n        r = cmath.polar(number)\n        return r[0], r[1]\n    return map(complex_to_polar, numbers)\n",
        "num_ids": 51
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar = []\n    for x in numbers:\n        r = x.real\n        i = x.imag\n        if r > 0:\n            theta = cmath.phase(x)\n            polar.append((r,theta))\n        elif r == 0:\n            theta = 0\n            polar.append((r,theta))\n        else:\n            theta = cmath.phase(x)\n            if theta < 0:\n                theta += 2 * cmath.pi\n            polar.append((r,theta))\n    return polar\n    \ndef is_number(n):\n    try:\n        float(n)\n        return True\n    except ValueError:\n        return False\n    \ndef is_polar(n):\n    if is_number(n):\n        if isinstance(n, complex):\n            return True\n        else:\n            return False\n    else:\n        return False\n    \ndef is_cartesian(n):\n    if is_number(n):\n        if isinstance(n, complex):\n            return False\n        else:\n            return True\n    else:\n        return False\n",
        "num_ids": 271
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    complex_numbers=[]\n    for x in numbers:\n        x_real = x.real\n        x_imag = x.imag\n        complex_numbers.append([x_real, x_imag])\n    return complex_numbers\n    \n    \ndef conjugate(numbers):\n    '''\n    Write a python function to convert complex numbers to conjugate.\n    '''\n    complex_numbers=[]\n    for x in numbers:\n        x_real = x.real\n        x_imag = x.imag*-1\n        complex_numbers.append([x_real, x_imag])\n    return complex_numbers\n    \ndef modulus(complex_numbers):\n    '''\n    Write a python function to convert complex numbers to modulus.\n    '''\n    complex_numbers=[]\n    for x in complex_numbers:\n        modulus = x[0]**2 + x[1]**2\n        complex_numbers.append(modulus)\n    return complex_numbers\n    \ndef phase(complex_numbers):\n    '''\n    Write a python function to convert complex numbers to phase.\n    '''\n    complex_numbers=[]\n    for x in complex_numbers:\n        phase = cmath.phase(complex(x[0], x[1]))\n        complex_numbers.append(phase)\n    return complex_numbers\n    \ndef inverse(complex_numbers):\n    '''\n    Write a python function to convert complex numbers to inverse.\n    '''\n    complex_numbers=[]\n    for x in complex_numbers:\n        inverse = 1 / (x[0]**2 + x[1]**2)\n        complex_numbers.append(inverse)\n    return complex_numbers\n",
        "num_ids": 61
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([a for a in list1 if type(a) is int])\n",
        "num_ids": 21
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element,int):\n            count+=1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([i for i in list1 if isinstance(i, int)])\n",
        "num_ids": 22
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([i for i in list1 if type(i) == int])\n",
        "num_ids": 21
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([i for i in list1 if type(i)==int])\n",
        "num_ids": 21
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for x in list1:\n        if x.isdigit():\n            count += 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    num_of_int = 0\n    for i in list1:\n        if isinstance(i,int):\n            num_of_int+=1\n    return num_of_int\n",
        "num_ids": 46
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    # To get started, your function should return how many of each number in the list are integers.\n    # Your function should be able to handle lists of any size.\n    # For example, this function should be able to handle a list of size 3.\n    # \n    # Example: \n    # >> count_integer([1, 3, 4, \"hello\", 6, \"world\"])\n    # 3\n    # >> count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n    # 13\n    # >> count_integer([1, 2, \"hello\", 4, \"world\"])\n    # 4\n    # >> count_integer([\"dog\", \"cat\", 5, 7, 2])\n    # 3\n    # \n    # \n    # Hint: List indexing starts at 0 and the length of a list is len(list) - 1. \n    # The first element of a list is at index 0 and the last element is at index len(list) - 1.\n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    ",
        "num_ids": 2013
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = [str(x) for x in l]\n    l = list(set(l))\n    l.sort()\n    x = [''.join(i) for i in list(combinations_with_replacement(l,n))]\n    return x\n",
        "num_ids": 64
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "num_ids": 19
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # list_combinations = list(combinations_with_replacement(l, n))\n    # return list_combinations\n    # return list(combinations_with_replacement(l, n))\n    return [(a, b, c) for a in l for b in l for c in l if a!= b!= c]\n",
        "num_ids": 81
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(l) for i in range(n)] + [tuple(l) for j in range(n, len(l)+1)]\ndef combinations_colors_2(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(l[:i]+l[i+1:]) for i in range(n)] + [tuple(l[:n]+l[n+1:]) for j in range(n, len(l)+1)]\ndef subsets(l):\n    '''\n    Write a function that takes in a list and returns a list with all the subsets of the list, including the empty subset.\n    '''\n    return [set(l)] + [set(l[:i]+l[i+1:]) for i in range(len(l))]\ndef subsets_2(l):\n    '''\n    Write a function that takes in a list and returns a list with all the subsets of the list, including the empty subset.\n    '''\n    return [list(l)] + [list(l[:i]+l[i+1:]) for i in range(len(l))]\ndef get_all_subsets(l):\n    '''\n    Write a function that takes in a list and returns a list with all the subsets of the list, including the empty subset.\n    '''\n    all_subsets = []\n    for subset in subsets(l):\n        all_subsets.append(subset)\n    return all_subsets\ndef get_all_subsets_2(l):\n    '''\n    Write a function that takes in a list and returns a list with all the subsets of the list, including the empty subset.\n    '''\n    return [list(s) for s in set(subsets(l))]\ndef generate_all_strings(l):\n    '''\n    Write a function that takes in a list of strings and returns a list of all strings within the list, which are permutations of each other, except for the empty string.\n    '''\n    return [''.join(e) for e in set(combinations_with_replacement(l, len(l))) if e]\ndef generate_all_strings_2(l):\n    '''\n    Write a function that takes in a list of strings and returns a list of all strings within the list, which are permutations of each other, except for the empty string.\n    '''\n    return [''.join(e) for e in set(combinations_with_replacement(l, len(l))) if e]\ndef generate_all_strings_3(l):\n    '''\n    Write a function that takes in a list of strings and returns a list of all strings within the list, which are permutations of each other, except for the empty string.\n    '''\n    return [''.join(e) for e in set(combinations_with_replacement(l, len(l))) if e]\ndef sum_of_elements_1(l):\n    '''\n    Write a function that takes in a list of integers and returns the sum of the integers.\n    '''\n    return sum(l)\ndef sum_of_elements_2(l):\n    '''\n    Write a function that takes in a list of integers and returns the sum of the integers.\n    '''\n    return sum(l)\ndef sum_of_elements_3(l):\n    '''\n    Write a function that takes in a list of integers and returns the sum of the integers.\n    '''\n    return sum(l)\ndef sum_of_elements_4(l):\n    '''\n    Write a function that takes in a list of integers and returns the sum of the integers.\n    '''\n    return sum(l)\ndef sum_of_elements_5(l):\n    '''\n    Write a function that takes in a list of integers and returns the sum of the integers.\n    '''\n    return sum(l)\ndef sum_of_elements_6(l):\n    '''\n    Write a function that takes in a list of integers and returns the sum of the integers.\n    '''\n    return sum(l)\ndef sum_of_elements_7(l):\n    '''\n    Write a function that takes in a list of integers and returns the sum of the integers.\n    '''\n    return sum(l)\ndef sum_of_elements_8(l):\n    '''\n    Write a function that takes in a list of integers and returns the sum of the integers.\n    '''\n    return sum(l)\ndef sum_of_elements_9(l):\n    '''\n    Write a function that takes in a list of integers and returns the sum of the integers.\n    '''\n    return sum(l)\ndef sum_of_elements_10(l):\n    '''\n    Write a function that takes in a list of integers and returns the sum of the integers.\n    '''\n    return sum(l)\ndef sum_of_elements_11(l):\n    '''\n    Write a function that takes in a list of integers and returns the sum of the integers.\n    '''\n    return sum(l)\ndef sum_of_elements_12(l):\n    '''\n    Write a function that takes in a list of integers and returns the sum of the integers.\n    '''\n    return sum(l)\ndef sum_of_elements_13(l):\n    '''\n    Write a function that takes in a list of integers and returns the sum of the integers.\n    '''\n    return sum(l)\ndef sum_of_elements_14(l):\n    '''\n    Write a function that takes in a list of integers and returns the sum of the integers.\n    '''\n    return sum(l)\ndef sum_of_elements_15(l):\n    '''\n    Write a function that takes in a list of integers and returns the sum of the integers.\n    '''\n    return sum(l)\ndef sum_of_elements_16(l):\n    '''\n    Write a function that takes in a list of integers and returns the sum of the integers.\n    '''\n    return sum(l)\ndef sum_of_elements_17(l):\n    '''\n    Write a function that takes in a list of integers and returns the sum of the integers.\n    '''\n    return sum(l)\ndef sum_of_elements_18(l):\n    '''\n    Write a function that takes in a list of integers and returns the sum of the integers.\n    '''\n    return sum(l)\ndef sum_of_elements_19(l):\n    '''\n    Write a function that takes in a list of integers and returns the sum of the integers.\n    '''\n    return sum(l)\ndef sum_of_elements_20(l):\n    '''\n    Write a function that takes in a list of integers and returns the sum of the integers.\n    '''\n    return sum(l)\ndef sum_of_elements_21(l):\n    '''\n    Write a function that takes in a list of integers and returns the sum of the integers.\n    '''\n    return sum(l)\ndef sum_of_elements_22(l):\n    '''\n    Write a function that takes in a list of integers and returns the sum of the integers.\n    '''\n    return sum(l)\ndef sum_of_elements_23(l):\n    '''\n    Write a function that takes in a list of integers and returns the sum of the integers.\n    '''\n    return sum(l)\ndef sum_of_elements_24(l):\n    '''\n    Write a function that takes in a list of integers and returns the sum of the integers.\n    '''\n    return sum(l)\ndef sum_of_elements_25(l):\n    '''\n    Write a function that takes in a list of integers and returns the sum of the integers.\n    '''\n    return sum(l)\ndef sum_of_elements_26(l):\n    '''\n    Write a function that takes in a list of integers and returns the sum of the integers.\n    '''\n    return sum(l)\ndef sum_of_element",
        "num_ids": 15
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    assert len(l) >= n, \"length of list must be at least equal to n\"\n    combs = []\n    for i in range(len(l)):\n        if i + n < len(l):\n            combs += [(l[i],) * n + l[i+1:i+n+1]]\n        else:\n            combs += [(l[i],) * n]\n    return combs\n",
        "num_ids": 102
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n > len(l):\n        return \"Invalid length.\"\n    elif n == len(l):\n        return [tuple(l)]\n    elif n == 1:\n        return [(item,) for item in l]\n    else:\n        return [(item,)*n for item in l] + combinations_colors(l, n-1)\ndef factorial(n):\n    '''\n    Write a function that takes in an integer n and returns n!\n    '''\n    if n < 0:\n        return \"This is not a factorial!\"\n    elif n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\ndef factors(n):\n    '''\n    Write a function that takes in an integer n and returns a list of the factors of n. Your list should include both n and 1. \n    '''\n    if n < 0:\n        return \"This is not a factorial!\"\n    elif n == 0:\n        return []\n    else:\n        return [n] + factors(n - 1)\ndef flatten(l):\n    '''\n    Write a function that takes in a list of lists and returns a list of all the items in the list of lists. Do not modify the passed in list.\n    '''\n    if type(l) is not list:\n        return \"Expected a list but found a %s\" % type(l)\n    elif len(l) == 0:\n        return []\n    else:\n        return [l[0]] + flatten(l[1:])\ndef fib(n):\n    '''\n    Write a function that takes in a positive integer n and returns the nth fibonacci number.\n    '''\n    if type(n) is not int:\n        return \"Invalid input.\"\n    elif n < 0:\n        return \"Invalid input.\"\n    elif n == 0 or n == 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\ndef is_anagram(word1, word2):\n    '''\n    Write a function that takes in two strings and returns True if they are anagrams of each other, False otherwise.\n    '''\n    if len(word1)!= len(word2):\n        return False\n    else:\n        return sorted(list(word1)) == sorted(list(word2))\ndef count_letters(word):\n    '''\n    Write a function that takes in a string and returns a dictionary with each letter of the string as a key, and the number of times the letter appears as a value.\n    '''\n    if type(word) is not str:\n        return \"Invalid input.\"\n    else:\n        return {letter: word.count(letter) for letter in word}\ndef count_letters_2(word):\n    '''\n    Write a function that takes in a string and returns a dictionary with each letter of the string as a key, and the number of times the letter appears as a value.\n    '''\n    if type(word) is not str:\n        return \"Invalid input.\"\n    else:\n        return dict((letter, word.count(letter)) for letter in word)\ndef prime_factors(n):\n    '''\n    Write a function that takes in a positive integer n and returns a list of all the prime factors of n. The list should include both n and 1.\n    '''\n    if type(n) is not int or n <= 0:\n        return \"Invalid input.\"\n    else:\n        return [n] + [i for i in range(2, n) if not n % i]\ndef prime_factors_2(n):\n    '''\n    Write a function that takes in a positive integer n and returns a list of all the prime factors of n. The list should include both n and 1.\n    '''\n    if type(n) is not int or n <= 0:\n        return \"Invalid input.\"\n    else:\n        return [i for i in range(2, n + 1) if n % i == 0]\ndef count_vowels(s):\n    '''\n    Write a function that takes in a string and returns a dictionary with each vowel as a key, and the number of times the vowel appears as a value.\n    '''\n    if type(s) is not str:\n        return \"Invalid input.\"\n    else:\n        return {letter: s.count(letter) for letter in s if letter in 'aeiou'}\ndef count_vowels_2(s):\n    '''\n    Write a function that takes in a string and returns a dictionary with each vowel as a key, and the number of times the vowel appears as a value.\n    '''\n    if type(s) is not str:\n        return \"Invalid input.\"\n    else:\n        return dict((letter, s.count(letter)) for letter in s if letter in 'aeiou')\ndef is_prime(n):\n    '''\n    Write a function that takes in a positive integer n and returns True if n is prime, and False otherwise.\n    '''\n    if type(n) is not int or n <= 0:\n        return \"Invalid input.\"\n    else:\n        return len(prime_factors_2(n)) == 1\ndef is_palindrome(n):\n    '''\n    Write a function that takes in a positive integer n and returns True if n is a palindrome, and False otherwise.\n    '''\n    if type(n) is not int or n <= 0:\n        return \"Invalid input.\"\n    else:\n        return str(n) == str(n)[::-1]\ndef is_perfect(n):\n    '''\n    Write a function that takes in a positive integer n and returns True if n is perfect, and False otherwise.\n    '''\n    if type(n) is not int or n <= 0:\n        return \"Invalid input.\"\n    else:\n        return sum(prime_factors(n)) == n\ndef is_pandigital(n):\n    '''\n    Write a function that takes in a positive integer n and returns True if n is a pandigital number, and False otherwise.\n    '''\n    if type(n) is not int or n <= 0:\n        return \"Invalid input.\"\n    else:\n        return ''.join(str(n)) == ''.join(sorted(str(n)))\ndef is_pandigital_2(n):\n    '''\n    Write a function that takes in a positive integer n and returns True if n is a pandigital number, and False otherwise.\n    '''\n    if type(n) is not int or n <= 0:\n        return \"Invalid input.\"\n    else:\n        return set(str(n)) == set(''.join(sorted(str(n))))\ndef is_pandigital_3(n):\n    '''\n    Write a function that takes in a positive integer n and returns True if n is a pandigital number, and False otherwise.\n    '''\n    if type(n) is not int or n <= 0:\n        return \"Invalid input.\"\n    else:\n        return set(str(n)) == set(str(n)[:9])\ndef is_pandigital_4(n):\n    '''\n    Write a function that takes in a positive integer n and returns True if n is a pandigital number, and False otherwise.\n    '''\n    if type(n) is not int or n <= 0:\n        return \"Invalid input.\"\n    else:\n        return set(str(n)) == set(str(n)[:10])\ndef is_pandigital_5(n):\n    '''\n    Write a function that takes in a positive integer n and returns True if n is a pandigital number, and False otherwise.\n    '''\n    if type(n) is not int or n <= 0:\n        return \"Invalid input.\"\n    else:\n        return set(str(n)) == set(str(n)[:11])\ndef is_pandigital_6(n):\n    '''\n    Write a function that takes in a positive integer n and returns True if n is a pandigital number, and False otherwise.\n    '''\n    if type(n) is not int or n <= 0:\n        return \"Invalid input.\"\n    else:\n        return set(str(n)) == set(str(n)[:12])\ndef is_pandigital_7(n):\n    '''",
        "num_ids": 1
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    list_size = len(l)\n    if list_size < n:\n        return []\n    if n == 1:\n        for i in l:\n            yield (i,)\n        return\n    for i in range(list_size):\n        for element in combinations_colors(l[i+1:], n-1):\n            yield (l[i],) + element\n",
        "num_ids": 93
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [(x,) for x in l] + [tuple(l) for i in range(n-1, len(l))]\ndef permutations_with_replacement(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all permutations (with repetition) of the elements of the list and returns a list with a tuple for each permutation.\n    '''\n    return combinations_with_replacement(l, n)\ndef permutations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all permutations (with repetition) of the elements of the list and returns a list with a tuple for each permutation.\n    '''\n    return [(x,) for x in l] + [tuple(l) for i in range(n-1, len(l))]\ndef permutations_colors_with_replacement(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all permutations (with repetition) of the elements of the list and returns a list with a tuple for each permutation.\n    '''\n    return combinations_with_replacement(l, n)\ndef generate_subsets(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all subsets of the elements of the list and returns a list with a tuple for each subset.\n    '''\n    return [(l[i:]) for i in range(len(l))]\ndef generate_subsets_with_replacement(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all subsets with replacement of the elements of the list and returns a list with a tuple for each subset.\n    '''\n    return combinations_with_replacement(l, n)\ndef generate_permutations_with_replacement(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all permutations with replacement of the elements of the list and returns a list with a tuple for each permutation.\n    '''\n    return permutations_with_replacement(l, n)\ndef generate_permutations(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all permutations of the elements of the list and returns a list with a tuple for each permutation.\n    '''\n    return permutations_colors(l, n)\ndef count_permutations(l):\n    '''\n    Write a function that takes in a list and returns the number of permutations of the elements of the list.\n    '''\n    return len(l)\ndef count_permutations_with_replacement(l):\n    '''\n    Write a function that takes in a list and returns the number of permutations with replacement of the elements of the list.\n    '''\n    return len(l)\ndef get_factors(n):\n    '''\n    Write a function that takes in a number and returns a list containing all the factors of that number in ascending order.\n    '''\n    return [i for i in range(2, n) if n%i == 0]\ndef get_divisors(n):\n    '''\n    Write a function that takes in a number and returns a list containing all the divisors of that number in ascending order.\n    '''\n    return [i for i in range(1, n) if n%i == 0]\ndef get_factors_with_replacement(n):\n    '''\n    Write a function that takes in a number and returns a list containing all the factors of that number in ascending order.\n    '''\n    return [i for i in range(2, n) if n%i == 0]\ndef get_divisors_with_replacement(n):\n    '''\n    Write a function that takes in a number and returns a list containing all the divisors of that number in ascending order.\n    '''\n    return [i for i in range(1, n) if n%i == 0]\ndef get_number_of_divisors(n):\n    '''\n    Write a function that takes in a number and returns the number of divisors of that number.\n    '''\n    return len(get_divisors(n))\ndef get_number_of_divisors_with_replacement(n):\n    '''\n    Write a function that takes in a number and returns the number of divisors with replacement of that number.\n    '''\n    return len(get_divisors_with_replacement(n))\ndef is_prime(n):\n    '''\n    Write a function that takes in a number and returns True if the number is prime and False if the number is not prime.\n    '''\n    if get_number_of_divisors(n) == 1:\n        return True\n    else:\n        return False\ndef is_prime_with_replacement(n):\n    '''\n    Write a function that takes in a number and returns True if the number is prime and False if the number is not prime.\n    '''\n    if get_number_of_divisors_with_replacement(n) == 1:\n        return True\n    else:\n        return False\ndef get_primes(l):\n    '''\n    Write a function that takes in a list and returns a list of all prime numbers in the list.\n    '''\n    return [x for x in l if is_prime(x)]\ndef get_primes_with_replacement(l):\n    '''\n    Write a function that takes in a list and returns a list of all prime numbers in the list.\n    '''\n    return [x for x in l if is_prime_with_replacement(x)]\ndef get_primes_in_range(l, m, n):\n    '''\n    Write a function that takes in a list and returns a list of all prime numbers between m and n (inclusive).\n    '''\n    return [x for x in l if is_prime(x) and x >= m and x <= n]\ndef get_primes_in_range_with_replacement(l, m, n):\n    '''\n    Write a function that takes in a list and returns a list of all prime numbers between m and n (inclusive).\n    '''\n    return [x for x in l if is_prime_with_replacement(x) and x >= m and x <= n]\ndef get_factors(n):\n    '''\n    Write a function that takes in a number and returns a list containing all the factors of that number in ascending order.\n    '''\n    return [i for i in range(2, n) if n%i == 0]\ndef get_divisors(n):\n    '''\n    Write a function that takes in a number and returns a list containing all the divisors of that number in ascending order.\n    '''\n    return [i for i in range(1, n) if n%i == 0]\ndef get_factors_with_replacement(n):\n    '''\n    Write a function that takes in a number and returns a list containing all the factors of that number in ascending order.\n    '''\n    return [i for i in range(2, n) if n%i == 0]\ndef get_divisors_with_replacement(n):\n    '''\n    Write a function that takes in a number and returns a list containing all the divisors of that number in ascending order.\n    '''\n    return [i for i in range(1, n) if n%i == 0]\ndef get_number_of_divisors(n):\n    '''\n    Write a function that takes in a number and returns the number of divisors of that number.\n    '''\n    return len(get_divisors(n))\ndef get_number_of_divisors_with_replacement(n):\n    '''\n    Write a function that takes in a number and returns the number of divisors with replacement of that number.\n    '''\n    return len(get_divisors_with_replacement(n))\ndef is_palindrome(n):\n    '''\n    Write a function that takes in a number and returns True if the number is a palindrome and False if the number is not a palindrome.\n    '''\n    return str(n) == str(n)[::-1]\ndef i",
        "num_ids": 20
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "num_ids": 19
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = []\n    for i in l:\n        for j in l:\n            combos.append((i, j))\n    return combos\ndef combine(l):\n    return list(combinations_with_replacement(l, 2))\ndef every_other(l):\n    return [l[i] for i in range(0, len(l), 2)]\ndef pairs(l):\n    return [l[i] + l[j] for i in range(0, len(l), 2) for j in range(1, len(l), 2)]\ndef only_odd(l):\n    return [l[i] for i in range(1, len(l), 2)]\ndef unique_pairs(l):\n    return [l[i] + l[j] for i, j in combinations(range(len(l)), 2) if i!= j]\ndef remove_duplicates(l):\n    return list(set(l))\ndef slice_by_index(l, index):\n    return l[index]\ndef join(l):\n    return ''.join(l)\ndef is_sorted(l):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1))\ndef flip_case(l):\n    return [l[i].lower() if l[i].isupper() else l[i].upper() for i in range(len(l))]\ndef flip_case_list(l):\n    return [l[i].lower() for i in range(len(l))]\ndef flip_case_dict(l):\n    return {l[i].lower(): l[i] for i in range(len(l))}\ndef flip_case_tuple(l):\n    return tuple([l[i].lower() for i in range(len(l))])\ndef split(l, delimeter):\n    return l.split(delimeter)\ndef join_delimeter(l, delimeter):\n    return delimeter.join(l)\ndef join_comma(l):\n    return ', '.join(l)\ndef join_space(l):\n    return''.join(l)\ndef join_and(l):\n    return'and '.join(l)\ndef join_or(l):\n    return'or '.join(l)\ndef all_in(l1, l2):\n    return all([i in l2 for i in l1])\ndef any_in(l1, l2):\n    return any([i in l2 for i in l1])\ndef index_in(l, i):\n    return l[i]\ndef all_in_list(l, l2):\n    return all(i in l2 for i in l)\ndef any_in_list(l, l2):\n    return any(i in l2 for i in l)\ndef index_in_list(l, i):\n    return l[i]\ndef all_not_in(l1, l2):\n    return all([i not in l2 for i in l1])\ndef any_not_in(l1, l2):\n    return any([i not in l2 for i in l1])\ndef index_not_in(l, i):\n    return l[i]\ndef get_char(l, i):\n    return l[i]\ndef get_chars(l, i, j):\n    return l[i:j]\ndef get_last(l, n):\n    return l[-n:]\ndef get_last_2(l, n):\n    return l[-n - 1:]\ndef get_last_3(l, n):\n    return l[-n - 2:]\ndef get_first(l, n):\n    return l[:n]\ndef get_first_2(l, n):\n    return l[:n + 1]\ndef get_first_3(l, n):\n    return l[:n + 2]\ndef get_middle(l, n):\n    return l[n:-n]\ndef get_middle_2(l, n):\n    return l[n:-n - 1]\ndef get_middle_3(l, n):\n    return l[n:-n - 2]\ndef get_middle_4(l, n):\n    return l[n:-n - 3]\ndef get_middle_5(l, n):\n    return l[n:-n - 4]\ndef split_by_index(l, index):\n    return l[:index], l[index:]\ndef split_by_index_2(l, index):\n    return l[:index + 1], l[index + 1:]\ndef split_by_index_3(l, index):\n    return l[:index], l[index:]\ndef split_by_index_4(l, index):\n    return l[:index + 2], l[index + 2:]\ndef split_by_index_5(l, index):\n    return l[:index], l[index:]\ndef split_by_index_6(l, index):\n    return l[:index], l[index:]\ndef split_by_index_7(l, index):\n    return l[:index + 1], l[index + 1:]\ndef split_by_index_8(l, index):\n    return l[:index + 2], l[index + 2:]\ndef split_by_index_9(l, index):\n    return l[:index], l[index:]\ndef split_by_index_10(l, index):\n    return l[:index + 3], l[index + 3:]\ndef split_by_index_11(l, index):\n    return l[:index], l[index:]\ndef split_by_index_12(l, index):\n    return l[:index + 4], l[index + 4:]\ndef split_by_index_13(l, index):\n    return l[:index], l[index:]\ndef split_by_index_14(l, index):\n    return l[:index + 5], l[index + 5:]\ndef split_by_index_15(l, index):\n    return l[:index], l[index:]\ndef split_by_index_16(l, index):\n    return l[:index + 6], l[index + 6:]\ndef split_by_index_17(l, index):\n    return l[:index], l[index:]\ndef split_by_index_18(l, index):\n    return l[:index + 7], l[index + 7:]\ndef split_by_index_19(l, index):\n    return l[:index], l[index:]\ndef split_by_index_20(l, index):\n    return l[:index + 8], l[index + 8:]\ndef split_by_index_21(l, index):\n    return l[:index], l[index:]\ndef split_by_index_22(l, index):\n    return l[:index + 9], l[index + 9:]\ndef split_by_index_23(l, index):\n    return l[:index], l[index:]\ndef split_by_index_24(l, index):\n    return l[:index + 10], l[index + 10:]\ndef split_by_index_25(l, index):\n    return l[:index], l[index:]\ndef split_by_index_26(l, index):\n    return l[:index + 11], l[index + 11:]\ndef split_by_index_27(l, index):\n    return l[:index], l[index:]\ndef split_by_index_28(l, index):\n    return l[:index + 12], l[index + 12:]\ndef split_by_index_29(l, index):\n    return l[:index], l[index:]\ndef split_by_index_30(l, index):\n    return l[:index + 13], l[index + 13:]\ndef split_by_index_31(l, index):\n    return l[:index], l[index:]\ndef split_by_index_32(l, index):\n    return l[:index + 14], l[index + 14:]\ndef split_by_index_33(l, index):\n    return l[:index], l[index:]\ndef split_by_index_34(l, index):\n    retur",
        "num_ids": 1980
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        is_Prime = True\n        for num in range(2, n):\n            if n % num == 0:\n                is_Prime = False\n                break\n        if is_Prime:\n            return 1 + count_Primes_nums(n-1)\n        else:\n            return count_Primes_nums(n-1)\n",
        "num_ids": 97
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = [False] * 2 + [True] * (n - 1)\n    for i in xrange(2, int(math.ceil(math.sqrt(n)))):\n        if primes[i]:\n            for j in xrange(i * 2, n, i):\n                primes[j] = False\n    return sum(primes)\n",
        "num_ids": 88
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    i=0\n    while(i<n):\n        i+=1\n        if is_Prime(i):\n            n-=1\n    return n\n    \ndef is_Prime(n):\n    if n==1:\n        return False\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n    \ndef closest_Prime_below(n):\n    if n==1:\n        return 2\n    if is_Prime(n):\n        return n-1\n    else:\n        return closest_Prime_below(n-1)\n        \ndef sum_of_primes_below(n):\n    if n==1:\n        return 2\n    if is_Prime(n):\n        return n\n    else:\n        return sum_of_primes_below(n-1)\n        \ndef sum_of_primes_below_and_above(a,b):\n    return sum_of_primes_below(b)-sum_of_primes_below(a-1)\n    \ndef sum_of_primes_in_range(a,b):\n    if a==1:\n        return sum_of_primes_below(b)\n    elif a==b:\n        return sum_of_primes_below(b)\n    else:\n        return sum_of_primes_below(b)-sum_of_primes_below(a-1)\n        \ndef is_Palindrome(n):\n    s=str(n)\n    l=len(s)\n    i=0\n    while(i<l/2):\n        if s[i]!=s[l-i-1]:\n            return False\n        i+=1\n    return True\n    \ndef factorial(n):\n    if n==1:\n        return 1\n    else:\n        return n*factorial(n-1)\n        \ndef find_smallest_number_with_same_bit_count(n):\n    count=0\n    i=2\n    while(count!=n):\n        if is_Prime(i):\n            count+=1\n        i+=1\n    return i\n        \ndef is_power(a,b):\n    return a%b==0\n    \ndef is_abundant(n):\n    s=0\n    for i in range(1,n):\n        if is_power(n,i):\n            s+=i\n    return s>n\n        \ndef find_abundant_numbers(n):\n    a=[]\n    for i in range(1,n):\n        if is_abundant(i):\n            a.append(i)\n    return a\n        \ndef reverse_list(L):\n    return [L[i] for i in range(len(L)-1,-1,-1)]\n    \ndef check_if_permutation(a,b):\n    return sorted(str(a))==sorted(str(b))\n    \ndef is_prime_number(n):\n    if n==1:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    for i in range(3,n/2,2):\n        if n%i==0:\n            return False\n    return True\n    \ndef get_primes_below(n):\n    l=[]\n    for i in range(1,n):\n        if is_Prime(i):\n            l.append(i)\n    return l\n    \ndef gcd(a,b):\n    if a==0:\n        return b\n    return gcd(b%a,a)\n    \ndef lcm(a,b):\n    return a*b/gcd(a,b)\n    \ndef get_factors(n):\n    l=[]\n    for i in range(1,n+1):\n        if n%i==0:\n            l.append(i)\n    return l\n    \ndef number_of_divisors(n):\n    return len(get_factors(n))\n    \ndef is_perfect_number(n):\n    return sum_of_primes_below(n)==n\n    \ndef nth_perfect_number(n):\n    if n==1:\n        return 1\n    i=1\n    s=0\n    while(s<n):\n        s+=number_of_divisors(i)\n        i+=1\n    return i-1\n    \ndef is_abundant_number(n):\n    return n>sum_of_primes_below(n)\n    \ndef is_deficient_number(n):\n    return n<sum_of_primes_below(n)\n    \ndef is_amicable_number(n):\n    return sum_of_primes_below(n)==n and is_perfect_number(n)\n    \ndef sum_of_divisors(n):\n    l=[]\n    for i in range(1,n+1):\n        if n%i==0:\n            l.append(i)\n    return sum(l)\n    \ndef sum_of_divisors_minus_n(n):\n    return sum_of_divisors(n)-n\n    \ndef find_sum_of_divisors_of_abundant_numbers(n):\n    l=[]\n    for i in range(1,n):\n        if is_abundant_number(i):\n            l.append(sum_of_divisors_minus_n(i))\n    return l\n    \ndef sum_of_divisors_of_amicable_numbers(n):\n    l=[]\n    for i in range(1,n):\n        if is_amicable_number(i):\n            l.append(sum_of_divisors_minus_n(i))\n    return l\n    \ndef sum_of_divisors_of_deficient_numbers(n):\n    l=[]\n    for i in range(1,n):\n        if is_deficient_number(i):\n            l.append(sum_of_divisors_minus_n(i))\n    return l\n    \ndef check_if_summable(a,b,c):\n    return a+b==c\n    \ndef is_triangle(a,b,c):\n    return a+b>c and b+c>a and c+a>b\n    \ndef is_triangle_type(a,b,c):\n    l=[a,b,c]\n    l.sort()\n    return l[0]+l[1]>l[2]\n    \ndef find_triangle_type(a,b,c):\n    if is_triangle(a,b,c):\n        if is_triangle_type(a,b,c):\n            return \"Right\"\n        else:\n            return \"Scalene\"\n    else:\n        return \"Inconnu\"\n    \ndef number_of_ways(n):\n    if n==0:\n        return 1\n    elif n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        return number_of_ways(n-1)+number_of_ways(n-2)\n        \ndef is_string_permutation(a,b):\n    return sorted(str(a))==sorted(str(b))\n    \ndef longest_common_subsequence(a,b):\n    l=[[0 for j in range(len(b)+1)] for i in range(len(a)+1)]\n    for i in range(1,len(a)+1):\n        for j in range(1,len(b)+1):\n            if a[i-1]==b[j-1]:\n                l[i][j]=1+l[i-1][j-1]\n            else:\n                l[i][j]=max(l[i][j-1],l[i-1][j])\n    return l[len(a)][len(b)]\n    \ndef find_longest_common_subsequence(a,b):\n    l=[[0 for j in range(len(b)+1)] for i in range(len(a)+1)]\n    for i in range(1,len(a)+1):\n        for j in range(1,len(b)+1):\n            if a",
        "num_ids": 1999
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    return sum(1 for i in range(2,n+1) if all(i%j!=0 for j in range(2,i)))\n",
        "num_ids": 37
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    count = 0\n    for x in range(2, n + 1):\n        flag = 1\n        for y in range(2, x):\n            if x % y == 0:\n                flag = 0\n                break\n        if flag:\n            count += 1\n    return count\n",
        "num_ids": 69
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    assert n >= 0, \"n must be non-negative\"\n    if n == 0:\n        return 0\n    primes = [2]\n    for i in range(3,n+1,2):\n        for p in primes:\n            if i % p == 0:\n                break\n        else:\n            primes.append(i)\n    return len(primes)\n",
        "num_ids": 92
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 2:\n        return 0\n    if n == 3:\n        return 1\n    if n%2 == 0 or n%3 == 0:\n        return 0\n",
        "num_ids": 43
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return (n-1)+(count_Primes_nums(n-2))\n",
        "num_ids": 38
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    #start = time.time()\n    \n    # if n <= 2:\n    #     return 0\n    \n    # else:\n    #     prime = True\n    #     for i in range(2, n):\n    #         if n%i == 0:\n    #             prime = False\n    #     if prime:\n    #         return 1\n    #     else:\n    #         return count_Primes_nums(n-1)\n    \n    \n    #end = time.time()\n    #print(end - start)\n    \n    primes = [True for i in range(n+1)]\n    primes[0], primes[1] = False, False\n    \n    i = 2\n    while i*i <= n:\n        if primes[i] == True:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n        i += 1\n    \n    #print(primes)\n    return sum(primes)\n    \n    \n    #end = time.time()\n    #print(end - start)\n    \n    \n    \n    \n    #count = 0\n    #for i in range(2, n):\n    #    if i < 100:\n    #        count += 1\n    #    else:\n    #        if n%i == 0:\n    #            count += 1\n    #print(count)\n    \n    #end = time.time()\n    #print(end - start)\n    \n    \n    \n    \ndef count_Primes_nums_2(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    if n <= 2:\n        return 0\n    \n    start = time.time()\n    primes = [True for i in range(n+1)]\n    primes[0], primes[1] = False, False\n    \n    i = 2\n    while i*i <= n:\n        if primes[i] == True:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n        i += 1\n    #print(primes)\n    end = time.time()\n    print(end - start)\n    \n    \n    \n    \ndef are_anagrams(s1, s2):\n    '''\n    Write a python function that takes in two strings and returns True if the two strings are anagrams of each other and False otherwise.\n    \n    An anagram is a rearrangement of letters to form a word or phrase.\n    \n    Example:\n    are_anagrams('stop', 'pots') returns True\n    are_anagrams('stop', 'pots') returns False\n    are_anagrams('stop', 'pots') returns True\n    are_anagrams('stop','stops') returns True\n    '''\n    \n    #start = time.time()\n    \n    # if len(s1)!= len(s2):\n    #     return False\n    # for i in s1:\n    #     if i not in s2:\n    #         return False\n    # return True\n    \n    #end = time.time()\n    #print(end - start)\n    \n    s1_sort = sorted(s1)\n    s2_sort = sorted(s2)\n    if s1_sort == s2_sort:\n        return True\n    else:\n        return False\n    \n    \n    #end = time.time()\n    #print(end - start)\n    \n    \ndef is_palindrome(n):\n    '''\n    Write a python function that takes in a positive integer and returns True if the number is a palindrome and False otherwise.\n    \n    A palindrome is a number that reads the same backward as forward.\n    \n    For example:\n    is_palindrome(1234) returns True\n    is_palindrome(123) returns False\n    is_palindrome(2015) returns True\n    is_palindrome(2015) returns False\n    \n    Hint:\n    Make sure you only check for factors up to the square root of the number.\n    '''\n    \n    #start = time.time()\n    \n    # if n == 0 or n == 1:\n    #     return True\n    # else:\n    #     reverse = 0\n    #     num_digits = len(str(n))\n    #     for i in range(num_digits):\n    #         reverse += int(str(n)[num_digits-i-1])*(10**(num_digits-i-1))\n    #     if reverse == n:\n    #         return True\n    #     else:\n    #         return False\n    \n    #end = time.time()\n    #print(end - start)\n    \n    #n = int(n)\n    #if n < 0:\n    #    return False\n    #elif n == 0:\n    #    return True\n    #elif n == 1:\n    #    return True\n    #else:\n    #    reverse = 0\n    #    while n!= 0:\n    #        reverse = reverse*10 + n%10\n    #        n = n//10\n    #    if reverse == n:\n    #        return True\n    #    else:\n    #        return False\n    \n    \n    #end = time.time()\n    #print(end - start)\n    \n    \n    #n = int(n)\n    #if n < 0:\n    #    return False\n    #elif n == 0:\n    #    return True\n    #elif n == 1:\n    #    return True\n    #else:\n    #    reverse = 0\n    #    while n!= 0:\n    #        reverse = reverse*10 + n%10\n    #        n = n//10\n    #    if reverse == n:\n    #        return True\n    #    else:\n    #        return False\n    \n    #end = time.time()\n    #print(end - start)\n    \n    \n    #if n == 0 or n == 1:\n    #    return True\n    #else:\n    #    return is_palindrome(n//10) and (n%10 == n//10%10)\n    \n    #end = time.time()\n    #print(end - start)\n    \n    \n    \n    #if n < 0:\n    #    return False\n    #elif n == 0:\n    #    return True\n    #else:\n    #    return is_palindrome(n//10) and (n%10 == n//10%10)\n    \n    #end = time.time()\n    #print(end - start)\n    \n    #return n == 0 or is_palindrome(n//10) and (n%10 == n//10%10)\n    \n    #start = time.time()\n    #print(n)\n    #if n < 0:\n    #    return False\n    #elif n == 0:\n    #    return True\n    #else:\n    #    return is_palindrome(n//10) and (n%10 == n//10%10)\n    \n    #end = time.time()\n    #print(end - start)\n    \n    #if n < 0:\n    #    return False\n    #elif n == 0:\n    #    return True\n    #else:\n    #    return is_palindrome(n//10) and (n%10 == n//10%10)\n    \n    #if n == 0 or n == 1:\n    #    return True\n    #else:\n    #    return is_palindrome(n//10) and (n%10 == n//10%10)\n    \n    #start = time.time()\n    #return n == 0 or is_palindrome(n//10) and (n%10 == n//10%10)\n    \n    #end = time.time()\n    #print(end - start)\n    \n    #return n == 0 or is_palindrome(n//10) and (n%10 == n//10%10)\n    \n    #start = time.time()\n    #print(n)\n    #if n < 0",
        "num_ids": 976
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    counter = 0\n    for i in range(2, n + 1):\n        if check_Prime(i):\n            counter += 1\n    return counter\n",
        "num_ids": 38
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a,b = b,a\n    return (a,b)\n",
        "num_ids": 19
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n    \ndef swap_names(first_name,last_name):\n    '''\n    Write a function that takes in two strings and returns a tuple with the first string and then the last string.\n    '''\n    return (last_name,first_name)\n    \ndef swap_string_and_int(a,b):\n    '''\n    Write a function that takes in two strings and returns a tuple with the first string and then the second string.\n    '''\n    return (b,a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    x = a\n    y = b\n    return (y, x)\n",
        "num_ids": 20
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    x = b\n    b = a\n    a = x\n    return (a,b)\n",
        "num_ids": 25
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "num_ids": 10
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2\n",
        "num_ids": 42
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    if len(test_tup1) > len(test_tup2):\n        max_tup = test_tup1\n        min_tup = test_tup2\n    else:\n        max_tup = test_tup2\n        min_tup = test_tup1\n    return max_tup, min_tup\n",
        "num_ids": 94
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = (0,0)\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] >= test_tup2[i]:\n                max_tup = test_tup1\n                break\n            elif test_tup1[i] <= test_tup2[i]:\n                max_tup = test_tup2\n                break\n    else:\n        if len(test_tup1) > len(test_tup2):\n            max_tup = test_tup1\n        else:\n            max_tup = test_tup2\n    return max_tup\n",
        "num_ids": 180
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    t1_num = len(test_tup1)\n    t2_num = len(test_tup2)\n    if t1_num > t2_num:\n        return max(test_tup1, test_tup2)\n    else:\n        return max(test_tup2, test_tup1)\n",
        "num_ids": 83
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return max_tuple(test_tup1, test_tup2)\n    else:\n        return max_tuple(test_tup2, test_tup1)\n",
        "num_ids": 66
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    if len(test_tup1) > len(test_tup2):\n        max_tup = test_tup1\n        min_tup = test_tup2\n    else:\n        max_tup = test_tup2\n        min_tup = test_tup1\n    \n    element_len = len(max_tup)\n    \n    for i in range(element_len):\n        if max_tup[i] < min_tup[i]:\n            temp = min_tup[i]\n            min_tup[i] = max_tup[i]\n            max_tup[i] = temp\n    \n    return max_tup\n",
        "num_ids": 170
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return max(test_tup1)\n    else:\n        return max(test_tup2)\n",
        "num_ids": 48
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1, test_tup2)\n",
        "num_ids": 19
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_val = max(max(test_tup1), max(test_tup2))\n    if max_val == max(test_tup1):\n        return test_tup1\n    else:\n        return test_tup2\n",
        "num_ids": 61
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2\n",
        "num_ids": 42
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    s = 0\n    m = 0\n    d = 1\n    a = 1\n    b = 0\n    while d!= 1:\n        m = a + s**2\n        d = gcd(m - 1, n)\n        b = (a - s*m)//d\n        a = m\n        s = b\n    return (m + 1)\n",
        "num_ids": 110
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n==1:\n        return 2\n    else:\n        return newman_prime(n-1) + 1\n",
        "num_ids": 31
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(n):\n        if n == 1:\n            return False\n        if n == 2:\n            return True\n        for i in xrange(2,int(sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\n    def newman_williams(n, q):\n        if q == 1:\n            return n\n        if n == 1:\n            return 1\n        if is_prime(n):\n            return n\n        q = newman_prime(q)\n        r = n % q\n        if r == 0:\n            return newman_williams(q, n/q)\n        x = newman_williams(q, n/q)\n        c = newman_williams(q, r)\n        c = ((x * c) + (x * x * c)) % n\n        return c\n    return newman_williams(n, n-1)\n",
        "num_ids": 231
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    \n    #This is not clear\n    def next_prime(n):\n        n+=1\n        while not is_prime(n):\n            n+=1\n        return n\n",
        "num_ids": 77
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    return n*3 + 1\n",
        "num_ids": 10
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # We first initialize the list that will contain our newman\u2013shanks\u2013williams prime numbers\n    newman_williams_primes = [2]\n    # Now we need to find the newman\u2013shanks\u2013williams prime numbers for n-1 times\n    for i in range(1, n):\n        # Let's start with the first prime number we know\n        prime = newman_williams_primes[i-1]\n        # We know that any number greater than 1 will be divisible by 2\n        if prime > 1:\n            # Let's go through all the potential numbers\n            for j in range(2, prime):\n                # If the number is divisible by the current prime number\n                if prime % j == 0:\n                    # If we have found a newman\u2013shanks\u2013williams prime number\n                    if is_newman_williams_prime(j, prime):\n                        # Append it to our list\n                        newman_williams_primes.append(j)\n    # We now have the newman\u2013shanks\u2013williams prime numbers for the last time so we return them\n    return newman_williams_primes[n-1]\n",
        "num_ids": 281
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(n):\n        '''\n        Return True if n is a prime number, False if n is not a prime number\n        '''\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if not n & 1:\n            return False\n        d = 3\n        while d * d <= n:\n            if n % d == 0:\n                return False\n            d += 2\n        return True\n",
        "num_ids": 72
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # base case\n    if n == 1: return 2\n    elif n == 2: return 3\n    \n    # get P and Q\n    P = newman_prime(n // 2)\n    Q = newman_prime(n // 3)\n    \n    # modulo arithmetic\n    U = (Q ** 2 - P ** 3) % n\n    V = (-Q ** 2 + P ** 3) % n\n    W = (-Q ** 3 + P ** 2) % n\n    X = (Q ** 3 - P ** 2) % n\n    Y = (2 * P ** 2 * Q ** 2) % n\n    Z = (P ** 3 - 3 * P ** 2) % n\n    \n    return (U * V - W * X) % n\n",
        "num_ids": 179
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    s = []\n    while len(s) < n:\n        s.append(newman_williams(n))\n    return s[n-1]\n",
        "num_ids": 41
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    n = int(n)\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    n_1 = 2\n    n_2 = 3\n    n_3 = 5\n    while True:\n        n_1 += 1\n        if isprime(n_1):\n            n_2 += 2\n            n_3 += 4\n            if isprime(n_2) and isprime(n_3):\n                return True\n    return False\n",
        "num_ids": 115
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return zip(*(tuple(test_tup1[i]/test_tup2[i] for i in range(0, len(test_tup1))) for _ in test_tup1))\n",
        "num_ids": 52
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x / y, test_tup1, test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    return tuple(map(lambda x, y: x / y, test_tup1, test_tup2))\n",
        "num_ids": 32
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    ans = []\n    for x, y in zip(test_tup1, test_tup2):\n        ans.append(x/y)\n    return tuple(ans)\n    \n",
        "num_ids": 47
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1])\n",
        "num_ids": 40
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # return map(lambda x,y: x/y, test_tup1, test_tup2)\n    # return [x/y for x, y in zip(test_tup1, test_tup2)]\n    # return [x / y for x, y in zip(test_tup1, test_tup2)]\n    # return [x / y for x, y in zip(test_tup1, test_tup2)]\n    return [x / y for x, y in zip(test_tup1, test_tup2)]\n",
        "num_ids": 136
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return [round(test_tup1[i]/test_tup2[i],3) for i in range(len(test_tup1))]\n",
        "num_ids": 41
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return [x / y for x, y in zip(test_tup1, test_tup2)]\n",
        "num_ids": 28
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #output = []\n    #for x, y in zip(test_tup1, test_tup2):\n    #    output.append(x / y)\n    #return output\n    return list(map(lambda x, y: x / y, test_tup1, test_tup2))\n",
        "num_ids": 75
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) > L:\n        return [list1[0:L], list1[L:]]\n    else:\n        print(\"The given list is too small to be split into two parts.\")\n",
        "num_ids": 51
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[0:L]\n    second_part = list1[L:]\n    return first_part, second_part\n",
        "num_ids": 36
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return first_part, second_part\n",
        "num_ids": 35
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L >= len(list1):\n        raise ValueError\n    else:\n        return (list1[:L], list1[L:])\n",
        "num_ids": 37
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    L_divider = L\n    if L_divider > len(list1):\n        raise IndexError(\"L_divider cannot be greater than len(list)\")\n    return (list1[:L_divider], list1[L_divider:])\n",
        "num_ids": 64
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n",
        "num_ids": 18
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n",
        "num_ids": 18
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return [list1[:L], list1[L:]]\n",
        "num_ids": 18
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return [list1[i:i+L] for i in range(0, len(list1), L)]\n",
        "num_ids": 29
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1_2 = list1[L:]\n    list1_1 = list1[:L]\n    return (list1_1, list1_2)\n",
        "num_ids": 41
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "num_ids": 10
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Provide an example\n    if h_age > 1:\n        print(\"%s is %s years old\" % (name, age))\n    else:\n        print(\"%s is %s years old\" % (name, \"%.2f\" % age))\n",
        "num_ids": 63
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Your code here\n    return h_age * 7\n",
        "num_ids": 16
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age >= 0:\n        return(h_age * 10)\n    else:\n        return(h_age * -1)\n",
        "num_ids": 36
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return int(h_age) * 7\n",
        "num_ids": 13
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = int(h_age)*7\n    return age\n    \n",
        "num_ids": 19
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return round(h_age * 7.0)\n    \n    \ndef dog_years(m_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return round(m_age * 14)\n    \n    \ndef dog_months(y_age):\n    '''\n    Write a function to calculate a dog's age in dog's months.\n    '''\n    return round(y_age * 12)\n    \n    \ndef dog_weeks(d_age):\n    '''\n    Write a function to calculate a dog's age in dog's weeks.\n    '''\n    return round(d_age * 52.0)\n    \n    \ndef dog_days(d_age):\n    '''\n    Write a function to calculate a dog's age in dog's days.\n    '''\n    return round(d_age * 365)\n    \n    \ndef dog_hours(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's hours.\n    '''\n    return round(h_age * 24)\n    \n    \ndef dog_minutes(m_age):\n    '''\n    Write a function to calculate a dog's age in dog's minutes.\n    '''\n    return round(m_age * 1440)\n    \n    \ndef dog_seconds(s_age):\n    '''\n    Write a function to calculate a dog's age in dog's seconds.\n    '''\n    return round(s_age * 86400)\n    \n    \ndef dog_milliseconds(d_age):\n    '''\n    Write a function to calculate a dog's age in dog's milliseconds.\n    '''\n    return round(d_age * 86400000)\n    \n    \ndef dog_microseconds(u_age):\n    '''\n    Write a function to calculate a dog's age in dog's microseconds.\n    '''\n    return round(u_age * 1000000)\n    \n    \ndef dog_miles(m_age):\n    '''\n    Write a function to calculate a dog's age in dog's miles.\n    '''\n    return round(m_age * 0.621371)\n    \n    \ndef dog_meters(m_age):\n    '''\n    Write a function to calculate a dog's age in dog's meters.\n    '''\n    return round(m_age * 160934)\n    \n    \ndef dog_yards(y_age):\n    '''\n    Write a function to calculate a dog's age in dog's yards.\n    '''\n    return round(y_age * 109344)\n    \n    \ndef dog_feet(f_age):\n    '''\n    Write a function to calculate a dog's age in dog's feet.\n    '''\n    return round(f_age * 304.8)\n    \n    \ndef dog_inches(i_age):\n    '''\n    Write a function to calculate a dog's age in dog's inches.\n    '''\n    return round(i_age * 6)\n    \n    \ndef dog_centimeters(c_age):\n    '''\n    Write a function to calculate a dog's age in dog's centimeters.\n    '''\n    return round(c_age * 30.48)\n    \n    \ndef dog_millimeters(m_age):\n    '''\n    Write a function to calculate a dog's age in dog's millimeters.\n    '''\n    return round(m_age * 304.8)\n    \n    \ndef dog_nanometers(n_age):\n    '''\n    Write a function to calculate a dog's age in dog's nanometers.\n    '''\n    return round(n_age * 1000000000)\n    \n    \ndef dog_picometers(p_age):\n    '''\n    Write a function to calculate a dog's age in dog's picometers.\n    '''\n    return round(p_age * 10000000000)\n    \n    \ndef dog_revolutions(r_age):\n    '''\n    Write a function to calculate a dog's age in dog's revolutions.\n    '''\n    return round(r_age * 4.0)\n    \n    \ndef dog_rotations(r_age):\n    '''\n    Write a function to calculate a dog's age in dog's rotations.\n    '''\n    return round(r_age * 2.0)\n    \n    \ndef dog_microseconds_per_day(u_age):\n    '''\n    Write a function to calculate a dog's age in dog's microseconds per day.\n    '''\n    return round(u_age * 86, 2)\n    \n    \ndef dog_microseconds_per_second(u_age):\n    '''\n    Write a function to calculate a dog's age in dog's microseconds per second.\n    '''\n    return round(u_age * 1000000, 2)\n    \n    \ndef dog_microseconds_per_minute(m_age):\n    '''\n    Write a function to calculate a dog's age in dog's microseconds per minute.\n    '''\n    return round(m_age * 60000000, 2)\n    \n    \ndef dog_microseconds_per_hour(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's microseconds per hour.\n    '''\n    return round(h_age * 3600000000, 2)\n    \n    \ndef dog_microseconds_per_day(d_age):\n    '''\n    Write a function to calculate a dog's age in dog's microseconds per day.\n    '''\n    return round(d_age * 86400000000, 2)\n    \n    \ndef dog_microseconds_per_week(w_age):\n    '''\n    Write a function to calculate a dog's age in dog's microseconds per week.\n    '''\n    return round(w_age * 604800000000, 2)\n    \n    \ndef dog_microseconds_per_month(m_age):\n    '''\n    Write a function to calculate a dog's age in dog's microseconds per month.\n    '''\n    return round(m_age * 2592000000, 2)\n    \n    \ndef dog_microseconds_per_year(y_age):\n    '''\n    Write a function to calculate a dog's age in dog's microseconds per year.\n    '''\n    return round(y_age * 31556952, 2)\n    \n    \ndef dog_microseconds_per_decade(d_age):\n    '''\n    Write a function to calculate a dog's age in dog's microseconds per decade.\n    '''\n    return round(d_age * 1099511627776, 2)\n    \n    \ndef dog_microseconds_per_century(c_age):\n    '''\n    Write a function to calculate a dog's age in dog's microseconds per century.\n    '''\n    return round(c_age * 1152921504606846976, 2)\n    \n    \ndef dog_microseconds_per_millennium(m_age):\n    '''\n    Write a function to calculate a dog's age in dog's microseconds per millennium.\n    '''\n    return round(m_age * 4.209463e+18, 2)\n    \n    \ndef dog_years_per_day(y_age):\n    '''\n    Write a function to calculate a dog's age in dog's years per day.\n    '''\n    return round(y_age * 365.25, 2)\n    \n    \ndef dog_years_per_second(y_age):\n    '''\n    Write a function to calculate a dog's age in dog's years per second.\n    '''\n    return round(y_age * 365.25 * 24, 2)\n    \n    \ndef dog_years_per_minute(y_age):\n    '''\n    Write a function to calculate a dog's age in dog's years per minute.\n    '''\n    return round(y_age * 365.25 * 24 * 60, 2)\n    \n    \ndef dog_years_per_hour(y_age):\n    '''\n    Write a function to calculate a dog's age in dog's years per hour.\n    '''\n    return round(y_age * 365.25 * 24 * 60 * 60, 2)\n    \n    \ndef dog_years_per_decade(y_age):\n    '''\n    Write a function to calculate a dog's age in dog's years per decade.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = 14.0 + (h_age * 7)\n    return age\n",
        "num_ids": 21
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return (14 - h_age) * 7\n",
        "num_ids": 14
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age == None:\n        return \"enter a value\"\n    else:\n        return 15 * h_age + 15\n",
        "num_ids": 33
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step < 1:\n        raise ValueError(\"step must be positive\")\n    l = []\n    for i in range(0, len(S), step):\n        l.append(S[i:i+step])\n    return l\n",
        "num_ids": 58
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    new_list = []\n    for i in range(0, len(S), step):\n        new_list.append(S[i:i+step])\n    return new_list\n",
        "num_ids": 46
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    lst = []\n    for i in range(0, len(S), step):\n        lst.append(S[i:i+step])\n    return lst\n",
        "num_ids": 43
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateral_surface_area = 6*l**2\n    return lateral_surface_area\n",
        "num_ids": 24
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = int(l)\n    l2 = l*l\n    return 6*l2\n",
        "num_ids": 25
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6*l**2\n    return area\n",
        "num_ids": 15
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = int(l)\n    if l == 0:\n        return 0\n    return 6 * l ** 2\n",
        "num_ids": 29
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    from math import sqrt\n    return 6*l**2\n",
        "num_ids": 17
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([x**2 for x in range(1,n+1,2)])\nprint square_Sum(25)\n",
        "num_ids": 32
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1, 2):\n        total = total + i**2\n    return total\n",
        "num_ids": 35
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum(x**2 for x in range(1, n, 2))\n",
        "num_ids": 21
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    n = int(n)\n    total = 0\n    for i in range(1,n+1,2):\n        total = total + (i*i)\n    return total\n",
        "num_ids": 45
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if i % 2 == 1:\n            sum += i * i\n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum(x**2 for x in range(1,n+1,2))\n",
        "num_ids": 23
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([i**2 for i in range(1, n, 2)])\n",
        "num_ids": 22
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(0,n):\n        if i%2==1:\n            total += (i*i)\n    return total\n    \n    \n    \ndef fib(n):\n    '''\n    Write a python function that takes in an integer n and returns the nth value in the Fibonacci sequence.\n    '''\n    if n < 2:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n        \n        \n        \ndef factorial(n):\n    '''\n    Write a python function that takes in an integer n and returns the factorial of the integer.\n    '''\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n    \n    \n    \ndef sum_digits(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the digits of the integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n%10 + sum_digits(n//10)\n        \n    \n    \ndef is_digit(n):\n    '''\n    Write a python function that takes in a string n and returns True if the string contains only digits and False if it doesn't.\n    '''\n    if n.isdigit():\n        return True\n    else:\n        return False\n    \n    \n    \ndef remove_last(n):\n    '''\n    Write a python function that takes in a string n and returns a new string where the last character is removed.\n    '''\n    if len(n) == 1:\n        return \"\"\n    else:\n        return n[:-1]\n        \n        \n    \ndef count_vowels(n):\n    '''\n    Write a python function that takes in a string n and returns the number of vowels in the string.\n    '''\n    vowel_count = 0\n    for c in n:\n        if c in \"aeiouAEIOU\":\n            vowel_count += 1\n    return vowel_count\n        \n    \n    \ndef print_triangle(n):\n    '''\n    Write a python function that takes in an integer n and prints the first n rows of the triangle as shown below.\n    '''\n    for row in range(1,n+1):\n        print(\" \"*(n-row),end=\"\")\n        for col in range(1,row+1):\n            print(str(col),end=\"\")\n        print()\n    \n    \n    \ndef gen_prime(n):\n    '''\n    Write a python function that takes in an integer n and returns a generator that yields the first n primes.\n    '''\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2,n):\n            if n%i == 0:\n                return False\n        return True\n    \n    \n    prime_list = []\n    i = 2\n    while len(prime_list) < n:\n        if is_prime(i):\n            prime_list.append(i)\n        i += 1\n    return prime_list\n    \n    \n    \ndef prime_factors(n):\n    '''\n    Write a python function that takes in an integer n and returns a generator that yields the prime factors of n.\n    '''\n    if n == 1:\n        return []\n    \n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2,n):\n            if n%i == 0:\n                return False\n        return True\n    \n    \n    prime_list = []\n    i = 2\n    while len(prime_list) < n:\n        if is_prime(i):\n            if n%i == 0:\n                prime_list.append(i)\n                n = n//i\n    return prime_list\n    \n    \n    \ndef primes_below(n):\n    '''\n    Write a python function that takes in an integer n and returns the prime numbers below n.\n    '''\n    if n <= 2:\n        return []\n    \n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2,n):\n            if n%i == 0:\n                return False\n        return True\n    \n    return [i for i in range(2,n) if is_prime(i)]\n    \n    \n    \ndef is_palindrome(n):\n    '''\n    Write a python function that takes in an integer n and returns True if n is a palindrome, otherwise it returns False.\n    '''\n    if n == n[::-1]:\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_pangram(s):\n    '''\n    Write a python function that takes in a string s and returns True if s is a pangram, otherwise it returns False.\n    '''\n    if len(s) < 26:\n        return False\n    \n    letters = {}\n    for c in s:\n        if c not in letters:\n            letters[c] = 1\n        else:\n            letters[c] += 1\n    \n    letters_list = list(letters.values())\n    letters_list.sort()\n    if letters_list == [i for i in range(1,27)]:\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_anagram(s, t):\n    '''\n    Write a python function that takes in two strings s and t and returns True if s and t are anagrams, otherwise it returns False.\n    '''\n    if len(s)!= len(t):\n        return False\n    else:\n        sort_s = \"\".join(sorted(s))\n        sort_t = \"\".join(sorted(t))\n        if sort_s == sort_t:\n            return True\n        else:\n            return False\n    \n    \n    \ndef is_member(n):\n    '''\n    Write a python function that takes in an integer n and returns True if n is a member of the set {1,4,9,16,25}, otherwise it returns False.\n    '''\n    if n == 1 or n == 4 or n == 9 or n == 16 or n == 25:\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_hex(n):\n    '''\n    Write a python function that takes in an integer n and returns True if n is a hex number (either 2,3,6,7,8 or 9), otherwise it returns False.\n    '''\n    if n == 2 or n == 3 or n == 6 or n == 7 or n == 8 or n == 9:\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_triangle(n):\n    '''\n    Write a python function that takes in an integer n and returns True if n is a triangle number, otherwise it returns False.\n    '''\n    if n == 0:\n        return False\n    \n    divisor = 1\n    while divisor < n:\n        if n%divisor == 0:\n            if (n//divisor)**2 == n:\n                return True\n        divisor += 1\n    return False\n    \n    \n    \ndef is_right_triangle(n):\n    '''\n    Write a python function that takes in an integer n and returns True if n is a right triangle, otherwise it returns False.\n    '''\n    if n < 0:\n        return False\n    \n    divisor = 1\n    while divisor < n:\n        if n%divisor == 0:\n            if (n//divisor)**2 == n:\n                return True\n        divisor += 1\n    return False\n    \n    \n    \ndef is_pentagonal(n):\n    '''\n    Write a python function that takes in an integer n and returns True if n is a pentagonal number, otherwise it returns False.\n    '''\n    if n == 0:\n        return False\n    \n    divisor = 1\n    while divisor < n:\n        if n%divisor == 0:\n            if (n//divisor)**2 == n - divisor:\n                return True\n        divisor += 1\n    return False\n    \n    \n    \ndef is_prime(n):\n    '''",
        "num_ids": 1
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Your Code Here\n    numbers = [x for x in range(1, n + 1) if x % 2 == 1]\n    return sum(x * x for x in numbers)\n",
        "num_ids": 46
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Variable to store the sum of the squares of the first n odd natural numbers\n    sum = 0\n    \n    # Loop to iterate through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Square the current number\n        num_sq = i**2\n        # Add the square to the sum\n        sum = sum + num_sq\n    \n    # Return the sum\n    return sum\n",
        "num_ids": 102
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    def count_stars(n):\n        return n*(n+1)//2\n    \n    count = 0\n    number_of_stars = 1\n    while count < n:\n        number_of_stars += 1\n        count = count_stars(number_of_stars)\n    \n    return number_of_stars\n",
        "num_ids": 79
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    return find_star_num(n-1) + 2 * find_star_num(n-2) + 3 * find_star_num(n-3) + 4 * find_star_num(n-4) + 5 * find_star_num(n-5)\n",
        "num_ids": 78
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n < 1:\n        return\n    if n == 1:\n        print('*',end='')\n        return\n    stars = 1\n    row = 1\n    while row <= n:\n        for _ in range(1,stars+1):\n            print('*',end='')\n        stars += 2\n        print()\n        row += 1\n    for _ in range(1,stars+1):\n        print('*',end='')\n    print()\nfind_star_num(3)\n",
        "num_ids": 122
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    res = 0\n    for i in range(1,n+1):\n        res += i\n    return res\n",
        "num_ids": 29
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return find_star_num(n-1) * (n+1) // 2\n    ",
        "num_ids": 39
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    num = 1\n    star_num = 1\n    while star_num < n:\n        num += 1\n        star_num += num\n    return num\n",
        "num_ids": 39
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return int(5*(math.factorial(n)/(math.factorial(n-5)*math.factorial(5))))\n    \ndef test_find_star_num():\n    assert find_star_num(0) == 1\n    assert find_star_num(1) == 5\n    assert find_star_num(2) == 25\n    assert find_star_num(3) == 125\n    assert find_star_num(4) == 625\n    assert find_star_num(5) == 3125\n    assert find_star_num(10) == 92500\n    ",
        "num_ids": 140
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    total_stars = 1\n    for x in range(1, n):\n        total_stars *= (x + 1)\n    return total_stars\n",
        "num_ids": 38
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 5\n    if n == 4:\n        return 8\n    return find_star_num(n-1) + find_star_num(n-2) + find_star_num(n-3)\n",
        "num_ids": 92
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return find_star_num(n - 1) + (n - 1) * find_star_num(n - 2)\n",
        "num_ids": 54
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    try:\n        return ord(k)\n    except Exception as e:\n        print e\n    \ndef ascii_string(k):\n    '''\n    Write a function to find the ascii value of a string.\n    '''\n    try:\n        return ''.join([str(ord(i)) for i in k])\n    except Exception as e:\n        print e\n    \ndef ascii_chr(n):\n    '''\n    Write a function to find the ASCII value of a character.\n    '''\n    try:\n        return chr(n)\n    except Exception as e:\n        print e\n",
        "num_ids": 25
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_values = {'a': 97, 'b': 98, 'c': 99, 'd': 100, 'e': 101, 'f': 102, 'g': 103, 'h': 104, 'i': 105, 'j': 106, 'k': 107, 'l': 108,'m': 109, 'n': 110, 'o': 111, 'p': 112, 'q': 113, 'r': 114,'s': 115, 't': 116, 'u': 117, 'v': 118, 'w': 119, 'x': 120, 'y': 121, 'z': 122}\n    return ascii_values[k]\n",
        "num_ids": 150
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k) - 96\n",
        "num_ids": 11
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k) - ord('a') + 1\n",
        "num_ids": 16
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_code = ord(k)\n    return ascii_code\n",
        "num_ids": 22
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(0,len(arr),2):\n        total = total + arr[i]\n    return total\n",
        "num_ids": 36
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(arr[i] for i in range(0, len(arr), 2) if i % 2 == 0)\n",
        "num_ids": 31
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0,len(arr),2):\n        if arr[i] % 2 == 0:\n            sum = sum + arr[i]\n    return sum\n",
        "num_ids": 48
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in xrange(len(arr)):\n        if i%2 == 0:\n            if arr[i]%2 == 0:\n                sum += arr[i]\n    return sum\n",
        "num_ids": 53
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(0, len(arr), 2):\n        sum_even += arr[i]\n    return sum_even\n",
        "num_ids": 40
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for x in range(len(arr)):\n        if x % 2 == 0:\n            total += arr[x]\n    return total\n",
        "num_ids": 40
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_index = [arr[i] for i in range(len(arr)) if i % 2 == 0]\n    sum_even_index = sum(even_index)\n    return sum_even_index\n",
        "num_ids": 51
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    if not arr:\n        return 0\n    total = 0\n    for index in range(0, len(arr), 2):\n        total += arr[index]\n    return total\n",
        "num_ids": 44
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(arr[::2])\n",
        "num_ids": 12
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    if len(arr) < 2:\n        return None\n    else:\n        i = 0\n        total = 0\n        while i < len(arr):\n            if i % 2 == 0:\n                total += arr[i]\n            i += 1\n        return total\n",
        "num_ids": 65
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for x in range(2,n+1,2):\n        total += x**5\n    return total\n",
        "num_ids": 33
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    if n < 1:\n        return 0\n    for i in range(0,n):\n        if i % 2 == 0:\n            total += i**5\n    return total\n",
        "num_ids": 49
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 8\n    elif n == 5:\n        return 32\n    elif n == 6:\n        return 256\n    elif n == 7:\n        return 1428\n    elif n == 8:\n        return 4116\n    elif n == 9:\n        return 3220\n    elif n == 10:\n        return 972\n    elif n == 11:\n        return 2560\n    elif n == 12:\n        return 6720\n    elif n == 13:\n        return 7344\n    elif n == 14:\n        return 8536\n    elif n == 15:\n        return 9240\n    elif n == 16:\n        return 10368\n    elif n == 17:\n        return 10656\n    elif n == 18:\n        return 11392\n    elif n == 19:\n        return 12496\n    elif n == 20:\n        return 13592\n    elif n == 21:\n        return 14688\n    elif n == 22:\n        return 15792\n    elif n == 23:\n        return 17000\n    elif n == 24:\n        return 1808\n    elif n == 25:\n        return 1824\n    elif n == 26:\n        return 1832\n    elif n == 27:\n        return 1840\n    elif n == 28:\n        return 1848\n    elif n == 29:\n        return 1856\n    elif n == 30:\n        return 1864\n    elif n == 31:\n        return 1872\n    elif n == 32:\n        return 1880\n    elif n == 33:\n        return 1888\n    elif n == 34:\n        return 1896\n    elif n == 35:\n        return 1904\n    elif n == 36:\n        return 1912\n    elif n == 37:\n        return 1920\n    elif n == 38:\n        return 1928\n    elif n == 39:\n        return 1936\n    elif n == 40:\n        return 1944\n    elif n == 41:\n        return 1952\n    elif n == 42:\n        return 1960\n    elif n == 43:\n        return 1968\n    elif n == 44:\n        return 1976\n    elif n == 45:\n        return 1984\n    elif n == 46:\n        return 1992\n    elif n == 47:\n        return 2000\n    elif n == 48:\n        return 2008\n    elif n == 49:\n        return 2016\n    elif n == 50:\n        return 2024\n    elif n == 51:\n        return 2032\n    elif n == 52:\n        return 2040\n    elif n == 53:\n        return 2048\n    elif n == 54:\n        return 2056\n    elif n == 55:\n        return 2064\n    elif n == 56:\n        return 2072\n    elif n == 57:\n        return 2080\n    elif n == 58:\n        return 2088\n    elif n == 59:\n        return 2096\n    elif n == 60:\n        return 2104\n    elif n == 61:\n        return 2122\n    elif n == 62:\n        return 2132\n    elif n == 63:\n        return 2140\n    elif n == 64:\n        return 2148\n    elif n == 65:\n        return 2156\n    elif n == 66:\n        return 2164\n    elif n == 67:\n        return 2172\n    elif n == 68:\n        return 2180\n    elif n == 69:\n        return 2188\n    elif n == 70:\n        return 2196\n    elif n == 71:\n        return 2204\n    elif n == 72:\n        return 2212\n    elif n == 73:\n        return 2220\n    elif n == 74:\n        return 2228\n    elif n == 75:\n        return 2236\n    elif n == 76:\n        return 2244\n    elif n == 77:\n        return 2242\n    elif n == 78:\n        return 2250\n    elif n == 79:\n        return 2248\n    elif n == 80:\n        return 2256\n    elif n == 81:\n        return 2264\n    elif n == 82:\n        return 2272\n    elif n == 83:\n        return 2280\n    elif n == 84:\n        return 2288\n    elif n == 85:\n        return 2296\n    elif n == 86:\n        return 2304\n    elif n == 87:\n        return 2312\n    elif n == 88:\n        return 2320\n    elif n == 89:\n        return 2328\n    elif n == 90:\n        return 2336\n    elif n == 91:\n        return 2334\n    elif n == 92:\n        return 2342\n    elif n == 93:\n        return 2350\n    elif n == 94:\n        return 2358\n    elif n == 95:\n        return 2366\n    elif n == 96:\n        return 2374\n    elif n == 97:\n        return 2382\n    elif n == 98:\n        return 2390\n    elif n == 99:\n        return 2408\n    elif n == 100:\n        return 2416\n    elif n == 101:\n        return 2424\n    elif n == 102:\n        return 2432\n    elif n == 103:\n        return 2440\n    elif n == 104:\n        return 2448\n    elif n == 105:\n        return 2456\n    elif n == 106:\n        return 2464\n    elif n == 107:\n        return 2472\n    elif n == 108:\n        return 2480\n    elif n == 109:\n        return 2488\n    elif n == 110:\n        return 2496\n    elif n == 111:\n        return 2504\n    elif n == 112:\n        return 2512\n    elif n == 113:\n        return 2520\n    elif n == 114:\n        return 2528\n    elif n == 115:\n        return 2536\n    elif n == 116:\n        return 2544\n    elif n == 117:\n        return 2552\n    elif n == 118:\n        return 2560\n    elif n == 119:\n        return 2568\n    elif n == 120:\n        return 2576\n    elif n == 121:\n        return 2584\n    elif n == 122:\n        return 2592\n    elif n == 123:\n        return 2600\n    elif n == 124:\n        return 2608\n    elif n == 125:\n        return 2616\n    elif n == 126:\n        return 2624\n    elif n == 127:\n        return 2632\n    elif n == 128:\n        return 2640\n    elif n == 129:\n        return 2648\n    elif n == 130:\n        return 2656\n    elif n == 131:\n        return 2664\n    elif n == 132:\n        return 2672\n    elif n == 133:\n        return 2680\n    elif n == 134:\n        return 2688\n    elif n == 135:\n        return 2696\n    elif n == 136:\n        return 2704\n    elif n == 137:\n        return 2712\n    elif n == 138:\n        return 2720\n    elif n == 139:\n        return 2728\n    elif n == 140:\n        return 2736\n    elif n == 141:\n        return 2744\n    elif n == 142:\n        return 2752\n    elif n == 143:\n        return 2760\n    elif n == 144:\n        return 2768\n    elif n == 145:\n        return 2776\n    elif n == 146:\n        return 2784\n    elif n == 147:\n        return 2792\n    elif n == 148:\n        return 2800\n    elif n == 149:\n        return 2808\n    elif n == 150:\n        return 2816\n    elif n == 151:\n        return 2824\n    elif n == 152:\n        return 2832\n    elif n == 153:\n        return 2840\n    elif n == 154:\n        return 2848\n    elif n == 155:\n        return 2856\n    elif n == 156:\n        retur",
        "num_ids": 1999
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n <= 1:\n        return 0\n    else:\n        return even_Power_Sum(n - 1) + (2 ** 5)\n",
        "num_ids": 36
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sum += i ** 5\n    return sum\n",
        "num_ids": 40
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # initialize an empty list and intialize the sum variable as 0\n    list_of_powers = []\n    power_sum = 0\n    # check if n is even or if n is not an integer and raise ValueError exception\n    if not isinstance(n, int): \n        raise ValueError(\"n is not an integer.\") \n    # if n is even, calculate the sum of the first n even natural numbers raised to the power of 5\n    if n % 2 == 0: \n        for i in range(2, n + 1, 2): \n            list_of_powers.append(i ** 5)\n        # for every number in the list, add it to the power sum\n        for power in list_of_powers: \n            power_sum += power\n        # return the power sum\n        return power_sum\n    # if n is not even, raise a ValueError exception\n    else: \n        raise ValueError(\"n is not even.\")",
        "num_ids": 220
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n <= 0:\n        return None\n    if n == 1:\n        return 2\n    return even_Power_Sum(n-1) + 4*(n-1) + 2\n",
        "num_ids": 47
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    return sum(range(0, n+1, 2))**5\n",
        "num_ids": 21
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(0,n+1,2)])\n",
        "num_ids": 24
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n <= 0:\n        return 0\n    summ = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            summ += i**5\n    return summ\n",
        "num_ids": 53
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        result.append(item[1])\n    return result\n",
        "num_ids": 30
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [(x,y[-1]) for x,y in test_list]\n",
        "num_ids": 22
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [element[1] for element in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    def extract(tup):\n        return tup[-1]\n    return map(extract, test_list)\n",
        "num_ids": 31
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    output = []\n    for i in range(len(test_list)):\n        output.append(test_list[i][-1])\n    return output\n",
        "num_ids": 40
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [i[-1] for i in test_list]\n",
        "num_ids": 18
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[1] for tup in test_list]\n",
        "num_ids": 19
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[-1] for t in test_list]\n",
        "num_ids": 18
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[1] for x in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    \n    # Set up an empty list to store the final results\n    results = []\n    \n    # Loop over the list\n    for element in test_list:\n        # Add the rear element to the end of the results list\n        results.append(element[-1])\n    \n    # Return the list\n    return results\n",
        "num_ids": 77
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return [test_tup1[i] - test_tup2[i] for i in range(len(test_tup1))]\n    \ndef multiply_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and multiplies the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return [test_tup1[i] * test_tup2[i] for i in range(len(test_tup1))]\n    \ndef add_tuples(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and adds the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return [test_tup1[i] + test_tup2[i] for i in range(len(test_tup1))]\n    \ndef main():\n    test_tup1 = (1, 2, 3, 4)\n    test_tup2 = (1, 2, 3, 4)\n    print(add_tuples(test_tup1, test_tup2))\n    print(substract_elements(test_tup1, test_tup2))\n    print(multiply_elements(test_tup1, test_tup2))\n    \nif __name__ == '__main__':\n    main(",
        "num_ids": 159
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return (test_tup1[0] - test_tup2[0], test_tup1[1] - test_tup2[1], test_tup1[2] - test_tup2[2])\n",
        "num_ids": 57
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] - test_tup2[i],)\n    return new_tup\n",
        "num_ids": 59
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]\n",
        "num_ids": 46
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    res_tup = ()\n    for i in range(len(test_tup1)):\n        res_tup = res_tup + (test_tup1[i] - test_tup2[i],)\n    return res_tup\n",
        "num_ids": 64
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Inputs must have the same number of elements')\n",
        "num_ids": 38
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'Tuples must be same length'\n    else:\n        return tuple([x - y for x, y in zip(test_tup1, test_tup2)])\n",
        "num_ids": 65
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result\n",
        "num_ids": 50
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise IndexError\n    for index in xrange(len(test_tup1)):\n        test_tup1[index] = test_tup1[index] - test_tup2[index]\n    return test_tup1\n    \nprint substract_elements((1,2,3,4,5),(1,2,3,4,5))\nprint substract_elements((5,6,7,8,9),(4,5,6,7,8))\nprint substract_elements((5,6,7,8,9,10),(4,5,6,7,8,10))\n",
        "num_ids": 173
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]\n    return test_tup1\n    \n    \ndef get_word_at_index(word, index):\n    '''\n    Write a function that takes in a string and an index, and returns the word at that index (if the index is valid)\n    '''\n    if index < len(word):\n        return word[index]\n    else:\n        return None\n        \n    \ndef replace_character(word, index, letter):\n    '''\n    Write a function that takes in a string, an index, and a letter, and replaces the letter at that index in the string with an underscore (_).\n    '''\n    if index < len(word):\n        return word[:index] + letter + word[index+1:]\n    else:\n        return None\n        \n    \ndef count_letter(word, letter):\n    '''\n    Write a function that takes in a string and a letter, and returns the number of times the letter appears in the string.\n    '''\n    return word.count(letter)\n    \n    \ndef replace_letter(word, index, letter):\n    '''\n    Write a function that takes in a string and an index, and a letter, and replaces the letter at that index with the provided letter.\n    '''\n    if index < len(word):\n        return word[:index] + letter + word[index+1:]\n    else:\n        return None\n        \ndef remove_letter(word, letter):\n    '''\n    Write a function that takes in a string and a letter, and returns a string with the letter removed from the string.\n    '''\n    if letter in word:\n        return word.replace(letter, '')\n    else:\n        return None\n        \ndef main():\n    print \"Welcome to Python's Hw #2\\n\"\n    print \"You will be given a set of tests, and your job is to print out what the answer is.\"\n    print \"Good luck!\\n\"\n",
        "num_ids": 84
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize result\n    result = 0\n",
        "num_ids": 13
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_coeff_sum = 0\n    for k in range( n + 1): \n        binomial_coeff_sum = binomial_coeff_sum + binomial_coeff(k, n)\n    return binomial_coeff_sum\ndef even_binomial_coeff(k, n): \n    '''\n    Write a python function that takes in two positive integers k and n and returns the kth even index binomial coefficient.\n    '''\n    binomial_coeff = 1\n    for i in range(1, k + 1):\n        binomial_coeff = binomial_coeff * (n - i + 1)\n    return binomial_coeff\ndef odd_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    binomial_coeff_sum = 0\n    for k in range( n + 1): \n        binomial_coeff_sum = binomial_coeff_sum + odd_binomial_coeff(k, n)\n    return binomial_coeff_sum\ndef odd_binomial_coeff(k, n): \n    '''\n    Write a python function that takes in two positive integers k and n and returns the kth odd index binomial coefficient.\n    '''\n    binomial_coeff = 1\n    for i in range(1, k + 1):\n        binomial_coeff = binomial_coeff * (n - i + 1)\n    return binomial_coeff\ndef summation_of_primes( n): \n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the first n prime numbers.\n    '''\n    sum = 0\n    num = 1\n    while sum < n:\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            sum = sum + num\n            num = num + 1\n    return sum\ndef summation_of_primes2( n): \n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the first n prime numbers.\n    '''\n    sum = 0\n    num = 2\n    while sum < n:\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            sum = sum + num\n            num = num + 1\n    return sum\ndef summation_of_primes3( n): \n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the first n prime numbers.\n    '''\n    sum = 0\n    num = 3\n    while sum < n:\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            sum = sum + num\n            num = num + 1\n    return sum\ndef summation_of_primes4( n): \n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the first n prime numbers.\n    '''\n    sum = 0\n    num = 5\n    while sum < n:\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            sum = sum + num\n            num = num + 1\n    return sum\ndef summation_of_primes5( n): \n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the first n prime numbers.\n    '''\n    sum = 0\n    num = 7\n    while sum < n:\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            sum = sum + num\n            num = num + 1\n    return sum\ndef summation_of_primes6( n): \n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the first n prime numbers.\n    '''\n    sum = 0\n    num = 11\n    while sum < n:\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            sum = sum + num\n            num = num + 1\n    return sum\ndef summation_of_primes7( n): \n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the first n prime numbers.\n    '''\n    sum = 0\n    num = 17\n    while sum < n:\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            sum = sum + num\n            num = num + 1\n    return sum\ndef summation_of_primes8( n): \n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the first n prime numbers.\n    '''\n    sum = 0\n    num = 19\n    while sum < n:\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            sum = sum + num\n            num = num + 1\n    return sum\ndef summation_of_primes9( n): \n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the first n prime numbers.\n    '''\n    sum = 0\n    num = 23\n    while sum < n:\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            sum = sum + num\n            num = num + 1\n    return sum\ndef summation_of_primes10( n): \n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the first n prime numbers.\n    '''\n    sum = 0\n    num = 29\n    while sum < n:\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            sum = sum + num\n            num = num + 1\n    return sum\ndef summation_of_primes11( n): \n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the first n prime numbers.\n    '''\n    sum = 0\n    num = 31\n    while sum < n:\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            sum = sum + num\n            num = num + 1\n    return sum\ndef summation_of_primes12( n): \n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the first n prime numbers.\n    '''\n    sum = 0\n    num = 37\n    while sum < n:\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            sum = sum + num\n            num = num + 1\n    return sum\ndef summation_of_primes13( n): \n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the first n prime numbers.\n    '''\n    sum = 0\n    num = 41\n    while sum < n:\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            sum = sum + num\n            num = num + 1\n    return sum\ndef summation_of_primes14( n): \n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the first n prime numbers.\n    '''\n    sum = 0\n    num = 43\n    while sum < n:\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            sum = sum + num\n            num = num + 1\n    return sum\ndef summation_of_primes15( n): \n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the first n prime numbers.\n    '''\n    sum = 0\n    num = 49\n    while sum < n:\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            sum = sum + num\n            num = num + 1\n    return sum\ndef summation_o",
        "num_ids": 69
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2* n * even_binomial_Coeff_Sum(n-1)\n",
        "num_ids": 39
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return 1\n    else:\n        return n*(n-1)/2\n    # sum = 0\n    # for i in range(n):\n    #     if i%2 == 0:\n    #         sum = sum + even_binomial_Coeff_Sum(i)\n    # return sum\n",
        "num_ids": 93
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Your code here\n    if n==0:\n        return 1\n    elif n==1:\n        return 1\n    else:\n        return 2*even_binomial_Coeff_Sum(n-1) + even_binomial_Coeff_Sum(n-2)\n",
        "num_ids": 71
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (math.factorial(2*n) / ( math.factorial(n + 1) * math.factorial(n)))\n",
        "num_ids": 34
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    Coeff = [0]\n    for i in range(2,n+1):\n        Coeff.append(0)\n        for j in range(0,i):\n            if j == 0 or j == i-1:\n                Coeff[i] += 1\n            else:\n                Coeff[i] += (Coeff[j]*Coeff[i-j-1])\n    \n    return Coeff[n]\n    \n    \n    \n    \ndef highest_power_digit( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the highest power digit in n.\n    '''\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        count = 0\n        power = 1\n        while n/10 == n:\n            n = n/10\n            count += 1\n        if count == 1:\n            return n\n        else:\n            return power\n    \ndef nth_digit( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the nth digit in n.\n    '''\n    \n    if n == 0:\n        return 0\n    else:\n        return math.floor(n%10)\n    \ndef digit_sum( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the digits in n.\n    '''\n    \n    if n == 0:\n        return 0\n    else:\n        count = 0\n        while n/10 == n:\n            n = n/10\n            count += 1\n        if count == 1:\n            return n\n        else:\n            return (n%10) + digit_sum(n/10)\n    \ndef count_digits( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the number of digits in n.\n    '''\n    \n    if n == 0:\n        return 0\n    else:\n        count = 0\n        while n/10 == n:\n            n = n/10\n            count += 1\n        return count+1\n    \ndef is_perfect_square( n):\n    '''\n    Write a python function that takes in a positive integer n and returns a boolean True if n is a perfect square.\n    '''\n    \n    if n == 1:\n        return True\n    else:\n        return is_perfect_square(n/2)\n    \ndef is_power_of_2( n):\n    '''\n    Write a python function that takes in a positive integer n and returns a boolean True if n is a power of 2.\n    '''\n    \n    if n == 1:\n        return True\n    else:\n        return (n%2 == 0) and is_power_of_2(n/2)\n    \ndef nth_power_digit( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the nth power digit in n.\n    '''\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        count = 0\n        power = 1\n        while n/10 == n:\n            n = n/10\n            count += 1\n        if count == 1:\n            return n\n        else:\n            return (n%10)**(power)\n    \ndef count_nth_power_digit( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the count of the nth power digit in n.\n    '''\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        count = 0\n        power = 1\n        while n/10 == n:\n            n = n/10\n            count += 1\n        if count == 1:\n            return n\n        else:\n            return (n%10)**(power)\n    \ndef is_perfect_cube( n):\n    '''\n    Write a python function that takes in a positive integer n and returns a boolean True if n is a perfect cube.\n    '''\n    \n    if n == 1:\n        return True\n    else:\n        return is_perfect_cube(n/3)\n    \ndef is_power_of_3( n):\n    '''\n    Write a python function that takes in a positive integer n and returns a boolean True if n is a power of 3.\n    '''\n    \n    if n == 1:\n        return True\n    else:\n        return (n%3 == 0) and is_power_of_3(n/3)\n    \ndef nth_power_of_3( n):\n    '''\n    Write a python function that takes in a positive integer n and returns the nth power of 3.\n    '''\n    \n    if n == 1:\n        return 3\n    elif n == 2:\n        return 27\n    else:\n        count = 0\n        power = 1\n        while n/3 == n:\n            n = n/3\n            count += 1\n        if count == 1:\n            return 3**n\n        else:\n            return 3**(power)\n    \ndef is_perfect_square_possible( n):\n    '''\n    Write a python function that takes in a positive integer n and returns a boolean True if it is possible to represent n as a sum of perfect squares.\n    '''\n    \n    if n == 1:\n        return True\n    elif n == 2:\n        return True\n    else:\n        return is_perfect_square_possible(n/2)\n    \ndef sum_of_perfect_squares( n):\n    '''\n    Write a python function that takes in a positive integer n and returns the sum of all the perfect squares less than n.\n    '''\n    \n    if n == 1:\n        return 1\n    else:\n        return (n+sum_of_perfect_squares(n-1))\n    \ndef is_perfect_square_pair( n):\n    '''\n    Write a python function that takes in a positive integer n and returns a boolean True if it is a perfect square pair.\n    '''\n    \n    if n == 1:\n        return True\n    else:\n        return is_perfect_square_pair(n-1)\n    \ndef sum_of_perfect_square_pairs( n):\n    '''\n    Write a python function that takes in a positive integer n and returns the sum of all the perfect square pairs less than n.\n    '''\n    \n    if n == 1:\n        return 1\n    else:\n        return (n+sum_of_perfect_square_pairs(n-1))\n    \ndef nth_perfect_square( n):\n    '''\n    Write a python function that takes in a positive integer n and returns the nth perfect square.\n    '''\n    \n    if n == 1:\n        return 1\n    else:\n        return (n**2+nth_perfect_square(n-1))\n    \ndef is_perfect_square_possible_triplet( n):\n    '''\n    Write a python function that takes in a positive integer n and returns a boolean True if it is a possible perfect square triplet.\n    '''\n    \n    if n == 1:\n        return True\n    elif n == 2:\n        return True\n    else:\n        return is_perfect_square_possible_triplet(n-2)\n    \ndef sum_of_perfect_square_triplets( n):\n    '''\n    Write a python function that takes in a positive integer n and returns the sum of all the perfect square triplets less than n.\n    '''\n    \n    if n == 1:\n        return 1\n    else:\n        return (n+sum_of_perfect_square_triplets(n-2))\n    \ndef nth_perfect_square_triplet( n):\n    '''\n    Write a python function that takes in a positive integer n and returns the nth perfect square triplet.\n    '''\n    \n    if n == 1:\n        return 1\n    else:\n        return (n**2+nth_perfect_square_triplet(n-2))\n    \ndef is_perfect_square_pair_possible_triplet( n):\n    '''\n    Write a python function that takes in a positive integer n and returns a boolean True if it is a possible perfect square pair tripl",
        "num_ids": 29
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n<=0:\n        return 1\n    if n==1:\n        return 1\n    else:\n        return n/2*(even_binomial_Coeff_Sum(n-1)+n/2*even_binomial_Coeff_Sum(n-2))\n",
        "num_ids": 71
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_list = [1]\n    for i in range(2,n+1):\n        binomial_list.append(binomial_list[-1]*i)\n    binomial_list = binomial_list[0:-1]\n    binomial_sum = 0\n    for i in binomial_list:\n        if i%2 == 0:\n            binomial_sum+=i\n    return binomial_sum\n",
        "num_ids": 103
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n < 0): \n        return None\n    if (n == 0) or (n == 1): \n        return 1\n    else: \n        return 2 * even_binomial_Coeff_Sum(n-2) + even_binomial_Coeff_Sum(n-1) \n",
        "num_ids": 76
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return ((math.pi/4)*(r**2)*h)\n",
        "num_ids": 19
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return math.pi * (r**2) * h\n",
        "num_ids": 16
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    if r <= 0 or h <= 0:\n        return 0\n    else:\n        return pi*r*h\n",
        "num_ids": 29
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (pi * (r**2) * h)\n",
        "num_ids": 16
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (math.pi*(r**2)*h)\n",
        "num_ids": 17
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (pi/3) * (r**2) * h\n",
        "num_ids": 18
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    \n    volume = r**2*pi*h\n    return volume\n",
        "num_ids": 19
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (3.14)*(r**2)*h\n",
        "num_ids": 16
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return math.pi * r**2 * h\n",
        "num_ids": 14
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key,value in dict.items() if value >= n}\n",
        "num_ids": 23
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n",
        "num_ids": 43
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n",
        "num_ids": 23
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for (k,v) in dict.iteritems() if v>=n}\n",
        "num_ids": 27
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}\n",
        "num_ids": 23
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    l=[]\n    for i in dict:\n        if dict[i]>=n:\n            l.append(i)\n    return l\n",
        "num_ids": 37
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for key in dict.keys():\n        if dict[key]<n:\n            del dict[key]\n    return dict\n",
        "num_ids": 32
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for (k,v) in dict.items() if v>=n}\n",
        "num_ids": 26
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n",
        "num_ids": 43
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_new = {}\n    for key,value in dict.items():\n        if value >= n:\n            dict_new[key] = value\n    return dict_new\n",
        "num_ids": 43
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    f_elements = {}\n    for i in test_tup:\n        if i in f_elements:\n            f_elements[i] += 1\n        else:\n            f_elements[i] = 1\n    return f_elements\n",
        "num_ids": 63
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(1, len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[0]:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    pass\n    ",
        "num_ids": 6
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    # if the first element of test_tup is greater than the second element, we should return the count of first element\n    # else we should return the count of second element\n    \n    # if test_tup[0] > test_tup[1]:\n    #     return test_tup[0]\n    # else:\n    #     return test_tup[1]\n    \n    if test_tup[0] < test_tup[1]:\n        return test_tup[0]\n    else:\n        return test_tup[1]\n",
        "num_ids": 137
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    a, b, c = test_tup\n    return a + count_first_elements(b) + count_first_elements(c)\n    ",
        "num_ids": 39
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    tup_list = list(test_tup)\n    new_list = [tup_list[0]]\n    for i in tup_list[1:]:\n        if new_list[-1]!= i:\n            new_list.append(i)\n        else:\n            pass\n    return len(new_list)\n",
        "num_ids": 83
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # [1,2,3,4,5,6]\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 5 6\n    # 0 1 2 3 4 ",
        "num_ids": 2006
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    global count\n    for i in range(len(test_tup)):\n        if test_tup[i] == first_element:\n            count += 1\n            break\n",
        "num_ids": 44
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    test_tup = tuple(test_tup)\n    tup_list = list(test_tup)\n    element_count_dict = {}\n    for element in tup_list:\n        if element not in element_count_dict:\n            element_count_dict[element] = 1\n        else:\n            element_count_dict[element] += 1\n    return element_count_dict\n",
        "num_ids": 97
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num_1 = 0\n    num_2 = 1\n    num_3 = 1\n    count = 2\n",
        "num_ids": 28
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    dec_num = int(n / 10) + 1\n    \n    return sum(range(dec_num, 0, -1)) * 10 + dec_num\n    \nif __name__ == \"__main__\":\n    print(is_num_decagonal(108)",
        "num_ids": 65
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int((10 * n) + (9 * ((n * (n + 1)) / 2)))\n",
        "num_ids": 26
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 22\n    else:\n        return n * (n - 1) / 2\n",
        "num_ids": 41
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return sum(range(1,n+1,2))*10**(n+1) - sum(range(0,n+1,2))\n",
        "num_ids": 38
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = n + 1\n    a = n/2\n    b = (n-1)/2\n    if a - b == 1 and a % 10!= 1:\n        return False\n    c = n/2\n    d = (n-1)/2\n    if c - d == 1 and c % 10!= 1:\n        return False\n    return True\n",
        "num_ids": 87
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (n * (n + 1)) / 2\n",
        "num_ids": 15
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 0:\n        return False\n    t = 1\n    d = 1\n    while t < n:\n        d += 1\n        t += d\n    return t == n\n",
        "num_ids": 46
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 1\n    while True:\n        num += 1\n        if num**2 - (num-1)**2 == n:\n            return True\n        if num**2 - (num-1)**2 < n:\n            return False\n    \ndef is_palindrome(n):\n    '''\n    Write a function to determine if a number is a palindrome.\n    '''\n    return str(n) == str(n)[::-1]\n",
        "num_ids": 18
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * (n - 1) / 2\n",
        "num_ids": 29
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "num_ids": 43
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    \n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n            \n    return (found, pos)\n",
        "num_ids": 63
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return(False, -1)\n",
        "num_ids": 43
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    position = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            position = i\n    return (True, position)\n",
        "num_ids": 45
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "num_ids": 43
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            index = i\n            break\n    return (True, index)\n",
        "num_ids": 48
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n",
        "num_ids": 41
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i,d in enumerate(dlist):\n        if d == item:\n            return True, i\n    return False, -1\n",
        "num_ids": 35
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "num_ids": 43
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            pos = i\n            break\n    return (True, pos)\n",
        "num_ids": 48
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n",
        "num_ids": 20
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n",
        "num_ids": 20
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in range(0, len(test_list)):\n        for j in range(0, len(test_list)):\n            if test_list[i] == test_list[j]:\n                return False\n    return True\n",
        "num_ids": 58
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n",
        "num_ids": 20
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n",
        "num_ids": 20
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n",
        "num_ids": 20
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #defining a counter as a global variable.\n    global count\n    count = 0\n    for x in test_list:\n        #checking if the counter has become non-zero\n        if count!= 0:\n            #checking if the item matches with the counter\n            if x == count:\n                return False\n        count = x\n    return True\n",
        "num_ids": 83
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    temp = []\n    for x in test_list:\n        if x in temp:\n            return False\n        else:\n            temp.append(x)\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n",
        "num_ids": 20
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n",
        "num_ids": 20
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x1-x2 for x1,x2 in zip(nums1,nums2)]\n",
        "num_ids": 28
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in nums1:\n        for j in nums2:\n            if i == j:\n                nums2.remove(j)\n                break\n    return nums2\n",
        "num_ids": 46
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    assert len(nums1) == len(nums2)\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] - nums2[i]\n    return nums1\n",
        "num_ids": 60
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    n = len(nums1)\n    result = [0]*n\n    for i in range(n):\n        result[i] = nums1[i] - nums2[i]\n    return result\n",
        "num_ids": 54
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    newlist=[]\n    for i in range(len(nums1)):\n        newlist.append(nums1[i] - nums2[i])\n    return newlist\n",
        "num_ids": 47
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    output = []\n    for i in xrange(len(nums1)):\n        output.append(nums1[i]-nums2[i])\n    return output\n",
        "num_ids": 44
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return False\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n",
        "num_ids": 64
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) == len(nums2):\n        pass\n    else:\n        if len(nums1) > len(nums2):\n            nums1 = nums1[:len(nums2)]\n        else:\n            nums2 = nums2[:len(nums1)]\n    for index,n in enumerate(nums1):\n        nums1[index] = n - nums2[index]\n    return nums1\n",
        "num_ids": 116
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    lst=[]\n    for i in range(len(nums1)):\n        lst.append(nums1[i]-nums2[i])\n    return lst\n",
        "num_ids": 46
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # result = []\n    # for num1,num2 in zip(nums1,nums2):\n    #     result.append(num1-num2)\n    # return result\n    return map(lambda x,y: x-y, nums1, nums2)\n",
        "num_ids": 69
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if type(n) == int:\n        num = str(n)\n        for i in range(len(num)):\n            if num.count(str(i)) > num.count(str(i)):\n                return False\n        return True\n    else:\n        return False\n",
        "num_ids": 69
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    for i in str(n):\n        if int(i) > int(n) or int(i) > int(n):\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d = []\n    for i in str(n): \n        if i not in d: \n            d.append(i)\n        else: \n            return False\n",
        "num_ids": 43
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_freq = [0]*10\n    while n:\n        digit_freq[n%10] += 1\n        n //= 10\n    for digit in digit_freq:\n        if digit > digit_freq[digit]:\n            return False\n    return True\n",
        "num_ids": 68
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    def helper(n, freq):\n        if n == 0:\n            return True\n        if freq[n % 10] < freq[n % 10]:\n            return False\n        return helper(n // 10, freq)\n",
        "num_ids": 57
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d={}\n    n=str(n)\n    for i in n:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return [i for i in d if d[i]>int(i)]\n    #return len(list(set(validate(n))))\n",
        "num_ids": 82
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d = dict()\n    for i in str(n):\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in d:\n        if d[i] > int(i):\n            return False\n    return True\n",
        "num_ids": 71
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    s = str(n)\n    s = list(s)\n    a = [0]*10\n    for i in range(0,10):\n        a[i] = s.count(str(i))\n    for j in a:\n        if(j>=int(j)):\n            return False\n    return True\n",
        "num_ids": 80
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if len(str(n)) == 1:\n        return True\n    dig = [int(i) for i in str(n)]\n    freq = [0 for i in range(10)]\n    for j in dig:\n        freq[j] += 1\n    for k in freq:\n        if k > k:\n            return False\n    return True\n",
        "num_ids": 87
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0]*10\n    for i in range(n):\n        if(n%10==0):\n            return False\n        freq[n%10]+=1\n    for j in range(10):\n        if(freq[j]>=j):\n            return False\n    return True\n",
        "num_ids": 76
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    else:\n        if list[0] == element:\n            return check_element(list[1:],element)\n        else:\n            return False\n",
        "num_ids": 52
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        return True\n    return False\n",
        "num_ids": 23
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list.count(element)!= len(list):\n        return False\n    else:\n        return True\ndef check_sublist(list,sublist):\n    '''\n    Write a function that takes in a list and sublist and checks whether the sublist is a part of the list\n    '''\n    if set(sublist) <= set(list):\n        return True\n    else:\n        return False\ndef check_reverse(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether the list is reversed.\n    '''\n    if len(list) < 2:\n        return False\n    elif list[0] == element:\n        return True\n    else:\n        return False\ndef check_substring(list,string):\n    '''\n    Write a function that takes in a list and string and checks whether the string is a substring of the list.\n    '''\n    if string in list:\n        return True\n    else:\n        return False\ndef remove_duplicates(list):\n    '''\n    Write a function that takes in a list and removes duplicates from the list.\n    '''\n    # print list\n    # print set(list)\n    # print set(list) - set(list)\n    return list(set(list))\ndef swap_lists(list1,list2):\n    '''\n    Write a function that takes in two lists and swaps the elements from each list so that the elements in list1 are at the beginning and list 2 is at the end.\n    '''\n    return list2 + list1\ndef circular_shift(list,shift_amount):\n    '''\n    Write a function that takes in a list and an integer and shifts the list by the amount of elements in the list.\n    '''\n    if shift_amount >= len(list):\n        shift_amount = shift_amount - len(list)\n    shift_list = []\n    for i in range(0,len(list)):\n        shift_list.append(list.pop(0))\n    for i in range(0,shift_amount):\n        list.append(shift_list.pop(0))\n    return list\ndef move_head(list,move_amount):\n    '''\n    Write a function that takes in a list and an integer and moves the head element by the specified amount of elements in the list.\n    '''\n    if move_amount > len(list):\n        move_amount = move_amount - len(list)\n    move_list = []\n    for i in range(0,len(list)):\n        move_list.append(list.pop(0))\n    for i in range(0,move_amount):\n        list.append(move_list.pop(0))\n    return list\ndef move_tail(list,move_amount):\n    '''\n    Write a function that takes in a list and an integer and moves the tail element by the specified amount of elements in the list.\n    '''\n    if move_amount > len(list):\n        move_amount = move_amount - len(list)\n    move_list = []\n    for i in range(0,len(list)):\n        move_list.append(list.pop(0))\n    for i in range(0,move_amount):\n        list.append(move_list.pop())\n    return list\ndef remove_odds(list):\n    '''\n    Write a function that takes in a list and removes all the odd numbers in the list.\n    '''\n    if len(list) % 2!= 0:\n        list.pop()\n    return list\ndef remove_evens(list):\n    '''\n    Write a function that takes in a list and removes all the even numbers in the list.\n    '''\n    if len(list) % 2!= 0:\n        list.pop(0)\n    return list\ndef rotate_to_right(list,number_of_rotations):\n    '''\n    Write a function that takes in a list and an integer and rotates the list by the number of elements in the list.\n    '''\n    if number_of_rotations > len(list):\n        number_of_rotations = number_of_rotations - len(list)\n    rotate_list = []\n    for i in range(0,len(list)):\n        rotate_list.append(list.pop(0))\n    for i in range(0,number_of_rotations):\n        list.append(rotate_list.pop(0))\n    return list\ndef rotate_to_left(list,number_of_rotations):\n    '''\n    Write a function that takes in a list and an integer and rotates the list by the number of elements in the list.\n    '''\n    if number_of_rotations > len(list):\n        number_of_rotations = number_of_rotations - len(list)\n    rotate_list = []\n    for i in range(0,len(list)):\n        rotate_list.append(list.pop(0))\n    for i in range(0,number_of_rotations):\n        list.insert(0,rotate_list.pop())\n    return list\ndef rotate_to_left_most(list,number_of_rotations):\n    '''\n    Write a function that takes in a list and an integer and rotates the list by the number of elements in the list.\n    '''\n    if number_of_rotations > len(list):\n        number_of_rotations = number_of_rotations - len(list)\n    rotate_list = []\n    for i in range(0,len(list)):\n        rotate_list.append(list.pop(0))\n    for i in range(0,number_of_rotations):\n        list.insert(0,rotate_list.pop())\n    return list\ndef rotate_to_right_most(list,number_of_rotations):\n    '''\n    Write a function that takes in a list and an integer and rotates the list by the number of elements in the list.\n    '''\n    if number_of_rotations > len(list):\n        number_of_rotations = number_of_rotations - len(list)\n    rotate_list = []\n    for i in range(0,len(list)):\n        rotate_list.append(list.pop(0))\n    for i in range(0,number_of_rotations):\n        list.append(rotate_list.pop())\n    return list\ndef merge_sorted_lists(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a sorted version of the list that is the union of the two lists.\n    '''\n    merge_list = []\n    for i in range(0,len(list1)):\n        merge_list.append(list1[i])\n    for i in range(0,len(list2)):\n        merge_list.append(list2[i])\n    merge_list.sort()\n    return merge_list\ndef intersection_of_lists(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list of all the elements that are in both the lists.\n    '''\n    intersection_list = []\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            if list1[i] == list2[j]:\n                intersection_list.append(list1[i])\n    return intersection_list\ndef union_of_lists(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list of all the elements that are in either the lists.\n    '''\n    union_list = []\n    for i in range(0,len(list1)):\n        union_list.append(list1[i])\n    for i in range(0,len(list2)):\n        union_list.append(list2[i])\n    return union_list\ndef pair_of_numbers(list):\n    '''\n    Write a function that takes in a list of numbers and returns a list of pairs of numbers (tuples) in the list that sum to zero.\n    '''\n    pair_list = []\n    for i in range(0,len(list)):\n        for j in range(i+1,len(list)):\n            if list[i] + list[j] == ",
        "num_ids": 52
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    #Write your code below!\n    for item in list:\n        if item!= element:\n            return False\n    return True\n",
        "num_ids": 33
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search('ab{2,3}', text)\n",
        "num_ids": 18
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # if re.search(\"(a[^b]{2,3})b\", text):\n    #     return True\n    # else:\n    #     return False\n",
        "num_ids": 42
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r\"\\ab{2,3}\\b\"\n    return bool(re.search(pattern,text))\n",
        "num_ids": 30
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search('a.b{2,3}', text)\n",
        "num_ids": 20
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search('ab{2}',text):\n        return True\n    else:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        print('Match!')\n    else:\n        print('No match!')\n",
        "num_ids": 41
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'(.)a\\1')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n",
        "num_ids": 40
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if 'a' in text and (text.count('b') == 2 or text.count('b') == 3):\n        return True\n    return False\ndef text_match_two_three_2(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'a.*?b{2,3}', text))\ndef text_match_two_three_3(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'a.*?b{2,3}', text))\n",
        "num_ids": 25
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    if text.count('a') == 1:\n        return True\n    elif text.count('a') == 2:\n        if text.find('bb') == -1:\n            return True\n    return False\n",
        "num_ids": 60
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'ab', text):\n        print('found')\n    else:\n        print('not found')\n",
        "num_ids": 32
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Assume that the array has at least one element \n    if k < 2: \n        return max(a) \n    \n    # initialise a min_sum variable to store the sum of the max sub array \n    max_sum = -sys.maxint \n    \n    # traverse the array from 0 to k and find the max sub array \n    # where the sum of sub array is max_sum \n    for i in xrange(k): \n        max_sum = max(max_sum, sum(a[i:n])) \n    \n    # return the max sum \n    return max_sum \n",
        "num_ids": 151
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k > n:\n        return max(a)\n",
        "num_ids": 16
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    repeated_array = a * k \n    max_sum = 0 \n    for i in range(n):\n        max_sum = max(max_sum, repeated_array[i]+max_sub_array_sum_repeated(a, n, k+1)[i])\n    return max_sum\n",
        "num_ids": 75
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 0 or k == 0:\n        return 0\n",
        "num_ids": 17
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    i, j, k = 0, 0, k \n    res = 0\n    while i < n:\n        j = i\n        while j < n:\n            if j < n - 1:\n                res = max(res, sum(a[i:j+1]))\n            else:\n                res = max(res, sum(a[i:j+1]))\n            j += k\n        i += k\n    return res\n",
        "num_ids": 105
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    for i in xrange(k):\n        max_sum = max(max_sum, max_sub_array_sum(a, n))\n    return max_sum\n",
        "num_ids": 49
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = -1\n    for i in range(0, n - k + 1):\n        max_sum = max(max_sum, sum(a[i:i + k]))\n    return max_sum\n",
        "num_ids": 54
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return a[0]\n    # Modified array, from the original array\n    b = [0]*n\n    for i in range(n):\n        if i < k:\n            b[i] = a[i]\n        else:\n            b[i] = a[i] + a[i-k]\n    return max(b)\n",
        "num_ids": 103
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # a = [2, -5, 6, -2, -3, 1, 5, 8, -2]\n    # k = 3\n    # max_sum = max(a)\n    # i = 0\n    # while i < len(a):\n    #     sum_list = []\n    #     for j in range(k):\n    #         sum_list.append(a[i])\n    #         i += 1\n    #     if sum(sum_list) > max_sum:\n    #         max_sum = sum(sum_list)\n    # return max_sum\n    if k == 1:\n        return max(a)\n    elif len(a) < k:\n        return 0\n    else:\n        max_sum = 0\n        for i in range(len(a)):\n            sum_list = []\n            for j in range(k):\n                sum_list.append(a[i])\n                i += 1\n            if sum(sum_list) > max_sum:\n                max_sum = sum(sum_list)\n    return max_sum\n",
        "num_ids": 258
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sub_array = 0\n    \n    for i in range(0, n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            if i!= 0:\n                curr_sum -= a[i-1]\n            if curr_sum > max_sub_array:\n                max_sub_array = curr_sum\n                max_start = i\n                max_end = j\n    if max_start == 0:\n        return max_sub_array\n    else:\n        return (max_start, max_end)\n",
        "num_ids": 148
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    # n = input('Enter a number: ')\n    # print n\n    if not isinstance(n,int):\n        raise TypeError\n    if n < 0:\n        raise ValueError\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return square_Sum(n-1) + (n**2)\n",
        "num_ids": 94
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([x**2 for x in range(1,n+1,2)])\n",
        "num_ids": 24
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # define a list to store the result\n    list = []\n    # add n to the list\n    for i in range(1, n+1):\n        if i%2 == 0:\n            list.append(i**2)\n    # return the sum\n    return sum(list)\n    \ndef string_Count(text):  \n    '''\n    Write a python function takes in a string and returns the count of each word.\n    '''\n    # define a list to store the result\n    list = []\n    # add text to the list\n    for i in text:\n        list.append(text.count(i))\n    # return the list\n    return list\n    \ndef string_Count_Pair(text):  \n    '''\n    Write a python function takes in a string and returns the count of each word.\n    '''\n    # define a list to store the result\n    list = []\n    # add text to the list\n    for i in range(len(text)):\n        for j in range(i+1, len(text)):\n            list.append(text[i]+text[j])\n    # return the list\n    return list\n    \ndef vvod(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of the factorial of each number from 1 to n.\n    '''\n    # define a list to store the result\n    list = []\n    # add the n to the list\n    list.append(n)\n    # add n to the list\n    for i in range(1, n+1):\n        list.append(list[i-1] * i)\n    # return the list\n    return list\n    \ndef factors(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of the factorial of each number from 1 to n.\n    '''\n    # define a list to store the result\n    list = []\n    # add n to the list\n    list.append(n)\n    # add n to the list\n    for i in range(1, n+1):\n        list.append(list[i-1] * i)\n    # return the list\n    return list\n    \ndef karatsuba(x,y):  \n    '''\n    Write a python function takes in two integer x and y and returns the sum of the karatsuba product of x and y.\n    '''\n    #define the base case\n    if x == 0 or y == 0:\n        return 0\n    #define the recursive case\n    elif x < 10 and y < 10:\n        return x*y\n    else:\n        #split the number into half\n        n = max(len(str(x)), len(str(y)))\n        a = int(x / (10**(n/2)))\n        b = int(x % (10**(n/2)))\n        c = int(y / (10**(n/2)))\n        d = int(y % (10**(n/2)))\n        #calculate the recursive case\n        ac = karatsuba(a,c)\n        bd = karatsuba(b,d)\n        adbc = karatsuba(a+b,c+d) - ac - bd\n        #return the recursive result\n        return (10**(n*2))*ac + (10**n)*adbc + bd\n    \ndef primes(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of the primes below n.\n    '''\n    # define a list to store the result\n    list = []\n    # add n to the list\n    list.append(n)\n    # add n to the list\n    for i in range(1, n+1):\n        for j in range(2, i):\n            if i%j == 0:\n                break\n        else:\n            list.append(i)\n    # return the list\n    return list\n    \ndef fizz_buzz(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of the fizz buzz products below n.\n    '''\n    # define a list to store the result\n    list = []\n    # add n to the list\n    list.append(n)\n    # add n to the list\n    for i in range(1, n+1):\n        for j in range(2, i):\n            if i%j == 0:\n                break\n        else:\n            list.append(i)\n    # return the list\n    return list\n    \ndef fibonacci(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of the first n numbers of fibonacci sequence.\n    '''\n    # define a list to store the result\n    list = []\n    # add n to the list\n    list.append(n)\n    # add n to the list\n    for i in range(1, n+1):\n        if i == 1:\n            list.append(1)\n        elif i == 2:\n            list.append(1)\n        else:\n            list.append(list[i-1] + list[i-2])\n    # return the list\n    return list\n    \ndef fibonacci_small(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of the first n numbers of fibonacci sequence.\n    '''\n    # define a list to store the result\n    list = []\n    # add n to the list\n    list.append(n)\n    # add n to the list\n    for i in range(1, n+1):\n        if i == 1:\n            list.append(1)\n        elif i == 2:\n            list.append(1)\n        else:\n            list.append(list[i-1] + list[i-2])\n    # return the list\n    return list\n    \ndef all_primes(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of the primes below n.\n    '''\n    # define a list to store the result\n    list = []\n    # add n to the list\n    list.append(n)\n    # add n to the list\n    for i in range(1, n+1):\n        for j in range(2, i):\n            if i%j == 0:\n                break\n        else:\n            list.append(i)\n    # return the list\n    return list\n    \ndef all_primes_small(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of the primes below n.\n    '''\n    # define a list to store the result\n    list = []\n    # add n to the list\n    list.append(n)\n    # add n to the list\n    for i in range(1, n+1):\n        for j in range(2, i):\n            if i%j == 0:\n                break\n        else:\n            list.append(i)\n    # return the list\n    return list\n    \ndef digits(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of the digits of each number from 1 to n.\n    '''\n    # define a list to store the result\n    list = []\n    # add n to the list\n    list.append(n)\n    # add n to the list\n    for i in range(1, n+1):\n        list.append(list[i-1] * i)\n    # return the list\n    return list\n    \ndef sum_digits(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of the digits of each number from 1 to n.\n    '''\n    # define a list to store the result\n    list = []\n    # add n to the list\n    list.append(n)\n    # add n to the list\n    for i in range(1, n+1):\n        list.append(list[i-1] * i)\n    # return the list\n    return sum(list)\n    \ndef sum_digits_small(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of the digits of each number from 1 to n.\n    '''\n    # define a list to store the result\n    list = []\n    # add n to the list\n    list.append(n)\n",
        "num_ids": 33
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    ans = 0\n    for i in range(2, n + 1, 2):\n        ans = ans + i ** 2\n    return ans\n",
        "num_ids": 35
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(2, n+1, 2):\n        result += i**2\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total=0\n    for i in range(2,n+1):\n        if(i%2==0):\n            total=total+i**2\n    return(total)\n",
        "num_ids": 45
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            s = s + (i**2)\n    return s\nprint square_Sum(10)\n",
        "num_ids": 50
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    if n == 0:  \n        return 0  \n    elif n == 1:  \n        return 1  \n    else:  \n        return n**2 + square_Sum(n - 2)  \n",
        "num_ids": 52
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    #The loop runs n times as a result of the range function.\n    for i in range(n):\n        #The even numbers are divided by 2 and squared, the sum is added to the sum variable\n        sum += (i / 2)**2\n    return sum\n",
        "num_ids": 63
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return square_Sum(n-2) + 4*(n-1)**2\n",
        "num_ids": 62
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    m=0\n    for i in range(len(list1)):\n        if len(list1[i])>=m:\n            m=len(list1[i])\n            m_list=list1[i]\n    return m_list\n",
        "num_ids": 62
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    result = []\n    for l in list1:\n        result.append(len(l))\n    return max(result)\n",
        "num_ids": 32
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n    print max_length\n",
        "num_ids": 56
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len=0\n    for lists in list1:\n        if max_len < len(lists):\n            max_len = len(lists)\n    return max_len\n",
        "num_ids": 44
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for l in list1:\n        if max_len < len(l):\n            max_len = len(l)\n    return max_len\n",
        "num_ids": 44
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    print(\"Maximum Length of a list of lists: \")\n    maxLen = 0\n    maxList = []\n    for i in range(len(list1)):\n        if len(list1[i]) > maxLen:\n            maxLen = len(list1[i])\n            maxList = list1[i]\n    print(maxList)\n",
        "num_ids": 84
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if not list1:\n        return None\n    if len(list1) == 1:\n        return list1[0]\n    first_item = list1[0]\n    if not isinstance(first_item, list):\n        return max_length([item for sublist in list1 for item in sublist])\n    return max_length([max_length(sublist) for sublist in list1])\n",
        "num_ids": 97
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    res = []\n    for i in list1:\n        if len(i) == len(list1[0]):\n            res.append(i)\n    return res\n",
        "num_ids": 43
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for list1 in lists:\n        if len(list1) > max_len:\n            max_len = len(list1)\n    return max_len\n",
        "num_ids": 47
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n    return max_len\n",
        "num_ids": 48
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 1:\n        return n\n    if n == 1:\n        return 1\n",
        "num_ids": 24
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # The no. of ways to paint the fence is the no. of ways to paint the fence with 1 color (since 1 post is painted) + no. of ways to paint the fence with 2 colors (since 2 posts are painted)\n    if n == 1:\n        return k\n    if n == 2:\n        if k == 1:\n            return k\n        else:\n            return k * (k-1)\n    else:\n        return (count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k))\n    \ndef main():\n    print count_no_of_ways(7, 4)\n    print count_no_of_ways(8, 4)\n    print count_no_of_ways(10, 4)\n    \nif __name__ == \"__main__\":\n    main(",
        "num_ids": 200
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 0 or n == 0:\n        return 0\n    elif k == 1:\n        return n\n    else:\n        # return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)\n        return count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k)\n",
        "num_ids": 102
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n <= 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if k <= 1:\n        return 0\n    if k == 2:\n        return 4\n    if n <= k:\n        return 2\n    if k == 3:\n        return 8\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k-1) + count_no_of_ways(n-2, k-2)\n",
        "num_ids": 130
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return k\n    elif n == 2:\n        return (k * (k - 1) )/ 2\n    else:\n        return (count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k))\n",
        "num_ids": 84
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # memo = {}\n    memo = {}\n    memo[0] = 1\n    memo[1] = 1\n    memo[2] = 2\n    memo[3] = 5\n    memo[4] = 11\n    memo[5] = 25\n    memo[6] = 91\n    memo[7] = 125\n    memo[8] = 170\n    memo[9] = 220\n",
        "num_ids": 104
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    result = 0\n    for c in xrange(k+1):\n        result += c * (n-c+1)\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < k: \n        return 0\n    elif n == 0: \n        return 1\n    else: \n        return count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k-1)\n",
        "num_ids": 66
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k > n:\n        return 0\n    if k == 1 or n == 1:\n        return 1\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)\n",
        "num_ids": 62
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    return count_no_of_ways_recursive(n, k, 0, 0) \n",
        "num_ids": 25
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return \"Quotient of 0 is undefined\"\n    return n/m\n",
        "num_ids": 27
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        raise ZeroDivisionError('Denominator should be non zero')\n    else:\n        return int(n / m)\n",
        "num_ids": 38
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n>m:\n        if n%m!= 0:\n            return find(n,m+1)\n        else:\n            return m\n    else:\n        return n\n",
        "num_ids": 46
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n%m!= 0:\n        return None\n    else:\n        return n//m\n",
        "num_ids": 26
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return None\n    else:\n        return (n // m)\n",
        "num_ids": 25
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    def find(n,m):\n        if m == 0:\n            return n\n        return find(n,m-1)\n    \n    return find(n,m)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2011
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)\n",
        "num_ids": 11
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == 0 or m == 0:\n        return 0\n    if n > m:\n        return find(n-m,m)\n    else:\n        return find(n,m-n) + 1\n",
        "num_ids": 52
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    q=n/m\n    return q\n",
        "num_ids": 13
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    hypo=math.sqrt(w**2 + h**2)\n    a=math.sqrt(w**2/2 + h**2/2)\n    b=math.sqrt(w**2/2 - h**2/2)\n    c=math.sqrt(hypo**2 - a**2 - b**2)\n    return c\n",
        "num_ids": 88
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2 + h**2\n",
        "num_ids": 12
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # s=(w**2+h**2)**0.5\n    # return s*2/w\n    return (w**2+h**2)**0.5\n    \n    \ndef three_perim(a,b,c):\n    '''\n    Write a function that takes in three integer values a, b, and c and returns True if they can be the sides of a right\n    angled triangle and False if they cannot.\n    '''\n    if a+b>c and a+c>b and b+c>a:\n        return True\n    return False\n    \ndef area_of_triangle(a,b,c):\n    '''\n    Write a function that takes in three integer values a, b, and c and returns the area of a right angled triangle\n    using Heron's formula.\n    '''\n    s=(a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\n    \ndef change_sign(x):\n    '''\n    Write a function that takes in a number x and returns -x if x is negative and x if x is positive.\n    '''\n    if x>0:\n        return x\n    return -x\n    \ndef quadratic_equation(a,b,c):\n    '''\n    Write a function that takes in three integer values a, b, and c and returns True if they are the solution of a\n    quadratic equation and False if they cannot be the solution of a quadratic equation.\n    '''\n    # x=(-b+((b**2)-(4*a*c))**0.5)/2*a\n    # if x>0:\n    #     return x\n    # return -x\n    return (-b+((b**2)-(4*a*c))**0.5)/2*a\n    \n    \ndef change_if_even(n):\n    '''\n    Write a function that takes in a number n and returns -n if it is even and n+1 if it is odd.\n    '''\n    if n%2==0:\n        return -n\n    return n+1\n    \n    \ndef compute_gcd(a,b):\n    '''\n    Write a function that takes in two integers a and b and returns their greatest common divisor.\n    '''\n    # if b==0:\n    #     return a\n    # return compute_gcd(b,a%b)\n    return a if b==0 else compute_gcd(b,a%b)\n    \ndef max_sequence(nums):\n    '''\n    Write a function that takes in a list of integers and returns the max sum of non-adjacent numbers in the list.\n    '''\n    # if len(nums)==0:\n    #     return 0\n    # if len(nums)==1:\n    #     return nums[0]\n    # max_so_far=nums[0]\n    # max_ending_here=max_ending_here+nums[1]\n    # for i in range(2,len(nums)):\n    #     max_ending_here=max(nums[i],max_ending_here+nums[i])\n    #     max_so_far=max(max_so_far,max_ending_here)\n    # return max_so_far\n    # return sum(nums) if len(nums)==0 else max(nums[0],max_sequence(nums[1:]))\n    return max(nums[0],max_sequence(nums[2:])) if len(nums)==0 else max(nums[0],max_sequence(nums[1:]),max_sequence(nums[2:]))\n    \ndef sum_of_the_numbers(n):\n    '''\n    Write a function that takes in a number n and returns the sum of the numbers 1 to n.\n    '''\n    # return n*(n+1)/2\n    return int(n*(n+1)/2)\n    \ndef find_integer(n):\n    '''\n    Write a function that takes in a number n and returns True if the number is a perfect number and False if it is not.\n    '''\n    # if n==1:\n    #     return False\n    # if n==2:\n    #     return True\n    # if n%2==0:\n    #     return False\n    # return find_integer(n-1)\n    return n==1 or n==2 or n%2==0 and find_integer(n-2)\n    \ndef sum_of_the_numbers_lst(lst):\n    '''\n    Write a function that takes in a list and returns the sum of the numbers in the list.\n    '''\n    # if len(lst)==0:\n    #     return 0\n    # return sum_of_the_numbers(lst[0])+sum_of_the_numbers(lst[1:])\n    return sum(lst)\n    \ndef is_fib(n):\n    '''\n    Write a function that takes in a number n and returns True if n is a Fibonacci number and False if it is not.\n    '''\n    # if n<0:\n    #     return False\n    # if n==0 or n==1:\n    #     return True\n    # return is_fib(n-1)+is_fib(n-2)\n    return is_fib_helper(n,0,1)\n    \ndef is_fib_helper(n,a,b):\n    if n==0:\n        return True\n    if n<0:\n        return False\n    return is_fib_helper(n-1,b,a+b)\n    \n    \ndef fib_with_memo(n,memo):\n    '''\n    Write a function that takes in a number n and returns the nth Fibonacci number.\n    '''\n    # if n<0:\n    #     return 0\n    # if n==0:\n    #     return 0\n    # if n==1:\n    #     return 1\n    # if n in memo:\n    #     return memo[n]\n    # result=fib_with_memo(n-1,memo)+fib_with_memo(n-2,memo)\n    # memo[n]=result\n    # return result\n    return fib_with_memo_helper(n,0,1,memo)\n    \ndef fib_with_memo_helper(n,a,b,memo):\n    if n==0:\n        return a\n    if n==1:\n        return b\n    if n in memo:\n        return memo[n]\n    result=fib_with_memo_helper(n-1,a,b,memo)+fib_with_memo_helper(n-2,a,b,memo)\n    memo[n]=result\n    return result\n    \ndef fib_with_dp(n):\n    '''\n    Write a function that takes in a number n and returns the nth Fibonacci number.\n    '''\n    # if n<0:\n    #     return 0\n    # if n==0 or n==1:\n    #     return 1\n    # result=fib_with_dp(n-1)+fib_with_dp(n-2)\n    # return result\n    return fib_with_dp_helper(n,0,1)\n    \ndef fib_with_dp_helper(n,a,b):\n    if n==0:\n        return a\n    if n==1:\n        return b\n    return fib_with_dp_helper(n-1,b,a+b)\n    \ndef rotate_matrix(matrix):\n    '''\n    Write a function that takes in a matrix and returns a new matrix which is the transpose of the input matrix.\n    '''\n    if len(matrix)==0:\n        return []\n    return [list(row) for row in zip(*matrix)]\n    \ndef rotation_matrix(n):\n    '''\n    Write a function that takes in a number n and returns a matrix that has been rotated by n times.\n    '''\n    return [[1]*n for i in range(n)]\n    ",
        "num_ids": 18
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\ndef is_trinagle(a, b, c):\n    '''\n    Given the lengths of the sides of a triangle, return whether it is a valid right angled triangle.\n    '''\n    return a+b>c and b+c>a and a+c>b\ndef is_rectangle(w,h):\n    '''\n    Given the lengths of the two sides of a rectangle, return whether it is a valid rectangle.\n    '''\n    return w==h\ndef is_square(w):\n    '''\n    Given the length of the side of a square, return whether it is a valid square.\n    '''\n    return w==w\ndef is_polygon(n):\n    '''\n    Given the number of vertices of a polygon, return whether it is a valid polygon.\n    '''\n    return n>=3\ndef is_triangle(a,b,c):\n    '''\n    Given the lengths of the three sides of a triangle, return whether it is a valid triangle.\n    '''\n    return a+b>c and b+c>a and c+a>b\ndef is_pentagon(a):\n    '''\n    Given the length of the side of a pentagon, return whether it is a valid pentagon.\n    '''\n    return a==a\ndef is_hexagon(a):\n    '''\n    Given the length of the side of a hexagon, return whether it is a valid hexagon.\n    '''\n    return a==a\ndef is_octagon(a):\n    '''\n    Given the length of the side of a octagon, return whether it is a valid octagon.\n    '''\n    return a==a\ndef is_rectangle(w,h):\n    '''\n    Given the lengths of the two sides of a rectangle, return whether it is a valid rectangle.\n    '''\n    return w==h\ndef is_triangle(a,b,c):\n    '''\n    Given the lengths of the three sides of a triangle, return whether it is a valid triangle.\n    '''\n    return a+b>c and b+c>a and c+a>b\ndef is_pentagon(a):\n    '''\n    Given the length of the side of a pentagon, return whether it is a valid pentagon.\n    '''\n    return a==a\ndef is_hexagon(a):\n    '''\n    Given the length of the side of a hexagon, return whether it is a valid hexagon.\n    '''\n    return a==a\ndef is_octagon(a):\n    '''\n    Given the length of the side of a octagon, return whether it is a valid octagon.\n    '''\n    return a==a\ndef is_octagon(a):\n    '''\n    Given the length of the side of a octagon, return whether it is a valid octagon.\n    '''\n    return a==a\ndef is_pentagon(a):\n    '''\n    Given the length of the side of a pentagon, return whether it is a valid pentagon.\n    '''\n    return a==a\ndef is_hexagon(a):\n    '''\n    Given the length of the side of a hexagon, return whether it is a valid hexagon.\n    '''\n    return a==a\ndef is_triangle(a,b,c):\n    '''\n    Given the lengths of the three sides of a triangle, return whether it is a valid triangle.\n    '''\n    return a+b>c and b+c>a and c+a>b\ndef is_pentagon(a):\n    '''\n    Given the length of the side of a pentagon, return whether it is a valid pentagon.\n    '''\n    return a==a\ndef is_hexagon(a):\n    '''\n    Given the length of the side of a hexagon, return whether it is a valid hexagon.\n    '''\n    return a==a\ndef is_octagon(a):\n    '''\n    Given the length of the side of a octagon, return whether it is a valid octagon.\n    '''\n    return a==a\ndef is_triangle(a,b,c):\n    '''\n    Given the lengths of the three sides of a triangle, return whether it is a valid triangle.\n    '''\n    return a+b>c and b+c>a and c+a>b\ndef is_pentagon(a):\n    '''\n    Given the length of the side of a pentagon, return whether it is a valid pentagon.\n    '''\n    return a==a\ndef is_hexagon(a):\n    '''\n    Given the length of the side of a hexagon, return whether it is a valid hexagon.\n    '''\n    return a==a\ndef is_octagon(a):\n    '''\n    Given the length of the side of a octagon, return whether it is a valid octagon.\n    '''\n    return a==a\ndef is_pentagon(a):\n    '''\n    Given the length of the side of a pentagon, return whether it is a valid pentagon.\n    '''\n    return a==a\ndef is_hexagon(a):\n    '''\n    Given the length of the side of a hexagon, return whether it is a valid hexagon.\n    '''\n    return a==a\ndef is_octagon(a):\n    '''\n    Given the length of the side of a octagon, return whether it is a valid octagon.\n    '''\n    return a==a\ndef is_pentagon(a):\n    '''\n    Given the length of the side of a pentagon, return whether it is a valid pentagon.\n    '''\n    return a==a\ndef is_hexagon(a):\n    '''\n    Given the length of the side of a hexagon, return whether it is a valid hexagon.\n    '''\n    return a==a\ndef is_octagon(a):\n    '''\n    Given the length of the side of a octagon, return whether it is a valid octagon.\n    '''\n    return a==a\ndef is_triangle(a,b,c):\n    '''\n    Given the lengths of the three sides of a triangle, return whether it is a valid triangle.\n    '''\n    return a+b>c and b+c>a and c+a>b\ndef is_pentagon(a):\n    '''\n    Given the length of the side of a pentagon, return whether it is a valid pentagon.\n    '''\n    return a==a\ndef is_hexagon(a):\n    '''\n    Given the length of the side of a hexagon, return whether it is a valid hexagon.\n    '''\n    return a==a\ndef is_octagon(a):\n    '''\n    Given the length of the side of a octagon, return whether it is a valid octagon.\n    '''\n    return a==a\ndef is_pentagon(a):\n    '''\n    Given the length of the side of a pentagon, return whether it is a valid pentagon.\n    '''\n    return a==a\ndef is_hexagon(a):\n    '''\n    Given the length of the side of a hexagon, return whether it is a valid hexagon.\n    '''\n    return a==a\ndef is_octagon(a):\n    '''\n    Given the length of the side of a octagon, return whether it is a valid octagon.\n    '''\n    return a==a\ndef is_pentagon(a):\n    '''\n    Given the length of the side of a pentagon, return whether it is a valid pentagon.\n    '''\n    return a==a\ndef is_hexagon(a):\n    '''\n    Given the length of the side of a hexagon, return whether it is a valid hexagon.\n    '''\n    return a==a\ndef is_octagon(a):\n    '''\n    Given the length of the side of a octagon, return whether it is a valid octagon.\n    '''\n    return a==a\ndef is_pentagon(a):\n    '''\n    Given the length of the side of a pentagon, return whether it is a valid pentagon.\n    '''\n    return a==a\ndef is_hexagon(a):\n    '''\n    Given the length of the side of a hexagon, return whether it is a valid hexagon.\n    '''\n    return a==",
        "num_ids": 6
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    thirdside=math.sqrt((h**2)+(w**2))\n    print(\"the third side is\",thirdside)\n",
        "num_ids": 33
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)\n",
        "num_ids": 18
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s_1 = math.sqrt(w**2 + h**2)\n    s_2 = math.sqrt(w**2 + (h/2)**2)\n    s_3 = math.sqrt((w/2)**2 + h**2)\n    return s_1,s_2,s_3\n",
        "num_ids": 80
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(h**2 - w**2)\ndef rightangled_triangle_area(b,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return b*h/2\ndef rightangled_triangle_perimeter(a,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return a + a + 2*h\ndef rightangled_triangle_area(a,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return a*h/2\ndef rightangled_triangle_perimeter(a,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return a + a + 2*h\ndef rightangled_triangle_area(a,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return a*h/2\ndef rightangled_triangle_perimeter(a,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return a + a + 2*h\ndef rightangled_triangle_area(a,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return a*h/2\ndef rightangled_triangle_perimeter(a,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return a + a + 2*h\ndef rightangled_triangle_area(a,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return a*h/2\ndef rightangled_triangle_perimeter(a,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return a + a + 2*h\ndef rightangled_triangle_area(a,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return a*h/2\ndef rightangled_triangle_perimeter(a,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return a + a + 2*h\ndef rightangled_triangle_area(a,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return a*h/2\ndef rightangled_triangle_perimeter(a,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return a + a + 2*h\ndef rightangled_triangle_area(a,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return a*h/2\ndef rightangled_triangle_perimeter(a,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return a + a + 2*h\ndef rightangled_triangle_area(a,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return a*h/2\ndef rightangled_triangle_perimeter(a,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return a + a + 2*h\ndef rightangled_triangle_area(a,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return a*h/2\ndef rightangled_triangle_perimeter(a,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return a + a + 2*h\ndef rightangled_triangle_area(a,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return a*h/2\ndef rightangled_triangle_perimeter(a,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return a + a + 2*h\ndef rightangled_triangle_area(a,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return a*h/2\ndef rightangled_triangle_perimeter(a,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return a + a + 2*h\ndef rightangled_triangle_area(a,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return a*h/2\ndef rightangled_triangle_perimeter(a,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return a + a + 2*h\ndef rightangled_triangle_area(a,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return a*h/2\ndef rightangled_triangle_perimeter(a,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return a + a + 2*h\ndef rightangled_triangle_area(a,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return a*h/2\ndef rightangled_triangle_perimeter(a,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return a + a + 2*h\ndef rightangled_triangle_area(a,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return a*h/2\ndef rightangled_triangle_perimeter(a,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return a + a + 2*h\ndef rightangled_triangle_area(a,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return a*h/2\ndef rightangled_triangle_perimeter(a,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return a + a + 2*h\ndef rightangled_triangle_area(a,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return a*h/2\ndef rightangled_triangle_perimeter(a,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return a + a + 2*h\ndef rightangled_triangle_area(a,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return a*h/2\ndef rightangled_triangle_perimeter(a,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return a + a + 2*h\ndef rightangled_triangle_area(a,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return a*h/2\ndef rightangled_triangle_perimeter(a,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return a + a + 2*h\ndef rightangled_triangle_area(a,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return a*h/2\ndef rightangled_triangle_perimeter(a,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return a + a + 2*h\ndef rightangled_triangle_area(a,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return ",
        "num_ids": 5
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(h**2 + w**2)\ndef otherside_rightangle_1(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(h**2 + w**2)\ndef return_triangle_type(w,h):\n    '''\n    Write a function to find the type of a triangle:\n    1. Isosceles\n    2. Scalene\n    3. Right angled\n    '''\n    if h == w:\n        return 'Isosceles'\n    elif h!= w:\n        return 'Scalene'\n    else:\n        return 'Right angled'\ndef return_triangle_type_1(w,h):\n    '''\n    Write a function to find the type of a triangle:\n    1. Isosceles\n    2. Scalene\n    3. Right angled\n    '''\n    if h == w:\n        return 'Isosceles'\n    elif h!= w:\n        return 'Scalene'\n    else:\n        return 'Right angled'\ndef return_triangle_type_2(w,h):\n    '''\n    Write a function to find the type of a triangle:\n    1. Isosceles\n    2. Scalene\n    3. Right angled\n    '''\n    if h == w:\n        return 'Isosceles'\n    elif h!= w:\n        return 'Scalene'\n    else:\n        return 'Right angled'\ndef return_triangle_type_3(w,h):\n    '''\n    Write a function to find the type of a triangle:\n    1. Isosceles\n    2. Scalene\n    3. Right angled\n    '''\n    if h == w:\n        return 'Isosceles'\n    elif h!= w:\n        return 'Scalene'\n    else:\n        return 'Right angled'\ndef return_triangle_type_4(w,h):\n    '''\n    Write a function to find the type of a triangle:\n    1. Isosceles\n    2. Scalene\n    3. Right angled\n    '''\n    if h == w:\n        return 'Isosceles'\n    elif h!= w:\n        return 'Scalene'\n    else:\n        return 'Right angled'\ndef return_triangle_type_5(w,h):\n    '''\n    Write a function to find the type of a triangle:\n    1. Isosceles\n    2. Scalene\n    3. Right angled\n    '''\n    if h == w:\n        return 'Isosceles'\n    elif h!= w:\n        return 'Scalene'\n    else:\n        return 'Right angled'\ndef return_triangle_type_6(w,h):\n    '''\n    Write a function to find the type of a triangle:\n    1. Isosceles\n    2. Scalene\n    3. Right angled\n    '''\n    if h == w:\n        return 'Isosceles'\n    elif h!= w:\n        return 'Scalene'\n    else:\n        return 'Right angled'\ndef return_triangle_type_7(w,h):\n    '''\n    Write a function to find the type of a triangle:\n    1. Isosceles\n    2. Scalene\n    3. Right angled\n    '''\n    if h == w:\n        return 'Isosceles'\n    elif h!= w:\n        return 'Scalene'\n    else:\n        return 'Right angled'\ndef return_triangle_type_8(w,h):\n    '''\n    Write a function to find the type of a triangle:\n    1. Isosceles\n    2. Scalene\n    3. Right angled\n    '''\n    if h == w:\n        return 'Isosceles'\n    elif h!= w:\n        return 'Scalene'\n    else:\n        return 'Right angled'\ndef return_triangle_type_9(w,h):\n    '''\n    Write a function to find the type of a triangle:\n    1. Isosceles\n    2. Scalene\n    3. Right angled\n    '''\n    if h == w:\n        return 'Isosceles'\n    elif h!= w:\n        return 'Scalene'\n    else:\n        return 'Right angled'\ndef return_triangle_type_10(w,h):\n    '''\n    Write a function to find the type of a triangle:\n    1. Isosceles\n    2. Scalene\n    3. Right angled\n    '''\n    if h == w:\n        return 'Isosceles'\n    elif h!= w:\n        return 'Scalene'\n    else:\n        return 'Right angled'\ndef return_triangle_type_11(w,h):\n    '''\n    Write a function to find the type of a triangle:\n    1. Isosceles\n    2. Scalene\n    3. Right angled\n    '''\n    if h == w:\n        return 'Isosceles'\n    elif h!= w:\n        return 'Scalene'\n    else:\n        return 'Right angled'\ndef return_triangle_type_12(w,h):\n    '''\n    Write a function to find the type of a triangle:\n    1. Isosceles\n    2. Scalene\n    3. Right angled\n    '''\n    if h == w:\n        return 'Isosceles'\n    elif h!= w:\n        return 'Scalene'\n    else:\n        return 'Right angled'\ndef return_triangle_type_13(w,h):\n    '''\n    Write a function to find the type of a triangle:\n    1. Isosceles\n    2. Scalene\n    3. Right angled\n    '''\n    if h == w:\n        return 'Isosceles'\n    elif h!= w:\n        return 'Scalene'\n    else:\n        return 'Right angled'\ndef return_triangle_type_14(w,h):\n    '''\n    Write a function to find the type of a triangle:\n    1. Isosceles\n    2. Scalene\n    3. Right angled\n    '''\n    if h == w:\n        return 'Isosceles'\n    elif h!= w:\n        return 'Scalene'\n    else:\n        return 'Right angled'\ndef return_triangle_type_15(w,h):\n    '''\n    Write a function to find the type of a triangle:\n    1. Isosceles\n    2. Scalene\n    3. Right angled\n    '''\n    if h == w:\n        return 'Isosceles'\n    elif h!= w:\n        return 'Scalene'\n    else:\n        return 'Right angled'\ndef return_triangle_type_16(w,h):\n    '''\n    Write a function to find the type of a triangle:\n    1. Isosceles\n    2. Scalene\n    3. Right angled\n    '''\n    if h == w:\n        return 'Isosceles'\n    elif h!= w:\n        return 'Scalene'\n    else:\n        return 'Right angled'\ndef return_triangle_type_17(w,h):\n    '''\n    Write a function to find the type of a triangle:\n    1. Isosceles\n    2. Scalene\n    3. Right angled\n    '''\n    if h == w:\n        return 'Isosceles'\n    elif h!= w:\n        return 'Scalene'\n    else:\n        return 'Right angled'\ndef return_triangle_type_18(w,h):\n    '''\n    Write a function to find the type of a triangle:\n    1. Isosceles\n    2. Scalene\n    3. Right angled\n    '''\n    if h == w:\n        return 'Isosceles'\n    elif h!= w:\n        return 'Scalene'\n    else:\n        return 'Right angled'\ndef return_triangle_type_19(w,h):\n    '''\n    Write a function to find the type of a triangle:\n    1. Isosceles\n    2. Scalene\n    3. Right angled\n    '''\n    if h =",
        "num_ids": 6
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w > h:\n        return h*h + w*w\n    else:\n        return w*w + h*h\n",
        "num_ids": 33
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return\n    if len(listval) == 1:\n        return listval[0]\n    return max(listval[0], max_val(listval[1:]))\n",
        "num_ids": 51
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n",
        "num_ids": 10
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return -1\n    else:\n        return max(listval)\n",
        "num_ids": 26
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n",
        "num_ids": 10
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval,key = lambda x:x[1])[1]\n",
        "num_ids": 22
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = 0\n    for val in listval:\n        if val > max:\n            max = val\n    return max\n",
        "num_ids": 31
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    \n    val = 0\n    for x in listval:\n        if x > val:\n            val = x\n    return val\n",
        "num_ids": 33
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    length = len(listval)\n    max_val = listval[0]\n    if length == 1:\n        return max_val\n    else:\n        for i in range(length):\n            if listval[i] > max_val:\n                max_val = listval[i]\n    return max_val\n",
        "num_ids": 78
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval)==1:\n        return listval[0]\n    else:\n        return listval[0] if listval[0]>max_val(listval[1:]) else max_val(listval[1:])\n",
        "num_ids": 61
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        return max(listval)\n",
        "num_ids": 29
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 1:\n        return 1\n    else:\n        return number + sum_div(number-1)\n",
        "num_ids": 30
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    list = []\n    for i in range(1,number+1):\n        if number % i == 0:\n            list.append(i)\n    return sum(list)\n",
        "num_ids": 44
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for div in range(1, number + 1):\n        if number % div == 0:\n            div_sum += div\n    return div_sum\n",
        "num_ids": 44
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    # if number is 0 or 1, it has no divisors\n    if number == 0 or number == 1:\n        return 0\n    # iterate through list of integers from 1 to the number\n    for x in range(1, number):\n        # if the number is evenly divisible by x, add x to the sum\n        if number % x == 0:\n            total += x\n    # return the sum\n    return total\n",
        "num_ids": 105
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum\n",
        "num_ids": 44
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "num_ids": 48
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for divisor in range(1,number):\n        if number % divisor == 0:\n            sum += divisor\n    return sum\n",
        "num_ids": 42
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    #start at 2\n    for i in range(1, number + 1):\n        if i == number:\n            divisors.append(i)\n        elif number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "num_ids": 74
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for div in range(1, number // 2 + 1):\n        if number % div == 0:\n            divisors.append(div)\n    return sum(divisors)\n",
        "num_ids": 52
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    result = 1\n    div = 2\n    while div < number:\n        if number % div == 0:\n            result += div\n        div += 1\n    return result\n",
        "num_ids": 53
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) <= 1: \n        return arr, 0 \n",
        "num_ids": 20
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    sz = len(arr)\n    if sz < 2:\n        return 0\n    inv_count = 0\n    for i in range(sz):\n        for j in range(i+1, sz):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n    \n",
        "num_ids": 81
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return get_Inv_Count_Helper(arr, 0, len(arr)-1)\n",
        "num_ids": 23
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    N = len(arr) \n    count = 0\n    for i in range(0,N): \n        for j in range(i+1,N): \n            if (arr[i] > arr[j]): \n                count = count + 1\n    return count \n",
        "num_ids": 69
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(1, len(arr)):\n        for j in range(i, 0, -1):\n            if (arr[j-1] > arr[j]):\n                temp = arr[j-1]\n                arr[j-1] = arr[j]\n                arr[j] = temp\n                count += 1\n    return count\n    \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint get_Inv_Count(arr)\n",
        "num_ids": 125
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n    mid = n//2\n    if mid == 0:\n        return 0\n    left_arr = arr[0:mid]\n    right_arr = arr[mid:]\n    count = get_Inv_Count(left_arr) + get_Inv_Count(right_arr)\n    left = 0\n    right = 0\n    for i in range(mid):\n        if left_arr[i] > right_arr[i]:\n            left += 1\n        elif left_arr[i] < right_arr[i]:\n            right += 1\n    count += (left*right)\n    return count\n",
        "num_ids": 161
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def merge(arr, temp, p, q, r):\n        n1 = q - p + 1\n        n2 = r - q\n        L = [0] * (n1)\n        R = [0] * (n2)\n        for i in range(0, n1):\n            L[i] = arr[p + i]\n        for j in range(0, n2):\n            R[j] = arr[q + j + 1]\n        i = 0\n        j = 0\n        for k in range(p, r + 1):\n            if i < n1 and (j >= n2 or L[i] <= R[j]):\n                temp[k] = L[i]\n                i += 1\n            else:\n                temp[k] = R[j]\n                j += 1\n        arr[p:r+1] = temp[p:r+1]\n",
        "num_ids": 213
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(0, len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count = count + 1\n    return count\n",
        "num_ids": 61
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    temp = [0 for i in range(n)]\n    return _get_Inv_Count(arr, temp, 0, n-1)\n",
        "num_ids": 65
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for i in list1:\n        if isinstance(i,list):\n            list2.extend(flatten_list(i))\n        else:\n            list2.append(i)\n    return list2\n",
        "num_ids": 59
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    res = []\n    for elem in list1:\n        if type(elem) == type([]):\n            res.extend(flatten_list(elem))\n        else:\n            res.append(elem)\n    return res\n",
        "num_ids": 61
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    \n    return [item for sublist in list1 for item in sublist]\n    \n    \ndef most_common(l):\n    '''\n    Write a function to compute the most common element of a list.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [elem for sublist in list1 for elem in sublist]\n",
        "num_ids": 21
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return list1\n    else:\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n",
        "num_ids": 43
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # If the list is empty return it\n    if len(list1) == 0:\n        return list1\n    \n    # If the list only has one element, just return the list\n    if len(list1) == 1:\n        return list1[0]\n    \n    # Return the first element from the list followed by flattening the rest of the list\n    return list1[0] + flatten_list(list1[1:])\n",
        "num_ids": 105
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    \n    # Initialize a list to store the result\n    result = []\n    \n    # Recursively flatten the given list\n    flatten_list_util(list1, result)\n    \n    # Return the flattened list\n    return result\n",
        "num_ids": 60
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return []\n    if type(list1[0]) == list:\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    else:\n        return [list1[0]] + flatten_list(list1[1:])\n",
        "num_ids": 76
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list1_flatten = []\n    for item in list1:\n        if isinstance(item,list):\n            list1_flatten += flatten_list(item)\n        else:\n            list1_flatten.append(item)\n    return list1_flatten\n",
        "num_ids": 68
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if list1 == []:\n        return list1\n    return flatten_list(list1[1:]) + [list1[0]]\n",
        "num_ids": 36
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    result = defaultdict(list)\n    for (a,b,c) in stdata:\n        result[a].append(b)\n        result[b].append(a)\n        result[c].append(a)\n        result[a].append(c)\n    max_aggregate = []\n    for key, values in result.iteritems():\n        if len(values) > 1:\n            max_aggregate.append(values)\n    if len(max_aggregate) > 0:\n        return max_aggregate\n    else:\n        return None\n",
        "num_ids": 134
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Your code goes here\n    #print stdata\n    agg = defaultdict(int)\n    #print agg\n    for tup in stdata:\n        #print tup\n        for i in tup:\n            agg[i] += 1\n    \n    print agg\n    return max(agg, key = agg.get)\n",
        "num_ids": 79
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return max(x[0] for x in stdata)\n",
        "num_ids": 17
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max = -999999999\n    for elem in stdata:\n        if elem[2] > max:\n            max = elem[2]\n    return max\ndef max_aggregate_time(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max = -999999999\n    for elem in stdata:\n        if elem[3] > max:\n            max = elem[3]\n    return max\ndef max_aggregate_time_lazy(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max = -999999999\n    for elem in stdata:\n        if elem[4] > max:\n            max = elem[4]\n    return max\ndef max_aggregate_time_lazy_2(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max = -999999999\n    for elem in stdata:\n        if elem[5] > max:\n            max = elem[5]\n    return max\ndef max_aggregate_time_lazy_3(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max = -999999999\n    for elem in stdata:\n        if elem[6] > max:\n            max = elem[6]\n    return max\ndef max_aggregate_time_lazy_4(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max = -999999999\n    for elem in stdata:\n        if elem[7] > max:\n            max = elem[7]\n    return max\n",
        "num_ids": 43
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate_ = 0\n    for st in stdata:\n        summation_ = sum(st)\n        if summation_ > max_aggregate_:\n            max_aggregate_ = summation_\n    return max_aggregate_\n",
        "num_ids": 62
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    a=len(stdata)\n    b=len(stdata[0])\n    d=defaultdict(int)\n    for i in stdata:\n        for j in i:\n            d[j]=d[j]+1\n    return max(d.items(),key=lambda x:x[1])[0]\n",
        "num_ids": 78
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    results = defaultdict(int)\n    for a,b in stdata:\n        if b:\n            results[a] += 1\n    return max(results.values())\n",
        "num_ids": 43
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return max(stdata, key = lambda x: x[0])\n",
        "num_ids": 19
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate_dict = defaultdict(int)\n    for stname, stnum, nt in stdata:\n        aggregate_dict[stname] += nt\n    return aggregate_dict\n",
        "num_ids": 48
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    if len(stdata) <= 1:\n        return stdata[0]\n",
        "num_ids": 21
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n<1:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 1\n    if n==3:\n        return 1\n    if n==4:\n        return 2\n    \n    result=0\n    result+=(n-1) * (n-2) * count_binary_seq(n-2)\n    if n%2==1:\n        result+=(n-1) * count_binary_seq(n-1)\n    if n%3==1:\n        result+=(n-1) * count_binary_seq(n-3)\n    \n    return result\n    ",
        "num_ids": 155
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    count = [0] * (n + 1) \n    count[0] = 1 \n    for i in xrange(n + 1): \n        for j in xrange(i): \n            if i > j: \n                count[i] += count[j] * 2 ** (i - j - 1) \n    return count[n]\n",
        "num_ids": 88
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0 \n    for i in range(1,2**n):\n        if bin(i)[2:].zfill(n).count(\"1\") == n: \n            count += 1\n    return count \n",
        "num_ids": 54
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return count_binary_seq(n - 1) + count_binary_seq(n - 2)\n",
        "num_ids": 53
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    else:\n        res = 0\n        for i in range(2, n+1):\n            res += count_binary_seq(i-2) * count_binary_seq(i-1)\n        return res\n",
        "num_ids": 75
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 1: \n        return 2\n    if n == 2: \n        return 3\n    if n == 3: \n        return 4\n    return count_binary_seq(n - 1) + count_binary_seq(n - 2) + count_binary_seq(n - 3) \n",
        "num_ids": 74
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count(n):\n        if n == 1:\n            return 2\n        else:\n            return count(n-1) + count(n-2)\n    return count(n)\n",
        "num_ids": 47
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(0, 2**n):\n        binary_str = bin(i)[2:]\n        binary_str = '0' * (n - len(binary_str)) + binary_str\n        if binary_str[0] == binary_str[-1]:\n            count += 1\n    return count\n",
        "num_ids": 81
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_binary_seq_helper(n, prefix, sum): \n        if len(prefix) == n: \n            count[0] += 1\n            return \n        for i in xrange(2):\n            if prefix[-1] == '1' and (sum + i) & 1 == 0:\n                count_binary_seq_helper(n, prefix + str(i), sum + i)\n        return\n    count = [0]\n    count_binary_seq_helper(n, '', 0)\n    return count[0]\n",
        "num_ids": 134
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())\n",
        "num_ids": 37
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    else:\n        return 0\n",
        "num_ids": 44
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        raise ValueError('Input must be a dictionary')\n",
        "num_ids": 25
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is not dict:\n        return 0\n    return 1+max(dict_depth(v) for v in d.values())\n",
        "num_ids": 37
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # a dictionary is \"nested\" when\n    # the values are dictionaries\n    # and so on.\n    return 1 + max(map(dict_depth, d.values())) if d else 0\n",
        "num_ids": 50
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.itervalues())) if d else 0)\n    return 0\n",
        "num_ids": 43
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.itervalues())\n",
        "num_ids": 40
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d)!= dict:\n        return 1\n    return max(dict_depth(v) for v in d.values()) + 1\n",
        "num_ids": 36
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d.keys():\n        depth = max(depth, len(key.split('_')) - 1)\n    return depth\n",
        "num_ids": 40
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return max([dict_depth(v) if isinstance(v, dict) else 1 for v in d.values()] or [0]) + 1\n",
        "num_ids": 37
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(ranges)) :\n        if ranges[i][0] <= index < ranges[i][1] :\n            return arr[rotations[i]]\n    return arr[rotations[-1]]\n",
        "num_ids": 55
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if ranges[index] == 0 :\n        return arr[0]\n    elif ranges[index] == 1 :\n        return arr[1]\n    else :\n        return arr[index-rotations[index]]\n",
        "num_ids": 53
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    l,r = ranges[index]\n    if rotations[index] == 0 :\n        return arr[l]\n    elif rotations[index] == 1 :\n        return arr[l+1]\n    elif rotations[index] == 2 :\n        return arr[l+2]\n    elif rotations[index] == 3 :\n        return arr[r]\n    elif rotations[index] == 4 :\n        return arr[r-1]\n    elif rotations[index] == 5 :\n        return arr[r-2]\n    elif rotations[index] == 6 :\n        return arr[r-3]\n    elif rotations[index] == 7 :\n        return arr[l]\n    else :\n        return arr[l]\n    \ndef find_index(arr,target) :\n    '''\n    Write a python function to find the index of the target element.\n    '''\n    return arr.index(target)\n",
        "num_ids": 11
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    arr_len = len(arr)\n    if index>arr_len or index<0 :\n        return None\n",
        "num_ids": 29
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    N = len(arr)\n    res = None\n    for i in range(N) :\n        if ranges[i] <= index <= ranges[i + 1] :\n            res = arr[i]\n            break\n    \n    res_list = []\n    for i in range(N) :\n        res_list.append(arr[(i + rotations) % N])\n    \n    return res_list[(index - ranges[i]) % N]\n",
        "num_ids": 112
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(ranges)) :\n        if ranges[i][0] <= rotations[index] <= ranges[i][1] :\n            return arr[i]\n",
        "num_ids": 45
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if rotations[index] :\n        return arr[rotations[index]]\n    else :\n        return arr[(rotations[index] + find_Element(arr,rotations,ranges,index+1))%len(arr)]\n",
        "num_ids": 58
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    l,r = ranges[index]\n    for i in range(len(rotations)):\n        if l <= rotations[i] <= r:\n            return arr[i]\n    return arr[-1]\ndef find_minimum_element_rotations(arr) :\n    '''\n    Write a python function to find the minimum element rotations after number of rotations.\n    '''\n    n = len(arr)\n    ranges = []\n    rotations = []\n    for i in range(n):\n        ranges.append((i,n-i-1))\n    ranges = sorted(ranges,key=lambda x : x[1])\n    for i in range(n):\n        rotations.append(find_Element(arr,ranges,rotations,i))\n    return rotations\n    \ndef find_minimum_element_rotations2(arr) :\n    '''\n    Write a python function to find the minimum element rotations after number of rotations.\n    '''\n    rotations = find_minimum_element_rotations(arr)\n    rotations.sort()\n    min_rotations = 0\n    for i in range(len(rotations)-1) :\n        min_rotations += abs(rotations[i] - rotations[i+1])\n    return min_rotations\n",
        "num_ids": 77
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if (index>=len(arr)) :\n        return None\n    elif (index == len(arr)-1) :\n        if ranges[0]<=rotations[index]<=ranges[1] :\n            return arr[index]\n        else :\n            return None\n    elif (rotations[index]>=ranges[1]) :\n        return find_Element(arr,ranges,rotations,index+1)\n    elif (ranges[0]<=rotations[index]<=ranges[1]) :\n        return arr[index]\n    elif (rotations[index]<ranges[0]) :\n        return find_Element(arr,ranges,rotations,index+1)\n    \n",
        "num_ids": 176
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index < len(arr) :\n        for i in range(rotations) :\n            arr = arr[-1:] + arr[:-1]\n        print(arr[index])\n    else :\n        print('Given index out of bounds')\n",
        "num_ids": 60
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if word[0] == 'p':\n            result.append(word)\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match('p+',word):\n            p_words.append(word)\n    return p_words\n",
        "num_ids": 44
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    start_withp_words = []\n    for word in words:\n        if word[0] == 'p':\n            start_withp_words.append(word)\n    return start_withp_words\n",
        "num_ids": 52
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    def word_start_with_p(words):\n        return [word for word in words if word[0] == 'p']\n    return word_start_with_p(words)\n",
        "num_ids": 46
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(len(words)):\n        if re.search('p',words[i][0]):\n            return words[i]\n",
        "num_ids": 37
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    i=0\n    while i<len(words):\n        if words[i][0]=='p' and len(words[i])>=3:\n            return words[i],words[i+1]\n        i+=1\n    return None,None\n",
        "num_ids": 64
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = re.compile('p.*')\n    res = [word for word in words if re.match(p,word)]\n    return res\n",
        "num_ids": 37
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res=[]\n    for word in words:\n        if re.match('p.*',word):\n            res.append(word)\n    return res\ndef test_start_withp():\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert start_withp(['apples', 'paper', 'pappy', 'papas', 'papaya'])==['pappy', 'papas']\n    assert star",
        "num_ids": 2010
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(0,len(words)):\n        if words[i].startswith('p'):\n            return [words[i],words[i+1]]\ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    for i in range(0,len(words)):\n        if words[i].endswith('p'):\n            return [words[i],words[i+1]]\ndef contain_p(words):\n    '''\n    Write a function to return two words from a list of words containing letter 'p'.\n    '''\n    for i in range(0,len(words)):\n        if 'p' in words[i]:\n            return [words[i],words[i+1]]\ndef lst(start,end):\n    '''\n    Write a function to return a list of all the integers between start and end (inclusive).\n    '''\n    return range(start,end+1)\ndef first_occurence(lst,key):\n    '''\n    Write a function to return the index of the first occurence of the item in the list.\n    '''\n    for i in range(0,len(lst)):\n        if lst[i]==key:\n            return i\ndef last_occurence(lst,key):\n    '''\n    Write a function to return the index of the last occurence of the item in the list.\n    '''\n    for i in range(len(lst)-1,-1,-1):\n        if lst[i]==key:\n            return i\ndef sort_list(lst):\n    '''\n    Write a function to sort a list of strings.\n    '''\n    for i in range(0,len(lst)):\n        for j in range(0,len(lst)):\n            if lst[j]>lst[i]:\n                temp = lst[i]\n                lst[i] = lst[j]\n                lst[j] = temp\ndef lst_num(lst):\n    '''\n    Write a function to return a list of all the positive integers in a list.\n    '''\n    nums = []\n    for i in range(0,len(lst)):\n        if type(lst[i])==int:\n            nums.append(lst[i])\n    return nums\ndef lst_num_notp(lst):\n    '''\n    Write a function to return a list of all the positive integers in a list that do not contain letter 'p'.\n    '''\n    nums = []\n    for i in range(0,len(lst)):\n        if type(lst[i])==int:\n            if not lst[i].startswith('p'):\n                nums.append(lst[i])\n    return nums\ndef lst_num_in_bounds(lst,start,end):\n    '''\n    Write a function to return a list of all the positive integers in a list that are between start and end (inclusive).\n    '''\n    nums = []\n    for i in range(0,len(lst)):\n        if type(lst[i])==int:\n            if lst[i]>=start and lst[i]<=end:\n                nums.append(lst[i])\n    return nums\ndef check_vowel(word):\n    '''\n    Write a function to check if a word contains a vowel.\n    '''\n    vowel_lst = ['a','e','i','o','u']\n    for i in range(0,len(word)):\n        if word[i] in vowel_lst:\n            return True\n    return False\ndef check_vowel_pos(word,pos):\n    '''\n    Write a function to check if a word contains a vowel on a specific position.\n    '''\n    vowel_lst = ['a','e','i','o','u']\n    if pos<len(word):\n        if word[pos] in vowel_lst:\n            return True\n    return False\ndef check_vowel_pos_not(word,pos):\n    '''\n    Write a function to check if a word contains a vowel on a specific position.\n    '''\n    vowel_lst = ['a','e','i','o','u']\n    if pos<len(word):\n        if word[pos] not in vowel_lst:\n            return True\n    return False\ndef check_vowel_pos_lst(word,pos_lst):\n    '''\n    Write a function to check if a word contains a vowel on a specific position.\n    '''\n    vowel_lst = ['a','e','i','o','u']\n    for i in range(0,len(pos_lst)):\n        if pos_lst[i]<len(word):\n            if word[pos_lst[i]] in vowel_lst:\n                return True\n    return False\ndef check_vowel_pos_not_lst(word,pos_lst):\n    '''\n    Write a function to check if a word contains a vowel on a specific position.\n    '''\n    vowel_lst = ['a','e','i','o','u']\n    for i in range(0,len(pos_lst)):\n        if pos_lst[i]<len(word):\n            if word[pos_lst[i]] not in vowel_lst:\n                return True\n    return False\ndef check_vowel_pos_between_bounds(word,pos_lst):\n    '''\n    Write a function to check if a word contains a vowel on a specific position.\n    '''\n    vowel_lst = ['a','e','i','o','u']\n    for i in range(0,len(pos_lst)):\n        if pos_lst[i]<len(word):\n            if word[pos_lst[i]] in vowel_lst:\n                return True\n    return False\ndef check_consonant(word):\n    '''\n    Write a function to check if a word contains a consonant.\n    '''\n    consonant_lst = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z']\n    for i in range(0,len(word)):\n        if word[i] in consonant_lst:\n            return True\n    return False\ndef check_consonant_pos(word,pos):\n    '''\n    Write a function to check if a word contains a consonant on a specific position.\n    '''\n    consonant_lst = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z']\n    if pos<len(word):\n        if word[pos] in consonant_lst:\n            return True\n    return False\ndef check_consonant_pos_not(word,pos):\n    '''\n    Write a function to check if a word contains a consonant on a specific position.\n    '''\n    consonant_lst = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z']\n    if pos<len(word):\n        if word[pos] not in consonant_lst:\n            return True\n    return False\ndef check_consonant_pos_lst(word,pos_lst):\n    '''\n    Write a function to check if a word contains a consonant on a specific position.\n    '''\n    consonant_lst = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z']\n    for i in range(0,len(pos_lst)):\n        if pos_lst[i]<len(word):\n            if word[pos_lst[i]] in consonant_lst:\n                return True\n    return False\ndef check_consonant_po",
        "num_ids": 121
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for i in words:\n        if i[0] == 'p':\n            result.append(i)\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    else:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n",
        "num_ids": 65
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # base case, if k < 0 or index < 0, return -1\n    if k < 0 or index < 0:\n        return -1\n    if index == n:\n        return 0\n    # if the i-th index is not the k-th element, then the max sum of increasing subseq of i-th element is\n    # the max of max_sum_increasing_subseq(a, n, i-1, k) and\n    # max_sum_increasing_subseq(a, n, i-1, k-1) + a[i]\n    return max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index])\n",
        "num_ids": 183
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k <= index:\n        return 0\n    if n == 0:\n        return 0\n",
        "num_ids": 24
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index >= n:\n        return 0\n    # include a given kth element and check for max sum increasing subseq\n    # till i+1th index.\n    t = max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index])\n    # exclude a given kth element and check for max sum increasing subseq\n    # till i+1th index.\n    t = max(t, max_sum_increasing_subseq(a, n, index + 1, k - 1) + a[index])\n    return t\n",
        "num_ids": 156
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > n:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    global max_sum\n    if index >= n:\n        return\n    if k < index:\n        return\n    if k == index:\n        if index == 0:\n            max_sum = max(max_sum, a[index])\n        else:\n            max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a, n, index - 1, k))\n        return\n    max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a, n, index - 1, k))\n    return\n",
        "num_ids": 140
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    for i in range(n):\n        if index[i] == k:\n            return a[i]\n    return -1\n",
        "num_ids": 33
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return k\n    if a[index] > k:\n        return k\n    return max(a[index], max_sum_increasing_subseq(a, n, index + 1, k - a[index]) + a[index])\n",
        "num_ids": 64
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # base case\n    if index == n:\n        return 0\n    \n    # if k is found then we return the maximum increasing subseq ending at index\n    if a[index] == k:\n        return k\n    \n    # if we find that k is greater than a[index] then we can't include a[index] in the\n    # answer as it would make the sum less than k\n    if k > a[index]:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    \n    # include a[index] and check whether we can include a[index] in the answer\n    return max(max_sum_increasing_subseq(a, n, index + 1, k) + a[index], max_sum_increasing_subseq(a, n, index + 1, k - 1) + a[index])\n",
        "num_ids": 202
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    else:\n        return max(max_sum_increasing_subseq(a, n, index+1, k), k + a[index] + max_sum_increasing_subseq(a, n, index+1, k))\n",
        "num_ids": 67
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:m+n]\n",
        "num_ids": 15
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m>len(tuplex):\n        return tuplex\n    if m<len(tuplex):\n        return tuplex[:m]\n    else:\n        return tuplex\ndef copy_tuplex(tuplex,m,n):\n    '''\n    Write a function to copy a tuple.\n    '''\n    if m>len(tuplex):\n        return tuplex\n    if m<len(tuplex):\n        return deepcopy(tuplex[:m])\n    else:\n        return deepcopy(tuplex)\ndef swap_tuplex(tuplex,m,n):\n    '''\n    Write a function to swap the two elements of a tuple.\n    '''\n    if m>len(tuplex):\n        return tuplex\n    if m<len(tuplex):\n        tuplex[m],tuplex[n]=tuplex[n],tuplex[m]\n        return tuplex\n    else:\n        tuplex[m],tuplex[n]=tuplex[n],tuplex[m]\n        return tuplex\ndef add_tuplex(tuplex,m,n):\n    '''\n    Write a function to add an element to a tuple.\n    '''\n    if m>len(tuplex):\n        return tuplex\n    if m<len(tuplex):\n        return tuplex[:m]+tuplex[m:n]+tuplex[n:]\n    else:\n        return tuplex[:m]+tuplex[m:n]+tuplex[n:]\ndef remove_tuplex(tuplex,m,n):\n    '''\n    Write a function to remove an element from a tuple.\n    '''\n    if m>len(tuplex):\n        return tuplex\n    if m<len(tuplex):\n        return tuplex[:m]+tuplex[n:]\n    else:\n        return tuplex\ndef index_tuplex(tuplex,m,n):\n    '''\n    Write a function to get the index of a tuple.\n    '''\n    if m>len(tuplex):\n        return tuplex\n    if m<len(tuplex):\n        return tuplex.index(m)\n    else:\n        return tuplex.index(m)\ndef is_tuple_same(tuplex1,tuplex2):\n    '''\n    Write a function to check if two tuples are the same.\n    '''\n    if tuplex1 is tuplex2:\n        return True\n    else:\n        return False\ndef tuple_add(tuplex1,tuplex2):\n    '''\n    Write a function to add two tuples.\n    '''\n    if len(tuplex1)<len(tuplex2):\n        return tuplex1+tuplex2[len(tuplex1):]\n    elif len(tuplex1)>len(tuplex2):\n        return tuplex1[:len(tuplex2)]+tuplex2\n    else:\n        return tuplex1+tuplex2\ndef is_tuple_greater(tuplex1,tuplex2):\n    '''\n    Write a function to check if a tuple is greater than another.\n    '''\n    if len(tuplex1)<len(tuplex2):\n        return True\n    elif len(tuplex1)>len(tuplex2):\n        return False\n    else:\n        return tuplex1>tuplex2\ndef is_tuple_less(tuplex1,tuplex2):\n    '''\n    Write a function to check if a tuple is less than another.\n    '''\n    if len(tuplex1)<len(tuplex2):\n        return False\n    elif len(tuplex1)>len(tuplex2):\n        return True\n    else:\n        return tuplex1<tuplex2\ndef tuple_greater(tuplex1,tuplex2):\n    '''\n    Write a function to check if a tuple is greater than another.\n    '''\n    if len(tuplex1)<len(tuplex2):\n        return tuplex2\n    elif len(tuplex1)>len(tuplex2):\n        return tuplex1\n    else:\n        return tuplex1\ndef tuple_less(tuplex1,tuplex2):\n    '''\n    Write a function to check if a tuple is less than another.\n    '''\n    if len(tuplex1)<len(tuplex2):\n        return tuplex1\n    elif len(tuplex1)>len(tuplex2):\n        return tuplex2\n    else:\n        return tuplex1\ndef tuple_equal(tuplex1,tuplex2):\n    '''\n    Write a function to check if two tuples are equal.\n    '''\n    if len(tuplex1)<len(tuplex2):\n        return False\n    elif len(tuplex1)>len(tuplex2):\n        return False\n    else:\n        return tuplex1==tuplex2\ndef tuple_contain(tuplex1,tuplex2):\n    '''\n    Write a function to check if a tuple contains another.\n    '''\n    if len(tuplex1)<len(tuplex2):\n        return False\n    elif len(tuplex1)>len(tuplex2):\n        return True\n    else:\n        return tuplex1 in tuplex2\ndef tuple_index(tuplex,m,n):\n    '''\n    Write a function to get the index of a tuple.\n    '''\n    if m>len(tuplex):\n        return tuplex\n    if m<len(tuplex):\n        return tuplex.index(m)\n    else:\n        return tuplex.index(m)\ndef tuple_replace(tuplex,m,n):\n    '''\n    Write a function to replace the element of a tuple.\n    '''\n    if m>len(tuplex):\n        return tuplex\n    if m<len(tuplex):\n        return tuplex[:m]+n+tuplex[n:]\n    else:\n        return tuplex[:m]+n+tuplex[n:]\ndef tuple_copy(tuplex):\n    '''\n    Write a function to copy a tuple.\n    '''\n    return tuplex\ndef tuple_sort(tuplex):\n    '''\n    Write a function to sort a tuple.\n    '''\n    return sorted(tuplex)\ndef tuple_reverse(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return tuplex[::-1]\ndef tuple_partition(tuplex,m,n):\n    '''\n    Write a function to partition a tuple.\n    '''\n    if m>len(tuplex):\n        return tuplex\n    if m<len(tuplex):\n        return tuplex[:m]+tuplex[n:],tuplex[m:n]\n    else:\n        return tuplex[:m]+tuplex[n:],tuplex[m:n]\ndef tuple_head(tuplex):\n    '''\n    Write a function to get the head of a tuple.\n    '''\n    return tuplex[:1]\ndef tuple_tail(tuplex):\n    '''\n    Write a function to get the tail of a tuple.\n    '''\n    return tuplex[1:]\ndef tuple_remove(tuplex,m,n):\n    '''\n    Write a function to remove an element from a tuple.\n    '''\n    if m>len(tuplex):\n        return tuplex\n    if m<len(tuplex):\n        return tuplex[:m]+tuplex[n:]\n    else:\n        return tuplex[:m]+tuplex[n:]\ndef tuple_insert(tuplex,m,n):\n    '''\n    Write a function to insert an element into a tuple.\n    '",
        "num_ids": 17
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    print(tuplex[m:m+n])\n",
        "num_ids": 16
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    result = ()\n    if m == 0 and n == 0:\n        return tuplex\n    elif m == 0:\n        return tuplex[n:]\n    elif n == 0:\n        return tuplex[:m]\n    else:\n        return tuplex[m:n]\n",
        "num_ids": 74
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m<0:\n        return\n    elif m==0 and n>0:\n        return tuplex[n-1]\n    else:\n        return tuplex[m-1][n-1]\n    \ndef list_fact(n):\n    '''\n    Write a function that takes a positive integer n and returns a list of all the\n    factors of n. \n    '''\n    \n    factor_list=[]\n    for x in range(1,n+1):\n        if n%x==0:\n            factor_list.append(x)\n    return factor_list\n    \ndef list_fact_iter(n):\n    '''\n    Write a function that takes a positive integer n and returns a list of all the\n    factors of n.\n    '''\n    factor_list=[]\n    factor_list.append(1)\n    for x in range(2,n+1):\n        if n%x==0:\n            factor_list.append(x)\n    return factor_list\n    \ndef list_fact_recursive(n):\n    '''\n    Write a function that takes a positive integer n and returns a list of all the\n    factors of n.\n    '''\n    if n<=1:\n        return [1]\n    else:\n        return [n]+list_fact_recursive(n/n)\n    \ndef list_fact_iter_recursive(n):\n    '''\n    Write a function that takes a positive integer n and returns a list of all the\n    factors of n.\n    '''\n    factor_list=[1]\n    for x in range(2,n+1):\n        if n%x==0:\n            factor_list.append(x)\n    return factor_list\n    \ndef print_list(l):\n    '''\n    Write a function that takes a list of integers and prints them out as they are \n    called in order.\n    '''\n    for x in l:\n        print x\n        \ndef print_list_recursive(l):\n    '''\n    Write a function that takes a list of integers and prints them out as they are \n    called in order.\n    '''\n    if l==[]:\n        return\n    print_list_recursive(l[1:])\n    print l[0]\n    \ndef print_list_iter(l):\n    '''\n    Write a function that takes a list of integers and prints them out as they are \n    called in order.\n    '''\n    for x in l:\n        print x\n    \ndef print_list_iter_recursive(l):\n    '''\n    Write a function that takes a list of integers and prints them out as they are \n    called in order.\n    '''\n    if l==[]:\n        return\n    print_list_iter_recursive(l[1:])\n    print l[0]\n    \ndef list_reverse(l):\n    '''\n    Write a function that takes a list of integers and returns the reversed list.\n    '''\n    rev_list=[]\n    for x in l[::-1]:\n        rev_list.append(x)\n    return rev_list\n    \ndef list_reverse_recursive(l):\n    '''\n    Write a function that takes a list of integers and returns the reversed list.\n    '''\n    if l==[]:\n        return []\n    else:\n        return [l[-1]]+list_reverse_recursive(l[:-1])\n    \ndef list_sort(l):\n    '''\n    Write a function that takes a list of integers and returns the sorted list.\n    '''\n    if len(l)==1:\n        return l\n    elif len(l)==2:\n        if l[0]>l[1]:\n            l[0],l[1]=l[1],l[0]\n        return l\n    else:\n        return sorted(l)\n    \ndef list_sort_recursive(l):\n    '''\n    Write a function that takes a list of integers and returns the sorted list.\n    '''\n    if l==[]:\n        return []\n    else:\n        return [min(l)]+list_sort_recursive(l[1:])\n    \ndef num_digits(n):\n    '''\n    Write a function that takes a non-negative integer n and returns the number of\n    digits n has.\n    '''\n    if n<10:\n        return 1\n    else:\n        return 1+num_digits(n/10)\n    \ndef num_digits_recursive(n):\n    '''\n    Write a function that takes a non-negative integer n and returns the number of\n    digits n has.\n    '''\n    if n<10:\n        return 1\n    else:\n        return 1+num_digits_recursive(n/10)\n    \ndef is_palindrome(n):\n    '''\n    Write a function that takes a non-negative integer n and returns True if n is \n    a palindrome, False otherwise.\n    '''\n    if n<10:\n        return True\n    elif n%10==n/10:\n        return is_palindrome(n/10)\n    else:\n        return False\n    \ndef is_palindrome_recursive(n):\n    '''\n    Write a function that takes a non-negative integer n and returns True if n is \n    a palindrome, False otherwise.\n    '''\n    if n<10:\n        return True\n    elif n%10==n/10:\n        return is_palindrome_recursive(n/10)\n    else:\n        return False\n    \ndef is_palindrome_iterative(n):\n    '''\n    Write a function that takes a non-negative integer n and returns True if n is \n    a palindrome, False otherwise.\n    '''\n    is_pal=False\n    while n>9:\n        is_pal=n%10==n/10\n        n=n/10\n    return is_pal\n    \ndef is_palindrome_iterative_recursive(n):\n    '''\n    Write a function that takes a non-negative integer n and returns True if n is \n    a palindrome, False otherwise.\n    '''\n    if n<10:\n        return True\n    elif n%10==n/10:\n        return is_palindrome_iterative_recursive(n/10)\n    else:\n        return False\n    \ndef is_pandigital(n):\n    '''\n    Write a function that takes a positive integer n and returns True if n is a \n    pandigital number, False otherwise.\n    '''\n    if len(str(n))==9:\n        return True\n    else:\n        return False\n    \ndef is_pandigital_recursive(n):\n    '''\n    Write a function that takes a positive integer n and returns True if n is a \n    pandigital number, False otherwise.\n    '''\n    if len(str(n))==9:\n        return True\n    elif n<10:\n        return True\n    else:\n        return is_pandigital_recursive(n/10)\n    \ndef is_pandigital_iterative(n):\n    '''\n    Write a function that takes a positive integer n and returns True if n is a \n    pandigital number, False otherwise.\n    '''\n    num_list=[1,2,3,4,5,6,7,8,9]\n    is_pandigital=True\n    for x in num_list:\n        if str(x)+str(n) not in str(n):\n            is_pandigital=False\n            break\n    return is_pandigital\n    \ndef is_pandigital_iterative_recursive(n):\n    '''\n    Write a function that takes a positive integer n and returns True if n is a \n    pandigital number, False otherwise.\n    '''\n    num_list=[1,2,3,4,5,6,7,8,9]\n    is_pandigital=True\n    for x in num_list:\n        if str(x)+str(n) not in str(n):\n            is_pandigital=False\n            break\n    return is_pandi",
        "num_ids": 81
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    b=tuplex[m:n]\n    return b\n",
        "num_ids": 18
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex=[]\n    for j in range(m):\n        new_tuplex.append([])\n        for i in range(n):\n            new_tuplex[j].append(tuplex[j][i])\n    return new_tuplex\n",
        "num_ids": 68
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:n]\n",
        "num_ids": 13
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex = (tuplex[0],tuplex[1])\n    if m == 1 and n == 1:\n        return tuplex\n    if m == 1:\n        return (tuplex[0],)\n    elif m == 2:\n        return (tuplex[0],tuplex[1])\n    elif n == 1:\n        return (tuplex[0],)\n    else:\n        return (tuplex[0],tuplex[1])\ndef replace_tuplex(tuplex,m,n,tuplex1):\n    '''\n    Write a function to replace the values in a tuple with another tuple.\n    '''\n    tuplex = (tuplex[0],tuplex[1])\n    tuplex1 = (tuplex1[0],tuplex1[1])\n    if m == 1 and n == 1:\n        return tuplex1\n    if m == 1:\n        return (tuplex1[0],)\n    elif m == 2:\n        return (tuplex1[0],tuplex1[1])\n    elif n == 1:\n        return (tuplex1[0],)\n    else:\n        return (tuplex1[0],tuplex1[1])\ndef replace_tuplex_rec(tuplex,m,n,tuplex1):\n    '''\n    Write a recursive function to replace the values in a tuple with another tuple.\n    '''\n    tuplex = (tuplex[0],tuplex[1])\n    tuplex1 = (tuplex1[0],tuplex1[1])\n    if m == 1 and n == 1:\n        return tuplex1\n    if m == 1:\n        return (tuplex1[0],)\n    elif m == 2:\n        return (tuplex1[0],tuplex1[1])\n    elif n == 1:\n        return (tuplex1[0],)\n    else:\n        return (tuplex1[0],tuplex1[1])\ndef replace_tuplex_iter(tuplex,m,n,tuplex1):\n    '''\n    Write an iterative function to replace the values in a tuple with another tuple.\n    '''\n    tuplex = (tuplex[0],tuplex[1])\n    tuplex1 = (tuplex1[0],tuplex1[1])\n    if m == 1 and n == 1:\n        return tuplex1\n    if m == 1:\n        for i in range(1,m+1):\n            tuplex1 = (tuplex1[0],)\n        return tuplex1\n    elif m == 2:\n        for i in range(0,m):\n            tuplex1 = (tuplex1[0],tuplex1[1])\n        return tuplex1\n    elif n == 1:\n        for i in range(0,m):\n            tuplex1 = (tuplex1[0],)\n        return tuplex1\n    else:\n        for i in range(0,m):\n            tuplex1 = (tuplex1[0],tuplex1[1])\n        return tuplex1\ndef replace_tuplex_rec_iter(tuplex,m,n,tuplex1):\n    '''\n    Write a recursive function to replace the values in a tuple with another tuple.\n    '''\n    tuplex = (tuplex[0],tuplex[1])\n    tuplex1 = (tuplex1[0],tuplex1[1])\n    if m == 1 and n == 1:\n        return tuplex1\n    if m == 1:\n        return (tuplex1[0],)\n    elif m == 2:\n        return (tuplex1[0],tuplex1[1])\n    elif n == 1:\n        return (tuplex1[0],)\n    else:\n        return (tuplex1[0],tuplex1[1])\ndef get_tuplex_from_string(string,m,n):\n    '''\n    Write a function to get a tuple from a string.\n    '''\n    tuplex = string\n    if m == 1 and n == 1:\n        return tuplex\n    if m == 1:\n        return (tuplex[0],)\n    elif m == 2:\n        return (tuplex[0],tuplex[1])\n    elif n == 1:\n        return (tuplex[0],)\n    else:\n        return (tuplex[0],tuplex[1])\ndef add_tuplex(tuplex,m,n,tuplex1):\n    '''\n    Write a function to add two tuples together.\n    '''\n    tuplex = (tuplex[0],tuplex[1])\n    tuplex1 = (tuplex1[0],tuplex1[1])\n    if m == 1 and n == 1:\n        return tuplex1\n    if m == 1:\n        return (tuplex1[0] + tuplex[0],)\n    elif m == 2:\n        return (tuplex1[0] + tuplex[0],tuplex1[1] + tuplex[1])\n    elif n == 1:\n        return (tuplex1[0] + tuplex[0],)\n    else:\n        return (tuplex1[0] + tuplex[0],tuplex1[1] + tuplex[1])\ndef add_tuplex_rec(tuplex,m,n,tuplex1):\n    '''\n    Write a recursive function to add two tuples together.\n    '''\n    tuplex = (tuplex[0],tuplex[1])\n    tuplex1 = (tuplex1[0],tuplex1[1])\n    if m == 1 and n == 1:\n        return tuplex1\n    if m == 1:\n        return (tuplex1[0] + tuplex[0],)\n    elif m == 2:\n        return (tuplex1[0] + tuplex[0],tuplex1[1] + tuplex[1])\n    elif n == 1:\n        return (tuplex1[0] + tuplex[0],)\n    else:\n        return (tuplex1[0] + tuplex[0],tuplex1[1] + tuplex[1])\ndef add_tuplex_iter(tuplex,m,n,tuplex1):\n    '''\n    Write an iterative function to add two tuples together.\n    '''\n    tuplex = (tuplex[0],tuplex[1])\n    tuplex1 = (tuplex1[0],tuplex1[1])\n    if m == 1 and n == 1:\n        return tuplex1\n    if m == 1:\n        for i in range(1,m+1):\n            tuplex1 = (tuplex1[0] + tuplex[0],)\n        return tuplex1\n    elif m == 2:\n        for i in range(0,m):\n            tuplex1 = (tuplex1[0] + tuplex[0],tuplex1[1] + tuplex[1])\n        return tuplex1\n    elif n == 1:\n        for i in range(0,m):\n            tuplex1 = (tuplex1[0] + tuplex[0],)\n        return tuplex1\n    else:\n        for i in range(0,m):\n            tuplex1 = (tuplex1[0] + tuplex[0],tuplex1[1] + tuplex[1])\n        return tuplex1\ndef add_tuplex_rec_iter(tuplex,m,n,tuplex1):\n    '''\n    Write a recursive function to add two tuples together.\n    '''\n    tuplex = (tuplex[0],tuplex[1])\n    tuplex1 = (tuplex1[0],tuplex1[1])\n    if m == 1 and ",
        "num_ids": 50
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #your code here\n    x = list(tuplex)\n    c = 0\n    for i in range(len(x)):\n        if x[i] == m:\n            c = c + 1\n    if c == 0:\n        return tuplex\n    else:\n        y = []\n        for i in range(len(x)):\n            if x[i]!= m:\n                y.append(x[i])\n        return tuple(y)\n",
        "num_ids": 114
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) < N or len(nums2) < N:\n        return\n",
        "num_ids": 26
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return\n    factors1 = []\n    factors2 = []\n    for i in range(1,N+1):\n        for j in range(len(nums1)):\n            if nums1[j] % i == 0:\n                factors1.append(nums1[j]/i)\n        for j in range(len(nums2)):\n            if nums2[j] % i == 0:\n                factors2.append(nums2[j]/i)\n        factors1.sort()\n        factors2.sort()\n        factors1.reverse()\n        factors2.reverse()\n        factors1 = factors1[:N]\n        factors2 = factors2[:N]\n    print factors1, factors2\n    result = 1\n    for i in range(N):\n        result *= (factors1[i]*factors2[i])\n    return result\n",
        "num_ids": 244
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    s1, s2, s3, s4 = set(nums1), set(nums2), set(nums1), set(nums2)\n    prod = 1\n    for i in s1:\n        for j in s2:\n            prod = max(prod, i*j)\n    for i in s3:\n        for j in s4:\n            prod = max(prod, i*j)\n    return prod\n",
        "num_ids": 110
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1 = sorted(nums1, reverse = True)\n    nums2 = sorted(nums2, reverse = True)\n    products = []\n    i = 0\n    j = 0\n    while i < N:\n        products.append(nums1[i] * nums2[j])\n        i += 1\n        j += 1\n    return products\n    \n    \nnums1 = [3,2,1,3,4]\nnums2 = [1,2,3,4]\nN = 3\nprint large_product(nums1, nums2, N)\n",
        "num_ids": 143
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    if N > len(nums1) or N > len(nums2):\n        return result\n    nums1 = sorted(nums1, reverse=True)\n    nums2 = sorted(nums2, reverse=True)\n    for i in xrange(N):\n        if len(nums1) == 0 or len(nums2) == 0:\n            return result\n        result.append(nums1[0] * nums2[0])\n        if nums1[0] > nums2[0]:\n            nums1 = nums1[1:]\n        else:\n            nums2 = nums2[1:]\n    return result\n",
        "num_ids": 165
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    n = len(nums1)\n    l = len(nums2)\n",
        "num_ids": 46
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n",
        "num_ids": 18
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    products = []\n    \n    for i in range(N):\n        products.append([nums1[i]*nums2[i], nums1[i], nums2[i]])\n    \n    # sort the list by the first element of each tuple\n    products.sort(key=lambda tup: tup[0])\n    \n    return products[-1][0]\n    \n    ",
        "num_ids": 99
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    product = 1\n    for n in nums1:\n        product *= n\n    max_product = product\n",
        "num_ids": 29
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    if N > len(nums1) or N > len(nums2):\n        return None\n    else:\n        prod = []\n        for n in xrange(N):\n            prod.append(nums1[n] * nums2[n])\n    return prod\n",
        "num_ids": 94
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a>b):\n        return a\n    else:\n        return b\n",
        "num_ids": 22
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \ndef fibonacci(n):\n    '''\n    Write a python function to calculate the nth fibonacci number.\n    '''\n    a,b=0,1\n    if n==1:\n        return a\n    elif n==2:\n        return b\n    else:\n        for i in range(2,n):\n            c=a+b\n            a=b\n            b=c\n        return b\n    \ndef power(a,b):\n    '''\n    Write a python function to calculate a^b\n    '''\n    if b==0:\n        return 1\n    elif b==1:\n        return a\n    else:\n        return a*power(a,b-1)\n    \ndef factorial(n):\n    '''\n    Write a python function to calculate n!\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*factorial(n-1)\n    \ndef powerset(l):\n    '''\n    Write a python function to find the power set of a list l\n    '''\n    if len(l)==0:\n        return [[]]\n    else:\n        smaller=powerset(l[1:])\n        l1=[]\n        for i in smaller:\n            l1.append(i)\n        for j in smaller:\n            l1.append(j+[l[0]])\n        return smaller+[l1]\n    \ndef permutation(l):\n    '''\n    Write a python function to find the permutation of a list l\n    '''\n    if len(l)==0:\n        return [[]]\n    else:\n        smaller=permutation(l[1:])\n        l1=[]\n        for i in smaller:\n            l1.append(i)\n        for j in smaller:\n            l1.append(j+[l[0]])\n        return smaller+[l1]\n    \ndef combinations(l):\n    '''\n    Write a python function to find the combinations of a list l\n    '''\n    if len(l)==0:\n        return [[]]\n    else:\n        smaller=combinations(l[1:])\n        l1=[]\n        for i in smaller:\n            l1.append(i)\n        for j in smaller:\n            l1.append(j+[l[0]])\n        return smaller+[l1]\n    \ndef subset(l):\n    '''\n    Write a python function to find the subset of a list l\n    '''\n    if len(l)==0:\n        return [[]]\n    else:\n        smaller=subset(l[1:])\n        l1=[]\n        for i in smaller:\n            l1.append(i)\n        for j in smaller:\n            l1.append(j+[l[0]])\n        return smaller+[l1]\n    \ndef combinations_with_replacement(l):\n    '''\n    Write a python function to find the combinations with replacement of a list l\n    '''\n    if len(l)==0:\n        return [[]]\n    else:\n        smaller=combinations_with_replacement(l[1:])\n        l1=[]\n        for i in smaller:\n            l1.append(i)\n        for j in smaller:\n            l1.append(j+[l[0]])\n        return smaller+[l1]\n    \ndef binomial(n,p):\n    '''\n    Write a python function to find the binomial coefficient of two numbers.\n    '''\n    if p==1:\n        return n\n    elif p==0:\n        return 1\n    else:\n        return n*binomial(n-1,p-1)\n    \ndef decimal_to_binary(n):\n    '''\n    Write a python function to convert a decimal number to a binary number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n%2+10*decimal_to_binary(int(n/2))\n    \ndef reverse_string(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    if len(s)==0:\n        return ''\n    else:\n        return reverse_string(s[1:])+s[0]\n    \ndef frequency(l,e):\n    '''\n    Write a python function to find the frequency of an element in a list.\n    '''\n    if len(l)==0:\n        return 0\n    elif l[0]==e:\n        return 1+frequency(l[1:],e)\n    else:\n        return frequency(l[1:],e)\n    \ndef check_palindrome(s):\n    '''\n    Write a python function to check if a string is a palindrome.\n    '''\n    if len(s)<=1:\n        return True\n    elif s[0]!=s[-1]:\n        return False\n    else:\n        return check_palindrome(s[1:-1])\n    \ndef is_anagram(s,t):\n    '''\n    Write a python function to check if two strings are anagrams.\n    '''\n    if len(s)==len(t):\n        if sorted(s)==sorted(t):\n            return True\n        else:\n            return False\n    else:\n        return False\n    \ndef is_pangram(s):\n    '''\n    Write a python function to check if a string is a pangram.\n    '''\n    d=s.lower()\n    for i in d:\n        if i not in 'abcdefghijklmnopqrstuvwxyz':\n            return False\n    return True\n    \ndef is_permutation(s,t):\n    '''\n    Write a python function to check if two strings are a permutation of each other.\n    '''\n    if len(s)==len(t):\n        l=list(s)\n        for i in l:\n            if i not in t:\n                return False\n        for j in l:\n            if j not in s:\n                return False\n        return True\n    else:\n        return False\n    \ndef is_anagram_reverse(s,t):\n    '''\n    Write a python function to check if two strings are an anagram of each other, but in reverse order.\n    '''\n    if len(s)==len(t):\n        if sorted(s)==sorted(t):\n            return True\n        else:\n            return False\n    else:\n        return False\n    \ndef is_anagram_dict(s,t):\n    '''\n    Write a python function to check if two strings are an anagram of each other, but using a dictionary instead.\n    '''\n    if len(s)==len(t):\n        d={}\n        for i in s:\n            d[i]=d.get(i,0)+1\n        for j in t:\n            d[j]=d.get(j,0)-1\n        for k in d.keys():\n            if d[k]!=0:\n                return False\n        return True\n    else:\n        return False\n    \ndef is_anagram_dict_modified(s,t):\n    '''\n    Write a python function to check if two strings are an anagram of each other, but using a dictionary instead.\n    '''\n    if len(s)==len(t):\n        d={}\n        for i in s:\n            d[i]=d.get(i,0)+1\n        for j in t:\n            d[j]=d.get(j,0)-1\n        for k in d.keys():\n            if d[k]!=0:\n                return False\n        return True\n    else:\n        return False\n    \ndef is_anagram_sort(s,t):\n    '''\n    Write a python function to check if two strings are an anagram of each other, but using a sorting method.\n    '''\n    if len(s)==len(t):\n        l=sorted(s)\n        l1=sorted(t",
        "num_ids": 31
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        return a\n    else:\n        return b\n",
        "num_ids": 22
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.lower()\n    str1 = str1.replace(' ', '')\n    str1 = str1.replace('-', '')\n    str1 = str1.replace('\\'', '')\n    tup1 = tuple(str1)\n    return tup1\n",
        "num_ids": 70
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n    \ndef tuple_to_string(tup):\n    '''\n    Write a function to convert a given tuple of characters to a string.\n    '''\n    return ''.join(tup)\n",
        "num_ids": 12
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    t = ()\n    for c in str1:\n        t = t + (c,)\n    return t\n",
        "num_ids": 28
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    char_list = []\n    for i in str1:\n        char_list.append(i)\n    return tuple(char_list)\n",
        "num_ids": 36
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    s = []\n    for x in str1:\n        s.append(x)\n    return tuple(s)\n",
        "num_ids": 30
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple1 = []\n    for i in str1:\n        tuple1.append(i)\n    return tuple1\n",
        "num_ids": 32
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tup = ()\n    for i in str1:\n        tup = tup + (i,)\n    return tup\n",
        "num_ids": 32
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str2 = ''\n    str3 = ()\n    str4 = ''\n    for char in str1:\n        str2 += char\n    str3 = tuple(str2)\n    for char in str3:\n        str4 += char\n    print(str4)\n",
        "num_ids": 65
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return 1\n    n = n & 0b1000000000000000\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n\n",
        "num_ids": 68
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    bit = 1\n    while (bit < n):\n        bit = bit << 1\n    return (bit | 1)\n",
        "num_ids": 30
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n ^ (n & (n - 1)) \n",
        "num_ids": 16
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n < 0: \n        n = ~(n & -n)\n    return n\n    \ndef reset_left_most_unset_bit(n): \n    '''\n    Write a python function to reset the left most unset bit.\n    '''\n    if n < 0: \n        n = ~(n & -n)\n    return n\n",
        "num_ids": 25
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0: \n        return 1\n    else: \n        return n ^ (1 << n.bit_length() - 1)\n",
        "num_ids": 36
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    mask = 1\n    x = n\n    for i in range(32):\n        mask = mask << 1\n        if x & mask:\n            mask = mask ^ 0b1\n        x = x & ~mask\n",
        "num_ids": 52
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return 0\n    bit_length = 0\n    while n!= 0:\n        bit_length += 1\n        n = n >> 1\n    return pow(2, bit_length) - 1\n",
        "num_ids": 55
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    assert n >= 0 and n <= 2147483647, 'Argument must be between 0 and 2^31 -1'\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 3\n    else:\n        return ((n & 0x55555555) + 1) & n\n",
        "num_ids": 88
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if (n & (n - 1)): \n        n = n & (n - 1)\n    return n\n",
        "num_ids": 30
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Extract the rightmost set bit\n    n &= ~(n-1) \n    # Toggle the rightmost set bit\n    n |= n + 1\n    return n \n",
        "num_ids": 45
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = (3.14159265359)*r*r*h/3\n    return v\ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    sa = (3.14159265359)*r*r + (3.14159265359)*r*h + (3.14159265359)*h*h/3\n    return sa\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v = (3.14159265359)*r*r*h/3\n    return v\ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    sa = (3.14159265359)*r*r + (3.14159265359)*r*2*h + (3.14159265359)*h*h/3\n    return sa\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4.0/3.0)*3.14159265359*r*r*r\n    return v\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa = 4.0*3.14159265359*r*r\n    return sa\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4.0/3.0)*3.14159265359*r*r*r\n    return v\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa = 4.0*3.14159265359*r*r\n    return sa\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v = (3.14159265359)*r*r*h\n    return v\ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    sa = (3.14159265359)*r*r + (3.14159265359)*r*2*h + (3.14159265359)*h*h/3\n    return sa\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4.0/3.0)*3.14159265359*r*r*r\n    return v\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa = 4.0*3.14159265359*r*r\n    return sa\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4.0/3.0)*3.14159265359*r*r*r\n    return v\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa = 4.0*3.14159265359*r*r\n    return sa\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4.0/3.0)*3.14159265359*r*r*r\n    return v\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa = 4.0*3.14159265359*r*r\n    return sa\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4.0/3.0)*3.14159265359*r*r*r\n    return v\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa = 4.0*3.14159265359*r*r\n    return sa\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4.0/3.0)*3.14159265359*r*r*r\n    return v\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa = 4.0*3.14159265359*r*r\n    return sa\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4.0/3.0)*3.14159265359*r*r*r\n    return v\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa = 4.0*3.14159265359*r*r\n    return sa\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4.0/3.0)*3.14159265359*r*r*r\n    return v\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa = 4.0*3.14159265359*r*r\n    return sa\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4.0/3.0)*3.14159265359*r*r*r\n    return v\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa = 4.0*3.14159265359*r*r\n    return sa\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4.0/3.0)*3.14159265359*r*r*r\n    return v\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa = 4.0*3.14159265359*r*r\n    return sa\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4.0/3.0)*3.14159265359*r*r*r\n    return v\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa = 4.0*3.14159265359*r*r\n    return sa\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4.0/3.0)*3.14159265359*r*r*r\n    return v\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa = 4.0*3.14159265359*r*r\n    return sa\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4.0/3.0)*3.14159265359*r*r*r\n    return v\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa = 4.0*3.14159265359*r*r\n    return sa\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4.0/3.0)*3",
        "num_ids": 15
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3.0)*math.pi*r*r*h\n    \ndef mass_cone(r,h):\n    '''\n    Write a function to find the mass of a cone.\n    '''\n    return (1/3.0)*math.pi*r*r*h\n",
        "num_ids": 21
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (3.14159265359) * (r**2) * (h/3.0)\n    return volume\n",
        "num_ids": 32
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = (1/3.0)*math.pi*r**2*h\n    return vol\n",
        "num_ids": 26
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*r*r*h/3\n    return volume\n",
        "num_ids": 21
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    r = r\n    h = h\n    V = 1/3*(r**2)*(math.pi*h)\n    return V\n",
        "num_ids": 36
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (math.pi*(r**2)*h)/3\n    return volume\n",
        "num_ids": 23
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3*math.pi*(r**2)*h\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\n",
        "num_ids": 19
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r*r*h/3\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4*math.pi*r*r*r/3\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\n",
        "num_ids": 14
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi * r**2 * h / 3\n    return V\n",
        "num_ids": 21
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    pow2 = 1\n    while(pow2 < n):\n        pow2 = pow2 * 2\n    return pow2\n",
        "num_ids": 34
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    for i in range(n,0,-1):\n        if(i & (i-1)==0):\n            return i\n    return 0\n",
        "num_ids": 37
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return 2 ** int(math.ceil(math.log(n, 2)))\n",
        "num_ids": 22
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    return 2**math.ceil(math.log2(n))\n",
        "num_ids": 30
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return 2 ** int(math.log(n, 2)) if n > 0 else 0\n",
        "num_ids": 23
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    n = int(n)\n    if n==0:\n        return 0\n    high = 0\n    while(1):\n        if (1<<high)<=n:\n            break\n        high += 1\n    return high\n    \ndef is_Prime(n):\n    '''\n    Write a python function to determine if a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\n    \ndef prime_factors(n):\n    '''\n    Write a python function to find prime factors of a number.\n    '''\n    if n==1:\n        return 1\n    while n%2==0:\n        print(2)\n        n = n/2\n    for i in range(3,int(n**(1/2))+1,2):\n        while n%i==0:\n            print(i)\n            n = n/i\n    if n>2:\n        print(n)\n    return\n    \ndef is_Permutation(n1,n2):\n    '''\n    Write a python function to determine if two numbers are permutations of each other.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n    for i in n1:\n        if i not in n2:\n            return False\n    for i in n2:\n        if i not in n1:\n            return False\n    return True\n    \ndef is_Anagram(n1,n2):\n    '''\n    Write a python function to determine if two strings are anagrams of each other.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n    if len(n1)!= len(n2):\n        return False\n    sorted1 = sorted(n1)\n    sorted2 = sorted(n2)\n    for i in range(len(n1)):\n        if sorted1[i]!= sorted2[i]:\n            return False\n    return True\n    \ndef is_Palindrome(n):\n    '''\n    Write a python function to determine if a number is a palindrome or not.\n    '''\n    n = str(n)\n    if len(n)%2==0:\n        return n[:len(n)//2] == n[len(n)//2:][::-1]\n    else:\n        return n[:len(n)//2] == n[len(n)//2+1:][::-1]\n    \ndef is_In_Interval(n,start,end):\n    '''\n    Write a python function to determine if a number is between start and end.\n    '''\n    if start<end:\n        return start<=n<=end\n    else:\n        return start<=n or n<=end\n    \ndef sum_of_Digits(n):\n    '''\n    Write a python function to compute the sum of the digits of a number.\n    '''\n    return sum([int(i) for i in str(n)])\n    \ndef is_Perfect_Number(n):\n    '''\n    Write a python function to determine if a number is perfect or not.\n    '''\n    if n<=0:\n        return False\n    if n==1:\n        return True\n    t = sum_of_Digits(n)\n    return t==n\n    \ndef is_Armstrong_number(n):\n    '''\n    Write a python function to determine if a number is armstrong or not.\n    '''\n    if n<=0:\n        return False\n    t = sum_of_Digits(n)\n    return t==n\n    \ndef is_Lychrel_number(n):\n    '''\n    Write a python function to determine if a number is Lychrel or not.\n    '''\n    if n<=0:\n        return False\n    if is_Armstrong_number(n):\n        return False\n    t = sum_of_Digits(n)\n    return t!=n\n    \ndef is_Pandigital(n):\n    '''\n    Write a python function to determine if a number is pandigital or not.\n    '''\n    if n<10:\n        return False\n    n = str(n)\n    for i in range(1,10):\n        if str(i) not in n:\n            return False\n    return True\n    \ndef is_Ulam_number(n):\n    '''\n    Write a python function to determine if a number is Ulam or not.\n    '''\n    if n<10:\n        return False\n    n = str(n)\n    for i in range(1,10):\n        if str(i) in n:\n            if str(i**2) not in n:\n                return False\n    return True\n    \ndef is_Perfect_Ulam(n):\n    '''\n    Write a python function to determine if a number is perfect Ulam or not.\n    '''\n    if n<10:\n        return False\n    return is_Ulam_number(n) and is_Pandigital(n)\n    \ndef is_Alternating_Permutation(n1,n2):\n    '''\n    Write a python function to determine if two numbers are alternating permutations of each other.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n    if len(n1)!= len(n2):\n        return False\n    for i in range(len(n1)):\n        if n1[i]!= n2[i]:\n            if n1[i+1:] == n2[:len(n1)-i] or n2[i+1:] == n1[:len(n2)-i]:\n                return True\n            else:\n                return False\n    return True\n    \ndef is_Pandigital_String(n):\n    '''\n    Write a python function to determine if a string is pandigital or not.\n    '''\n    if len(n)<10:\n        return False\n    n = str(n)\n    for i in range(1,10):\n        if str(i) not in n:\n            return False\n    return True\n    \ndef is_Equal_Adjacent_Digits(n1,n2):\n    '''\n    Write a python function to determine if two numbers are equal adjacent digits or not.\n    '''\n    if n1<10 or n2<10:\n        return False\n    return n1//10==n2//10\n    \ndef is_Equivalent_Digits(n1,n2):\n    '''\n    Write a python function to determine if two numbers are equivalent adjacent digits or not.\n    '''\n    if n1<10 or n2<10:\n        return False\n    return (n1%10==n2%10) or (n1//10==n2//10)\n    \ndef is_Pentagonal_Number(n):\n    '''\n    Write a python function to determine if a number is pentagonal or not.\n    '''\n    if n<=0:\n        return False\n    t = (1+24*n)**0.5\n    if int(t)==t:\n        return True\n    return False\n    \ndef is_Pentagonal_Prime(n):\n    '''\n    Write a python function to determine if a number is pentagonal and prime or not.\n    '''\n    if is_Pentagonal_Number(n):\n        return is_Prime(n)\n    return False\n    \ndef is_Triangle_Number(n):\n    '''\n    Write a python function to determine if a number is triangular or not.\n    '''\n    if n<=0:\n        return False\n    s = (n*(n+1))/2\n    return int(s)==s\n    \ndef is_Triangular_Prime(n):\n    '''\n    Write a python function to determine if a number is triangular and prime or not.\n    '''\n    if is_Triangle_Number(n):\n        return is_Prime(n)\n    return False\n    \ndef is_Palindrome_Number(n):\n    '''\n    Write a python function to determine if a number is palindrome or not.\n    '''",
        "num_ids": 1
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return int(2**(math.ceil(math.log(n,2))))\n",
        "num_ids": 23
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    n = int(n)\n    p = 0\n    while (2**p) <= n:\n        p += 1\n    return p - 1\n",
        "num_ids": 37
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return int(2**math.floor(math.log(n,2)))\n",
        "num_ids": 21
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    pow_2 = 1\n    while pow_2 <= n:\n        pow_2 = pow_2 * 2\n    return pow_2\n",
        "num_ids": 37
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "num_ids": 53
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # iterative\n    lucas = [1, 2]\n    for i in range(2, n):\n        lucas.append(lucas[i-1] + lucas[i-2])\n    return lucas[n-1]\n",
        "num_ids": 63
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return lucas(n-1) + lucas(n-2)\n",
        "num_ids": 50
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "num_ids": 53
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "num_ids": 53
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "num_ids": 53
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "num_ids": 53
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return (lucas(n-1) + lucas(n-2)) % 10**9\n",
        "num_ids": 26
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # Base Case\n    if n == 0:\n        return 2\n    # If the number is even\n    if n % 2 == 0:\n        return find_lucas(n/2)**2\n    else:\n        return find_lucas((3*n + 1)/2)**2 + find_lucas((3*n + 2)/2)**2\n",
        "num_ids": 90
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    a = 0\n    b = 1\n    for i in range(n-1):\n        c = a + b\n        a = b\n        b = c\n    return c\n",
        "num_ids": 66
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if string == '':\n        return\n    else:\n        new_list = []\n        for elem in list_:\n            new_list.append(string % elem)\n        return new_list\n",
        "num_ids": 51
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string % i for i in list_]\n",
        "num_ids": 15
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n",
        "num_ids": 37
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for element in list_:\n        new_list.append(string.format(element))\n    return new_list\n",
        "num_ids": 37
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    output = []\n    for s in list_:\n        output.append(string.format(s))\n    return output\n",
        "num_ids": 31
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(str(x)) for x in list_]\n",
        "num_ids": 20
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for x in list_:\n        new_list.append(x + string)\n    return new_list\n    \ndef remove_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for x in list_:\n        new_list.append(x.replace(string, \"\"))\n    return new_list\n    \ndef replace_string(list_, old, new):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for x in list_:\n        new_list.append(x.replace(old, new))\n    return new_list\n",
        "num_ids": 39
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for item in list_:\n        list_.append(string)\n",
        "num_ids": 18
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string % el for el in list_]\n",
        "num_ids": 15
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # #1\n    # for i in range(len(list_)):\n    #     list_[i] = string.format(list_[i])\n    # return list_\n",
        "num_ids": 46
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict = {}\n    for i in l1:\n        dict[i] = {}\n        for j in l2:\n            dict[i][j] = l3\n    return dict\n",
        "num_ids": 46
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {key: {l1[i]: l2[i], l3[i]: l4[i]} for i, key in enumerate(l1)}\n",
        "num_ids": 40
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l4 = [{l1[i]: l2[i]} for i in range(len(l1))]\n    l5 = [{l3[i]: l4[i]} for i in range(len(l3))]\n    return l5\n",
        "num_ids": 63
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    for i in range(len(l1)):\n        dictionary = {l1[i]: l2[i], l3[i]: l3[i]}\n    return dictionary\n",
        "num_ids": 45
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # l1 = [1, 2, 3]\n    # l2 = ['a', 'b', 'c']\n    # l3 = ['d', 'e', 'f']\n    return {l1[i]: {l2[i]: {l3[i]: 1}} for i in range(0, len(l1))}\n",
        "num_ids": 81
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {i: {j: {l3[i]: j} for j in l2} for i in l1}\n",
        "num_ids": 31
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {l1[i]: {l2[i]: l3[i]} for i in range(len(l1))}\n",
        "num_ids": 33
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    lst1 = [l1, l2, l3]\n    lst2 = [l1, l2, l3]\n    lst3 = [l1, l2, l3]\n    dic = {l1: lst1, l2: lst2, l3: lst3}\n    print(dic)\n    return dic\n",
        "num_ids": 89
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1 = [x for x in l1 if x not in l2]\n    l2 = [x for x in l2 if x not in l1]\n    l3 = [x for x in l3 if x not in l1 and x not in l2]\n    return {l1[i]:{l2[i]:{l3[i]:True}}}\n",
        "num_ids": 88
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return max( (get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)\n",
        "num_ids": 53
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n",
        "num_ids": 63
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n",
        "num_ids": 79
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n%2 == 0:\n        return max(n, get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5))\n    else:\n        return max(n, get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4))\n",
        "num_ids": 116
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    for i in range(2, n):\n        max_sum = max(max_sum, (get_max_sum(i) + get_max_sum(n-i) + i))\n    return max_sum\n",
        "num_ids": 61
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return None\n",
        "num_ids": 6
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n",
        "num_ids": 79
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    print (get_max_sum_recur(n, 0))\n",
        "num_ids": 19
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max( (get_max_sum( n / 2 ) + get_max_sum( n / 3 ) + get_max_sum( n / 4 ) + get_max_sum( n / 5 )), n )\n",
        "num_ids": 81
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if (n == 0):\n        return 0\n",
        "num_ids": 14
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length_dict = {}\n    for item in input_list:\n        if item in length_dict:\n            length_dict[item] += 1\n        else:\n            length_dict[item] = 1\n    max_len = 0\n    max_item = None\n    for key in length_dict:\n        if length_dict[key] > max_len:\n            max_len = length_dict[key]\n            max_item = key\n    return max_item\n",
        "num_ids": 113
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    lengths = [len(x) for x in input_list]\n    return input_list[lengths.index(max(lengths))]\n    \ninput_list = ['How', 'do', 'you', 'doin', 'geeks', 'and', 'python', 'hates', '!', 'So', 'they', 'actually', 'love', 'Python', 'and', 'C++', 'and', 'Java', 'in', 'general', '!', 'It', 'is', 'interesting', 'to', 'become', 'a', 'powerful', 'website', 'in', 'the', 'next', 'year']\nprint('input_list:', input_list)\nprint('max_length_list:', max_length_list(input_list))",
        "num_ids": 180
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    input_list_len = []\n    for i in input_list:\n        input_list_len.append(len(i))\n    return input_list[input_list_len.index(max(input_list_len))]\n",
        "num_ids": 58
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 0:\n        return None\n    max_length = 1\n    result_list = []\n    for element in input_list:\n        if len(element) > max_length:\n            max_length = len(element)\n            result_list = [element]\n        elif len(element) == max_length:\n            result_list.append(element)\n    return result_list\n",
        "num_ids": 101
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for l in input_list:\n        if len(l) > max_length:\n            max_length = len(l)\n            max_list = l\n    return max_list\n",
        "num_ids": 53
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 0:\n        return None\n",
        "num_ids": 18
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list[0])\n    max_list = input_list[0]\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = i\n    return max_list\n",
        "num_ids": 72
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    index = 0\n    for i in range(0, len(input_list)):\n        if len(input_list[i]) > max_len:\n            max_len = len(input_list[i])\n            index = i\n    print \"The maximum length is: \", max_len\n    print \"The maximum length list is: \", input_list[index]\n",
        "num_ids": 95
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length_list = []\n    for element in input_list:\n        length_list.append(len(element))\n    return max(length_list)\n    \ndef unique_list(input_list):\n    '''\n    Write a function to find the unique values in the list.\n    '''\n    unique_list = []\n    for element in input_list:\n        if element not in unique_list:\n            unique_list.append(element)\n    return unique_list\n",
        "num_ids": 44
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = i\n    return max_list\n",
        "num_ids": 60
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_list = list(test_tup)\n    test_list.sort()\n    if len(test_list)!= len(set(test_list)):\n        return False\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_list = list(test_tup)\n    return len(test_list) == len(set(test_list))\n",
        "num_ids": 33
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    lst = []\n    for val in test_tup:\n        if val in lst:\n            return False\n        else:\n            lst.append(val)\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    check_dict = {}\n    for elem in test_tup:\n        if elem not in check_dict:\n            check_dict[elem] = 1\n        else:\n            return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    list_of_elements = []\n    for element in test_tup:\n        if element in list_of_elements:\n            return False\n        else:\n            list_of_elements.append(element)\n    return True\n",
        "num_ids": 59
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    d = {}\n    for c in str1:\n        if c not in d:\n            d[c] = 1\n        else:\n            d[c] += 1\n    for c in str1:\n        if d[c] == 1:\n            return c\n    return None\n",
        "num_ids": 69
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict = {}\n    for i in str1:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    for key in dict:\n        if dict[key] == 1:\n            return key\n    return \" \"\n",
        "num_ids": 68
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict = {}\n    for i in str1:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    for i in str1:\n        if dict[i] == 1:\n            return i\n    return None\n",
        "num_ids": 68
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    if len(str1) == 0:\n        return None\n    \n    chars = [0] * 26\n    for s in str1:\n        chars[ord(s) - ord('a')] += 1\n    \n    for idx, c in enumerate(str1):\n        if chars[ord(c) - ord('a')] == 1:\n            return c\n    return None\n",
        "num_ids": 98
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_freq = {}\n    for char in str1:\n        if char not in char_freq:\n            char_freq[char] = 1\n        else:\n            char_freq[char] += 1\n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n    return None\n",
        "num_ids": 84
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    unique_dict = {}\n    for char in str1:\n        if char not in unique_dict:\n            unique_dict[char] = 1\n        else:\n            unique_dict[char] += 1\n    for char in str1:\n        if unique_dict[char] == 1:\n            return char\n",
        "num_ids": 75
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n    \n    max_count = -1\n    max_char = ''\n    for char in str1:\n        if char_count[char] > max_count:\n            max_char = char\n            max_count = char_count[char]\n",
        "num_ids": 109
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a list of characters and their counts\n    char_counts = [0]*len(str1)\n    for i in range(len(str1)):\n        char_counts[ord(str1[i])-ord('a')] += 1\n",
        "num_ids": 64
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) == 1:\n            return i\n    return None\n",
        "num_ids": 31
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict1 = {}\n    for i in str1:\n        if i not in dict1:\n            dict1[i]=1\n        else:\n            dict1[i]+=1\n    for i in str1:\n        if dict1[i]==1:\n            return i\n    return -1\n",
        "num_ids": 74
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string):\n        print('True')\n    else:\n        print('False')\ncheck_char('abc')\ncheck_char('abcd')\ncheck_char('abcdz')\n",
        "num_ids": 54
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        print(\"This is a valid character\")\n    else:\n        print(\"This is not a valid character\")\n",
        "num_ids": 39
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if (re.match(regex,string)):\n        return True\n    return False\ndef check_pair(string): \n    '''\n    Write a function to check whether the given string contains a pair of characters that are same.\n    '''\n    if len(string)<3:\n        return False\n    if string[0]==string[-1]:\n        return True\n    else:\n        return False\ndef is_upper(string): \n    '''\n    Write a function to check whether the string is upper or not.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False\ndef is_lower(string): \n    '''\n    Write a function to check whether the string is lower or not.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False\ndef is_title(string): \n    '''\n    Write a function to check whether the string is title or not.\n    '''\n    if re.match('[A-Z].*[a-z]',string):\n        return True\n    else:\n        return False\ndef is_digit(string): \n    '''\n    Write a function to check whether the string is digit or not.\n    '''\n    if re.match('[0-9]',string):\n        return True\n    else:\n        return False\ndef is_email(string): \n    '''\n    Write a function to check whether the string is a valid email or not.\n    '''\n    if re.match('^[a-zA-Z0-9]+@[a-zA-Z]+.[a-zA-Z]{1,3}$',string):\n        return True\n    else:\n        return False\ndef check_punctuation(string): \n    '''\n    Write a function to check whether the given string ends with punctuations.\n    '''\n    if string[-1] in [',','.','?','!']:\n        return True\n    else:\n        return False\ndef check_capital(string): \n    '''\n    Write a function to check whether the given string is in all upper case or not.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False\ndef check_nonalpha(string): \n    '''\n    Write a function to check whether the given string is having non-alphanumeric characters or not.\n    '''\n    if re.match('\\W',string):\n        return True\n    else:\n        return False\ndef check_even_length(string): \n    '''\n    Write a function to check whether the given string is of even length or not.\n    '''\n    if len(string)%2==0:\n        return True\n    else:\n        return False\ndef check_nondigit(string): \n    '''\n    Write a function to check whether the given string is of non-digit characters or not.\n    '''\n    if re.match('\\d',string):\n        return False\n    else:\n        return True\ndef check_vowel(string): \n    '''\n    Write a function to check whether the given string is a vowel or not.\n    '''\n    if re.match('[aeiouAEIOU]',string):\n        return True\n    else:\n        return False\ndef check_consonant(string): \n    '''\n    Write a function to check whether the given string is a consonant or not.\n    '''\n    if re.match('[bcdfghjklmnpqrstvwxz]',string):\n        return True\n    else:\n        return False\ndef check_alnum(string): \n    '''\n    Write a function to check whether the given string is alphanumeric or not.\n    '''\n    if re.match('[a-zA-Z0-9]',string):\n        return True\n    else:\n        return False\ndef is_plural(string): \n    '''\n    Write a function to check whether the given string is a plural or not.\n    '''\n    if re.match('\\d[s,d,f]',string):\n        return True\n    else:\n        return False\ndef is_integer(string): \n    '''\n    Write a function to check whether the given string is a integer or not.\n    '''\n    if re.match('[1-9][0-9]*',string):\n        return True\n    else:\n        return False\ndef check_alphanum(string): \n    '''\n    Write a function to check whether the given string is alphanumeric or not.\n    '''\n    if re.match('[a-zA-Z0-9]',string):\n        return True\n    else:\n        return False\ndef check_number(string): \n    '''\n    Write a function to check whether the given string is a number or not.\n    '''\n    if re.match('[0-9]',string):\n        return True\n    else:\n        return False\ndef check_alphabet(string): \n    '''\n    Write a function to check whether the given string is a alphabet or not.\n    '''\n    if re.match('[a-zA-Z]',string):\n        return True\n    else:\n        return False\ndef check_oneletter(string): \n    '''\n    Write a function to check whether the given string is a one letter or not.\n    '''\n    if len(string)==1:\n        return True\n    else:\n        return False\ndef check_url(string): \n    '''\n    Write a function to check whether the given string is a valid url or not.\n    '''\n    if re.match('(?:http|ftp|https)://',string):\n        return True\n    else:\n        return False\ndef check_phone(string): \n    '''\n    Write a function to check whether the given string is a valid phone number or not.\n    '''\n    if re.match('^(?:(?:\\+)?[01][0-9]{2}|(?:\\(?(?:[01][0-9]{2})?\\)?(?:[01][0-9]{2})?)(?:[0-9]{3}|[0-9]{2})|(?:(?:[0-9]{2})?[0-9]{2}|(?:\\d{3}))(?:\\)?(?:\\d{3}|\\d{2}))$',string):\n        return True\n    else:\n        return False\ndef check_ip(string): \n    '''\n    Write a function to check whether the given string is a valid ip or not.\n    '''\n    if re.match('^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[0-9]+)$',string):\n        return True\n    else:\n        return False\ndef check_date(string): \n    '''\n    Write a function to check whether the given string is a valid date or not.\n    '''\n    if re.match('\\d{1,2}[-/]\\d{1,2}[-/]\\d{4}',string):\n        return True\n    else:\n        return False\ndef check_time(string): \n    '''\n    Write a function to check whether the given string is a valid time or not.\n    '''\n    if re.match('\\d{1,2}[:][0-9]{2}',string):\n        return True\n    else:\n        return False\ndef check_space(string): \n    '''\n    Write a function to check whether the given string is a space or not.\n    '''\n    if re.match('^\\s*$',string):\n        return True\n    else:\n        return False\ndef check_split(string): \n    '''\n    Write a function to check whether the given string is a space or not.\n    ''",
        "num_ids": 21
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex,string)\n",
        "num_ids": 14
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex,string)\n",
        "num_ids": 14
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) == 0:\n        return True\n    if len(string) == 1:\n        return True\n    return True if re.match(regex, string[0]) and re.match(regex, string[-1]) else False\n",
        "num_ids": 61
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\nprint(check_char(\"abc\"))\nprint(check_char(\"abcdefg\"))\nprint(check_char(\"qwert\"))\nprint(check_char(\"qwe123\"))\nprint(check_char(\"123\"))\nprint(check_char(\"123a\"))\nprint(check_char(\"123*\"))\nprint(check_char(\"qw\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(\"qwe\"))\nprint(check_char(",
        "num_ids": 1983
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string)\n    \nprint(check_char('a'))\nprint(check_char('ab'))\nprint(check_char('abcd'))\nprint(check_char('abd'))\nprint(check_char('abc'))\nprint(check_char('abcd'))\nprint(check_char('abcde'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\nprin",
        "num_ids": 1984
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) < 2:\n        return 'Length of string is less than 2'\n    elif len(string) == 2:\n        if string[0] == string[1]:\n            return True\n        else:\n            return False\n    else:\n        if string[0] == string[-1]:\n            return True\n        else:\n            return False\ndef check_word(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same word or not.\n    '''\n    if len(string) < 3:\n        return 'Length of string is less than 3'\n    elif len(string) == 3:\n        if string[0] == string[-1]:\n            return True\n        else:\n            return False\n    else:\n        if string[0] == string[-1]:\n            return True\n        else:\n            return False\ndef check_regex(string):\n    '''\n    Write a function to check whether the given string is a regular expression or not.\n    '''\n    if len(string) < 1:\n        return 'Length of string is less than 1'\n    elif len(string) == 1:\n        if re.match(regex, string):\n            return True\n        else:\n            return False\n    else:\n        if re.match(regex, string):\n            return True\n        else:\n            return False\ndef check_both(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same word or not.\n    '''\n    if len(string) < 3:\n        return 'Length of string is less than 3'\n    elif len(string) == 3:\n        if string[0] == string[-1]:\n            return True\n        else:\n            return False\n    else:\n        if string[0] == string[-1]:\n            return True\n        else:\n            return False\ndef check_string_match(string1, string2):\n    '''\n    Write a function to check whether the first string matches the second string or not.\n    '''\n    if len(string1) < 1 or len(string2) < 1:\n        return 'Length of string is less than 1'\n    elif len(string1) < len(string2):\n        return False\n    else:\n        if string1[:len(string2)] == string2:\n            return True\n        else:\n            return False\ndef check_string_order(string1, string2):\n    '''\n    Write a function to check whether the first string is ordered or not.\n    '''\n    if len(string1) < 1 or len(string2) < 1:\n        return 'Length of string is less than 1'\n    elif len(string1) == len(string2):\n        if string1 == string2:\n            return True\n        else:\n            return False\n    else:\n        if string1 > string2:\n            return True\n        else:\n            return False\ndef check_string_order_and_regex(string1, string2):\n    '''\n    Write a function to check whether the first string is ordered and matches the second string regex or not.\n    '''\n    if len(string1) < 1 or len(string2) < 1:\n        return 'Length of string is less than 1'\n    elif len(string1) == len(string2):\n        if re.match(regex, string2):\n            if string1 == string2:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        if re.match(regex, string2):\n            if string1 > string2:\n                return True\n            else:\n                return False\n        else:\n            return False\ndef check_string_order_and_both(string1, string2):\n    '''\n    Write a function to check whether the first string is ordered and matches the second string both or not.\n    '''\n    if len(string1) < 1 or len(string2) < 1:\n        return 'Length of string is less than 1'\n    elif len(string1) == len(string2):\n        if string1 == string2:\n            return True\n        else:\n            return False\n    else:\n        if string1 > string2:\n            return True\n        else:\n            return False\ndef check_string_order_and_both_regex(string1, string2):\n    '''\n    Write a function to check whether the first string is ordered and matches the second string both regex or not.\n    '''\n    if len(string1) < 1 or len(string2) < 1:\n        return 'Length of string is less than 1'\n    elif len(string1) == len(string2):\n        if re.match(regex, string2):\n            if string1 == string2:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        if re.match(regex, string2):\n            if string1 > string2:\n                return True\n            else:\n                return False\n        else:\n            return False\ndef check_string_order_or_regex(string1, string2):\n    '''\n    Write a function to check whether the first string is ordered or matches the second string regex or not.\n    '''\n    if len(string1) < 1 or len(string2) < 1:\n        return 'Length of string is less than 1'\n    elif len(string1) == len(string2):\n        if re.match(regex, string2):\n            if string1 == string2:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        if re.match(regex, string2):\n            if string1 > string2:\n                return True\n            else:\n                return False\n        else:\n            return False\ndef check_string_order_or_both(string1, string2):\n    '''\n    Write a function to check whether the first string is ordered or matches the second string both or not.\n    '''\n    if len(string1) < 1 or len(string2) < 1:\n        return 'Length of string is less than 1'\n    elif len(string1) == len(string2):\n        if string1 == string2:\n            return True\n        else:\n            return False\n    else:\n        if string1 > string2:\n            return True\n        else:\n            return False\ndef check_string_order_or_both_regex(string1, string2):\n    '''\n    Write a function to check whether the first string is ordered or matches the second string both regex or not.\n    '''\n    if len(string1) < 1 or len(string2) < 1:\n        return 'Length of string is less than 1'\n    elif len(string1) == len(string2):\n        if re.match(regex, string2):\n            if string1 == string2:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        if re.match(regex, string2):\n            if string1 > string2:\n                return True\n            else:\n                return False\n        else:\n            return False\ndef check_string_both_or_regex(string1, string2):\n    '''\n    Write a function to check whether the first string is ordered and matches the second string both regex or not.\n    '''\n    if len(string1) < 1 or len(string2) < 1:\n        return 'Length of string is less than 1'\n    elif len(string1) == len(string2):\n        if re.match(regex, string2):\n            if string1 == string2:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        if re.match(regex, string2):\n            if string1 > string2:\n                return True\n            else:\n                return False\n        else:\n            return False\ndef check_string_both_or_both(string1, string2):\n    '''\n    Write a function to check whether the first string is ordered and matches the second string both or not.\n    '''\n    if len(string1) < 1 or len(string2) < 1:\n        return 'Length of strin",
        "num_ids": 28
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string) is None: \n        return False\n    else: \n        return True\n",
        "num_ids": 31
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b:\n        if b<c:\n            median = b\n        elif c<a:\n            median = c\n        else:\n            median = a\n    else:\n        if a<c:\n            median = a\n        elif c<b:\n            median = c\n        else:\n            median = b\n    return median\ndef medians_of_3(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b:\n        if b<c:\n            medians = [b,c]\n        elif c<a:\n            medians = [c,a]\n        else:\n            medians = [a,b]\n    else:\n        if a<c:\n            medians = [a,c]\n        elif c<b:\n            medians = [c,b]\n        else:\n            medians = [b,a]\n    return medians\ndef median_of_medians(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    medians = medians_of_3(a,b,c)\n    return median_numbers(medians[0],medians[1],medians[2])\n",
        "num_ids": 43
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a,b,c = sorted([a,b,c])\n    if len(a) == 1:\n        return a\n    elif len(a) == 2:\n        return (a[0]+a[1])/2\n    else:\n        return a[len(a)/2]\n",
        "num_ids": 72
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    l = [a,b,c]\n    l.sort()\n    return l[1]\n",
        "num_ids": 26
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    lst = [a,b,c]\n    lst.sort()\n    return lst[1]\n    \ndef max_numbers(a,b,c):\n    '''\n    Write a function to find the max of three numbers.\n    '''\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    lst = [a,b,c]\n    lst.sort()\n    return lst[2]\n    \ndef min_numbers(a,b,c):\n    '''\n    Write a function to find the min of three numbers.\n    '''\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    lst = [a,b,c]\n    lst.sort()\n    return lst[0]\n    \ndef sum_numbers(a,b,c):\n    '''\n    Write a function to find the sum of three numbers.\n    '''\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    return a+b+c\n    \ndef sort_words(text):\n    '''\n    Write a function to sort the words in a text.\n    '''\n    return sorted(text.split())\n    \ndef longest_words(words):\n    '''\n    Write a function to find the longest word in a text.\n    '''\n    longest = 0\n    for word in words:\n        if len(word) > longest:\n            longest = len(word)\n    return longest\n    \ndef count_words(text):\n    '''\n    Write a function to find the number of words in a text.\n    '''\n    return len(text.split())\n    \ndef count_characters(text):\n    '''\n    Write a function to find the number of characters in a text.\n    '''\n    return len(text)\n    \ndef sort_by_length(words):\n    '''\n    Write a function to sort the words in a text.\n    '''\n    return sorted(words,key=len)\n    \ndef is_palindrome(text):\n    '''\n    Write a function to check if a text is a palindrome or not.\n    '''\n    return text == text[::-1]\n    \ndef binary_search(text,x):\n    '''\n    Write a function to find the position of a word in a text.\n    '''\n    def binary_search_helper(text,x,left,right):\n        if left > right:\n            return -1\n        mid = (left + right)/2\n        if x > text[mid]:\n            return binary_search_helper(text,x,mid+1,right)\n        elif x < text[mid]:\n            return binary_search_helper(text,x,left,mid-1)\n        else:\n            return mid\n    \n    left = 0\n    right = len(text)-1\n    return binary_search_helper(text,x,left,right)\n    \ndef sort_by_frequency(text):\n    '''\n    Write a function to sort the words in a text.\n    '''\n    return sorted(text.split(),key=text.split().count)\n    \ndef search_string(text,pattern):\n    '''\n    Write a function to find the number of times a pattern appears in a text.\n    '''\n    return text.count(pattern)\n    \ndef find_characters(text,pattern):\n    '''\n    Write a function to find the number of times a pattern appears in a text.\n    '''\n    pattern_length = len(pattern)\n    count = 0\n    for i in range(len(text)-pattern_length+1):\n        if text[i:i+pattern_length] == pattern:\n            count += 1\n    return count\n    \ndef rotate_string(text,num):\n    '''\n    Write a function to rotate a string num places.\n    '''\n    return text[num:] + text[:num]\n    \ndef sort_sentences(text):\n    '''\n    Write a function to sort sentences in a text.\n    '''\n    words = text.split()\n    return''.join(sorted(words,key=len))\n    \ndef longest_sentence(text):\n    '''\n    Write a function to find the longest sentence in a text.\n    '''\n    return max(text.split(),key=len)\n    \ndef merge_strings(text,key):\n    '''\n    Write a function to merge the strings in a text.\n    '''\n    return text.replace(key+' ',key+'\\n')\n    \ndef is_anagram(text1,text2):\n    '''\n    Write a function to check if two texts are anagrams of each other.\n    '''\n    return sorted(text1.lower()) == sorted(text2.lower())\n    \ndef count_vowels(text):\n    '''\n    Write a function to count the vowels in a text.\n    '''\n    vowels = ['a','e','i','o','u']\n    count = 0\n    for vowel in vowels:\n        count += text.lower().count(vowel)\n    return count\n    \ndef capitalize_first(text):\n    '''\n    Write a function to capitalize the first letter of a word.\n    '''\n    return text[0].upper() + text[1:]\n    \ndef reverse_string(text):\n    '''\n    Write a function to reverse a text.\n    '''\n    return text[::-1]\n    \ndef rev_vowel(text):\n    '''\n    Write a function to reverse the vowels in a text.\n    '''\n    vowels = ['a','e','i','o','u']\n    rev_text = ''\n    for char in text:\n        if char in vowels:\n            rev_text += char\n        else:\n            rev_text += char\n    return rev_text\n    \ndef rev_word(text):\n    '''\n    Write a function to reverse the order of words in a text.\n    '''\n    lst = text.split()\n    lst.reverse()\n    return''.join(lst)\n    \ndef rotate_word(text,num):\n    '''\n    Write a function to rotate a word num places.\n    '''\n    return rotate_string(text,num)\n    \ndef rotate_string(text,num):\n    '''\n    Write a function to rotate a string num places.\n    '''\n    return rotate_string(text,num)[len(text):]+rotate_string(text,num)[:len(text)]\n    \ndef increment_string(text):\n    '''\n    Write a function to increment a string.\n    '''\n    lst = list(text)\n    lst[-1] = chr(ord(lst[-1])+1)\n    return ''.join(lst)\n    \ndef is_abecedarian(text):\n    '''\n    Write a function to check if a string is abecedarian.\n    '''\n    return all([text[i] <= text[i+1] for i in range(len(text)-1)])\n    \ndef is_balanced(text):\n    '''\n    Write a function to check if a string is balanced.\n    '''\n    brackets = {'(':')','[':']','{':'}'}\n    openings = []\n    for i in range(len(text)):\n        if text[i] in brackets.keys():\n            openings.append(text[i])\n        elif text[i] in brackets.values():\n            if len(openings) == 0:\n                return False\n            if text[i]!= brackets[openings[-1]]:\n                return False\n            del openings[-1]\n    if len(openings) == 0:\n        return True\n    else:\n        return False\n    \ndef is_palindrome_permutation(text):\n    '''\n    Write a function to check if a string is a permutation of a palindrome.\n    '''\n    return is_palindrome(text) and len(set(text)) < len(text)\n    \ndef count_vowels_permutation",
        "num_ids": 36
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if a < c:\n            return a\n        elif b > c:\n            return b\n        else:\n            return c\n    elif b > a:\n        if b < c:\n            return b\n        elif a > c:\n            return a\n        else:\n            return c\n    else:\n        if a > c:\n            return a\n        elif b < c:\n            return b\n        else:\n            return c\n",
        "num_ids": 114
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if c > b:\n            return b\n        else:\n            return a\n    else:\n        if c > b:\n            return a\n        else:\n            return c\n",
        "num_ids": 51
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # the following method doesn't work if a is the median\n    # this is because the function has to return the median of 3 numbers and\n    # this is not a simple case of sorting\n    # so for this median, we have to do all the work in the main function\n    # which is quite an unconventional way of doing things\n    # but it does the trick\n    # first we find the median\n    # then we sort the three numbers and return the middle number\n    # a,b,c are the numbers that we have to find the median\n    # the median is the middle number in the sorted list\n    # median is the number in the middle of the sorted list\n    # to find the median we take the average of two numbers\n    # we take the middle of a and b\n    # i.e. the median is the average of a and b\n    # a,b,c are the numbers that we have to find the median\n    # so we use the following to find the median\n    # median = a + b + c / 2\n    # since we have to find the median, we have to find the average of a and b\n    # we take the average of a and b\n    # i.e. a + b / 2\n    # so to find the average we have to find the average of a and b\n    # the average is a + b / 2\n    # so to find the average of a and b we do a + b / 2\n    # and this is the middle number\n    # the following function does the task\n    def get_average(a,b):\n        return (a + b) / 2\n    # a,b,c are the numbers that we have to find the median\n    # median is the number in the middle of the sorted list\n    # so we take the average of a and b\n    # i.e. the average is a + b / 2\n    # so to find the average we do a + b / 2\n    # and this is the middle number\n    # the following function does the task\n    def get_middle(a,b):\n        return (a + b) / 2\n    # now to find the median, we have to find the average of a and b\n    # so we do a + b / 2\n    # now to find the median, we have to find the average of a and b\n    # so we do a + b / 2\n    # now to find the median, we have to find the average of a and b\n    # so we do a + b / 2\n    # so to find the median, we have to find the average of a and b\n    # the average is a + b / 2\n    # so to find the median we do a + b / 2\n    # and this is the middle number\n    # the following function does the task\n    def get_median(a,b):\n        return (a + b) / 2\n    # now we have to find the median\n    # so we have to find the median\n    # so we have to find the median\n    # so we have to find the median\n    # so we have to find the median\n    # so we have to find the median\n    # so we have to find the median\n    # the median is the number in the middle of the sorted list\n    # so we take the average of a and b\n    # i.e. the average is a + b / 2\n    # so to find the median we do a + b / 2\n    # and this is the middle number\n    # the following function does the task\n    def get_median_sort(a,b,c):\n        return sorted([a,b,c])[1]\n    # this function returns the median\n    # the median is the number in the middle of the sorted list\n    if (a < b) and (b < c):\n        return get_median(a,b)\n    elif (a < c) and (c < b):\n        return get_median(a,c)\n    elif (b < a) and (a < c):\n        return get_median(b,a)\n    elif (b < c) and (c < a):\n        return get_median(b,c)\n    elif (c < a) and (a < b):\n        return get_median(c,a)\n    elif (c < b) and (b < a):\n        return get_median(c,b)\n    else:\n        return get_median_sort(a,b,c)\n    # for this median function we have to find the average of a and b\n    # so we do a + b / 2\n    # we then have to sort the numbers a,b,c\n    # the median is the number in the middle of the sorted list\n    # so we take the average of a and b\n    # i.e. the average is a + b / 2\n    # so to find the median we do a + b / 2\n    # and this is the middle number\n    # the following function does the task\n    def get_median_sort2(a,b,c):\n        return sorted([a,b,c])[1]\n    # this function returns the median\n    # the median is the number in the middle of the sorted list\n    # so we take the average of a and b\n    # i.e. the average is a + b / 2\n    # so to find the median we do a + b / 2\n    # and this is the middle number\n    # the following function does the task\n    def get_median2(a,b,c):\n        return sorted([a,b,c])[1]\n    # now we have to find the median\n    # so we have to find the median\n    # so we have to find the median\n    # so we have to find the median\n    # so we have to find the median\n    # so we have to find the median\n    # the median is the number in the middle of the sorted list\n    # so we take the average of a and b\n    # i.e. the average is a + b / 2\n    # so to find the median we do a + b / 2\n    # and this is the middle number\n    # the following function does the task\n    def get_median_sort3(a,b,c):\n        return sorted([a,b,c])[2]\n    # this function returns the median\n    # the median is the number in the middle of the sorted list\n    # so we take the average of a and b\n    # i.e. the average is a + b / 2\n    # so to find the median we do a + b / 2\n    # and this is the middle number\n    # the following function does the task\n    def get_median3(a,b,c):\n        return sorted([a,b,c])[2]\n    # now we have to find the median\n    # so we have to find the median\n    # so we have to find the median\n    # so we have to find the median\n    # so we have to find the median\n    # so we have to find the median\n    # the median is the number in the middle of the sorted list\n    # so we take the average of a and b\n    # i.e. the average is a + b / 2\n    # so to find the median we do a + b / 2\n    # and this is the middle number\n    # the following function does the task\n    def get_median_sort4(a,b,c):\n        return sorted([a,b,c])[-1]\n    # this function returns the median\n    # the median is the number in the middle of the sorted list\n    # so we take the average of a and b\n    # i.e. the average is a + b / 2\n    # so to find the median we do a + b / 2\n    # and this is the middle number\n    # the following function does the task\n    def get_median4(a,b,c):\n        return sorted([a,b,c])[-1]\n    # now we have to find the median\n    # so we have to find the median\n    # so we have to find the median\n    # so we have to find the median\n    # so we have to find the median\n    # so we have to find the median\n    # the median is the number in the middle of the sorted list\n    # so we take the average of a and b\n    # i.e. the average is a + b / 2\n    # so to find the median we do a + b / 2\n    # and this is the middle number\n    # the following function does the task\n    def get_median_sort5(a,b,c):\n        return sorted([a,b,c])[-2",
        "num_ids": 2015
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return (a+b+c)//2\n",
        "num_ids": 14
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    x = max(a,b,c)\n    y = min(a,b,c)\n    z = int((a+b+c)/2)\n    return x,y,z\n",
        "num_ids": 48
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a,b,c]\n    numbers.sort()\n    length = len(numbers)\n    if length % 2 == 0:\n        median = (numbers[length//2] + numbers[length//2 - 1]) / 2\n    else:\n        median = numbers[length//2]\n    return median\n",
        "num_ids": 82
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        result.append(sum(int(i) for i in str(num)))\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for i in nums:\n        total += sum(map(int, str(i)))\n    return total\n",
        "num_ids": 33
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    res = 0\n    for num in nums:\n        res += sum(int(i) for i in str(num))\n    return res\n",
        "num_ids": 36
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = [sum(map(int,str(nums[i]))) for i in range(len(nums))]\n    return sum_of_digits\n",
        "num_ids": 46
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return reduce(lambda a, b: a+b, map(lambda num: sum(map(int, str(num))), nums))\n    \nif __name__ == '__main__':\n    import sys\n    assert sum_of_digits([1, 2, 3, 4]) == 10\n    assert sum_of_digits([2, 7, 1, 4]) == 18\n    assert sum_of_digits([1, 2, 3]) == 6\n    assert sum_of_digits([2, 4, 6]) == 10\n    assert sum_of_digits([9, 9, 9]) == 9\n    assert sum_of_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 45\n    assert sum_of_digits([]) == 0\n    assert sum_of_digits([3, 4, 5, 7, 8]) == 22\n    assert sum_of_digits([100]) == 0\n    assert sum_of_digits([111, 222, 333, 444]) == 50\n    assert sum_of_digits([101, 202, 303, 404]) == 12\n    assert sum_of_digits([5, 7, 8, 9]) == 17\n    assert sum_of_digits([100, 1000]) == 2\n    assert sum_of_digits([100, 1000, 100, 1000]) == 4\n    assert sum_of_digits([10, 10, 10, 10, 10, 10, 10, 10]) == 22\n    print('all tests passed')",
        "num_ids": 362
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(i) for i in nums)\n",
        "num_ids": 17
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(i) for i in nums)\n",
        "num_ids": 17
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # we use a list instead of a generator expression\n    # generator expressions aren't evaluated at compile time, so it's harder to debug\n    # when we have to write a function that does math\n    # we use a list instead of a generator expression\n    # so we can loop over each element in the list\n    # and just add the elements' digits together\n    # when we are done adding the elements' digits together\n    # we can return the sum of the list\n    # in this case, we are adding the digits of each element in the list\n    # so, for example, for the list [2, 3, 6], we are adding:\n    # 2 + 3 + 6 = 9\n    # so the sum is 9\n    return sum([int(x) for x in nums])\n",
        "num_ids": 178
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    res = []\n    for n in nums:\n        s = sum(int(c) for c in str(n))\n        res.append(s)\n    return res\n",
        "num_ids": 44
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for num in nums for digit in str(num))\n",
        "num_ids": 23
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([a ^ b for a, b in zip(test_tup1, test_tup2)])\n",
        "num_ids": 30
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return ((test_tup1[0] ^ test_tup2[0]), (test_tup1[1] ^ test_tup2[1]))\n",
        "num_ids": 42
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print 'Tuple lengths not equal'\n        return None\n",
        "num_ids": 36
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n",
        "num_ids": 40
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if type(test_tup1)==tuple and type(test_tup2)==tuple:\n        xor_tup = ()\n        if len(test_tup1)==len(test_tup2):\n            for i in range(len(test_tup1)):\n                xor_tup += (test_tup1[i] ^ test_tup2[i],)\n            return xor_tup\n        else:\n            raise ValueError('Tuples must be of same length')\n    else:\n        raise TypeError('Tuples must be tuples')\n",
        "num_ids": 144
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    a,b = test_tup1\n    c,d = test_tup2\n    return (a,b,c^d)\n",
        "num_ids": 36
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([t1 ^ t2 for t1, t2 in zip(test_tup1, test_tup2)])\n",
        "num_ids": 34
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(x^y for x,y in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    #test_tup1 = (5, 10, 15, 20)\n    #test_tup2 = (10, 5, 20, 15)\n",
        "num_ids": 38
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    res = []\n    for i in range(len(test_tup1)):\n        res.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(res)\n",
        "num_ids": 53
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_list = []\n    for i in test_list:\n        if i not in freq_list:\n            freq_list.append(i)\n    return len(freq_list)\n",
        "num_ids": 51
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    #Sort the list\n    test_list.sort()\n    #Initialize the set\n    unique_set = set([])\n    #Initialize the list that will contain the number of tuples\n    freq_list = []\n    #Find the length of the list\n    length = len(test_list)\n    #Add each tuple to the set\n    for i in range(length):\n        if (test_list[i] not in unique_set):\n            unique_set.add(test_list[i])\n            freq_list.append(1)\n        else:\n            freq_list[-1] += 1\n    #Return the number of unique tuples\n    return len(unique_set)\n",
        "num_ids": 168
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    dic = {}\n    for x in test_list:\n        if x not in dic:\n            dic[x] = 1\n    return len(dic)\n",
        "num_ids": 43
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n",
        "num_ids": 13
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    \n    unique = set()\n    for tup in test_list:\n        unique.add(tup)\n    return len(unique)\n",
        "num_ids": 36
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    dict = {}\n    for i in test_list:\n        if i not in dict:\n            dict[i] = 1\n    return len(dict)\n",
        "num_ids": 39
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for i in test_list:\n        if i in freq.keys():\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n",
        "num_ids": 54
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_freq = set(test_list)\n    print len(unique_freq)\n",
        "num_ids": 25
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for pair in test_list:\n        if pair in freq.keys():\n            freq[pair] += 1\n        else:\n            freq[pair] = 1\n    return freq\n",
        "num_ids": 54
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # using dict as a hash\n    # using defaultdict as a hash\n    # using Counter as a hash\n    # using set as a hash\n    # using list as a hash\n    # using tuple as a hash\n    # using counter as a hash\n    from collections import defaultdict\n    from collections import Counter\n    from collections import OrderedDict\n    from collections import Counter\n    from collections import OrderedDict\n    from collections import Counter\n    return(len(set(test_list)))\n",
        "num_ids": 114
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    res = [test_tup1[i] + test_tup2[i] for i in range(len(test_tup1))]\n    return tuple(res)\n",
        "num_ids": 45
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        l = len(test_tup1)\n        s = len(test_tup2)\n    else:\n        l = len(test_tup2)\n        s = len(test_tup1)\n    d = {}\n    for i in range(0, s):\n        d[i] = []\n        for j in range(0, l):\n            d[i].append(test_tup1[i][j] + test_tup2[i][j])\n    return d\n",
        "num_ids": 142
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple([a + b for a,b in zip(test_tup1, test_tup2)])\n",
        "num_ids": 30
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    #print test_tup1\n    #print test_tup2\n    res_tup = ()\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            #print test_tup1[i], test_tup2[i]\n            res_tup += (test_tup1[i] + test_tup2[i], )\n    return res_tup\n",
        "num_ids": 117
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    len_tup1 = len(test_tup1)\n    len_tup2 = len(test_tup2)\n    if len_tup1!= len_tup2:\n        print \"Error: Length of the given tuples is not same\"\n    else:\n        for i in xrange(len_tup1):\n            test_tup1[i] = test_tup1[i] + test_tup2[i]\n        return test_tup1\n",
        "num_ids": 120
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    output = (0, 0, 0)\n    for i in range(len(test_tup1)):\n        output[i] = test_tup1[i] + test_tup2[i]\n    return output\n",
        "num_ids": 57
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] + test_tup2[i],)\n    return new_tup\n",
        "num_ids": 59
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    add_tup = ()\n    for i in xrange(len(test_tup1)):\n        add_tup = add_tup + (test_tup1[i] + test_tup2[i],)\n    return add_tup\n",
        "num_ids": 65
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # check that both tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        return False\n",
        "num_ids": 39
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    final_tup = ()\n    for i in range(len(test_tup1)):\n        temp = (test_tup1[i] + test_tup2[i])\n        final_tup = final_tup + (temp,)\n    return final_tup\n    \ndef add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    final_tup = ()\n    for i in range(len(test_tup1)):\n        temp = (test_tup1[i] + test_tup2[i])\n        final_tup = final_tup + (temp,)\n    return final_tup\n    \ndef add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    final_tup = ()\n    for i in range(len(test_tup1)):\n        temp = (test_tup1[i] + test_tup2[i])\n        final_tup = final_tup + (temp,)\n    return final_tup\n    \ndef add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    final_tup = ()\n    for i in range(len(test_tup1)):\n        temp = (test_tup1[i] + test_tup2[i])\n        final_tup = final_tup + (temp,)\n    return final_tup\n    \ndef add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    final_tup = ()\n    for i in range(len(test_tup1)):\n        temp = (test_tup1[i] + test_tup2[i])\n        final_tup = final_tup + (temp,)\n    return final_tup\n    \ndef add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    final_tup = ()\n    for i in range(len(test_tup1)):\n        temp = (test_tup1[i] + test_tup2[i])\n        final_tup = final_tup + (temp,)\n    return final_tup\n    \ndef add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    final_tup = ()\n    for i in range(len(test_tup1)):\n        temp = (test_tup1[i] + test_tup2[i])\n        final_tup = final_tup + (temp,)\n    return final_tup\n    \ndef add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    final_tup = ()\n    for i in range(len(test_tup1)):\n        temp = (test_tup1[i] + test_tup2[i])\n        final_tup = final_tup + (temp,)\n    return final_tup\n    \ndef add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    final_tup = ()\n    for i in range(len(test_tup1)):\n        temp = (test_tup1[i] + test_tup2[i])\n        final_tup = final_tup + (temp,)\n    return final_tup\n    \ndef add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    final_tup = ()\n    for i in range(len(test_tup1)):\n        temp = (test_tup1[i] + test_tup2[i])\n        final_tup = final_tup + (temp,)\n    return final_tup\n    \ndef add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    final_tup = ()\n    for i in range(len(test_tup1)):\n        temp = (test_tup1[i] + test_tup2[i])\n        final_tup = final_tup + (temp,)\n    return final_tup\n    \ndef add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    final_tup = ()\n    for i in range(len(test_tup1)):\n        temp = (test_tup1[i] + test_tup2[i])\n        final_tup = final_tup + (temp,)\n    return final_tup\n    \ndef add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    final_tup = ()\n    for i in range(len(test_tup1)):\n        temp = (test_tup1[i] + test_tup2[i])\n        final_tup = final_tup + (temp,)\n    return final_tup\n    \ndef add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    final_tup = ()\n    for i in range(len(test_tup1)):\n        temp = (test_tup1[i] + test_tup2[i])\n        final_tup = final_tup + (temp,)\n    return final_tup\n    \ndef add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    final_tup = ()\n    for i in range(len(test_tup1)):\n        temp = (test_tup1[i] + test_tup2[i])\n        final_tup = final_tup + (temp,)\n    return final_tup\n    \ndef add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    final_tup = ()\n    for i in range(len(test_tup1)):\n        temp = (test_tup1[i] + test_tup2[i])\n        final_tup = final_tup + (temp,)\n    return final_tup\n    \ndef add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    final_tup = ()\n    for i in range(len(test_tup1)):\n        temp = (test_tup1[i] + test_tup2[i])\n        final_tup = final_tup + (temp,)",
        "num_ids": 62
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a<b):\n        return a\n    else:\n        return b\n",
        "num_ids": 22
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        return a\n    else:\n        return b\n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        return a\n    else:\n        return b\n    \ndef is_even(n):\n    '''\n    Write a python function to check if a number is even or odd.\n    '''\n    if(n%2==0):\n        return True\n    else:\n        return False\n        \ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if(n==2):\n        return True\n    elif(n%2==0):\n        return False\n    else:\n        for i in range(3,int(n**0.5)+1,2):\n            if(n%i==0):\n                return False\n    return True\n    \ndef is_perfect(n):\n    '''\n    Write a python function to check if a number is perfect or not.\n    '''\n    if(n==2*sum(set(list(str(n))))):\n        return True\n    else:\n        return False\n        \ndef is_armstrong(n):\n    '''\n    Write a python function to check if a number is armstrong or not.\n    '''\n    temp=n\n    sum=0\n    while(temp>0):\n        digit=temp%10\n        sum=sum+digit**3\n        temp//=10\n    if(n==sum):\n        return True\n    else:\n        return False\n        \ndef is_palindrome(n):\n    '''\n    Write a python function to check if a number is palindrome or not.\n    '''\n    temp=n\n    rev=0\n    while(n>0):\n        rem=n%10\n        rev=rev*10+rem\n        n//=10\n    if(temp==rev):\n        return True\n    else:\n        return False\n        \ndef is_anagram(a,b):\n    '''\n    Write a python function to check if two words are anagram or not.\n    '''\n    if(sorted(a)==sorted(b)):\n        return True\n    else:\n        return False\n        \ndef is_anagram_2(a,b):\n    '''\n    Write a python function to check if two words are anagram or not.\n    '''\n    temp1=sorted(a)\n    temp2=sorted(b)\n    if(temp1==temp2):\n        return True\n    else:\n        return False\n        \ndef is_anagram_3(a,b):\n    '''\n    Write a python function to check if two words are anagram or not.\n    '''\n    temp1=list(a)\n    temp2=list(b)\n    temp1.sort()\n    temp2.sort()\n    if(temp1==temp2):\n        return True\n    else:\n        return False\n        \ndef is_anagram_4(a,b):\n    '''\n    Write a python function to check if two words are anagram or not.\n    '''\n    temp1=list(a)\n    temp2=list(b)\n    temp1.sort()\n    temp2.sort()\n    if(temp1==temp2):\n        return True\n    else:\n        return False\n        \ndef is_anagram_5(a,b):\n    '''\n    Write a python function to check if two words are anagram or not.\n    '''\n    temp1=a\n    temp2=b\n    temp1=list(temp1)\n    temp2=list(temp2)\n    temp1.sort()\n    temp2.sort()\n    if(temp1==temp2):\n        return True\n    else:\n        return False\n        \ndef is_anagram_6(a,b):\n    '''\n    Write a python function to check if two words are anagram or not.\n    '''\n    temp1=a\n    temp2=b\n    temp1=list(temp1)\n    temp2=list(temp2)\n    temp1.sort()\n    temp2.sort()\n    if(temp1==temp2):\n        return True\n    else:\n        return False\n        \ndef is_anagram_7(a,b):\n    '''\n    Write a python function to check if two words are anagram or not.\n    '''\n    temp1=a\n    temp2=b\n    if(sorted(temp1)==sorted(temp2)):\n        return True\n    else:\n        return False\n        \ndef is_anagram_8(a,b):\n    '''\n    Write a python function to check if two words are anagram or not.\n    '''\n    if(len(a)!=len(b)):\n        return False\n    else:\n        temp1=sorted(a)\n        temp2=sorted(b)\n        if(temp1==temp2):\n            return True\n        else:\n            return False\n            \ndef is_anagram_9(a,b):\n    '''\n    Write a python function to check if two words are anagram or not.\n    '''\n    if(len(a)!=len(b)):\n        return False\n    else:\n        temp1=a\n        temp2=b\n        temp1=list(temp1)\n        temp2=list(temp2)\n        temp1.sort()\n        temp2.sort()\n        if(temp1==temp2):\n            return True\n        else:\n            return False\n            \ndef is_anagram_10(a,b):\n    '''\n    Write a python function to check if two words are anagram or not.\n    '''\n    if(len(a)!=len(b)):\n        return False\n    else:\n        temp1=a\n        temp2=b\n        temp1=list(temp1)\n        temp2=list(temp2)\n        temp1.sort()\n        temp2.sort()\n        if(temp1==temp2):\n            return True\n        else:\n            return False\n            \ndef is_anagram_11(a,b):\n    '''\n    Write a python function to check if two words are anagram or not.\n    '''\n    if(len(a)!=len(b)):\n        return False\n    else:\n        temp1=a\n        temp2=b\n        if(temp1==temp2):\n            return True\n        else:\n            return False\n            \ndef is_anagram_12(a,b):\n    '''\n    Write a python function to check if two words are anagram or not.\n    '''\n    if(len(a)!=len(b)):\n        return False\n    else:\n        temp1=a\n        temp2=b\n        if(temp1==temp2):\n            return True\n        else:\n            return False\n            \ndef is_anagram_13(a,b):\n    '''\n    Write a python function to check if two words are anagram or not.\n    '''\n    if(len(a)!=len(b)):\n        return False\n    else:\n        temp1=a\n        temp2=b\n        temp1=list(temp1)\n        temp2=list(temp2)\n        temp1.sort()\n        temp2.sort()\n        if(temp1==temp2):\n            return True\n        else:\n            return False\n            \ndef is_anagram_14(a,b):\n    '''\n    Write a python function to check if two words are anagram or not.\n    '''\n    if(len(a)!=len(b)):\n        return False\n    else:\n        temp1=a\n        temp2=b\n        temp1=list(temp1)\n        temp2=list(temp2)\n        temp1.sort()\n        temp2.sort()\n        if(temp1==temp2):\n            return True\n        else:\n            return False\n            \ndef is_anagram_15(a,b):\n    '''\n    Write a python function to check if two words are anagram or not.\n    '''\n    if(len(a)!=len(b)):\n        return False\n    else:\n        temp1=a\n        temp2=b\n        i",
        "num_ids": 38
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        print \"minimum of \",a, \" and \",b,\" is \",b\n    else:\n        print \"minimum of \",a, \" and \",b,\" is \",a\nminimum(5,10)\nminimum(10,5)\nminimum(9,9)\n",
        "num_ids": 68
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        print(a)\n    else:\n        print(b)\n",
        "num_ids": 25
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    return b\n",
        "num_ids": 17
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        print('{} is in {}'.format(tuple1,tuplex))\n    else:\n        print('{} is not in {}'.format(tuple1,tuplex))\n        \ndef check_tuplex2(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        print('{} is in {}'.format(tuple1,tuplex))\n    else:\n        return False\n",
        "num_ids": 40
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element == tuple1:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuplex)!= type(()):\n        return False\n    elif tuplex == tuple1:\n        return True\n    else:\n        return False\n    \n    \ndef check_tuple(tuple1, tuple2):\n    '''\n    Write a function to check if two tuples are equal.\n    '''\n    if type(tuple2)!= type(()):\n        return False\n    elif tuple2 == tuple1:\n        return True\n    else:\n        return False\n",
        "num_ids": 42
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if (tuple1 in tuplex):\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(0,len(tuplex)): \n        if tuplex[i] == tuple1: \n            return i \n    return -1 \n",
        "num_ids": 44
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n    \ndef test_tuplex():\n    tuplex = (1,2,3,4)\n    tuple1 = (1,3)\n    tuple2 = (4,)\n    print(check_tuplex(tuplex,tuple1))\n    print(check_tuplex(tuplex,tuple2))\n",
        "num_ids": 108
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    \n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n        \nprint(check_tuplex((1,2),(1,2,3,4)))\nprint(check_tuplex((1,2,3),(1,2,3,4)))\nprint(check_tuplex((1,3,5),(1,2,3,4)))\nprint(check_tuplex((2,3),(1,2,3,4)))\nprint(check_tuplex((4,5),(1,2,3,4)))\nprint(check_tuplex((2,5),(1,2,3,4)))",
        "num_ids": 163
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element == tuple1:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x & 1) == 0: \n        return \"Even\"\n    else: \n        return \"Odd\"\n",
        "num_ids": 32
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x % 2\n",
        "num_ids": 8
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    #we need to find whether a given number is divisible by 2\n    #by running the function like \n    #if (find_Parity(num) == True):\n    #    print(\"even\")\n    #else:\n    #    print(\"odd\")\n    \n    return x % 2 == 0\n",
        "num_ids": 75
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x & 1\n",
        "num_ids": 8
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 23
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x=abs(x)\n    #if x is even then return 0\n    if x%2==0:\n        return 0\n    #if x is odd then return 1\n    else:\n        return 1\n",
        "num_ids": 51
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return x\n    else:\n        return 0\n    \ndef find_Parity_for_N_group(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return x\n    else:\n        return 0\n",
        "num_ids": 23
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x&1\n",
        "num_ids": 8
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x%2)\n    \n    \ndef find_count_of_set_bits(x):\n    '''\n    Write a python function to find the count of set bits in a given number.\n    '''\n    return (bin(x).count('1'))\n    \ndef find_smallest_number(x):\n    '''\n    Write a python function to find the smallest number\n    '''\n    return (min(x))\n    \ndef find_largest_number(x):\n    '''\n    Write a python function to find the largest number\n    '''\n    return (max(x))\n    \ndef count_number_of_digit(x):\n    '''\n    Write a python function to count the number of digits in a given number.\n    '''\n    return (len(str(x)))\n    \ndef find_smallest_digit(x):\n    '''\n    Write a python function to find the smallest digit in a given number.\n    '''\n    return (min(str(x)))\n    \ndef find_largest_digit(x):\n    '''\n    Write a python function to find the largest digit in a given number.\n    '''\n    return (max(str(x)))\n    \ndef find_prime(x):\n    '''\n    Write a python function to find whether the given number is prime or not.\n    '''\n    return (x>1 and all(x%i for i in range(2,x)))\n    \ndef find_factorial(x):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    return (reduce(lambda x,y:x*y,range(1,x+1)))\n    \ndef find_gcd(x,y):\n    '''\n    Write a python function to find the greatest common divisor of two given numbers.\n    '''\n    return (gcd(x,y))\n    \ndef find_lcm(x,y):\n    '''\n    Write a python function to find the lowest common multiple of two given numbers.\n    '''\n    return (lcm(x,y))\n    \ndef find_xor(x,y):\n    '''\n    Write a python function to find the xor of two given numbers.\n    '''\n    return (x^y)\n    \ndef find_factors(x):\n    '''\n    Write a python function to find the factors of a given number.\n    '''\n    return (factors(x))\n    \ndef find_is_prime(x):\n    '''\n    Write a python function to find whether a given number is prime or not.\n    '''\n    return (find_prime(x))\n    \ndef find_is_not_prime(x):\n    '''\n    Write a python function to find whether a given number is not prime or not.\n    '''\n    return (find_factors(x)==1)\n    \ndef find_is_perfect(x):\n    '''\n    Write a python function to find whether a given number is perfect or not.\n    '''\n    return (find_factors(x)==2)\n    \ndef find_is_perfect(x):\n    '''\n    Write a python function to find whether a given number is perfect or not.\n    '''\n    return (find_factors(x)==2)\n    \ndef find_is_abundant(x):\n    '''\n    Write a python function to find whether a given number is abundant or not.\n    '''\n    return (find_factors(x)>2)\n    \ndef find_is_abundant(x):\n    '''\n    Write a python function to find whether a given number is abundant or not.\n    '''\n    return (find_factors(x)>2)\n    \ndef find_is_sosu(x):\n    '''\n    Write a python function to find whether a given number is sosu or not.\n    '''\n    return (find_factors(x)==1 and x>1)\n    \ndef find_is_sosu(x):\n    '''\n    Write a python function to find whether a given number is sosu or not.\n    '''\n    return (find_factors(x)==1 and x>1)\n    \ndef find_is_square(x):\n    '''\n    Write a python function to find whether a given number is square or not.\n    '''\n    return (find_factors(x)==2)\n    \ndef find_is_square(x):\n    '''\n    Write a python function to find whether a given number is square or not.\n    '''\n    return (find_factors(x)==2)\n    \ndef find_is_integer(x):\n    '''\n    Write a python function to find whether a given number is integer or not.\n    '''\n    return (find_factors(x)==1)\n    \ndef find_is_integer(x):\n    '''\n    Write a python function to find whether a given number is integer or not.\n    '''\n    return (find_factors(x)==1)\n    \ndef find_is_hcf(x,y):\n    '''\n    Write a python function to find whether a given number is high common factor or not.\n    '''\n    return (gcd(x,y)==1)\n    \ndef find_is_hcf(x,y):\n    '''\n    Write a python function to find whether a given number is high common factor or not.\n    '''\n    return (gcd(x,y)==1)\n    \ndef find_is_lcm(x,y):\n    '''\n    Write a python function to find whether a given number is low common multiple or not.\n    '''\n    return (lcm(x,y)==1)\n    \ndef find_is_lcm(x,y):\n    '''\n    Write a python function to find whether a given number is low common multiple or not.\n    '''\n    return (lcm(x,y)==1)\n    \ndef find_is_lcm(x,y):\n    '''\n    Write a python function to find whether a given number is low common multiple or not.\n    '''\n    return (lcm(x,y)==1)\n    \ndef find_is_lcm(x,y):\n    '''\n    Write a python function to find whether a given number is low common multiple or not.\n    '''\n    return (lcm(x,y)==1)\n    \ndef find_is_lcm(x,y):\n    '''\n    Write a python function to find whether a given number is low common multiple or not.\n    '''\n    return (lcm(x,y)==1)\n    \ndef find_is_lcm(x,y):\n    '''\n    Write a python function to find whether a given number is low common multiple or not.\n    '''\n    return (lcm(x,y)==1)\n    \ndef find_is_lcm(x,y):\n    '''\n    Write a python function to find whether a given number is low common multiple or not.\n    '''\n    return (lcm(x,y)==1)\n    \ndef find_is_lcm(x,y):\n    '''\n    Write a python function to find whether a given number is low common multiple or not.\n    '''\n    return (lcm(x,y)==1)\n    \ndef find_is_lcm(x,y):\n    '''\n    Write a python function to find whether a given number is low common multiple or not.\n    '''\n    return (lcm(x,y)==1)\n    \ndef find_is_lcm(x,y):\n    '''\n    Write a python function to find whether a given number is low common multiple or not.\n    '''\n    return (lcm(x,y)==1)\n    \ndef find_is_lcm(x,y):\n    '''\n    Write a python function to find whether a given number is low common multiple or not.\n    '''\n    return (lcm(x,y)==1)\n    \ndef find_is_lcm(x,y):\n    '''\n    Write a python function to find whether a given number is low common multiple or not.\n    '''\n    return (lcm(x,y)==1)\n    \ndef find_is",
        "num_ids": 22
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x & 1):\n        return \"odd\"\n    else:\n        return \"even\"\n",
        "num_ids": 26
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if not n:\n        return\n    s = sorted(str(n))\n    for i, x in enumerate(s):\n        if i == 0:\n            continue\n        if x > s[i-1]:\n            s[i-1], s[i] = s[i], s[i-1]\n            break\n    return int(''.join(s))\n",
        "num_ids": 90
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    str_n = str(n)\n    n_list = list(str_n)\n    i = 0\n    while i < len(n_list) - 1:\n        if n_list[i] < n_list[i+1]:\n            j = len(n_list) - 1\n            while j > i:\n                if n_list[j] > n_list[i]:\n                    n_list[i],n_list[j] = n_list[j],n_list[i]\n                    break\n                j -= 1\n        i += 1\n    str_n = ''.join(n_list)\n    return int(str_n)\n",
        "num_ids": 159
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def find_nearest_smaller(n):\n        return int(str(n)[::-1])\n    def rearrange_smaller(n):\n        digits = [int(i) for i in str(n)]\n        smallest = min(digits)\n        for i in xrange(len(digits)):\n            if digits[i]!= smallest:\n                smallest_idx = digits.index(smallest)\n                digits[i], digits[smallest_idx] = digits[smallest_idx], digits[i]\n                digits[smallest_idx+1:] = sorted(digits[smallest_idx+1:])\n                return int(''.join(map(str, digits)))\n        return n\n    if n <= 10:\n        return n\n    if n % 10 == 0:\n        return rearrange_smaller(n + 1)\n    return rearrange_smaller(n - find_nearest_smaller(n))\n",
        "num_ids": 234
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    nums = str(n)\n    nums_len = len(nums)\n    i = nums_len - 1\n    while i > 0 and nums[i] <= nums[i-1]:\n        i -= 1\n    if i <= 0:\n        return -1\n    j = i - 1\n    while nums[j] > nums[i-1]:\n        j -= 1\n    nums = nums[:i-1] + nums[j] + nums[i:]\n    return int(nums)\n",
        "num_ids": 131
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n<10:\n        return -1\n    n=list(str(n))\n    for i in range(len(n)-1,0,-1):\n        if n[i]>n[i-1]:\n            for j in range(i-1,-1,-1):\n                if n[j]>n[i-1]:\n                    n[j],n[i-1]=n[i-1],n[j]\n                    break\n            break\n    else:\n        for j in range(0,len(n)):\n            if n[j]>n[j-1]:\n                n[j-1],n[j]=n[j],n[j-1]\n                break\n    return int(''.join(n))\n",
        "num_ids": 179
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    result = []\n    while n > 0:\n        result.append(n % 10)\n        n /= 10\n    result = result[::-1]\n    idx = 0\n    for i in range(len(result)):\n        if result[i] < result[idx]:\n            result[idx], result[i] = result[i], result[idx]\n        idx += 1\n    return result\n",
        "num_ids": 102
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    str_n = str(n)\n    l = len(str_n)\n    if l <= 1:\n        return n\n    if l == 2:\n        if int(str_n[0]) < int(str_n[1]):\n            return int(str_n[1]+str_n[0])\n        else:\n            return int(str_n[0]+str_n[1])\n",
        "num_ids": 99
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    ls = len(n)\n    l1 = ls - 1\n    l2 = ls - 2\n    n = sorted(n)\n    i = 0\n    while i < l1:\n        if n[i] < n[i+1]:\n            del n[i+1]\n            n.insert(i, n[l1])\n            l1 = ls - 1\n            l2 = ls - 2\n            del n[-1]\n            l1 = ls - 2\n        else:\n            i += 1\n    return int(''.join(n))\n    \ndef rearrange_smaller(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    ls = len(n)\n    l1 = ls - 1\n    l2 = ls - 2\n    n = sorted(n)\n    i = 0\n    while i < l2:\n        if n[i] > n[i+1]:\n            del n[i]\n            n.insert(i, n[l2])\n            l1 = ls - 1\n            l2 = ls - 2\n            del n[-1]\n            l1 = ls - 2\n        else:\n            i += 1\n    return int(''.join(n))\n",
        "num_ids": 140
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    l = [int(c) for c in str(n)]\n    for i in reversed(range(len(l))):\n        for j in reversed(range(i)):\n            if l[j] < l[i]:\n                l[j], l[i] = l[i], l[j]\n                break\n    return int(''.join([str(x) for x in l]))\n",
        "num_ids": 96
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    string = str(n)\n    length = len(string)\n    if length == 1:\n        return n\n    left, right = string[0], string[-1]\n    for i in range(length-1, 0, -1):\n        if string[i] > left:\n            left = string[i]\n            break\n    for j in range(length-1, 0, -1):\n        if string[j] > right:\n            right = string[j]\n            break\n    new = left + right\n    new_list = [int(x) for x in new]\n    new_list[0], new_list[-1] = new_list[-1], new_list[0]\n    return int(''.join(str(x) for x in new_list))\n",
        "num_ids": 189
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) < k:\n        return None\n",
        "num_ids": 18
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    h = []\n    if k < 0:\n        return None\n    if k == 0:\n        return []\n    for i in range(0, len(nums1)):\n        for j in range(0, len(nums2)):\n            heapq.heappush(h, (nums1[i] + nums2[j], [i, j]))\n            #if len(h) > k:\n            #    heapq.heappop(h)\n    ans = []\n    for i in range(k):\n        ans.append(heapq.heappop(h)[1])\n    return ans\n",
        "num_ids": 154
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    a = [(x,y) for x,y in zip(nums1, nums2)]\n    heapq.heapify(a)\n    res = []\n    i = 0\n    while i < k:\n        res.append(heapq.heappop(a))\n        i += 1\n    return res\n",
        "num_ids": 80
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k == 0:\n        return []\n    if not nums1 or not nums2:\n        return []\n    \n    k_pairs = []\n    heapq.heapify(k_pairs)\n    if k > len(nums1) * len(nums2):\n        return []\n    \n    i, j = 0, 0\n    while i < len(nums1) and j < len(nums2):\n        heapq.heappush(k_pairs, (nums1[i] + nums2[j], [nums1[i], nums2[j]]))\n        if len(k_pairs) == k:\n            return [heapq.heappop(k_pairs)[1]]\n        if nums1[i] < nums2[j]:\n            i += 1\n        else:\n            j += 1\n",
        "num_ids": 213
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) < len(nums2):\n        nums1, nums2 = nums2, nums1\n    result = []\n    for i in range(len(nums1)):\n        heapq.heappush(result, (nums1[i] + nums2[0], (i, 0)))\n    index = 0\n    while index < k:\n        if index >= len(nums1):\n            break\n        current = heapq.heappop(result)\n        index += 1\n        heapq.heappush(result, (nums1[index] + nums2[0], (index, 0)))\n    return result\n",
        "num_ids": 164
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n    if k > len(nums1)*len(nums2):\n        return []\n    pairs = []\n    i, j = 0, 0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] < nums2[j]:\n            pairs.append([nums1[i], nums2[j]])\n            i += 1\n            if len(pairs) == k:\n                return pairs\n        else:\n            pairs.append([nums2[j], nums1[i]])\n            j += 1\n            if len(pairs) == k:\n                return pairs\n    while i < len(nums1):\n        pairs.append([nums1[i], None])\n        i += 1\n        if len(pairs) == k:\n            return pairs\n    while j < len(nums2):\n        pairs.append([None, nums2[j]])\n        j += 1\n        if len(pairs) == k:\n            return pairs\n    return pairs\n",
        "num_ids": 272
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2: return None\n    if k < 1 or k > len(nums1) * len(nums2): return None\n    res = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            res.append([nums1[i], nums2[j]])\n    return res[k - 1]\ndef k_smallest_pairs_2(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2: return None\n    if k < 1 or k > len(nums1) * len(nums2): return None\n    res = []\n    heap = [(nums1[0] + nums2[0], 0, 0)]\n    visited = set()\n    while heap:\n        val, i, j = heapq.heappop(heap)\n        if (i, j) not in visited:\n            visited.add((i, j))\n            res.append([nums1[i], nums2[j]])\n            if i < len(nums1) - 1:\n                heapq.heappush(heap, (nums1[i + 1] + nums2[j], i + 1, j))\n            if j < len(nums2) - 1:\n                heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res[k - 1]\ndef k_smallest_pairs_3(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2: return None\n    if k < 1 or k > len(nums1) * len(nums2): return None\n    res = []\n    heap = []\n    visited = set()\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (nums1[i], i))\n    for j in range(len(nums2)):\n        if len(heap) < k:\n            heapq.heappush(heap, (nums2[j], j))\n            visited.add((j, j))\n        else:\n            if nums2[j] < heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (nums2[j], j))\n    while heap:\n        res.append([heap[0][1], heap[0][0]])\n        heapq.heappop(heap)\n    return res\ndef k_smallest_pairs_4(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2: return None\n    if k < 1 or k > len(nums1) * len(nums2): return None\n    res = []\n    heap = []\n    visited = set()\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (nums1[i], i))\n    for j in range(len(nums2)):\n        if len(heap) < k:\n            heapq.heappush(heap, (nums2[j], j))\n            visited.add((j, j))\n        else:\n            if nums2[j] < heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (nums2[j], j))\n    while heap:\n        res.append([heap[0][1], heap[0][0]])\n        heapq.heappop(heap)\n    return res\ndef k_smallest_pairs_5(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2: return None\n    if k < 1 or k > len(nums1) * len(nums2): return None\n    res = []\n    heap = []\n    visited = set()\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (nums1[i], i))\n    for j in range(len(nums2)):\n        if len(heap) < k:\n            heapq.heappush(heap, (nums2[j], j))\n            visited.add((j, j))\n        else:\n            if nums2[j] < heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (nums2[j], j))\n    while heap:\n        res.append([heap[0][1], heap[0][0]])\n        heapq.heappop(heap)\n    return res\ndef k_smallest_pairs_6(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2: return None\n    if k < 1 or k > len(nums1) * len(nums2): return None\n    res = []\n    heap = []\n    visited = set()\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (nums1[i], i))\n    for j in range(len(nums2)):\n        if len(heap) < k:\n            heapq.heappush(heap, (nums2[j], j))\n            visited.add((j, j))\n        else:\n            if nums2[j] < heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (nums2[j], j))\n    while heap:\n        res.append([heap[0][1], heap[0][0]])\n        heapq.heappop(heap)\n    return res\ndef k_smallest_pairs_7(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2: return None\n    if k < 1 or k > len(nums1) * len(nums2): return None\n    res = []\n    heap = []\n    visited = set()\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (nums1[i], i))\n    for j in range(len(nums2)):\n        if len(heap) < k:\n            heapq.heappush(heap, (nums2[j], j))\n            visited.add((j, j))\n        else:\n            if nums2[j] < heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (nums2[j], j))\n    while heap:\n        res.append([heap[0][1], heap[0][0]])\n        heapq.heappop(heap)\n    return res\ndef k_smallest_pairs_8(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array an",
        "num_ids": 23
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(pq) < k:\n                heapq.heappush(pq, (nums1[i] + nums2[j], i, j))\n            elif (nums1[i] + nums2[j]) < pq[0][0]:\n                heapq.heappop(pq)\n                heapq.heappush(pq, (nums1[i] + nums2[j], i, j))\n",
        "num_ids": 148
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n    if not k:\n        return []\n    res = []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i]+nums2[j], nums1[i], nums2[j]))\n    while k>0:\n        res.append(heapq.heappop(heap))\n        k-=1\n    return res\n",
        "num_ids": 141
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k > len(nums1) * len(nums2):\n        raise ValueError('too big')\n    if k == 0:\n        return []\n    pairs = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(pairs, (nums1[i] + nums2[j], i, j))\n    res = []\n    for _ in range(k):\n        res.append(heapq.heappop(pairs))\n    return res\n",
        "num_ids": 140
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort(key = lambda x:x[1])\n    result = list1[0][1] * list1[1][1]\n    return result\n",
        "num_ids": 41
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return None\n    if len(list1) == 1:\n        return list1[0][0] * list1[0][1]\n    prod = list1[0][0] * list1[0][1]\n    for i in range(len(list1)-1):\n        if list1[i][1] < list1[i+1][0]:\n            continue\n        for j in range(i+1,len(list1)):\n            if list1[i][0] > list1[j][1]:\n                continue\n            prod = min(prod,list1[i][0] * list1[j][1])\n    return prod\n",
        "num_ids": 170
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort(key=lambda x:x[0]*x[1])\n    return list1[0][0]*list1[0][1]\n",
        "num_ids": 41
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 10000000000\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!=j:\n                product = list1[i][0]*list1[j][0]\n                if product < min_product:\n                    min_product = product\n    return min_product\n",
        "num_ids": 85
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif len(list1) == 1:\n        return list1[0][0] * list1[0][1]\n    else:\n        list2 = []\n        for i in xrange(len(list1)):\n            list2.append(list1[i][0] * list1[i][1])\n        return min(list2)\n",
        "num_ids": 101
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    smallest_product = 1\n    for (x,y) in list1:\n        smallest_product = smallest_product * min(x,y)\n    return smallest_product\n",
        "num_ids": 45
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    import itertools\n",
        "num_ids": 8
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 1\n    for i in list1:\n        for j in list1:\n            if i[0] * j[0] < min_product:\n                min_product = i[0] * j[0]\n            if i[1] * j[1] < min_product:\n                min_product = i[1] * j[1]\n            if i[0] * j[1] < min_product:\n                min_product = i[0] * j[1]\n            if i[1] * j[0] < min_product:\n                min_product = i[1] * j[0]\n    return min_product\n",
        "num_ids": 159
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    mprod = list1[0]\n    for tup in list1:\n        mprod = min(mprod, tup[0] * tup[1])\n    return mprod\n",
        "num_ids": 51
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = 1\n    for tuple1 in list1:\n        for tuple2 in list1:\n            if tuple1!= tuple2:\n                min_prod = min(min_prod, tuple1[0]*tuple2[1])\n    return min_prod\n",
        "num_ids": 71
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    \n    minimum = None\n    \n    for x in listval:\n        if minimum == None or x < minimum:\n            minimum = x\n            \n    return minimum\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    \n    maximum = None\n    \n    for x in listval:\n        if maximum == None or x > maximum:\n            maximum = x\n            \n    return maximum\n",
        "num_ids": 41
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 0\n    else:\n        return min(listval)\n",
        "num_ids": 29
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for i in range(1, len(listval)):\n        if minval > listval[i]:\n            minval = listval[i]\n    return minval\n",
        "num_ids": 53
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 1:\n        return listval[0]\n    else:\n        return min(listval[0],min_val(listval[1:]))\n",
        "num_ids": 45
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        min_val = listval[0]\n        for i in range(1,len(listval)):\n            if listval[i] < min_val:\n                min_val = listval[i]\n        return min_val\n",
        "num_ids": 77
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    #Initialize min as first value in list\n    min = listval[0]\n    #Loop through list of values\n    for value in listval:\n        #If current value is less than min, update min\n        if value < min:\n            min = value\n    #Return min\n    return min\n",
        "num_ids": 72
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if listval == []:\n        return None\n    else:\n        return min(listval)\n    ",
        "num_ids": 27
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 0\n    return min(listval)\n",
        "num_ids": 25
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in listval:\n        if i < min:\n            min = i\n    return min\n",
        "num_ids": 35
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Your code here\n    return min(listval)\n",
        "num_ids": 16
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word == '':\n        return ''\n    elif word.isupper():\n        return word\n    else:\n        return re.sub('_([a-z])',lambda x: x.group(1).upper(),word)\n",
        "num_ids": 57
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r\"(_+)(.*)\",lambda m: m.group(2).upper(),word)\n",
        "num_ids": 29
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    first_upper = False\n    result = []\n    for char in word:\n        if char == '_' and not first_upper:\n            result.append(' ')\n            first_upper = True\n        elif char.isupper() and not first_upper:\n            result.append(' ')\n            first_upper = True\n        else:\n            first_upper = False\n            result.append(char)\n    return ''.join(result).strip()\n",
        "num_ids": 110
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    \n    if len(word) == 0:\n        return word\n    if len(word) == 1:\n        return word\n    else:\n        return word[0].lower() + word[1:].replace('_','')\n",
        "num_ids": 57
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word == '' or word == None:\n        return word\n    else:\n        first = word[0].lower()\n        last = word[1:]\n        return first + last.capitalize()\n",
        "num_ids": 49
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.replace('-', '_')\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n",
        "num_ids": 41
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub(r'^[a-z][a-z]+', lambda match: match.group().title(), word)\n    return word\n",
        "num_ids": 38
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'_([a-z])', lambda m: m.group(1).upper(), word)\n",
        "num_ids": 31
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel = ''\n    for letter in word:\n        if letter.isupper():\n            camel = camel + letter\n        elif letter == '_':\n            camel = camel + letter\n        elif letter.islower():\n            camel = camel + letter.upper()\n    return camel\n",
        "num_ids": 72
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    string_list = word.split(\"_\")\n    #string_list.pop()\n    string_list.pop(0)\n    new_list = []\n    for i in string_list:\n        new_list.append(i.capitalize())\n    return \"\".join(new_list)\n",
        "num_ids": 73
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2==0]\n",
        "num_ids": 18
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i%2==1:\n            l.remove(i)\n    return l\n",
        "num_ids": 30
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = [i for i in l if i % 2 == 0]\n    return l\n",
        "num_ids": 23
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2==0]\nprint(remove_odd([1,2,3,4,5,6,7]))\n",
        "num_ids": 40
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [item for item in l if item % 2 == 0]\n",
        "num_ids": 18
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.remove(l[1])\n    l.remove(l[2])\n    l.remove(l[4])\n    return l\n",
        "num_ids": 36
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2==0]\n    \nremove_odd([1,2,3,4,5,6,7,8,9])\n",
        "num_ids": 43
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for i in l:\n        if i%2 == 0:\n            odd_list.append(i)\n    return odd_list\n",
        "num_ids": 41
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i % 2 == 1:\n            l.remove(i)\n    return l\n",
        "num_ids": 30
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i % 2 == 0:\n            l.remove(i)\n    return l\n",
        "num_ids": 30
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(i[n-1])\n    return list2\n",
        "num_ids": 34
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [tpl[n] for tpl in list1]\n",
        "num_ids": 18
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [tup[n-1] for tup in list1]\n",
        "num_ids": 20
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [i[n] for i in list1]\n",
        "num_ids": 16
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for tup in list1:\n        if n == 1:\n            return tup[0]\n        n -= 1\n",
        "num_ids": 31
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    result = []\n    for t in list1:\n        result.append(t[n])\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [x[n] for x in list1]\n",
        "num_ids": 16
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [ x[n] for x in list1 ]\n",
        "num_ids": 16
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [item for item, index in list1][n]\n",
        "num_ids": 17
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Method 1:\n    #if n <= len(list1):\n    #    return list1[n-1]\n    #else:\n    #    return None\n    # Method 2:\n    return list1[n-1] if n <= len(list1) else None\n",
        "num_ids": 68
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return(any(val in list1 for val in list2))\n",
        "num_ids": 18
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)<len(list2):\n        t=list1\n        n=list2\n    else:\n        t=list2\n        n=list1\n    for i in t:\n        if i in n:\n            return True\n    return False\n",
        "num_ids": 66
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return len([x for x in list1 if x in list2]) > 0\n",
        "num_ids": 21
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\ndef remove_duplicates(input_list):\n    '''\n    Write a python function to remove duplicates from a given list.\n    '''\n    return list(set(input_list))\ndef remove_duplicates2(input_list):\n    '''\n    Write a python function to remove duplicates from a given list.\n    '''\n    final_list=[]\n    for i in input_list:\n        if i not in final_list:\n            final_list.append(i)\n    return final_list\ndef remove_duplicates3(input_list):\n    '''\n    Write a python function to remove duplicates from a given list.\n    '''\n    input_list.sort()\n    final_list=[]\n    for i in input_list:\n        if i not in final_list:\n            final_list.append(i)\n    return final_list\ndef rev_words(input_string):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    input_string=input_string.split()\n    result=input_string[::-1]\n    return \" \".join(result)\ndef rev_words2(input_string):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    return \" \".join(input_string.split()[::-1])\ndef check_permutation(str1,str2):\n    '''\n    Write a python function to check whether two strings are permutations of each other.\n    '''\n    if len(str1)!=len(str2):\n        return False\n    str1=str1.lower()\n    str2=str2.lower()\n    dic1={}\n    dic2={}\n    for i in str1:\n        if i in dic1:\n            dic1[i]+=1\n        else:\n            dic1[i]=1\n    for j in str2:\n        if j in dic2:\n            dic2[j]+=1\n        else:\n            dic2[j]=1\n    if dic1==dic2:\n        return True\n    else:\n        return False\ndef sort_string(string):\n    '''\n    Write a python function to sort the given string in lexicographical order.\n    '''\n    return \"\".join(sorted(string))\ndef sort_string2(string):\n    '''\n    Write a python function to sort the given string in lexicographical order.\n    '''\n    return \"\".join(sorted(string,key=lambda x: (x.isdigit(),x.isdigit() and int(x)%2==0,x.isupper(),x.islower(),x)))\ndef palindrome(string):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    return string==string[::-1]\ndef palindrome2(string):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    return string==string[::-1]\ndef palindrome3(string):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    if len(string)<2:\n        return True\n    if string[0]==string[-1]:\n        return palindrome(string[1:-1])\n    else:\n        return False\ndef palindrome4(string):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    if len(string)<2:\n        return True\n    else:\n        return string[0]==string[-1] and palindrome(string[1:-1])\ndef palindrome5(string):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    if len(string)<2:\n        return True\n    else:\n        return string[0]==string[-1] and palindrome(string[1:-1])\ndef longest_palindrome(string):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    if len(string)<2:\n        return string\n    maxlen=1\n    start=0\n    for i in range(len(string)):\n        if string[i]==string[len(string)-i-1]:\n            count=2\n            while i-count>=0 and i+count<len(string) and string[i-count]==string[len(string)-i+count]:\n                count+=1\n            if count>maxlen:\n                maxlen=count\n                start=i-count+1\n        if string[i]!=string[len(string)-i-1]:\n            continue\n    return string[start:start+maxlen]\ndef longest_palindrome2(string):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    if len(string)<2:\n        return string\n    maxlen=1\n    start=0\n    for i in range(len(string)):\n        if string[i]==string[len(string)-i-1]:\n            count=2\n            while i-count>=0 and i+count<len(string) and string[i-count]==string[len(string)-i+count]:\n                count+=1\n            if count>maxlen:\n                maxlen=count\n                start=i-count+1\n        if string[i]!=string[len(string)-i-1]:\n            continue\n    return string[start:start+maxlen]\ndef longest_palindrome3(string):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    if len(string)<2:\n        return string\n    maxlen=1\n    start=0\n    for i in range(len(string)):\n        if string[i]==string[len(string)-i-1]:\n            count=2\n            while i-count>=0 and i+count<len(string) and string[i-count]==string[len(string)-i+count]:\n                count+=1\n            if count>maxlen:\n                maxlen=count\n                start=i-count+1\n        if string[i]!=string[len(string)-i-1]:\n            continue\n    return string[start:start+maxlen]\ndef longest_palindrome4(string):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    if len(string)<2:\n        return string\n    maxlen=1\n    start=0\n    for i in range(len(string)):\n        if string[i]==string[len(string)-i-1]:\n            count=2\n            while i-count>=0 and i+count<len(string) and string[i-count]==string[len(string)-i+count]:\n                count+=1\n            if count>maxlen:\n                maxlen=count\n                start=i-count+1\n        if string[i]!=string[len(string)-i-1]:\n            continue\n    return string[start:start+maxlen]\ndef longest_palindrome5(string):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    if len(string)<2:\n        return string\n    maxlen=1\n    start=0\n    for i in range(len(string)):\n        if string[i]==string[len(string)-i-1]:\n            count=2\n            while i-count>=0 and i+count<len(string) and string[i-count]==string[len(string)-i+count]:\n                count+=1\n            if count>maxlen:\n                maxlen=count\n                start=i-count+1\n        if string[i]!=string[len(string)-i-1]:\n            continue\n    return string[start:start+maxlen]\ndef longest_palindrome6(string):\n    '''\n    Write a python function to check whether a give",
        "num_ids": 12
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1=[]\n    for i in list2:\n        if i in list1:\n            print i\n            return True\n        else:\n            return False\nlist1=[1,2,3,4,5,6,7,8,9,10]\nlist2=[10,5,6,7,8,9,11,12,13,14]\nprint overlapping(list1,list2)\n",
        "num_ids": 98
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    s1 = set(list1)\n    s2 = set(list2)\n    #print s1\n    #print s2\n    return len(s1.intersection(s2))\n    \n    \n    \nif __name__ == '__main__':\n    \n    #list1 = [1,2,3,4,5,6,7,8]\n    #list2 = [5,6,7,8,9,10]\n    list1 = [1,2,3,4,5,6,7,8]\n    list2 = [5,6,7,8,9,10]\n    \n    print overlapping(list1,list2)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2009
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for a in list1:\n        if a in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return [item for item in list1 if item in list2]\n",
        "num_ids": 18
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    a = arr[0]\n    b = arr[1]\n    c = arr[2]\n    d = arr[3]\n    e = arr[4]\n    f = arr[5]\n    g = arr[6]\n    h = arr[7]\n",
        "num_ids": 66
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    if n < 4:\n        return None\n    max_p = arr[0]*arr[1]*arr[2]*arr[3]\n    a, b = 0, 0\n    for i in range(0, n):\n        for j in range(i+1, n):\n            if arr[i]*arr[j] > max_p:\n                max_p = arr[i]*arr[j]\n                a, b = i, j\n    return arr[a], arr[b]\n",
        "num_ids": 131
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr) \n    # Sort the array\n    arr.sort(reverse = True) \n    product = 1 \n    # Pick the first two elements \n    for i in xrange(n-1): \n        for j in xrange(i+1, n): \n            if arr[i] * arr[j] > product: \n                product = arr[i] * arr[j] \n                # print product \n    return product\n    \nprint max_Product([2, 3, -2, 4]) # 24\nprint max_Product([-2, -3, -1, -4]) # -24\nprint max_Product([-2, -3, 1, -4]) # 24\nprint max_Product([-2, -3, 4, 1]) # 24\nprint max_Product([-2, -3, -4, 1]) # 24\nprint max_Product([-2, -3, -4, 0]) # 0\nprint max_Product([-2, -3, -4, 1, 0]) # 24\nprint max_Product([-2, -3, -4, 1, 2, 3]) # 24\nprint max_Product([-2, -3, -4, 1, 2, -3]) # 24\nprint max_Product([-2, -3, -4, 1, 2, -1]) # 24",
        "num_ids": 317
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    n = len(arr)\n    max_product = 1\n    for i in range(n - 1):\n        if arr[i] * arr[n - 1] > max_product:\n            max_product = arr[i] * arr[n - 1]\n    return max_product\n",
        "num_ids": 76
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if not arr:\n        return\n    if len(arr) == 1:\n        return arr[0], arr[0]\n    if len(arr) == 2:\n        return arr[0], arr[1] if arr[0] > arr[1] else arr[1], arr[0], arr[1]\n    \n    def maxProduct(arr, k): \n        '''\n        For array arr, we need to find the elements that will give us the greatest product k times.\n        '''\n        for i in range(0, len(arr) - k + 1):\n            temp = 1\n            for j in range(i, i + k):\n                temp *= arr[j]\n            if temp > largest:\n                largest = temp\n                start = i\n                end = i + k - 1\n        return start, end, largest\n    \n    start, end, result = maxProduct(arr, 3)\n    return arr[start:end + 1]\n",
        "num_ids": 109
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    return arr[-1] * arr[-2]\n",
        "num_ids": 22
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = -1 \n    for i in range(n):\n        for j in range(i+1,n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "num_ids": 76
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    max_prod=arr[0]*arr[1]\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if(arr[i]*arr[j]>max_prod):\n                max_prod=arr[i]*arr[j]\n    return max_prod\n",
        "num_ids": 96
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    max_product = arr[0] * arr[1]\n    for i in xrange(len(arr)-1, 1, -1):\n        for j in xrange(i-1, 0, -1):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                break\n    return max_product\n",
        "num_ids": 97
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr)<=2:\n        return arr[0]*arr[1]\n    else:\n        max1 = arr[0]*arr[1]\n        max2 = arr[0]*arr[2]\n        max3 = arr[1]*arr[2]\n        for i in range(3,len(arr)):\n            if arr[i] > max1:\n                max2 = max1\n                max3 = max2\n                max1 = arr[i]\n            elif arr[i] > max2:\n                max3 = max2\n                max2 = arr[i]\n            elif arr[i] > max3:\n                max3 = arr[i]\n        return max1,max2,max3\n",
        "num_ids": 179
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    def common_first_element(Input):\n        First = Input[0]\n        for i in Input:\n            First = min(First,i[0])\n        return First\n    def common_first_element_tuples(Input):\n        First = Input[0]\n        for i in Input:\n            First = min(First,i[0])\n        return First\n    if len(Input) == 2:\n        return common_first_element(Input)\n    else:\n        return common_first_element_tuples(Input)\nprint group_tuples([('ram', 22), ('shyam', 22), ('shyam', 22), ('shyam', 22), ('shyam', 22), ('shyam', 22), ('shyam', 22), ('shyam', 22), ('shyam', 22), ('shyam', 22), ('shyam', 22), ('shyam', 22), ('shyam', 22), ('shyam', 22), ('shyam', 22), ('shyam', 22), ('shyam', 22), ('shyam', 22), ('shyam', 22), ('shyam', 22), ('shyam', 22), ('shyam', 22), ('shyam', 22), ('shyam', 22), ('shyam', 22), ('shyam', 22), ('shyam', 22), ('shyam', 22), ('shyam', 22), ('shyam', 22)])\n",
        "num_ids": 344
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    def group_tuples(Input): \n        '''\n        Write a function to find common first element in given list of tuple.\n        '''\n        def group_tuples(Input): \n            '''\n            Write a function to find common first element in given list of tuple.\n            '''\n            s = set()\n            for i in Input:\n                s.add(i[0])\n            return s\n        def group_tuples(Input): \n            '''\n            Write a function to find common first element in given list of tuple.\n            '''\n            s = set()\n            for i in Input:\n                s.add(i[0])\n            return s\n        def group_tuples(Input): \n            '''\n            Write a function to find common first element in given list of tuple.\n            '''\n            s = set()\n            for i in Input:\n                s.add(i[0])\n            return s\n        def group_tuples(Input): \n            '''\n            Write a function to find common first element in given list of tuple.\n            '''\n            s = set()\n            for i in Input:\n                s.add(i[0])\n            return s\n        def group_tuples(Input): \n            '''\n            Write a function to find common first element in given list of tuple.\n            '''\n            s = set()\n            for i in Input:\n                s.add(i[0])\n            return s\n        def group_tuples(Input): \n            '''\n            Write a function to find common first element in given list of tuple.\n            '''\n            s = set()\n            for i in Input:\n                s.add(i[0])\n            return s\n        def group_tuples(Input): \n            '''\n            Write a function to find common first element in given list of tuple.\n            '''\n            s = set()\n            for i in Input:\n                s.add(i[0])\n            return s\n        def group_tuples(Input): \n            '''\n            Write a function to find common first element in given list of tuple.\n            '''\n            s = set()\n            for i in Input:\n                s.add(i[0])\n            return s\n        def group_tuples(Input): \n            '''\n            Write a function to find common first element in given list of tuple.\n            '''\n            s = set()\n            for i in Input:\n                s.add(i[0])\n            return s\n        def group_tuples(Input): \n            '''\n            Write a function to find common first element in given list of tuple.\n            '''\n            s = set()\n            for i in Input:\n                s.add(i[0])\n            return s\n        def group_tuples(Input): \n            '''\n            Write a function to find common first element in given list of tuple.\n            '''\n            s = set()\n            for i in Input:\n                s.add(i[0])\n            return s\n        def group_tuples(Input): \n            '''\n            Write a function to find common first element in given list of tuple.\n            '''\n            s = set()\n            for i in Input:\n                s.add(i[0])\n            return s\n        def group_tuples(Input): \n            '''\n            Write a function to find common first element in given list of tuple.\n            '''\n            s = set()\n            for i in Input:\n                s.add(i[0])\n            return s\n        def group_tuples(Input): \n            '''\n            Write a function to find common first element in given list of tuple.\n            '''\n            s = set()\n            for i in Input:\n                s.add(i[0])\n            return s\n        def group_tuples(Input): \n            '''\n            Write a function to find common first element in given list of tuple.\n            '''\n            s = set()\n            for i in Input:\n                s.add(i[0])\n            return s\n        def group_tuples(Input): \n            '''\n            Write a function to find common first element in given list of tuple.\n            '''\n            s = set()\n            for i in Input:\n                s.add(i[0])\n            return s\n        def group_tuples(Input): \n            '''\n            Write a function to find common first element in given list of tuple.\n            '''\n            s = set()\n            for i in Input:\n                s.add(i[0])\n            return s\n        def group_tuples(Input): \n            '''\n            Write a function to find common first element in given list of tuple.\n            '''\n            s = set()\n            for i in Input:\n                s.add(i[0])\n            return s\n        def group_tuples(Input): \n            '''\n            Write a function to find common first element in given list of tuple.\n            '''\n            s = set()\n            for i in Input:\n                s.add(i[0])\n            return s\n        def group_tuples(Input): \n            '''\n            Write a function to find common first element in given list of tuple.\n            '''\n            s = set()\n            for i in Input:\n                s.add(i[0])\n            return s\n        def group_tuples(Input): \n            '''\n            Write a function to find common first element in given list of tuple.\n            '''\n            s = set()\n            for i in Input:\n                s.add(i[0])\n            return s\n        def group_tuples(Input): \n            '''\n            Write a function to find common first element in given list of tuple.\n            '''\n            s = set()\n            for i in Input:\n                s.add(i[0])\n            return s\n        def group_tuples(Input): \n            '''\n            Write a function to find common first element in given list of tuple.\n            '''\n            s = set()\n            for i in Input:\n                s.add(i[0])\n            return s\n        def group_tuples(Input): \n            '''\n            Write a function to find common first element in given list of tuple.\n            '''\n            s = set()\n            for i in Input:\n                s.add(i[0])\n            return s\n        def group_tuples(Input): \n            '''\n            Write a function to find common first element in given list of tuple.\n            '''\n            s = set()\n            for i in Input:\n                s.add(i[0])\n            return s\n        def group_tuples(Input): \n            '''\n            Write a function to find common first element in given list of tuple.\n            '''\n            s = set()\n            for i in Input:\n                s.add(i[0])\n            return s\n        def group_tuples(Input): \n            '''\n            Write a function to find common first element in given list of tuple.\n            '''\n            s = set()\n            for i in Input:\n                s.add(i[0])\n            return s\n        def group_tuples(Input): \n            '''\n            Write a function to find common first element in given list of tuple.\n            '''\n            s = set()\n            for i in Input:\n                s.add(i[0])\n            return s\n        def group_tuples(Input): \n            '''\n            Write a function to find common first element in given list of tuple.\n            '''\n            s = set()\n            for i in Input:\n                s.add(i[0])\n            return s\n        def group_tuples(Input): \n            '''\n            Write a function to find common first element in given list of tuple.\n            '''\n            s = set()\n            for i in Input:\n                s.add(i[0])\n            return s\n        def group_tuples(Input): \n            '''\n            Write a function to find common first element in given list of tuple.\n            '''\n            s = set()\n            for i in Input:\n                s.add(i[0])\n            return s\n        def group_tuples(Input): \n            '''\n            Write a function to find common first element in given list of tuple.\n            '''\n            s = set()\n            for i in Input:\n                s.add(i[0]",
        "num_ids": 24
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    for tup in Input:\n        if tup[0] == tup[1]:\n            print \"common first element:\",tup[0]\n            break\n",
        "num_ids": 41
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = set()\n    for T in Input:\n        if T[0] not in Output: Output.add(T[0])\n    return Output\n    \n",
        "num_ids": 40
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # t = [('one', 1), ('two', 2), ('three', 3)]\n    # print(group_tuples(t))\n    \n    l = [('a',1),('b',2),('c',3)]\n    f = [i[0] for i in l]\n    group_tuples(l)\n    return f\n    \ndef common_first_element(t):\n    '''\n    Write a function to find common first element in tuple.\n    '''\n    # print(common_first_element(t))\n    # t = [('one', 1), ('two', 2), ('three', 3)]\n    f = [i[0] for i in t]\n    print(set(f))\n    return set(f)\n    \n    \n",
        "num_ids": 69
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    List = []\n    for i in Input:\n        List.append(i[0])\n    return set(List)\n",
        "num_ids": 31
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return reduce(lambda x,y:x & y, (set(x) for x in Input))\n",
        "num_ids": 26
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input = [tuple(sorted(i)) for i in Input]\n    group = {}\n    for i in Input:\n        if i[0] in group:\n            group[i[0]] += [i]\n        else:\n            group[i[0]] = [i]\n    return group\n",
        "num_ids": 74
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #return reduce(lambda x,y: x&y, Input)\n    res = list(reduce(lambda x,y: x&y, Input))\n    res = [x for x in Input if x in res]\n    return res\n",
        "num_ids": 58
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your Code Here\n    res = []\n    for el in Input:\n        if Input.count(el) > 1:\n            res.append(el)\n    return res\n",
        "num_ids": 44
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    length=len(lst)\n    if length==0:\n        return 0\n    elif length==1:\n        return lst[0]\n    else:\n        if lst[0]>lst[1]:\n            return lst[0]\n        else:\n            return lst[1]\ndef Find_Max_Bruteforce(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    length=len(lst)\n    if length==0:\n        return 0\n    elif length==1:\n        return lst[0]\n    else:\n        lst[1]=lst[0]\n        return Find_Max_Bruteforce(lst[1:])\ndef Find_Max_Bruteforce_loop(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    length=len(lst)\n    if length==0:\n        return 0\n    elif length==1:\n        return lst[0]\n    else:\n        maximum=lst[0]\n        for i in range(1,length):\n            if lst[i]>maximum:\n                maximum=lst[i]\n        return maximum\n",
        "num_ids": 86
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_i = 0\n    for i in range(len(lst)):\n        if max_len < len(lst[i]):\n            max_len = len(lst[i])\n            max_i = i\n    return lst[max_i]\n",
        "num_ids": 74
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    length=len(lst)\n    max=lst[0]\n    for i in lst:\n        if len(i)>=len(max):\n            max=i\n    print('The maximum length is',len(max))\nFind_Max(lst)",
        "num_ids": 66
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            answer = i\n    return answer\n",
        "num_ids": 48
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elm = []\n    for i in range(len(lst)):\n        if len(lst[i]) >= max_len:\n            max_len = len(lst[i])\n            max_elm = lst[i]\n    return max_elm\n",
        "num_ids": 77
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len=0\n    for i in lst:\n        if len(i)>=max_len:\n            max_len=len(i)\n            max_index=lst.index(i)\n    return lst[max_index]\n",
        "num_ids": 63
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst, key=len)\n",
        "num_ids": 14
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0])\n    max_element = lst[0]\n    for i in lst[1:]:\n        if len(i)>max_len:\n            max_element = i\n            max_len = len(i)\n    return max_element\n",
        "num_ids": 72
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maximum = 0\n    for i in lst:\n        if len(i) > maximum:\n            maximum = len(i)\n            max_index = lst.index(i)\n    return lst[max_index]\n",
        "num_ids": 56
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    length = len(lst)\n    return lst[length-1]\ndef Find_Max_Num(lst):\n    '''\n    Write a python function to find the number of maximum value element in a list\n    '''\n    length = len(lst)\n    max_value = lst[length-1]\n    max_index = length-1\n    i = 0\n    while i < length-1:\n        if max_value < lst[i]:\n            max_value = lst[i]\n            max_index = i\n        i = i+1\n    return max_index\n",
        "num_ids": 90
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1 = [float(i) for i in list1]\n    total = 0\n    for i in list1:\n        total += i\n    rounded = [round(i, 1) for i in list1]\n    return float(total) * len(list1)\n",
        "num_ids": 66
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    res = 0\n    for n in list1:\n        res = res + round(n)\n    return res\n",
        "num_ids": 29
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for number in list1:\n        number = round(number)\n        sum += number\n    return sum\n",
        "num_ids": 32
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1 = [round(i) for i in list1]\n    print(sum(list1)*len(list1))\n",
        "num_ids": 32
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return round(sum(list1), 2)\n",
        "num_ids": 14
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for num in list1:\n        sum += round(num)\n    print(sum * len(list1))\n",
        "num_ids": 34
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    \n    total = 0\n    for i in list1:\n        round_and_sum(i)\n        print (i)\n        \n    for i in range(len(list1)):\n        total += (list1[i])**len(list1)\n    \n    return total\n",
        "num_ids": 70
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum(map(lambda x: round(x,2),list1))*(len(list1))\n",
        "num_ids": 28
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    round_numbers = []\n    for item in list1:\n        round_numbers.append(round(item))\n    total = sum(round_numbers)\n    print(total)\n",
        "num_ids": 48
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    print sum(map(round, list1)) * len(list1)\n",
        "num_ids": 20
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    a = 0\n    for x in range(n):\n        a += x**3\n    return a\n    \ndef gen_prime(n):\n    '''\n    Write a python function to generate all prime numbers upto n.\n    '''\n    if n < 2: return []\n    prime = [2]\n    for x in range(3,n+1,2):\n        for y in prime:\n            if x%y == 0: break\n        else: prime.append(x)\n    return prime\n",
        "num_ids": 64
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    \n    n = int(n)\n    s = 0\n    for i in xrange(2, n+1, 2):\n        s = s + i**3\n    return s\n",
        "num_ids": 46
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    \n    sum = 0\n    for x in range(2,n+1,2):\n        sum = sum + x**3\n    return sum\n",
        "num_ids": 37
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    \n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i**3\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(n): \n        if i%2==0: \n            s += i**3\n    return s\n",
        "num_ids": 38
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    res = 0\n    for i in range(n):\n        res += i**3\n    return res\n",
        "num_ids": 27
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2==0:\n            sum = sum + i**3\n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # assert type(n) == int\n    \n    return sum([i**3 for i in range(n) if i%2 == 0])\n",
        "num_ids": 36
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += (i ** 3)\n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # To take input from the user\n    #num = int(input(\"Enter number of terms: \"))\n    \n    # Condition if the number of terms is 0\n    if n == 0:\n        return 0\n    \n    # Set sum = 0 and i = 1\n    sum = 0\n    i = 1\n    \n    # While loop to iterate i and n\n    while i <= n:\n        \n        # Condition to check if i is even\n        if i % 2 == 0:\n            \n            # Condition to check if i is divisible by 4\n            if i % 4 == 0:\n                sum = sum + i ** 3\n            else:\n                sum = sum - i ** 3\n                \n        # Increment i by 1\n        i = i + 1\n    \n    # Return the sum of cubes\n    return sum\n",
        "num_ids": 192
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for elem in test_tup:\n        result += elem\n    return result\n",
        "num_ids": 28
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    str_data = ''\n    for i in test_tup:\n        str_data = str_data + i + delimiter\n    return str_data[:len(str_data) - 1]\n",
        "num_ids": 50
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n",
        "num_ids": 14
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(x) for x in test_tup)\n",
        "num_ids": 22
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n",
        "num_ids": 14
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n",
        "num_ids": 14
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    output = ''\n    for element in test_tup:\n        output += str(element)\n        output += ','\n    return output[:-1]\n",
        "num_ids": 39
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    if len(test_tup) < 2:\n        return tuple(test_tup)\n    return test_tup[0] + ',' + concatenate_tuple(test_tup[1:])\n",
        "num_ids": 54
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for element in test_tup:\n        result += str(element) + delimiter\n    result = result[:-len(delimiter)]\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(n):\n        cube_sum = cube_sum + i**3\n    return cube_sum / n\n",
        "num_ids": 39
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    avg = 0\n    for i in range(n+1):\n        avg += (i ** 3)\n    return avg / n\n    \ndef find_Sqaure_Of_Cube(n):\n    '''\n    Write a python function to find the square of cubes of first n natural numbers.\n    '''\n    return n ** 3\n",
        "num_ids": 8
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    c = 0\n    for i in range(1,n+1):\n        c+=i**3\n    return c/n\n",
        "num_ids": 33
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return (sum(i**3 for i in range(1, n+1))) / n\n",
        "num_ids": 24
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # CODE HERE\n    sum = 0\n    for i in range(n):\n        sum = sum + (i+1)**3\n    avg = sum/n\n    print 'The average of cube of the first ',n,'natural numbers is ',avg\n",
        "num_ids": 62
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    a = 0\n    for i in range(1,n+1):\n        a += i**3\n    return (a/n)\n    \ndef find_Average_Of_Square(n):  \n    '''\n    Write a python function to find the average of squares of first n natural numbers.\n    '''\n    a = 0\n    for i in range(1,n+1):\n        a += i**2\n    return (a/n)\n    \ndef find_Average_Of_Cubed_Powers_Of_First_N_Natural_Numbers(n):  \n    '''\n    Write a python function to find the average of cubed powers of the first n natural numbers.\n    '''\n    a = 0\n    for i in range(1,n+1):\n        a += i**3\n    return (a/n)\n    \ndef find_Average_Of_Square_Squared_Powers_Of_First_N_Natural_Numbers(n):  \n    '''\n    Write a python function to find the average of squares of the squared powers of the first n natural numbers.\n    '''\n    a = 0\n    for i in range(1,n+1):\n        a += i**2\n    return (a/n)\n    \ndef find_Average_Of_Cubed_Powers_Of_Squared_First_N_Natural_Numbers(n):  \n    '''\n    Write a python function to find the average of cubed powers of the squared first n natural numbers.\n    '''\n    a = 0\n    for i in range(1,n+1):\n        a += i**3\n    return (a/n)\n    \ndef find_Average_Of_Cubed_Powers_Of_First_N_Natural_Numbers_Alternative(n):  \n    '''\n    Write a python function to find the average of cubed powers of the first n natural numbers.\n    '''\n    a = 0\n    for i in range(1,n+1):\n        a += i**3/i**3\n    return (a/n)\n    \ndef find_Average_Of_Square_Squared_Powers_Of_First_N_Natural_Numbers_Alternative(n):  \n    '''\n    Write a python function to find the average of squares of the squared powers of the first n natural numbers.\n    '''\n    a = 0\n    for i in range(1,n+1):\n        a += i**2/i**2\n    return (a/n)\n    \ndef find_Average_Of_Cubed_Powers_Of_Squared_First_N_Natural_Numbers_Alternative(n):  \n    '''\n    Write a python function to find the average of cubed powers of the squared first n natural numbers.\n    '''\n    a = 0\n    for i in range(1,n+1):\n        a += i**3/i**3\n    return (a/n)\n    \ndef find_Average_Of_Cubed_Powers_Of_First_N_Natural_Numbers_Alternative2(n):  \n    '''\n    Write a python function to find the average of cubed powers of the first n natural numbers.\n    '''\n    a = 0\n    for i in range(1,n+1):\n        a += i**3/i**3\n    return (a/n)\n    \ndef find_Average_Of_Square_Squared_Powers_Of_First_N_Natural_Numbers_Alternative2(n):  \n    '''\n    Write a python function to find the average of squares of the squared powers of the first n natural numbers.\n    '''\n    a = 0\n    for i in range(1,n+1):\n        a += i**2/i**2\n    return (a/n)\n    \ndef find_Average_Of_Cubed_Powers_Of_Squared_First_N_Natural_Numbers_Alternative2(n):  \n    '''\n    Write a python function to find the average of cubed powers of the squared first n natural numbers.\n    '''\n    a = 0\n    for i in range(1,n+1):\n        a += i**3/i**3\n    return (a/n)\n    \ndef find_Average_Of_Cubed_Powers_Of_First_N_Natural_Numbers_Alternative3(n):  \n    '''\n    Write a python function to find the average of cubed powers of the first n natural numbers.\n    '''\n    a = 0\n    for i in range(1,n+1):\n        a += i**3/i**3\n    return (a/n)\n    \ndef find_Average_Of_Square_Squared_Powers_Of_First_N_Natural_Numbers_Alternative3(n):  \n    '''\n    Write a python function to find the average of squares of the squared powers of the first n natural numbers.\n    '''\n    a = 0\n    for i in range(1,n+1):\n        a += i**2/i**2\n    return (a/n)\n    \ndef find_Average_Of_Cubed_Powers_Of_Squared_First_N_Natural_Numbers_Alternative3(n):  \n    '''\n    Write a python function to find the average of cubed powers of the squared first n natural numbers.\n    '''\n    a = 0\n    for i in range(1,n+1):\n        a += i**3/i**3\n    return (a/n)\n    \ndef find_Average_Of_Cubed_Powers_Of_First_N_Natural_Numbers_Alternative4(n):  \n    '''\n    Write a python function to find the average of cubed powers of the first n natural numbers.\n    '''\n    a = 0\n    for i in range(1,n+1):\n        a += i**3/i**3\n    return (a/n)\n    \ndef find_Average_Of_Square_Squared_Powers_Of_First_N_Natural_Numbers_Alternative4(n):  \n    '''\n    Write a python function to find the average of squares of the squared powers of the first n natural numbers.\n    '''\n    a = 0\n    for i in range(1,n+1):\n        a += i**2/i**2\n    return (a/n)\n    \ndef find_Average_Of_Cubed_Powers_Of_Squared_First_N_Natural_Numbers_Alternative4(n):  \n    '''\n    Write a python function to find the average of cubed powers of the squared first n natural numbers.\n    '''\n    a = 0\n    for i in range(1,n+1):\n        a += i**3/i**3\n    return (a/n)\n    \ndef find_Average_Of_Cubed_Powers_Of_First_N_Natural_Numbers_Alternative5(n):  \n    '''\n    Write a python function to find the average of cubed powers of the first n natural numbers.\n    '''\n    a = 0\n    for i in range(1,n+1):\n        a += i**3/i**3\n    return (a/n)\n    \ndef find_Average_Of_Square_Squared_Powers_Of_First_N_Natural_Numbers_Alternative5(n):  \n    '''\n    Write a python function to find the average of squares of the squared powers of the first n natural numbers.\n    '''\n    a = 0\n    for i in range(1,n+1):\n        a += i**2/i**2\n    return (a/n)\n    \ndef find_Average_Of_Cubed_Powers_Of_Squared_First_N_Natural_Numbers_Alternative5(n):  \n    '''\n    Write a python function to find the average of cubed powers of the squared first n natural numbers.\n    '''\n    a = 0\n    for i in range(1,n+1):\n        a += i**3/i**3\n    return (a/n)\n    \ndef find_Average_Of_Cubed_Powers_Of_First_N_Natural_Numbers_Alternative6(n):  \n    '''\n    Write a python function to find the average of cubed powers of the first n natural numbers.\n    '''\n    a = 0\n    for i in range(1,n+1):\n        a += i**3/i**3\n    return (a/n)\n    \ndef find_Average_Of_Square_Squared_Power",
        "num_ids": 54
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    avg = 0\n    for i in range(1, n+1):\n        avg = avg + i**3\n    return avg / n\n    \ndef find_Average_Of_Square(n):\n    '''\n    Write a python function to find the average of squares of first n natural numbers.\n    '''\n    avg = 0\n    for i in range(1, n+1):\n        avg = avg + i**2\n    return avg / n\n    \ndef find_Average_Of_Cubed_Squared(n):\n    '''\n    Write a python function to find the average of Cubed Squared of first n natural numbers.\n    '''\n    avg = 0\n    for i in range(1, n+1):\n        avg = avg + (i**3) * (i**2)\n    return avg / n\n    \ndef find_Average_Of_Cubed_Cubed(n):\n    '''\n    Write a python function to find the average of Cubed Cubed of first n natural numbers.\n    '''\n    avg = 0\n    for i in range(1, n+1):\n        avg = avg + (i**3)**2\n    return avg / n\n    \ndef find_Average_Of_Cubed_Cubed_Squared(n):\n    '''\n    Write a python function to find the average of Cubed Cubed Squared of first n natural numbers.\n    '''\n    avg = 0\n    for i in range(1, n+1):\n        avg = avg + (i**3)**2 * (i**2)\n    return avg / n\n    \ndef find_Average_Of_Fibonacci(n):\n    '''\n    Write a python function to find the average of Fibonacci sequence upto n natural numbers.\n    '''\n    fib_list = [0, 1]\n    fib_sum = 0\n    if n == 1:\n        fib_sum = 0\n    elif n == 2:\n        fib_sum = 1\n    else:\n        for i in range(2, n+1):\n            fib_list.append(fib_list[i-2] + fib_list[i-1])\n        for i in range(0, n):\n            fib_sum = fib_sum + fib_list[i]\n    return fib_sum / n\n    \ndef find_Average_Of_Fibonacci_Square(n):\n    '''\n    Write a python function to find the average of Fibonacci sequence upto n natural numbers.\n    '''\n    fib_list = [0, 1]\n    fib_sum = 0\n    if n == 1:\n        fib_sum = 0\n    elif n == 2:\n        fib_sum = 1\n    else:\n        for i in range(2, n+1):\n            fib_list.append(fib_list[i-2] + fib_list[i-1])\n        for i in range(0, n):\n            fib_sum = fib_sum + (fib_list[i] * fib_list[i])\n    return fib_sum / n\n    \ndef find_Average_Of_Fibonacci_Cube(n):\n    '''\n    Write a python function to find the average of Fibonacci sequence upto n natural numbers.\n    '''\n    fib_list = [0, 1]\n    fib_sum = 0\n    if n == 1:\n        fib_sum = 0\n    elif n == 2:\n        fib_sum = 1\n    else:\n        for i in range(2, n+1):\n            fib_list.append(fib_list[i-2] + fib_list[i-1])\n        for i in range(0, n):\n            fib_sum = fib_sum + (fib_list[i]**3)\n    return fib_sum / n\n    \ndef find_Average_Of_Fibonacci_Cube_Squared(n):\n    '''\n    Write a python function to find the average of Fibonacci sequence upto n natural numbers.\n    '''\n    fib_list = [0, 1]\n    fib_sum = 0\n    if n == 1:\n        fib_sum = 0\n    elif n == 2:\n        fib_sum = 1\n    else:\n        for i in range(2, n+1):\n            fib_list.append(fib_list[i-2] + fib_list[i-1])\n        for i in range(0, n):\n            fib_sum = fib_sum + (fib_list[i]**3) * (fib_list[i]**2)\n    return fib_sum / n\n    \ndef find_Average_Of_Fibonacci_Cube_Cubed(n):\n    '''\n    Write a python function to find the average of Fibonacci sequence upto n natural numbers.\n    '''\n    fib_list = [0, 1]\n    fib_sum = 0\n    if n == 1:\n        fib_sum = 0\n    elif n == 2:\n        fib_sum = 1\n    else:\n        for i in range(2, n+1):\n            fib_list.append(fib_list[i-2] + fib_list[i-1])\n        for i in range(0, n):\n            fib_sum = fib_sum + (fib_list[i]**3) * (fib_list[i]**2) * (fib_list[i])\n    return fib_sum / n\n    \ndef find_Average_Of_Fibonacci_Cube_Cubed_Squared(n):\n    '''\n    Write a python function to find the average of Fibonacci sequence upto n natural numbers.\n    '''\n    fib_list = [0, 1]\n    fib_sum = 0\n    if n == 1:\n        fib_sum = 0\n    elif n == 2:\n        fib_sum = 1\n    else:\n        for i in range(2, n+1):\n            fib_list.append(fib_list[i-2] + fib_list[i-1])\n        for i in range(0, n):\n            fib_sum = fib_sum + (fib_list[i]**3) * (fib_list[i]**2) * (fib_list[i]**2)\n    return fib_sum / n\n    \ndef find_Average_Of_Fibonacci_Cube_Cubed_Cubed(n):\n    '''\n    Write a python function to find the average of Fibonacci sequence upto n natural numbers.\n    '''\n    fib_list = [0, 1]\n    fib_sum = 0\n    if n == 1:\n        fib_sum = 0\n    elif n == 2:\n        fib_sum = 1\n    else:\n        for i in range(2, n+1):\n            fib_list.append(fib_list[i-2] + fib_list[i-1])\n        for i in range(0, n):\n            fib_sum = fib_sum + (fib_list[i]**3) * (fib_list[i]**2) * (fib_list[i]**2) * fib_list[i]\n    return fib_sum / n\n    \ndef find_Average_Of_Fibonacci_Cube_Cubed_Cubed_Squared(n):\n    '''\n    Write a python function to find the average of Fibonacci sequence upto n natural numbers.\n    '''\n    fib_list = [0, 1]\n    fib_sum = 0\n    if n == 1:\n        fib_sum = 0\n    elif n == 2:\n        fib_sum = 1\n    else:\n        for i in range(2, n+1):\n            fib_list.append(fib_list[i-2] + fib_list[i-1])\n        for i in range(0, n):\n            fib_sum = fib_sum + (fib_list[i]**3) * (fib_list[i]**2) * (fib_list[i]**2) * (fib_list[i]**2)\n    return fib_sum / n\n    \ndef find_Averag",
        "num_ids": 182
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum = sum+i**3\n    return sum/n\n",
        "num_ids": 33
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    if n == 1:\n        return(1)\n    else:\n        return(find_Average_Of_Cube(n-1) * n)\n        \n    \n",
        "num_ids": 44
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    s=0\n    for x in range(1,n+1):\n        s+=x**3\n    return s/n\nprint find_Average_Of_Cube(10)\n",
        "num_ids": 45
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [x[-1] for x in test_tuple]\n",
        "num_ids": 19
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # Your code here\n",
        "num_ids": 8
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(map(lambda s: s[-1], test_tuple))\n",
        "num_ids": 22
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for t in test_tuple:\n        if '-' in t:\n            continue\n        else:\n            rear_elements.append(t)\n    return rear_elements\n",
        "num_ids": 55
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([x[-1] for x in test_tuple])\n",
        "num_ids": 20
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(i[-1] for i in test_tuple)\n",
        "num_ids": 20
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(list(tuple(item)[-1] for item in test_tuple))\n",
        "num_ids": 25
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(map(lambda x: x[-1], test_tuple))\n",
        "num_ids": 22
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([test_tuple[i][-1] for i in range(len(test_tuple))])\n",
        "num_ids": 30
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = [i[-1] for i in test_tuple]\n    return rear_index\n",
        "num_ids": 29
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if (list1[i] == x):\n            count += 1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    list1 = list(list1)\n    \n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n    \ndef count_element_in_list_recursive(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if len(list1) == 0:\n        return 0\n    if list1[0] == x:\n        return 1 + count_element_in_list_recursive(list1[1:], x)\n    else:\n        return count_element_in_list_recursive(list1[1:], x)\n",
        "num_ids": 78
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return sum([1 for sublist in list1 if x in sublist])\n",
        "num_ids": 20
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    \n    '''\n    # number of sublists = num of elements / list size\n    # count = len(list1) / len(list1[0])\n    '''\n    count = 0\n    for list2 in list1:\n        if x in list2:\n            count += 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    for elem in list1:\n        if x in elem:\n            count+=1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return len([i for i in range(len(list1)) if x in list1[i]])\n",
        "num_ids": 27
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    i = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            i += 1\n    return i\n",
        "num_ids": 40
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            yield num\n",
        "num_ids": 25
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odds = [x for x in nums if x % 2!= 0]\n    return odds\n",
        "num_ids": 26
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [n for n in nums if n % 2]\n",
        "num_ids": 17
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_nums = []\n    for num in nums:\n        if num % 2 == 1:\n            new_nums.append(num)\n    return new_nums\n",
        "num_ids": 45
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x%2==1, nums)\n",
        "num_ids": 19
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # oddnumbers = filter(lambda x: x % 2!= 0, nums)\n    # return list(oddnumbers)\n    return list(filter(lambda x: x % 2!= 0, nums))\n",
        "num_ids": 54
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2 == 1]\n",
        "num_ids": 19
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x % 2 == 1, nums)\n",
        "num_ids": 19
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 == 1, nums))\n",
        "num_ids": 21
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [n for n in nums if n%2!= 0]\n",
        "num_ids": 20
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split('-')\n    if len(date) == 3:\n        date[2] = str(int(date[2])+2000)\n    date = '-'.join(date)\n    return date\n",
        "num_ids": 56
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    \n    date_format = re.compile('[0-9]+')\n    date_list = date_format.findall(dt)\n    month = ['January','February','March','April','May','June','July','August','September','October','November','December']\n    converted_date = ''\n    for i in date_list:\n        if len(i) == 1:\n            converted_date = converted_date +'0'+i\n        else:\n            converted_date = converted_date +i\n    converted_date = converted_date[2:]\n    converted_date = converted_date +'-'+ month[int(converted_date[0:2])-1] +'-'+ converted_date[2:]\n    return converted_date\n    \n",
        "num_ids": 185
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return '{:02d}-{:02d}-{:04d}'.format(int(dt[6:8]), int(dt[4:6]), int(dt[:4]))\n    \n",
        "num_ids": 52
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.strip()\n    if dt == '':\n        return None\n    if len(dt) == 10:\n        dt = '0' + dt\n    if len(dt) == 8:\n        dt = '19' + dt\n    if len(dt) == 11:\n        dt = dt[2:]\n    return dt\n",
        "num_ids": 87
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    date = pattern.match(dt).groups()\n    new_date = '{1}-{2}-{0}'.format(*date)\n    return new_date\n",
        "num_ids": 72
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_split = dt.split('-')\n    date_new = date_split[2] + '-' + date_split[1] + '-' + date_split[0]\n    return date_new\n",
        "num_ids": 53
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if '-' in dt:\n        return dt[2:4]+'-'+dt[5:7]+'-'+dt[:4]\n    return dt[:2]+'-'+dt[3:5]+'-'+dt[6:]\n",
        "num_ids": 63
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split('-')\n    date[2] = str(int(date[2])+2000)\n    date = '-'.join(date)\n    return date\n",
        "num_ids": 46
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    year = dt[:4]\n    month = dt[5:7]\n    day = dt[8:10]\n    return day + '-' + month + '-' + year\n",
        "num_ids": 48
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    months = {\n        '01' : 'January',\n        '02' : 'February',\n        '03' : 'March',\n        '04' : 'April',\n        '05' : 'May',\n        '06' : 'June',\n        '07' : 'July',\n        '08' : 'August',\n        '09' : 'September',\n        '10' : 'October',\n        '11' : 'November',\n        '12' : 'December'\n    }\n",
        "num_ids": 118
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def insertion_sort(my_list):\n        '''\n        Implement insertion sort as explained in class\n        '''\n        for i in xrange(1,len(my_list)):\n            temp = my_list[i]\n            j = i - 1\n            while j >= 0 and temp < my_list[j]:\n                my_list[j + 1] = my_list[j]\n                j -= 1\n            my_list[j + 1] = temp\n        return my_list\n    \n    def shell_sort_algo(my_list):\n        '''\n        Algorithm for shell sort\n        '''\n        h = 1\n        while h < len(my_list)/3:\n            h = 3*h + 1\n        while h >= 1:\n            for i in xrange(h,len(my_list)):\n                temp = my_list[i]\n                j = i - h\n                while j >= 0 and temp < my_list[j]:\n                    my_list[j + h] = my_list[j]\n                    j -= h\n                my_list[j + h] = temp\n            h /= 3\n        return my_list\n    \n    def shell_sort_2(my_list):\n        '''\n        Write a function to sort the given array by using shell sort.\n        '''\n        n = len(my_list)\n        h = n/2\n        while h > 0:\n            for i in xrange(h,n):\n                temp = my_list[i]\n                j = i\n                while j >= h and temp < my_list[j-h]:\n                    my_list[j] = my_list[j-h]\n                    j -= h\n                my_list[j] = temp\n            h /= 2\n        return my_list\n    \n    def shell_sort_3(my_list):\n        '''\n        Write a function to sort the given array by using shell sort.\n        '''\n        n = len(my_list)\n        h = n/2\n        while h > 0:\n            for i in xrange(h,n):\n                temp = my_list[i]\n                j = i\n                while j >= h and temp < my_list[j-h]:\n                    my_list[j] = my_list[j-h]\n                    j -= h\n                my_list[j] = temp\n            h /= 2\n        return my_list\n    \n    \n    #Check\n    #print \"Algorithm 3\",shell_sort_3([1,4,5,2,3,6,7,8,9])\n    #print \"Algorithm 2\",shell_sort_2([1,4,5,2,3,6,7,8,9])\n    #print \"Insertion\",insertion_sort([1,4,5,2,3,6,7,8,9])\n    #print \"Shell\",shell_sort_algo([1,4,5,2,3,6,7,8,9])\n    \n    if my_list == []:\n        return []\n    #print \"Shell_2\",shell_sort_2(my_list)\n    #print \"Shell_3\",shell_sort_3(my_list)\n    #print \"Shell\",shell_sort(my_list)\n    return shell_sort_algo(my_list)\n    \n    #Insertion sort\n    #for i in range(1,len(my_list)):\n    #    temp = my_list[i]\n    #    j = i - 1\n    #    while j >= 0 and temp < my_list[j]:\n    #        my_list[j + 1] = my_list[j]\n    #        j -= 1\n    #    my_list[j + 1] = temp\n    #return my_list\n",
        "num_ids": 443
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2\n",
        "num_ids": 109
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # This is the number of sublists\n    n = len(my_list) // 2\n    # Repeat the above process n - 1 times\n    while n > 0:\n        # Iterate over the n sublists\n        for i in range(n):\n            # Initialize the sublist and j\n            sub_list = my_list[i:i + n]\n            j = i + n\n            # Initialize the sublist\n            while j < len(my_list):\n                # Swap the element if it is greater than the element in its\n                # place\n                if sub_list[0] > my_list[j]:\n                    sub_list[0], my_list[j] = my_list[j], sub_list[0]\n                # Increment j\n                j += n\n            # Update the sublist\n            my_list[i:i + n] = sub_list\n        # Reduce the number of sublists\n        n = n // 2\n",
        "num_ids": 225
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    #Base case\n    if len(my_list)<=1:\n        return\n    \n    #Divide the array into n/2 arrays of length 1\n    half = len(my_list)//2\n    for i in range(half):\n        #Sort the left half of the array\n        shell_sort(my_list[i:])\n        #Extend the sorted half of the array\n        extend(my_list, i, half, my_list[i])\n        \ndef extend(my_list, i, j, pivot):\n    '''\n    Sorts the list by starting at index i and stopping at index j.\n    '''\n    #The list will be extended to the right\n    #loop through the list to the right of the pivot\n    for k in range(i,j):\n        #if the element at index k is less than the pivot, exchange them\n        if my_list[k] < pivot:\n            temp = my_list[i]\n            my_list[i] = my_list[k]\n            my_list[k] = temp\n            i += 1\n        \nif __name__ == '__main__':\n    my_list = [23,4,6,7,8,2,5,1,1]\n    shell_sort(my_list)\n    print(my_list)",
        "num_ids": 161
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # array size\n    size = len(my_list)\n",
        "num_ids": 17
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "num_ids": 114
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n/2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap/2\n    return my_list\n",
        "num_ids": 115
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current\n        gap //= 2\n",
        "num_ids": 108
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return zip(test_tup1, test_tup2)\n",
        "num_ids": 19
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    output = []\n    for i in test_tup1:\n        output.append(i)\n    for i in test_tup2:\n        output.append(i)\n    return output\n",
        "num_ids": 49
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return list(zip(test_tup1, test_tup2))\n",
        "num_ids": 21
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return [tup1 and tup2 for tup1, tup2 in zip(test_tup1, test_tup2)]\n",
        "num_ids": 36
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return ((a + b) for a, b in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    \n    def and_tuples_helper(test_tup1, test_tup2):\n        if type(test_tup1) == tuple:\n            if type(test_tup2) == tuple:\n                return tuple(tuple(x) for x in zip(test_tup1, test_tup2))\n            else:\n                return tuple(test_tup1)\n        else:\n            if type(test_tup2) == tuple:\n                return tuple(test_tup2)\n            else:\n                return test_tup2\n    return tuple(and_tuples_helper(test_tup1, test_tup2) for test_tup1, test_tup2 in zip(test_tup1, test_tup2))\n    \nprint(and_tuples((1, 2, 3), (4, 5)))\nprint(and_tuples((1, 2, 3), (4)))\nprint(and_tuples((1, 2, 3), (4, 5, 6)))\nprint(and_tuples((1, 2, 3), [4, 5]))\nprint(and_tuples((1, 2, 3), [4, 5, 6]))\nprint(and_tuples((1, 2, 3), {4: 5}))",
        "num_ids": 310
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return zip(test_tup1, test_tup2)\n",
        "num_ids": 19
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tup1[0] * tup2[0], tup1[1] * tup2[1])\n",
        "num_ids": 32
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            and_tup += (test_tup1[i] & test_tup2[i],)\n    else:\n        return None\n    return and_tup\n",
        "num_ids": 87
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        and_tup = and_tuples(test_tup1[i], test_tup2[i])\n        print and_tup\n",
        "num_ids": 53
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -b/(2*a)\n",
        "num_ids": 12
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b ** 2 - 4 * a * c\n    if delta < 0:\n        return None\n    elif delta == 0:\n        x = -b / (2 * a)\n        return x\n    else:\n        x1 = (-b + delta ** 0.5) / (2 * a)\n        x2 = (-b - delta ** 0.5) / (2 * a)\n        return x1, x2\n    \n",
        "num_ids": 105
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # https://www.desmos.com/calculator/hxxljmkul7\n    x = (-b + math.sqrt(b*b - 4*a*c)) / 2*a\n    return x\n    \n",
        "num_ids": 57
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # directrix = -b / (2*a)\n    # return directrix\n    \n    \ndef parabola_directrix_formula(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    return -b / (2*a)\n",
        "num_ids": 15
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -1*b/2/a\n",
        "num_ids": 13
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    directrix = -b / (2 * a)\n    return directrix\n",
        "num_ids": 20
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4 * a * c\n    if delta < 0:\n        return None\n    elif delta == 0:\n        return -b / (2 * a)\n    else:\n        return -b - np.sqrt(delta) / (2 * a)\n",
        "num_ids": 70
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -b/2/a\n",
        "num_ids": 11
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -b/(2*a)\n    \ndef intersection_of_parabolas(a1, b1, c1, a2, b2, c2): \n    '''\n    Write a function to find the point of intersection of two parabolas.\n    '''\n    x = (-b1*c2 - b2*c1)/(c1*a2 - c2*a1)\n    y = (c1*a2 - c2*a1)/(c1*a2 - c2*a1)\n    return x, y\n",
        "num_ids": 68
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (b*b - 4*a*c)**0.5 / (2*a)\n",
        "num_ids": 26
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                return True\n    return False\n",
        "num_ids": 50
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n",
        "num_ids": 22
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    list1 = set(list1)\n    list2 = set(list2)\n    \n    if list1 & list2:\n        return True\n    else:\n        return False\n    \n    \ndef common_element_2(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    list1 = set(list1)\n    list2 = set(list2)\n",
        "num_ids": 22
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if not list1 or not list2:\n        return False\n    \n    if len(list1) < len(list2):\n        return common_element(list2, list1)\n    \n    smaller = list1 if len(list1) < len(list2) else list2\n    larger = list1 if len(list1) >= len(list2) else list2\n    \n    # two pointers\n    p1 = p2 = 0\n    while p1 < len(smaller) and p2 < len(larger):\n        if smaller[p1] == larger[p2]:\n            return True\n        elif smaller[p1] < larger[p2]:\n            p1 += 1\n        else:\n            p2 += 1\n    return False\n",
        "num_ids": 181
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # for i in list1:\n    #     for j in list2:\n    #         if i == j:\n    #             return True\n    # return False\n    return len(set(list1) & set(list2)) > 0\n",
        "num_ids": 59
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_element_list = []\n    for item1 in list1:\n        for item2 in list2:\n            if item1 == item2:\n                common_element_list.append(item1)\n    return len(common_element_list) > 0\n",
        "num_ids": 64
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if set(list1) & set(list2):\n        return True\n    else:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_element = set(list1).intersection(set(list2))\n    return len(common_element) > 0\n",
        "num_ids": 32
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for x in list1:\n        for y in list2:\n            if x == y:\n                return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return [item for item in list1 if item in list2]\n",
        "num_ids": 18
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1+base2)/2)*height\n",
        "num_ids": 15
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1+base2)/2)*height\n    \ndef median_square(side1,side2):\n    '''\n    Write a function to find the median area of a square.\n    '''\n    return side1*side2\n",
        "num_ids": 10
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 1/2 * (base1 + base2) * height\n",
        "num_ids": 18
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 0.5 * (base1 + base2) * height\n",
        "num_ids": 18
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = base1 + base2/2.0\n    return area*height\n    \nprint median_trapezium(4,6,8)\n",
        "num_ids": 37
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    #Calculate the lengths of the base and height of the triangle\n    length1 = base1 + base2\n    length2 = base1*base2/2\n    \n    #Calculate the median length by taking the average of the two lengths\n    return (length1 + length2)/2\n    \ndef test_median_trapezium():\n    '''\n    Write a unit test for the median_trapezium function.\n    '''\n    #test case 1\n    base1 = 10\n    base2 = 5\n    height = 8\n    assert median_trapezium(base1, base2, height) == 15\n    \n    #test case 2\n    base1 = 10\n    base2 = 5\n    height = 1\n    assert median_trapezium(base1, base2, height) == 5\n    \n    #test case 3\n    base1 = 10\n    base2 = 5\n    height = -5\n    assert median_trapezium(base1, base2, height) == 5\n    \n    #test case 4\n    base1 = 10\n    base2 = 5\n    height = 0\n    assert median_trapezium(base1, base2, height) == 5\n    \n    #test case 5\n    base1 = 10\n    base2 = 5\n    height = 9\n    assert median_trapezium(base1, base2, height) == 11\n    \n    #test case 6\n    base1 = 10\n    base2 = 5\n    height = 11\n    assert median_trapezium(base1, base2, height) == 16\n    \n    #test case 7\n    base1 = 10\n    base2 = 5\n    height = 15\n    assert median_trapezium(base1, base2, height) == 19\n    \n    #test case 8\n    base1 = 10\n    base2 = 5\n    height = 19\n    assert median_trapezium(base1, base2, height) == 19\n    \n    #test case 9\n    base1 = 10\n    base2 = 5\n    height = 21\n    assert median_trapezium(base1, base2, height) == 22\n    \n    #test case 10\n    base1 = 10\n    base2 = 5\n    height = 22\n    assert median_trapezium(base1, base2, height) == 22\n    \n    #test case 11\n    base1 = 10\n    base2 = 5\n    height = 23\n    assert median_trapezium(base1, base2, height) == 22\n    \n    #test case 12\n    base1 = 10\n    base2 = 5\n    height = 24\n    assert median_trapezium(base1, base2, height) == 22\n    \n    #test case 13\n    base1 = 10\n    base2 = 5\n    height = 25\n    assert median_trapezium(base1, base2, height) == 21\n    \n    #test case 14\n    base1 = 10\n    base2 = 5\n    height = 26\n    assert median_trapezium(base1, base2, height) == 22\n    \n    #test case 15\n    base1 = 10\n    base2 = 5\n    height = 27\n    assert median_trapezium(base1, base2, height) == 22\n    \n    #test case 16\n    base1 = 10\n    base2 = 5\n    height = 28\n    assert median_trapezium(base1, base2, height) == 22\n    \n    #test case 17\n    base1 = 10\n    base2 = 5\n    height = 29\n    assert median_trapezium(base1, base2, height) == 22\n    \n    #test case 18\n    base1 = 10\n    base2 = 5\n    height = 30\n    assert median_trapezium(base1, base2, height) == 22\n    \n    #test case 19\n    base1 = 10\n    base2 = 5\n    height = 31\n    assert median_trapezium(base1, base2, height) == 22\n    \n    #test case 20\n    base1 = 10\n    base2 = 5\n    height = 32\n    assert median_trapezium(base1, base2, height) == 21\n    \n    #test case 21\n    base1 = 10\n    base2 = 5\n    height = 33\n    assert median_trapezium(base1, base2, height) == 22\n    \n    #test case 22\n    base1 = 10\n    base2 = 5\n    height = 34\n    assert median_trapezium(base1, base2, height) == 22\n    \n    #test case 23\n    base1 = 10\n    base2 = 5\n    height = 35\n    assert median_trapezium(base1, base2, height) == 22\n    \n    #test case 24\n    base1 = 10\n    base2 = 5\n    height = 36\n    assert median_trapezium(base1, base2, height) == 22\n    \n    #test case 25\n    base1 = 10\n    base2 = 5\n    height = 37\n    assert median_trapezium(base1, base2, height) == 22\n    \n    #test case 26\n    base1 = 10\n    base2 = 5\n    height = 38\n    assert median_trapezium(base1, base2, height) == 22\n    \n    #test case 27\n    base1 = 10\n    base2 = 5\n    height = 39\n    assert median_trapezium(base1, base2, height) == 22\n    \n    #test case 28\n    base1 = 10\n    base2 = 5\n    height = 40\n    assert median_trapezium(base1, base2, height) == 22\n    \n    #test case 29\n    base1 = 10\n    base2 = 5\n    height = 41\n    assert median_trapezium(base1, base2, height) == 22\n    \n    #test case 30\n    base1 = 10\n    base2 = 5\n    height = 42\n    assert median_trapezium(base1, base2, height) == 21\n    \n    #test case 31\n    base1 = 10\n    base2 = 5\n    height = 43\n    assert median_trapezium(base1, base2, height) == 22\n    \n    #test case 32\n    base1 = 10\n    base2 = 5\n    height = 44\n    assert median_trapezium(base1, base2, height) == 22\n    \n    #test case 33\n    base1 = 10\n    base2 = 5\n    height = 45\n    assert median_trapezium(base1, base2, height) == 22\n    \n    #test case 34\n    base1 = 10\n    base2 = 5\n    height = 46\n    assert median_trapezium(base1, base2, height) == 22\n    \n    #test case 35\n    base1 = 10\n    base2 = 5\n    height = 47\n    assert median_trapezium(base1, base2, height) == 22\n    \n    #test case 36\n    base1 = 10\n    base2 = 5\n    height = 48\n    assert median_trapezium(base1, base2, height) == 22\n    \n    #test case 37\n    base1 = 10\n    base2 = 5\n    height = 49\n    assert median_trapezium(base1, base2, height) == 22\n    \n    #test case 38\n    base1 = 10\n    base2 = 5\n    height = 50\n    assert median_trapezium(base1, base2, height) == 22\n    \n    #test case 39\n    base1 = 10\n    base2 = 5\n    height = 51\n    assert median_trapezium(base1, base2, height) == 22\n    \n    #test case 40\n    base1 = 10\n    base2 = 5\n    height = 52\n    assert median_trapezium(base1, base2, height) == 22\n    \n    #test case 41\n    base1 = 10\n    base2 = 5\n    height = 53\n    assert median_trapezium(base1, base2, height) == 22\n    \n    #test case 42\n    base1 = 10\n    base2 = 5\n    height = 54\n    assert median_trapezium(base1, base2, height) == 22\n    \n    #test case 43\n    base1 = 10\n    base2 = 5\n    height = 55\n    assert median_trapezium(base1, base2, height) == 22\n    \n    #test case 44\n    base1 = 1",
        "num_ids": 1906
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1+base2)/2)*height\ndef median_triangle(side1,side2,side3):\n    '''\n    Write a function to find the median length of a triangle.\n    '''\n    return ((side1+side2+side3)/2)\ndef median_triangle_area(base1,base2,base3):\n    '''\n    Write a function to find the median area of a triangle.\n    '''\n    return (base1*base2)/2\ndef median_circle(radius):\n    '''\n    Write a function to find the median length of a circle.\n    '''\n    return (3.14159*(radius**2))/2\ndef median_circle_area(radius):\n    '''\n    Write a function to find the median area of a circle.\n    '''\n    return (3.14159*radius**2)\ndef median_cono(radius):\n    '''\n    Write a function to find the median length of a cone.\n    '''\n    return (3.14159*radius*(radius+math.sqrt(radius**2+radius**2)))/2\ndef median_cono_area(radius):\n    '''\n    Write a function to find the median area of a cone.\n    '''\n    return (3.14159*radius**2*(math.pi - math.sqrt(math.fabs(radius**2-radius**2))))\ndef median_trapezoid(base1,base2,base3,height):\n    '''\n    Write a function to find the median length of a trapezoid.\n    '''\n    return ((base1+base2+base3)/2)*height\ndef median_trapezoid_area(base1,base2,base3,height):\n    '''\n    Write a function to find the median area of a trapezoid.\n    '''\n    return ((base1+base2+base3)/2)*height\ndef median_rectangle(side1,side2):\n    '''\n    Write a function to find the median length of a rectangle.\n    '''\n    return (side1+side2)/2\ndef median_rectangle_area(side1,side2):\n    '''\n    Write a function to find the median area of a rectangle.\n    '''\n    return side1*side2\ndef median_square(side):\n    '''\n    Write a function to find the median length of a square.\n    '''\n    return side**2\ndef median_square_area(side):\n    '''\n    Write a function to find the median area of a square.\n    '''\n    return side**2\ndef median_rectangle_area(side1,side2):\n    '''\n    Write a function to find the median area of a rectangle.\n    '''\n    return side1*side2\ndef median_triangle_area(side1,side2,side3):\n    '''\n    Write a function to find the median area of a triangle.\n    '''\n    return (side1*side2)/2\ndef median_triangle_area(side1,side2,side3):\n    '''\n    Write a function to find the median area of a triangle.\n    '''\n    return (side1*side2)/2\ndef median_rectangle_area(side1,side2):\n    '''\n    Write a function to find the median area of a rectangle.\n    '''\n    return side1*side2\ndef median_circle_area(radius):\n    '''\n    Write a function to find the median area of a circle.\n    '''\n    return (3.14159*radius**2)\ndef median_circle_area(radius):\n    '''\n    Write a function to find the median area of a circle.\n    '''\n    return (3.14159*radius**2)\ndef median_cono_area(radius):\n    '''\n    Write a function to find the median area of a circle.\n    '''\n    return (3.14159*radius**2)\ndef median_cono_area(radius):\n    '''\n    Write a function to find the median area of a circle.\n    '''\n    return (3.14159*radius**2)\ndef median_triangle_area(base1,base2,base3):\n    '''\n    Write a function to find the median area of a triangle.\n    '''\n    return (base1*base2)/2\ndef median_triangle_area(base1,base2,base3):\n    '''\n    Write a function to find the median area of a triangle.\n    '''\n    return (base1*base2)/2\ndef median_triangle_area(base1,base2,base3):\n    '''\n    Write a function to find the median area of a triangle.\n    '''\n    return (base1*base2)/2\ndef median_triangle_area(base1,base2,base3):\n    '''\n    Write a function to find the median area of a triangle.\n    '''\n    return (base1*base2)/2\ndef median_circle_area(radius):\n    '''\n    Write a function to find the median area of a circle.\n    '''\n    return (3.14159*radius**2)\ndef median_circle_area(radius):\n    '''\n    Write a function to find the median area of a circle.\n    '''\n    return (3.14159*radius**2)\ndef median_triangle_area(base1,base2,base3):\n    '''\n    Write a function to find the median area of a triangle.\n    '''\n    return (base1*base2)/2\ndef median_triangle_area(base1,base2,base3):\n    '''\n    Write a function to find the median area of a triangle.\n    '''\n    return (base1*base2)/2\ndef median_rectangle_area(side1,side2):\n    '''\n    Write a function to find the median area of a rectangle.\n    '''\n    return side1*side2\ndef median_rectangle_area(side1,side2):\n    '''\n    Write a function to find the median area of a rectangle.\n    '''\n    return side1*side2\ndef median_square_area(side):\n    '''\n    Write a function to find the median area of a square.\n    '''\n    return side**2\ndef median_square_area(side):\n    '''\n    Write a function to find the median area of a square.\n    '''\n    return side**2\ndef median_rectangle_area(side1,side2):\n    '''\n    Write a function to find the median area of a rectangle.\n    '''\n    return side1*side2\ndef median_triangle_area(base1,base2,base3):\n    '''\n    Write a function to find the median area of a triangle.\n    '''\n    return (base1*base2)/2\ndef median_triangle_area(base1,base2,base3):\n    '''\n    Write a function to find the median area of a triangle.\n    '''\n    return (base1*base2)/2\ndef median_rectangle_area(side1,side2):\n    '''\n    Write a function to find the median area of a rectangle.\n    '''\n    return side1*side2\ndef median_triangle_area(base1,base2,base3):\n    '''\n    Write a function to find the median area of a triangle.\n    '''\n    return (base1*base2)/2\ndef median_rectangle_area(side1,side2):\n    '''\n    Write a function to find the median area of a rectangle.\n    '''\n    return side1*side2\ndef median_circle_area(radius):\n    '''\n    Write a function to find the median area of a circle.\n    '''\n    return (3.14159*radius**2)\ndef median_circle_area(radius):\n    '''\n    Write a function to find the median area of a circle.\n    '''\n    return (3.14159*radius**2)\ndef median_triangle_area(base1,base2,base3):\n    '''\n    Write a function to find the median area of a triangle.\n    '''\n    return (base1*base2)/2\ndef median_triangle_area(base1,base2,base3):\n    ''",
        "num_ids": 33
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    l1=float(base1)\n    l2=float(base2)\n    h=float(height)\n    \n    return (l1+l2+h)/2\n",
        "num_ids": 45
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    trapezium_area=base1+base2+height\n    return(trapezium_area/2)\n",
        "num_ids": 29
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return height*0.5\n",
        "num_ids": 10
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    number = int(number)\n    if number > arr[-1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n        else:\n            return False\n",
        "num_ids": 36
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[-1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n",
        "num_ids": 32
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    arr.sort()\n    return arr[-1] > number\n",
        "num_ids": 18
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return not any(i >= number for i in arr)\n",
        "num_ids": 16
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if number > arr[i]:\n            return True\n    return False\n",
        "num_ids": 31
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n",
        "num_ids": 24
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr[-1] < number:\n        return True\n    return False\n",
        "num_ids": 21
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False\n",
        "num_ids": 24
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #examples:\n    #txt_match_one(\"abb\") --> True\n    #txt_match_one(\"abc\") --> False\n    #txt_match_one(\"ababbb\") --> True\n    #txt_match_one(\"abbbb\") --> False\n    #txt_match_one(\"ab\") --> False\n    #txt_match_one(\"aaabbbcc\") --> True\n    #txt_match_one(\"aab\") --> False\n    #txt_match_one(\"aabbb\") --> True\n    #txt_match_one(\"abbb\") --> False\n    #txt_match_one(\"ab\") --> False\n",
        "num_ids": 148
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = 'ab+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n",
        "num_ids": 41
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #pattern = re.compile(r'a{1}.*?b')\n    #pattern = re.compile(r'a(.*?)b')\n    #pattern = re.compile(r'a(.*?)b',re.DOTALL)\n    #pattern = re.compile(r'a(.*?)b',re.DOTALL)\n    #pattern = re.compile(r'a(.*?)b',re.DOTALL)\n    pattern = re.compile(r'a(.*?)b',re.DOTALL)\n    #pattern = re.compile(r'a(.*?)b',re.DOTALL)\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None\n",
        "num_ids": 189
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.match('a+b', text)\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or one 'b'.\n    '''\n    return re.match('a?b', text)\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    return re.match('a+b', text)\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    return re.match('a*b', text)\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    return re.match('a.b', text)\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    return re.match('a+b', text)\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    return re.match('a?b', text)\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    return re.match('a*b', text)\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    return re.match('a.b', text)\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    return re.match('a+b', text)\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    return re.match('a?b', text)\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    return re.match('a*b', text)\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    return re.match('a+b', text)\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    return re.match('a?b', text)\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    return re.match('a*b', text)\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    return re.match('a+b', text)\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    return re.match('a?b', text)\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    return re.match('a*b', text)\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    return re.match('a.b', text)\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    return re.match('a+b', text)\ndef text_match_twenty_one(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    return re.match('a?b', text)\ndef text_match_twenty_two(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    return re.match('a*b', text)\ndef text_match_twenty_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    return re.match('a+b', text)\ndef text_match_twenty_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    return re.match('a?b', text)\ndef text_match_twenty_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    return re.match('a*b', text)\ndef text_match_twenty_six(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    return re.match('a.b', text)\ndef text_match_twenty_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    return re.match('a+b', text)\ndef text_match_twenty_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    return re.match('a?b', text)\ndef text_match_twenty_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    return re.match('a*b', text)\ndef text_match_thirty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    return re.match('a+b', text)\ndef text_match_thirty_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    return re.match('a?b', text)\ndef text_match_thirty_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    return re.match('a*b', text)\ndef text_match_thirty_three(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    return re.match('a.b', text)\ndef text_match_thirty_four(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    return re.match('a+b', text)\ndef text_match_thirty_five(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    return re.match('a?b', text)\ndef text_match_thirty_six(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    return re.match('a*b', text)\ndef text_match_thirty_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    return re.match('a+b', text)\ndef text_match_thirty_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    return re.match('a?b', text)\ndef text_match_t",
        "num_ids": 21
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.match(text)\n",
        "num_ids": 26
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.match(r'ab+', text)\n    if match:\n        print(match.group())\n    else:\n        print('No match')\n",
        "num_ids": 41
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.match(r'a+b', text)\n",
        "num_ids": 17
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.match(r'a+b',text)\n    return result\n",
        "num_ids": 22
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"(a)(.*?)(b)\")\n    match = pattern.search(text)\n    if match:\n        print(\"Match:\",match.group())\n    else:\n        print(\"No match\")\n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"(a)(.*?)(b)\")\n    match = pattern.search(text)\n    if match:\n        print(\"Match:\",match.group())\n        print(\"Match:\",match.group(2))\n    else:\n        print(\"No match\")\n        \ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"(a)(.*?)(b)\")\n    match = pattern.search(text)\n    if match:\n        print(\"Match:\",match.group())\n        print(\"Match:\",match.group(1))\n        print(\"Match:\",match.group(2))\n    else:\n        print(\"No match\")\n        \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"(a)(.*?)(b)\")\n    match = pattern.search(text)\n    if match:\n        print(\"Match:\",match.group())\n        print(\"Match:\",match.group(1))\n        print(\"Match:\",match.group(2))\n        print(\"Match:\",match.group(3))\n    else:\n        print(\"No match\")\n        \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"(a)(.*?)(b)\")\n    match = pattern.search(text)\n    if match:\n        print(\"Match:\",match.group())\n        print(\"Match:\",match.group(1))\n        print(\"Match:\",match.group(2))\n        print(\"Match:\",match.group(3))\n        print(\"Match:\",match.group(2))\n    else:\n        print(\"No match\")\n        \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"(a)(.*?)(b)\")\n    match = pattern.search(text)\n    if match:\n        print(\"Match:\",match.group())\n        print(\"Match:\",match.group(1))\n        print(\"Match:\",match.group(2))\n        print(\"Match:\",match.group(3))\n        print(\"Match:\",match.group(1))\n        print(\"Match:\",match.group(3))\n        print(\"Match:\",match.group(2))\n    else:\n        print(\"No match\")\n        \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"(a)(.*?)(b)\")\n    match = pattern.search(text)\n    if match:\n        print(\"Match:\",match.group())\n        print(\"Match:\",match.group(1))\n        print(\"Match:\",match.group(2))\n        print(\"Match:\",match.group(3))\n        print(\"Match:\",match.group(1))\n        print(\"Match:\",match.group(3))\n        print(\"Match:\",match.group(2))\n        print(\"Match:\",match.group(2))\n    else:\n        print(\"No match\")\n        \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"(a)(.*?)(b)\")\n    match = pattern.search(text)\n    if match:\n        print(\"Match:\",match.group())\n        print(\"Match:\",match.group(1))\n        print(\"Match:\",match.group(2))\n        print(\"Match:\",match.group(3))\n        print(\"Match:\",match.group(1))\n        print(\"Match:\",match.group(3))\n        print(\"Match:\",match.group(2))\n        print(\"Match:\",match.group(2))\n    else:\n        print(\"No match\")\n        \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"(a)(.*?)(b)\")\n    match = pattern.search(text)\n    if match:\n        print(\"Match:\",match.group())\n        print(\"Match:\",match.group(1))\n        print(\"Match:\",match.group(2))\n        print(\"Match:\",match.group(3))\n        print(\"Match:\",match.group(1))\n        print(\"Match:\",match.group(3))\n        print(\"Match:\",match.group(2))\n        print(\"Match:\",match.group(2))\n    else:\n        print(\"No match\")\n        \ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"(a)(.*?)(b)\")\n    match = pattern.search(text)\n    if match:\n        print(\"Match:\",match.group())\n        print(\"Match:\",match.group(1))\n        print(\"Match:\",match.group(2))\n        print(\"Match:\",match.group(3))\n        print(\"Match:\",match.group(1))\n        print(\"Match:\",match.group(3))\n        print(\"Match:\",match.group(2))\n        print(\"Match:\",match.group(2))\n    else:\n        print(\"No match\")\n        \ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"(a)(.*?)(b)\")\n    match = pattern.search(text)\n    if match:\n        print(\"Match:\",match.group())\n        print(\"Match:\",match.group(1))\n        print(\"Match:\",match.group(2))\n        print(\"Match:\",match.group(3))\n        print(\"Match:\",match.group(1))\n        print(\"Match:\",match.group(3))\n        print(\"Match:\",match.group(2))\n        print(\"Match:\",match.group(2))\n    else:\n        print(\"No match\")\n        \ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"(a)(.*?)(b)\")\n    match = pattern.search(text)\n    if match:\n        print(\"Match:\",match.group())\n        print(\"Match:\",match.group(1))\n        print(\"Match:\",match.group(2))\n        print(\"Match:\",match.group(3))\n        print(\"Match:\",match.group(1))\n        print(\"Match:\",match.group(3))\n        print(\"Match:\",match.group(2))\n        print(\"Match:\",match.group(2))\n    else:\n        print(\"No match\")\n        \ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"(a)(.*?)(b)\")\n    match = pattern.search(text)\n    if match:\n        print(\"Match:\",match.group())\n        print(\"Match:\",match.group(1))\n        print(\"Match:\",match.group(2))\n        print(\"Match:\",match.group(3))\n    ",
        "num_ids": 87
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"ab+\"\n    if re.search(pattern, text):\n        return True\n    return False\n",
        "num_ids": 30
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    elif n % 10 == 0 :\n        return last_Digit(n / 10)\n    else :\n        return last_Digit(n / 10) + n % 10\n",
        "num_ids": 55
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last = 0\n    while(n!= 0) :\n        last = n % 10\n        n = n/10\n    return last\n",
        "num_ids": 35
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n",
        "num_ids": 14
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0 :\n        return None\n    return n % 10\n",
        "num_ids": 19
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n<10 :\n        return n\n    else :\n        return last_Digit(n//10)\n",
        "num_ids": 29
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if (n < 0) :\n        return -1\n    elif (n < 10) :\n        return n\n    else :\n        return last_Digit(n/10)\n",
        "num_ids": 46
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_2(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_3(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_4(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_5(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_6(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_7(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_8(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_9(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_10(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_11(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_12(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_13(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_14(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_15(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_16(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_17(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_18(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_19(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_20(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_21(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_22(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_23(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_24(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_25(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_26(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_27(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_28(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_29(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_30(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_31(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_32(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_33(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_34(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_35(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_36(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_37(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_38(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_39(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_40(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_41(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_42(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_43(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_44(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_45(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_46(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_47(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_48(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\ndef last_Digit_49(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '",
        "num_ids": 20
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n",
        "num_ids": 8
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "num_ids": 8
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(n%10)\n",
        "num_ids": 11
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in range(0, len(list1)):\n        if list1[i] < 0:\n            list2.append(list1[i])\n    return list2\n",
        "num_ids": 51
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n",
        "num_ids": 37
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2=[]\n    for i in list1:\n        if i<0:\n            list2.append(i)\n    return list2\nprint neg_nos([2,4,-8,3,1,-3])\n",
        "num_ids": 55
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list1 = [i for i in list1 if i < 0]\n    return list1\n    \n    \n",
        "num_ids": 28
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list_negative = []\n    for i in list1:\n        if i < 0:\n            list_negative.append(i)\n    return list_negative\n",
        "num_ids": 40
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in list1:\n        if i < 0:\n            print(i)\n            \n            \n            \ndef count_positives_sum_negatives(list1):\n    '''\n    Write a python function to return the sum of all the positive numbers and sum of all the negative numbers in a list\n    '''\n    count = 0\n    sum_pos = 0\n    sum_neg = 0\n    for i in list1:\n        if i > 0:\n            count = count + 1\n            sum_pos = sum_pos + i\n        elif i < 0:\n            count = count + 1\n            sum_neg = sum_neg + i\n    print(count)\n    print(sum_pos)\n    print(sum_neg)\n    \n",
        "num_ids": 104
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = [item for item in list1 if item < 0]\n    return result\n",
        "num_ids": 22
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in list1:\n        if i < 0:\n            list1.remove(i)\n    return list1\n",
        "num_ids": 31
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_nos = []\n    for num in list1:\n        negative_nos.append(-num)\n    return negative_nos\n    \ndef uniq_nos(list1):\n    '''\n    Write a python function to return the unique numbers in a list.\n    '''\n    uniq_nos = []\n    for num in list1:\n        if num not in uniq_nos:\n            uniq_nos.append(num)\n    return uniq_nos\n",
        "num_ids": 47
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for num in list1:\n        if num < 0:\n            return num\n    return False\n    \ndef even_nos(list1):\n    '''\n    Write a python function to return the even numbers in a list.\n    '''\n    for num in list1:\n        if num % 2 == 0:\n            return num\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # str1 = str1.strip()\n    # str1 = \"\".join(str1.split(\" \"))\n    # str1 = \"\".join(str1.split(\"_\"))\n    # str1 = \"\".join(str1.split(\"-\"))\n    # str1 = \"\".join(str1.split(\".\"))\n    str1 = ''.join(filter(lambda x: ord(x)%2==0, str1))\n    return str1\n",
        "num_ids": 112
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    list1 = []\n    list2 = []\n    for each in str1:\n        if each not in list1:\n            list1.append(each)\n    for each in list1:\n        if each.isupper():\n            list2.append(each)\n    for each in list1:\n        if each not in list2:\n            list1.remove(each)\n    return ''.join(list1)\n",
        "num_ids": 101
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join([x for i,x in enumerate(str1) if i%2==0])\n",
        "num_ids": 28
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = ''\n    for i in str1:\n        if int(ord(i)) % 2 == 0:\n            str2 += i\n    return str2\n",
        "num_ids": 41
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for i in range(0, len(str1)):\n        if i % 2 == 0:\n            result = result + str1[i]\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    list = []\n    for s in str1:\n        if s.isalpha() and ord(s) % 2 == 0:\n            list.append(s)\n    str2 = ''.join(list)\n    return str2\n",
        "num_ids": 57
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(str1.split('e'))\n",
        "num_ids": 17
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            new_str += str1[i]\n    return new_str\n",
        "num_ids": 48
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = str1.replace(\"a\", \"\")\n    str1 = str1.replace(\"e\", \"\")\n    str1 = str1.replace(\"i\", \"\")\n    str1 = str1.replace(\"o\", \"\")\n    str1 = str1.replace(\"u\", \"\")\n    return str1\n",
        "num_ids": 77
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in str1:\n        if ord(i) % 2 == 0:\n            str1 = str1.replace(i, \"\")\n    return str1\n",
        "num_ids": 41
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pairs = []\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][1] == test_list[j][0] and test_list[i][1] not in pairs:\n                pairs.append((test_list[i][1], test_list[j][1]))\n            if test_list[j][1] == test_list[i][0] and test_list[j][1] not in pairs:\n                pairs.append((test_list[j][1], test_list[i][1]))\n    return len(pairs)\n",
        "num_ids": 164
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    results = 0\n    for i, item in enumerate(test_list):\n        for j in range(i+1, len(test_list)):\n            if item[0] == test_list[j][1] and item[1] == test_list[j][0]:\n                results += 1\n    return results\n",
        "num_ids": 78
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    result = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if (test_list[i],test_list[j]) == (test_list[j],test_list[i]):\n                result += 1\n    return result\n",
        "num_ids": 79
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return len(test_list) * (len(test_list) - 1) / 2\n",
        "num_ids": 24
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    answer = 0\n    for i in xrange(len(test_list)-1):\n        for j in xrange(i+1,len(test_list)):\n            if test_list[i] > test_list[j]:\n                answer = answer + 1\n    return answer\n",
        "num_ids": 69
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    if len(test_list)<2:\n        return 0\n    new_list = []\n    for item in test_list:\n        new_list.append(item)\n    new_list.sort(key=lambda x: x[0])\n    count = 0\n    for i in xrange(len(new_list)-1):\n        if new_list[i][1] < new_list[i+1][0]:\n            count += 1\n    return count\n",
        "num_ids": 113
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in xrange(len(test_list)):\n        for j in xrange(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) == (test_list[j], test_list[i]):\n                count += 1\n    return count\n",
        "num_ids": 81
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    tuple_dict = {}\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            tuple_dict[(i,j)] = 0\n",
        "num_ids": 56
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    forward_count = 0\n    backward_count = 0\n    \n    for x in test_list:\n        if (x[0] == x[1]):\n            forward_count += 1\n        elif (x[0] == x[2] and x[1] == x[3]):\n            backward_count += 1\n    \n    return forward_count, backward_count\n",
        "num_ids": 96
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Make a list out of the single integer\n    return int(''.join([str(e) for e in L]))\n",
        "num_ids": 31
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str,L)))\n",
        "num_ids": 16
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    number = 0\n    for i in L:\n        number = number * 10 + i\n    return number\n",
        "num_ids": 27
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    elif len(L) == 1:\n        return L[0]\n    else:\n        return L[0]*10**(len(L)-1) + multiple_to_single(L[1:])\n",
        "num_ids": 67
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    elif len(L) == 1:\n        return L[0]\n    else:\n        return L[0] * 10 ** len(L) + multiple_to_single(L[1:])\n",
        "num_ids": 64
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # i = 0\n    # for j in range(len(L)):\n    #     i += L[j] * (10 ** j)\n    # return i\n    return int(''.join([str(e) for e in L]))\n",
        "num_ids": 60
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(x) for x in L))\n    \n    \ndef join_all(L):\n    '''\n    Write a function to join all elements in a list together in the following format:\n    \n    \"element 1: element 2: element 3\"\n    \n    for example:\n    \n    join_all(['a', 'b', 'c', 'd']) # 'a: b: c: d'\n    '''\n    return ':'.join(L)\n    \ndef all_but_last(L):\n    '''\n    Write a function to return a list containing all the elements from the original list except the last one.\n    \n    For example:\n    \n    all_but_last([0,1,2,3,4,5]) # [0,1,2,3,4]\n    all_but_last([0,1,2,3,4,5,6]) # [0,1,2,3,4,5]\n    all_but_last([]) # []\n    '''\n    return L[:-1]\n    \ndef remove_duplicates(L):\n    '''\n    Write a function to remove duplicates from a list.\n    \n    For example:\n    \n    remove_duplicates([0,1,1,1,1,2,2,3,3,3]) # [0,1,2,3]\n    remove_duplicates([]) # []\n    '''\n    return list(set(L))\n    \ndef append_to_each_item(L, x):\n    '''\n    Write a function to append an integer x to each item in a list.\n    \n    For example:\n    \n    append_to_each_item([1,2,3], 4) # [1,2,3,4,4,4]\n    '''\n    return [x + y for y in L]\n    \ndef every_nth(L, n):\n    '''\n    Write a function to return a list containing every nth element from the original list.\n    \n    For example:\n    \n    every_nth([0,1,2,3,4,5], 2) # [0,2,4]\n    every_nth([0,1,2,3,4,5], 4) # [0]\n    every_nth([0,1,2,3,4,5], 0) # []\n    every_nth([0,1,2,3,4,5], 6) # []\n    '''\n    return L[n::n]\n    \ndef split_by_index(L, indices):\n    '''\n    Write a function to split a list into a list of lists,\n    where each internal list contains the values from one of the indices in the original list.\n    \n    For example:\n    \n    split_by_index([1,2,3,4,5,6,7], [3,7]) # [[1,2,4],[5,6,7]]\n    split_by_index([1,2,3,4,5,6,7], [3,5]) # [[1,2,3,4],[6,7]]\n    split_by_index([1,2,3,4,5,6,7], [3,4,5]) # [[1,2,3,4],[5,6,7]]\n    split_by_index([1,2,3,4,5,6,7], [3,5,6,7]) # [[1,2,3,4,5,6,7]]\n    split_by_index([1,2,3,4,5,6,7], []) # [[1,2,3,4,5,6,7]]\n    '''\n    return [L[i::indices.count(i)] for i in indices]\n    \ndef flatten(L):\n    '''\n    Write a function to flatten a list of lists into a single list.\n    \n    For example:\n    \n    flatten([[0,1], [2,3]]) # [0,1,2,3]\n    flatten([[0,1], [2,3], [4,5]]) # [0,1,2,3,4,5]\n    '''\n    return sum(L, [])\n    \ndef count_items(L, x):\n    '''\n    Write a function to count the number of occurrences of x in a list.\n    \n    For example:\n    \n    count_items([1,2,3,4,1], 1) # 2\n    count_items([1,2,3,4,1], 2) # 1\n    count_items([1,2,3,4,1], 3) # 0\n    '''\n    return L.count(x)\n    \ndef odd_or_even(L):\n    '''\n    Write a function to determine whether each element in a list is an odd or even number.\n    \n    For example:\n    \n    odd_or_even([0,1,2,3,4,5]) # True\n    odd_or_even([-1,-2,-3,-4,-5]) # True\n    odd_or_even([-1,-2,-3,-4,5]) # False\n    '''\n    return all(x % 2 == 0 for x in L)\n    \ndef flatten_depth(L, depth):\n    '''\n    Write a function to flatten a list, where each element is a list,\n    and all the internal lists are of a particular depth.\n    \n    For example:\n    \n    flatten_depth([[[0,1],[2,3]], [4,5,6]], 1) # [[0,1],[2,3],[4,5,6]]\n    flatten_depth([[[0,1],[2,3]], [4,5,6]], 2) # [[[0,1],[2,3]],[4,5,6]]\n    flatten_depth([[[0,1],[2,3]], [4,5,6]], 3) # [[[0,1],[2,3]],[4,5,6]]\n    '''\n    return sum([flatten_depth(x, depth - 1) for x in L], []) if depth > 0 else L\n    \ndef find_max_length(L):\n    '''\n    Write a function to return the length of the longest common prefix\n    (prefix) between two strings.\n    \n    For example:\n    \n    find_max_length(['abc', 'abcdef']) # 3\n    find_max_length(['abc', 'abcd', 'abcd']) # 1\n    find_max_length(['abc', 'abd', 'abcd']) # 1\n    find_max_length(['abcd', 'abc', 'abcd']) # 3\n    '''\n    return len(L[0]) if len(L) > 0 else 0\n    \ndef remove_all(L, x):\n    '''\n    Write a function to remove all occurrences of an element from a list.\n    \n    For example:\n    \n    remove_all([1,2,1,2], 1) # [2,2]\n    remove_all([1,2,1,2], 2) # [1,1]\n    remove_all([1,2,1,2], 3) # []\n    remove_all([], 1) # []\n    remove_all([1,2,1,2], 1) # [2,2]\n    remove_all([1,2,1,2], 1) # []\n    remove_all([1,2,1,2], 1) # [2,2]\n    '''\n    return [x for x in L if x!= x]\n    \ndef unique_by_sorting(L):\n    '''\n    Write a function to remove duplicates from a list,\n    where each element only occurs once.\n    \n    For example:\n    \n    unique_by_sorting([1,1,2,2,3,3]) # [1,2,3]\n    unique_by_sorting([1,1,2,2,3,3,3,3,3,3,3,3,3,3,3]) # [1,2,3,3]\n    '''\n    return sorted(set(L), key = L.index)\n    \ndef reverse(L):\n    '''\n    Write a function to reverse a list in place.\n    \n    For example:\n    \n    revers",
        "num_ids": 26
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    if len(L) == 1:\n        return L[0]\n    if len(L) == 2:\n        return L[0] + L[1]\n    return L[0] + L[1] + multiple_to_single(L[2:])\n",
        "num_ids": 79
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    else:\n        return L[0] * 10**(len(L)-1) + multiple_to_single(L[1:])\n",
        "num_ids": 49
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(i) for i in L))\n",
        "num_ids": 19
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pat = re.compile(r'(?<=\\w)ad(?=\\s)')\n    m = pat.search(text)\n    # print m.group()\n    pos = []\n    if m:\n        pos.append(m.start())\n        pos.append(m.end())\n    # print pos\n    return pos\n",
        "num_ids": 85
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    list1=re.findall('ADV',text)\n    list2=[]\n    for word in list1:\n        temp=re.search('ADV',text)\n        list2.append(temp.span())\n    return list2\n",
        "num_ids": 60
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    positions = []\n    for m in re.finditer('adverb', text):\n        positions.append(m.start())\n    return positions\n",
        "num_ids": 38
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # text = input(\"enter the sentence: \")\n    re_adverb = re.compile(r'\\b(to|in|in|under|above|behind|after)\\b',re.I)\n    search_result = re_adverb.search(text)\n    if search_result:\n        print(search_result.group())\n        print(\"{} position is {}\".format(search_result.group(),search_result.start()))\n    else:\n        print(\"no adverb found\")\n",
        "num_ids": 122
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = '<wf>?<adverb>'\n    results = re.findall(pattern, text)\n    for i in results:\n        print i[0]\n",
        "num_ids": 44
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #for testing\n    #text = 'This is a test example, he said, \"what is the meaning of life?\"'\n    \n    #initialise regexes\n    url_regex = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'\n    email_regex = r'[\\w\\-][\\w\\-\\.]*[\\w\\-]+@[\\w\\-][\\w\\-\\.]*[\\w\\-]+'\n    emoticon_regex = r':\\-?\\)|;\\)|:-\\)|:\\]|:-3|=\\)|:3|:>|8|x|X|:-}|:o|:-}|:O|=O|=\\-\\]|:P|:p|=P|:p|:-P|:\\-P|:P|X-p|x-p|:p|XP|xp|;P|P|x-p|xp|:-p|:p|=p|:-b|:b|;b|B|:-/|:o|;O|:-/|:O|=O|=\\-o|:O|=o|:-O|:o|:-O|:0|:()|:c|:C|:<|:-c|:C|:<|:-<|:L|:S|:S|:-S|:S|:S|D|:-D|:D|;D|:-D|=D|:D|:-P|:p|:p|:P|:-P|:P|x-p|xp|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P|:-p|:P|=p|:-p|:p|:P",
        "num_ids": 2008
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    matches = re.findall(r'(?<![a-z])[a-z]+', text)\n    for match in matches:\n        print match,\n",
        "num_ids": 43
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pos = re.compile(r'(?<=\\w)[\\'\\w-]+')\n    word_list = pos.findall(text)\n    return word_list\n",
        "num_ids": 45
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # initialise all to negative so that it will not trigger the first if statement\n    prev_adverb_start = -1\n    prev_adverb_end = -1\n    prev_adverb_start_index = -1\n    prev_adverb_end_index = -1\n    is_adverb_given = False\n    \n    for i in range(len(text)):\n        word = text[i]\n        # if word is a verb or adverb, find its position\n        if is_adverb(word):\n            # if is_adverb(word) is true, then set the prev_adverb_start and prev_adverb_end to the index of the current adverb\n            # also set the is_adverb_given to True, so that the condition in the next loop does not trigger\n            is_adverb_given = True\n            prev_adverb_start = i\n            prev_adverb_end = i\n            prev_adverb_start_index = i\n            prev_adverb_end_index = i\n        \n        if is_adverb_given and i == len(text) - 1:\n            # if the loop breaks when i is the last index of text, then the adverb is the last word\n            # so set the index of the adverb to the length of the text\n            prev_adverb_end = len(text)\n            prev_adverb_end_index = len(text)\n        \n        # find the index of the adverb that is before the current adverb\n        # when the current adverb is a adverb or a non-adverb, then the previous adverb is the current adverb\n        if is_adverb_given and is_adverb(text[i-1]) and i!= 0:\n            prev_adverb_end = i - 1\n            prev_adverb_end_index = i - 1\n    \n    return prev_adverb_start_index, prev_adverb_end_index\n    \ndef is_adverb(word):\n    '''\n    Write a function to check whether a given word is an adverb or not.\n    '''\n    # if it is a verb or an adverb, then return true\n    if word in ['be', 'do', 'go', 'have', 'has', 'has', 'having','may','might','must', 'need', 'ought','shall','should', 'will', 'would']:\n        return True\n    \n    if word in ['can','may','must', 'need', 'ought','shall','should', 'will', 'would']:\n        return True\n    \n    if word in ['going','must','should', 'would','may','might', 'need', 'ought','shall','shall','should', 'will', 'would', 'can']:\n        return True\n    \n    if word in ['be', 'do', 'go', 'have', 'has', 'had', 'having','may','might','must', 'need', 'ought','shall','should', 'will', 'would']:\n        return True\n    \n    if word in ['about', 'above', 'across', 'after', 'along', 'around', 'at', 'before', 'behind', 'below', 'beneath', 'beside', 'besides', 'between', 'beyond', 'by', 'despite', 'except', 'except', 'excluding', 'for', 'from', 'in', 'inside', 'into', 'like', 'of', 'off', 'on', 'onto', 'out', 'outside', 'over','since', 'through', 'till', 'to', 'toward', 'under', 'underneath', 'unlike', 'until', 'up', 'upon', 'with', 'within', 'without']:\n        return True\n    \n    if word in ['all', 'both', 'each', 'either', 'every', 'few','more','most','much','some','such', 'that', 'this', 'that', 'those','very', 'his', 'its', 'these', 'those', 'whether', 'why', 'where', 'when', 'where', 'whether', 'why', 'whose', 'whose', 'which', 'whose', 'whom', 'who', 'whos', 'whose', 'whose']:\n        return True\n    \n    if word in ['are', 'can', 'cannot', 'could', 'did', 'does', 'do', 'doing', 'dont', 'didnt', 'doesnt', 'doens', 'doesnt', 'doing', 'dont', 'does', 'do', 'doing', 'does', 'doesnt', 'doing', 'dont', 'doesnt', 'didnt', 'doens', 'dont', 'doing', 'does', 'do', 'doesnt', 'didnt', 'doesnt', 'doens', 'dont', 'doing', 'doesnt', 'didnt', 'doesnt', 'doens', 'dont']:\n        return True\n    \n    if word in ['both', 'each', 'either', 'every', 'few','many','most','many','much','some','such', 'those','very', 'whether', 'why']:\n        return True\n    \n    if word in ['aboard', 'alongside', 'aside', 'away', 'beside', 'besides', 'besides', 'by', 'besides', 'besides', 'beside', 'besides', 'besides', 'beside', 'beside', 'beside', 'beside', 'beside', 'beside', 'beside', 'beside', 'beside', 'beside', 'beside', 'beside', 'beside', 'beside', 'beside', 'beside', 'beside', 'beside', 'beside', 'beside', 'beside', 'beside', 'beside', 'beside', 'beside', 'beside', 'beside', 'beside', 'beside', 'beside', 'beside', 'beside', 'beside']:\n        return True\n    \n    if word in ['against', 'ahead', 'along', 'among', 'around', 'at', 'behind', 'below', 'beneath', 'beside', 'besides', 'between', 'beyond', 'by', 'down', 'down', 'down', 'down', 'down', 'down', 'down', 'down', 'down', 'down', 'down', 'down', 'down', 'down', 'down', 'down', 'down', 'down', 'down', 'down', 'down', 'down', 'down', 'down', 'down', 'down', 'down', 'down', 'down', 'down', 'down', 'down', 'down', 'down', 'down', 'down', 'down', 'down', 'down', 'down', 'down', 'down']:\n        return True\n    \n    if word in ['above', 'across', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above']:\n        return True\n    \n    if word in ['above', 'across', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above', 'above']:\n        return True\n    \n    if word in ['aboard', 'alongside', 'aside', 'away', 'beside', 'besides', 'beside', 'beside', 'beside', 'beside', 'beside', 'beside', 'beside', 'beside', 'beside', 'beside', 'beside', 'beside', 'be",
        "num_ids": 1484
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    text = text.lower()\n    list_of_words = re.split(r'\\W+', text)\n    list_of_adverbs = []\n    for word in list_of_words:\n        if word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower() in ['not','no','no','n','no','nope','na','nada','nada','nadada']:\n            continue\n        elif word.lower(",
        "num_ids": 2009
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l * l * l\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # surface_area = 6 * l * l\n    return 6 * l * l\n",
        "num_ids": 22
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n    \ndef surfacearea_cuboid(l,b,h):\n    '''\n    Write a function to find the surface area of a cuboid of a given size.\n    '''\n    return 2*(l*b + l*h + b*h)\n    \ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere of a given radius.\n    '''\n    return 4*math.pi*r**2\n    \ndef surfacearea_pyramid(l,b):\n    '''\n    Write a function to find the surface area of a pyramid of a given height and base.\n    '''\n    return l*b\n    \ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone of a given radius and height.\n    '''\n    return math.pi*r**2*(h/3)\n    \ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder of a given radius and height.\n    '''\n    return math.pi*r**2 + 2*math.pi*r*h\n    \ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere of a given radius.\n    '''\n    return 4*math.pi*r**2\n    \ndef surfacearea_dodecahedron(s):\n    '''\n    Write a function to find the surface area of a dodecahedron of a given side.\n    '''\n    return 2*math.pi*s**3/5\n    \ndef surfacearea_truncatedcone(r,h,l):\n    '''\n    Write a function to find the surface area of a truncated cone of a given radius, height, and length.\n    '''\n    return math.pi*r**2 + l*h + 2*math.pi*r*h/3\n    \ndef surfacearea_trapezoid(b,h):\n    '''\n    Write a function to find the surface area of a trapezoid of a given base and height.\n    '''\n    return b*h/2\n    \ndef surfacearea_baldus(l,b):\n    '''\n    Write a function to find the surface area of a baldus of a given length and base.\n    '''\n    return l*b\n    \ndef surfacearea_polyhedron(s,l):\n    '''\n    Write a function to find the surface area of a polyhedron of a given side and length.\n    '''\n    return l*s**2/4\n    \ndef surfacearea_sagas(h,b):\n    '''\n    Write a function to find the surface area of a sagas of a given height and base.\n    '''\n    return h*b\n    \ndef surfacearea_prism(h,b):\n    '''\n    Write a function to find the surface area of a prism of a given height and base.\n    '''\n    return h*b\n    \ndef surfacearea_torus(r,h):\n    '''\n    Write a function to find the surface area of a torus of a given radius and height.\n    '''\n    return math.pi*r**2*(r+h)\n    \ndef surfacearea_cuboid(l,b,h):\n    '''\n    Write a function to find the surface area of a cuboid of a given length, breadth, and height.\n    '''\n    return 2*(l*b + l*h + b*h)\n    \ndef surfacearea_pyramid(l,b):\n    '''\n    Write a function to find the surface area of a pyramid of a given length and base.\n    '''\n    return l*b\n    \ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone of a given radius and height.\n    '''\n    return math.pi*r**2*(h/3)\n    \ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder of a given radius and height.\n    '''\n    return math.pi*r**2 + 2*math.pi*r*h\n    \ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere of a given radius.\n    '''\n    return 4*math.pi*r**2\n    \ndef surfacearea_dodecahedron(s):\n    '''\n    Write a function to find the surface area of a dodecahedron of a given side.\n    '''\n    return 2*math.pi*s**3/5\n    \ndef surfacearea_truncatedcone(r,h,l):\n    '''\n    Write a function to find the surface area of a truncated cone of a given radius, height, and length.\n    '''\n    return math.pi*r**2 + l*h + 2*math.pi*r*h/3\n    \ndef surfacearea_trapezoid(b,h):\n    '''\n    Write a function to find the surface area of a trapezoid of a given base and height.\n    '''\n    return b*h/2\n    \ndef surfacearea_baldus(l,b):\n    '''\n    Write a function to find the surface area of a baldus of a given length and base.\n    '''\n    return l*b\n    \ndef surfacearea_polyhedron(s,l):\n    '''\n    Write a function to find the surface area of a polyhedron of a given side and length.\n    '''\n    return l*s**2/4\n    \ndef surfacearea_sagas(h,b):\n    '''\n    Write a function to find the surface area of a sagas of a given height and base.\n    '''\n    return h*b\n    \ndef surfacearea_prism(h,b):\n    '''\n    Write a function to find the surface area of a prism of a given height and base.\n    '''\n    return h*b\n    \ndef surfacearea_torus(r,h):\n    '''\n    Write a function to find the surface area of a torus of a given radius and height.\n    '''\n    return math.pi*r**2*(r+h)\n    \ndef surfacearea_cuboid(l,b,h):\n    '''\n    Write a function to find the surface area of a cuboid of a given length, breadth, and height.\n    '''\n    return 2*(l*b + l*h + b*h)\n    \ndef surfacearea_pyramid(l,b):\n    '''\n    Write a function to find the surface area of a pyramid of a given length and base.\n    '''\n    return l*b\n    \ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone of a given radius and height.\n    '''\n    return math.pi*r**2*(h/3)\n    \ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder of a given radius and height.\n    '''\n    return math.pi*r**2 + 2*math.pi*r*h\n    \ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere of a given radius.\n    '''\n    return 4*math.pi*r**2\n    \ndef surfacearea_dodecahedron(s):\n    '''\n    Write a function to find the surface area of a dodecahedron of a given side.\n    '''\n    return 2*math.pi*s**3/5\n    \ndef surfacearea_truncatedcone(r,h,l):\n    '''\n    Write a function to find the surface area of a truncated cone of a given radius, height, and length.\n    '''\n    return math.pi*r**2 + l*h + 2*math.pi*r*h/3\n    \ndef surfacearea_trapezoid(b,h):\n    '''\n    Write a function to find the surface area of a trapezoid of a given base and height.\n    '''\n    return b*h/2\n    \ndef surfacearea_baldus(l,b):\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n    \ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube of a given size.\n    '''\n    return l**3\n    \ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere of a given radius.\n    '''\n    return 4*pi*r**2\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere of a given radius.\n    '''\n    return 4/3*pi*r**3\n    \ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder of a given radius and height.\n    '''\n    return 2*pi*r*(r+h)\n    \ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder of a given radius and height.\n    '''\n    return pi*r**2*h\n    \ndef surfacearea_parallelepiped(l1, l2, l3):\n    '''\n    Write a function to find the surface area of a parallelepiped with side lengths l1, l2, and l3.\n    '''\n    return 2*l1*l2 + 2*l1*l3 + 2*l2*l3\n    \ndef volume_parallelepiped(l1, l2, l3):\n    '''\n    Write a function to find the volume of a parallelepiped with side lengths l1, l2, and l3.\n    '''\n    return l1*l2*l3\n    \ndef surfacearea_trapezoid(b1, b2, h):\n    '''\n    Write a function to find the surface area of a trapezoid with base b1 and height h, and bases b2.\n    '''\n    return b1*h + b2*(h+b1)\n    \ndef volume_trapezoid(b1, b2, h):\n    '''\n    Write a function to find the volume of a trapezoid with base b1 and height h, and bases b2.\n    '''\n    return (b1+b2)*h/2\n    \ndef surfacearea_pyramid(a, h):\n    '''\n    Write a function to find the surface area of a pyramid with height h, and base a.\n    '''\n    return a*h\n    \ndef volume_pyramid(a, h):\n    '''\n    Write a function to find the volume of a pyramid with height h, and base a.\n    '''\n    return 1/3*a*h\n    \ndef surfacearea_ellipsoid(r1, r2, r3):\n    '''\n    Write a function to find the surface area of an ellipsoid with radii r1, r2, and r3.\n    '''\n    return 4*pi*(r1*r2 + r1*r3 + r2*r3)\n    \ndef volume_ellipsoid(r1, r2, r3):\n    '''\n    Write a function to find the volume of an ellipsoid with radii r1, r2, and r3.\n    '''\n    return 4/3*pi*(r1**2*r2*r3)\n    \ndef surfacearea_spheroid(r1, r2, r3):\n    '''\n    Write a function to find the surface area of a spheroid with radii r1, r2, and r3.\n    '''\n    return 2*pi*r1*r2*(r1+r2+r3)\n    \ndef volume_spheroid(r1, r2, r3):\n    '''\n    Write a function to find the volume of a spheroid with radii r1, r2, and r3.\n    '''\n    return 4/3*pi*(r1**2*r2*r3)\n    \ndef surfacearea_dodecahedron(s):\n    '''\n    Write a function to find the surface area of a dodecahedron with a side length of s.\n    '''\n    return 6*s**2\n    \ndef volume_dodecahedron(s):\n    '''\n    Write a function to find the volume of a dodecahedron with a side length of s.\n    '''\n    return 2/3*s**3\n    \ndef surfacearea_icosahedron(s):\n    '''\n    Write a function to find the surface area of a icosahedron with a side length of s.\n    '''\n    return s**2*6 + s**2*5\n    \ndef volume_icosahedron(s):\n    '''\n    Write a function to find the volume of a icosahedron with a side length of s.\n    '''\n    return s**3*2/5\n    \ndef surfacearea_octahedron(s):\n    '''\n    Write a function to find the surface area of a octahedron with a side length of s.\n    '''\n    return s**2*6\n    \ndef volume_octahedron(s):\n    '''\n    Write a function to find the volume of a octahedron with a side length of s.\n    '''\n    return s**3/2\n    \ndef surfacearea_dodecagon(s):\n    '''\n    Write a function to find the surface area of a dodecagon with a side length of s.\n    '''\n    return s**2*6 + s**2*5 + s**2*4\n    \ndef volume_dodecagon(s):\n    '''\n    Write a function to find the volume of a dodecagon with a side length of s.\n    '''\n    return s**3*2/5\n    \ndef surfacearea_truncated_octahedron(l, b):\n    '''\n    Write a function to find the surface area of a truncated octahedron with a side length of l, and base b.\n    '''\n    return 6*l*b\n    \ndef volume_truncated_octahedron(l, b):\n    '''\n    Write a function to find the volume of a truncated octahedron with a side length of l, and base b.\n    '''\n    return 2/3*l**2*b\n    \ndef surfacearea_tetrahedron(s):\n    '''\n    Write a function to find the surface area of a tetrahedron with a side length of s.\n    '''\n    return s**2\n    \ndef volume_tetrahedron(s):\n    '''\n    Write a function to find the volume of a tetrahedron with a side length of s.\n    '''\n    return s**3/2\n    \ndef surfacearea_icosagonal(s):\n    '''\n    Write a function to find the surface area of a icosagonal with a side length of s.\n    '''\n    return s**2*6 + s**2*5\n    \ndef volume_icosagonal(s):\n    '''\n    Write a function to find the volume of a icosagonal with a side length of s.\n    '''\n    return s**3/2\n    \ndef surfacearea_truncated_icosagonal(l, b):\n    '''\n    Write a function to find the surface area of a truncated icosagonal with a side length of l, and base b.\n    '''\n    return 6*l*b\n    \ndef volume_truncated_icosagonal(l, b):\n    '''\n    Write a function to find the volume of a truncated icosagonal with a side length of l, and base b.\n    '''\n    return 2/3*l**2*b\n    \ndef surfacearea_truncated_octaedron(l, b):\n    '''\n    Write a function to find the surface area of a truncated octaedron with a side length of l, and base b.\n    '''\n    return 6*l*b + 6*b\n    \ndef volume_truncated_octaedron(l, b):\n    '''\n    Write a function to find the volume of a truncated octaedron with a side length of l, and base b.\n    '''\n    return 2/3*l**2*b\n    \ndef surfacearea_truncated_dodecago",
        "num_ids": 28
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l*l*6\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n    ",
        "num_ids": 11
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            neg_count += 1\n        elif nums[i] > 0:\n            pos_count += 1\n    return (float(pos_count)/float(len(nums)))\n",
        "num_ids": 83
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return len([i for i in nums if i > 0])/float(len(nums))\n",
        "num_ids": 26
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return float(positive_count) / len(nums)\n",
        "num_ids": 46
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    n = len(nums)\n    count = 0\n    for i in range(n):\n        if nums[i] > 0:\n            count += 1\n    return float(count)/n\ndef remove_min(nums):\n    '''\n    Write a function to remove the minimum number in an array of integers.\n    '''\n    n = len(nums)\n    mini = nums[0]\n    for i in range(n):\n        if nums[i] < mini:\n            mini = nums[i]\n    for i in range(n):\n        if nums[i] == mini:\n            nums[i] = nums[n-1]\n            nums[n-1] = mini\n    nums.pop()\n    return nums\ndef sum_array(nums):\n    '''\n    Write a function that takes in an array of integers and returns the sum of the array.\n    '''\n    n = len(nums)\n    sum = 0\n    for i in range(n):\n        sum += nums[i]\n    return sum\ndef sum_array_hash(nums):\n    '''\n    Write a function that takes in an array of integers and returns the sum of the array.\n    '''\n    n = len(nums)\n    sum = 0\n    for i in range(n):\n        sum += nums[i]\n    return sum\ndef length_array(nums):\n    '''\n    Write a function that takes in an array of integers and returns the length of the array.\n    '''\n    n = len(nums)\n    return n\ndef reverse_array(nums):\n    '''\n    Write a function that takes in an array of integers and returns an array with the\n    elements reversed.\n    '''\n    n = len(nums)\n    for i in range(n/2):\n        temp = nums[i]\n        nums[i] = nums[n-1-i]\n        nums[n-1-i] = temp\n    return nums\ndef sum_of_squares(nums):\n    '''\n    Write a function that takes in an array of integers and returns the sum of the squares of the array.\n    '''\n    n = len(nums)\n    sum = 0\n    for i in range(n):\n        sum += nums[i]**2\n    return sum\ndef least_common_multiple(num1,num2):\n    '''\n    Write a function that takes in two integers and returns the least common multiple of the two integers.\n    '''\n    lcm = 0\n    if num1 > num2:\n        for i in range(num2,num1+1):\n            if i % num1 == 0 and i % num2 == 0:\n                lcm = i\n                break\n    else:\n        for i in range(num1,num2+1):\n            if i % num1 == 0 and i % num2 == 0:\n                lcm = i\n                break\n    return lcm\ndef common_digits(nums1,nums2):\n    '''\n    Write a function that takes in two arrays of integers and returns an array with the common digits between the arrays.\n    '''\n    n1 = len(nums1)\n    n2 = len(nums2)\n    res = []\n    for i in range(min(n1,n2)):\n        if nums1[i] == nums2[i]:\n            res.append(nums1[i])\n    return res\ndef get_reverse_vowels(s):\n    '''\n    Write a function that takes in a string and returns the string with the vowels reversed.\n    '''\n    vowels = ['a','e','i','o','u']\n    v = s.split(' ')\n    res = ''\n    for i in range(len(v)):\n        for j in range(len(v[i])):\n            if v[i][j] in vowels:\n                res += v[i][len(v[i])-1-j]\n    return res\ndef is_palindrome(s):\n    '''\n    Write a function that takes in a string and returns true if the string is a palindrome, and false otherwise.\n    '''\n    s = s.lower()\n    s = s.replace(' ','')\n    n = len(s)\n    for i in range(n/2):\n        if s[i]!= s[n-1-i]:\n            return False\n    return True\ndef is_anagram(s1,s2):\n    '''\n    Write a function that takes in two strings and returns true if the strings are anagrams of each other and false otherwise.\n    '''\n    s1 = s1.lower()\n    s2 = s2.lower()\n    s1 = s1.replace(' ','')\n    s2 = s2.replace(' ','')\n    s1 = list(s1)\n    s2 = list(s2)\n    n = len(s1)\n    for i in range(n):\n        if s1[i] in s2:\n            s2.remove(s1[i])\n        else:\n            return False\n    if len(s2)!= 0:\n        return False\n    return True\ndef is_prime(n):\n    '''\n    Write a function that takes in a positive integer and returns true if the integer is prime and false otherwise.\n    '''\n    if n == 1:\n        return False\n    for i in range(2,n/2):\n        if n % i == 0:\n            return False\n    return True\ndef primes_upto(n):\n    '''\n    Write a function that takes in a positive integer and returns an array of all the prime numbers up to and including the integer.\n    '''\n    primes = []\n    for i in range(2,n+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\ndef quadratic_roots(a,b,c):\n    '''\n    Write a function that takes in three numbers, a, b, and c, and returns the two roots of the quadratic equation ax2 + bx + c.\n    '''\n    from cmath import sqrt\n    d = (b**2) - (4*a*c)\n    if d < 0:\n        return None\n    elif d == 0:\n        return (-b/(2*a))\n    else:\n        return ( (-b - sqrt(d))/(2*a), (-b + sqrt(d))/(2*a))\ndef make_word_triple(w1,w2,w3):\n    '''\n    Write a function that takes in three strings and returns true if the strings are a valid word triples and false otherwise.\n    A word triple is a set of three consecutive words in a sentence which share common letters.\n    '''\n    w1 = w1.lower()\n    w2 = w2.lower()\n    w3 = w3.lower()\n    w1 = w1.replace(' ','')\n    w2 = w2.replace(' ','')\n    w3 = w3.replace(' ','')\n    w1 = list(w1)\n    w2 = list(w2)\n    w3 = list(w3)\n    n = len(w1)\n    for i in range(n-2):\n        if w1[i] == w1[i+1] == w1[i+2] and w1[i] in w2 and w1[i] in w3:\n            return True\n    return False\ndef count_code(str):\n    '''\n    Write a function that takes in a string and returns the number of times three appear consecutively in the string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        if i < n-3:\n            if str[i:i+3] == 'coe':\n                count += 1\n    return count\ndef consecutive_sum(n):\n    '''\n    Write a function that takes in a positive integer and returns the sum of the number, n, and its double.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i + (i+1)\n    return sum\ndef is_prime_number(n):\n    '''\n    Write a function that takes in a positive intege",
        "num_ids": 14
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    for num in nums:\n        if num > 0:\n            positive += 1\n    return float(positive)/float(len(nums))\n",
        "num_ids": 41
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count=0\n    for num in nums:\n        if num>0:\n            count+=1\n    return float(count)/float(len(nums))\n",
        "num_ids": 41
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return float(pos_count) / len(nums)\n",
        "num_ids": 46
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(0, len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return float(count) / float(len(nums))\n",
        "num_ids": 53
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return float(sum(num > 0 for num in nums)) / len(nums)\n",
        "num_ids": 24
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_nums = 0\n    for num in nums:\n        if num > 0:\n            positive_nums += 1\n    return positive_nums / float(len(nums))\ndef negative_count(nums):\n    '''\n    Write a function to find the ration of negative numbers in an array of integers.\n    '''\n    negative_nums = 0\n    for num in nums:\n        if num < 0:\n            negative_nums += 1\n    return negative_nums / float(len(nums))\ndef palindrome_count(nums):\n    '''\n    Write a function to find the ration of palindromic numbers in an array of integers.\n    '''\n    palindromes = 0\n    for num in nums:\n        if str(num) == str(num)[::-1]:\n            palindromes += 1\n    return palindromes / float(len(nums))\ndef mode(nums):\n    '''\n    Write a function to find the mode in an array of integers.\n    The mode is the number that occurs the most often.\n    '''\n    mode_count = 0\n    mode_num = None\n    for num in nums:\n        if nums.count(num) > mode_count:\n            mode_count = nums.count(num)\n            mode_num = num\n    return mode_num\ndef median(nums):\n    '''\n    Write a function to find the median in an array of integers.\n    '''\n    nums = sorted(nums)\n    if len(nums) % 2 == 0:\n        return (nums[len(nums) / 2] + nums[(len(nums) / 2) - 1]) / 2\n    else:\n        return nums[len(nums) / 2]\ndef range(nums):\n    '''\n    Write a function to find the range of an array of integers.\n    '''\n    return max(nums) - min(nums)\ndef mode_sort(nums):\n    '''\n    Write a function to sort an array of integers using the mode in O(n) time.\n    '''\n    max_count = 0\n    max_num = None\n    for num in nums:\n        if nums.count(num) > max_count:\n            max_count = nums.count(num)\n            max_num = num\n    nums.remove(max_num)\n    nums.sort()\n    return max_num\ndef mean(nums):\n    '''\n    Write a function to find the mean of an array of integers.\n    '''\n    return sum(nums) / float(len(nums))\ndef variance(nums):\n    '''\n    Write a function to find the variance of an array of integers.\n    The variance is the average of the squares of differences between the mean and each number.\n    '''\n    mean_val = mean(nums)\n    square_diff = 0\n    for num in nums:\n        square_diff += (mean_val - num) ** 2\n    return square_diff / float(len(nums))\ndef standard_deviation(nums):\n    '''\n    Write a function to find the standard deviation of an array of integers.\n    The standard deviation is the square root of the variance.\n    '''\n    return variance(nums) ** 0.5\ndef dot_product(vec1, vec2):\n    '''\n    Write a function to compute the dot product of two arrays of numbers.\n    '''\n    return sum(x * y for x, y in zip(vec1, vec2))\ndef sum_of_squares(nums):\n    '''\n    Write a function to compute the sum of squares for an array of numbers.\n    '''\n    return dot_product(nums, nums)\ndef mean_absolute_deviation(nums):\n    '''\n    Write a function to compute the mean absolute deviation for an array of numbers.\n    '''\n    mean_val = mean(nums)\n    abs_diff = 0\n    for num in nums:\n        abs_diff += abs(num - mean_val)\n    return abs_diff / float(len(nums))\ndef z_score(nums):\n    '''\n    Write a function to compute the z-score for an array of numbers.\n    '''\n    mean_val = mean(nums)\n    abs_diff = 0\n    for num in nums:\n        abs_diff += abs(num - mean_val)\n    return (num - mean_val) / abs_diff ** 0.5\ndef binary_search(nums, target):\n    '''\n    Write a function that performs a binary search on a sorted array of integers and returns the index of the target value if found.\n    If the target value is not found, return -1.\n    '''\n    left = 0\n    right = len(nums) - 1\n    while left <= right:\n        mid = (left + right) / 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\ndef binary_search_recursive(nums, target):\n    '''\n    Write a function that performs a binary search on a sorted array of integers and returns the index of the target value if found.\n    If the target value is not found, return -1.\n    '''\n    if len(nums) == 1:\n        if target == nums[0]:\n            return 0\n        else:\n            return -1\n    mid = len(nums) / 2\n    if target == nums[mid]:\n        return mid\n    elif target < nums[mid]:\n        return binary_search_recursive(nums[:mid], target)\n    else:\n        return binary_search_recursive(nums[mid:], target)\ndef binary_search_recursive_2(nums, target):\n    '''\n    Write a function that performs a binary search on a sorted array of integers and returns the index of the target value if found.\n    If the target value is not found, return -1.\n    '''\n    if len(nums) == 1:\n        if target == nums[0]:\n            return 0\n        else:\n            return -1\n    mid = len(nums) / 2\n    if target == nums[mid]:\n        return mid\n    elif target < nums[mid]:\n        return binary_search_recursive_2(nums[:mid], target)\n    else:\n        return binary_search_recursive_2(nums[mid:], target)\ndef divide_and_conqure(nums, left, right):\n    '''\n    Write a function that performs a divide and conquer algorithm to find the median of an array of integers.\n    '''\n    if left == right:\n        return nums[left]\n    elif left > right:\n        return None\n    else:\n        mid = (left + right) / 2\n        left_val = divide_and_conqure(nums, left, mid)\n        right_val = divide_and_conqure(nums, mid + 1, right)\n        if left_val is None:\n            return right_val\n        elif right_val is None:\n            return left_val\n        else:\n            return max(left_val, right_val)\ndef merge_sort(nums):\n    '''\n    Write a function that performs a merge sort on an array of integers.\n    The output should be a list of integers in increasing order.\n    '''\n    if len(nums) <= 1:\n        return nums\n    mid = len(nums) / 2\n    left = merge_sort(nums[:mid])\n    right = merge_sort(nums[mid:])\n    return merge(left, right)\ndef merge(left, right):\n    '''\n    Write a function that performs a merge on two sorted arrays.\n    '''\n    l = len(left)\n    r = len(right)\n    new_array = []\n    i = j = 0\n    while i < l and j < r:\n        if left[i] <= right[j]:\n            new_array.append(left[i])\n            i += 1\n        else:\n            new_array.append(right[j])\n            j += 1\n    new_array",
        "num_ids": 97
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if not list1:\n        raise Exception(\"List is empty\")\n    \n    max_num = -1 * float('inf')\n    for number in list1:\n        if number < max_num:\n            max_num = number\n    \n    return max_num\n    \n",
        "num_ids": 67
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1 = [int(x) for x in list1.split()]\n    list1.sort()\n    list1.reverse()\n    return list1[0]\n    \ndef largest_pos(list1): \n    '''\n    Write a python function to find the largest positive number from the given list.\n    '''\n    list1 = [int(x) for x in list1.split()]\n    list1.sort()\n    return list1[-1]\n    \ndef is_perfect(list1): \n    '''\n    Write a python function to check if the given list is a perfect number.\n    '''\n    sum = 0\n    for x in list1:\n        sum += x\n    return sum == sum/len(list1)\n    \ndef reverse_list(list1): \n    '''\n    Write a python function to reverse the given list.\n    '''\n    list1 = list1.split()\n    list1.reverse()\n    return''.join(list1)\n    \ndef factorial(n): \n    '''\n    Write a python function to calculate the factorial of the given number.\n    '''\n    n = int(n)\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n    \ndef is_palindrome(n): \n    '''\n    Write a python function to check if the given number is a palindrome number.\n    '''\n    n = str(n)\n    if n == n[::-1]:\n        return True\n    return False\n    \ndef split_words(string): \n    '''\n    Write a python function to split the given string into words.\n    '''\n    return string.split()\n    \ndef prime(n): \n    '''\n    Write a python function to check if the given number is a prime number.\n    '''\n    if n % 2 == 0 and n > 2:\n        return False\n    return all(n % i for i in range(3, int(n**0.5) + 1, 2))\n    \ndef print_digits(n): \n    '''\n    Write a python function to print the digits of the given number.\n    '''\n    return ''.join(map(str, str(n)))\n    \ndef is_positive(num): \n    '''\n    Write a python function to check if the given number is positive.\n    '''\n    if num > 0:\n        return True\n    else:\n        return False\n    \ndef is_even(num): \n    '''\n    Write a python function to check if the given number is even.\n    '''\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n    \ndef fibonacci(n): \n    '''\n    Write a python function to return the nth fibonacci number.\n    '''\n    if n <= 0:\n        return n\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n    \ndef factorial_digits(n): \n    '''\n    Write a python function to calculate the factorial of the number of digits in the given number.\n    '''\n    return factorial(len(str(n)))\n    \ndef max_even_digit(n): \n    '''\n    Write a python function to return the max even digit of the given number.\n    '''\n    return max([int(x) for x in list(str(n)) if int(x) % 2 == 0])\n    \ndef max_odd_digit(n): \n    '''\n    Write a python function to return the max odd digit of the given number.\n    '''\n    return max([int(x) for x in list(str(n)) if int(x) % 2 == 1])\n    \ndef to_base(n, base): \n    '''\n    Write a python function to convert the given number to a given base.\n    '''\n    def to_digit(n, base): \n        return int(n, base)\n    if n < 0:\n        sign = -1\n    else:\n        sign = 1\n    n = abs(n)\n    result = []\n    while n > 0:\n        result.append(to_digit(n % base, base))\n        n = n / base\n    return ''.join(map(str, result)) * sign\n    \ndef is_pandigital(n, s=9): \n    '''\n    Write a python function to check if the given number is a pandigital number.\n    '''\n    if len(list(str(n))) == s:\n        lst = [int(x) for x in list(str(n))]\n        if len(set(lst)) == s:\n            return True\n    return False\n    \ndef is_increasing(list1): \n    '''\n    Write a python function to check if the given list is increasing or not.\n    '''\n    list1 = [int(x) for x in list1.split()]\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i - 1]:\n            return False\n    return True\n    \ndef count_char(string, ch): \n    '''\n    Write a python function to return the number of times the given character occurs in the given string.\n    '''\n    return string.count(ch)\n    \ndef change_case(string): \n    '''\n    Write a python function to change the case of the given string.\n    '''\n    return string.swapcase()\n    \ndef is_substring(string1, string2): \n    '''\n    Write a python function to check if the given string is a substring of the other string.\n    '''\n    return string1 in string2\n    \ndef is_lexicographic(string1, string2): \n    '''\n    Write a python function to check if the given string is lexicographic string.\n    '''\n    string1 = [int(x) for x in string1.split()]\n    string2 = [int(x) for x in string2.split()]\n    string1.sort()\n    string2.sort()\n    return string1 == string2\n    \ndef is_anagram(string1, string2): \n    '''\n    Write a python function to check if the given strings are anagram.\n    '''\n    string1 = [int(x) for x in string1.split()]\n    string2 = [int(x) for x in string2.split()]\n    string1.sort()\n    string2.sort()\n    return string1 == string2\n    \ndef is_rotation(string1, string2): \n    '''\n    Write a python function to check if the given strings are rotations of each other.\n    '''\n    return string1 in string2 + string2\n    \ndef is_palindrome_permutation(string1, string2): \n    '''\n    Write a python function to check if the given strings are permutations of each other.\n    '''\n    string1 = [int(x) for x in string1.split()]\n    string2 = [int(x) for x in string2.split()]\n    string1.sort()\n    string2.sort()\n    return string1 == string2\n    \ndef is_shortest_rotation(string1, string2): \n    '''\n    Write a python function to check if the given strings are the shortest rotations of each other.\n    '''\n    return is_rotation(string2, string2 + string1)\n    \ndef is_shortest_palindrome(string1, string2): \n    '''\n    Write a python function to check if the given strings are the shortest palindromes of each other.\n    '''\n    string1 = [int(x) for x in string1.split()]\n    string2 = [int(x) for x in string2.split()]\n    string1.sort()\n    string2.sort()\n    return is_palindrome_permutation(string1, string2)\n    \ndef is_isogram(string1): \n    '''\n    Write a python function to check if the given string is an isogram.\n    '''\n    return is_anagram(string1, strin",
        "num_ids": 14
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort()\n    return list1[0]\n",
        "num_ids": 17
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    l = len(list1)\n    largest_neg = -1*sys.maxsize\n    for i in range(0,l):\n        if(list1[i] < 0):\n            largest_neg = list1[i]\n    return largest_neg\n",
        "num_ids": 64
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    count = 0\n    for x in list1: \n        if x < 0: \n            count = x\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max1=0\n    for i in list1:\n        if i<0:\n            if max1<i:\n                max1=i\n    return max1\n",
        "num_ids": 42
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    #Base Case\n    if len(list1) == 1:\n        return -1\n    if list1[0] < list1[1]:\n        return list1[0]\n    else:\n        return list1[1]\n",
        "num_ids": 57
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if list1==[]:\n        return []\n    else:\n        max1=list1[0]\n        for i in range(1,len(list1)):\n            if list1[i]<max1:\n                max1=list1[i]\n        return max1\n",
        "num_ids": 70
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    #list1 = [1,2,3,4,-5,-6]\n    large = 0\n    for i in range(len(list1)):\n        if list1[i] < large:\n            large = list1[i]\n    return large\n",
        "num_ids": 63
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = -1\n    for i in list1:\n        if i<0 and i>max_num:\n            max_num = i\n    return max_num\n",
        "num_ids": 44
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return map(lambda x: x[:K], test_list)\n",
        "num_ids": 19
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.append(i[K:])\n    return new_list\n",
        "num_ids": 37
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    def trim(tuple):\n        if len(tuple) > K:\n            return tuple[:K]\n        elif len(tuple) < K:\n            return tuple + (0,) * (K - len(tuple))\n        else:\n            return tuple\n",
        "num_ids": 66
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if not test_list:\n        return tuple()\n    return tuple(test_list[i][:K] for i in range(len(test_list)))\n",
        "num_ids": 40
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(x[0], x[1][0:K]) for x in test_list]\n",
        "num_ids": 25
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(t[0], t[1]) for t in test_list[:K]]\n",
        "num_ids": 24
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for i in test_list:\n        if len(i) <= K:\n            result.append(i)\n        else:\n            result.append(i[K:])\n    return result\n",
        "num_ids": 53
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(x[0], x[1][:K]) for x in test_list]\n",
        "num_ids": 24
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(item[0], item[1]) for item in test_list if item[1]!= K]\n",
        "num_ids": 29
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][:K])\n    return test_list\n",
        "num_ids": 42
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return\n",
        "num_ids": 25
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        final_tup = tuple(a*b for a, b in zip(test_tup1, test_tup2))\n        return final_tup\n    else:\n        return 'invalid'\n",
        "num_ids": 71
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(a*b for a,b in zip(test_tup1,test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple((x*y for x,y in zip(test_tup1, test_tup2)))\n",
        "num_ids": 29
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_tup3 = []\n    for i in range(len(test_tup1)):\n        test_tup3.append(test_tup1[i] * test_tup2[i])\n    return tuple(test_tup3)\n    \n    \ndef index_division(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise division of tuple elements in the given two tuples.\n    '''\n    test_tup3 = []\n    for i in range(len(test_tup1)):\n        test_tup3.append(test_tup1[i] / test_tup2[i])\n    return tuple(test_tup3)\n    \n    \ndef index_modulus(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise modulus of tuple elements in the given two tuples.\n    '''\n    test_tup3 = []\n    for i in range(len(test_tup1)):\n        test_tup3.append(test_tup1[i] % test_tup2[i])\n    return tuple(test_tup3)\n    \n    \ndef index_power(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise power of tuple elements in the given two tuples.\n    '''\n    test_tup3 = []\n    for i in range(len(test_tup1)):\n        test_tup3.append(test_tup1[i] ** test_tup2[i])\n    return tuple(test_tup3)\n    \n    \ndef index_sum(test_tup1):\n    '''\n    Write a function to perform index wise sum of tuple elements in the given two tuples.\n    '''\n    test_tup3 = []\n    for i in range(len(test_tup1)):\n        test_tup3.append(sum(test_tup1[i]))\n    return tuple(test_tup3)\n    \n    \ndef index_max(test_tup1):\n    '''\n    Write a function to perform index wise max of tuple elements in the given two tuples.\n    '''\n    test_tup3 = []\n    for i in range(len(test_tup1)):\n        test_tup3.append(max(test_tup1[i]))\n    return tuple(test_tup3)\n    \n    \ndef index_min(test_tup1):\n    '''\n    Write a function to perform index wise min of tuple elements in the given two tuples.\n    '''\n    test_tup3 = []\n    for i in range(len(test_tup1)):\n        test_tup3.append(min(test_tup1[i]))\n    return tuple(test_tup3)\n    \n    \ndef index_reverse(test_tup1):\n    '''\n    Write a function to perform index wise reverse of tuple elements in the given two tuples.\n    '''\n    test_tup3 = []\n    for i in range(len(test_tup1)):\n        test_tup3.append(test_tup1[len(test_tup1) - 1 - i])\n    return tuple(test_tup3)\n    \n    \ndef index_slicing(test_tup1, slice_index):\n    '''\n    Write a function to perform index wise slicing of tuple elements in the given two tuples.\n    '''\n    test_tup3 = []\n    for i in range(len(test_tup1)):\n        test_tup3.append(test_tup1[i][slice_index])\n    return tuple(test_tup3)\n    \n    \ndef index_iteration(test_tup1, slice_index):\n    '''\n    Write a function to perform index wise iteration of tuple elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            if j == slice_index:\n                yield test_tup1[i][j]\n                \n                \ndef index_indexing(test_tup1, slice_index):\n    '''\n    Write a function to perform index wise indexing of tuple elements in the given two tuples.\n    '''\n    test_tup3 = []\n    for i in range(len(test_tup1)):\n        test_tup3.append(test_tup1[i][slice_index])\n    return tuple(test_tup3)\n    \n    \ndef index_concatenation(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise concatenation of tuple elements in the given two tuples.\n    '''\n    test_tup3 = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            test_tup3.append(test_tup1[i] + test_tup2[j])\n    return tuple(test_tup3)\n    \n    \ndef index_repetition(test_tup1):\n    '''\n    Write a function to perform index wise repetition of tuple elements in the given two tuples.\n    '''\n    test_tup3 = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            test_tup3.append(test_tup1[i][j])\n    return tuple(test_tup3)\n    \n    \ndef index_iteration_tuple(test_tup1):\n    '''\n    Write a function to perform index wise iteration of tuple elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            yield test_tup1[i][j]\n    \n    \ndef index_count(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise count of tuple elements in the given two tuples.\n    '''\n    test_tup3 = []\n    for i in range(len(test_tup1)):\n        test_tup3.append(test_tup1[i].count(test_tup2[i]))\n    return tuple(test_tup3)\n    \n    \ndef index_product(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise product of tuple elements in the given two tuples.\n    '''\n    test_tup3 = []\n    for i in range(len(test_tup1)):\n        test_tup3.append(test_tup1[i] * test_tup2[i])\n    return tuple(test_tup3)\n    \n    \ndef index_division_tuple(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise division of tuple elements in the given two tuples.\n    '''\n    test_tup3 = []\n    for i in range(len(test_tup1)):\n        test_tup3.append(test_tup1[i] / test_tup2[i])\n    return tuple(test_tup3)\n    \n    \ndef index_modulus_tuple(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise modulus of tuple elements in the given two tuples.\n    '''\n    test_tup3 = []\n    for i in range(len(test_tup1)):\n        test_tup3.append(test_tup1[i] % test_tup2[i])\n    return tuple(test_tup3)\n    \n    \ndef index_power_tuple(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise power of tuple elements in the given two tuples.\n    '",
        "num_ids": 24
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_tup_index = (test_tup1[1]*test_tup2[0], test_tup1[0]*test_tup2[1])\n    return test_tup_index\n",
        "num_ids": 55
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # return tuple([a * b for a,b in zip(test_tup1, test_tup2)])\n    return tuple([a * b for a,b in zip(test_tup1, test_tup2)])\n",
        "num_ids": 59
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(map(lambda x,y: x*y, test_tup1, test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = []\n    if len(test_tup1)!= len(test_tup2):\n        return 'Invalid'\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] * test_tup2[i])\n    return result_tup\n",
        "num_ids": 85
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    a = Counter(lst) \n    for item in a:\n        if item in tup:\n            print item, a[item]\n",
        "num_ids": 36
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    d = {} \n    for x in lst: \n        d[x] = d.get(x, 0) + 1 \n    return d\n    \ndef sum_of_occurrence(dic, lst): \n    '''\n    Write a python function to return the sum of the elements of a list that occur more than once.\n    '''\n    s = 0\n    for x in lst: \n        if dic[x] > 1: \n            s += x \n    return s \n    \ndef calculate_the_average_of_list(lst): \n    '''\n    Write a python function to return the average of elements of list.\n    '''\n    return sum(lst) / len(lst)\n    \ndef find_the_occurrence_of_an_element(lst, elem): \n    '''\n    Write a python function to return the occurence of an element of list.\n    '''\n    return lst.count(elem)\n    \ndef find_the_largest_element_of_list(lst): \n    '''\n    Write a python function to return the largest element of list.\n    '''\n    return max(lst)\n    \ndef find_the_smallest_element_of_list(lst): \n    '''\n    Write a python function to return the smallest element of list.\n    '''\n    return min(lst)\n    \ndef sort_the_list_by_frequency(lst): \n    '''\n    Write a python function to sort a list by the frequency of occurrence of elements.\n    '''\n    dic = Counter(lst) \n    lst = sorted(lst, key = lambda x: dic[x], reverse = True) \n    return lst \n    \ndef convert_the_list_to_tuple(lst): \n    '''\n    Write a python function to convert a list to a tuple.\n    '''\n    return tuple(lst)\n    \ndef swap_the_elements_of_two_list(lst1, lst2): \n    '''\n    Write a python function to swap the elements of two lists.\n    '''\n    lst1[0], lst2[0] = lst2[0], lst1[0] \n    lst1[1], lst2[1] = lst2[1], lst1[1] \n    return lst1, lst2 \n    \ndef sort_the_list_by_frequency_descending(lst): \n    '''\n    Write a python function to sort a list by the frequency of occurrence of elements in descending order.\n    '''\n    dic = Counter(lst) \n    lst = sorted(lst, key = lambda x: dic[x], reverse = True) \n    return lst \n    \ndef list_of_tuples_to_dict_of_tuples(lst): \n    '''\n    Write a python function to convert a list of tuples to a dict of tuples.\n    '''\n    dic = {} \n    for x, y in lst: \n        dic[x] = y \n    return dic \n    \ndef create_list_of_tuples(lst): \n    '''\n    Write a python function to convert a list to a list of tuples.\n    '''\n    lst = list(lst) \n    return [(x, x) for x in lst] \n    \ndef create_dict_from_two_lists(lst1, lst2): \n    '''\n    Write a python function to create a dict from two lists.\n    '''\n    dic = {} \n    for x, y in zip(lst1, lst2): \n        dic[x] = y \n    return dic \n    \ndef create_dict_from_two_lists_using_zip(lst1, lst2): \n    '''\n    Write a python function to create a dict from two lists.\n    '''\n    return dict(zip(lst1, lst2)) \n    \ndef create_dict_from_two_lists_using_zip_and_key(lst1, lst2, key): \n    '''\n    Write a python function to create a dict from two lists using a key.\n    '''\n    dic = {} \n    for x, y in zip(lst1, lst2): \n        dic[key(x)] = y \n    return dic \n    \ndef add_dict_of_tuples(dic1, dic2): \n    '''\n    Write a python function to add the elements of two dicts of tuples.\n    '''\n    dic = {} \n    for k, v in dic1.items(): \n        dic[k] = v \n    for k, v in dic2.items(): \n        dic[k] = v \n    return dic \n    \ndef list_of_tuples_to_dict_of_tuples(lst): \n    '''\n    Write a python function to convert a list of tuples to a dict of tuples.\n    '''\n    dic = {} \n    for x, y in lst: \n        dic[x] = y \n    return dic \n    \ndef tuple_to_list(tup): \n    '''\n    Write a python function to convert a tuple to a list.\n    '''\n    return list(tup) \n    \ndef tuple_to_list_using_zip(tup): \n    '''\n    Write a python function to convert a tuple to a list using zip.\n    '''\n    return list(zip(*tup)) \n    \ndef tuple_to_list_using_list_comprehensions(tup): \n    '''\n    Write a python function to convert a tuple to a list using list comprehension.\n    '''\n    return [(x, x) for x in tup] \n    \ndef list_of_tuples_to_list_of_lists(lst): \n    '''\n    Write a python function to convert a list of tuples to a list of lists.\n    '''\n    lst = [list(x) for x in lst] \n    return lst \n    \ndef list_of_tuples_to_list_of_lists_using_zip(lst): \n    '''\n    Write a python function to convert a list of tuples to a list of lists using zip.\n    '''\n    return list(zip(*lst)) \n    \ndef list_of_tuples_to_list_of_lists_using_list_comprehensions(lst): \n    '''\n    Write a python function to convert a list of tuples to a list of lists using list comprehension.\n    '''\n    return [list(x) for x in lst] \n    \ndef tuple_to_list_of_lists(tup): \n    '''\n    Write a python function to convert a tuple to a list of lists.\n    '''\n    lst = [list(x) for x in tup] \n    return lst \n    \ndef tuple_to_list_of_lists_using_zip(tup): \n    '''\n    Write a python function to convert a tuple to a list of lists using zip.\n    '''\n    return list(zip(*tup)) \n    \ndef tuple_to_list_of_lists_using_list_comprehensions(tup): \n    '''\n    Write a python function to convert a tuple to a list of lists using list comprehension.\n    '''\n    return [(x, x) for x in tup] \n    \ndef dict_of_tuples_to_dict_of_lists(dic): \n    '''\n    Write a python function to convert a dict of tuples to a dict of lists.\n    '''\n    dic = {k: list(v) for k, v in dic.items()} \n    return dic \n    \ndef dict_of_tuples_to_dict_of_lists_using_zip(dic): \n    '''\n    Write a python function to convert a dict of tuples to a dict of lists using zip.\n    '''\n    return {k: list(v) fo",
        "num_ids": 12
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    ct = Counter(tup) \n    for item in lst: \n        ct[item] -= 1\n        if ct[item] < 0: \n            return False \n    return True \n",
        "num_ids": 53
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst: \n        if i == tup: \n            count += 1\n    return count \n",
        "num_ids": 35
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    ans=[]\n    for i in lst:\n        ans.append(tup.count(i))\n    return ans\n",
        "num_ids": 32
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter()\n    for i in lst: \n        c[i]+=1\n    print(tup, c)\n",
        "num_ids": 34
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    freq = {} \n    for val in tup: \n        freq[val] = freq.get(val, 0) + 1\n    for val in lst: \n        print (val, freq[val]) \ndef get_All_Pairings(lst):\n    '''\n    Write a python function that returns the pairings of list elements. \n    '''\n    out = []\n    for i in range(0, len(lst)-1): \n        for j in range(i+1, len(lst)): \n            out.append( (lst[i], lst[j]) ) \n    return out\ndef get_All_Pairs(lst):\n    '''\n    Write a python function that returns the all pairs of list elements. \n    '''\n    out = []\n    for i in range(0, len(lst)): \n        for j in range(0, len(lst)): \n            if i < j: \n                out.append( (lst[i], lst[j]) )\n    return out\ndef get_All_Triplet(lst):\n    '''\n    Write a python function that returns the all triplets of list elements. \n    '''\n    out = []\n    for i in range(0, len(lst)-2): \n        for j in range(i+1, len(lst)-1): \n            for k in range(j+1, len(lst)): \n                out.append( (lst[i], lst[j], lst[k]) )\n    return out\ndef is_Permutation(string_1, string_2):\n    '''\n    Write a python function that checks if two strings are permutations of each other. \n    '''\n    if len(string_1)!= len(string_2): \n        return False \n    count = {} \n    for char in string_1: \n        if count.get(char, 0) == 0: \n            count[char] = 1\n        else: \n            count[char] += 1\n    for char in string_2: \n        if count.get(char, 0) == 0: \n            return False \n        else: \n            count[char] -= 1\n    return True\ndef is_Subsequence(string_1, string_2):\n    '''\n    Write a python function that checks if two strings are subsequences of each other. \n    '''\n    if len(string_1) > len(string_2): \n        return False \n    i = 0 \n    j = 0\n    while i < len(string_1) and j < len(string_2): \n        if string_1[i] == string_2[j]: \n            i += 1\n        j += 1\n    return i == len(string_1)\ndef is_Mirror(string_1, string_2):\n    '''\n    Write a python function that checks if two strings are mirror of each other. \n    '''\n    if len(string_1)!= len(string_2): \n        return False \n    i = 0 \n    j = len(string_1) - 1\n    while i < j: \n        if string_1[i]!= string_2[j]: \n            return False \n        i += 1\n        j -= 1\n    return True\ndef is_Lexical(string_1, string_2):\n    '''\n    Write a python function that checks if two strings are lexical strings. \n    '''\n    if len(string_1)!= len(string_2): \n        return False \n    for i in range(0, len(string_1)): \n        if string_1[i]!= string_2[i]: \n            return False \n    return True\ndef check_Substring(string_1, string_2):\n    '''\n    Write a python function that checks if two strings are substrings of each other. \n    '''\n    if len(string_1) > len(string_2): \n        return False \n    i = 0 \n    j = 0\n    while i < len(string_1) and j < len(string_2): \n        if string_1[i] == string_2[j]: \n            i += 1\n        j += 1\n    return True\ndef get_String_List(string):\n    '''\n    Write a python function that returns a list of strings in a string. \n    '''\n    return string.split(' ')\ndef longest_Common_Prefix(lst):\n    '''\n    Write a python function that returns the longest common prefix of a list of strings. \n    '''\n    if len(lst) == 0: \n        return \"\"\n    prefix = lst[0]\n    for string in lst: \n        while not check_Substring(string, prefix): \n            prefix = prefix[:-1]\n    return prefix\ndef longest_Common_Prefix_Recursive(lst, start, end):\n    '''\n    Write a python function that returns the longest common prefix of a list of strings. \n    '''\n    if start == end: \n        return lst[start]\n    if start > end: \n        return \"\"\n    if start == end - 1: \n        return lst[start] if lst[start] == lst[end] else \"\"\n    mid = (start + end) // 2\n    prefix_1 = longest_Common_Prefix_Recursive(lst, start, mid)\n    prefix_2 = longest_Common_Prefix_Recursive(lst, mid, end)\n    return prefix_1 if prefix_1 == prefix_2 else \"\"\ndef longest_Common_Prefix_Iterative(lst):\n    '''\n    Write a python function that returns the longest common prefix of a list of strings. \n    '''\n    if len(lst) == 0: \n        return \"\"\n    prefix = lst[0]\n    for string in lst: \n        while not check_Substring(string, prefix): \n            prefix = prefix[:-1]\n    return prefix\ndef common_Prefix(lst):\n    '''\n    Write a python function that returns the common prefix of a list of strings. \n    '''\n    if len(lst) == 0: \n        return \"\"\n    prefix = lst[0]\n    for string in lst: \n        while not check_Substring(string, prefix): \n            prefix = prefix[:-1]\n    return prefix\ndef find_XOR_Sum(lst):\n    '''\n    Write a python function that returns the xor of two numbers in a list. \n    '''\n    if len(lst) == 0: \n        return 0 \n    sum = lst[0]\n    for number in lst: \n        sum = sum ^ number \n    return sum\ndef remove_Duplicates(lst):\n    '''\n    Write a python function that removes duplicates from a list. \n    '''\n    if len(lst) == 0: \n        return lst\n    new_lst = [lst[0]]\n    for i in range(1, len(lst)): \n        if lst[i]!= new_lst[-1]: \n            new_lst.append(lst[i])\n    return new_lst\ndef sort_List(lst):\n    '''\n    Write a python function that sorts a list of numbers. \n    '''\n    if len(lst) == 0: \n        return lst\n    new_lst = [lst[0]]\n    for i in range(1, len(lst)): \n        new_lst.append(lst[i])\n        for j in range(len(new_lst) - 1, -1, -1): \n            if new_lst[j] < new_lst[j - 1]: \n                new_lst[j], new_lst[j - 1] = new_lst[j - 1], new_lst[j]\n    return new_lst\ndef find_Kth_Smallest(lst, k):\n    '''\n    Write a python function that returns the kth smallest element in a list. \n    '''\n    if len(lst) == 0: \n        return Non",
        "num_ids": 17
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for j in lst:\n        if j in tup:\n            count = count + 1\n    return count\ndef concat(str,lst):\n    '''\n    Write a python function to concatinate all the elements of list in a string.\n    '''\n    str2 = ''\n    for j in lst:\n        str2 = str2 + j\n    return str2\ndef inversion(lst):\n    '''\n    Write a python function to count the number of inversions in a list.\n    '''\n    lst.sort()\n    n = len(lst)\n    if n==1:\n        return 0\n    else:\n        return n*(n-1)/2\ndef distinct(lst):\n    '''\n    Write a python function to count the number of distinct elements in a list.\n    '''\n    lst2 = []\n    for j in lst:\n        if j not in lst2:\n            lst2.append(j)\n    return len(lst2)\ndef most_frequent(lst):\n    '''\n    Write a python function to return the most frequent element in a list.\n    '''\n    cnt = Counter(lst)\n    return cnt.most_common(1)[0][0]\ndef palindrome(str1):\n    '''\n    Write a python function to check if a string is a palindrome.\n    '''\n    return str1 == str1[::-1]\ndef rotate(lst):\n    '''\n    Write a python function to reverse a list.\n    '''\n    lst2 = lst[::-1]\n    return lst2\ndef best_score(lst):\n    '''\n    Write a python function to return the best score by the given list of scores.\n    '''\n    lst.sort(reverse=True)\n    return lst[0]\ndef median(lst):\n    '''\n    Write a python function to return the median of the given list.\n    '''\n    lst2 = lst[:]\n    lst2.sort()\n    n = len(lst2)\n    if n%2==0:\n        median = (lst2[n/2]+lst2[n/2-1])/2.0\n    else:\n        median = lst2[n/2]\n    return median\ndef stack(lst):\n    '''\n    Write a python function to return the stack of a list.\n    '''\n    lst3 = []\n    for i in lst:\n        lst3.append(i)\n    return lst3\ndef anagram(str1,str2):\n    '''\n    Write a python function to check if two strings are anagrams.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        return sorted(str1) == sorted(str2)\ndef permutation(str1,str2):\n    '''\n    Write a python function to check if two strings are permutations of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        lst1 = list(str1)\n        lst2 = list(str2)\n        lst1.sort()\n        lst2.sort()\n        return lst1 == lst2\ndef is_subseq(str1,str2):\n    '''\n    Write a python function to check if a string is a subsequence of another string.\n    '''\n    if len(str1) > len(str2):\n        return False\n    else:\n        for i in range(len(str2)):\n            if str2[i] == str1[0]:\n                for j in range(i+1,len(str2)):\n                    if str2[j]!= str1[j-i]:\n                        break\n                    if j == len(str2)-1:\n                        return True\n        return False\ndef can_construct(str1,str2):\n    '''\n    Write a python function to check if a string can be constructed from a string.\n    '''\n    if len(str2) < len(str1):\n        return False\n    elif len(str1) == len(str2):\n        return True\n    else:\n        for i in range(len(str1)):\n            if str2[:i+1] == str1:\n                if str2[i+1:] == '':\n                    return True\n                else:\n                    return can_construct(str1[i+1:],str2[i+1:])\n        return False\ndef is_balanced(str1):\n    '''\n    Write a python function to check if a string is a balanced string.\n    '''\n    lst = []\n    for i in str1:\n        lst.append(i)\n    cnt = Counter(lst)\n    if cnt['('] == cnt[')'] and cnt['{'] == cnt['}'] and cnt['['] == cnt[']']:\n        return True\n    else:\n        return False\ndef brackets(str1):\n    '''\n    Write a python function to return the number of brackets in a string.\n    '''\n    lst = []\n    for i in str1:\n        lst.append(i)\n    cnt = Counter(lst)\n    return cnt['('] - cnt[')']\ndef can_complete(str1,str2):\n    '''\n    Write a python function to check if a string can be completed using the string.\n    '''\n    if len(str2) < len(str1):\n        return False\n    elif len(str1) == len(str2):\n        return True\n    else:\n        for i in range(len(str1)):\n            if str2[:i+1] == str1:\n                if str2[i+1:] == '':\n                    return True\n                else:\n                    return can_complete(str1[i+1:],str2[i+1:])\n        return False\ndef is_anagram(str1,str2):\n    '''\n    Write a python function to check if two strings are anagrams.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        lst1 = list(str1)\n        lst2 = list(str2)\n        lst1.sort()\n        lst2.sort()\n        return lst1 == lst2\ndef is_anagram2(str1,str2):\n    '''\n    Write a python function to check if two strings are anagrams.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        lst1 = sorted(str1)\n        lst2 = sorted(str2)\n        return lst1 == lst2\ndef is_anagram3(str1,str2):\n    '''\n    Write a python function to check if two strings are anagrams.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        lst1 = sorted(str1)\n        lst2 = sorted(str2)\n        for i in lst1:\n            if i not in lst2:\n                return False\n        return True\ndef is_anagram4(str1,str2):\n    '''\n    Write a python function to check if two strings are anagrams.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        lst1 = []\n        lst2 = []\n        for i in str1:\n            lst1.append(i)\n        for i in str2:\n            lst2.append(i)\n        lst1.sort()\n        lst2.sort()\n        return lst1 == lst2\ndef is_anagram5(str1,str2):\n    '''\n    Write a python function to check if two strings are anagrams.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        lst1 = list(str1)\n        lst2 = list(str2)\n        lst1.sort()\n        lst2.sort(",
        "num_ids": 61
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum(tup.count(l) for l in lst) \n",
        "num_ids": 21
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(tup)\ndef Main():\n    lst=[]\n    num = int(input('Enter number of elements'))\n    for i in range(num):\n        lst.append(int(input()))\n    tup = tuple(lst)\n    print(count_Occurrence(tup, lst))\nif __name__=='__main__':\n    Main()\n",
        "num_ids": 95
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return map(lambda x: x**3, nums)\n",
        "num_ids": 17
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return map(lambda x: x**3, nums)\n",
        "num_ids": 17
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in nums:\n        print(i**3)\n",
        "num_ids": 18
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for i in nums:\n        cubes.append(i**3)\n    return cubes\n",
        "num_ids": 31
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes\n",
        "num_ids": 31
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    output = []\n    for item in nums:\n        output.append(item ** 3)\n    return output\n",
        "num_ids": 29
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = [i**3 for i in nums]\n    return cube_list\n",
        "num_ids": 24
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in nums:\n        print(i ** 3)\n",
        "num_ids": 18
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]\n    \ndef count_word_occurences(string, word):\n    '''\n    Write a function that accepts a string and returns a list of tuples with\n    all the word occurences in the string, and the number of times they\n    occur.\n    '''\n    list_of_word_occurences = []\n    for word_index in range(len(string)):\n        if string[word_index:word_index + len(word)] == word:\n            list_of_word_occurences.append((string[word_index:word_index + len(word)], 1))\n        if string[word_index:word_index + len(word)]!= word:\n            continue\n    if len(list_of_word_occurences) == 0:\n        return list_of_word_occurences\n    return list_of_word_occurences\n",
        "num_ids": 146
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += i\n    return sum\n",
        "num_ids": 27
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0\n    for i in range(1, n + 1):\n        result += i * (3 * i - 1) / 2\n    return result\n",
        "num_ids": 39
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1, n):\n        if is_palin(i):\n            total += i\n    return total\n",
        "num_ids": 37
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0\n    for i in range(1, n + 1):\n        result += (i * (3 * i - 1) / 2)\n    return result\n",
        "num_ids": 41
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n+cal_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    num=1\n    res=0\n    while num<=n:\n        res+=num*(num+1)/2\n        num+=1\n    return res\ndef cal_perrin(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    num=1\n    res=0\n    while num<=n:\n        res+=num*(num+1)/2\n        num+=2\n    return res\ndef cal_perrin_sum(n):\n    num=1\n    res=0\n    while num<=n:\n        res+=num*(num+1)/2\n        num+=2\n    return res\n",
        "num_ids": 91
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*(n+1)//2\n",
        "num_ids": 29
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1: \n        return 1\n    else: \n        return n*(n+1)/2\n",
        "num_ids": 30
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0: return 0\n    if n == 1: return 1\n    return n + cal_sum(n-1)\n",
        "num_ids": 33
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    n = n + 1\n    n_sum = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            n_sum += i\n    return n_sum\n",
        "num_ids": 49
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[i:i+l] for i in range(0, len(str), l)]\n",
        "num_ids": 27
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # for i, item in enumerate(l):\n    #     if len(item) <= l:\n    #         str += item\n    #     else:\n    #         str += item[:l] + '\\n'\n    # return str\n    return '\\n'.join([item[:l] for item in l])\n",
        "num_ids": 80
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if not str:\n        return []\n    return str[0:l]\n",
        "num_ids": 21
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for s in l:\n        if len(s) < l:\n            result.append(s)\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[i:i+l] for i in range(len(str)) if i+l <= len(str)]\n",
        "num_ids": 32
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    x = len(str)\n    y = l\n    if y > x:\n        print('Please enter a positive number')\n    else:\n        print(str[0:y])\n",
        "num_ids": 46
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(l) < l:\n        return None\n    start = 0\n    stop = l\n    for i in range(l):\n        if len(str[start:stop]) == l:\n            print str[start:stop]\n            start += 1\n            stop += 1\n        else:\n            stop += 1\n",
        "num_ids": 77
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    import collections\n",
        "num_ids": 6
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str)>l:\n        return str[:l]\n    else:\n        return str\n",
        "num_ids": 28
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    assert(len(l) > 0)\n    for i in l:\n        assert(isinstance(i, str))\n    \n    def find_max(str_lst, n):\n        assert(len(str_lst) > 0)\n        assert(n >= 0)\n        \n        if n > len(str_lst):\n            return ''\n        else:\n            ind = 0\n            max_s = ''\n            while ind < len(str_lst):\n                if len(str_lst[ind]) >= n:\n                    return str_lst[ind]\n                ind += 1\n            \n    def find_first(str_lst, n):\n        assert(len(str_lst) > 0)\n        assert(n >= 0)\n        \n        if n > len(str_lst):\n            return ''\n        else:\n            ind = 0\n            while ind < len(str_lst):\n                if len(str_lst[ind]) >= n:\n                    return str_lst[ind]\n                ind += 1\n    \n    \n    if len(l) == 1:\n        return l[0]\n    else:\n        max_str = find_max(l, len(l[0]))\n        first_str = find_first(l, len(l[0]))\n        \n        return max_str if len(max_str) > len(first_str) else first_str\n    \n",
        "num_ids": 343
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return ''.join(text1.split())\n    \ndef convert_string_to_list(text1):\n    '''\n    Write a function to convert the string to list\n    '''\n    return text1.split()\n",
        "num_ids": 10
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return ''.join(text1.split())\n",
        "num_ids": 14
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return \"\".join(text1.split())\n",
        "num_ids": 14
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace(\" \", \"\")\n    return text1\n",
        "num_ids": 20
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.strip()\n    text1 = text1.replace(\" \",\"\")\n    return text1\ndef remove_multiple_spaces(text1):\n    '''\n    Write a function to remove all multiple whitespaces from the given string.\n    '''\n    text1 = re.sub(\"\\s+\",' ',text1)\n    return text1\ndef remove_a_b_c(text1):\n    '''\n    Write a function to remove all characters in a,b,c from the given string.\n    '''\n    text1 = re.sub('a','',text1)\n    text1 = re.sub('b','',text1)\n    text1 = re.sub('c','',text1)\n    return text1\ndef remove_multiple_spaces2(text1):\n    '''\n    Write a function to remove all multiple whitespaces from the given string.\n    '''\n    text1 = re.sub(\"\\s+\",' ',text1)\n    return text1\ndef remove_multiple_spaces3(text1):\n    '''\n    Write a function to remove all multiple whitespaces from the given string.\n    '''\n    text1 = re.sub(\"\\s+\",' ',text1)\n    text1 = text1.strip()\n    return text1\ndef remove_empty_lines(text1):\n    '''\n    Write a function to remove all empty lines from the given string.\n    '''\n    text1 = text1.strip()\n    text1 = re.sub(\"\\n+\",'\\n',text1)\n    return text1\ndef remove_all_letters(text1):\n    '''\n    Write a function to remove all letters from the given string.\n    '''\n    text1 = re.sub('[a-zA-Z]', '', text1)\n    return text1\ndef remove_alphanumeric(text1):\n    '''\n    Write a function to remove all alphanumeric characters from the given string.\n    '''\n    text1 = re.sub('[\\w]', '', text1)\n    return text1\ndef remove_digits(text1):\n    '''\n    Write a function to remove all digits from the given string.\n    '''\n    text1 = re.sub('[\\d]', '', text1)\n    return text1\ndef remove_punctuations(text1):\n    '''\n    Write a function to remove all punctuations from the given string.\n    '''\n    text1 = re.sub('[^\\w\\s]', '', text1)\n    return text1\ndef remove_stop_words(text1):\n    '''\n    Write a function to remove all stop words from the given string.\n    '''\n    text1 = text1.split()\n    text1 = [w for w in text1 if not w in stopwords.words('english')]\n    text1 =''.join(text1)\n    return text1\ndef remove_numbers(text1):\n    '''\n    Write a function to remove all digits from the given string.\n    '''\n    text1 = re.sub('[\\d]', '', text1)\n    return text1\ndef remove_special_characters(text1):\n    '''\n    Write a function to remove all special characters from the given string.\n    '''\n    text1 = re.sub('[^\\w\\s]', '', text1)\n    return text1\ndef remove_special_characters2(text1):\n    '''\n    Write a function to remove all special characters from the given string.\n    '''\n    text1 = re.sub('[^a-zA-Z\\s\\d\\w]', '', text1)\n    return text1\ndef remove_letters(text1):\n    '''\n    Write a function to remove all letters from the given string.\n    '''\n    text1 = re.sub('[a-zA-Z]', '', text1)\n    return text1\ndef remove_letters2(text1):\n    '''\n    Write a function to remove all letters from the given string.\n    '''\n    text1 = re.sub('[a-zA-Z]', '', text1)\n    return text1\ndef remove_words_with_numbers(text1):\n    '''\n    Write a function to remove all words with numbers from the given string.\n    '''\n    text1 = re.sub('[\\d]', '', text1)\n    return text1\ndef remove_multiple_white_spaces(text1):\n    '''\n    Write a function to remove all multiple whitespaces from the given string.\n    '''\n    text1 = re.sub('\\s+','', text1)\n    return text1\ndef remove_multiple_whitespaces(text1):\n    '''\n    Write a function to remove all multiple whitespaces from the given string.\n    '''\n    text1 = re.sub('\\s+','', text1)\n    return text1\ndef remove_multiple_white_spaces2(text1):\n    '''\n    Write a function to remove all multiple whitespaces from the given string.\n    '''\n    text1 = re.sub('\\s+','', text1)\n    text1 = text1.strip()\n    return text1\ndef remove_all_lines(text1):\n    '''\n    Write a function to remove all lines from the given string.\n    '''\n    text1 = text1.split(\"\\n\")\n    text1 = '\\n'.join(text1)\n    return text1\ndef remove_multiple_lines(text1):\n    '''\n    Write a function to remove all lines from the given string.\n    '''\n    text1 = text1.split(\"\\n\")\n    text1 = '\\n'.join(text1)\n    return text1\ndef remove_multiple_lines2(text1):\n    '''\n    Write a function to remove all lines from the given string.\n    '''\n    text1 = text1.split(\"\\n\")\n    text1 = '\\n'.join(text1)\n    return text1\ndef remove_all_lines2(text1):\n    '''\n    Write a function to remove all lines from the given string.\n    '''\n    text1 = text1.split(\"\\n\")\n    text1 = '\\n'.join(text1)\n    return text1\ndef remove_empty_lines2(text1):\n    '''\n    Write a function to remove all empty lines from the given string.\n    '''\n    text1 = text1.split(\"\\n\")\n    text1 = [x for x in text1 if x]\n    text1 = '\\n'.join(text1)\n    return text1\ndef remove_empty_lines2(text1):\n    '''\n    Write a function to remove all empty lines from the given string.\n    '''\n    text1 = text1.split(\"\\n\")\n    text1 = [x for x in text1 if x]\n    text1 = '\\n'.join(text1)\n    return text1\ndef remove_empty_lines3(text1):\n    '''\n    Write a function to remove all empty lines from the given string.\n    '''\n    text1 = text1.split(\"\\n\")\n    text1 = [x for x in text1 if x]\n    return text1\ndef remove_multiple_lines3(text1):\n    '''\n    Write a function to remove all empty lines from the given string.\n    '''\n    text1 = text1.split(\"\\n\")\n    text1 = [x for x in text1 if x]\n    return text1\ndef remove_all_lines3(text1):\n    '''\n    Write a function to remove all empty lines from the given string.\n    '''\n    text1 = text1.split(\"\\n\")\n    text1 = [x for x in text1 if x]\n    return text1\ndef remove_all_lines4(text1):\n    '''\n    Write a function to remove all empty lines from the given string.\n    '''\n    text1 = text1.split(\"\\n\")\n    text1 = [x for x in text1 if x]\n    return text1\ndef remove_all_lines5(text1):\n    '''\n    Write a function to remove all empty lines from the given string.\n    '''\n    text1 = text1.split(\"\\n\")\n    tex",
        "num_ids": 17
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    regex = re.compile(r'\\s+')\n    text2 = regex.sub('',text1)\n    return text2\n",
        "num_ids": 36
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub('\\s+', '', text1)\n    return text2\n",
        "num_ids": 25
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(\"\\s+\",\"\",text1)\n",
        "num_ids": 17
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace(' ', '')\n    return text1\ndef digits(text1):\n    '''\n    Write a function to replace all digits in a string with the word \u201cdigit\u201d.\n    '''\n    text1 = re.sub(r'\\d+', 'digit', text1)\n    return text1\ndef replace_space(text1):\n    '''\n    Write a function to replace all spaces in a string with the letter \u201ca\u201d.\n    '''\n    text1 = re.sub(r' ', 'a', text1)\n    return text1\ndef remove_punctuations(text1):\n    '''\n    Write a function to remove all punctuations from a string.\n    '''\n    text1 = re.sub(r'[^\\w\\s]', '', text1)\n    return text1\ndef remove_other_symbols(text1):\n    '''\n    Write a function to remove all symbols from the given string.\n    '''\n    text1 = re.sub(r'[^\\w\\s]', '', text1)\n    return text1\ndef lowercase(text1):\n    '''\n    Write a function to convert the given string to lowercase.\n    '''\n    text1 = text1.lower()\n    return text1\ndef remove_multiple_spaces(text1):\n    '''\n    Write a function to remove all the consecutive spaces in the given string.\n    '''\n    text1 = re.sub(r'\\s+','', text1)\n    return text1\ndef remove_double_spaces(text1):\n    '''\n    Write a function to remove all the consecutive double spaces in the given string.\n    '''\n    text1 = re.sub(r'\\s\\s+','', text1)\n    return text1\ndef capitalize(text1):\n    '''\n    Write a function to convert the first character of the given string to upper case.\n    '''\n    text1 = text1.capitalize()\n    return text1\ndef first_word(text1):\n    '''\n    Write a function to get the first word of a given string.\n    '''\n    text1 = text1.split(' ')\n    return text1[0]\ndef last_word(text1):\n    '''\n    Write a function to get the last word of a given string.\n    '''\n    text1 = text1.split(' ')\n    return text1[-1]\ndef add_space_to_end_of_words(text1):\n    '''\n    Write a function to add a space at the end of words in a given string.\n    '''\n    text1 = text1.strip()\n    text1 = text1.split(' ')\n    text1.append(' ')\n    return''.join(text1)\ndef word_capitalize(text1):\n    '''\n    Write a function to convert the first letter of each word in the given string to upper case.\n    '''\n    text1 = text1.split(' ')\n    text1 = [word[0].upper() + word[1:] for word in text1]\n    return''.join(text1)\ndef char_count(text1):\n    '''\n    Write a function to count the number of characters in a given string.\n    '''\n    return len(text1)\ndef count_words(text1):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    return len(text1.split(' '))\ndef remove_numbers(text1):\n    '''\n    Write a function to remove all the numbers from a given string.\n    '''\n    text1 = re.sub(r'\\d+', '', text1)\n    return text1\ndef count_vowels(text1):\n    '''\n    Write a function to count the number of vowels in a given string.\n    '''\n    text1 = text1.lower()\n    text1 = re.sub(r'[^aeiou]', '', text1)\n    return len(text1)\ndef count_consonants(text1):\n    '''\n    Write a function to count the number of consonants in a given string.\n    '''\n    text1 = text1.lower()\n    text1 = re.sub(r'[^aeiou]', '', text1)\n    return len(text1)\ndef count_lowercase(text1):\n    '''\n    Write a function to count the number of lowercase characters in a given string.\n    '''\n    return len(re.findall(r'[a-z]', text1))\ndef count_uppercase(text1):\n    '''\n    Write a function to count the number of uppercase characters in a given string.\n    '''\n    return len(re.findall(r'[A-Z]', text1))\ndef count_spaces(text1):\n    '''\n    Write a function to count the number of spaces in a given string.\n    '''\n    return len(re.findall(r'\\s', text1))\ndef count_numbers(text1):\n    '''\n    Write a function to count the number of numbers in a given string.\n    '''\n    return len(re.findall(r'\\d', text1))\ndef count_words(text1):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    return len(text1.split(' '))\ndef count_unique_words(text1):\n    '''\n    Write a function to count the number of unique words in a given string.\n    '''\n    text1 = text1.split(' ')\n    return len(set(text1))\ndef count_letters(text1):\n    '''\n    Write a function to count the number of letters in a given string.\n    '''\n    return len(re.findall(r'[a-zA-Z]', text1))\ndef count_alphabets(text1):\n    '''\n    Write a function to count the number of alphabets in a given string.\n    '''\n    return len(re.findall(r'[a-zA-Z]', text1))\ndef count_others(text1):\n    '''\n    Write a function to count the number of symbols in a given string.\n    '''\n    return len(re.findall(r'[^a-zA-Z0-9]', text1))\ndef count_words_containing_digits(text1):\n    '''\n    Write a function to count the number of words containing at least one digit in a given string.\n    '''\n    text1 = text1.split(' ')\n    return len([word for word in text1 if re.search(r'\\d', word)])\ndef replace_word(text1, old_word, new_word):\n    '''\n    Write a function to replace a word in a given string.\n    '''\n    text1 = text1.replace(old_word, new_word)\n    return text1\ndef replace_words(text1, old_word, new_word):\n    '''\n    Write a function to replace all the words of a given string.\n    '''\n    text1 = re.sub(old_word, new_word, text1)\n    return text1\ndef capitalize_first_and_last_letter(text1):\n    '''\n    Write a function to capitalize the first and last letter of a given string.\n    '''\n    return capitalize(text1[0].upper() + text1[1:len(text1) - 1] + text1[-1].upper())\ndef count_sentences(text1):\n    '''\n    Write a function to count the number of sentences in a given string.\n    '''\n    return len(re.split(r'[.!?]', text1)) - 1\ndef count_words_with_length(text1, length):\n    '''\n    Write a function to count the number of words in a given string with a given length.\n    '''\n    return len([word for word in text1.split(' ') if len(word) == length])\ndef count_words_with_length_from_set(text1, length):\n    '''\n    Write a function to count the number of words in a given string with a given length from a given set o",
        "num_ids": 25
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace('\\n',' ').replace('\\t',' ').replace('\\r',' ')\n    text1 = re.sub('\\s+',' ', text1)\n    return text1\ndef remove_end_line(text1):\n    '''\n    Write a function to remove the last line of the given text.\n    '''\n    text1 = text1[:len(text1)-1]\n    return text1\ndef remove_multiple_spaces(text1):\n    '''\n    Write a function to remove multiple spaces in the given text.\n    '''\n    text1 = re.sub('\\s+',' ', text1)\n    return text1\ndef replace_function(text1):\n    '''\n    Write a function to replace \u201ca\u201d with \u201c1\u201d and \u201cb\u201d with \u201c2\u201d.\n    '''\n    text1 = re.sub('a','1',text1)\n    text1 = re.sub('b','2',text1)\n    return text1\ndef remove_multiple_newline(text1):\n    '''\n    Write a function to remove multiple newline characters from the given text.\n    '''\n    text1 = re.sub('\\n\\n+','\\n',text1)\n    return text1\ndef remove_double_quotes(text1):\n    '''\n    Write a function to remove double quotes from the given text.\n    '''\n    text1 = re.sub('[\\\"]', '',text1)\n    return text1\ndef replace_all(text1):\n    '''\n    Write a function to replace the all words with the word length from the given text.\n    '''\n    text1 = re.sub(r'\\b\\w{1,}\\b', lambda word: len(word.group()), text1)\n    return text1\ndef find_sub_string_occurence(text1,substring):\n    '''\n    Write a function to find the occurrence of a substring in the given string.\n    '''\n    text1 = re.search(substring,text1)\n    return text1\ndef find_sub_string(text1,substring):\n    '''\n    Write a function to find the occurrence of a substring in the given string.\n    '''\n    text1 = re.search(substring,text1)\n    if text1:\n        return text1.group()\n    else:\n        return 'Not Found'\ndef find_sub_string_re(text1,substring):\n    '''\n    Write a function to find the occurrence of a substring in the given string.\n    '''\n    text1 = re.search(substring,text1)\n    if text1:\n        return text1.group()\n    else:\n        return 'Not Found'\ndef find_sub_string_start_end(text1,substring):\n    '''\n    Write a function to find the occurrence of a substring in the given string.\n    '''\n    text1 = re.search(substring,text1)\n    if text1:\n        return text1.span()\n    else:\n        return 'Not Found'\ndef find_all_occurrences(text1,substring):\n    '''\n    Write a function to find the occurrence of a substring in the given string.\n    '''\n    text1 = re.findall(substring,text1)\n    return text1\ndef replace_sub_string(text1,old,new):\n    '''\n    Write a function to replace the occurrence of a substring with another substring.\n    '''\n    text1 = re.sub(old,new,text1)\n    return text1\ndef strip_all(text1):\n    '''\n    Write a function to remove the whitespaces from the both ends of the given string.\n    '''\n    text1 = text1.strip()\n    return text1\ndef strip_all_left(text1):\n    '''\n    Write a function to remove the whitespaces from the left side of the given string.\n    '''\n    text1 = text1.lstrip()\n    return text1\ndef strip_all_right(text1):\n    '''\n    Write a function to remove the whitespaces from the right side of the given string.\n    '''\n    text1 = text1.rstrip()\n    return text1\ndef strip_all_both(text1):\n    '''\n    Write a function to remove the whitespaces from the both sides of the given string.\n    '''\n    text1 = text1.strip()\n    return text1\ndef replace_multiple_substring(text1,old,new):\n    '''\n    Write a function to replace the occurrence of a substring with another substring.\n    '''\n    text1 = re.sub(old,new,text1)\n    return text1\ndef split_string(text1,sep):\n    '''\n    Write a function to split the given string into substrings separated by the given separator.\n    '''\n    text1 = text1.split(sep)\n    return text1\ndef replace_all_occurrences(text1,old,new):\n    '''\n    Write a function to replace all occurrence of a substring with another substring.\n    '''\n    text1 = re.sub(old,new,text1)\n    return text1\ndef replace_one_occurrences(text1,old,new):\n    '''\n    Write a function to replace the first occurrence of a substring with another substring.\n    '''\n    text1 = re.sub(old,new,text1,1)\n    return text1\ndef strip_left(text1,strip_chars):\n    '''\n    Write a function to remove the whitespaces from the left side of the given string.\n    '''\n    text1 = text1.lstrip(strip_chars)\n    return text1\ndef strip_right(text1,strip_chars):\n    '''\n    Write a function to remove the whitespaces from the right side of the given string.\n    '''\n    text1 = text1.rstrip(strip_chars)\n    return text1\ndef strip_both(text1,strip_chars):\n    '''\n    Write a function to remove the whitespaces from the both sides of the given string.\n    '''\n    text1 = text1.strip(strip_chars)\n    return text1\ndef substitute(text1,old,new):\n    '''\n    Write a function to replace all occurrence of a substring with another substring.\n    '''\n    text1 = re.sub(old,new,text1)\n    return text1\ndef replace_function_3(text1):\n    '''\n    Write a function to replace the first occurrence of a substring with another substring.\n    '''\n    text1 = re.sub('a','1',text1)\n    text1 = re.sub('b','2',text1)\n    return text1\ndef replace_function_4(text1):\n    '''\n    Write a function to replace the first occurrence of a substring with another substring.\n    '''\n    text1 = re.sub('a','1',text1)\n    text1 = re.sub('b','2',text1)\n    return text1\ndef replace_function_5(text1):\n    '''\n    Write a function to replace the first occurrence of a substring with another substring.\n    '''\n    text1 = re.sub('a','1',text1)\n    text1 = re.sub('b','2',text1)\n    return text1\ndef replace_function_6(text1):\n    '''\n    Write a function to replace the first occurrence of a substring with another substring.\n    '''\n    text1 = re.sub('a','1',text1)\n    text1 = re.sub('b','2',text1)\n    return text1\ndef replace_function_7(text1):\n    '''\n    Write a function to replace the first occurrence of a substring with another substring.\n    '''\n    text1 = re.sub('a','1',text1)\n    text1 = re.sub('b','2',text1)\n    return text1\ndef replace_function_8(text1):\n    '''\n    Write a function to replace the first occurrence of a substring with another substring.\n    '''\n    text1 = re.sub('a','1',text1",
        "num_ids": 16
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return (actual_cost-sale_amount)\n    return 0\n",
        "num_ids": 29
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    # step 1 : get the amount of loss in sale\n    amount_lost = actual_cost - sale_amount\n    # step 2 : check if the amount is less than zero or not\n    if amount_lost < 0:\n        # step 3 : return loss amount\n        return amount_lost\n    # step 4 : if loss amount is zero then return zero\n    elif amount_lost == 0:\n        return 0\n    # step 5 : if loss amount is greater than zero then return loss amount\n    else:\n        return amount_lost\n",
        "num_ids": 123
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss=0\n    if actual_cost<sale_amount:\n        loss=actual_cost-sale_amount\n    return loss\n",
        "num_ids": 33
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0\n",
        "num_ids": 40
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    return 0\ndef profit_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives profit amount on a sale if the given amount has profit else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    return 0\ndef fix_cost(actual_cost):\n    '''\n    Write a function that calculates cost of a given item to make sale at a sale price\n    if cost is zero, it will return actual cost.\n    '''\n    if actual_cost < 0:\n        return 0\n    return actual_cost\ndef fix_sale(sale_amount):\n    '''\n    Write a function that calculates sale price of a given item to make profit at a profit price\n    if sale price is zero, it will return actual sale price.\n    '''\n    if sale_amount < 0:\n        return 0\n    return sale_amount\ndef fix_sale_price(sale_amount,actual_cost):\n    '''\n    Write a function that calculates sale price of a given item to make profit at a profit price\n    if sale price is zero, it will return actual sale price.\n    '''\n    if sale_amount < 0:\n        return 0\n    return sale_amount - actual_cost\ndef fix_profit(actual_cost):\n    '''\n    Write a function that calculates profit of a given item to make sale at a sale price\n    if profit is zero, it will return actual profit.\n    '''\n    if actual_cost < 0:\n        return 0\n    return actual_cost\ndef fix_profit_price(actual_cost,sale_amount):\n    '''\n    Write a function that calculates profit of a given item to make sale at a sale price\n    if profit is zero, it will return actual profit.\n    '''\n    if sale_amount < 0:\n        return 0\n    return sale_amount - actual_cost\ndef fix_sell(actual_cost,sale_amount):\n    '''\n    Write a function that calculates sale of a given item to make profit at a profit price\n    if sale is zero, it will return actual sale.\n    '''\n    if sale_amount < 0:\n        return 0\n    return sale_amount\ndef fix_buy(actual_cost,sale_amount):\n    '''\n    Write a function that calculates cost of a given item to make sale at a sale price\n    if cost is zero, it will return actual cost.\n    '''\n    if sale_amount < 0:\n        return 0\n    return sale_amount - actual_cost\ndef fix_buy_price(actual_cost,sale_amount):\n    '''\n    Write a function that calculates sale price of a given item to make profit at a profit price\n    if sale price is zero, it will return actual sale price.\n    '''\n    if sale_amount < 0:\n        return 0\n    return sale_amount - actual_cost\ndef fix_cost_price(actual_cost,sale_amount):\n    '''\n    Write a function that calculates sale price of a given item to make profit at a profit price\n    if sale price is zero, it will return actual sale price.\n    '''\n    if sale_amount < 0:\n        return 0\n    return actual_cost\ndef fix_buy_sale(actual_cost,sale_amount):\n    '''\n    Write a function that calculates sale of a given item to make profit at a profit price\n    if sale is zero, it will return actual sale.\n    '''\n    if sale_amount < 0:\n        return 0\n    return actual_cost\ndef fix_sale_cost(actual_cost,sale_amount):\n    '''\n    Write a function that calculates cost of a given item to make sale at a sale price\n    if cost is zero, it will return actual cost.\n    '''\n    if sale_amount < 0:\n        return 0\n    return sale_amount - actual_cost\ndef fix_profit_cost(actual_cost,sale_amount):\n    '''\n    Write a function that calculates profit of a given item to make sale at a sale price\n    if profit is zero, it will return actual profit.\n    '''\n    if sale_amount < 0:\n        return 0\n    return sale_amount - actual_cost\ndef fix_profit_sale(actual_cost,sale_amount):\n    '''\n    Write a function that calculates sale of a given item to make profit at a profit price\n    if sale is zero, it will return actual sale.\n    '''\n    if sale_amount < 0:\n        return 0\n    return sale_amount\ndef fix_sell_sale(actual_cost,sale_amount):\n    '''\n    Write a function that calculates sale of a given item to make profit at a profit price\n    if sale is zero, it will return actual sale.\n    '''\n    if sale_amount < 0:\n        return 0\n    return actual_cost\ndef fix_buy_buy(actual_cost,sale_amount):\n    '''\n    Write a function that calculates cost of a given item to make sale at a sale price\n    if cost is zero, it will return actual cost.\n    '''\n    if sale_amount < 0:\n        return 0\n    return sale_amount - actual_cost\ndef fix_cost_cost(actual_cost,sale_amount):\n    '''\n    Write a function that calculates cost of a given item to make sale at a sale price\n    if cost is zero, it will return actual cost.\n    '''\n    if sale_amount < 0:\n        return 0\n    return actual_cost\ndef fix_sale_cost(actual_cost,sale_amount):\n    '''\n    Write a function that calculates sale price of a given item to make profit at a profit price\n    if sale price is zero, it will return actual sale price.\n    '''\n    if sale_amount < 0:\n        return 0\n    return actual_cost\ndef fix_buy_buy_price(actual_cost,sale_amount):\n    '''\n    Write a function that calculates sale price of a given item to make profit at a profit price\n    if sale price is zero, it will return actual sale price.\n    '''\n    if sale_amount < 0:\n        return 0\n    return actual_cost\ndef fix_sell_buy(actual_cost,sale_amount):\n    '''\n    Write a function that calculates sale of a given item to make profit at a profit price\n    if sale is zero, it will return actual sale.\n    '''\n    if sale_amount < 0:\n        return 0\n    return actual_cost\ndef fix_buy_buy_sale(actual_cost,sale_amount):\n    '''\n    Write a function that calculates sale of a given item to make profit at a profit price\n    if sale is zero, it will return actual sale.\n    '''\n    if sale_amount < 0:\n        return 0\n    return actual_cost\ndef fix_sell_sell(actual_cost,sale_amount):\n    '''\n    Write a function that calculates sale of a given item to make profit at a profit price\n    if sale is zero, it will return actual sale.\n    '''\n    if sale_amount < 0:\n        return 0\n    return actual_cost\ndef fix_sell_sell_price(actual_cost,sale_amount):\n    '''\n    Write a function that calculates sale price of a given item to make profit at a profit price\n    if sale price is zero, it will return actual sale price.\n    '''\n    if sale_amount < 0:\n        return 0\n    return actual_cost\ndef fix_buy_sell(actual_cost,sale_amount):\n    '''\n    Write a function that calculates sale of a given item to make profit at a profit price\n    if sale is zero, it will return actual sale.\n    '''\n    if sale_amount < 0:\n        return 0\n    return actual_cost\ndef fix_buy_sell_price(actual_cost,sale_amount):\n    '''\n    Write a function that calculates sale price of a given item to make profit at a profit price\n    if sale price is zero, it will return actual sale price.\n    '''\n    if sale_amount < 0:\n        return 0\n    return actual_cost\ndef fix_cost_sell(actual_cost,sale_amount):\n    '''\n    Write a function that calculates sale of a given item to make profit at a profit price\n    if sale is zero, it will return actual sale.\n    '''\n    if sale_amount < 0:\n        return 0\n",
        "num_ids": 15
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost - sale_amount >= 0:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "num_ids": 33
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n    else:\n        loss_amount = 0\n    return loss_amount\n",
        "num_ids": 43
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount if actual_cost > sale_amount else 0\n",
        "num_ids": 22
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n) :\n        if n % i == 0 :\n            if i % 2 == 0 :\n                sum += i\n    return sum\n",
        "num_ids": 46
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n==1:\n        return 1\n    else:\n        if n%2==0:\n            return 2*n+1+sumofFactors(n/2)\n        else:\n            return 2*(n-1)+1+sumofFactors(n+1)\n            \n",
        "num_ids": 71
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i=1\n    sum=0\n    while(i*i<=n):\n        if n%i==0:\n            if i%2==0:\n                sum=sum+i\n        i=i+1\n    return sum\n",
        "num_ids": 59
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    #remove the below line and write your own code.\n    return 0\n",
        "num_ids": 19
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n) : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                sum = sum + i\n    return sum\n",
        "num_ids": 51
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    \n    sum = 0\n    for i in range(1,int(math.sqrt(n))+1) :\n        if n % i == 0 :\n            if i % 2 == 0 :\n                sum += i\n            if n/i % 2 == 0 :\n                sum += n/i\n    return sum\n    \n",
        "num_ids": 78
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    result = 1\n    for i in range(2, int(math.sqrt(n))+1) : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                result = result + i + n/i\n            else : \n                result = result + i\n    return result\n    \ndef goldbach(n) : \n    '''\n    Write a python function to check if a number is a perfect number.\n    '''\n    if (n / 2) * (n + 1) == sumofFactors(n) : \n        print \"Yes\"\n    else : \n        print \"No\"\n",
        "num_ids": 43
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if n%i == 0:\n            if (i%2) == 0:\n                sum += i\n    return sum\n",
        "num_ids": 47
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2,(n//2) + 1) : \n        if (n % i == 0) : \n            sum = sum + i \n    return sum \ndef pisanoPeriod(m) : \n    '''\n    Write a python function to find the pisano period of a given number.\n    '''\n    previous = 0\n    current = 1\n    for i in range(0, m * m) : \n        previous, current = current, (previous + current) % m \n        if (previous == 0 and current == 1) : \n            return i + 1 \ndef fib(n) : \n    '''\n    Write a python function to find the n th fibonacci number.\n    '''\n    a = 0\n    b = 1\n    if (n < 0) : \n        print(\"Incorrect input\") \n    elif (n == 0) : \n        return a \n    elif (n == 1) : \n        return b \n    else : \n        for i in range(2, n + 1) : \n            c = a + b \n            a = b \n            b = c \n        return b \ndef countDigitOne(n) : \n    '''\n    Write a python function to find the total number of digits in the decimal number n.\n    '''\n    digits = 0\n    while (n > 0) : \n        digits = digits + 1\n        n = n // 10\n    return digits \ndef isPandigital(n, arr) : \n    '''\n    Write a python function to check whether a number is pandigital or not.\n    '''\n    if (len(str(n))!= 9) : \n        return False\n    temp = []\n    for i in range(1, 10) : \n        temp.append(i)\n    for i in str(n) : \n        if (i not in temp) : \n            return False\n        temp.remove(i)\n    if (len(temp) > 0) : \n        return False\n    return True \ndef sumDigits(n) : \n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    sum = 0\n    while (n > 0) : \n        sum = sum + (n % 10)\n        n = n // 10\n    return sum \ndef sumofDigits(n) : \n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    sum = 0\n    while (n > 0) : \n        sum = sum + n % 10\n        n = n // 10\n    return sum \ndef sumofDigitsFactors(n) : \n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    sum = 0\n    for i in range(2, (n // 2) + 1) : \n        if (n % i == 0) : \n            sum = sum + sumofDigits(i)\n    return sum \ndef isPrime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if (n <= 1) : \n        return False\n    if (n <= 3) : \n        return True \n    if (n % 2 == 0 or n % 3 == 0) : \n        return False\n    i = 5\n    while (i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True \ndef isPrimeFactors(n) : \n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    i = 2\n    while (i * i <= n) : \n        if (n % i == 0) : \n            return i\n        i = i + 1\n    return n \ndef countPrimeFactors(n) : \n    '''\n    Write a python function to find the count of prime factors of a number.\n    '''\n    count = 0\n    while (n > 1) : \n        if (isPrime(n)) : \n            count = count + 1\n            n = n // isPrimeFactors(n)\n    return count \ndef isPerfectNumber(n) : \n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    temp = sumofFactors(n)\n    if (temp == n) : \n        return True\n    else : \n        return False\ndef isPandigital(n, arr) : \n    '''\n    Write a python function to check whether a number is pandigital or not.\n    '''\n    if (len(str(n))!= 9) : \n        return False\n    temp = []\n    for i in range(1, 10) : \n        temp.append(i)\n    for i in str(n) : \n        if (i not in temp) : \n            return False\n        temp.remove(i)\n    if (len(temp) > 0) : \n        return False\n    return True \ndef getFactors(n) : \n    '''\n    Write a python function to find the factors of a number.\n    '''\n    if (n < 1) : \n        print(\"Incorrect input\") \n    i = 2\n    factors = []\n    while (i * i <= n) : \n        if (n % i == 0) : \n            factors.append(i)\n            factors.append(n // i)\n        i = i + 1\n    if (n > 1) : \n        factors.append(n)\n    return factors \ndef sumFactors(n) : \n    '''\n    Write a python function to find the sum of factors of a number.\n    '''\n    sum = 0\n    for i in range(2, (n // 2) + 1) : \n        if (n % i == 0) : \n            sum = sum + i \n    return sum \ndef isPerfectSquare(n) : \n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if (n < 0) : \n        print(\"Incorrect input\") \n    temp = int(math.sqrt(n))\n    if (temp * temp == n) : \n        return True\n    return False \ndef isPerfectCube(n) : \n    '''\n    Write a python function to check whether a number is perfect cube or not.\n    '''\n    if (n < 0) : \n        print(\"Incorrect input\") \n    temp = int(math.pow(n, 1 / 3))\n    if (temp * temp * temp == n) : \n        return True\n    return False \ndef isFibonacci(n) : \n    '''\n    Write a python function to check whether a number is fibonacci or not.\n    '''\n    if (n < 0) : \n        print(\"Incorrect input\") \n    a = 0\n    b = 1\n    if (n == 0) : \n        return True\n    elif (n == 1) : \n        return True\n    else : \n        for i in range(2, n) : \n            c = a + b \n            a = b \n            b = c \n            if (a == n) or (b == n) or (c == n) : \n                return True\n        return False \ndef isArmstrong(n) : \n    '''\n    Write a python function to check whether a number is armstrong or not.\n    '''\n    temp = sumofDigitsFactors(n)\n    if (temp == n) : \n        return True\n    return False \ndef isLychrel(n) : \n    '''\n    Write a python function to check whether a number is lychrel or not.\n    '''\n    temp = n\n    for i in range(0, 50) : \n        temp = sumofDigits(temp)\n        if (temp == n) : \n            return False\n    return True \ndef isPalindrome(n) : \n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''",
        "num_ids": 1
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) :\n            if ((n / i) % 2 == 0) :\n                sum += i \n            else : \n                sum += (i + n / i) \n    return sum \n",
        "num_ids": 83
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # the pattern will match the letters 'a' to 'z', the latter\n    # means that we can create a word that contains 'z' anywhere\n    pattern = '\\w*z\\w*'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n",
        "num_ids": 72
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    print(re.search(r'\\bz\\w*', text))\n",
        "num_ids": 21
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    r = re.compile(r\"\\b[a-zA-Zz]+\\b\")\n    return r.match(text)\n",
        "num_ids": 36
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    r = re.compile(r'\\w*z\\w*', re.IGNORECASE)\n    return r.search(text)!= None\n",
        "num_ids": 39
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-z]z\\b', re.IGNORECASE)\n    return pattern.match(text)\n",
        "num_ids": 40
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    def match_z(word):\n        return 'z' in word\n    return match_z(text)\n",
        "num_ids": 28
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'\\w*z\\w*', text)\n",
        "num_ids": 21
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r\"\\b(\\w+[z]+\\w+)\\b\",text)\n",
        "num_ids": 27
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text_lst = re.findall(r'\\b([a-z]*z)\\b', text, flags=re.IGNORECASE)\n    if len(text_lst) == 0:\n        return None\n    else:\n        return text_lst\n",
        "num_ids": 67
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('z\\w+', text):\n        return True\n    return False\n",
        "num_ids": 24
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return 31\n    elif monthnum2 == 2:\n        return 29\n    else:\n        return 30\n",
        "num_ids": 55
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    else:\n        return 30\n",
        "num_ids": 59
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    return monthnum2 in [1,3,5,7,8,10,12]\n",
        "num_ids": 24
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return True\n    if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False\n",
        "num_ids": 54
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n",
        "num_ids": 50
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        if is_leap_year(year2):\n            return 31\n        else:\n            return 28\n    elif monthnum2 in (4,6,9,11):\n        return 30\n    else:\n        return 31\n",
        "num_ids": 65
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return 31\n    elif monthnum2 in [4, 6, 9, 11]:\n        return 30\n    else:\n        return 29\n",
        "num_ids": 57
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthname = {1:'January', 2:'February', 3:'March', 4:'April', 5:'May', 6:'June', 7:'July', 8:'August', 9:'September', 10:'October', 11:'November', 12:'December'}\n    if monthnum2 in (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12):\n        print \"It's a month\"\n    else:\n        print \"It's not a month\"\n",
        "num_ids": 112
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [x[::-1] for x in stringlist]\n",
        "num_ids": 18
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_string_list = []\n    for string in stringlist:\n        new_string_list.append(string[::-1])\n    return new_string_list\n",
        "num_ids": 43
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n",
        "num_ids": 41
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return list(map(lambda x: x[::-1], stringlist))\n",
        "num_ids": 21
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [value[::-1] for value in stringlist]\n",
        "num_ids": 18
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for string in stringlist:\n        new_list.append(string[::-1])\n    return new_list\n",
        "num_ids": 37
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    print(\"reverse_string_list\")\n    print(\"Given: \" + str(stringlist))\n    if len(stringlist) == 0:\n        print(\"Invalid Input.\")\n        return\n    return stringlist[::-1]\n",
        "num_ids": 56
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    return [string[::-1] for string in stringlist]\n    \n",
        "num_ids": 22
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [item[::-1] for item in stringlist]\n",
        "num_ids": 18
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for x in stringlist:\n        new_list.append(x[::-1])\n    return new_list\n",
        "num_ids": 37
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    count=0\n    for i in lst:\n        if(len(i)>count):\n            count=len(i)\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    length = len(lst)\n    mini = lst[0]\n    for i in range(1,length):\n        if len(mini) > len(lst[i]):\n            mini = lst[i]\n    return mini\n",
        "num_ids": 60
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length\n",
        "num_ids": 64
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    Min = len(lst[0])\n    Sublist = lst[0]\n    for i in lst:\n        if len(i) < Min:\n            Min = len(i)\n            Sublist = i\n    return Sublist\n",
        "num_ids": 60
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minimum=lst[0]\n    minimum_len=len(lst[0])\n    for i in range(1,len(lst)):\n        if len(lst[i])<minimum_len:\n            minimum_len=len(lst[i])\n            minimum=lst[i]\n    return minimum,minimum_len\n",
        "num_ids": 84
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    for l in lst:\n        if len(l) < min_len:\n            min_len = len(l)\n            min_l = l\n    return min_l\n",
        "num_ids": 58
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    m = lst[0]\n    for i in lst:\n        if len(i) < len(m):\n            m = i\n    return m\n",
        "num_ids": 40
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len=len(lst[0])\n    for i in lst:\n        if(len(i)<min_len):\n            min_len=len(i)\n            return i\n",
        "num_ids": 50
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    l = len(lst)\n    min = l\n    for i in range(l):\n        for j in range(i,l):\n            if(len(lst[i:j+1]) < min):\n                min = len(lst[i:j+1])\n                print(min)\n    return min\n",
        "num_ids": 79
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    Min = lst[0]\n    for i in lst:\n        if len(i) < len(Min):\n            Min = i\n    return Min\n",
        "num_ids": 40
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    #print(\"%d x %d\" % (l,b))\n    return l*b\n",
        "num_ids": 25
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n    \ndef square_area(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    area = a**2\n    return area\n    \ndef triangle_area(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s = (a + b + c) / 2\n    area = (s*(s-a)*(s-b)*(s-c))**0.5\n    return area\n    \ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    perimeter = 2*(l+b)\n    return perimeter\n    \ndef square_perimeter(a):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    perimeter = 4*a\n    return perimeter\n    \ndef triangle_perimeter(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    perimeter = a+b+c\n    return perimeter\n    \ndef hexagon_perimeter(a):\n    '''\n    Write a function to find the perimeter of a hexagon.\n    '''\n    perimeter = 6*a\n    return perimeter\n    \ndef pentagon_perimeter(a):\n    '''\n    Write a function to find the perimeter of a pentagon.\n    '''\n    perimeter = 5*a\n    return perimeter\n    \ndef octagon_perimeter(a):\n    '''\n    Write a function to find the perimeter of an octagon.\n    '''\n    perimeter = 8*a\n    return perimeter\n    \ndef nonagon_perimeter(a):\n    '''\n    Write a function to find the perimeter of an nonagon.\n    '''\n    perimeter = 7*a\n    return perimeter\n    \ndef pentagon_area(a):\n    '''\n    Write a function to find the area of a pentagon.\n    '''\n    area = (3*(5**0.5))/4*a**2\n    return area\n    \ndef hexagon_area(a):\n    '''\n    Write a function to find the area of a hexagon.\n    '''\n    area = (3*(3**0.5))/2*a**2\n    return area\n    \ndef octagon_area(a):\n    '''\n    Write a function to find the area of an octagon.\n    '''\n    area = a**2\n    return area\n    \ndef nonagon_area(a):\n    '''\n    Write a function to find the area of an nonagon.\n    '''\n    area = (11*(3**0.5))/2*a**2\n    return area\n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = 3.1416*(r**2)\n    return area\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.1416*r\n    return circumference\n    \ndef rectangle_volume(l,b):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    volume = l*b\n    return volume\n    \ndef square_volume(a):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    volume = a**3\n    return volume\n    \ndef triangle_volume(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    s = (a + b + c) / 2\n    volume = (s*(s-a)*(s-b)*(s-c))**0.5\n    return volume\n    \ndef hexagon_volume(a):\n    '''\n    Write a function to find the volume of a hexagon.\n    '''\n    volume = (3*(3**0.5))/2*a**3\n    return volume\n    \ndef pentagon_volume(a):\n    '''\n    Write a function to find the volume of a pentagon.\n    '''\n    volume = (5*(5**0.5))/4*a**3\n    return volume\n    \ndef octagon_volume(a):\n    '''\n    Write a function to find the volume of an octagon.\n    '''\n    volume = a**3\n    return volume\n    \ndef nonagon_volume(a):\n    '''\n    Write a function to find the volume of an nonagon.\n    '''\n    volume = (11*(3**0.5))/2*a**3\n    return volume\n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = 3.1416*(r**2)\n    return area\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.1416*r\n    return circumference\n    \ndef rectangle_surface_area(l,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area = 2*(l*b)\n    return area\n    \ndef square_surface_area(a):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    area = 4*a\n    return area\n    \ndef triangle_surface_area(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    s = (a + b + c) / 2\n    area = (s*(s-a)*(s-b)*(s-c))**0.5\n    return area\n    \ndef hexagon_surface_area(a):\n    '''\n    Write a function to find the surface area of a hexagon.\n    '''\n    area = 6*(3**0.5)*a**2\n    return area\n    \ndef pentagon_surface_area(a):\n    '''\n    Write a function to find the surface area of a pentagon.\n    '''\n    area = 5*(5**0.5)*a**2\n    return area\n    \ndef octagon_surface_area(a):\n    '''\n    Write a function to find the surface area of an octagon.\n    '''\n    area = 8*a\n    return area\n    \ndef nonagon_surface_area(a):\n    '''\n    Write a function to find the surface area of an nonagon.\n    '''\n    area = 7*(3**0.5)*a**2\n    return area\n    \ndef circle_surface_area(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    area = 3.1416*(r**2)\n    return area\n    \ndef circle_area_circle_intersection(r1,r2):\n    '''\n    Write a function to find the area of two circles that have a single intersection.\n    '''\n    area = 3.1416*(r1*r2)**0.5\n    return area\n    \ndef triangle_area_triangle_intersection(t1,t2,t3):\n    '''\n    Write a function to find the area of two triangles that share an edge.\n    '''\n    area = (t1*t2)/2*(((t1+t2)*(t1-t2)*(t1+t2)*(t1-t2))**0.5)\n    return area\n    \ndef rectangle_area_rectangle_intersection(r1,r2):\n    '''\n    Write a function to find the area of two rectangles that share an edge.\n    '''\n    area = r1*r2\n    return area\n    \ndef square_area_square_intersection(s1,s2):\n    '''\n    Write a function to find the area of two squares that share an edge.\n    '''\n    area = s1*s2\n    return area\n    \ndef hexagon_area_hexagon_intersection(h1,h2):\n    '''\n    Write a function to find the area of two he",
        "num_ids": 13
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n    \ndef square_area(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    area = a**2\n    return area\n",
        "num_ids": 13
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    if l < 0:\n        return 0\n    else:\n        return l*b\n",
        "num_ids": 23
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]', '', str1)\n",
        "num_ids": 20
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = ''\n    for i in str1:\n        if i.isupper():\n            pass\n        else:\n            str2 += i\n    return str2\n",
        "num_ids": 42
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    result = ''.join(x for x in str1 if x.islower())\n    return result\n",
        "num_ids": 26
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    res = \"\"\n    for i in str1:\n        if not i.isupper():\n            res += i\n    return res\n",
        "num_ids": 33
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    string = re.sub(r'[A-Z]', '', str1)\n    return string\n",
        "num_ids": 27
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]+', '', str1)\n",
        "num_ids": 20
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.upper().lower()\n",
        "num_ids": 12
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]', '', str1)\n    # output = re.sub(r'[A-Z]', '', str1)\n    # return output\n",
        "num_ids": 47
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    \n    res = ''\n    for i in str1:\n        if i.isupper():\n            continue\n        else:\n            res+=i\n    return res\n    \ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    \n    res = ''\n    for i in str1:\n        if i.isupper():\n            continue\n        else:\n            res+=i\n    return res\n    \ndef capitalize(str1):\n    '''\n    Write a function to capitalize the first letter of the string.\n    '''\n    \n    return str1[0].upper()+str1[1:]\n    \ndef count_substring(str1, sub_str):\n    '''\n    Write a function to count how many times a substring occurs in a given string.\n    '''\n    \n    count = 0\n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            count+=1\n    return count\n    \ndef replace_substring(str1, sub_str, replacement):\n    '''\n    Write a function to replace all occurrences of a substring with the replacement string.\n    '''\n    \n    res = str1\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            res = res[:i] + replacement + res[i+len(sub_str):]\n    return res\n    \ndef has_numbers(str1):\n    '''\n    Write a function to check whether a string has at least one digit.\n    '''\n    \n    return any(x.isdigit() for x in str1)\n    \ndef reverse(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    \n    return str1[::-1]\n    \ndef first_and_last(str1):\n    '''\n    Write a function to remove first and last characters of a string.\n    '''\n    \n    return str1[1:-1]\n    \ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a string is a palindrome.\n    '''\n    \n    return str1 == str1[::-1]\n    \ndef check_string(str1):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    \n    return str1 == str1[::-1]\n    \ndef string_splosion(str1):\n    '''\n    Write a function to get the exploded string of a given string.\n    '''\n    \n    res = ''\n    for i in range(len(str1)):\n        res+=str1[:i+1]\n    return res\n    \ndef string_decomposition(str1):\n    '''\n    Write a function to decompose a string into pairs of characters and their counts.\n    '''\n    \n    res = []\n    count = 1\n    for i in range(len(str1)):\n        if i == len(str1)-1:\n            res.append([str1[i], count])\n            break\n        if str1[i]!= str1[i+1]:\n            res.append([str1[i], count])\n            count = 1\n        else:\n            count+=1\n    return res\n    \ndef count_char_substring(str1, sub_str):\n    '''\n    Write a function to count the number of times a substring appears in a given string.\n    '''\n    \n    count = 0\n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            count+=1\n    return count\n    \ndef count_in_string(str1, sub_str):\n    '''\n    Write a function to count the number of times a substring appears in a given string.\n    '''\n    \n    return str1.count(sub_str)\n    \ndef split_and_join(str1):\n    '''\n    Write a function to split a string into a list of substrings.\n    '''\n    \n    return str1.split()\n    \ndef split_and_join_list(str1):\n    '''\n    Write a function to split a string into a list of substrings.\n    '''\n    \n    return str1.split()\n    \ndef reverse_only_letters(str1):\n    '''\n    Write a function to reverse only the letters in a given string.\n    '''\n    \n    return ''.join(reversed(str1))\n    \ndef multiple_characters(str1):\n    '''\n    Write a function to delete multiple spaces from a string.\n    '''\n    \n    return re.sub('\\s+', '', str1)\n    \ndef multi_space_sub(str1, pattern):\n    '''\n    Write a function to replace multiple spaces in a string with a single space.\n    '''\n    \n    return re.sub(pattern,'', str1)\n    \ndef space_removal(str1):\n    '''\n    Write a function to remove spaces from a string.\n    '''\n    \n    return re.sub('\\s+', '', str1)\n    \ndef replace_substring_by_indices(str1, start, end, replacement):\n    '''\n    Write a function to replace a substring within a string by its index.\n    '''\n    \n    return str1[:start] + replacement + str1[end:]\n    \ndef is_str_permutation(str1, str2):\n    '''\n    Write a function to check whether two strings are permutations of each other.\n    '''\n    \n    return sorted(str1) == sorted(str2)\n    \ndef count_vowels(str1):\n    '''\n    Write a function to count the vowels in a string.\n    '''\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in str1:\n        if i in vowels:\n            count+=1\n    return count\n    \ndef is_perfect(n):\n    '''\n    Write a function to check if a number is perfect.\n    '''\n    \n    total = 0\n    for i in range(1, n):\n        if n%i == 0:\n            total+=i\n    return total == n\n    \ndef is_perfect_digits(n):\n    '''\n    Write a function to check if a number is perfect.\n    '''\n    \n    return all(n%i == 0 for i in range(2, int(n**.5)+1))\n    \ndef is_digits(n):\n    '''\n    Write a function to check if a number is perfect.\n    '''\n    \n    return all(n%i == 0 for i in range(2, int(n**.5)+1))\n    \ndef is_hex(n):\n    '''\n    Write a function to check if a number is perfect.\n    '''\n    \n    return all(n%i == 0 for i in range(2, int(n**.5)+1))\n    \ndef is_pandigital(n):\n    '''\n    Write a function to check if a number is pandigital.\n    '''\n    \n    return len(set(str(n))) == 10\n    \ndef is_pandigital_permutation(n):\n    '''\n    Write a function to check if a number is pandigital.\n    '''\n    \n    return len(set(str(n))) == 9 and all(str(n).count(str(i)) == 1 for i in range(1, 10))\n    \ndef are_anagrams(str1, str2):\n    '''\n    Write a function to check whether two strings are anagrams of each other.\n    '''\n    \n    return sorted(str1) == sorted(str2)\n    \ndef is_anagram(str1, str2):\n    '''\n    Write a function to check whether two strings are anagrams of each other.\n    '''\n    \n    return sorted(str1) == sorted(str2)\n    \ndef is",
        "num_ids": 22
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    n = len(str1)\n    i = 0\n    while i < n:\n        if str1[i].isupper():\n            j = i + 1\n            while j < n:\n                if str1[j].isupper():\n                    str1 = str1[:i] + str1[j:]\n                    n = len(str1)\n                    break\n                j += 1\n        i += 1\n    return str1\n",
        "num_ids": 103
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return map(lambda x: x[0],lst)\n",
        "num_ids": 17
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return map(lambda x: x[0], lst)\n",
        "num_ids": 17
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    i = 0\n    for item in lst:\n        lst[i] = item[0]\n        i = i+1\n    return lst\n",
        "num_ids": 39
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return map(lambda x: x[0], lst)\n",
        "num_ids": 17
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    newlst = []\n    for item in lst:\n        newlst.append(item[0])\n    return newlst\n",
        "num_ids": 35
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    i=0\n    for each in lst:\n        print each[0]\n",
        "num_ids": 22
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)): \n        lst[i] = lst[i][0]\n    return lst\n",
        "num_ids": 36
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst] \n",
        "num_ids": 17
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        result.append(i[0])\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[i][0] for i in range(len(lst))]\n",
        "num_ids": 24
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if (i.isupper()):\n            count = count + 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_ctr = 0\n    for i in str:\n        if(i.isupper()):\n            upper_ctr = upper_ctr + 1\n    print upper_ctr\n",
        "num_ids": 43
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([i for i in str if i.isupper()])\n",
        "num_ids": 19
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr=0\n    for i in str:\n        if(i.isupper()):\n            ctr=ctr+1\n    return ctr\n    \ndef lower_ctr(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    ctr=0\n    for i in str:\n        if(i.islower()):\n            ctr=ctr+1\n    return ctr\n    \ndef digit_ctr(str):\n    '''\n    Write a python function to count the digit characters in a given string.\n    '''\n    ctr=0\n    for i in str:\n        if(i.isdigit()):\n            ctr=ctr+1\n    return ctr\n    \ndef punctuation_ctr(str):\n    '''\n    Write a python function to count the punctuation characters in a given string.\n    '''\n    ctr=0\n    for i in str:\n        if(i in \"!?,.-;:\"):\n            ctr=ctr+1\n    return ctr\n",
        "num_ids": 39
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    \n    ctr = 0\n    for i in str:\n        if(i.isupper()):\n            ctr += 1\n    return ctr\n",
        "num_ids": 36
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    for char in str:\n        if char.isupper():\n            ctr += 1\n    return ctr\n",
        "num_ids": 32
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for c in str:\n        if c.isupper():\n            count+=1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper = 0\n    for i in range(len(str)):\n        if(str[i].isupper()):\n            upper += 1\n    return upper\n",
        "num_ids": 40
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    for x in str:\n        if x.isupper():\n            ctr += 1\n    return ctr\n",
        "num_ids": 32
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        return [[list1[0]] + sub for sub in combinations_list(list1[1:])] + combinations_list(list1[1:])\n",
        "num_ids": 76
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list2 = []\n    def combinations_list_aux(list1,list2):\n        if len(list1) == 0:\n            list2.append(list1)\n        else:\n            list2.append(list1[0])\n            combinations_list_aux(list1[1:],list2)\n            list2.pop()\n            combinations_list_aux(list1[1:],list2)\n    combinations_list_aux(list1,[])\n    return list2\n    \ndef comb(n,k):\n    '''\n    Return the number of combinations of n objects taken k at a time.\n    '''\n    return reduce(lambda x,y: x*y, [i for i in range(n-k+1,n+1)][k:])\n    \ndef unique_combinations(list1,list2):\n    '''\n    Given two lists, return a list of all the unique combinations of the items in the first list that are in the second list.\n    '''\n    list1 = unique_combinations_aux(list1,list2,0)\n    return list1\n    \ndef unique_combinations_aux(list1,list2,index):\n    '''\n    Given two lists, return a list of all the unique combinations of the items in the first list that are in the second list.\n    '''\n    if index >= len(list1):\n        return []\n    elif list1[index] in list2:\n        return unique_combinations_aux(list1,list2,index+1)\n    else:\n        return unique_combinations_aux(list1,list2,index+1) + [list1[index]] + unique_combinations_aux(list1,list2,index+1)\n",
        "num_ids": 98
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return list(chain.from_iterable(combinations(list1, r) for r in range(len(list1)+1)))\n",
        "num_ids": 34
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1.sort()\n    combo_list = []\n    for i in range(len(list1)):\n        combo_list.append([list1[i]])\n",
        "num_ids": 45
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [[list1[0]]]\n    else:\n        tmp_list = []\n        for i in range(1,len(list1)):\n            tmp_list += [[list1[0]] + combinations_list(list1[1:])]\n        return tmp_list\n",
        "num_ids": 79
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1)==1:\n        return [[]]\n    if len(list1)==2:\n        return [[list1[0], list1[1]], [list1[1], list1[0]]]\n    return list(map(list, combinations_list(list1[:-1]))) + list(map(lambda x: x + [list1[-1]], combinations_list(list1[:-1])))\n",
        "num_ids": 105
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    #list1 = [1,2,3,4]\n    return list(itertools.combinations(list1,2))\n",
        "num_ids": 34
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n=len(list1)\n    list1.sort()\n    if n==1:\n        return [[list1[0]]]\n    elif n==2:\n        return [[list1[0],list1[1]],[list1[1],list1[0]]]\n    else:\n        res=[]\n        for i in xrange(n):\n            if i==0:\n                temp=combinations_list(list1[i+1:])\n            elif i==n-1:\n                temp=combinations_list(list1[:i])\n            else:\n                temp=combinations_list(list1[:i]+list1[i+1:])\n            for j in xrange(len(temp)):\n                temp[j].append(list1[i])\n            res=res+temp\n        return res\n",
        "num_ids": 201
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    res = []\n    \n    def dfs(list2, start):\n        if start > len(list2):\n            return \n        for i in range(start, len(list2)):\n            res.append(list2[start:i+1])\n            dfs(list2, i+1)\n            res.pop()\n    dfs(list1, 0)\n    \n    return res\n",
        "num_ids": 98
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    return []\n",
        "num_ids": 8
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    min_product = arr[0]\n",
        "num_ids": 22
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_prod = arr[0]\n    current_prod = arr[0]\n    for i in range(1, len(arr)):\n        current_prod = max(arr[i], arr[i] * current_prod)\n        max_prod = max(max_prod, current_prod)\n",
        "num_ids": 80
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if arr is None:\n        return\n    if len(arr) == 0:\n        return\n    max_product = arr[0]\n    max_product_idx = 0\n    curr_product = arr[0]\n    curr_product_idx = 0\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            curr_product *= arr[i]\n            curr_product_idx = i\n        else:\n            curr_product = arr[i]\n            curr_product_idx = i\n        if curr_product > max_product:\n            max_product = curr_product\n            max_product_idx = curr_product_idx\n    return max_product, max_product_idx\n",
        "num_ids": 191
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    best_product, current_product = arr[0], arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            current_product = arr[i]\n        else:\n            current_product *= arr[i]\n",
        "num_ids": 69
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    local_min = arr[0]\n    global_min = arr[0]\n",
        "num_ids": 32
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n",
        "num_ids": 34
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    max_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_so_far = arr[0]\n    for i in range(1, len(arr)):\n        temp_max = max_ending_here * arr[i]\n        max_ending_here = max(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n        min_ending_here = min(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        if i == len(arr) - 1:\n            max_product = max(max_product, max_so_far)\n    return max_product\n",
        "num_ids": 221
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    product = 1\n    for i in arr:\n        if i < 0:\n            product = 1\n        else:\n            product *= i\n        if product > max_product:\n            max_product = product\n    return max_product\n",
        "num_ids": 68
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_ending_here = max_so_far = 0\n    for i in arr:\n        max_ending_here = max_ending_here * i if max_ending_here > 0 else i\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n",
        "num_ids": 79
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    arr_max_subarray = [None] * len(arr)\n    arr_max_subarray[0] = arr[0]\n    for i in range(1, len(arr)):\n        arr_max_subarray[i] = arr[i] if arr_max_subarray[i-1] < 0 else arr_max_subarray[i-1] * arr[i]\n    return max(arr_max_subarray)\n",
        "num_ids": 125
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) <= 1:\n        return True\n    return False\n",
        "num_ids": 25
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    s = set()\n    for key in dict:\n        s.add(dict[key])\n    return len(s) == 1\n",
        "num_ids": 34
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    \n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 31
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if dict[key]!= dict[key][0]:\n            return False\n    return True\n",
        "num_ids": 32
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    d = dict\n    l = list(d.values())\n    if len(set(l)) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(1, n):\n        if dict[i]!= dict[0]:\n            return False\n    return True\n    \n",
        "num_ids": 36
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(dict.values()) == n\n",
        "num_ids": 13
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n > 1:\n        for x in dict.values():\n            if x == dict[x]:\n                return True\n            else:\n                return False\n    else:\n        if dict[0] == dict[0]:\n            return True\n        else:\n            return False\n",
        "num_ids": 67
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    \n    for key, value in dict.iteritems():\n        if value!= value:\n            return False\n    return True\n",
        "num_ids": 32
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    temp = set()\n    for k, v in dict.items():\n        temp.add(v)\n    return len(temp) == 1\n",
        "num_ids": 36
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k,v in dict1.items():\n        if v=='':\n            del dict1[k]\n            \n            \ndict1 = {'a':'', 'b':'', 'c':'', 'd':'', 'e':''}\ndrop_empty(dict1)\nprint(dict1)",
        "num_ids": 76
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k, v in dict1.items() if v}\n",
        "num_ids": 22
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key:dict1[key] for key in dict1 if dict1[key]}\n",
        "num_ids": 24
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict((k,v) for k,v in dict1.items() if v)\n",
        "num_ids": 24
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key,value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict\n",
        "num_ids": 45
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return { k:v for k,v in dict1.items() if v!= [] }\n",
        "num_ids": 25
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    \n    for key in dict1.keys():\n        if not dict1[key]:\n            del dict1[key]\n    \n    return dict1\n",
        "num_ids": 38
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return { k: v for k,v in dict1.items() if v }\n",
        "num_ids": 22
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k, v in dict1.items():\n        if v is None:\n            del dict1[k]\n    return dict1\n",
        "num_ids": 34
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in list(dict1):\n        if dict1[key] == None:\n            del dict1[key]\n    return dict1\n",
        "num_ids": 36
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return 0\n    dp = [arr[0]]\n    max_prod = dp[0]\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i - 1]:\n            dp.append(arr[i])\n        else:\n            dp = [arr[i]]\n        max_prod = max(max_prod, reduce(lambda x, y: x * y, dp))\n    return max_prod\n",
        "num_ids": 119
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return 1\n    n = len(arr)\n    dp = [0]*(n+1)\n    dp[0] = 1\n    res = 1\n    for i in xrange(1,n+1):\n        res = max(res,arr[i-1])\n        if res == 0:\n            break\n        dp[i] = res * arr[i-1]\n    return max(dp)\n",
        "num_ids": 106
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) < 3:\n        return None\n    max_product = arr[0] * arr[1] * arr[2]\n    if max_product < arr[0] * arr[1]:\n        max_product = arr[0] * arr[1]\n    if max_product < arr[1] * arr[2]:\n        max_product = arr[1] * arr[2]\n    if max_product < arr[2] * arr[0]:\n        max_product = arr[2] * arr[0]\n    return max_product\n",
        "num_ids": 135
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    m = arr[0]\n    n = arr[1]\n    for i in range(2, len(arr)):\n        if m < arr[i]:\n            m = arr[i]\n        if n < arr[i]:\n            n = arr[i]\n    return m * n\n",
        "num_ids": 72
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    product = arr[0]\n    for i in range(1, len(arr)):\n        temp = max_so_far\n        max_so_far = max(max(arr[i], max_so_far * arr[i]), min_so_far * arr[i])\n        min_so_far = min(min(arr[i], min_so_far * arr[i]), temp * arr[i])\n        product = max(product, max_so_far)\n    return product\n",
        "num_ids": 157
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Keep track of the maximum product formed by multiplying numbers of increasing subsequences.\n    # Compute the maximum product formed by multiplying numbers of increasing subsequences.\n    # Traverse the array once and keep updating the maximum product formed by multiplying numbers of increasing subsequences.\n",
        "num_ids": 60
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    n = len(arr)\n    # dp = [[0]*(n+1) for _ in range(n+1)]\n    dp = [0]*(n+1)\n    dp[1] = arr[0]\n    max_product = dp[1]\n    for i in range(2, n+1):\n        dp[i] = max(dp[i-1]*arr[i-1], arr[i-1])\n        max_product = max(max_product, dp[i])\n    return max_product\n    \n    \ndef max_product_with_neg_and_pos(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    n = len(arr)\n    left = [1]*n\n    right = [1]*n\n    # dp = [[0]*(n+1) for _ in range(n+1)]\n    dp = [0]*(n+1)\n    dp[1] = arr[0]\n    max_product = dp[1]\n    for i in range(2, n+1):\n        left[i] = max(left[i-1]*arr[i-1], arr[i-1])\n        right[n-i] = max(right[n-i+1]*arr[n-i+1], arr[n-i+1])\n        dp[i] = max(left[i], right[i])\n        max_product = max(max_product, dp[i])\n    return max_product\n    \n    \ndef max_product_of_subarray(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    n = len(arr)\n    left = [1]*n\n    right = [1]*n\n    left[0] = 1\n    right[n-1] = 1\n    max_product = arr[0]\n    for i in range(1, n):\n        left[i] = max(left[i-1]*arr[i-1], arr[i-1])\n        right[n-i-1] = max(right[n-i]*arr[n-i], arr[n-i])\n        max_product = max(max_product, left[i], right[i])\n    return max_product\n    \n    \ndef max_product_of_subarray_with_neg_and_pos(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    n = len(arr)\n    left = [1]*n\n    right = [1]*n\n    left[0] = 1\n    right[n-1] = 1\n    max_product = arr[0]\n    for i in range(1, n):\n        left[i] = max(left[i-1]*arr[i-1], arr[i-1])\n        right[n-i-1] = max(right[n-i]*arr[n-i], arr[n-i])\n        max_product = max(max_product, left[i], right[i])\n    return max_product\n    \n    \ndef max_product_of_subarray_with_neg_and_pos_optimized(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    n = len(arr)\n    left = [0]*n\n    right = [0]*n\n    left[0] = 1\n    right[n-1] = 1\n    max_product = arr[0]\n    for i in range(1, n):\n        if arr[i] < 0:\n            left[i] = max(left[i-1]*arr[i-1], arr[i-1])\n        else:\n            left[i] = 1\n        if arr[n-i-1] < 0:\n            right[n-i-1] = max(right[n-i]*arr[n-i], arr[n-i])\n        else:\n            right[n-i-1] = 1\n        max_product = max(max_product, left[i], right[i])\n    return max_product\n    \n    \ndef max_product_of_subarray_optimized(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    n = len(arr)\n    left = [0]*n\n    right = [0]*n\n    left[0] = 1\n    right[n-1] = 1\n    max_product = arr[0]\n    for i in range(1, n):\n        if arr[i] < 0:\n            left[i] = left[i-1]*arr[i-1]\n        else:\n            left[i] = 1\n        if arr[n-i-1] < 0:\n            right[n-i-1] = right[n-i]*arr[n-i]\n        else:\n            right[n-i-1] = 1\n        max_product = max(max_product, left[i], right[i])\n    return max_product\n    \n    \ndef max_product_of_subarray_optimized_2(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    n = len(arr)\n    left = [0]*n\n    right = [0]*n\n    left[0] = 1\n    right[n-1] = 1\n    max_product = arr[0]\n    for i in range(1, n):\n        left[i] = left[i-1]*arr[i-1]\n        right[n-i-1] = right[n-i]*arr[n-i]\n        max_product = max(max_product, left[i], right[i])\n    return max_product\n    \n    \ndef max_product_of_subarray_optimized_3(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    n = len(arr)\n    left = [1]*n\n    right = [1]*n\n    left[0] = 1\n    right[n-1] = 1\n    max_product = arr[0]\n    for i in range(1, n):\n        left[i] = left[i-1]*arr[i-1]\n        right[n-i-1] = right[n-i]*arr[n-i]\n        max_product = max(max_product, left[i], right[i])\n    return max_product\n    \n    \ndef max_product_of_subarray_optimized_4(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    n = len(arr)\n    left = [1]*n\n    right = [1]*n\n    left[0] = 1\n    right[n-1] = 1\n    max_product = arr[0]\n    for i in range(1, n):\n        if arr[i] < 0:\n            left[i] = left[i-1]*arr[i-1]\n        else:\n            left[i] = 1\n        if arr[n-i-1] < 0:\n            right[n-i-1] = right[n-i]*arr[n-i]\n        else:\n            right[n-i-1] = 1\n        max_product = max(max_product, left[i], right[i])\n    return max_product\n    \n    \ndef max_product_of_subarray_optimized_5(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    n = len(arr)\n    left = [1]*n\n    right = [1]*n\n    left",
        "num_ids": 32
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    max_product = -float('inf')\n    min_product = float('inf')\n    \n    if len(arr) == 0:\n        return max_product\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product = max(max_product * arr[i], arr[i])\n            min_product = min(min_product * arr[i], arr[i])\n        else:\n            max_product = max(max_product * arr[i], arr[i])\n            min_product = min(min_product * arr[i], arr[i])\n        \n    return max(max_product, min_product)\n",
        "num_ids": 190
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    length = len(arr)\n    if length == 0:\n        return 0\n    if length == 1:\n        return arr[0]\n    max_prod = arr[0]*arr[1]\n    min_prod = arr[0]*arr[1]\n    for i in range(2,length):\n        curr_max = max(arr[i],arr[i]*max_prod,arr[i]*min_prod)\n        curr_min = min(arr[i],arr[i]*max_prod,arr[i]*min_prod)\n        max_prod = curr_max\n        min_prod = curr_min\n    return max_prod\n",
        "num_ids": 173
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return test_tup[0] + test_tup[1] + test_tup[2]\n",
        "num_ids": 28
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return\n    else:\n        return test_tup[0] + test_tup[1] + add_pairwise(test_tup[1:])\n",
        "num_ids": 54
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    a, b = test_tup\n    return a+b\n",
        "num_ids": 18
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    summation = 0\n    for i in range(len(test_tup)-1):\n        summation += test_tup[i]\n    return summation\n",
        "num_ids": 43
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return ()\n    elif len(test_tup) == 2:\n        return (test_tup[0] + test_tup[1],)\n    else:\n        return (test_tup[0] + test_tup[1],) + add_pairwise(test_tup[2:])\n",
        "num_ids": 91
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return test_tup[0] + test_tup[1] + test_tup[2]\n",
        "num_ids": 28
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) == 0:\n        return\n    elif len(test_tup) == 1:\n        return (test_tup[0],)\n    else:\n        return (test_tup[0] + test_tup[1],) + test_tup[2:]\n",
        "num_ids": 76
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pairwise_sum = 0\n    for i in range(len(test_tup)-1):\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n    return pairwise_sum\n",
        "num_ids": 57
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    tup = test_tup[0]\n    a = tup[0]\n    b = tup[1]\n    c = tup[2]\n    d = tup[3]\n    return (a+b, b+c, c+d, a+c)\n",
        "num_ids": 70
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if not isinstance(test_tup, tuple):\n        return\n    elif len(test_tup) < 2:\n        return\n    else:\n        return test_tup[0] + test_tup[1], test_tup[1] + test_tup[0]\n",
        "num_ids": 73
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in arr:\n        result = (result * i) % n\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    mod_product = 1\n    for element in arr:\n        mod_product = mod_product * element % n\n",
        "num_ids": 29
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    mul = 1\n    for i in range(len(arr)):\n        mul = (mul * arr[i]) % n\n    return mul\n",
        "num_ids": 39
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    for i in range(n): \n        if (i == 0): \n            res = arr[i]\n        else: \n            res = (res * arr[i]) % n\n    return res\n    \ndef find_prime_factors(n):\n    '''\n    Write a python function to find the prime factors of an integer.\n    '''\n    while n % 2 == 0:\n        print(2),\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            print(i),\n            n = n / i\n    if n > 2:\n        print(n)\n",
        "num_ids": 82
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return np.prod(arr) % n\n    \ndef find_remainder_mul(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return reduce(lambda x, y: x*y, arr) % n\n    \nif __name__ == '__main__':\n    arr = [1,2,3]\n    n = 3\n    print find_remainder(arr,n)\n    print find_remainder_mul(arr, n",
        "num_ids": 76
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod = (prod * i) % n\n    return prod\n",
        "num_ids": 32
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if not arr: return 1\n    res = 1\n    for ele in arr:\n        res = (res*ele)%n\n    return res\n",
        "num_ids": 37
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if n==1:\n        return 1\n    if n==0:\n        return 0\n    if n<0:\n        return -1\n    if n%2==0:\n        return find_remainder(arr,n/2)\n    x = find_remainder(arr,(n-1)/2)\n    y = find_remainder(arr,(n+1)/2)\n    return (x*y)%n\n",
        "num_ids": 108
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    res = 1\n    for i in arr:\n        res = (res * i)%n\n    return res\n",
        "num_ids": 31
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return functools.reduce(lambda x, y: (x * y) % n, arr) \n",
        "num_ids": 28
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1]-l[i]!= 1:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    cnt = 0\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            cnt += 1\n    if cnt > 0:\n        return 1\n    else:\n        return 0\n",
        "num_ids": 63
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return len(l)==len(set(l))\n",
        "num_ids": 16
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if(l[i+1] - l[i]!= 1):\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return (l[-1] - l[0] == len(l)-1)\n",
        "num_ids": 23
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    flag=0\n    if (l[0]==1) & (l[-1]==len(l)+1):\n        for i in range(1,len(l)):\n            if l[i]!=(l[i-1]+1):\n                flag=1\n    elif (l[0]==len(l)+1) & (l[-1]==1):\n        for i in range(len(l)-1):\n            if l[i]!=(l[i+1]-1):\n                flag=1\n    else:\n        for i in range(len(l)):\n            if l[i]!=(l[i+1]-1) & l[i]!=(l[i-1]+1):\n                flag=1\n    return flag\ndef check_Permutation(s1,s2):\n    '''\n    Write a python function to check whether the given two strings are permutations of each other or not.\n    '''\n    s1 = s1.lower()\n    s2 = s2.lower()\n    \n    if sorted(s1) == sorted(s2):\n        return True\n    else:\n        return False\ndef check_Factorial(n):\n    '''\n    Write a python function to check whether the given number is a factorial or not.\n    '''\n    \n    f = 1\n    for i in range(1,n+1):\n        f = f*i\n    return f\ndef check_Palindrome(n):\n    '''\n    Write a python function to check whether the given number is a palindrome or not.\n    '''\n    \n    n = str(n)\n    if n[::-1] == n:\n        return True\n    else:\n        return False\ndef check_Fibonacci(n):\n    '''\n    Write a python function to check whether the given number is a Fibonacci number or not.\n    '''\n    \n    l = [0,1]\n    if n in l:\n        return True\n    else:\n        for i in range(n-1):\n            l.append(l[i]+l[i+1])\n        if n in l:\n            return True\n        else:\n            return False\ndef check_Armstrong(n):\n    '''\n    Write a python function to check whether the given number is an Armstrong number or not.\n    '''\n    \n    n = str(n)\n    s = 0\n    l = len(n)\n    for i in n:\n        s = s + int(i)**l\n    if int(n) == s:\n        return True\n    else:\n        return False\ndef check_Power(n,p):\n    '''\n    Write a python function to check whether the given number is a power of a number or not.\n    '''\n    \n    if n**p == n:\n        return True\n    else:\n        return False\ndef check_Prime(n):\n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    \n    if n > 1:\n        for i in range(2,n):\n            if n%i == 0:\n                return False\n                break\n        else:\n            return True\n    else:\n        return False\ndef check_Armstrong_Number(n):\n    '''\n    Write a python function to check whether the given number is an Armstrong number or not.\n    '''\n    \n    s = 0\n    l = len(str(n))\n    for i in str(n):\n        s = s + int(i)**l\n    if n == s:\n        return True\n    else:\n        return False\ndef check_StringPermutation(s1,s2):\n    '''\n    Write a python function to check whether the given two strings are permutations of each other or not.\n    '''\n    s1 = s1.lower()\n    s2 = s2.lower()\n    \n    if sorted(s1) == sorted(s2):\n        return True\n    else:\n        return False\ndef check_StringRotation(s1,s2):\n    '''\n    Write a python function to check whether the given two strings are rotations of each other or not.\n    '''\n    s1 = s1.lower()\n    s2 = s2.lower()\n    l1 = len(s1)\n    l2 = len(s2)\n    if l1!= l2:\n        return False\n    if s1 == s2:\n        return True\n    for i in range(l1):\n        if s1[i:] + s1[:i] == s2:\n            return True\n    return False\ndef check_RotatedString(s1,s2):\n    '''\n    Write a python function to check whether the given two strings are a rotation of each other or not.\n    '''\n    s1 = s1.lower()\n    s2 = s2.lower()\n    l1 = len(s1)\n    l2 = len(s2)\n    if l1!= l2:\n        return False\n    if s1 == s2:\n        return True\n    for i in range(l1):\n        if s1[i:] + s1[:i] == s2:\n            return True\n    return False\ndef check_BinaryString(s):\n    '''\n    Write a python function to check whether the given string is a binary number or not.\n    '''\n    \n    s = s.lower()\n    for i in s:\n        if i not in ['0','1']:\n            return False\n    return True\ndef check_DecimalNumber(n):\n    '''\n    Write a python function to check whether the given number is a decimal number or not.\n    '''\n    \n    n = str(n)\n    l = len(n)\n    if l%2 == 0:\n        a = int(n[:l/2])\n        b = int(n[l/2:])\n        if a == b:\n            return True\n    else:\n        a = int(n[:l/2])\n        b = int(n[l/2+1:])\n        if a == b:\n            return True\n    return False\ndef check_Polygon(n):\n    '''\n    Write a python function to check whether the given number is a positive integer which can be expressed as a sum of more than 2 positive integers.\n    '''\n    \n    s = 0\n    l = list()\n    n = int(n)\n    if n < 3:\n        return False\n    for i in range(1,n+1):\n        s = s + i\n        l.append(i)\n    if n == s:\n        return True\n    else:\n        return False\ndef check_IsPrime(n):\n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    \n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3,int(n/2)+1,2):\n        if n%i == 0:\n            return False\n    else:\n        return True\ndef check_Prime_Factors(n):\n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    \n    l = list()\n    l = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            l.append(i)\n    if len(l) == 2:\n        return True\n    return False\ndef check_Prime_Number(n):\n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    \n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3,int(n/2)+1,2):\n        if n%i == 0:\n            return False\n    else:\n        return True\ndef check_Rectangle(n):\n    '''\n    Write a python function to check whether the given number is a rectangle number or not.\n    '''\n    \n    s = 0\n    l = list()\n    n = int(n)\n    for i in range(1,n+1):\n        s = s + i\n        ",
        "num_ids": 44
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    from itertools import groupby\n    l1 = [list(g) for k,g in groupby(l)]\n    if sorted(l1)==l1:\n        print 'Consecutive list'\n    else:\n        print 'Not a consecutive list'\n",
        "num_ids": 65
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(1,len(l)):\n        if l[i-1]!=l[i]:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return all(l[i] - l[i-1] == 1 for i in range(1,len(l)))\n",
        "num_ids": 31
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(0, len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    #If a tuple is already present in the list, then increment its count\n    for item in test_list1:\n        if item in test_list2:\n            item[1] += 1\n            \n    #Return the list of tuple whose intersection count is greater than 1\n    return [item for item in test_list1 if item[1] > 1]\n",
        "num_ids": 84
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for tuple1 in test_list1:\n        if tuple1 in test_list2:\n            intersection.append(tuple1)\n    return intersection\n",
        "num_ids": 45
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1).intersection(set(test_list2)))\n    \n    \ndef non_repeating_elements(test_list):\n    '''\n    Write a function to find the non repeating elements in a given list. \n    '''\n    return list(set(test_list))\n",
        "num_ids": 13
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    if len(test_list1) > len(test_list2):\n        for element in test_list1:\n            if element in test_list2:\n                result.append(element)\n    else:\n        for element in test_list2:\n            if element in test_list1:\n                result.append(element)\n    return result\n",
        "num_ids": 89
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1).intersection(test_list2))\n    \ndef unique_list(list_in):\n    '''\n    Write a function to find the unique elements of a given list.\n    '''\n    return list(set(list_in))\n    \ndef unique_tuple(list_in):\n    '''\n    Write a function to find the unique elements of a given list.\n    '''\n    return list(set(tuple(list_in)))\n    \ndef remove_duplicate_list(list_in):\n    '''\n    Write a function to remove the duplicates in a given list.\n    '''\n    return list(set(list_in))\n    \ndef remove_duplicate_tuple(list_in):\n    '''\n    Write a function to remove the duplicates in a given list.\n    '''\n    return list(set(tuple(list_in)))\n    \ndef get_list_of_unique_elements(list_in):\n    '''\n    Write a function to return the list of unique elements of a given list.\n    '''\n    return list(set(list_in))\n    \ndef get_list_of_unique_elements_tuple(list_in):\n    '''\n    Write a function to return the list of unique elements of a given list.\n    '''\n    return list(set(tuple(list_in)))\n    \ndef get_longest_item_list(list_in):\n    '''\n    Write a function to return the longest item in a given list.\n    '''\n    return max(list_in, key=len)\n    \ndef get_longest_item_tuple(list_in):\n    '''\n    Write a function to return the longest item in a given list.\n    '''\n    return max(tuple(list_in), key=len)\n    \ndef get_longest_item_list_recursive(list_in, result_list):\n    '''\n    Write a function to return the longest item in a given list.\n    '''\n    if len(list_in) == 0:\n        return result_list\n    else:\n        current_item = list_in[0]\n        if len(current_item) > len(result_list):\n            return get_longest_item_list_recursive(list_in[1:], current_item)\n        else:\n            return get_longest_item_list_recursive(list_in[1:], result_list)\n        \ndef get_longest_item_tuple_recursive(list_in, result_list):\n    '''\n    Write a function to return the longest item in a given list.\n    '''\n    if len(list_in) == 0:\n        return result_list\n    else:\n        current_item = list_in[0]\n        if len(current_item) > len(result_list):\n            return get_longest_item_tuple_recursive(list_in[1:], current_item)\n        else:\n            return get_longest_item_tuple_recursive(list_in[1:], result_list)\n    \ndef get_longest_item_list_recursive_wrapper(list_in):\n    return get_longest_item_list_recursive(list_in, \"\")\n    \ndef get_longest_item_tuple_recursive_wrapper(list_in):\n    return get_longest_item_tuple_recursive(list_in, \"\")\n    \ndef sort_list(list_in, option):\n    '''\n    Write a function to sort a given list according to the given option.\n    '''\n    if option == \"Ascending\":\n        return sorted(list_in)\n    elif option == \"Descending\":\n        return sorted(list_in, reverse=True)\n    else:\n        return sorted(list_in)\n    \ndef sort_list_recursive(list_in, option):\n    '''\n    Write a function to sort a given list according to the given option.\n    '''\n    if len(list_in) == 1:\n        return list_in\n    else:\n        return sort_list_recursive([list_in[0]] + list_in[2:], option)\n    \ndef sort_list_recursive_wrapper(list_in):\n    return sort_list_recursive(list_in, \"Ascending\")\n    \ndef sort_list_recursive_wrapper2(list_in):\n    return sort_list_recursive(list_in, \"Descending\")\n    \ndef get_longest_word_list(list_in):\n    '''\n    Write a function to return the longest word in a given list.\n    '''\n    return max(list_in, key=len)\n    \ndef get_longest_word_tuple(list_in):\n    '''\n    Write a function to return the longest word in a given list.\n    '''\n    return max(tuple(list_in), key=len)\n    \ndef get_longest_word_list_recursive(list_in, result_list):\n    '''\n    Write a function to return the longest word in a given list.\n    '''\n    if len(list_in) == 0:\n        return result_list\n    else:\n        current_item = list_in[0]\n        if len(current_item) > len(result_list):\n            return get_longest_word_list_recursive(list_in[1:], current_item)\n        else:\n            return get_longest_word_list_recursive(list_in[1:], result_list)\n    \ndef get_longest_word_tuple_recursive(list_in, result_list):\n    '''\n    Write a function to return the longest word in a given list.\n    '''\n    if len(list_in) == 0:\n        return result_list\n    else:\n        current_item = list_in[0]\n        if len(current_item) > len(result_list):\n            return get_longest_word_tuple_recursive(list_in[1:], current_item)\n        else:\n            return get_longest_word_tuple_recursive(list_in[1:], result_list)\n    \ndef get_longest_word_list_recursive_wrapper(list_in):\n    return get_longest_word_list_recursive(list_in, \"\")\n    \ndef get_longest_word_tuple_recursive_wrapper(list_in):\n    return get_longest_word_tuple_recursive(list_in, \"\")\n    \ndef sort_dict_by_value(dict_in, option):\n    '''\n    Write a function to sort a given dictionary according to the given option.\n    '''\n    if option == \"Ascending\":\n        return sorted(dict_in.items(), key=operator.itemgetter(1))\n    elif option == \"Descending\":\n        return sorted(dict_in.items(), key=operator.itemgetter(1), reverse=True)\n    else:\n        return sorted(dict_in.items(), key=operator.itemgetter(1))\n    \ndef sort_dict_by_value_recursive(dict_in, option):\n    '''\n    Write a function to sort a given dictionary according to the given option.\n    '''\n    if len(dict_in) == 1:\n        return dict_in\n    else:\n        return sort_dict_by_value_recursive({dict_in[0]:dict_in[1]} + dict_in[2:], option)\n    \ndef sort_dict_by_value_recursive_wrapper(dict_in):\n    return sort_dict_by_value_recursive(dict_in, \"Ascending\")\n    \ndef sort_dict_by_value_recursive_wrapper2(dict_in):\n    return sort_dict_by_value_recursive(dict_in, \"Descending\")\n    \ndef get_longest_word_dict(dict_in):\n    '''\n    Write a function to return the longest word in a given dictionary.\n    '''\n    return max(dict_in.items(), key=operator.itemgetter(1))\n    \ndef get_longest_word_dict",
        "num_ids": 34
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for ele in test_list1:\n        if ele in test_list2:\n            result.append(ele)\n    return result\n",
        "num_ids": 39
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for t1 in test_list1:\n        for t2 in test_list2:\n            if t1 == t2:\n                result.append(t1)\n    return result\n",
        "num_ids": 51
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1).intersection(set(test_list2)))\n",
        "num_ids": 24
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return set(test_list1) & set(test_list2)\n",
        "num_ids": 20
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1).intersection(test_list2))\n",
        "num_ids": 22
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    ind=str1.index(ch)\n    return str1[:ind]+newch+str1[ind+1:]\n",
        "num_ids": 32
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    return str1\n    ",
        "num_ids": 23
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if ch in str1:\n        str1=str1.replace(ch,newch)\n        return str1\n    else:\n        return str1\n",
        "num_ids": 39
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = list(str1)\n    for i,val in enumerate(str1):\n        if val == ch:\n            str1[i] = newch\n    return \"\".join(str1)\n",
        "num_ids": 52
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    try:\n        return str1.replace(ch,newch)\n    except:\n        print('Only string is accepted')\n",
        "num_ids": 32
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if (len(str1) < 2):\n        return str1\n    index = str1.find(ch)\n    if (index == -1):\n        return str1\n    else:\n        str1 = str1[:index] + newch + str1[index + 1:]\n        return str1\n",
        "num_ids": 75
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = ''\n    for i in str1:\n        if i == ch:\n            newstr = newstr+newch\n        else:\n            newstr = newstr+i\n    return newstr\n",
        "num_ids": 51
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,newch)\n    return str1\n",
        "num_ids": 22
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if ch in str1:\n        str1 = str1.replace(ch,newch)\n        return str1\n    else:\n        return str1\n",
        "num_ids": 39
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.iteritems(), key=lambda x: x[1], reverse=True)\n    \ndef same_values(a,b):\n    '''\n    Given two lists of numbers, return a list of pairs that indicate whether \n    any two numbers from the first list were also found in the second list.\n    '''\n    pairs = []\n    for val in a:\n        if val in b:\n            pairs.append((val,val))\n    return pairs\n",
        "num_ids": 37
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = {}\n    for key, value in sorted(dict1.items()):\n        sorted_dict[key] = value\n    return sorted_dict\n",
        "num_ids": 42
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    list1 = dict1.items()\n    list2 = sorted(list1, key = lambda x : x[1])\n    return list2\n",
        "num_ids": 36
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    #1. take in a dictionary and output a list of tuples (key, value)\n    #2. sort the list by value\n    #3. output the list of tuples back to the dictionary\n    new_dict = {}\n    for k, v in sorted(dict1.items(), key = lambda x: x[1], reverse = True):\n        new_dict[k] = v\n    return new_dict\n",
        "num_ids": 98
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1 = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return dict1\ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary by key.\n    '''\n    dict1 = sorted(dict1.items(), key=lambda x: x[0])\n    return dict1\ndef counter(l):\n    '''\n    Write a function that returns a dictionary of how many times each item in an array appears.\n    '''\n    return Counter(l)\ndef order_dict(dict1):\n    '''\n    Write a function that takes a dictionary and returns a list of the keys sorted by value.\n    '''\n    return sorted(dict1, key=lambda x: dict1[x], reverse=True)\ndef dict_from_list(l):\n    '''\n    Write a function that takes a list of dictionaries and returns a new dictionary with the keys and values in the same order.\n    '''\n    dict1 = {}\n    for i in l:\n        dict1.update(i)\n    return dict1\ndef dict_from_key(dict1):\n    '''\n    Write a function that takes a dictionary and returns a new dictionary with the keys and values in the same order.\n    '''\n    dict2 = {}\n    for i in dict1:\n        dict2[dict1[i]] = i\n    return dict2\ndef dict_from_value(dict1):\n    '''\n    Write a function that takes a dictionary and returns a new dictionary with the keys and values in the same order.\n    '''\n    dict2 = {}\n    for i in dict1:\n        dict2[dict1[i]] = i\n    return dict2\ndef dict_from_value_index(dict1):\n    '''\n    Write a function that takes a dictionary and returns a new dictionary with the keys and values in the same order.\n    '''\n    dict2 = {}\n    for i in dict1:\n        dict2[dict1[i]] = i\n    return dict2\ndef dict_from_key_value(dict1):\n    '''\n    Write a function that takes a dictionary and returns a new dictionary with the keys and values in the same order.\n    '''\n    dict2 = {}\n    for i in dict1:\n        dict2[i] = dict1[i]\n    return dict2\ndef dict_to_list(dict1):\n    '''\n    Write a function that takes a dictionary and returns a list of tuples with the keys and values in the same order.\n    '''\n    l = []\n    for i in dict1:\n        l.append((i, dict1[i]))\n    return l\ndef dict_to_list_tuple(dict1):\n    '''\n    Write a function that takes a dictionary and returns a list of tuples with the keys and values in the same order.\n    '''\n    l = []\n    for i in dict1:\n        l.append((i, dict1[i]))\n    return l\ndef find_value(l, val):\n    '''\n    Write a function that returns the index of a value in a list.\n    '''\n    for i in range(len(l)):\n        if l[i] == val:\n            return i\n    return None\ndef index_from_value(l, val):\n    '''\n    Write a function that returns the index of a value in a list.\n    '''\n    for i in range(len(l)):\n        if l[i] == val:\n            return i\n    return None\ndef index_from_key(l, key):\n    '''\n    Write a function that returns the index of a value in a list.\n    '''\n    for i in range(len(l)):\n        if l[i][key] == key:\n            return i\n    return None\ndef get_first_dict_key(dict1):\n    '''\n    Write a function that returns the first key and value in a dictionary.\n    '''\n    return dict1.keys()[0]\ndef get_last_dict_key(dict1):\n    '''\n    Write a function that returns the last key and value in a dictionary.\n    '''\n    return dict1.keys()[-1]\ndef get_dict_keys(dict1):\n    '''\n    Write a function that returns a list of all the keys in a dictionary.\n    '''\n    return dict1.keys()\ndef get_dict_values(dict1):\n    '''\n    Write a function that returns a list of all the values in a dictionary.\n    '''\n    return dict1.values()\ndef get_dict_items(dict1):\n    '''\n    Write a function that returns a list of all the items in a dictionary.\n    '''\n    return dict1.items()\ndef get_dict_items_sort(dict1):\n    '''\n    Write a function that returns a list of all the items in a dictionary.\n    '''\n    return dict1.items()\ndef get_dict_items_sort_reverse(dict1):\n    '''\n    Write a function that returns a list of all the items in a dictionary.\n    '''\n    return dict1.items()\ndef get_dict_values_sort(dict1):\n    '''\n    Write a function that returns a list of all the values in a dictionary.\n    '''\n    return sorted(dict1.values())\ndef get_dict_values_sort_reverse(dict1):\n    '''\n    Write a function that returns a list of all the values in a dictionary.\n    '''\n    return sorted(dict1.values(), reverse=True)\ndef get_dict_values_sort_index(dict1):\n    '''\n    Write a function that returns a list of all the values in a dictionary.\n    '''\n    return sorted(dict1.values(), reverse=True, key=lambda x: x[0])\ndef get_dict_items_sort_key(dict1):\n    '''\n    Write a function that returns a list of all the items in a dictionary.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1])\ndef get_dict_items_sort_key_reverse(dict1):\n    '''\n    Write a function that returns a list of all the items in a dictionary.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\ndef get_dict_items_sort_key_reverse_index(dict1):\n    '''\n    Write a function that returns a list of all the items in a dictionary.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\ndef get_dict_items_sort_value(dict1):\n    '''\n    Write a function that returns a list of all the items in a dictionary.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\ndef get_dict_items_sort_value_index(dict1):\n    '''\n    Write a function that returns a list of all the items in a dictionary.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\ndef get_dict_items_sort_key_value(dict1):\n    '''\n    Write a function that returns a list of all the items in a dictionary.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1])\ndef get_dict_items_sort_key_value_index(dict1):\n    '''\n    Write a function that returns a list of all the items in a dictionary.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1])\ndef get_dict_items_sort_key_value_index_reverse(dict1):\n    '''\n    Write a function that returns a list of all the items in a dictionary.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\ndef get_dict_items_sort_key_value_index_reverse(dict1):\n    '''\n    Write a function that returns a list of all the items in a dictionary.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\ndef reverse_dict(dict1):\n    '''\n    Write a function that takes a dictionary and returns a new dictionary with the keys and value",
        "num_ids": 20
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.iteritems(), key=lambda x:x[1], reverse=True)\n",
        "num_ids": 26
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(),key=lambda x:x[1])\n",
        "num_ids": 21
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(),key = lambda x:x[1],reverse = True)\ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(),key = lambda x:x[1])\ndef max_count(list1):\n    '''\n    Write a function to return the maximum value of a dictionary\n    '''\n    return max(list1)\ndef max_freq(list1):\n    '''\n    Write a function to return the maximum value of a dictionary\n    '''\n    return max(list1,key = list1.count)\n",
        "num_ids": 17
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return {k:v for k,v in sorted(dict1.items(),key=lambda item:item[1],reverse=True)}\ndef four_bit_xor(a,b):\n    '''\n    Find the xor of 4 numbers.\n    '''\n    return a^b\ndef first_n_bit_one(n):\n    '''\n    Find the number with the 1s in the first n bits.\n    '''\n    return pow(2,n)-1\ndef is_valid_IP(IP):\n    '''\n    Write a function to check whether an input string is a valid IPv4 address or IPv6 address or neither.\n    '''\n    ip_list = IP.split('.')\n    if len(ip_list)!= 4:\n        return False\n    for i in ip_list:\n        if not i.isdigit():\n            return False\n        if int(i) < 0 or int(i) > 255:\n            return False\n    return True\ndef is_valid_mask(mask):\n    '''\n    Write a function to check whether an input string is a valid IPv4 mask or IPv6 mask or neither.\n    '''\n    if '.' in mask:\n        return is_valid_IP(mask)\n    else:\n        bits = mask.split('/')\n        if len(bits)!= 2:\n            return False\n        if not bits[1].isdigit():\n            return False\n        if int(bits[1]) < 1 or int(bits[1]) > 32:\n            return False\n        return True\ndef get_bit(num,bit):\n    '''\n    Find the bit of the number.\n    '''\n    return (num&(1<<bit))>>bit\ndef set_bit(num,bit):\n    '''\n    Set the bit of the number.\n    '''\n    return num|(1<<bit)\ndef clear_bit(num,bit):\n    '''\n    Clear the bit of the number.\n    '''\n    return num&(~(1<<bit))\ndef check_ip_valid(ip):\n    '''\n    Write a function to check whether an input string is a valid IPv4 address or IPv6 address or neither.\n    '''\n    ip_list = ip.split('.')\n    if len(ip_list)!= 4:\n        return False\n    for i in ip_list:\n        if not i.isdigit():\n            return False\n        if int(i) < 0 or int(i) > 255:\n            return False\n    return True\ndef check_mask_valid(mask):\n    '''\n    Write a function to check whether an input string is a valid IPv4 mask or IPv6 mask or neither.\n    '''\n    if '.' in mask:\n        return check_ip_valid(mask)\n    else:\n        bits = mask.split('/')\n        if len(bits)!= 2:\n            return False\n        if not bits[1].isdigit():\n            return False\n        if int(bits[1]) < 1 or int(bits[1]) > 32:\n            return False\n        return True\ndef get_ip_from_mask(mask):\n    '''\n    Write a function to get the IPv4 address corresponding to the IPv6 address.\n    '''\n    ip_list = mask.split('.')\n    if len(ip_list)!= 4:\n        return None\n    for i in ip_list:\n        if not i.isdigit():\n            return None\n        if int(i) < 0 or int(i) > 255:\n            return None\n    ip_str = ''\n    for i in range(1,len(ip_list)):\n        ip_str += str(int(ip_list[i])*256)+'.'\n    ip_str += str(int(ip_list[0])*256*256)\n    return ip_str[:-1]\ndef get_mask_from_ip(ip):\n    '''\n    Write a function to get the IPv6 address corresponding to the IPv4 address.\n    '''\n    ip_list = ip.split('.')\n    if len(ip_list)!= 4:\n        return None\n    for i in ip_list:\n        if not i.isdigit():\n            return None\n        if int(i) < 0 or int(i) > 255:\n            return None\n    ip_str = ''\n    for i in range(1,len(ip_list)):\n        ip_str += str(int(ip_list[i])*256)+'.'\n    ip_str += str(int(ip_list[0])*256*256)+'/'+str(int(ip_list[1])*256)+'.'\n    return ip_str[:-1]\ndef get_host_bit(host_str):\n    '''\n    Write a function to find the number of hosts with the same first 3 bits.\n    '''\n    if not isinstance(host_str,str):\n        return -1\n    host_str = host_str.lower()\n    if ':' in host_str:\n        return -1\n    host_list = host_str.split('.')\n    if len(host_list)!= 4:\n        return -1\n    for i in host_list:\n        if not i.isdigit():\n            return -1\n        if int(i) < 0 or int(i) > 255:\n            return -1\n    first_3_bits = ''\n    for i in host_list[:3]:\n        first_3_bits += str(int(i)*256)\n    return Counter(first_3_bits)[host_list[3]]\ndef get_net_bit(net_str):\n    '''\n    Write a function to find the number of networks with the same first 3 bits.\n    '''\n    if not isinstance(net_str,str):\n        return -1\n    net_str = net_str.lower()\n    if ':' in net_str:\n        return -1\n    net_list = net_str.split('.')\n    if len(net_list)!= 4:\n        return -1\n    for i in net_list:\n        if not i.isdigit():\n            return -1\n        if int(i) < 0 or int(i) > 255:\n            return -1\n    first_3_bits = ''\n    for i in net_list[:3]:\n        first_3_bits += str(int(i)*256)\n    return Counter(first_3_bits)[net_list[3]]\ndef get_broadcast_bit(broadcast_str):\n    '''\n    Write a function to find the number of hosts with the same last 3 bits.\n    '''\n    if not isinstance(broadcast_str,str):\n        return -1\n    broadcast_str = broadcast_str.lower()\n    if ':' in broadcast_str:\n        return -1\n    broadcast_list = broadcast_str.split('.')\n    if len(broadcast_list)!= 4:\n        return -1\n    for i in broadcast_list:\n        if not i.isdigit():\n            return -1\n        if int(i) < 0 or int(i) > 255:\n            return -1\n    last_3_bits = ''\n    for i in broadcast_list[-3:]:\n        last_3_bits += str(int(i)*256)\n    return Counter(last_3_bits)[broadcast_list[3]]\ndef get_subnet_bit(subnet_str):\n    '''\n    Write a function to find the number of subnets with the same first 3 bits.\n    '''\n    if not isinstance(subnet_str,str):\n        return -1\n    subnet_str = subnet_str.lower()\n    if ':' in subnet_str:\n        return -1\n    subnet_list = subnet_str.split('.')\n    if len(subnet_list)!= 4:\n        return -1\n    for i in subnet_list:\n        if not i.isdigit():\n            return -1\n        if int(i) < 0 or int(i) > 255:\n            return -1\n    first_3_bits = ''\n    for i in subnet_list[:3]:\n        first_3_bits += str(int(i)*256)\n    return Counter(first_3_bits)[subnet_list[3]]\ndef get_host_range(net_str):\n    ''",
        "num_ids": 202
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    keys = sorted(dict1.keys())\n    values = []\n    for i in keys:\n        values.append(dict1[i])\n    return keys, values\n",
        "num_ids": 42
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return\n    else:\n        small = min(nums)\n        big = max(nums)\n        return small + big\n",
        "num_ids": 44
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n    \nassert big_sum([1,2,3,4,5]) == 15, 'expected sum to be 15'\nassert big_sum([-1,-2,-3,-4,-5]) == 0, 'expected sum to be 0'\nassert big_sum([-100000,100000]) == 0, 'expected sum to be 0'\nprint \"All tests passed successfully!\"",
        "num_ids": 101
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n    \n    \ndef another_big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(",
        "num_ids": 6
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if nums == []:\n        return 0\n",
        "num_ids": 14
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-1:-1:-1])\n",
        "num_ids": 20
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    return nums[-1] + nums[0]\n",
        "num_ids": 24
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    #find the sum of the largest and smallest value in a given array\n    return(max(nums) + min(nums))\n",
        "num_ids": 33
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n",
        "num_ids": 17
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(nums) - min(nums) - max(nums)\n",
        "num_ids": 22
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    \n    return string.lower()\n",
        "num_ids": 11
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if string == string.lower():\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # logic here\n    return string.lower()\n",
        "num_ids": 14
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1=str1.upper()\n    return re.sub('[a-z]','',str1)\n",
        "num_ids": 29
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]', '', str1)\n",
        "num_ids": 20
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = re.sub(r'[a-z]+', '', str1)\n    return str2\n",
        "num_ids": 29
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return ''.join(x for x in str1 if x.isupper())\ndef count_char(str1):\n    '''\n    Write a function that accepts a string and return the frequency of each\n    character in the string.\n    '''\n    str2=str1.lower()\n    if type(str2)==type(str1):\n        char_dict={}\n        for char in str2:\n            if char in char_dict:\n                char_dict[char]+=1\n            else:\n                char_dict[char]=1\n        return char_dict\n    else:\n        return \"Enter the string only\"\n",
        "num_ids": 92
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.translate(None, \"abcdefghijklmnopqrstuvwxyz\")\n",
        "num_ids": 29
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]', '', str1)\n",
        "num_ids": 22
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'(^[a-z]*[a-z])|([a-z]*$)', '', str1)\n",
        "num_ids": 39
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]', '', str1)\n",
        "num_ids": 20
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub('[a-z]*', '', str1)\n    return str1\n",
        "num_ids": 28
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # your code here\n    return n//10\n",
        "num_ids": 14
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n",
        "num_ids": 8
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(n / 10)\n",
        "num_ids": 11
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n%10\n",
        "num_ids": 23
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # YOUR CODE GOES HERE\n    num = n\n    while num>0 :\n        if num%10==0 :\n            return num%10\n        else :\n            num=num/10\n",
        "num_ids": 48
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    return n % 10\n    \ndef last_Digit(n) :  \n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    \n    return n // 10\n    \ndef second_to_last_Digit(n) :  \n    '''\n    Write a python function to find the second to last digit of a given number.\n    '''\n    \n    return n // 100 % 10\n    \ndef sum_digits(n) :  \n    '''\n    Write a python function to find the sum of the digits of a given number.\n    '''\n    \n    return sum(list(map(int, str(n))))\n",
        "num_ids": 19
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n==0 :\n        return 0\n    digits = 0\n    while(n/10)>=1 :\n        digits += 1\n        n /= 10\n    return digits\n",
        "num_ids": 47
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n/10\n",
        "num_ids": 8
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else:\n        return (n % 10)\n",
        "num_ids": 25
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return first_Digit(n/10)\n",
        "num_ids": 29
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return filter(lambda x: x%2!= 0, list)\n",
        "num_ids": 19
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds = []\n    for i in list:\n        if i%2!= 0:\n            odds.append(i)\n    return odds\n",
        "num_ids": 38
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    for number in list:\n        if number % 2 == 0:\n            list.remove(number)\n    return list\n",
        "num_ids": 30
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for number in list:\n        if number % 2!= 0:\n            odd_numbers.append(number)\n    return odd_numbers\n",
        "num_ids": 45
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # print(list)\n    odds = []\n    for item in list:\n        if item % 2!= 0:\n            odds.append(item)\n    return odds\n",
        "num_ids": 45
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    newlist = []\n    for ele in list:\n        if ele%2!= 0:\n            newlist.append(ele)\n    return newlist\n",
        "num_ids": 39
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x%2]\n    \ndef Min(list): \n    '''\n    Write a python function which takes a list of integers and returns the minimum value.\n    '''\n    return min(list)\n    \ndef Max(list): \n    '''\n    Write a python function which takes a list of integers and returns the maximum value.\n    '''\n    return max(list)\n    \ndef Sum(list): \n    '''\n    Write a python function which takes a list of integers and returns the sum of all integers.\n    '''\n    return sum(list)\n    \ndef Reverse(list): \n    '''\n    Write a python function which takes a list of integers and returns the list in reverse order.\n    '''\n    return list[::-1]\n    \ndef Sort(list): \n    '''\n    Write a python function which takes a list of integers and returns the list in ascending order.\n    '''\n    return sorted(list)\n    \ndef Stdev(list): \n    '''\n    Write a python function which takes a list of integers and returns the standard deviation.\n    '''\n    avg = Sum(list) / len(list)\n    return sum([(x - avg)**2 for x in list]) / len(list)\n    \ndef Mean(list): \n    '''\n    Write a python function which takes a list of integers and returns the mean.\n    '''\n    avg = Sum(list) / len(list)\n    return avg\n    \ndef Median(list): \n    '''\n    Write a python function which takes a list of integers and returns the median.\n    '''\n    return Median2(list)\n    \ndef Median2(list): \n    '''\n    Write a python function which takes a list of integers and returns the median.\n    '''\n    n = len(list)\n    if n % 2:\n        return list[n/2]\n    else:\n        return (list[n/2-1] + list[n/2]) / 2.0\n    \ndef Q1(list): \n    '''\n    Write a python function which takes a list of integers and returns the first quartile.\n    '''\n    return Median(list)\n    \ndef Q3(list): \n    '''\n    Write a python function which takes a list of integers and returns the third quartile.\n    '''\n    return Median2(list)\n    \ndef Variance(list): \n    '''\n    Write a python function which takes a list of integers and returns the variance.\n    '''\n    avg = Sum(list) / len(list)\n    return Sum([(x - avg)**2 for x in list]) / len(list)\n    \ndef MeanStd(list): \n    '''\n    Write a python function which takes a list of integers and returns the mean and standard deviation.\n    '''\n    avg = Sum(list) / len(list)\n    return (avg, stdev(list))\n    \ndef Slope(x1, y1, x2, y2): \n    '''\n    Write a python function which takes two lists of integers and returns the slope of the line of best fit.\n    '''\n    n = len(x1)\n    if n!= len(y1):\n        raise ValueError\n    avgx = Sum(x1) / n\n    avgy = Sum(y1) / n\n    varx = Sum([(x - avgx)**2 for x in x1]) / n\n    vary = Sum([(y - avgy)**2 for y in y1]) / n\n    slope = (avgy - avgy1) / (varx - varx1)\n    return slope\n    \ndef R2(x1, y1, x2, y2): \n    '''\n    Write a python function which takes two lists of integers and returns the R2 value of the line of best fit.\n    '''\n    slope = Slope(x1, y1, x2, y2)\n    avgx = Sum(x1) / len(x1)\n    avgy = Sum(y1) / len(y1)\n    varx = Sum([(x - avgx)**2 for x in x1]) / len(x1)\n    vary = Sum([(y - avgy)**2 for y in y1]) / len(y1)\n    return 1 - varx / vary\n    \ndef Bias(x1, y1, x2, y2): \n    '''\n    Write a python function which takes two lists of integers and returns the Bias value of the line of best fit.\n    '''\n    slope = Slope(x1, y1, x2, y2)\n    avgx = Sum(x1) / len(x1)\n    avgy = Sum(y1) / len(y1)\n    return avgy - slope * avgx\n    \ndef Intercept(x1, y1, x2, y2): \n    '''\n    Write a python function which takes two lists of integers and returns the Intercept value of the line of best fit.\n    '''\n    slope = Slope(x1, y1, x2, y2)\n    return y1[0] - slope * x1[0]\n    \ndef Cross(x1, y1, x2, y2): \n    '''\n    Write a python function which takes two lists of integers and returns the cross product of the two lines of best fit.\n    '''\n    slope1 = Slope(x1, y1, x2, y2)\n    slope2 = Slope(x2, y2, x1, y1)\n    return slope1 * slope2\n    \ndef Vectors(x1, y1, x2, y2): \n    '''\n    Write a python function which takes two lists of integers and returns the slope and intercept of the line of best fit.\n    '''\n    slope = Slope(x1, y1, x2, y2)\n    intercept = Intercept(x1, y1, x2, y2)\n    return (slope, intercept)\n    \ndef Linreg(x1, y1): \n    '''\n    Write a python function which takes a list of integers and returns the slope and intercept of the line of best fit.\n    '''\n    return Vectors(x1, y1, x1, y1)\n    \ndef Logistic(x, y): \n    '''\n    Write a python function which takes a list of integers and returns the intercept and slope of the logistic function.\n    '''\n    avgx = Sum(x) / len(x)\n    avgy = Sum(y) / len(y)\n    varx = Sum([(x - avgx)**2 for x in x]) / len(x)\n    vary = Sum([(y - avgy)**2 for y in y]) / len(y)\n    slope = (avgy - avgy1) / (varx - varx1)\n    intercept = avgy - slope * avgx\n    return (slope, intercept)\n    \ndef Cumulative(x, y, alpha): \n    '''\n    Write a python function which takes a list of integers and a list of floats and returns the x and y values of the cumulative function.\n    '''\n    x = [x]\n    y = [y[0]]\n    for i in range(len(y) - 1):\n        x.append(x[-1] + alpha)\n        y.append(y[-1] + alpha * y[-1])\n    return x, y\n    \ndef Binom(n, k): \n    '''\n    Write a python function which takes two integers and returns the binomial coefficient.\n    '''\n    if (k > n):\n        return 0\n    k = min(k, n - k)\n    numer = reduce(lambda x, y: x * y, range(n - k + 1, n + 1))\n    denom = reduce(lambda x, y: x * y, range(1, k + 1))\n    return numer / denom\n    \ndef Mode(list): \n    '''\n    Write a python function which takes a list of integers and returns the mode.\n    '''\n    count = {}\n    for x in list:\n        if x in count:\n            count[x] += 1\n        else:\n            count[x] = 1\n    maxcount = max(count.values())\n",
        "num_ids": 52
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds = []\n    for integer in list:\n        if integer % 2!= 0:\n            odds.append(integer)\n    return odds\n",
        "num_ids": 38
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [item for item in list if item%2!= 0]\n    \ndef Sum_Digit(n):\n    '''\n    Write a python function which takes a positive integer and returns the sum of the digits.\n    '''\n    return sum([int(i) for i in str(n)])\n    \ndef Is_Palindrome(n):\n    '''\n    Write a python function which takes a positive integer and returns True if it is a palindrome, otherwise returns False.\n    '''\n    return str(n) == str(n)[::-1]\n    \ndef Is_Perfect(n):\n    '''\n    Write a python function which takes a positive integer and returns True if it is perfect, otherwise returns False.\n    A perfect number is a number which is equal to the sum of its proper divisors.\n    '''\n    total = 1\n    for i in range(2, n):\n        if n%i == 0:\n            total += i\n    return total == n\n    \ndef Is_Ascending(n):\n    '''\n    Write a python function which takes a positive integer and returns True if it is ascending, otherwise returns False.\n    An ascending number is a number which is larger than the last number it is divisible by.\n    '''\n    return n > n%2\n    \ndef Is_Armstrong(n):\n    '''\n    Write a python function which takes a positive integer and returns True if it is Armstrong, otherwise returns False.\n    An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\n    '''\n    t = n\n    d = 0\n    while n > 0:\n        d += 1\n        n /= 10\n    return t == sum([int(i)**d for i in str(n)])\n    \ndef Is_Prime(n):\n    '''\n    Write a python function which takes a positive integer and returns True if it is prime, otherwise returns False.\n    A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n    '''\n    for i in range(2, n):\n        if n%i == 0:\n            return False\n    return True\n    \ndef Is_Permuted(n):\n    '''\n    Write a python function which takes a positive integer and returns True if it is permuted, otherwise returns False.\n    A permuted number is a number which is different from every other number in the same list of digits.\n    '''\n    l = []\n    for i in range(10):\n        l.append(i)\n    l.remove(int(str(n)[0]))\n    for i in range(1, len(str(n))):\n        if int(str(n)[i]) in l:\n            l.remove(int(str(n)[i]))\n        else:\n            return False\n    return True\n    \ndef Is_Harshad(n):\n    '''\n    Write a python function which takes a positive integer and returns True if it is a harshad number, otherwise returns False.\n    A harshad number is a number which is divisible by sum of its digits.\n    '''\n    return n % sum([int(i) for i in str(n)]) == 0\n    \ndef Is_Pandigital(n):\n    '''\n    Write a python function which takes a positive integer and returns True if it is a pandigital, otherwise returns False.\n    A pandigital number is a number that consists of only digits.\n    '''\n    return len(str(n)) == 9\n    \ndef Is_Hexagonal(n):\n    '''\n    Write a python function which takes a positive integer and returns True if it is a hexagonal number, otherwise returns False.\n    A hexagonal number is a number which is divisible by the sum of its digits.\n    '''\n    return n % (int(str(n)[0]) + int(str(n)[1]) + int(str(n)[2])) == 0\n    \ndef Is_Pentagonal(n):\n    '''\n    Write a python function which takes a positive integer and returns True if it is a pentagonal number, otherwise returns False.\n    A pentagonal number is a number which is divisible by the sum of its digits.\n    '''\n    return n % (int(str(n)[0]) + int(str(n)[1]) + int(str(n)[2]) + int(str(n)[3])) == 0\n    \ndef Is_Heptagonal(n):\n    '''\n    Write a python function which takes a positive integer and returns True if it is a heptagonal number, otherwise returns False.\n    A heptagonal number is a number which is divisible by the sum of its digits.\n    '''\n    return n % (int(str(n)[0]) + int(str(n)[1]) + int(str(n)[2]) + int(str(n)[3]) + int(str(n)[4])) == 0\n    \ndef Is_Octagonal(n):\n    '''\n    Write a python function which takes a positive integer and returns True if it is an octagonal number, otherwise returns False.\n    A octagonal number is a number which is divisible by the sum of its digits.\n    '''\n    return n % (int(str(n)[0]) + int(str(n)[1]) + int(str(n)[2]) + int(str(n)[3]) + int(str(n)[4]) + int(str(n)[5])) == 0\n    \ndef Is_AllPrime(n):\n    '''\n    Write a python function which takes a positive integer and returns True if it is an all prime number, otherwise returns False.\n    A all prime number is a number which is only divisible by 1 and itself.\n    '''\n    for i in range(2, n):\n        if n%i == 0:\n            return False\n    return True\n    \ndef Is_Abundant(n):\n    '''\n    Write a python function which takes a positive integer and returns True if it is an abundant number, otherwise returns False.\n    A abundant number is a number which is larger than the sum of its proper divisors.\n    '''\n    total = 1\n    for i in range(2, n):\n        if n%i == 0:\n            total += i\n    return total > n\n    \ndef Is_Circular(n):\n    '''\n    Write a python function which takes a positive integer and returns True if it is a circular prime number, otherwise returns False.\n    A circular prime number is a prime number which has the same remainder when it is divided by every number from 2 to itself.\n    '''\n    for i in range(2, n):\n        if n%i == 0 and i!= n:\n            return False\n    return True\n    \ndef Is_Lychrel(n):\n    '''\n    Write a python function which takes a positive integer and returns True if it is a lychrel number, otherwise returns False.\n    A lychrel number is a number which is the sum of the factorial of its digits.\n    '''\n    for i in range(50):\n        total = 0\n        temp = n\n        while temp > 0:\n            total += temp%10 * math.factorial(temp%10)\n            temp /= 10\n        if total == n:\n            return False\n        n = total\n    return True\n    \ndef Is_Dishonest(n):\n    '''\n    Write a python function which takes a positive integer and returns True if it is a dishonest number, otherwise returns False.\n    A dishonest number is a number which is equal to the sum of its digits with every digit multiplied by the sum of the digits of the number.\n    '''\n    return n == sum([int(i)*sum([int(j) for j in str(n)]) for i in str(n)])\n    \ndef Is_Ascending_Optimized(n):\n    '''\n    Write a python function which takes a positive integer and returns True if it is an ascending number, otherwise returns False.\n    An ascending number is a number which is larger than the last number it is divisible by.\n    '''\n    for i in range(2, n):\n        if n%i == 0 and n/i < n:\n            return False\n    return True\n    \ndef Is_Ascending_Optimized_2(n):\n    '''\n    Write a python function which takes a positive integer and returns True if it is an ascending number, otherwise returns False.\n    An ascending number is a number which is larger than the last number it is divisible by.\n",
        "num_ids": 48
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x%2!=0]\n",
        "num_ids": 19
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # use numpy to calculate sum of cubes\n    a = n*(n+1)*(2*n+1)/6\n    b = n*(n+1)/2\n    return a - b\n",
        "num_ids": 50
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_first_n = 0\n    for i in range(1, n+1) :\n        sum_of_first_n += i**3\n    sum_of_n = sum(range(1, n+1))**3\n    return sum_of_n - sum_of_first_n\n",
        "num_ids": 76
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    s = 0\n    for i in range(1,n+1) :\n        s = s + i**3\n    return (s**3 - (2*n+1)**3)\n",
        "num_ids": 48
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n == 1 :\n        return 1\n    return sum(map(lambda x : x**3, range(n)))**0.5 - sum(range(n))\n",
        "num_ids": 42
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum(i**3 for i in range(1, n+1)) - sum(range(1, n+1))**3\n",
        "num_ids": 34
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        sum = sum + i**3\n    return sum**3 - sum\n",
        "num_ids": 38
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    s1 = 0\n    s2 = 0\n    for i in range(n) :\n        s1 += i**3\n        s2 += i\n    return (s1 - s2)\n",
        "num_ids": 48
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1) :\n        sum = sum + i**3\n    return sum**2\n    \n    \ndef prob_2_8() :\n    '''\n    What is the difference between the sum of the squares of the first one-hundred natural numbers and the square of the sum?\n    '''\n    \n    sum = 0\n    for i in range(1,101) :\n        sum = sum + i\n    return sum**2 - sum\n",
        "num_ids": 36
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        s+=i**3\n    print(s**2 - (n*(n+1)**2)/4)\n",
        "num_ids": 48
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    s = sum(list(map(lambda x:x**3, range(n))))\n    t = sum(range(n))\n    return s - t\n",
        "num_ids": 39
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N-1) : \n        for j in range(i+1,N) : \n            if A[i] ^ A[j] & 1 : \n                count += 1\n    return count\n",
        "num_ids": 60
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) : \n        for j in range(i+1,N) : \n            if (A[i] ^ A[j]) % 2 == 1 : \n                count += 1\n    return count\n",
        "num_ids": 61
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    counter = 0\n    for i in range(N-1) :\n        for j in range(i+1,N) :\n            if (A[i]^A[j])%2 == 1 :\n                counter += 1\n    return counter\n",
        "num_ids": 60
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if ( A[i]^A[j] ) & 1 :\n                count += 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # Your Code Here\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i]^A[j]&1:\n                count+=1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0 \n    for i in range(N) : \n        for j in range(i+1,N) : \n            if ((A[i] ^ A[j]) & 0x01) == 0x01 : \n                count += 1\n    return count \n",
        "num_ids": 68
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N):\n        for j in range(i+1,N):\n            if (A[i]^A[j])%2 == 1:\n                count +=1\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    cnt = 0\n    for i in range(N) : \n        for j in range(i+1,N) : \n            if (A[i]^A[j])&1 == 1 :\n                cnt+=1\n    return cnt\n",
        "num_ids": 63
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    pairs = 0\n    for i in xrange(N) : \n        for j in xrange(i+1,N) : \n            if A[i] ^ A[j] % 2 == 1 : \n                pairs += 1\n    return pairs\n",
        "num_ids": 66
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    pair_count = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if A[i] ^ A[j] & 1 == 1 :\n                pair_count += 1\n    return pair_count\n",
        "num_ids": 63
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string\n",
        "num_ids": 54
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for i in range(len(string)):\n        if string[i].isalpha():\n            if string[i].isupper():\n                result += string[i].lower()\n            else:\n                result += string[i].upper()\n        else:\n            result += string[i]\n    return result\n",
        "num_ids": 79
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if len(string)==0:\n        return string\n    elif string[0].isupper():\n        return string[0].lower()+toggle_string(string[1:])\n    else:\n        return string[0].upper()+toggle_string(string[1:])\n",
        "num_ids": 69
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = string.lower()\n    string = string.upper()\n    return string\n",
        "num_ids": 22
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([str(s).swapcase() for s in string])\n    \n",
        "num_ids": 24
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return \"\".join(map(lambda x: x.swapcase(), string))\n",
        "num_ids": 22
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    num1, num2 = str(n1), str(n2)\n    if len(num1) > len(num2):\n        num1, num2 = num2, num1\n    longest = max(len(num1), len(num2))\n    dif = 0\n    for i in range(longest):\n        dif += abs(int(num1[i]) - int(num2[i]))\n    return dif\n",
        "num_ids": 108
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    s1 = str(n1)\n    s2 = str(n2)\n",
        "num_ids": 22
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([int(x) for x in str(n1 - n2)])\n",
        "num_ids": 23
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 < 0 or n2 < 0:\n        return None\n    else:\n        return abs(n1 - n2)\n",
        "num_ids": 34
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 == n2:\n        return 0\n    else:\n        n1_list = list(str(n1))\n        n2_list = list(str(n2))\n        n1_len = len(n1_list)\n        n2_len = len(n2_list)\n        if n1_len > n2_len:\n            for i in xrange(n1_len - n2_len):\n                n2_list.append(0)\n        if n2_len > n1_len:\n            for i in xrange(n2_len - n1_len):\n                n1_list.append(0)\n        diff_list = []\n        for i in xrange(n1_len):\n            diff_list.append(abs(int(n1_list[i]) - int(n2_list[i])))\n        return sum(diff_list)\n",
        "num_ids": 218
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    str1 = str(n1)\n    str2 = str(n2)\n    if len(str1) > len(str2):\n        str2 = '0' * (len(str1) - len(str2)) + str2\n    else:\n        str1 = '0' * (len(str2) - len(str1)) + str1\n    sum = 0\n    for i in xrange(len(str1)):\n        d1 = int(str1[i])\n        d2 = int(str2[i])\n        sum += abs(d1 - d2)\n    return sum\n",
        "num_ids": 147
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(int(i) - int(j)) for i, j in zip(str(n1), str(n2))])\n",
        "num_ids": 36
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    s = 0\n    n1 = abs(n1)\n    n2 = abs(n2)\n    while n1 > 0 or n2 > 0:\n        if n1 > n2:\n            s += n1 % 10\n            n1 /= 10\n        else:\n            s += n2 % 10\n            n2 /= 10\n    return s\n",
        "num_ids": 87
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_list = list(str(n1))\n    n2_list = list(str(n2))\n    n1_len = len(n1_list)\n    n2_len = len(n2_list)\n    n1_list_len = len(n1_list)\n    n2_list_len = len(n2_list)\n    # print n1_list_len, n2_list_len\n    n1_n2_diff_list = []\n    # print n1_n2_diff_list\n    if n1_list_len > n2_list_len:\n        for i in range(n1_list_len):\n            n1_n2_diff_list.append(n1_list[i] - n2_list[i])\n        return sum(n1_n2_diff_list)\n    elif n2_list_len > n1_list_len:\n        for i in range(n2_list_len):\n            n1_n2_diff_list.append(n1_list[i] - n2_list[i])\n        return sum(n1_n2_diff_list)\n    else:\n        for i in range(n1_list_len):\n            n1_n2_diff_list.append(n1_list[i] - n2_list[i])\n        return sum(n1_n2_diff_list)\n",
        "num_ids": 346
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    pass\n    if not isinstance(n1, int):\n        raise ValueError('n1 must be an integer')\n    if not isinstance(n2, int):\n        raise ValueError('n2 must be an integer')\n    \n    diff = n1 - n2\n    diff_digits = 0\n    while diff!= 0:\n        diff_digits += diff % 10\n        diff = diff / 10\n    return diff_digits\n",
        "num_ids": 106
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n",
        "num_ids": 91
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = -2**31-1\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        elif max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    return max_so_far\n",
        "num_ids": 109
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_ending_here = max_so_far = 0\n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\n",
        "num_ids": 102
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    max_sum = max(a[:size])\n    for i in range(len(a)-size+1):\n        max_sum = max(max_sum, sum(a[i:i+size]))\n    return max_sum\n",
        "num_ids": 73
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    s = 0\n    max_sum = a[0]\n    for i in range(size):\n        s = s + a[i]\n        if s > max_sum:\n            max_sum = s\n        if s < 0:\n            s = 0\n    return max_sum\n",
        "num_ids": 70
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize result\n    max_so_far = a[0]\n    curr_max = a[0]\n",
        "num_ids": 31
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = -sys.maxsize-1\n    max_ending_here = 0\n    start = 0\n    end = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n            start = i\n            end = i\n        elif max_ending_here < 0:\n            max_ending_here = 0\n            start = i+1\n    print(max_so_far)\n    print(start, end)\n",
        "num_ids": 141
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    start = 0\n    max_sum = a[0]\n",
        "num_ids": 17
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if not a:\n        return 0\n    max_so_far = a[0]\n    curr_max = a[0]\n    for i in xrange(1, size):\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    return max_so_far\n",
        "num_ids": 98
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size <= 0:\n        return 0\n    max_ending_here = 0\n    max_so_far = 0\n    for i in range(0, size):\n        max_ending_here += a[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\n",
        "num_ids": 110
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(set(test_tup1 + test_tup2))\n",
        "num_ids": 21
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set()\n    union_set.update(test_tup1)\n    union_set.update(test_tup2)\n    union_list = list(union_set)\n    union_list.sort()\n    return tuple(union_list)\n",
        "num_ids": 67
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # TODO: return a sorted list of the union of the elements of the two tuples\n    union_list = []\n    for item in test_tup1:\n        union_list.append(item)\n    for item in test_tup2:\n        if item not in union_list:\n            union_list.append(item)\n    return sorted(union_list)\n",
        "num_ids": 91
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            if test_tup1[i] == test_tup2[j]:\n                union_list.append(test_tup1[i])\n    union_list.sort()\n    return union_list\n",
        "num_ids": 91
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    \n    union_tup = tuple(set(test_tup1) | set(test_tup2))\n    print(union_tup)\n    \nunion_elements((1,2,3),(4,5,6))\nunion_elements((1,2,3),(1,2,5))\nunion_elements((1,2,3),(2,3,6))\nunion_elements((5,6,7),(1,2,3))\nunion_elements((1,2,3),(1,3,6))\nunion_elements((1,2,3),(1,2,3))\nunion_elements((1,2,3),(1,3,4))\nunion_elements((1,2,3),(1,5,6))\nunion_elements((1,2,3),(1,5,6))\nunion_elements((1,2,3),(2,3,4))\nunion_elements((1,2,3),(2,3,6))\nunion_elements((1,2,3),(2,3,6))\nunion_elements((1,2,3),(3,4,6))\nunion_elements((1,2,3),(3,5,6))\nunion_elements((1,2,3),(4,5,6))\nunion_elements((1,2,3,4),(1,2,3,4))\nunion_elements((1,2,3,4),(1,3,4,5))\nunion_elements((1,2,3,4),(1,5,6,7))\nunion_elements((1,2,3,4),(1,5,6,7))\nunion_elements((1,2,3,4),(2,3,4,5))\nunion_elements((1,2,3,4),(2,3,6,7))\nunion_elements((1,2,3,4),(2,3,6,7))\nunion_elements((1,2,3,4),(2,3,6,7))\nunion_elements((1,2,3,4),(3,4,5,6))\nunion_elements((1,2,3,4),(3,5,6,7))\nunion_elements((1,2,3,4),(4,5,6,7))\nunion_elements((1,2,3,4),(4,5,6,7))\nunion_elements((1,2,3,4),(4,5,6,7))\nunion_elements((1,2,3,4),(5,6,7,8))\nunion_elements((1,2,3,4),(5,6,7,8))\nunion_elements((1,2,3,4),(5,6,7,8))\nunion_elements((1,2,3,4),(6,7,8,9))\nunion_elements((1,2,3,4),(6,7,8,9))\nunion_elements((1,2,3,4),(6,7,8,9))\nunion_elements((1,2,3,4),(6,7,8,9))\nunion_elements((1,2,3,4),(7,8,9,10))\nunion_elements((1,2,3,4),(7,8,9,10))\nunion_elements((1,2,3,4),(7,8,9,10))\nunion_elements((1,2,3,4),(7,8,9,10))\nunion_elements((1,2,3,4),(7,8,9,10))\nunion_elements((1,2,3,4),(8,9,10,11))\nunion_elements((1,2,3,4),(8,9,10,11))\nunion_elements((1,2,3,4),(8,9,10,11))\nunion_elements((1,2,3,4),(8,9,10,11))\nunion_elements((1,2,3,4),(8,9,10,11))\nunion_elements((1,2,3,4),(9,10,11,12))\nunion_elements((1,2,3,4),(9,10,11,12))\nunion_elements((1,2,3,4),(9,10,11,12))\nunion_elements((1,2,3,4),(9,10,11,12))\nunion_elements((1,2,3,4),(9,10,11,12))\nunion_elements((1,2,3,4),(10,11,12,13))\nunion_elements((1,2,3,4),(10,11,12,13))\nunion_elements((1,2,3,4),(10,11,12,13))\nunion_elements((1,2,3,4),(10,11,12,13))\nunion_elements((1,2,3,4),(10,11,12,13))\nunion_elements((1,2,3,4),(10,11,12,13))\nunion_elements((1,2,3,4),(11,12,13,14))\nunion_elements((1,2,3,4),(11,12,13,14))\nunion_elements((1,2,3,4),(11,12,13,14))\nunion_elements((1,2,3,4),(11,12,13,14))\nunion_elements((1,2,3,4),(11,12,13,14))\nunion_elements((1,2,3,4),(12,13,14,15))\nunion_elements((1,2,3,4),(12,13,14,15))\nunion_elements((1,2,3,4),(12,13,14,15))\nunion_elements((1,2,3,4),(12,13,14,15))\nunion_elements((1,2,3,4),(12,13,14,15))\nunion_elements((1,2,3,4),(12,13,14,15))\nunion_elements((1,2,3,4),(13,14,15,16))\nunion_elements((1,2,3,4),(13,14,15,16))\nunion_elements((1,2,3,4),(13,14,15,16))\nunion_elements((1,2,3,4),(13,14,15,16))\nunion_elements((1,2,3,4),(13,14,15,16))\nunion_elements((1,2,3,4),(14,15,16,17))\nunion_elements((1,2,3,4),(14,15,16,17))\nunion_elements((1,2,3,4),(14,15,16,17))\nunion_elements((1,2,3,4),(14,15,16,17))\nunion_elements((1,2,3,4),(14,15,16,17))\nunion_elements((1,2,3,4),(14,15,16,17))\nunion_elements((1,2,3,4),(15,16,17,18))\nunion_elements((1,2,3,4),(15,16,17,18))\nunion_elements((1,2,3,4),(15,16,17,18))\nunion_elements((1,2,3,4),(15,16,17,18))\nunion_elements((1,2,3,4),(15,16,17,18))\nunion_elements((1,2,3,4),(16,17,18,19))\nunion_elements((1,2,3,4),(16,17,18,19))\nunion_elements((1,2,3,4),(16,17,18,19))\nunion_elements((1,2,3,4),(16,17,18,19))\nunion_elements((1,2,3,4),(16,1",
        "num_ids": 1999
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set()\n    for element in test_tup1:\n        union_set.add(element)\n    for element in test_tup2:\n        union_set.add(element)\n    return sorted(union_set)\n",
        "num_ids": 61
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_elements = tuple(test_tup1 + test_tup2)\n    union_elements = sorted(union_elements)\n    return union_elements\n",
        "num_ids": 44
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in union_list:\n            union_list.append(test_tup1[i])\n        if test_tup2[i] not in union_list:\n            union_list.append(test_tup2[i])\n    union_list.sort()\n    return union_list\n",
        "num_ids": 105
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_elements = test_tup1 + test_tup2\n    union_elements = sorted(set(union_elements))\n    return tuple(union_elements)\n",
        "num_ids": 46
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    new_tup = list(test_tup1)\n    for tup in test_tup2:\n        if tup not in new_tup:\n            new_tup.append(tup)\n    return tuple(sorted(new_tup))\n",
        "num_ids": 66
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    Max = 0\n    for i in range(len(lst)):\n        for j in range(i,len(lst)):\n            l = [lst[k] for k in range(i,j+1)]\n            if len(l) > Max:\n                Max = len(l)\n    return Max\n    \ndef Find_Max_Length_Time(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    Max = 0\n    for i in range(len(lst)):\n        for j in range(i,len(lst)):\n            l = [lst[k] for k in range(i,j+1)]\n            if len(l) > Max:\n                Max = len(l)\n    return Max\n    \ndef Two_Sum(nums, target):\n    '''\n    Write a python function to find the indices of the two numbers whose sum is equal to target\n    '''\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            if nums[i] + nums[j] == target:\n                return [i,j]\n                \ndef Two_Sum_Time(nums, target):\n    '''\n    Write a python function to find the indices of the two numbers whose sum is equal to target\n    '''\n    nums_dict = {}\n    for i,n in enumerate(nums):\n        if target - n in nums_dict:\n            return [nums_dict[target-n],i]\n        nums_dict[n] = i\n        \ndef Max_Sum_Sub_Matrix(matrix):\n    '''\n    Write a python function to find the maximum sum path in a matrix\n    '''\n    if not matrix:\n        return\n    m, n = len(matrix), len(matrix[0])\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    \n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = matrix[i][j]\n            elif i == 0:\n                dp[i][j] = matrix[i][j] + dp[i][j-1]\n            elif j == 0:\n                dp[i][j] = matrix[i][j] + dp[i-1][j]\n            else:\n                dp[i][j] = matrix[i][j] + max(dp[i][j-1], dp[i-1][j])\n    return dp[-1][-1]\n    \ndef Max_Sum_Sub_Matrix_Time(matrix):\n    '''\n    Write a python function to find the maximum sum path in a matrix\n    '''\n    if not matrix:\n        return\n    m, n = len(matrix), len(matrix[0])\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    \n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = matrix[i][j]\n            elif i == 0:\n                dp[i][j] = matrix[i][j] + dp[i][j-1]\n            elif j == 0:\n                dp[i][j] = matrix[i][j] + dp[i-1][j]\n            else:\n                dp[i][j] = matrix[i][j] + max(dp[i][j-1], dp[i-1][j])\n    return dp[-1][-1]\n    \ndef Shuffle_String(string,n):\n    '''\n    Write a python function to shuffle a string\n    '''\n    n = n % len(string)\n    sub = string[:n]\n    string = string[n:]\n    return sub + string\n    \ndef Shuffle_String_Time(string,n):\n    '''\n    Write a python function to shuffle a string\n    '''\n    n = n % len(string)\n    sub = string[:n]\n    string = string[n:]\n    return sub + string\n    \ndef Longest_Subsequence(lst):\n    '''\n    Write a python function to find the length of the longest subsequence with unique elements.\n    '''\n    n = len(lst)\n    max_l = 1\n    memo = {}\n    for i in range(n):\n        memo[i] = [1,0]\n    for i in range(n):\n        for j in range(i):\n            if lst[i] == lst[j] and memo[j][0] + 1 > memo[i][0]:\n                memo[i] = memo[j][:]\n                memo[i][1] = i\n        if memo[i][0] + 1 > memo[i][1]:\n            memo[i][0] += 1\n        if memo[i][0] > max_l:\n            max_l = memo[i][0]\n    return max_l\n    \ndef Longest_Subsequence_Time(lst):\n    '''\n    Write a python function to find the length of the longest subsequence with unique elements.\n    '''\n    n = len(lst)\n    memo = [1 for i in range(n)]\n    for i in range(n):\n        for j in range(i):\n            if lst[i] == lst[j] and memo[j] + 1 > memo[i]:\n                memo[i] = memo[j] + 1\n    return max(memo)\n    \ndef Longest_Subsequence_Time2(lst):\n    '''\n    Write a python function to find the length of the longest subsequence with unique elements.\n    '''\n    n = len(lst)\n    memo = [1 for i in range(n)]\n    for i in range(n):\n        for j in range(i):\n            if lst[i] == lst[j] and memo[j] + 1 > memo[i]:\n                memo[i] = memo[j] + 1\n    return max(memo)\n    \ndef Symmetric_Check(matrix):\n    '''\n    Write a python function to check if a 2D matrix is symmetric.\n    '''\n    if not matrix:\n        return\n    m, n = len(matrix), len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j]!= matrix[j][i]:\n                return False\n    return True\n    \ndef Symmetric_Check_Time(matrix):\n    '''\n    Write a python function to check if a 2D matrix is symmetric.\n    '''\n    if not matrix:\n        return\n    m, n = len(matrix), len(matrix[0])\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j]!= matrix[j][i]:\n                return False\n    return True\n    \ndef Find_Maximum_Path(lst):\n    '''\n    Write a python function to find the maximum path sum for a given matrix.\n    '''\n    if not lst:\n        return\n    m, n = len(lst), len(lst[0])\n    memo = [[0 for j in range(n)] for i in range(m)]\n    memo[0][0] = lst[0][0]\n    for i in range(1,m):\n        memo[i][0] = lst[i][0] + memo[i-1][0]\n    for j in range(1,n):\n        memo[0][j] = lst[0][j] + memo[0][j-1]\n    for i in range(1,m):\n        for j in range(1,n):\n            memo[i][j] = max(lst[i][j] + memo[i-1][j], lst[i][j] + memo[i][j-1])\n    return memo[m-1][n-1]\n    \ndef Find_Maximum_Path_Time(lst):\n    '''\n    Write a python function to find the maximum path sum for a given matrix.\n    '''\n    i",
        "num_ids": 4
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # key = lst[i]\n    #     key_val = lst[i:j]\n    #     key_lst = lst[:i] + lst[j:]\n    #     len_dict[key] = max(len_dict[key], len(key_val))\n    #     len_dict[key_lst] = max(len_dict[key_lst], len(key_lst))\n    #     len_dict[key_val] = max(len_dict[key_val], len(key_val))\n",
        "num_ids": 134
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        if max_len < len(lst[i]):\n            max_len = len(lst[i])\n    return max_len\n",
        "num_ids": 56
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    subLists = []\n    for i in xrange(len(lst)):\n        for j in xrange(i, len(lst)):\n            subLists.append(lst[i:j+1])\n    maxlen = max(subLists, key=len)\n    return len(maxlen)\n",
        "num_ids": 79
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:  \n        return 0\n    maxLen = 1  \n    for i in range(len(lst)):  \n        count = 1  \n        for j in range(i + 1, len(lst)):  \n            if lst[j] == lst[i]:  \n                count += 1  \n        if count > maxLen:  \n            maxLen = count  \n    return maxLen  \n    \n    \ndef Find_Sub_Lists(lst):\n    '''\n    Write a python function to find the longest sublists.\n    '''\n    if len(lst) == 0:\n        return []\n    lst1 = []\n    for i in range(len(lst)):\n        if Find_Max_Length(lst[i:]) > 1:\n            lst1.append(lst[i:i + Find_Max_Length(lst[i:])])\n    return lst1\n    \n    \ndef Find_List_Combinations(lst, k):\n    '''\n    Write a python function to find the combinations of k elements\n    from a list.\n    '''\n    if k > len(lst) or k < 0:\n        return []\n    if k == 0:\n        return [[]]\n    lst2 = Find_Sub_Lists(lst)\n    result = []\n    for i in lst2:\n        result = result + [[i] + x for x in Find_List_Combinations(lst, k - 1)]\n    return result\n    \n    \ndef Find_Palindromic_Number(lst):\n    '''\n    Write a python function to find the palindromic number from a list.\n    '''\n    if len(lst) < 2:\n        return lst[0]\n    if lst[0]!= lst[-1]:\n        return 0\n    return Find_Palindromic_Number(lst[1:-1]) * 10 + lst[0]\n    \n    \ndef Find_Anagrams(lst1, lst2):\n    '''\n    Write a python function to find the anagrams of a list in another list.\n    '''\n    if len(lst1) == 0:\n        return []\n    lst2 = sorted(lst2)\n    result = []\n    for i in lst1:\n        if sorted(i) == lst2:\n            result.append(i)\n    return result\n    \n    \ndef Find_Reverse_Ranges(lst):\n    '''\n    Write a python function to find the reverse ranges in a list.\n    '''\n    if len(lst) < 2:\n        return []\n    lst1 = []\n    lst2 = []\n    for i in lst:\n        if i >= lst[0]:\n            lst1.append(i)\n        else:\n            lst2.append(i)\n    result = []\n    for i in lst1:\n        if len(lst2) == 0:\n            result.append([i, i])\n        else:\n            if i < lst2[0]:\n                result.append([i, lst2[0]])\n            else:\n                for j in range(len(lst2)):\n                    if lst2[j] <= i:\n                        result.append([i, lst2[j]])\n                        lst2 = lst2[j + 1:]\n                        break\n    return result\n    \n    \ndef Find_Reverse_Sub_Lists(lst):\n    '''\n    Write a python function to find the reverse sublists in a list.\n    '''\n    if len(lst) < 2:\n        return []\n    lst1 = []\n    lst2 = []\n    for i in lst:\n        if i >= lst[0]:\n            lst1.append(i)\n        else:\n            lst2.append(i)\n    result = []\n    for i in lst1:\n        if len(lst2) == 0:\n            result.append([i])\n        else:\n            if i < lst2[0]:\n                result.append([i])\n            else:\n                for j in range(len(lst2)):\n                    if lst2[j] <= i:\n                        result.append([i] + lst2[j:])\n                        lst2 = lst2[:j] + [i]\n                        break\n    return result\n    \n    \ndef Find_Min_Sub_Lists(lst):\n    '''\n    Write a python function to find the min sublists.\n    '''\n    if len(lst) == 0:\n        return []\n    result = []\n    for i in range(len(lst)):\n        if Find_Max_Length(lst[i:]) < len(lst):\n            result.append(lst[i:i + Find_Max_Length(lst[i:])])\n    return result\n    \n    \ndef Find_Max_Sub_Lists(lst):\n    '''\n    Write a python function to find the max sublists.\n    '''\n    if len(lst) == 0:\n        return []\n    result = []\n    for i in range(len(lst)):\n        if Find_Max_Length(lst[:i]) > len(lst):\n            result.append(lst[:i + Find_Max_Length(lst[:i])])\n    return result\n    \n    \ndef Find_Largest_Sub_Lists(lst):\n    '''\n    Write a python function to find the largest sublists.\n    '''\n    if len(lst) == 0:\n        return []\n    result = []\n    for i in range(len(lst)):\n        if Find_Max_Length(lst[:i]) > len(lst):\n            result.append(lst[:i + Find_Max_Length(lst[:i])])\n    return result\n    \n    \ndef Find_Largest_Sub_Lists_with_Prefix_and_Suffix(lst):\n    '''\n    Write a python function to find the largest sublists with a prefix and a suffix.\n    '''\n    if len(lst) == 0:\n        return []\n    result = []\n    for i in range(len(lst)):\n        if Find_Max_Length(lst[i:]) > len(lst):\n            result.append(lst[i:i + Find_Max_Length(lst[i:])])\n    return result\n    \n    \ndef Find_Smallest_Sub_Lists(lst):\n    '''\n    Write a python function to find the smallest sublists.\n    '''\n    if len(lst) == 0:\n        return []\n    result = []\n    for i in range(len(lst)):\n        if Find_Max_Length(lst[:i]) < len(lst):\n            result.append(lst[:i + Find_Max_Length(lst[:i])])\n    return result\n    \n    \ndef Find_Smallest_Sub_Lists_with_Prefix_and_Suffix(lst):\n    '''\n    Write a python function to find the smallest sublists with a prefix and a suffix.\n    '''\n    if len(lst) == 0:\n        return []\n    result = []\n    for i in range(len(lst)):\n        if Find_Max_Length(lst[i:]) < len(lst):\n            result.append(lst[i:i + Find_Max_Length(lst[i:])])\n    return result\n    \n    \ndef Find_Reversed_Sums(lst):\n    '''\n    Write a python function to find the reversed sums of sublists.\n    '''\n    if len(lst) == 0:\n        return []\n    result = []\n    for i in range(len(lst)):\n        if Find_Max_Length(lst[:i]) > len(lst):\n            result.append(Find_Reversed_Sums(lst[:i + Find_Max_Length(lst[:i])]))\n        else:\n            result.append([lst[i]] + Find_Reversed_Sums(lst[i + 1:]))",
        "num_ids": 123
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i)>max_len:\n            max_len = len(i)\n    return max_len\n",
        "num_ids": 45
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxi = 0\n    for i in lst:\n        if maxi < len(i):\n            maxi = len(i)\n    return maxi\n",
        "num_ids": 40
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    hashmap = {}\n    res = 0\n    for i in lst:\n        if i not in hashmap:\n            hashmap[i] = 0\n        hashmap[i] += 1\n    for i in hashmap:\n        res = max(res, hashmap[i])\n    return res\n",
        "num_ids": 73
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest_so_far = 0\n    for lst_idx in range(0, len(lst)):\n        for length in range(1, len(lst) - lst_idx + 1):\n            if lst[lst_idx:lst_idx + length] == []:\n                break\n            elif len(lst[lst_idx:lst_idx + length]) > longest_so_far:\n                longest_so_far = len(lst[lst_idx:lst_idx + length])\n    return longest_so_far\n",
        "num_ids": 146
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    '''\n    Example: [0,1,2,2,2,3,3,3,3,4,4,4,4] = [0,1,2,2,3,3,4,4]\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        count = 1\n        curr_val = lst[i]\n        for j in range(i+1, len(lst)):\n            if lst[j] == curr_val:\n                count += 1\n            else:\n                break\n        max_len = max(max_len, count)\n    return max_len\n",
        "num_ids": 102
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'\\\"(.*?)\\\"', text)\n",
        "num_ids": 20
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    m = re.findall('\"\\d+\"',text)\n    return [int(m.split('\"')[1]) for m in m]\n",
        "num_ids": 39
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    p1 = re.compile('\"[^\"]*\"')\n    p2 = re.compile('[^\"]*\"')\n    def regexSearch(text, p):\n        return p.findall(text)\n    results = regexSearch(text, p1)\n    finalResults = []\n    for result in results:\n        if len(result) > 1:\n            finalResults.append(result)\n    for result in results:\n        if len(result) < 1:\n            finalResults.append(result)\n    return finalResults\ndef clean_dataset(sentence):\n    '''\n    Write a function to clean the dataset, i.e., apply the following functions to each sentence:\n    - Lower the sentence\n    - Replace all punctuation marks with spaces\n    - Remove all stopwords\n    - Returns a list of clean words\n    '''\n    # TODO: Remove punctuation marks and stopwords\n    sentence = sentence.lower()\n    sentence = re.sub('[%s]' % re.escape(\"!\"), \" \", sentence)\n    sentence = re.sub('[%s]' % re.escape(\"?\"), \" \", sentence)\n    sentence = re.sub('[%s]' % re.escape(\".\"), \" \", sentence)\n    sentence = re.sub('[%s]' % re.escape(\"'\"), \" \", sentence)\n    sentence = re.sub('[%s]' % re.escape(\"(\"), \" \", sentence)\n    sentence = re.sub('[%s]' % re.escape(\")\"), \" \", sentence)\n    sentence = re.sub('[%s]' % re.escape(\"-\"), \" \", sentence)\n    sentence = re.sub('[%s]' % re.escape(\"_\"), \" \", sentence)\n    #TODO: Remove stopwords\n    stopwords = [\"i\", \"me\", \"my\", \"myself\", \"we\", \"our\", \"ours\", \"ourselves\", \"you\", \"your\", \"yours\", \"yourself\",\n    \"yourselves\", \"he\", \"him\", \"his\", \"himself\", \"she\", \"her\", \"hers\", \"herself\", \"it\", \"its\", \"itself\", \"they\",\n    \"them\", \"their\", \"theirs\", \"themselves\", \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\", \"these\", \"those\",\n    \"am\", \"is\", \"are\", \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \"has\", \"had\", \"having\", \"do\", \"does\",\n    \"did\", \"doing\", \"a\", \"an\", \"the\", \"and\", \"but\", \"if\", \"or\", \"because\", \"as\", \"until\", \"while\", \"of\", \"at\",\n    \"by\", \"for\", \"with\", \"about\", \"against\", \"between\", \"into\", \"through\", \"during\", \"before\", \"after\", \"above\",\n    \"below\", \"to\", \"from\", \"up\", \"down\", \"in\", \"out\", \"on\", \"off\", \"over\", \"under\", \"again\", \"further\", \"then\",\n    \"once\", \"here\", \"there\", \"when\", \"where\", \"why\", \"how\", \"all\", \"any\", \"both\", \"each\", \"few\", \"more\", \"most\",\n    \"other\", \"some\", \"such\", \"no\", \"nor\", \"not\", \"only\", \"own\", \"same\", \"so\", \"than\", \"too\", \"very\", \"s\", \"t\",\n    \"can\", \"will\", \"just\", \"don\", \"should\", \"now\"]\n    words = sentence.split()\n    return [w for w in words if w not in stopwords]\ndef clean_list(text_list):\n    '''\n    Write a function to clean the dataset, i.e., apply the above function to each sentence in the dataset\n    '''\n    return [clean_dataset(s) for s in text_list]\ndef extract_entities(text_list):\n    '''\n    Write a function to extract named entities from the dataset\n    '''\n    pass\ndef extract_relations(text_list):\n    '''\n    Write a function to extract relation triples from the dataset\n    '''\n    pass\ndef build_word_index(text_list):\n    '''\n    Write a function to build a word index from the dataset\n    '''\n    pass\ndef build_triple_index(text_list):\n    '''\n    Write a function to build a relation index from the dataset\n    '''\n    pass\ndef build_relation_index(text_list):\n    '''\n    Write a function to build a relation index from the dataset\n    '''\n    pass\ndef build_entities(text_list):\n    '''\n    Write a function to build a relation index from the dataset\n    '''\n    pass\ndef build_sentence_index(text_list):\n    '''\n    Write a function to build a relation index from the dataset\n    '''\n    pass\ndef build_sentence_vector(text_list):\n    '''\n    Write a function to build a relation index from the dataset\n    '''\n    pass\ndef write_to_file(filename, contents):\n    '''\n    Write the given string to a file in a directory\n    '''\n    with open(filename, 'w') as f:\n        f.write(contents)\n    f.close()\ndef extract_sentence_vector(sentence, entity_index, relation_index, word_index, sentence_index):\n    '''\n    Write a function to extract a sentence vector\n    '''\n    return \ndef train_naive_bayes(documents, labels, feature_index, label_index):\n    '''\n    Write a function to train a naive bayes classifier\n    '''\n    pass\ndef classify(classifier, document, feature_index, label_index):\n    '''\n    Write a function to classify a document\n    '''\n    pass\ndef classify_sentence(classifier, sentence, feature_index, label_index):\n    '''\n    Write a function to classify a sentence\n    '''\n    pass\ndef get_entities(tagged_sentence):\n    '''\n    Write a function to extract entities from a sentence\n    '''\n    pass\ndef get_relations(tagged_sentence):\n    '''\n    Write a function to extract relations from a sentence\n    '''\n    pass\ndef get_words(sentence):\n    '''\n    Write a function to extract words from a sentence\n    '''\n    pass\ndef get_sentences(document):\n    '''\n    Write a function to extract sentences from a document\n    '''\n    pass\ndef get_entities_and_relations(document):\n    '''\n    Write a function to extract entities and relations from a document\n    '''\n    pass\ndef get_relation_triples(document):\n    '''\n    Write a function to extract relation triples from a document\n    '''\n    pass\ndef get_sentence_and_entities(document):\n    '''\n    Write a function to extract sentence and entities from a document\n    '''\n    pass\ndef get_entities_and_relations_and_sentence(document):\n    '''\n    Write a function to extract entities, relations, and sentence from a document\n    '''\n    pass\ndef get_entities_and_relations_and_sentence_and_words(document):\n    '''\n    Write a function to extract entities, relations, sentence, and words from a document\n    '''\n    pass\ndef get_entities_and_relations_and_sentence_and_words_and_sentence_index(document):\n    '''\n    Write a function to extract entities, relations, sentence, and words from a document\n    '''\n    pass\ndef get_entities_and_relations_and_sentence_and_words_and_sentence_index_and_words_index(document):\n    '''\n    Write a function to extract entities, relations, sentence, and words from a document\n    '''\n    pass\ndef extract_entities_and_relations_and_sentence_and_words_and_sentence_index_and_words_index(document):\n    '''\n    Write a function to extract entities, relations, sentence, and words from a document\n    '''\n    pass\ndef extract_entities_and_relations_and_sentence_and_words_and_sentence_index_and_words_index_and_words(document):\n    '''\n    Write ",
        "num_ids": 5
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    regex = re.compile(r'\\\"(.*?)\\\"')\n    matches = regex.findall(text)\n    return matches\n",
        "num_ids": 36
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    \n    items = re.findall(r'\"([^\"]*)\"', text)\n    \n    return items\n",
        "num_ids": 30
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    for i in range(len(text)):\n        if text[i] == '\"':\n            return text[i+1:len(text)-1]\n    return text\n",
        "num_ids": 44
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('[^\"]+')\n    return pattern.findall(text)\n",
        "num_ids": 26
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    regex = re.compile(r'(?<=\\\")(.*?)(?=\\\")')\n    matches = regex.findall(text)\n    return matches\n    \ndef sort_nicely(l):\n    \"\"\" Sort the given list in the way that humans expect.\n    \"\"\"\n    convert = lambda text: int(text) if text.isdigit() else text\n    alphanum_key = lambda key: [ convert(c) for c in re.split('([0-9]+)', key) ]\n    l.sort( key=alphanum_key )\n",
        "num_ids": 141
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(r'\"(.*?)\"', text)\n    return values\n",
        "num_ids": 24
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if re.search(\"\\\"\",text):\n        start_index = re.search(\"\\\"\",text).start()\n        end_index = re.search(\"\\\"\",text).end()\n        return text[start_index+1:end_index-1]\n    else:\n        return None\n",
        "num_ids": 70
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    from collections import Counter\n    count = 0\n    arr = Counter(arr)\n    for i in arr:\n        if arr[i]>1:\n            count+=arr[i]*(arr[i]-1)//2\n    return count\n",
        "num_ids": 60
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    \n    for i in xrange(0,n-1):\n        for j in xrange(i+1,n):\n            if arr[i] == arr[j]:\n                count = count + 1\n    \n    return count\n",
        "num_ids": 62
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count = count + 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count+=1\n    print count\n",
        "num_ids": 51
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    result = 0 \n    for i in range(0, n): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                result += 1\n    return result \n",
        "num_ids": 58
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n",
        "num_ids": 52
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    result = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if (arr[i]!= arr[j]):\n                result+=1\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!=arr[j]: \n                count += 1\n    print count\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    return len(arr)*(len(arr)-1)/2\n",
        "num_ids": 17
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    #Method 1\n    #count = 0\n    #for i in range(n):\n    #    for j in range(i+1,n):\n    #        if arr[i] < arr[j]:\n    #            count = count + 1\n    #return count\n    #Method 2\n    #count = 0\n    #for i in range(n):\n    #    for j in range(i+1,n):\n    #        if arr[i]!= arr[j]:\n    #            count = count + 1\n    #return count\n    #Method 3\n    #count = 0\n    #for i in range(n):\n    #    for j in range(i+1,n):\n    #        if arr[i]!= arr[j]:\n    #            count = count + 1\n    #return count\n    #Method 4\n    #count = 0\n    #for i in range(n):\n    #    for j in range(i+1,n):\n    #        if arr[i] < arr[j]:\n    #            count = count + 1\n    #return count\n    #Method 5\n    #count = 0\n    #for i in range(n):\n    #    for j in range(i+1,n):\n    #        if arr[i] < arr[j]:\n    #            count = count + 1\n    #return count\n    #Method 6\n    #count = 0\n    #for i in range(n):\n    #    for j in range(i+1,n):\n    #        if arr[i] < arr[j]:\n    #            count = count + 1\n    #return count\n    #Method 7\n    #count = 0\n    #for i in range(n):\n    #    for j in range(i+1,n):\n    #        if arr[i] > arr[j]:\n    #            count = count + 1\n    #return count\n    #Method 8\n    #count = 0\n    #for i in range(n):\n    #    for j in range(i+1,n):\n    #        if arr[i] > arr[j]:\n    #            count = count + 1\n    #return count\n    #Method 9\n    #count = 0\n    #for i in range(n):\n    #    for j in range(i+1,n):\n    #        if arr[i] > arr[j]:\n    #            count = count + 1\n    #return count\n    #Method 10\n    #count = 0\n    #for i in range(n):\n    #    for j in range(i+1,n):\n    #        if arr[i] > arr[j]:\n    #            count = count + 1\n    #return count\n    #Method 11\n    #count = 0\n    #for i in range(n):\n    #    for j in range(i+1,n):\n    #        if arr[i] == arr[j]:\n    #            count = count + 1\n    #return count\n    #Method 12\n    #count = 0\n    #for i in range(n):\n    #    for j in range(i+1,n):\n    #        if arr[i] == arr[j]:\n    #            count = count + 1\n    #return count\n    #Method 13\n    #count = 0\n    #for i in range(n):\n    #    for j in range(i+1,n):\n    #        if arr[i] == arr[j]:\n    #            count = count + 1\n    #return count\n    #Method 14\n    #count = 0\n    #for i in range(n):\n    #    for j in range(i+1,n):\n    #        if arr[i] == arr[j]:\n    #            count = count + 1\n    #return count\n    #Method 15\n    #count = 0\n    #for i in range(n):\n    #    for j in range(i+1,n):\n    #        if arr[i] == arr[j]:\n    #            count = count + 1\n    #return count\n    #Method 16\n    #count = 0\n    #for i in range(n):\n    #    for j in range(i+1,n):\n    #        if arr[i] == arr[j]:\n    #            count = count + 1\n    #return count\n    #Method 17\n    #count = 0\n    #for i in range(n):\n    #    for j in range(i+1,n):\n    #        if arr[i] == arr[j]:\n    #            count = count + 1\n    #return count\n    #Method 18\n    #count = 0\n    #for i in range(n):\n    #    for j in range(i+1,n):\n    #        if arr[i] == arr[j]:\n    #            count = count + 1\n    #return count\n    #Method 19\n    #count = 0\n    #for i in range(n):\n    #    for j in range(i+1,n):\n    #        if arr[i] == arr[j]:\n    #            count = count + 1\n    #return count\n    #Method 20\n    #count = 0\n    #for i in range(n):\n    #    for j in range(i+1,n):\n    #        if arr[i] == arr[j]:\n    #            count = count + 1\n    #return count\n    #Method 21\n    #count = 0\n    #for i in range(n):\n    #    for j in range(i+1,n):\n    #        if arr[i] == arr[j]:\n    #            count = count + 1\n    #return count\n    #Method 22\n    #count = 0\n    #for i in range(n):\n    #    for j in range(i+1,n):\n    #        if arr[i] == arr[j]:\n    #            count = count + 1\n    #return count\n    #Method 23\n    #count = 0\n    #for i in range(n):\n    #    for j in range(i+1,n):\n    #        if arr[i] == arr[j]:\n    #            count = count + 1\n    #return count\n    #Method 24\n    #count = 0\n    #for i in range(n):\n    #    for j in range(i+1,n):\n    #        if arr[i] == arr[j]:\n    #            count = count + 1\n    #return count\n    #Method 25\n    #count = 0\n    #for i in range(n):\n    #    for j in range(i+1,n):\n    #        if arr[i] == arr[j]:\n    #            count = count + 1\n    #return count\n    #Method 26\n    #count = 0\n    #for i in range(n):\n    #    for j in range(i+1,n):\n    #        if arr[i] == arr[j]:\n    #            count = count + 1\n    #return count\n    #Method 27\n    #count = 0\n    #for i in range(n):\n    #    for j in range(i+1,n):\n    #        if arr[i] == arr[j]:\n    #            count = count + 1\n    #return count\n    #Method 28\n    #count = 0\n    #for i in range(n):\n    #    for j in range(i+1,n):\n    #        if arr[i] == arr[j]:\n    #            count = count + 1\n    #return count\n    #Method 29\n    #count = 0\n    #for i in range(n):\n    #    for j in range(i+1,n):\n    #        if arr[i] == arr[j]:\n    #            count = count + 1\n    #return count\n    #Method 30\n    #count = 0\n    #for i in range(n):\n    #    for j in range(i+1,n):\n    #        if arr[i] == arr[j]:\n    #            count = count + 1\n    #return count\n    #Method 31\n    #count = 0\n    #for i in range(n):\n    #    for j in range(i+1,n):\n    #        if arr[i] == arr[j]:\n    #            count = count + 1\n    #return count\n    #Method 32\n    #count = 0\n    #for i in rang",
        "num_ids": 2005
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n    \ndef join(word): \n    '''\n    Write a python function to join a list of characters into a string.\n    '''\n    return \"\".join(word)\n    \ndef sort(a_list): \n    '''\n    Write a python function to sort a list of strings.\n    '''\n    return sorted(a_list)\n    \ndef vowels(word): \n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    return len(re.findall('[aeiou]', word))\n    \ndef count_substring(string, sub_string): \n    '''\n    Write a python function to count the number of times a substring occurs in a string.\n    '''\n    return len(re.findall(sub_string, string))\n    \ndef frequency(string, sub_string): \n    '''\n    Write a python function to count the number of times a substring occurs in a string,\n    and return a dictionary of that frequency.\n    '''\n    frequency_dict = {}\n    for i in string.split():\n        if i == sub_string:\n            if i not in frequency_dict:\n                frequency_dict[i] = 1\n            else:\n                frequency_dict[i] += 1\n    return frequency_dict\n    \ndef index_of_substring(string, sub_string): \n    '''\n    Write a python function to find the index of a substring in a string.\n    '''\n    return string.find(sub_string)\n    \ndef reverse_string(word): \n    '''\n    Write a python function to reverse a string.\n    '''\n    return word[::-1]\n    \ndef decode_string(string): \n    '''\n    Write a python function to decode a string.\n    '''\n    new_string = \"\"\n    if string[0] == \">\":\n        for i in range(len(string)):\n            if string[i] == \">\":\n                for j in range(i + 1, len(string)):\n                    if string[j] == \">\":\n                        new_string += string[i + 1:j]\n                        break\n    else:\n        for i in range(len(string)):\n            if string[i] == \"<\":\n                for j in range(i + 1, len(string)):\n                    if string[j] == \"<\":\n                        new_string += string[i + 1:j]\n                        break\n    return new_string\n    \ndef print_string(word): \n    '''\n    Write a python function to print a string.\n    '''\n    print word\n    \ndef print_float(f): \n    '''\n    Write a python function to print floating point number.\n    '''\n    print \"{:.2f}\".format(f)\n    \ndef print_integer(i): \n    '''\n    Write a python function to print an integer.\n    '''\n    print i\n    \ndef print_list(a_list): \n    '''\n    Write a python function to print a list.\n    '''\n    for i in a_list:\n        print i\n    \ndef print_dictionary(a_dict): \n    '''\n    Write a python function to print a dictionary.\n    '''\n    for key, value in a_dict.iteritems():\n        print key, value\n        \ndef print_tuples(a_tuple): \n    '''\n    Write a python function to print a tuple.\n    '''\n    for i in a_tuple:\n        print i\n    \ndef print_set(a_set): \n    '''\n    Write a python function to print a set.\n    '''\n    for i in a_set:\n        print i\n    \ndef print_boolean(boolean): \n    '''\n    Write a python function to print a boolean.\n    '''\n    print boolean\n    \ndef print_array(a_array): \n    '''\n    Write a python function to print an array.\n    '''\n    for i in a_array:\n        print i\n    \ndef print_string_array(a_string): \n    '''\n    Write a python function to print a string array.\n    '''\n    for i in a_string:\n        print i\n        \ndef print_string_list(a_string): \n    '''\n    Write a python function to print a string list.\n    '''\n    for i in a_string:\n        print i\n    \ndef print_integer_array(a_integer): \n    '''\n    Write a python function to print an integer array.\n    '''\n    for i in a_integer:\n        print i\n    \ndef print_integer_list(a_list): \n    '''\n    Write a python function to print an integer list.\n    '''\n    for i in a_list:\n        print i\n    \ndef print_float_array(a_float): \n    '''\n    Write a python function to print an float array.\n    '''\n    for i in a_float:\n        print i\n    \ndef print_float_list(a_list): \n    '''\n    Write a python function to print an float list.\n    '''\n    for i in a_list:\n        print i\n    \ndef print_boolean_array(a_boolean): \n    '''\n    Write a python function to print a boolean array.\n    '''\n    for i in a_boolean:\n        print i\n    \ndef print_boolean_list(a_list): \n    '''\n    Write a python function to print a boolean list.\n    '''\n    for i in a_list:\n        print i\n    \ndef print_string_list_array(a_string): \n    '''\n    Write a python function to print a string list array.\n    '''\n    for i in a_string:\n        print i\n    \ndef print_string_list_list(a_list): \n    '''\n    Write a python function to print a string list list.\n    '''\n    for i in a_list:\n        print i\n    \ndef print_integer_list_array(a_integer): \n    '''\n    Write a python function to print an integer list array.\n    '''\n    for i in a_integer:\n        print i\n    \ndef print_integer_list_list(a_list): \n    '''\n    Write a python function to print an integer list list.\n    '''\n    for i in a_list:\n        print i\n    \ndef print_float_list_array(a_float): \n    '''\n    Write a python function to print an float list array.\n    '''\n    for i in a_float:\n        print i\n    \ndef print_float_list_list(a_list): \n    '''\n    Write a python function to print an float list list.\n    '''\n    for i in a_list:\n        print i\n    \ndef print_boolean_list_array(a_boolean): \n    '''\n    Write a python function to print a boolean list array.\n    '''\n    for i in a_boolean:\n        print i\n    \ndef print_boolean_list_list(a_list): \n    '''\n    Write a python function to print a boolean list list.\n    '''\n    for i in a_list:\n        print i\n    \ndef print_string_list(a_string): \n    '''\n    Write a python function to print a string list.\n    '''\n    for i in a_string:\n        print i\n    \ndef print_integer_list(a_list): \n    '''\n    Write a python function to print an integer list.\n    '''\n    for i in a_list:\n        print i\n    \ndef print_float_list(a_list): \n    '''\n    Write a python function to print a float list.\n    '''\n    for i in a_list:\n        print i\n    \ndef print_boolean_list(a_list): \n    '''\n    Write a python function to print a boolean list.\n    '''\n    for i in a_list:\n        print i\n    \ndef print_string_list_list(a_list): \n    '''\n    Write a python function to print a string list list.\n    '",
        "num_ids": 17
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n    #return [x for x in word]\n",
        "num_ids": 23
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    split_word = list(word)\n    return split_word\n",
        "num_ids": 18
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n    \ndef histogram(text):\n    '''\n    Write a python function to count the number of characters in a string\n    '''\n    d = dict() \n    for c in text:\n        if c not in d:\n            d[c] = 1\n        else:\n            d[c] += 1\n    return d\n    \ndef increment(d): \n    '''\n    Write a python function to increment each value in a dictionary\n    '''\n    for c in d:\n        d[c] += 1\n    return d\n    \ndef increment_char(c, d): \n    '''\n    Write a python function to increment each value in a dictionary by 1\n    '''\n    if c not in d:\n        d[c] = 1\n    else:\n        d[c] += 1\n    return d\n    \ndef count_words(text): \n    '''\n    Write a python function to count the number of words in a sentence. \n    '''\n    return len(text.split()) \n    \ndef longest_word(text): \n    '''\n    Write a python function to find the longest word in a sentence.\n    '''\n    return max(text.split(), key=len) \n    \ndef is_pangram(text): \n    '''\n    Write a python function to check whether a sentence is a pangram or not\n    '''\n    return len(set(text.replace(\" \", \"\").lower())) == 26\n    \ndef is_pangram2(text):\n    '''\n    Write a python function to check whether a sentence is a pangram or not.\n    '''\n    return len(set(text.replace(\" \", \"\").lower())) == len(text)\n    \ndef rotate(text, n): \n    '''\n    Write a python function to rotate a string n times\n    '''\n    return text[n:] + text[:n]\n    \ndef is_pangram3(text): \n    '''\n    Write a python function to check whether a string is a pangram or not.\n    '''\n    return set(text.lower()) <= set(\"abcdefghijklmnopqrstuvwxyz\")\n    \ndef is_pangram4(text): \n    '''\n    Write a python function to check whether a string is a pangram or not.\n    '''\n    return set(text.lower()) <= set(string.ascii_lowercase)\n    \ndef is_pangram5(text): \n    '''\n    Write a python function to check whether a string is a pangram or not.\n    '''\n    return set(text.lower()) <= set(string.ascii_lowercase)\n    \ndef is_pangram6(text): \n    '''\n    Write a python function to check whether a string is a pangram or not.\n    '''\n    return set(text.lower()) <= set(string.ascii_lowercase)\n    \ndef is_pangram7(text): \n    '''\n    Write a python function to check whether a string is a pangram or not.\n    '''\n    return set(text.lower()) <= set(string.ascii_lowercase)\n    \ndef is_pangram8(text): \n    '''\n    Write a python function to check whether a string is a pangram or not.\n    '''\n    return set(text.lower()) <= set(string.ascii_lowercase)\n    \ndef is_pangram9(text): \n    '''\n    Write a python function to check whether a string is a pangram or not.\n    '''\n    return set(text.lower()) <= set(string.ascii_lowercase)\n    \ndef is_pangram10(text): \n    '''\n    Write a python function to check whether a string is a pangram or not.\n    '''\n    return set(text.lower()) <= set(string.ascii_lowercase)\n    \ndef is_pangram11(text): \n    '''\n    Write a python function to check whether a string is a pangram or not.\n    '''\n    return set(text.lower()) <= set(string.ascii_lowercase)\n    \ndef is_pangram12(text): \n    '''\n    Write a python function to check whether a string is a pangram or not.\n    '''\n    return set(text.lower()) <= set(string.ascii_lowercase)\n    \ndef is_pangram13(text): \n    '''\n    Write a python function to check whether a string is a pangram or not.\n    '''\n    return set(text.lower()) <= set(string.ascii_lowercase)\n    \ndef is_pangram14(text): \n    '''\n    Write a python function to check whether a string is a pangram or not.\n    '''\n    return set(text.lower()) <= set(string.ascii_lowercase)\n    \ndef is_pangram15(text): \n    '''\n    Write a python function to check whether a string is a pangram or not.\n    '''\n    return set(text.lower()) <= set(string.ascii_lowercase)\n    \ndef is_pangram16(text): \n    '''\n    Write a python function to check whether a string is a pangram or not.\n    '''\n    return set(text.lower()) <= set(string.ascii_lowercase)\n    \ndef is_pangram17(text): \n    '''\n    Write a python function to check whether a string is a pangram or not.\n    '''\n    return set(text.lower()) <= set(string.ascii_lowercase)\n    \ndef is_pangram18(text): \n    '''\n    Write a python function to check whether a string is a pangram or not.\n    '''\n    return set(text.lower()) <= set(string.ascii_lowercase)\n    \ndef is_pangram19(text): \n    '''\n    Write a python function to check whether a string is a pangram or not.\n    '''\n    return set(text.lower()) <= set(string.ascii_lowercase)\n    \ndef is_pangram20(text): \n    '''\n    Write a python function to check whether a string is a pangram or not.\n    '''\n    return set(text.lower()) <= set(string.ascii_lowercase)\n    \ndef is_pangram21(text): \n    '''\n    Write a python function to check whether a string is a pangram or not.\n    '''\n    return set(text.lower()) <= set(string.ascii_lowercase)\n    \ndef is_pangram22(text): \n    '''\n    Write a python function to check whether a string is a pangram or not.\n    '''\n    return set(text.lower()) <= set(string.ascii_lowercase)\n    \ndef is_pangram23(text): \n    '''\n    Write a python function to check whether a string is a pangram or not.\n    '''\n    return set(text.lower()) <= set(string.ascii_lowercase)\n    \ndef is_pangram24(text): \n    '''\n    Write a python function to check whether a string is a pangram or not.\n    '''\n    return set(text.lower()) <= set(string.ascii_lowercase)\n    \ndef is_pangram25(text): \n    '''\n    Write a python function to check whether a string is a pangram or not.\n    '''\n    return set(text.lower()) <= set(string.ascii_lowercase)\n    \ndef is_pangram26(text): \n    '''\n    Write a python function to check whether a string is a pangram or not.\n    '''\n    return set(text.lower()) <= set(string.ascii_lowercase)\n    \ndef is_pangram27(text): \n    '''\n    Write a python function to check whether a string is a pangram or not.\n    '''\n    return set(text.lower()) <= set(string.ascii_lowercase)",
        "num_ids": 22
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "num_ids": 9
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    assert type(n) == int\n    assert n >= 0\n    return sum([int(d) for d in str(n)])\n",
        "num_ids": 34
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 0\n    return n % 10 + sum_digits(n // 10)\n",
        "num_ids": 29
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        raise ValueError\n    elif n == 0:\n        return 0\n    else:\n        return sum_digits(n / 10) + n % 10\n",
        "num_ids": 46
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return None\n    else:\n        return n % 10 + sum_digits(n // 10)\n",
        "num_ids": 33
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(map(int,str(n)))\n",
        "num_ids": 15
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(x) for x in str(n)])\n",
        "num_ids": 19
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    result = 0\n    while n > 0:\n        result += n % 10\n        n /= 10\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(c) for c in str(n)])\n",
        "num_ids": 19
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    digit_list = []\n    str_n = str(n)\n    for i in str_n:\n        digit_list.append(int(i))\n    digit_sum = 0\n    for i in digit_list:\n        digit_sum += i\n    return digit_sum\n",
        "num_ids": 69
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\n",
        "num_ids": 29
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i]>list1[i+1]:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    \n    return all(i < j for i, j in zip(list1, list1[1:]))\n",
        "num_ids": 28
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Check if list is empty\n    if list1 == []:\n        return True\n    # Compare the first element with the rest of the elements\n    for i in xrange(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\n",
        "num_ids": 75
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return True\n    if len(list1) == 1:\n        return True\n    if list1[0] <= list1[1]:\n        return issort_list(list1[1:])\n    else:\n        return False\n",
        "num_ids": 68
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    isSorted = True\n    i = 1\n    while isSorted and i < len(list1):\n        if list1[i] < list1[i-1]:\n            isSorted = False\n        i += 1\n    return isSorted\n",
        "num_ids": 62
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return (all(list1[i] <= list1[i+1] for i in range(len(list1)-1)) or\n            all(list1[i] >= list1[i+1] for i in range(len(list1)-1)))\n",
        "num_ids": 63
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)\n",
        "num_ids": 13
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # return true if list is sorted and false otherwise\n    if len(list1) < 2:\n        return True\n    else:\n        if list1[0] < list1[1]:\n            return issort_list(list1[1:])\n        else:\n            return False\n",
        "num_ids": 69
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in xrange(length)]\n",
        "num_ids": 16
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for x in range(length):\n        empty_list.append({})\n    return empty_list\n",
        "num_ids": 33
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in xrange(length)]\n    \ndef clone_dict(d):\n    '''\n    Write a function to clone a dictionary.\n    '''\n    return copy.copy(d)\n",
        "num_ids": 11
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in xrange(length)]\n",
        "num_ids": 16
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [dict() for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n",
        "num_ids": 33
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list2=[]\n    for i in list1:\n        list2.append(sorted(i))\n    return list2\n",
        "num_ids": 33
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for list1 in list1:\n        list1.sort()\n    return list1\n",
        "num_ids": 23
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list2 = []\n    for sublist in list1:\n        list2.append(sorted(sublist))\n    return list2\n",
        "num_ids": 35
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key = lambda sublist:sublist[1])\n",
        "num_ids": 21
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n        print(list1[i])\n",
        "num_ids": 33
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(list1[i]) for i in range(len(list1))]\n",
        "num_ids": 25
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    '''\n    for i in range(len(list1)):\n        #print \"I \", i\n        for j in range(len(list1[i])):\n            print list1[i][j]\n        print \"j \", j\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = (list1[i][j],j)\n            #print list1[i][j]\n        #print list1[i]\n        #print list1[i][1]\n    for i in range(len(list1)):\n        list1[i].sort()\n        #print list1[i]\n    #print \"list1 \", list1\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            #print list1[i][j]\n            list1[i][j] = list1[i][j][0]\n    print \"Sorted \", list1\n",
        "num_ids": 189
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        list2.append(sorted(list1[i]))\n    return list2\n",
        "num_ids": 42
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list_len = len(list1)\n    list_1 = list_len\n    list_2 = [list() for i in range(list_len)]\n    list_3 = [list() for i in range(list_len)]\n    list_4 = [list() for i in range(list_len)]\n",
        "num_ids": 76
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n",
        "num_ids": 29
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    temp = []\n    unique_nums = []\n    for num in nums:\n        if num not in temp:\n            temp.append(num)\n            unique_nums.append(num)\n    print 'Unique numbers in the given list: ', unique_nums\n",
        "num_ids": 66
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    for i in range(len(nums)):\n        nums[i] = sorted(nums[i])\n    # return sorted(set(nums))\n    return [list(set(nums[i]))[0] for i in range(len(nums))]\n",
        "num_ids": 69
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique = []\n    for i in nums:\n        if i not in unique:\n            unique.append(i)\n    return unique\n",
        "num_ids": 35
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    final_list = []\n    for i in range(len(nums)):\n        if nums[i] not in final_list:\n            final_list.append(nums[i])\n    return final_list\n",
        "num_ids": 55
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    #first we need to sort the numbers\n    nums.sort()\n    #lets create a set so we can check for the dupes\n    dupes = set()\n    #lets loop through the nums list and check for the dupes\n    for i in range(0,len(nums)):\n        if nums[i] in dupes:\n            #we have found a duplicate, so we can remove it\n            nums.pop(i)\n            #we also need to update the dupes set so we know we have found a dupes\n            dupes.remove(nums[i])\n        else:\n            #we don't have a duplicate, so we can add it to the set\n            dupes.add(nums[i])\n    #now that we have removed dupes from the list, we can print it\n    return nums\n",
        "num_ids": 197
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    l = []\n    for i in nums:\n        if i not in l:\n            l.append(i)\n    print l\n",
        "num_ids": 35
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return [x for i, x in enumerate(nums) if nums.count(x) == 1]\n",
        "num_ids": 29
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for i in nums:\n        if i not in unique_nums:\n            unique_nums.append(i)\n    print(unique_nums)\n    \ntwo_unique_nums([2, 3, 5, 3, 2, 3, 6, 9, 3])",
        "num_ids": 76
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return set(nums)\n",
        "num_ids": 10
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return list(set(nums))\n",
        "num_ids": 12
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return reduce(lambda x,y: x*y, set(list_data))\n",
        "num_ids": 22
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    temp = 1\n    for i in list_data:\n        temp *= i\n    return temp\n",
        "num_ids": 26
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    num_list = list(set(list_data))\n    result = 1\n    for i in num_list:\n        result = result * i\n    return result\n",
        "num_ids": 41
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    dict_data = {}\n    for data in list_data:\n        dict_data[data] = 1\n",
        "num_ids": 28
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    import itertools\n    return (reduce(lambda x,y:x*y, x))\n",
        "num_ids": 26
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = sorted(list_data)\n    product = 1\n    for i in list_data:\n        if list_data.count(i) == 1:\n            product *= i\n    return product\n",
        "num_ids": 52
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return reduce(operator.mul, set(list_data))\n",
        "num_ids": 18
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    product = 1\n    for i in unique_list:\n        product = product*i\n    return product\n",
        "num_ids": 63
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    dic = {}\n    for item in list_data:\n        if item in dic:\n            dic[item] += 1\n        else:\n            dic[item] = 1\n    return dic\n",
        "num_ids": 52
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # empty dictionary\n    unique_dict = {}\n    # loop over the list to get unique element\n    for i in list_data:\n        if i not in unique_dict:\n            unique_dict[i] = 1\n    # loop over the unique dictionary and calculate product\n    for j in unique_dict:\n        unique_dict[j] = unique_dict[j] * j\n    # return the product\n    return unique_dict\n",
        "num_ids": 103
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*(r+h)\n",
        "num_ids": 16
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    A = (pi*r**2) + (2*pi*r*h) + (pi*h**2)\n    print \"The surface area of a cylinder is: \", A\n",
        "num_ids": 45
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Define radius and height\n    r = float(r)\n    h = float(h)\n    # Calculate the surface area of the cylinder\n    s = 2 * math.pi * r * (r + math.sqrt(r*r + h*h))\n    # Return surface area of the cylinder\n    return s\n",
        "num_ids": 78
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14\n    return (2 * pi * r * (r + h) + 2 * pi * r ** 2)\n",
        "num_ids": 33
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfarea = pi*(r**2)*2 + 2*pi*r*h\n    print surfarea\n",
        "num_ids": 29
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159265\n    A = 2 * pi * r * h\n    return A\n",
        "num_ids": 26
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    sa = 2 * math.pi * r * h\n    return sa\n",
        "num_ids": 19
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    SA=2*pi*r*(r+h)\n    return SA\n",
        "num_ids": 21
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import numpy as np\n    area = np.pi * (r**2) + 2 * np.pi * r * h + 2 * np.pi * (r**2)\n    return area\n",
        "num_ids": 48
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    srf_are = (2 * math.pi * r * h) + (2 * math.pi * r**2)\n    return srf_are\n",
        "num_ids": 38
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    sub_array = False\n    for i in range(len(B)):\n        if B[i] == A[0]:\n            k = i\n            for j in range(1,len(A)):\n                if A[j] == B[k]:\n                    k = k+1\n                else:\n                    break\n            if k == len(A):\n                sub_array = True\n                break\n    return sub_array\n",
        "num_ids": 103
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    l1 = len(A)\n    l2 = len(B)\n    if l1 > l2:\n        return False\n    for i in range(l2):\n        if A[i] == B[i]:\n            pass\n        else:\n            return False\n    return True\n",
        "num_ids": 70
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)<len(B):\n        return False\n    elif len(A)==len(B):\n        return all(A[i] in B for i in range(len(A)))\n    else:\n        return any(B[i] in A[i+1:] for i in range(len(B)))\n",
        "num_ids": 80
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if (len(A)>len(B)):\n        return False\n    else:\n        for i in range(0,len(B)):\n            if A[i]==B[i]:\n                pass\n            else:\n                return False\n        return True\n",
        "num_ids": 65
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    #if A is empty then the answer is True\n    if A==[]:\n        return True\n    #If B is empty then the answer is false\n    if B==[]:\n        return False\n    #The list B is the sub list of A\n    if len(B)>=len(A):\n        return False\n    #The first element of the list A must equal the first element of the list B\n    if A[0]==B[0]:\n        return is_Sub_Array(A[1:],B[1:])\n    #If the first element of the list A and the first element of the list B do not match, then the answer is false\n    else:\n        return False\n",
        "num_ids": 163
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A == B:\n        return True\n    elif B in A:\n        return True\n    return False\ndef is_Sub_List(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A == B:\n        return True\n    for i in range(len(B)):\n        if A[i] == B[i]:\n            continue\n        else:\n            return False\n    return True\ndef is_Sub_List_2(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A == B:\n        return True\n    elif B in A:\n        return True\n    for i in range(len(B)):\n        if A[i] == B[i]:\n            continue\n        else:\n            return False\n    return True\ndef is_Sub_List_3(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A == B:\n        return True\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)):\n        if A[i] == B[i]:\n            continue\n        else:\n            return False\n    return True\ndef is_Sub_List_4(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A == B:\n        return True\n    if len(B) > len(A):\n        return False\n    if len(A) > len(B):\n        return False\n    if len(A) == len(B):\n        for i in range(len(A)):\n            if A[i] == B[i]:\n                continue\n            else:\n                return False\n        return True\n",
        "num_ids": 96
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    if len(A) > len(B): \n        return False\n    \n    for i in range(len(B)):\n        if A[i]!= B[i]: \n            break\n    else: \n        return True\n    return False\n",
        "num_ids": 65
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    s = 0\n    for i in A: \n        if i in B: \n            s+=1\n    if s == len(A):\n        return 1\n    else:\n        return 0\n",
        "num_ids": 49
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    if len(A) > len(B): \n        return False\n    \n    for i in range(len(A)):\n        if A[i]!= B[i]: \n            return False\n    return True\n    \ndef add_string(A,B): \n    '''\n    Write a python function to add two strings as characters as long as both are same length.\n    '''\n    \n    if len(A)!= len(B): \n        return False\n    \n    result = []\n    for i in range(len(A)): \n        result.append(chr(ord(A[i])+ord(B[i])))\n    \n    return ''.join(result)\n",
        "num_ids": 75
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A==[]:\n        return False\n    l=len(B)\n    if len(A)<l:\n        return False\n    while l>0:\n        if A[0:l]==B:\n            return True\n        l-=1\n    return False\n    \nprint(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4]))\nprint(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 4]))\nprint(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]))\nprint(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4]))\n",
        "num_ids": 192
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return int(str(math.factorial(n))[-1])\n",
        "num_ids": 20
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    n=factorial(n)\n    while(n>0):\n        n=n/10\n    return int(n)\n",
        "num_ids": 33
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 1:\n        return 0\n    else:\n        return int(n%10)\n",
        "num_ids": 26
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return last_Digit(n*last_Digit_Factorial(n-1))\n",
        "num_ids": 39
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n * last_Digit_Factorial(n - 1)\n",
        "num_ids": 34
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    factorial = 1\n    while n > 0:\n        factorial = factorial * n\n        n = n - 1\n    return factorial % 10\n",
        "num_ids": 40
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    i = 5\n    while n/i:\n        n /= i\n        i *= 5\n    return n\n",
        "num_ids": 30
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0:\n        factorial = factorial * n\n        n = n - 1\n    return factorial\n",
        "num_ids": 36
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    i=5\n    factorial=1\n    while(i<=n):\n        factorial=factorial*i\n        i=i+1\n    return factorial%10\n",
        "num_ids": 45
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 10\n",
        "num_ids": 8
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [a+b+c for a,b,c in zip(list1, list2, list3)]\n",
        "num_ids": 29
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] + list2[i] + list3[i] for i in range(len(list1))]\n",
        "num_ids": 34
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n",
        "num_ids": 57
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list_final=[]\n    for i in range(len(list1)):\n        list_final.append(list1[i])\n        list_final.append(list2[i])\n        list_final.append(list3[i])\n    return list_final\n",
        "num_ids": 67
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list_of_lists = [list1,list2,list3]\n    result = []\n    for i in range(len(list_of_lists[0])):\n        result.extend([list_of_lists[0][i],list_of_lists[1][i],list_of_lists[2][i]])\n    return result\n",
        "num_ids": 85
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Your Code Here\n    return None\n",
        "num_ids": 12
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [x for x in zip(list1, list2, list3)]\n",
        "num_ids": 21
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if not len(list1) == len(list2) == len(list3):\n        raise ValueError('list lengths must be the same!')\n",
        "num_ids": 37
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list1 = list1[:]\n    list2 = list2[:]\n    list3 = list3[:]\n    assert len(list1) == len(list2) == len(list3)\n    return [list1[i]+list2[i]+list3[i] for i in range(len(list1))]\n",
        "num_ids": 79
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    l = []\n    for i in range(len(list1)):\n        l.append(list1[i])\n        l.append(list2[i])\n        l.append(list3[i])\n    return l\n",
        "num_ids": 57
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if test_tup1 == test_tup2:\n        return []\n    else:\n        return list(set(test_tup1).symmetric_difference(test_tup2))\n",
        "num_ids": 51
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    res = []\n    if len(test_tup1) == len(test_tup2):\n        for i in range(0, len(test_tup1)):\n            if test_tup1[i]!= test_tup2[i]:\n                res.append(test_tup1[i])\n                res.append(test_tup2[i])\n    return res\n",
        "num_ids": 98
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # find the indices of matching elements\n    indices1 = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            indices1.append(i)\n    # find the indices of dissimilar elements\n    indices2 = []\n    for i in range(len(test_tup1)):\n        if i not in indices1:\n            indices2.append(i)\n    # return the dissimilar elements\n    return [test_tup1[x] for x in indices2]\n",
        "num_ids": 142
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return tuple(a for a in test_tup1 if a not in test_tup2)\n",
        "num_ids": 26
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    \n    return [x for x in test_tup1 if x not in test_tup2] + [x for x in test_tup2 if x not in test_tup1]\n    \n",
        "num_ids": 50
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elems = []\n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        if elem1!= elem2:\n            dissimilar_elems.append(elem1)\n",
        "num_ids": 64
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_ele = []\n    for ele1, ele2 in zip(test_tup1, test_tup2):\n        if ele1!= ele2:\n            dissimilar_ele.append(ele1)\n",
        "num_ids": 57
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    difference_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            difference_list.append(test_tup1[i])\n    return tuple(difference_list)\n",
        "num_ids": 74
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    #if len(test_tup1)!= len(test_tup2):\n    #    print \"Tuples are not same length\"\n    #    return\n    result = []\n    for i in xrange(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            result.append(test_tup1[i])\n    return result\n",
        "num_ids": 102
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = set(test_tup1) ^ set(test_tup2)\n    return dissimilar\n",
        "num_ids": 30
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple([x for x in test_tuple if even_fnc(x)])\n",
        "num_ids": 24
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for ele in test_tuple:\n        if type(ele) == tuple:\n            even_ele(ele, even_fnc)\n        else:\n            if even_fnc(ele):\n                return tuple([ele])\n    return test_tuple\n",
        "num_ids": 63
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, (tuple, list)) and isinstance(test_tuple[0], (tuple, list)):\n        result = []\n        for item in test_tuple:\n            result.append(even_ele(item, even_fnc))\n        return tuple(result)\n    return even_fnc(test_tuple)\n",
        "num_ids": 89
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_list = []\n    for element in test_tuple:\n        if even_fnc(element):\n            new_list.append(element)\n    return tuple(new_list)\n",
        "num_ids": 48
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return even_fnc(test_tuple)\n",
        "num_ids": 15
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple([i for i in test_tuple if i % 2 == even_fnc(i)])\n",
        "num_ids": 28
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for ele in test_tuple:\n        if isinstance(ele, tuple):\n            even_ele(ele, even_fnc)\n        else:\n            if even_fnc(ele):\n                test_tuple.remove(ele)\n    return tuple(test_tuple)\n",
        "num_ids": 70
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for sublist in test_tuple:\n        if not even_fnc(sublist):\n            del test_tuple[test_tuple.index(sublist)]\n    return test_tuple\n",
        "num_ids": 50
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, tuple):\n        return tuple([even_fnc(sub_tuple) for sub_tuple in test_tuple])\n    else:\n        return test_tuple\n",
        "num_ids": 52
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return [element for element in test_tuple if even_fnc(element)]\n",
        "num_ids": 22
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    return b*b + b*s\n",
        "num_ids": 14
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b * 4 + s * 2\n",
        "num_ids": 12
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\n",
        "num_ids": 8
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area=4*b*s \n    return area\n    \ndef triangle_area(s,b):\n    '''\n    Write a python function to find the area of a triangle with a given side and base edge.\n    '''\n    area=b*s/2\n    return area\n",
        "num_ids": 15
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (2*s*(b+s))\n",
        "num_ids": 15
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\n",
        "num_ids": 8
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s*2+b*b*2 \n",
        "num_ids": 17
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b * s*4\n",
        "num_ids": 10
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # TODO: Your Code Here\n    return b*s\n",
        "num_ids": 17
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (2*b*s) + (b*b)\n",
        "num_ids": 18
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    return False\n",
        "num_ids": 17
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if(len(dict1)==0):\n        return True\n    else:\n        return False\n    \n    \ndef my_list(list1):\n    '''\n    Write a function to check if a list is empty\n    '''\n    if(len(list1)==0):\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n",
        "num_ids": 21
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n",
        "num_ids": 12
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    return False\n    \ndef my_list(list1):\n    '''\n    Write a function to check if a list is empty\n    '''\n    if len(list1) == 0:\n        return True\n    return False\n    \ndef my_set(set1):\n    '''\n    Write a function to check if a set is empty\n    '''\n    if len(set1) == 0:\n        return True\n    return False\n    \ndef my_tuple(tuple1):\n    '''\n    Write a function to check if a tuple is empty\n    '''\n    if len(tuple1) == 0:\n        return True\n    return False\n    \ndef my_dictionary(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    return False\n    \ndef my_list_dict(list1):\n    '''\n    Write a function to check if a list of dictionaries is empty\n    '''\n    if len(list1) == 0:\n        return True\n    return False\n    \ndef my_list_set(list1):\n    '''\n    Write a function to check if a list of sets is empty\n    '''\n    if len(list1) == 0:\n        return True\n    return False\n    \ndef my_list_tuple(list1):\n    '''\n    Write a function to check if a list of tuples is empty\n    '''\n    if len(list1) == 0:\n        return True\n    return False\n    \ndef my_list_string(list1):\n    '''\n    Write a function to check if a list of strings is empty\n    '''\n    if len(list1) == 0:\n        return True\n    return False\n    \ndef my_string(string1):\n    '''\n    Write a function to check if a string is empty\n    '''\n    if len(string1) == 0:\n        return True\n    return False\n    \ndef my_dict_list(dict1):\n    '''\n    Write a function to check if a dictionary of lists is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    return False\n    \ndef my_dict_set(dict1):\n    '''\n    Write a function to check if a dictionary of sets is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    return False\n    \ndef my_dict_tuple(dict1):\n    '''\n    Write a function to check if a dictionary of tuples is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    return False\n    \ndef my_dict_string(dict1):\n    '''\n    Write a function to check if a dictionary of strings is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    return False\n    \ndef my_string_dict(string1):\n    '''\n    Write a function to check if a string is empty\n    '''\n    if len(string1) == 0:\n        return True\n    return False\n    \ndef my_list_string_dict(list1):\n    '''\n    Write a function to check if a list of strings is empty\n    '''\n    if len(list1) == 0:\n        return True\n    return False\n    \ndef my_list_string_set(list1):\n    '''\n    Write a function to check if a list of strings is empty\n    '''\n    if len(list1) == 0:\n        return True\n    return False\n    \ndef my_string_set(string1):\n    '''\n    Write a function to check if a string is empty\n    '''\n    if len(string1) == 0:\n        return True\n    return False\n    \ndef my_list_tuple_string_dict(list1):\n    '''\n    Write a function to check if a list of tuples is empty\n    '''\n    if len(list1) == 0:\n        return True\n    return False\n    \ndef my_list_tuple_string_set(list1):\n    '''\n    Write a function to check if a list of tuples is empty\n    '''\n    if len(list1) == 0:\n        return True\n    return False\n    \ndef my_tuple_string_dict(tuple1):\n    '''\n    Write a function to check if a tuple is empty\n    '''\n    if len(tuple1) == 0:\n        return True\n    return False\n    \ndef my_tuple_string_set(tuple1):\n    '''\n    Write a function to check if a tuple is empty\n    '''\n    if len(tuple1) == 0:\n        return True\n    return False\n    \ndef my_list_tuple_string_set(list1):\n    '''\n    Write a function to check if a list of tuples is empty\n    '''\n    if len(list1) == 0:\n        return True\n    return False\n    \ndef my_list_tuple_dict(list1):\n    '''\n    Write a function to check if a list of tuples is empty\n    '''\n    if len(list1) == 0:\n        return True\n    return False\n    \ndef my_list_tuple_set(list1):\n    '''\n    Write a function to check if a list of tuples is empty\n    '''\n    if len(list1) == 0:\n        return True\n    return False\n    \ndef my_list_tuple_string(list1):\n    '''\n    Write a function to check if a list of tuples is empty\n    '''\n    if len(list1) == 0:\n        return True\n    return False\n    \ndef my_string_tuple_dict(string1):\n    '''\n    Write a function to check if a tuple of dictionaries is empty\n    '''\n    if len(string1) == 0:\n        return True\n    return False\n    \ndef my_string_tuple_set(string1):\n    '''\n    Write a function to check if a tuple of sets is empty\n    '''\n    if len(string1) == 0:\n        return True\n    return False\n    \ndef my_string_tuple_string(string1):\n    '''\n    Write a function to check if a tuple of strings is empty\n    '''\n    if len(string1) == 0:\n        return True\n    return False\n    \ndef my_string_list_dict(string1):\n    '''\n    Write a function to check if a string of dictionaries is empty\n    '''\n    if len(string1) == 0:\n        return True\n    return False\n    \ndef my_string_list_set(string1):\n    '''\n    Write a function to check if a string of sets is empty\n    '''\n    if len(string1) == 0:\n        return True\n    return False\n    \ndef my_string_list_string(string1):\n    '''\n    Write a function to check if a string of strings is empty\n    '''\n    if len(string1) == 0:\n        return True\n    return False\n    \ndef my_list_string_tuple_dict(list1):\n    '''\n    Write a function to check if a list of strings is empty\n    '''\n    if len(list1) == 0:\n        return True\n    return False\n    \ndef my_list_string_tuple_set(list1):\n    '''\n    Write a function to check if a list of strings is empty\n    '''\n    if len(list1) == 0:\n        return True\n    return False\n    \ndef my_list_string_tuple_string(list1):\n    '''\n    Write a function to check if a list of strings is empty\n    '''\n    if len(list1) == 0:\n        return True\n    return False\n    \ndef my_list_dict(list1):\n    '''\n    Write a function to check if a list is empty\n    '''\n    if len(list1) == 0:\n        return True\n    return False\n    \ndef my_list_set(list1):\n    '''\n    Write a function to check if a list is empty\n    '''\n    if len(list1) == 0:\n        return True\n    return False\n    \nde",
        "num_ids": 24
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return not bool(dict1)\n",
        "num_ids": 11
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    else:\n        return (2 * (2 * num - 1)) / (num - 1)\n",
        "num_ids": 48
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return int(factorial(2*num) / (factorial(num) * factorial(num + 1)))\n",
        "num_ids": 44
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return catalan_number(num - 1) * (num + 1)\n",
        "num_ids": 35
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 0:\n        return 1\n    else:\n        return (num * catalan_number(num - 1)) // (num + 1)\n",
        "num_ids": 38
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 0:\n        return 1\n    if num == 1:\n        return 1\n    return (4 * ((2 * num) - 1)) / (num + 2)\n",
        "num_ids": 44
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return catalan_number(num - 1) + 2 * catalan_number(num - 2)\n    \ndef main():\n    print catalan_number(10)\n    \nif __name__ == \"__main__\":\n    main(",
        "num_ids": 73
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    if num == 1:\n        return 1\n    return catalan_number(num-1) + catalan_number(num-2)\n",
        "num_ids": 46
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    else:\n        return sum(catalan_number(num-i-1) * (4*i-2) for i in range(1, num))\n",
        "num_ids": 50
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    else:\n        return 2 * catalan_number(num - 1) + catalan_number(num - 2)\n",
        "num_ids": 41
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num < 0:\n        return 0\n    else:\n        n = (2*num) + 1\n        return catalan_number(num - 1) + n * catalan_number(num)\n",
        "num_ids": 62
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = 'ly$'\n    regex = re.compile(pattern)\n    match = regex.search(text)\n    if match:\n        print match.start()\n        print match.end()\n    else:\n        print -1\n        print -1\n",
        "num_ids": 65
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = r'\\bly\\b[\\s]+[a-z]\\b'\n    pattern = re.compile(regex)\n    match = re.search(pattern, text)\n    if match:\n        print \"First adverb is :\", match.group()\n    else:\n        print \"No adverb found\"\n",
        "num_ids": 81
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    search = re.search(r'\\w+ly',text)\n    if search:\n        return (search.span(),search.group())\n    else:\n        return ('No matches found')\n",
        "num_ids": 48
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    ly_lst = []\n    ly = re.findall(r'ly$', text)\n    for i in range(len(ly)):\n        ly_lst.append((ly[i][0], i))\n    return ly_lst\n    # return re.findall(r'ly$', text)\n    # return re.findall(r'ly$', text)\ndef my_solution(text):\n    '''\n    write a function that matches all the adverbs in a given sentence with the lemma of the verb. \n    '''\n    #text = input(\"Enter a text: \")\n    result = []\n    ly_lst = find_adverbs(text)\n    #print(ly_lst)\n    for i in range(len(ly_lst)):\n        result.append(ly_lst[i][0])\n    return result\n    # for i in range(len(ly_lst)):\n    #     print(ly_lst[i])\n    # return result\n    #return re.findall(r'ly$', text)\ndef get_index(lst, word):\n    '''\n    Write a function to get the index of a word in a list.\n    '''\n    #index = []\n    #for i in range(len(lst)):\n    #    if lst[i] == word:\n    #        index.append(i)\n    #return index\n    #return re.findall(r'ly$', text)\n    return lst.index(word)\n    #for i in range(len(lst)):\n    #    if lst[i] == word:\n    #        index.append(i)\n    #return index\ndef get_adverb(word, pos):\n    '''\n    Write a function to get the adverb ending with ly and its pos.\n    '''\n    #verb = input(\"Enter a verb: \")\n    #pos = input(\"Enter a part of speech: \")\n    #print(pos)\n    #print(word)\n    #print(pos[0])\n    #adverb = []\n    #for i in range(len(pos)):\n    #    if pos[i] == word:\n    #        adverb.append(verb[i])\n    #return adverb\n    #return re.findall(r'ly$', text)\n    #return pos[0]\n    #if pos[0] == word:\n    #    return verb[0]\n    return pos[0]\n    #return pos[0]\n    #return re.findall(r'ly$', text)\n    #return re.findall(r'ly$', text)\ndef match_adverb(verb, adverb):\n    '''\n    Write a function to match the adverb with a verb.\n    '''\n    #verb = input(\"Enter a verb: \")\n    #adverb = input(\"Enter a adverb: \")\n    #print(verb)\n    #print(adverb)\n    #return verb[0] == adverb\n    #return re.findall(r'ly$', text)\n    #return re.findall(r'ly$', text)\n    #return re.findall(r'ly$', text)\n    #return re.findall(r'ly$', text)\n    #return re.findall(r'ly$', text)\n    return verb[0] == adverb\n    #return re.findall(r'ly$', text)\ndef get_verb(verb):\n    '''\n    Write a function to get the lemma of the verb.\n    '''\n    #verb = input(\"Enter a verb: \")\n    #print(verb)\n    #return re.findall(r'ly$', text)\n    return verb[0]\n    #return re.findall(r'ly$', text)\n    #return re.findall(r'ly$', text)\n    #return re.findall(r'ly$', text)\n    #return re.findall(r'ly$', text)\ndef get_pos(verb):\n    '''\n    Write a function to get the pos of a verb.\n    '''\n    #verb = input(\"Enter a verb: \")\n    #print(verb)\n    #return re.findall(r'ly$', text)\n    return verb[1]\n    #return re.findall(r'ly$', text)\n    #return re.findall(r'ly$', text)\n    #return re.findall(r'ly$', text)\n    #return re.findall(r'ly$', text)\ndef find_all_verbs(text):\n    '''\n    Write a function to get all the verbs in a given sentence.\n    '''\n    #text = input(\"Enter a text: \")\n    #print(text)\n    #return re.findall(r'ly$', text)\n    return re.findall(r'ly$', text)\n    #return re.findall(r'ly$', text)\n    #return re.findall(r'ly$', text)\n    #return re.findall(r'ly$', text)\n    #return re.findall(r'ly$', text)\ndef get_sentence_pos(text):\n    '''\n    Write a function to get the pos of a verb.\n    '''\n    #text = input(\"Enter a text: \")\n    #print(text)\n    #return re.findall(r'ly$', text)\n    return re.findall(r'\\w', text)\n    #return re.findall(r'ly$', text)\n    #return re.findall(r'ly$', text)\n    #return re.findall(r'ly$', text)\n    #return re.findall(r'ly$', text)\ndef get_verbs(text):\n    '''\n    Write a function to get the verbs in a given sentence.\n    '''\n    #text = input(\"Enter a text: \")\n    #print(text)\n    #return re.findall(r'ly$', text)\n    return re.findall(r'\\w', text)\n    #return re.findall(r'ly$', text)\n    #return re.findall(r'ly$', text)\n    #return re.findall(r'ly$', text)\n    #return re.findall(r'ly$', text)\ndef get_adverb(verb):\n    '''\n    Write a function to get the adverb of a verb.\n    '''\n    #verb = input(\"Enter a verb: \")\n    #print(verb)\n    #return re.findall(r'ly$', text)\n    return verb[0]\n    #return re.findall(r'ly$', text)\n    #return re.findall(r'ly$', text)\n    #return re.findall(r'ly$', text)\n    #return re.findall(r'ly$', text)\ndef get_index(lst, word):\n    '''\n    Write a function to get the index of a word in a list.\n    '''\n    #index = []\n    #for i in range(len(lst)):\n    #    if lst[i] == word:\n    #        index.append(i)\n    #return index\n    #return re.findall(r'ly$', text)\n    return lst.index(word)\n    #for i in range(len(lst)):\n    #    if lst[i] == word:\n    #        index.append(i)\n    #return index\ndef get_adverb(word, pos):\n    '''\n    Write a function to get the adverb ending with ly and its pos.\n    '''\n    #verb = input(\"Enter a verb: \")\n    #pos = input(\"Enter a part of speech: \")\n    #print(pos)\n    #print(word)\n    #print(pos[0])\n    #adverb = []\n    #for i in range(len(pos)):\n    #    if pos[i] == word:\n    #        adverb.append(verb[i])\n    #return adverb\n    #return re.findall(r'ly$', text)\n    #return re.findall(r'ly$', text)",
        "num_ids": 135
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text = text.lower()\n    regex = r'\\b([a-z]{1}ly)\\b'\n    result = re.search(regex, text)\n    if result!= None:\n        print result.group()\n    else:\n        print 'Not found'\n",
        "num_ids": 70
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = re.search(r'ly', text, flags=re.IGNORECASE)\n    if result:\n        print('\"{}\" is located at index {}'.format(result.group(), result.start()))\n    else:\n        print('No ly found!')\n",
        "num_ids": 67
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = re.findall(r'adverb ending with ly', text)\n    return result\n",
        "num_ids": 25
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text=text.strip()\n    lst=[]\n    lst1=[]\n    p=re.compile(r\"(.)ly$\")\n    for match in re.finditer(p,text):\n        lst.append(match.start())\n    if len(lst)>0:\n        lst1.append(lst[0])\n        lst1.append(lst[0]+len(p.search(text).group()))\n    else:\n        lst1.append(-1)\n        lst1.append(-1)\n    return lst1\nprint(find_adverbs(\"billy\"))\nprint(find_adverbs(\"billyly\"))\nprint(find_adverbs(\"billyylylyly\"))\nprint(find_adverbs(\"billyyly\"))\nprint(find_adverbs(\"billyy\"))\nprint(find_adverbs(\"billyyy\"))\nprint(find_adverbs(\"billyyyy\"))\nprint(find_adverbs(\"billyyyyy\"))\nprint(find_adverbs(\"billyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"))\nprint(find_adverbs(\"billyyyyyyyyyyyyyyyyyyyyyy",
        "num_ids": 2008
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # text = \"I got so feeling we must take the bus today\"\n    # return [1,4]\n    # text = \"I am so happy\"\n    # return [2,3,6]\n    # text = \"I love you so much\"\n    # return [1,5]\n    # text = \"I want to live in a world where I can be happy\"\n    # return [5,7]\n    # text = \"I want to live in a world where I can be happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happy and happ",
        "num_ids": 2008
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    m = re.search('ly$',text)\n    if m:\n        print m.start()\n        print m.end()\n        print m.group()\n    else:\n        print 'no match found'\n",
        "num_ids": 53
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n==0:\n        return []\n    if n>len(items):\n        n=len(items)\n    #print n\n    items=sorted(items,key=lambda x:x[1],reverse=True)\n    #print items\n    return items[:n]\n",
        "num_ids": 70
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap=[]\n    for item,price in items:\n        heapq.heappush(heap,(price,item))\n    topitems=[]\n    for i in range(n):\n        topitems.append(heapq.heappop(heap))\n    return topitems\n",
        "num_ids": 73
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    \n    cost_count = {}\n    for item in items:\n        cost = items[item]\n        if cost in cost_count.keys():\n            cost_count[cost] += 1\n        else:\n            cost_count[cost] = 1\n    cost_list = []\n    for cost in cost_count.keys():\n        heapq.heappush(cost_list,(cost_count[cost],cost))\n    return [heapq.heappop(cost_list) for i in range(n)]\n",
        "num_ids": 125
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item,price in items:\n        heapq.heappush(heap,(-price,item))\n        if len(heap)>n:\n            heapq.heappop(heap)\n    return [(item,price) for price,item in heap]\n",
        "num_ids": 74
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return heapq.nlargest(n,items,key=lambda x:x[1])\n",
        "num_ids": 24
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return heapq.nlargest(n,items,key=lambda item: item[1])\n",
        "num_ids": 24
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n <= 0:\n        return []\n    if n > len(items):\n        return items\n    if len(items) < n:\n        return items\n    else:\n        return heapq.nlargest(n,items)\n        \ndef cheapest_items(items,n):\n    '''\n    Write a function to find the n cheapest items in a given dataset.\n    '''\n    if n <= 0:\n        return []\n    if n > len(items):\n        return items\n    if len(items) < n:\n        return items\n    else:\n        return heapq.nsmallest(n,items)\n        \ndef cheapest_items(items,n):\n    '''\n    Write a function to find the n cheapest items in a given dataset.\n    '''\n    if n <= 0:\n        return []\n    if n > len(items):\n        return items\n    if len(items) < n:\n        return items\n    else:\n        return heapq.nsmallest(n,items)\n        \ndef cheapest_items(items,n):\n    '''\n    Write a function to find the n cheapest items in a given dataset.\n    '''\n    if n <= 0:\n        return []\n    if n > len(items):\n        return items\n    if len(items) < n:\n        return items\n    else:\n        return heapq.nsmallest(n,items)\n        \ndef cheapest_items(items,n):\n    '''\n    Write a function to find the n cheapest items in a given dataset.\n    '''\n    if n <= 0:\n        return []\n    if n > len(items):\n        return items\n    if len(items) < n:\n        return items\n    else:\n        return heapq.nsmallest(n,items)\n        \ndef cheapest_items(items,n):\n    '''\n    Write a function to find the n cheapest items in a given dataset.\n    '''\n    if n <= 0:\n        return []\n    if n > len(items):\n        return items\n    if len(items) < n:\n        return items\n    else:\n        return heapq.nsmallest(n,items)\n        \ndef cheapest_items(items,n):\n    '''\n    Write a function to find the n cheapest items in a given dataset.\n    '''\n    if n <= 0:\n        return []\n    if n > len(items):\n        return items\n    if len(items) < n:\n        return items\n    else:\n        return heapq.nsmallest(n,items)\n        \ndef cheapest_items(items,n):\n    '''\n    Write a function to find the n cheapest items in a given dataset.\n    '''\n    if n <= 0:\n        return []\n    if n > len(items):\n        return items\n    if len(items) < n:\n        return items\n    else:\n        return heapq.nsmallest(n,items)\n        \ndef cheapest_items(items,n):\n    '''\n    Write a function to find the n cheapest items in a given dataset.\n    '''\n    if n <= 0:\n        return []\n    if n > len(items):\n        return items\n    if len(items) < n:\n        return items\n    else:\n        return heapq.nsmallest(n,items)\n        \ndef cheapest_items(items,n):\n    '''\n    Write a function to find the n cheapest items in a given dataset.\n    '''\n    if n <= 0:\n        return []\n    if n > len(items):\n        return items\n    if len(items) < n:\n        return items\n    else:\n        return heapq.nsmallest(n,items)\n        \ndef cheapest_items(items,n):\n    '''\n    Write a function to find the n cheapest items in a given dataset.\n    '''\n    if n <= 0:\n        return []\n    if n > len(items):\n        return items\n    if len(items) < n:\n        return items\n    else:\n        return heapq.nsmallest(n,items)\n        \ndef cheapest_items(items,n):\n    '''\n    Write a function to find the n cheapest items in a given dataset.\n    '''\n    if n <= 0:\n        return []\n    if n > len(items):\n        return items\n    if len(items) < n:\n        return items\n    else:\n        return heapq.nsmallest(n,items)\n        \ndef cheapest_items(items,n):\n    '''\n    Write a function to find the n cheapest items in a given dataset.\n    '''\n    if n <= 0:\n        return []\n    if n > len(items):\n        return items\n    if len(items) < n:\n        return items\n    else:\n        return heapq.nsmallest(n,items)\n        \ndef cheapest_items(items,n):\n    '''\n    Write a function to find the n cheapest items in a given dataset.\n    '''\n    if n <= 0:\n        return []\n    if n > len(items):\n        return items\n    if len(items) < n:\n        return items\n    else:\n        return heapq.nsmallest(n,items)\n        \ndef cheapest_items(items,n):\n    '''\n    Write a function to find the n cheapest items in a given dataset.\n    '''\n    if n <= 0:\n        return []\n    if n > len(items):\n        return items\n    if len(items) < n:\n        return items\n    else:\n        return heapq.nsmallest(n,items)\n        \ndef cheapest_items(items,n):\n    '''\n    Write a function to find the n cheapest items in a given dataset.\n    '''\n    if n <= 0:\n        return []\n    if n > len(items):\n        return items\n    if len(items) < n:\n        return items\n    else:\n        return heapq.nsmallest(n,items)\n        \ndef cheapest_items(items,n):\n    '''\n    Write a function to find the n cheapest items in a given dataset.\n    '''\n    if n <= 0:\n        return []\n    if n > len(items):\n        return items\n    if len(items) < n:\n        return items\n    else:\n        return heapq.nsmallest(n,items)\n        \ndef cheapest_items(items,n):\n    '''\n    Write a function to find the n cheapest items in a given dataset.\n    '''\n    if n <= 0:\n        return []\n    if n > len(items):\n        return items\n    if len(items) < n:\n        return items\n    else:\n        return heapq.nsmallest(n,items)\n        \ndef cheapest_items(items,n):\n    '''\n    Write a function to find the n cheapest items in a given dataset.\n    '''\n    if n <= 0:\n        return []\n    if n > len(items):\n        return items\n    if len(items) < n:\n        return items\n    else:\n        return heapq.nsmallest(n,items)\n        \ndef cheapest_items(items,n):\n    '''\n    Write a function to find the n cheapest items in a given dataset.\n    '''\n    if n <= 0:\n        return []\n    if n > len(items):\n        return items\n    if len(items) < n:\n        return items\n    else:\n        return heapq.nsmallest(n,items)\n        \ndef cheapest_items(items,n):\n    '''\n    Write a function to find the n cheapest items in a given dataset.\n    '''\n    if n <= 0:\n        return []\n    if n > len(items):\n        return items\n    if len(items) < n:\n        return items\n    else:\n        return heapq.nsmallest(n,items)\n        \ndef cheapest_items(items,n):\n    '''\n    Write a function to find the n cheapest items in a given dataset.\n    '''\n    if n <= 0:\n        return []\n    if n > len(items):\n        return items\n    if len(items) < n:\n        return items\n    else:\n        return heapq.nsmallest(n,items)\n        \ndef cheapest_items(items,n):\n    '''\n    Write a function t",
        "num_ids": 7
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return sorted(items,key=lambda item: item[1],reverse=True)[:n]\n",
        "num_ids": 25
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #Your code here\n    if items == None:\n        return None\n    if n == 1:\n        return items\n    else:\n        n = n -1\n        max_heap = []\n        for i in items:\n            heapq.heappush(max_heap,-i)\n        i = 0\n        while(i<n):\n            heapq.heappop(max_heap)\n            i += 1\n        return -1*heapq.nsmallest(n,max_heap)\n",
        "num_ids": 127
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    top=[]\n    for i in items:\n        if i[1]>n:\n            heapq.heappush(top,(i[1],i[0]))\n        if len(top)>n:\n            heapq.heappop(top)\n    top=list(top)\n    return top[::-1]\n",
        "num_ids": 85
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr = l.split(' ')\n    arr.append(arr.pop(0))\n    return arr\n",
        "num_ids": 28
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    result = []\n    for i in range(n):\n        result.append(l[i])\n    result.extend(l[n:])\n    return result\n",
        "num_ids": 42
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth element, add the first part to the end\n    a = l[:n]\n    b = l[n:]\n    return a + b\n",
        "num_ids": 44
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0:\n        return \"Incorrect argument to function\"\n    else:\n        return l[:n] + l[n:].reverse()\n",
        "num_ids": 39
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if l:\n        return l[:n] + l[n:].split(l[n])\n    else:\n        return []\n",
        "num_ids": 35
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]\n",
        "num_ids": 15
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n",
        "num_ids": 15
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n]+l[n:len(l)]\n",
        "num_ids": 18
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n]+l[n:].reverse()\n",
        "num_ids": 17
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:len(l)-n]\n",
        "num_ids": 21
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    print tuplex\n    return tuplex\n",
        "num_ids": 25
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    \n",
        "num_ids": 12
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    diff = 0\n    for i in range(len(nums)):\n        if nums[i] < nums[0]:\n            diff = nums[i] - nums[0]\n        elif nums[i] > nums[0]:\n            if nums[i] - nums[0] > diff:\n                diff = nums[i] - nums[0]\n    return diff\n",
        "num_ids": 100
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    small = nums[0]\n    big = nums[0]\n    for i in nums:\n        if small < i:\n            small = i\n        if big > i:\n            big = i\n    return big - small\n    \n    \ndef bucket_sort(nums):\n    '''\n    Write a python function that takes a list of integers and returns a sorted list using bucket sort.\n    '''\n    if nums is None or len(nums) == 0:\n        return nums\n    min_num = nums[0]\n    max_num = nums[0]\n    for i in nums:\n        if i < min_num:\n            min_num = i\n        if i > max_num:\n            max_num = i\n    buckets = []\n    for i in range(min_num, max_num + 1):\n        buckets.append([])\n    for i in nums:\n        buckets[i - min_num].append(i)\n    new_nums = []\n    for i in buckets:\n        if len(i) > 0:\n            new_nums.extend(i)\n    return new_nums\n",
        "num_ids": 183
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    elif len(nums) == 2:\n        return abs(nums[0] - nums[1])\n    else:\n        return max(nums[0] - nums[1], nums[-1] - nums[-2])\n",
        "num_ids": 82
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n    \ndef small_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return min(nums) - max(nums)\n    \ndef is_permutation(string_1, string_2):\n    '''\n    Write a python function to determine if two strings are permutations of each other.\n    '''\n    if len(string_1)!= len(string_2):\n        return False\n    else:\n        sorted_str_1 = ''.join(sorted(string_1))\n        sorted_str_2 = ''.join(sorted(string_2))\n        return sorted_str_1 == sorted_str_2\n    \ndef is_permutation_1(string_1, string_2):\n    '''\n    Write a python function to determine if two strings are permutations of each other.\n    '''\n    if len(string_1)!= len(string_2):\n        return False\n    else:\n        counts = {}\n        for i in string_1:\n            if i in counts:\n                counts[i] += 1\n            else:\n                counts[i] = 1\n        for i in string_2:\n            if i not in counts:\n                return False\n            else:\n                counts[i] -= 1\n        for i in counts:\n            if counts[i]!= 0:\n                return False\n    return True\n    \ndef is_permutation_2(string_1, string_2):\n    '''\n    Write a python function to determine if two strings are permutations of each other.\n    '''\n    if len(string_1)!= len(string_2):\n        return False\n    else:\n        counts = [0] * 26\n        for i in string_1:\n            counts[ord(i) - ord('a')] += 1\n        for i in string_2:\n            counts[ord(i) - ord('a')] -= 1\n        for i in counts:\n            if i!= 0:\n                return False\n    return True\n    \ndef is_permutation_3(string_1, string_2):\n    '''\n    Write a python function to determine if two strings are permutations of each other.\n    '''\n    if len(string_1)!= len(string_2):\n        return False\n    else:\n        counts = [0] * 26\n        for i in string_1:\n            counts[ord(i) - ord('a')] += 1\n        for i in string_2:\n            counts[ord(i) - ord('a')] -= 1\n        for i in counts:\n            if i!= 0:\n                return False\n    return True\n    \ndef is_permutation_4(string_1, string_2):\n    '''\n    Write a python function to determine if two strings are permutations of each other.\n    '''\n    if len(string_1)!= len(string_2):\n        return False\n    else:\n        counts = [0] * 26\n        for i in string_1:\n            counts[ord(i) - ord('a')] += 1\n        for i in string_2:\n            counts[ord(i) - ord('a')] -= 1\n        for i in counts:\n            if i!= 0:\n                return False\n    return True\n    \ndef is_permutation_5(string_1, string_2):\n    '''\n    Write a python function to determine if two strings are permutations of each other.\n    '''\n    if len(string_1)!= len(string_2):\n        return False\n    else:\n        counts = [0] * 26\n        for i in string_1:\n            counts[ord(i) - ord('a')] += 1\n        for i in string_2:\n            counts[ord(i) - ord('a')] -= 1\n        for i in counts:\n            if i!= 0:\n                return False\n    return True\n    \ndef is_permutation_6(string_1, string_2):\n    '''\n    Write a python function to determine if two strings are permutations of each other.\n    '''\n    if len(string_1)!= len(string_2):\n        return False\n    else:\n        counts = [0] * 26\n        for i in string_1:\n            counts[ord(i) - ord('a')] += 1\n        for i in string_2:\n            counts[ord(i) - ord('a')] -= 1\n        for i in counts:\n            if i!= 0:\n                return False\n    return True\n    \ndef is_permutation_7(string_1, string_2):\n    '''\n    Write a python function to determine if two strings are permutations of each other.\n    '''\n    if len(string_1)!= len(string_2):\n        return False\n    else:\n        counts = [0] * 26\n        for i in string_1:\n            counts[ord(i) - ord('a')] += 1\n        for i in string_2:\n            counts[ord(i) - ord('a')] -= 1\n        for i in counts:\n            if i!= 0:\n                return False\n    return True\n    \ndef is_permutation_8(string_1, string_2):\n    '''\n    Write a python function to determine if two strings are permutations of each other.\n    '''\n    if len(string_1)!= len(string_2):\n        return False\n    else:\n        counts = [0] * 26\n        for i in string_1:\n            counts[ord(i) - ord('a')] += 1\n        for i in string_2:\n            counts[ord(i) - ord('a')] -= 1\n        for i in counts:\n            if i!= 0:\n                return False\n    return True\n    \ndef is_permutation_9(string_1, string_2):\n    '''\n    Write a python function to determine if two strings are permutations of each other.\n    '''\n    if len(string_1)!= len(string_2):\n        return False\n    else:\n        counts = [0] * 26\n        for i in string_1:\n            counts[ord(i) - ord('a')] += 1\n        for i in string_2:\n            counts[ord(i) - ord('a')] -= 1\n        for i in counts:\n            if i!= 0:\n                return False\n    return True\n    \ndef is_permutation_10(string_1, string_2):\n    '''\n    Write a python function to determine if two strings are permutations of each other.\n    '''\n    if len(string_1)!= len(string_2):\n        return False\n    else:\n        counts = [0] * 26\n        for i in string_1:\n            counts[ord(i) - ord('a')] += 1\n        for i in string_2:\n            counts[ord(i) - ord('a')] -= 1\n        for i in counts:\n            if i!= 0:\n                return False\n    return True\n    \ndef is_permutation_11(string_1, string_2):\n    '''\n    Write a python function to determine if two strings are permutations of each other.\n    '''\n    if len(string_1)!= len(string_2):\n        return False\n    else:\n        counts = [0] * 26\n        for i in string_1:\n            counts[ord(i) - ord('a')] += 1\n        for i in string_2:\n            counts[ord(i) - ord('a')] -= 1\n        for i in counts:\n            if i!= 0:\n                return False\n    return True\n    \ndef is_permutation_12(string_1, string_2):\n    '''\n    Write a python function to determine if two strings are permutations of each other.\n    '''\n    if len(string_1)!= len(string_2):\n        return False\n    else:\n        counts = [0] * 26\n        for i in string_1:\n            counts[ord(i) - ord('a')] += 1\n        for i in string_2:\n            counts[ord(",
        "num_ids": 77
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    min_n = min(nums)\n    max_n = max(nums)\n    return max_n - min_n\n",
        "num_ids": 34
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    print max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n    \ndef any_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    list = []\n    x = a\n    while x <= b:\n        x = math.floor(math.sqrt(x))\n        list.append(x*x)\n    return list\n",
        "num_ids": 64
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a,b+1):\n        if i**0.5 == int(i**0.5):\n            result.append(i)\n    return result\n",
        "num_ids": 49
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for x in range(a,b+1):\n        squares.append(int(x**0.5))\n    return [x**2 for x in squares]\n",
        "num_ids": 48
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    ret = []\n    for n in xrange(a, b+1):\n        if int(math.sqrt(n)) ** 2 == n:\n            ret.append(n)\n    return ret\n",
        "num_ids": 50
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    total = 0\n    for i in range(a, b+1):\n        if i*i <= b:\n            total += i*i\n    return total\n",
        "num_ids": 40
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    sqrt_b = int(b ** 0.5)\n    for i in xrange(a, sqrt_b + 1):\n        if b - i ** 2 == 0:\n            return i * i\n    return -1\n",
        "num_ids": 56
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    while a <= b:\n        x = a**0.5\n        if x == int(x):\n            result.append(x)\n        a += 1\n    return result\n",
        "num_ids": 49
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    total = 0\n    for i in range(a, b+1):\n        if i**0.5 == int(i**0.5):\n            total += i**0.5\n    return total\n",
        "num_ids": 50
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [i**2 for i in range(a, b+1) if i**2 >= a and i**2 <= b]\n",
        "num_ids": 33
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [i**2 for i in range(a,b+1) if i**2 - int(i**0.5)**2 == i**2]\n",
        "num_ids": 40
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # x = x*cos(y)\n    # y = x*sin(y)\n    return x,y\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    # x = x*cos(y)\n    # y = x*sin(y)\n    return x,y\ndef f(x):\n    '''\n    Write a function to return the value of f(x)=x^2+4x+2, for x in (-4,-2,0,2,4).\n    '''\n    return x**2+4*x+2\ndef f2(x):\n    '''\n    Write a function to return the value of f2(x)=x^2-4x+2, for x in (-4,-2,0,2,4).\n    '''\n    return x**2-4*x+2\ndef f3(x):\n    '''\n    Write a function to return the value of f3(x)=x^2-4x+2, for x in (-4,-2,0,2,4).\n    '''\n    return x**2-4*x+2\ndef f4(x):\n    '''\n    Write a function to return the value of f4(x)=x^2-4x+2, for x in (-4,-2,0,2,4).\n    '''\n    return x**2-4*x+2\ndef f5(x):\n    '''\n    Write a function to return the value of f5(x)=x^2-4x+2, for x in (-4,-2,0,2,4).\n    '''\n    return x**2-4*x+2\ndef f6(x):\n    '''\n    Write a function to return the value of f6(x)=x^2-4x+2, for x in (-4,-2,0,2,4).\n    '''\n    return x**2-4*x+2\ndef f7(x):\n    '''\n    Write a function to return the value of f7(x)=x^2-4x+2, for x in (-4,-2,0,2,4).\n    '''\n    return x**2-4*x+2\ndef f8(x):\n    '''\n    Write a function to return the value of f8(x)=x^2-4x+2, for x in (-4,-2,0,2,4).\n    '''\n    return x**2-4*x+2\ndef f9(x):\n    '''\n    Write a function to return the value of f9(x)=x^2-4x+2, for x in (-4,-2,0,2,4).\n    '''\n    return x**2-4*x+2\ndef f10(x):\n    '''\n    Write a function to return the value of f10(x)=x^2-4x+2, for x in (-4,-2,0,2,4).\n    '''\n    return x**2-4*x+2\ndef f11(x):\n    '''\n    Write a function to return the value of f11(x)=x^2-4x+2, for x in (-4,-2,0,2,4).\n    '''\n    return x**2-4*x+2\ndef f12(x):\n    '''\n    Write a function to return the value of f12(x)=x^2-4x+2, for x in (-4,-2,0,2,4).\n    '''\n    return x**2-4*x+2\ndef f13(x):\n    '''\n    Write a function to return the value of f13(x)=x^2-4x+2, for x in (-4,-2,0,2,4).\n    '''\n    return x**2-4*x+2\ndef f14(x):\n    '''\n    Write a function to return the value of f14(x)=x^2-4x+2, for x in (-4,-2,0,2,4).\n    '''\n    return x**2-4*x+2\ndef f15(x):\n    '''\n    Write a function to return the value of f15(x)=x^2-4x+2, for x in (-4,-2,0,2,4).\n    '''\n    return x**2-4*x+2\ndef f16(x):\n    '''\n    Write a function to return the value of f16(x)=x^2-4x+2, for x in (-4,-2,0,2,4).\n    '''\n    return x**2-4*x+2\ndef f17(x):\n    '''\n    Write a function to return the value of f17(x)=x^2-4x+2, for x in (-4,-2,0,2,4).\n    '''\n    return x**2-4*x+2\ndef f18(x):\n    '''\n    Write a function to return the value of f18(x)=x^2-4x+2, for x in (-4,-2,0,2,4).\n    '''\n    return x**2-4*x+2\ndef f19(x):\n    '''\n    Write a function to return the value of f19(x)=x^2-4x+2, for x in (-4,-2,0,2,4).\n    '''\n    return x**2-4*x+2\ndef f20(x):\n    '''\n    Write a function to return the value of f20(x)=x^2-4x+2, for x in (-4,-2,0,2,4).\n    '''\n    return x**2-4*x+2\ndef f21(x):\n    '''\n    Write a function to return the value of f21(x)=x^2-4x+2, for x in (-4,-2,0,2,4).\n    '''\n    return x**2-4*x+2\ndef f22(x):\n    '''\n    Write a function to return the value of f22(x)=x^2-4x+2, for x in (-4,-2,0,2,4).\n    '''\n    return x**2-4*x+2\ndef f23(x):\n    '''\n    Write a function to return the value of f23(x)=x^2-4x+2, for x in (-4,-2,0,2,4).\n    '''\n    return x**2-4*x+2\ndef f24(x):\n    '''\n    Write a function to return the value of f24(x)=x^2-4x+2, for x in (-4,-2,0,2,4).\n    '''\n    return x**2-4*x+2\ndef f25(x):\n    '''\n    Write a function to return the value of f25(x)=x^2-4x+2, for x in (-4,-2,0,2,4).\n    '''\n    return x**2-4*x+2\ndef f26(x):\n    '''\n    Write a function to return the value of f26(x)=x^2-4x+2, for x in (-4,-2,0,2,4).\n    '''\n    return x**2-4*x+2\ndef f27(x):\n    '''\n    Write a function to return the value of f27(x)=x^2-4x+2, for x in (-4,-2,0,2,4).\n    '''\n    return x**2-4*x+2\ndef f28(x):\n    '''\n    Write a function to return the value of f28(x)=x^2-4x+2, for x in (-4,-2,0,2,4).\n    '''\n    return x**2-4*x+2\ndef f29(x):\n    '''\n    Write a function to return the value of f29(x)=x^2-4x+2, for x in (-4,-2,0,2,4).\n    '''\n    return x**2-4*x+2\ndef f30(x):\n    '''\n    Write a function to return the value of f30(x)=x^2-4x+2, for x in (-4,-2",
        "num_ids": 32
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = (x**2+y**2)**0.5\n    t = cmath.atan(y/x)\n    return r,t\n",
        "num_ids": 38
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*cos(y), x*sin(y)\n",
        "num_ids": 17
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = x/2\n    b = y/2\n    return int(a),int(b)\ndef rect_polar(a,b):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x = a*2\n    y = b*2\n    return int(x),int(y)\ndef point_to_string(num):\n    '''\n    Write a function to convert a 2-dimensional point to a string.\n    '''\n    a = str(num[0])\n    b = str(num[1])\n    return a+','+b\ndef string_to_point(num):\n    '''\n    Write a function to convert a 2-dimensional point from a string to a list.\n    '''\n    a = int(num.split(',')[0])\n    b = int(num.split(',')[1])\n    return [a,b]\ndef dist(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    dist = ((x2-x1)**2+(y2-y1)**2)**0.5\n    return dist\ndef add_vectors(v1,v2):\n    '''\n    Write a function to add two vectors.\n    '''\n    x1 = v1[0]\n    y1 = v1[1]\n    x2 = v2[0]\n    y2 = v2[1]\n    x3 = x1+x2\n    y3 = y1+y2\n    return [x3,y3]\ndef scalar_vector_product(s,v):\n    '''\n    Write a function to calculate the scalar product of a vector and a scalar.\n    '''\n    x = s*v[0]\n    y = s*v[1]\n    z = s*v[2]\n    return [x,y,z]\ndef vector_scalar_product(v,s):\n    '''\n    Write a function to calculate the scalar product of two vectors.\n    '''\n    x = v[0]*s\n    y = v[1]*s\n    z = v[2]*s\n    return [x,y,z]\ndef vector_add(v1,v2):\n    '''\n    Write a function to add two vectors.\n    '''\n    x1 = v1[0]\n    y1 = v1[1]\n    x2 = v2[0]\n    y2 = v2[1]\n    x3 = x1+x2\n    y3 = y1+y2\n    return [x3,y3]\ndef distance_between(v1,v2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    x1 = v1[0]\n    y1 = v1[1]\n    x2 = v2[0]\n    y2 = v2[1]\n    dist = ((x2-x1)**2+(y2-y1)**2)**0.5\n    return dist\ndef scale_vector(v,s):\n    '''\n    Write a function to scale a vector by a scalar.\n    '''\n    x = v[0]*s\n    y = v[1]*s\n    z = v[2]*s\n    return [x,y,z]\ndef plane_equation(p1,p2,p3):\n    '''\n    Write a function to calculate the equation of a plane given three points.\n    '''\n    x1 = p1[0]\n    y1 = p1[1]\n    x2 = p2[0]\n    y2 = p2[1]\n    x3 = p3[0]\n    y3 = p3[1]\n    a = -((x2*y3)-(x3*y2))\n    b = -((x3*y1)-(x1*y3))\n    c = -((x1*y2)-(x2*y1))\n    d = a*x1+b*y1+c*1\n    return a,b,c,d\ndef line_from_points(p1,p2):\n    '''\n    Write a function to calculate the equation of a line given two points.\n    '''\n    x1 = p1[0]\n    y1 = p1[1]\n    x2 = p2[0]\n    y2 = p2[1]\n    a = -((y2-y1))\n    b = -((x2-x1))\n    c = -((x1*y2)-(x2*y1))\n    return a,b,c\ndef line_equation(p1,p2):\n    '''\n    Write a function to calculate the equation of a line given two points.\n    '''\n    x1 = p1[0]\n    y1 = p1[1]\n    x2 = p2[0]\n    y2 = p2[1]\n    a = -((y2-y1))\n    b = -((x2-x1))\n    c = -((x1*y2)-(x2*y1))\n    return a,b,c\ndef line_point_to_vector(p1,p2):\n    '''\n    Write a function to convert a line to a vector.\n    '''\n    x1 = p1[0]\n    y1 = p1[1]\n    x2 = p2[0]\n    y2 = p2[1]\n    a = x2-x1\n    b = y2-y1\n    return [a,b]\ndef line_to_point(a,b,c):\n    '''\n    Write a function to convert a line to a point.\n    '''\n    x1 = -c/b\n    y1 = a/b\n    return [x1,y1]\ndef line_point_to_line(p1,p2):\n    '''\n    Write a function to convert a line to a point.\n    '''\n    x1 = p1[0]\n    y1 = p1[1]\n    x2 = p2[0]\n    y2 = p2[1]\n    a = y2-y1\n    b = x2-x1\n    return [a,b]\ndef get_line_point(a,b,c,d):\n    '''\n    Write a function to get a point on a line given the slope and intercept.\n    '''\n    x = (-d/b)\n    y = (a/b)\n    return [x,y]\ndef get_line_point_between(p1,p2,d):\n    '''\n    Write a function to get a point on a line given a point and a line.\n    '''\n    x1 = p1[0]\n    y1 = p1[1]\n    x2 = p2[0]\n    y2 = p2[1]\n    a = y2-y1\n    b = x2-x1\n    c = -((y2-y1)*x1+(x2-x1)*y1)\n    x = (d-c)/b\n    y = (a*d-b*c)/b\n    return [x,y]\ndef get_line_point_on_line(p1,p2,d):\n    '''\n    Write a function to get a point on a line given a point and a line.\n    '''\n    x1 = p1[0]\n    y1 = p1[1]\n    x2 = p2[0]\n    y2 = p2[1]\n    a = y2-y1\n    b = x2-x1\n    c = -((y2-y1)*x1+(x2-x1)*y1)\n    x = -((d-c)/b)\n    y = -((a*d-b*c)/b)\n    return [x,y]\ndef get_line_intersection(p1,p2,p3,p4):\n    '''\n    Write a function to get the point of intersection on two lines given the four points.\n    '''\n    x1 = p1[0]\n    y1 = p1[1]\n    x2 = p2[0]\n    y2 = p2[1]\n    x",
        "num_ids": 44
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = (x**2 + y**2)**0.5\n    theta = cmath.atan2(y,x)\n    return r,theta\n",
        "num_ids": 41
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a=cmath.rect(x,cmath.pi/2-y)\n    print \"The rectangle coordinates are: \",a.real, a.imag\n",
        "num_ids": 39
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x * cmath.sqrt(2)\n    y = y * cmath.sqrt(2)\n    x_rect = complex(x.real,y.real)\n    y_rect = complex(x.imag,y.imag)\n    return x_rect, y_rect\n",
        "num_ids": 72
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # x = r * cos(theta)\n    # y = r * sin(theta)\n    # theta is in radians\n    return (x,y)\ndef polar_rect_deriv_1(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates with\n    first derivative\n    '''\n    # x = r * cos(theta)\n    # y = r * sin(theta)\n    # theta is in radians\n    return (y, -x)\ndef polar_rect_deriv_2(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates with\n    second derivative\n    '''\n    # x = r * cos(theta)\n    # y = r * sin(theta)\n    # theta is in radians\n    return (-x, -y)\ndef test_polar_rect():\n    '''\n    test the function 'polar_rect'\n    '''\n    x = 1\n    y = 2\n    assert x == polar_rect(1,2)[0]\n    assert y == polar_rect(1,2)[1]\n    x = 1\n    y = 2\n    assert x == polar_rect_deriv_1(1,2)[0]\n    assert y == polar_rect_deriv_1(1,2)[1]\n    x = 1\n    y = 2\n    assert x == polar_rect_deriv_2(1,2)[0]\n    assert y == polar_rect_deriv_2(1,2)[1]\n    pass\ndef test_rect_polar():\n    '''\n    test the function'rect_polar'\n    '''\n    x = 1\n    y = 2\n    assert y == rect_polar(1,2)[0]\n    assert x == rect_polar(1,2)[1]\n    pass\ndef rect_polar_deriv_1(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates with\n    first derivative\n    '''\n    # x = r * cos(theta)\n    # y = r * sin(theta)\n    # theta is in radians\n    return (y, -x)\ndef rect_polar_deriv_2(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates with\n    second derivative\n    '''\n    # x = r * cos(theta)\n    # y = r * sin(theta)\n    # theta is in radians\n    return (-x, -y)\ndef test_rect_polar():\n    '''\n    test the function'rect_polar'\n    '''\n    x = 1\n    y = 2\n    assert x == rect_polar_deriv_1(1,2)[0]\n    assert y == rect_polar_deriv_1(1,2)[1]\n    assert x == rect_polar_deriv_2(1,2)[0]\n    assert y == rect_polar_deriv_2(1,2)[1]\n    pass\ndef rect_polar_deriv_1(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates with\n    first derivative\n    '''\n    # x = r * cos(theta)\n    # y = r * sin(theta)\n    # theta is in radians\n    return (y, -x)\ndef rect_polar_deriv_2(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates with\n    second derivative\n    '''\n    # x = r * cos(theta)\n    # y = r * sin(theta)\n    # theta is in radians\n    return (-x, -y)\ndef test_rect_polar():\n    '''\n    test the function'rect_polar'\n    '''\n    x = 1\n    y = 2\n    assert x == rect_polar_deriv_1(1,2)[0]\n    assert y == rect_polar_deriv_1(1,2)[1]\n    assert x == rect_polar_deriv_2(1,2)[0]\n    assert y == rect_polar_deriv_2(1,2)[1]\n    pass\ndef rect_polar_deriv_1(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates with\n    first derivative\n    '''\n    # x = r * cos(theta)\n    # y = r * sin(theta)\n    # theta is in radians\n    return (y, -x)\ndef rect_polar_deriv_2(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates with\n    second derivative\n    '''\n    # x = r * cos(theta)\n    # y = r * sin(theta)\n    # theta is in radians\n    return (-x, -y)\ndef test_rect_polar():\n    '''\n    test the function'rect_polar'\n    '''\n    x = 1\n    y = 2\n    assert x == rect_polar_deriv_1(1,2)[0]\n    assert y == rect_polar_deriv_1(1,2)[1]\n    assert x == rect_polar_deriv_2(1,2)[0]\n    assert y == rect_polar_deriv_2(1,2)[1]\n    pass\ndef rect_polar_deriv_1(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates with\n    first derivative\n    '''\n    # x = r * cos(theta)\n    # y = r * sin(theta)\n    # theta is in radians\n    return (y, -x)\ndef rect_polar_deriv_2(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates with\n    second derivative\n    '''\n    # x = r * cos(theta)\n    # y = r * sin(theta)\n    # theta is in radians\n    return (-x, -y)\ndef test_rect_polar():\n    '''\n    test the function'rect_polar'\n    '''\n    x = 1\n    y = 2\n    assert x == rect_polar_deriv_1(1,2)[0]\n    assert y == rect_polar_deriv_1(1,2)[1]\n    assert x == rect_polar_deriv_2(1,2)[0]\n    assert y == rect_polar_deriv_2(1,2)[1]\n    pass\ndef rect_polar_deriv_1(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates with\n    first derivative\n    '''\n    # x = r * cos(theta)\n    # y = r * sin(theta)\n    # theta is in radians\n    return (y, -x)\ndef rect_polar_deriv_2(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates with\n    second derivative\n    '''\n    # x = r * cos(theta)\n    # y = r * sin(theta)\n    # theta is in radians\n    return (-x, -y)\ndef test_rect_polar():\n    '''\n    test the function'rect_polar'\n    '''\n    x = 1\n    y = 2\n    assert x == rect_polar_deriv_1(1,2)[0]\n    assert y == rect_polar_deriv_1(1,2)[1]\n    assert x == rect_polar_deriv_2(1,2)[0]\n    assert y == rect_polar_deriv_2(1,2)[1]\n    pass\ndef rect_polar_deriv_1(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates with\n    first derivative\n    '''\n    # x = r * cos(theta)\n    # y = r * sin(theta)\n    # theta is in radians\n    return (y, -x)\ndef rect_polar_deriv_2(x,y):\n    '''\n    Write a function to conver",
        "num_ids": 8
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = abs(complex(x,y))\n    theta = cmath.phase(complex(x,y))\n    return r, theta\n",
        "num_ids": 37
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x*cmath.cos(y),x*cmath.sin(y))\n    \ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (cmath.sqrt(x*x+y*y),cmath.atan2(y,x))\n",
        "num_ids": 30
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Your Code Here\n    newList[0],newList[len(newList)-1] = newList[len(newList)-1],newList[0]\n    return newList\n    \n",
        "num_ids": 48
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n    \n",
        "num_ids": 34
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n    \n    ",
        "num_ids": 34
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    i = len(newList)\n    newList[0],newList[i-1] = newList[i-1],newList[0]\n    return newList\n",
        "num_ids": 43
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    return newList[-1:] + newList[1:-1] + newList[:1]\n",
        "num_ids": 26
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "num_ids": 32
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n",
        "num_ids": 27
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    size = len(newList)\n    temp = newList[0]\n    newList[0] = newList[size-1]\n    newList[size-1] = temp\n    return newList\n",
        "num_ids": 51
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    size = len(newList)\n    newList[0],newList[size-1]=newList[size-1],newList[0]\n    return newList\n    \n    \n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a list.\n    '''\n    size = len(newList)\n    for i in range(int(size/2)):\n        newList[i],newList[size-i-1]=newList[size-i-1],newList[i]\n    return newList\n",
        "num_ids": 60
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    size = len(newList)\n    list[0], list[size-1] = list[size-1], list[0]\n    return newList\n",
        "num_ids": 39
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(0,k):\n        res = res * (n-i)\n        res = res // (i+1)\n    return res\n",
        "num_ids": 44
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = 1\n    for i in range(1,k+1):\n        C = C * (n-i+1) // i\n    return C\n",
        "num_ids": 39
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in xrange(k):\n        res = res*(n-i)\n        res = res/float(i+1)\n    return res\n",
        "num_ids": 44
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    binomialCoeff = [[0 for x in range(k+1)] for x in range(n+1)] \n    binomialCoeff[0][0]=1\n    for i in range(1,n+1): \n        binomialCoeff[i][0]=1\n        binomialCoeff[i][1]=i \n    for j in range(2,k+1): \n        binomialCoeff[0][j]=1\n        binomialCoeff[1][j]=j \n    for i in range(2,n+1): \n        for j in range(2,k+1): \n            binomialCoeff[i][j] = binomialCoeff[i-1][j-1] + binomialCoeff[i-1][j] \n    return binomialCoeff[n][k]\n",
        "num_ids": 208
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k>n:\n        return 0\n    else:\n        res=1\n        for i in range(k):\n            res*=(n-i)/float(i+1)\n        return res\n    \n",
        "num_ids": 52
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = [[0 for x in xrange(k+1)] for x in xrange(n+1)]\n    \n    # Initialize first column\n    for i in xrange(n+1):\n        C[i][0] = 1\n",
        "num_ids": 59
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    #C(n,k) = n!/(k!(n-k)!)\n    if k > n :\n        return 0\n    if k == 0:\n        return 1\n    if k == 1 or k == n:\n        return 1\n    if k == 2:\n        return 2\n    if k == 3:\n        return 4\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n",
        "num_ids": 114
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C=1\n    if k > n-k:\n        k = n-k\n    for i in range(k):\n        C = C*(n-i)\n        C = C//(i+1)\n    return C\n",
        "num_ids": 58
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    binom = [0]*(k+1) \n    binom[0] = 1\n    for i in xrange(1,n+1): \n        j = min(i,k)\n        while j>=1:\n            binom[j] = binom[j-1] + binom[j]\n            j -= 1\n    return binom[k]\n",
        "num_ids": 93
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff = 1\n    for i in range(1,k):\n        coeff *= n\n        coeff /= i\n    return coeff\n    \ndef binomial_coefficient(n,k):\n    '''\n    Write a python function to find the binomial co-efficient.\n    '''\n    if n == k:\n        return 1\n    elif n < k:\n        return 0\n    else:\n        temp = n - k\n        return binomial_Coeff(n, temp) * binomial_Coeff(temp, k)\n    \ndef changeBase(n,b):\n    '''\n    Write a python function to convert the number from decimal to n-base\n    '''\n    if b < 2:\n        return 0\n    digits = []\n    while n > 0:\n        digits.append(int(n%b))\n        n /= b\n    return int(''.join(str(x) for x in digits))\n",
        "num_ids": 62
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('\\.0*$','.0',ip)\n",
        "num_ids": 19
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return ip.lstrip('0')\n",
        "num_ids": 12
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'\\.(0){1,}',r'.',ip)\n    return ip\n",
        "num_ids": 30
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return \".\".join(ip.split(\".\")[1:])\n",
        "num_ids": 19
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip.startswith('0'):\n        return ip[1:]\n    return ip\n",
        "num_ids": 25
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = ip.split('.')\n    ip_list = [int(x) for x in ip_list]\n    for i in range(len(ip_list)):\n        if ip_list[i] == 0:\n            ip_list[i] = None\n    ip_list = [str(x) for x in ip_list if x is not None]\n    return '.'.join(ip_list)\n",
        "num_ids": 103
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.strip()\n    ip_list = ip.split('.')\n    for i in range(4):\n        ip_list[i] = int(ip_list[i])\n    ip_list.reverse()\n    remove_zero = []\n    for i in ip_list:\n        if i!= 0:\n            remove_zero.append(i)\n    remove_zero.reverse()\n    res = '.'.join(map(str, remove_zero))\n    return res\n",
        "num_ids": 119
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #ip=ip.lstrip('0')\n    #ip=ip.strip('0')\n    #ip=re.sub('0+','',ip)\n    ip=ip.lstrip('0')\n    ip=ip.strip('0')\n    return ip\n",
        "num_ids": 65
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    output = \"\"\n    for i in ip.split(\".\"):\n        if i.strip() == \"0\":\n            output += \".\"\n        else:\n            output += i\n    return output\n",
        "num_ids": 48
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = ip.split(\".\")\n    new_ip_list = []\n    for each in ip_list:\n        if int(each)!= 0:\n            new_ip_list.append(each)\n    return \".\".join(new_ip_list)\n",
        "num_ids": 67
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 1:\n        return list1[0]\n    return list1[1] - list1[0]\n",
        "num_ids": 35
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for num in list1:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    print 'even number list', even_list\n    print 'odd number list', odd_list\n    diff_list = [even_list[0] - odd_list[0]]\n    print 'difference list', diff_list\n    return diff_list\n",
        "num_ids": 116
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 1:\n        return list1[0]\n    else:\n        return list1[0] - list1[1]\n",
        "num_ids": 39
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    for i in range(len(list1)):\n        if i%2==0:\n            if list1[i]%2==0:\n                print \"Even: \", list1[i]\n            else:\n                print \"Odd: \", list1[i]\n",
        "num_ids": 66
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    diff = list1[0] - list1[1]\n    return diff\n",
        "num_ids": 21
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return list1[0] - list1[-1]\n",
        "num_ids": 17
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return list1[0] - list1[1]\n",
        "num_ids": 16
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n",
        "num_ids": 20
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_num = None\n    even_num = None\n    \n    if list1:\n        if list1[0] % 2:\n            odd_num = list1[0]\n            list1 = list1[1:]\n        else:\n            even_num = list1[0]\n            list1 = list1[1:]\n    \n    return (odd_num, even_num)\n",
        "num_ids": 95
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return [list1[0] - list1[1]]\n",
        "num_ids": 17
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    length = len(str1)\n    swap = 0\n    if str1 == str2:\n        return 0\n    for i in range(0,length) :\n        if str1[i]!= str2[i] :\n            temp = str1[i]\n            str1 = str1[:i] + str1[i+1:]\n            str2 = str2[:i] + str2[i+1:]\n            str1 = str1[::-1]\n            str2 = str2[::-1]\n            swap += 1\n    return swap\n",
        "num_ids": 139
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2) : \n        return -1\n    swaps = 0\n    for i in range(len(str1)) : \n        if str1[i]!= str2[i] : \n            swaps += 1\n            str1 = str1[:i] + str2[i] + str1[i+1:]\n            str2 = str2[:i] + str1[i] + str2[i+1:]\n    return swaps\n",
        "num_ids": 120
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1 = list(str1)\n    str2 = list(str2)\n    if len(str1)!= len(str2) : \n        return -1\n    else : \n        count = 0\n        for i in range(len(str1)) : \n            if str1[i] == '0' and str2[i] == '1' : \n                str1[i] = '1'\n                str2[i] = '0'\n                count += 1\n            elif str1[i] == '1' and str2[i] == '0' : \n                continue\n            else : \n                continue\n    return count \n",
        "num_ids": 159
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    if len(str1) == 0 :\n        return 0\n    elif len(str1) == 1 :\n        if str1 == '1' :\n            return 0\n        else :\n            return 1\n    elif len(str1) == len(str2) :\n        if str1 == str2 :\n            return 0\n        else :\n            return 1\n    \n    # 2. Else convert the string to a list of digits \n    temp = list(str1)\n    temp2 = list(str2)\n    \n    # 3. Find the biggest and smallest values of the list of digits\n    max_val = max(temp)\n    min_val = min(temp)\n    \n    # 4. If the first digit is smaller than the second digit, swap the two digits and increment the count by 1\n    if temp[0] < temp[1] :\n        temp[0],temp[1] = temp[1],temp[0]\n        str1 = ''\n        for i in temp :\n            str1 = str1 + str(i)\n        count = count + 1\n    \n    # 5. If the first digit is greater than the second digit, decrement the count by 1\n    elif temp[0] > temp[1] :\n        count = count - 1\n    \n    # 6. If the first and second digit are equal, decrement the count by 1\n    else :\n        pass\n    \n    # 7. If the first and second digit are equal to the largest and smallest digits of the string, return the count\n    if str1 == str2 :\n        return count\n    \n    # 8. Else for the remaining digits, if the digit is greater than the largest digit, swap the digit with the second largest digit and decrement the count by 1\n    else :\n        for i in range(2,len(temp)) :\n            if temp[i] > max_val :\n                temp[0],temp[i] = temp[i],temp[0]\n                count = count - 1\n    \n    # 9. If the digit is less than the smallest digit, swap the digit with the second smallest digit and increment the count by 1\n    for i in range(2,len(temp)) :\n        if temp[i] < min_val :\n            temp[0],temp[i] = temp[i],temp[0]\n            count = count + 1\n    \n    # 10. If the first and second digit are equal to the second and smallest digits of the string, return the count\n    if str1 == str2 :\n        return count\n    \n    # 11. Else convert the list back to a string\n    str1 = ''\n    for i in temp :\n        str1 = str1 + str(i)\n    \n    return count\n    \n    ",
        "num_ids": 638
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2) : \n        return False\n    if str1 == str2 : \n        return 0\n    if str1[0] == str2[0] : \n        return min_Swaps(str1[1:],str2[1:])\n    else : \n        return 1 + min_Swaps(str1[1:],str2[1:])\n        \n    \ndef sort_String(str1,str2) : \n    '''\n    Write a python function to sort the characters of a string in alphabetical order.\n    '''\n    if len(str1)!= len(str2) : \n        return False\n    if str1 == str2 : \n        return True\n    if str1[0] == str2[0] : \n        return sort_String(str1[1:],str2[1:])\n    else : \n        return False\n        \n    \ndef check_Permutation(str1,str2) : \n    '''\n    Write a python function to check whether a given string is permutation of another string.\n    '''\n    if len(str1)!= len(str2) : \n        return False\n    if str1 == str2 : \n        return True\n    if str1[0] == str2[0] : \n        return check_Permutation(str1[1:],str2[1:])\n    else : \n        return False\n    \n    \ndef count_Char(str1,char) : \n    '''\n    Write a python function to count the number of occurences of a given character in a string.\n    '''\n    if len(str1)!= 1 : \n        return 0\n    if str1 == char : \n        return 1\n    else : \n        return count_Char(str1[1:],char) + 1\n        \n    \ndef is_Palindrome(str1) : \n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    if len(str1)!= 1 : \n        return False\n    if str1 == str1[::-1] : \n        return True\n    else : \n        return False\n    \n    \ndef string_Reversal(str1) : \n    '''\n    Write a python function to reverse a given string.\n    '''\n    if len(str1) == 1 : \n        return str1\n    else : \n        return string_Reversal(str1[1:]) + str1[0]\n        \n    \ndef encrypt(str1) : \n    '''\n    Write a python function to encrypt a given string using ROT13 Cipher.\n    '''\n    if len(str1) == 1 : \n        return str1\n    else : \n        return chr((ord(str1[0])+13)%26 + ord('a')) + encrypt(str1[1:])\n        \n        \ndef decrypt(str1) : \n    '''\n    Write a python function to decrypt a given string using ROT13 Cipher.\n    '''\n    if len(str1) == 1 : \n        return str1\n    else : \n        return chr((ord(str1[0])-13)%26 + ord('a')) + decrypt(str1[1:])\n        \n        \ndef rearrange(str1) : \n    '''\n    Write a python function to rearrange given string to make it a palindrome.\n    '''\n    if len(str1) == 1 : \n        return str1\n    else : \n        if is_Palindrome(str1) : \n            return str1\n        else : \n            return str1[0] + rearrange(str1[1:])\n            \n            \ndef count_Anagram(str1) : \n    '''\n    Write a python function to count the number of anagrams in a given string.\n    '''\n    if len(str1) == 1 : \n        return 1\n    else : \n        if str1[0] in str1[1:] : \n            return 1 + count_Anagram(str1[1:])\n        else : \n            return count_Anagram(str1[1:])\n        \n    \ndef check_Anagram(str1,str2) : \n    '''\n    Write a python function to check whether two given strings are anagram of each other.\n    '''\n    if len(str1)!= len(str2) : \n        return False\n    if str1 == str2 : \n        return True\n    if str1[0] in str1[1:] : \n        return check_Anagram(str1[1:],str2[1:])\n    else : \n        return False\n        \n        \ndef remove_Duplicates(str1) : \n    '''\n    Write a python function to remove duplicate characters from a given string.\n    '''\n    if len(str1) == 1 : \n        return str1\n    else : \n        if str1[0] == str1[1] : \n            return remove_Duplicates(str1[1:])\n        else : \n            return str1[0] + remove_Duplicates(str1[1:])\n        \n    \ndef count_char(str1) : \n    '''\n    Write a python function to count the number of each characters in a given string.\n    '''\n    if len(str1) == 1 : \n        return {str1[0] : 1}\n    else : \n        if str1[0] in str1[1:] : \n            return count_char(str1[1:])\n        else : \n            temp = {}\n            temp[str1[0]] = 1 + count_char(str1[1:])[str1[0]]\n            return temp\n    \n    \ndef max_char(str1) : \n    '''\n    Write a python function to find the character with maximum frequency in a given string.\n    '''\n    if len(str1) == 1 : \n        return str1\n    else : \n        if str1[0] in str1[1:] : \n            return max_char(str1[1:])\n        else : \n            if str1[0] in str1[1:] : \n                return str1[0]\n            else : \n                return max_char(str1[1:])\n        \ndef most_common(str1) : \n    '''\n    Write a python function to find the most common character in a given string.\n    '''\n    if len(str1) == 1 : \n        return str1\n    else : \n        if str1[0] in str1[1:] : \n            return most_common(str1[1:])\n        else : \n            if str1[0] in str1[1:] : \n                return str1[0]\n            else : \n                return most_common(str1[1:])\n    \n    \ndef binary_to_decimal(str1) : \n    '''\n    Write a python function to convert a binary number represented as a string to its decimal equivalent.\n    '''\n    if len(str1) == 1 : \n        return str1\n    else : \n        if str1[0] in str1[1:] : \n            return binary_to_decimal(str1[1:])\n        else : \n            if str1[0] in str1[1:] : \n                return int(str1[0]) + 2 * binary_to_decimal(str1[1:])\n            else : \n                return 1 + binary_to_decimal(str1[1:])\n    \n    \ndef decimal_to_binary(str1) : \n    '''\n    Write a python function to convert a decimal number represented as a string to its binary equivalent.\n    '''\n    if len(str1) == 1 : \n        return str1\n    else : \n        if str1[0] in str1[1:] : \n            return decimal_to_binary(str1[1:])\n        else : \n            if str1[0] in str1[1:] : \n                return str(str1[0]) +'' + decimal_to_binary(str1[1:])\n            else : \n                retur",
        "num_ids": 109
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if (len(str1)!= len(str2)): \n        return -1\n    \n    if (str1 == str2):\n        return 0\n    count = 0\n    for i in range(len(str1)) :\n        if (str1[i]!= str2[i]) :\n            temp = str1[i]\n            str1 = str1[:i] + str2[i] + str1[i + 1:]\n            str2 = temp + str2[i + 1:]\n            count += 1\n    return count\n",
        "num_ids": 132
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    l1,l2 = len(str1),len(str2)\n    if l1!= l2 : return -1\n    if str1 == str2 : return 0\n    for i in range(l1) :\n        if str1[i]!= str2[i] :\n            str1 = str1[:i] + '0' + str1[i+1:]\n            str2 = str2[:i] + '1' + str2[i+1:]\n            break\n    return 1 + min_Swaps(str1,str2)\n",
        "num_ids": 136
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            count += 1\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2) : \n        return -1\n    else : \n        n = len(str1)\n        count = 0\n        for i in xrange(n) : \n            if str1[i]!= str2[i] : \n                count += 1\n        return count \n",
        "num_ids": 81
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    j = 0\n    for i in range(len(str1)) :\n        if (str1[i]!= str2[i] ) :\n            j = j + 1\n            str1 = str1[:i]+'1'+str1[i+1:]\n            str2 = str2[:i]+'0'+str2[i+1:]\n    return j\n",
        "num_ids": 93
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if type(tuple_list) is not tuple:\n        raise ValueError(\"Must pass a tuple\")\n    else:\n        if type(tuple_list) is tuple:\n            size = sys.getsizeof(tuple_list)\n            return size\n            \n",
        "num_ids": 65
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "num_ids": 16
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    count = 0\n    for x in tuple_list:\n        count = count + sys.getsizeof(x)\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size\n",
        "num_ids": 32
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    num=0\n    for i in range(0,len(tuple_list)):\n        num+=sys.getsizeof(tuple_list[i])\n    return num\n",
        "num_ids": 45
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    #get the size of a tuple\n    #iterate through the tuple\n    #and return the size of the tuple\n    return len(tuple_list)\n",
        "num_ids": 39
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    for tup in tuple_list:\n        for item in tup:\n            sys.getsizeof(item)\n",
        "num_ids": 30
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    result = 0\n    for element in tuple_list:\n        result += sys.getsizeof(element)\n    return result\n",
        "num_ids": 32
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_size_list = []\n    for tuple_item in tuple_list:\n        for item in tuple_item:\n            item_size = sys.getsizeof(item)\n            tuple_size_list.append(item_size)\n    tuple_size = sum(tuple_size_list)\n    return tuple_size\n",
        "num_ids": 83
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    print(sys.getsizeof(tuple_list))\n",
        "num_ids": 17
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    if len(arr1) == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    n = min(len(arr1), len(arr2))\n    if k > n:\n        return None\n    if arr1[n // 2] < arr2[n // 2]:\n        if k <= n // 2:\n            return find_kth(arr1[:n // 2], arr2, k)\n        else:\n            return find_kth(arr1, arr2[n // 2:], k - n // 2)\n    else:\n        if k <= n // 2:\n            return find_kth(arr1, arr2[:n // 2], k)\n        else:\n            return find_kth(arr1[n // 2:], arr2, k - n // 2)\n",
        "num_ids": 242
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    \n    if k == 1:\n        return min(arr1[0], arr2[0])\n    \n    mid1 = len(arr1) / 2\n    mid2 = len(arr2) / 2\n    \n    if k > (mid1 + mid2):\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    \n    if arr1[mid1] > arr2[mid2]:\n        return find_kth(arr1[:mid1], arr2, k)\n    else:\n        return find_kth(arr1, arr2[:mid2], k)\n",
        "num_ids": 244
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    len1 = len(arr1)\n    len2 = len(arr2)\n    if len1 > len2:\n        return find_kth(arr2, arr1, k)\n    if len2 == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    else:\n        pivot1 = arr1[int(len1 / 2)]\n        pivot2 = arr2[int(len2 / 2)]\n        if pivot1 < pivot2:\n            if k <= int(len1 / 2):\n                return find_kth(arr1[:int(len1 / 2)], arr2, k)\n            else:\n                return find_kth(arr1, arr2[int(len2 / 2):], k - int(len1 / 2) - 1)\n        else:\n            if k <= int(len2 / 2):\n                return find_kth(arr1, arr2[:int(len2 / 2)], k)\n            else:\n                return find_kth(arr1[int(len1 / 2):], arr2[int(len2 / 2):], k - int(len2 / 2) - 1)\n",
        "num_ids": 294
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1_len = len(arr1)\n    arr2_len = len(arr2)\n    if arr1_len + arr2_len == k:\n        if arr1[arr1_len-1] > arr2[arr2_len-1]:\n            return arr2[arr2_len-k]\n        else:\n            return arr1[arr1_len-k]\n",
        "num_ids": 95
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    return binary_search(arr1, arr2, k)\n",
        "num_ids": 17
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    idx1, idx2 = 0, 0\n    \n    while True:\n        if idx1 == len(arr1):\n            return arr2[idx2 + k - 1]\n        if idx2 == len(arr2):\n            return arr1[idx1 + k - 1]\n        if k == 1:\n            return min(arr1[idx1], arr2[idx2])\n        if k > 1:\n            if arr1[idx1] > arr2[idx2]:\n                k -= 1\n                idx2 += 1\n            else:\n                k -= 1\n                idx1 += 1\n                \ndef find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    idx1, idx2 = 0, 0\n    \n    while True:\n        if idx1 == len(arr1):\n            return arr2[idx2 + k - 1]\n        if idx2 == len(arr2):\n            return arr1[idx1 + k - 1]\n        if k == 1:\n            return min(arr1[idx1], arr2[idx2])\n        if k > 1:\n            if arr1[idx1] > arr2[idx2]:\n                k -= 1\n                idx2 += 1\n            else:\n                k -= 1\n                idx1 += 1\n",
        "num_ids": 153
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    ptr1 = 0\n    ptr2 = 0\n    count = 0\n    while count <= k:\n        if ptr1 == len(arr1):\n            return arr2[ptr2 + k - count]\n        if ptr2 == len(arr2):\n            return arr1[ptr1 + k - count]\n        if arr1[ptr1] < arr2[ptr2]:\n            count += 1\n            ptr1 += 1\n        else:\n            ptr2 += 1\n    return -1\n",
        "num_ids": 116
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1 == [] and arr2 == []:\n        return None\n    if arr1 == []:\n        return arr2[k]\n    if arr2 == []:\n        return arr1[k]\n    if k <= len(arr1) and k <= len(arr2):\n        if arr1[len(arr1)/2] == arr2[len(arr2)/2]:\n            return arr1[len(arr1)/2]\n        elif arr1[len(arr1)/2] < arr2[len(arr2)/2]:\n            return find_kth(arr1[len(arr1)/2:], arr2, k-len(arr1[len(arr1)/2:]))\n        else:\n            return find_kth(arr1, arr2[len(arr2)/2:], k-len(arr2[len(arr2)/2:]))\n    else:\n        if len(arr1) > len(arr2):\n            return find_kth(arr1[len(arr1)/2:], arr2, k-len(arr2[len(arr2)/2:]))\n        else:\n            return find_kth(arr1, arr2[len(arr2)/2:], k-len(arr1[len(arr1)/2:]))\n",
        "num_ids": 305
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    if len(arr1) == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(k / 2, len(arr1))\n    j = k - i\n    if arr1[i-1] < arr2[j-1]:\n        return find_kth(arr1[i:], arr2, k - i)\n    else:\n        return find_kth(arr1, arr2[j:], k - j)\n",
        "num_ids": 161
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    idx1, idx2 = 0, 0\n    \n    while idx1 < len(arr1) and idx2 < len(arr2):\n        if arr1[idx1] < arr2[idx2]:\n            idx1 += 1\n        elif arr1[idx1] > arr2[idx2]:\n            idx2 += 1\n        else:\n            return arr1[idx1]\n        \n        if idx1 == len(arr1) or idx2 == len(arr2):\n            return arr2[idx2] if idx2 < len(arr2) else arr1[idx1]\n",
        "num_ids": 156
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = number\n    sum = 0\n    while n:\n        rem = n%10\n        sum = sum + rem**3\n        n = n//10\n    if sum == number:\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    str_num = str(number)\n    length = len(str_num)\n    if length > 1:\n        str_num = int(str_num)\n    else:\n        return True\n    if (str_num == (int(str_num) ** length)):\n        return True\n    else:\n        return False\n",
        "num_ids": 80
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    \n    if(number == 0):\n        return True\n    \n    number_list = list(str(number))\n    sum_of_squares = 0\n    \n    for digit in number_list:\n        sum_of_squares += int(digit)**len(str(number))\n    \n    return sum_of_squares == number\n",
        "num_ids": 84
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    total = 0\n    while temp > 0:\n        digit = temp % 10\n        total += digit ** 3\n        temp //= 10\n    if number == total:\n        print(\"Armstrong\")\n    else:\n        print(\"Not an Armstrong Number\")\n    \n",
        "num_ids": 68
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 0:\n        return False\n    if number == 0:\n        return True\n    else:\n        length = len(str(number))\n        sum = 0\n        for digit in str(number):\n            sum += int(digit)**length\n        return sum == number\n",
        "num_ids": 68
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    while temp:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if sum == number:\n        return True\n    return False\n",
        "num_ids": 52
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # positive case\n    if number >= 0:\n        # check if the number is power of 3\n        if int(number) == pow(3, len(str(number))):\n            return True\n        return False\n    # negative case\n    else:\n        # return False\n        return False\n",
        "num_ids": 70
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # only integer numbers\n    if not isinstance(number, int):\n        raise ValueError(\"Only integer numbers are allowed.\")\n    # if number is zero, return False\n    if number == 0:\n        return False\n    # convert number to string, then reverse the string\n    number = str(number)\n    number = number[::-1]\n    # calculate the sum of the power of each digit to the power of length\n    length = len(number)\n    for i in range(length):\n        power = length - i - 1\n        number_digit = int(number[i])\n        result = number_digit ** power\n        if result == int(number):\n            return True\n    return False\n",
        "num_ids": 163
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    digits = len(str(number))\n    total = 0\n    num = number\n    while(num > 0):\n        total += pow(num%10, digits)\n        num /= 10\n    if total == number:\n        return True\n    else:\n        return False\n",
        "num_ids": 68
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = str(number)\n    total = 0\n    for i in num:\n        total += int(i)**3\n    return total == number\n",
        "num_ids": 38
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    s = 0\n    for i in range(number + 1):\n        s = s + i\n    avg = s / number\n    return s, avg\n",
        "num_ids": 39
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        total += i\n    average = total / number\n    return total, average\n",
        "num_ids": 38
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        total += i\n    return total, total/number\n",
        "num_ids": 33
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    #TODO\n    return sum(number),sum(number)/len(number)\n",
        "num_ids": 23
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    print \"sum and average of first %d natural numbers:\" % number\n    sum = 0\n    i = 1\n    while i <= number:\n        sum = sum + i\n        i = i + 1\n    avg = float(sum) / float(number)\n    print \"%d + %d / %d\" % (sum, number, avg)\n",
        "num_ids": 83
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number == 0:\n        return 0\n    else:\n        return number + sum_average(number - 1)\n",
        "num_ids": 30
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    assert isinstance(number, int)\n    assert number >= 0\n    return sum(range(1, number + 1)), sum(range(1, number + 1)) / len(range(1, number + 1))\n",
        "num_ids": 52
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for n in range(number + 1):\n        sum += n\n    average = sum / number\n    return sum, average\n",
        "num_ids": 36
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,number+1):\n        sum += i\n    return sum, sum/number\n",
        "num_ids": 33
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    avg = 0\n    for i in range(1, number + 1):\n        sum += i\n    avg = sum / number\n    return sum, avg\n",
        "num_ids": 45
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2 == 0\n",
        "num_ids": 10
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2) == 0 : \n        return True\n    else : \n        return False\n",
        "num_ids": 27
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 : \n        return True\n    else : \n        return False\ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    if n%2!=0 : \n        return True\n    else : \n        return False\ndef is_Prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n%2==0 : \n        return False\n    for i in range(3,n) : \n        if n%i==0 : \n            return False\n    return True\ndef is_Even_Digits(n) : \n    '''\n    Write a python function to check whether the given number is even-digit or not.\n    '''\n    while n : \n        if n%10%2==0 : \n            return True\n        else : \n            return False\n    return False\ndef is_Odd_Digits(n) : \n    '''\n    Write a python function to check whether the given number is odd-digit or not.\n    '''\n    while n : \n        if n%10%2!=0 : \n            return True\n        else : \n            return False\n    return False\ndef is_Palindrome(n) : \n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    if str(n)==str(n)[::-1] : \n        return True\n    else : \n        return False\ndef is_Sum_Digits(n) : \n    '''\n    Write a python function to check whether the given number is sum-digit or not.\n    '''\n    if sum(map(int,str(n)))==n : \n        return True\n    else : \n        return False\ndef is_Product_Digits(n) : \n    '''\n    Write a python function to check whether the given number is product-digit or not.\n    '''\n    if n>=10 and n%9==0 : \n        return True\n    else : \n        return False\ndef is_Divisible_by_9(n) : \n    '''\n    Write a python function to check whether the given number is divisible by 9 or not.\n    '''\n    if n%9==0 : \n        return True\n    else : \n        return False\ndef is_Divisible_by_99(n) : \n    '''\n    Write a python function to check whether the given number is divisible by 99 or not.\n    '''\n    if n%99==0 : \n        return True\n    else : \n        return False\ndef is_Divisible_by_999(n) : \n    '''\n    Write a python function to check whether the given number is divisible by 999 or not.\n    '''\n    if n%999==0 : \n        return True\n    else : \n        return False\ndef is_Divisible_by_99999(n) : \n    '''\n    Write a python function to check whether the given number is divisible by 999999 or not.\n    '''\n    if n%9999==0 : \n        return True\n    else : \n        return False\ndef is_Perfect_Number(n) : \n    '''\n    Write a python function to check whether the given number is perfect number or not.\n    '''\n    l=[i for i in range(1,n) if n%i==0]\n    return n==sum(l)\ndef is_Consecutive_Digits(n) : \n    '''\n    Write a python function to check whether the given number is consecutive-digits or not.\n    '''\n    if len(set(map(int,str(n))))==len(str(n)) : \n        return True\n    else : \n        return False\ndef is_Two_Palindromes(n) : \n    '''\n    Write a python function to check whether the given number is two-palindrome or not.\n    '''\n    if str(n)==str(n)[::-1] and str(n)==str(n)[::-1] : \n        return True\n    else : \n        return False\ndef is_Permutation(n) : \n    '''\n    Write a python function to check whether the given number is permutation or not.\n    '''\n    if len(str(n))!=len(set(str(n))) : \n        return False\n    else : \n        return True\ndef is_Ugly_Number(n) : \n    '''\n    Write a python function to check whether the given number is ugly number or not.\n    '''\n    if is_Prime(n) and is_Divisible_by_9(n) and is_Divisible_by_99(n) and is_Divisible_by_999(n) and is_Divisible_by_99999(n) : \n        return True\n    else : \n        return False\ndef is_Nth_Digit_Even(n) : \n    '''\n    Write a python function to check whether the given number is nth even digit or not.\n    '''\n    if is_Even_Digits(n) : \n        return True\n    else : \n        return False\ndef is_Nth_Digit_Odd(n) : \n    '''\n    Write a python function to check whether the given number is nth odd digit or not.\n    '''\n    if is_Odd_Digits(n) : \n        return True\n    else : \n        return False\ndef is_Nth_Digit_Palindrome(n) : \n    '''\n    Write a python function to check whether the given number is nth palindrome digit or not.\n    '''\n    if is_Palindrome(n) : \n        return True\n    else : \n        return False\ndef is_Nth_Digit_Sum_Digits(n) : \n    '''\n    Write a python function to check whether the given number is nth sum-digit or not.\n    '''\n    if is_Sum_Digits(n) : \n        return True\n    else : \n        return False\ndef is_Nth_Digit_Product_Digits(n) : \n    '''\n    Write a python function to check whether the given number is nth product-digit or not.\n    '''\n    if is_Product_Digits(n) : \n        return True\n    else : \n        return False\ndef is_Nth_Digit_Divisible_by_9(n) : \n    '''\n    Write a python function to check whether the given number is nth divisible by 9 or not.\n    '''\n    if is_Divisible_by_9(n) : \n        return True\n    else : \n        return False\ndef is_Nth_Digit_Divisible_by_99(n) : \n    '''\n    Write a python function to check whether the given number is nth divisible by 99 or not.\n    '''\n    if is_Divisible_by_99(n) : \n        return True\n    else : \n        return False\ndef is_Nth_Digit_Divisible_by_999(n) : \n    '''\n    Write a python function to check whether the given number is nth divisible by 999 or not.\n    '''\n    if is_Divisible_by_999(n) : \n        return True\n    else : \n        return False\ndef is_Nth_Digit_Divisible_by_99999(n) : \n    '''\n    Write a python function to check whether the given number is nth divisible by 999999 or not.\n    '''\n    if is_Divisible_by_99999(n) : \n        return True\n    else : \n        return False\ndef is_Nth_Digit_Perfect_Number(n) : \n    '''\n    Write a python function to check whether the given number is nth perfect number or not.\n    '''\n    if is_Perfect_Number(n) : \n        return True\n    else : \n        return False\ndef is_Nth_Digit_Consecutive_Digits(n) : \n    '''\n    Write a python function to check whether the given number is nth consecutiv",
        "num_ids": 18
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n%2)==0 :\n        return True\n    else :\n        return False\n        \ndef is_Even1(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return (n%2)==0\n        \ndef is_Even2(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return (n%2)==0\n",
        "num_ids": 12
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2 == 0\n    \ndef factorial(n) : \n    '''\n    Write a python function to return factorial of the given number.\n    '''\n    return reduce(lambda x, y: x*y, range(1, n+1))\n    \ndef fibonacci(n) : \n    '''\n    Write a python function to return nth fibonacci number.\n    '''\n    if n < 0 : \n        return -1\n    if n == 0 or n == 1 : \n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n    \ndef factorial_iterative(n) : \n    '''\n    Write a python function to return factorial of the given number using iterative approach.\n    '''\n    fact = 1\n    while n > 1 : \n        fact = fact * n\n        n = n - 1\n    return fact\n    \ndef fibonacci_iterative(n) : \n    '''\n    Write a python function to return nth fibonacci number using iterative approach.\n    '''\n    if n < 0 : \n        return -1\n    if n == 0 or n == 1 : \n        return n\n    a = 0\n    b = 1\n    for i in range(2, n+1) : \n        c = a + b\n        a = b\n        b = c\n    return b\n    \ndef sum_of_digits(n) : \n    '''\n    Write a python function to return sum of digits of the given number.\n    '''\n    sum = 0\n    while n > 0 : \n        sum = sum + n % 10\n        n = n // 10\n    return sum\n    \ndef sum_of_digits_recursive(n) : \n    '''\n    Write a python function to return sum of digits of the given number using recursive approach.\n    '''\n    return sum_of_digits_recursive(n//10) + n%10\n    \ndef fibonacci_recursive(n) : \n    '''\n    Write a python function to return nth fibonacci number using recursive approach.\n    '''\n    if n < 0 : \n        return -1\n    if n == 0 or n == 1 : \n        return n\n    return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)\n    \ndef reverse_recursive(n) : \n    '''\n    Write a python function to return reverse of the given number using recursive approach.\n    '''\n    if n < 0 : \n        return -1\n    if n == 0 : \n        return 0\n    return n % 10 + 10 * reverse_recursive(n//10)\n    \ndef factorial_recursive(n) : \n    '''\n    Write a python function to return factorial of the given number using recursive approach.\n    '''\n    if n == 0 or n == 1 : \n        return 1\n    return n * factorial_recursive(n-1)\n    \ndef reverse_iterative(n) : \n    '''\n    Write a python function to return reverse of the given number using iterative approach.\n    '''\n    reverse = 0\n    while n > 0 : \n        remainder = n % 10\n        reverse = reverse * 10 + remainder\n        n = n // 10\n    return reverse\n    \ndef is_palindrome_recursive(n) : \n    '''\n    Write a python function to check whether the given number is palindrome or not using recursive approach.\n    '''\n    if n < 0 : \n        return -1\n    if n == 0 or n == 1 : \n        return 1\n    return is_palindrome_recursive(n//10) * 10 + n%10 == n\n    \ndef is_palindrome_iterative(n) : \n    '''\n    Write a python function to check whether the given number is palindrome or not using iterative approach.\n    '''\n    reverse = 0\n    while n > 0 : \n        remainder = n % 10\n        reverse = reverse * 10 + remainder\n        n = n // 10\n    return n == reverse\n    \ndef is_palindrome_memo(n) : \n    '''\n    Write a python function to check whether the given number is palindrome or not using memoization approach.\n    '''\n    memo = {}\n    return is_palindrome_memo_helper(n, 0, memo)\n    \ndef is_palindrome_memo_helper(n, i, memo) : \n    if i == len(n) : \n        return 1\n    if i > len(n) : \n        return 0\n    if n[i] == n[len(n)-i-1] : \n        return is_palindrome_memo_helper(n, i+1, memo)\n    else : \n        return 0\n    \ndef is_palindrome_dp(n) : \n    '''\n    Write a python function to check whether the given number is palindrome or not using dynamic programming approach.\n    '''\n    dp = [[0 for x in range(len(n))] for y in range(len(n))]\n    return is_palindrome_dp_helper(n, 0, len(n)-1, dp)\n    \ndef is_palindrome_dp_helper(n, i, j, dp) : \n    if i > j : \n        return 1\n    if dp[i][j]!= 0 : \n        return dp[i][j]\n    if n[i] == n[j] : \n        dp[i][j] = is_palindrome_dp_helper(n, i+1, j-1, dp)\n        return dp[i][j]\n    else : \n        dp[i][j] = 0\n        return 0\n    \ndef is_palindrome_dp_memo(n) : \n    '''\n    Write a python function to check whether the given number is palindrome or not using dynamic programming approach using memoization.\n    '''\n    memo = [[0 for x in range(len(n))] for y in range(len(n))]\n    return is_palindrome_dp_memo_helper(n, 0, len(n)-1, memo)\n    \ndef is_palindrome_dp_memo_helper(n, i, j, memo) : \n    if i > j : \n        return 1\n    if memo[i][j]!= 0 : \n        return memo[i][j]\n    if n[i] == n[j] : \n        memo[i][j] = is_palindrome_dp_memo_helper(n, i+1, j-1, memo)\n        return memo[i][j]\n    else : \n        memo[i][j] = 0\n        return 0\n    \ndef is_palindrome_dp_tabulation(n) : \n    '''\n    Write a python function to check whether the given number is palindrome or not using dynamic programming approach using table lookup.\n    '''\n    dp = [[0 for x in range(len(n))] for y in range(len(n))]\n    for i in range(len(n)) : \n        dp[i][i] = 1\n    for i in range(len(n)-1, -1, -1) : \n        for j in range(i, len(n)) : \n            if n[i] == n[j] : \n                dp[i][j] = dp[i+1][j-1] + 1\n    return dp[0][len(n)-1]\n    \ndef rotate_matrix(matrix) : \n    '''\n    Write a python function to rotate the given matrix by 90 degrees.\n    '''\n    if len(matrix)!= len(matrix[0]) : \n        return -1\n    n = len(matrix)\n    for i in range(n//2) : \n        for j in range(n-1-i*2) : \n            temp = matrix[i][j]\n            matrix[i][j] = matrix[n-j-1][i]\n            matrix[n-j-1][i] = matrix[n-i-1][n-j-1]\n            matri",
        "num_ids": 125
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        print(\"n is even\")\n    else :\n        print(\"n is odd\")\n",
        "num_ids": 32
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 :\n        return True\n    else:\n        return False\n    \ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    if n%2 == 1 :\n        return True\n    else:\n        return False\n    \ndef is_Odd_Num(n): \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    if n%2 == 1 :\n        return True\n    else:\n        return False\n    \ndef sum_digits(n) : \n    '''\n    Write a python function to calculate the sum of the digits of a given number.\n    '''\n    tot = 0\n    while n>0:\n        tot = tot + n%10\n        n = n//10\n    return tot\n    \ndef sum_digits_num(n) : \n    '''\n    Write a python function to calculate the sum of the digits of a given number.\n    '''\n    tot = 0\n    for i in range(0,n):\n        tot = tot + i\n    return tot\n    \ndef sum_digits_num_rev(n) : \n    '''\n    Write a python function to calculate the sum of the digits of a given number.\n    '''\n    tot = 0\n    for i in range(0,n):\n        tot = tot + i\n    return tot\n    \ndef sum_digits_num_recur(n) : \n    '''\n    Write a python function to calculate the sum of the digits of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n%10 + sum_digits_num_recur(n//10)\n    \ndef factorial(n) : \n    '''\n    Write a python function to calculate the factorial of the given number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n    \ndef factorial_num(n) : \n    '''\n    Write a python function to calculate the factorial of the given number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * factorial_num(n-1)\n    \ndef factorial_num_recur(n) : \n    '''\n    Write a python function to calculate the factorial of the given number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * factorial_num_recur(n-1)\n    \ndef factorial_num_recur_2(n) : \n    '''\n    Write a python function to calculate the factorial of the given number.\n    '''\n    tot = 1\n    for i in range(1,n+1):\n        tot = tot * i\n    return tot\n    \ndef factorial_num_recur_3(n) : \n    '''\n    Write a python function to calculate the factorial of the given number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * factorial_num_recur_3(n-1)\n    \ndef factorial_num_recur_4(n) : \n    '''\n    Write a python function to calculate the factorial of the given number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * factorial_num_recur_4(n-1)\n    \ndef fibonacci(n) : \n    '''\n    Write a python function to calculate the fibonacci sequence of the given number.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n    \ndef fibonacci_num(n) : \n    '''\n    Write a python function to calculate the fibonacci sequence of the given number.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci_num(n-1) + fibonacci_num(n-2)\n    \ndef fibonacci_num_recur(n) : \n    '''\n    Write a python function to calculate the fibonacci sequence of the given number.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci_num_recur(n-1) + fibonacci_num_recur(n-2)\n    \ndef fibonacci_num_recur_2(n) : \n    '''\n    Write a python function to calculate the fibonacci sequence of the given number.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci_num_recur_2(n-1) + fibonacci_num_recur_2(n-2)\n    \ndef fibonacci_num_recur_3(n) : \n    '''\n    Write a python function to calculate the fibonacci sequence of the given number.\n    '''\n    tot = 0\n    a = 0\n    b = 1\n    for i in range(1,n):\n        tot = a+b\n        a = b\n        b = tot\n    return tot\n    \ndef add_digits(n) : \n    '''\n    Write a python function to calculate the sum of the digits of a given number.\n    '''\n    tot = 0\n    while n>0:\n        tot = tot + n%10\n        n = n//10\n    return tot\n    \ndef add_digits_num(n) : \n    '''\n    Write a python function to calculate the sum of the digits of a given number.\n    '''\n    tot = 0\n    for i in range(0,n):\n        tot = tot + i\n    return tot\n    \ndef add_digits_num_recur(n) : \n    '''\n    Write a python function to calculate the sum of the digits of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n%10 + add_digits_num_recur(n//10)\n    \ndef add_digits_num_recur_2(n) : \n    '''\n    Write a python function to calculate the sum of the digits of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n%10 + add_digits_num_recur_2(n//10)\n    \ndef add_digits_num_recur_3(n) : \n    '''\n    Write a python function to calculate the sum of the digits of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n%10 + add_digits_num_recur_3(n//10)\n    \ndef add_digits_num_recur_4(n) : \n    '''\n    Write a python function to calculate the sum of the digits of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n%10 + add_digits_num_recur_4(n//10)\n    \ndef add_digits_num_recur_5(n) : \n    '''\n    Write a python function to calculate the sum of the digits of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n%10 + add_digits_num_recur_5(n//10)\n    \ndef add_digits_num_recur_6(n) : \n    '''\n    Write a python function to calculate the sum of the digits of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n%10 + add_digits_num_recur_6(n//10)\n    \ndef add_digits_num_recur_7(n) : \n    '''\n    Write a python function to calculate the sum o",
        "num_ids": 12
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True \n    else : \n        return False \n        \n",
        "num_ids": 29
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n",
        "num_ids": 10
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for index in range(len(str1)):\n        if str1.count(str1[index]) > 1:\n            return str1[index]\n    return \"No repeated character found in the given string.\"\n    \n",
        "num_ids": 54
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] in str1[i+1:]:\n            return str1[i]\n    return None\n",
        "num_ids": 44
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if str1 == '':\n        return None\n",
        "num_ids": 14
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for i in str1:\n        if i in char_dict.keys():\n            return i\n        else:\n            char_dict[i] = 1\n    return False\n",
        "num_ids": 50
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    dict1 = {}\n    for c in str1:\n        if c in dict1:\n            return c\n        else:\n            dict1[c] = 1\n    return 'no'\n",
        "num_ids": 47
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    for i in range(0, len(str1)):\n        count = 1\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                count += 1\n        if count > 1:\n            return str1[i]\n    return 'There is no repeated character'\n",
        "num_ids": 93
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i)>1:\n            return i\n            break\n        elif str1.count(i)==1:\n            return \"No repeated character\"\n            break\n",
        "num_ids": 55
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    alphabets = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    for x in str1:\n        if x in alphabets:\n            alphabets.remove(x)\n        else:\n            return x\n",
        "num_ids": 99
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    for i in str1:\n        if str1.count(i) > 1:\n            return i\n    return 'None'\n",
        "num_ids": 43
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] in str1[i+1:]:\n            return str1[i]\n    return \"None\"\n",
        "num_ids": 46
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [str(n) + str(i) + str(j) + str(k) for i in range(10) for j in range(10) for k in range(10) if i * j * k <= n]\n",
        "num_ids": 55
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n <= 1:\n        return []\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [3,3]\n    ludic = [4]\n    for i in xrange(5,n):\n        if all(i%j!= 0 for j in ludic):\n            ludic.append(i)\n    return ludic\n",
        "num_ids": 92
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    \n    def get_lucid_nums(n, pre):\n        if n == 1:\n            return [1]\n        elif n == 2:\n            return [2]\n        elif n == 3:\n            return [3]\n        else:\n            pre.append(n)\n            return get_lucid_nums(n-1, pre) + get_lucid_nums(n-2, pre) + get_lucid_nums(n-3, pre)\n    \n    lucid_nums = []\n    lucid_nums = get_lucid_nums(n, [])\n    lucid_nums = sorted(lucid_nums)\n    return lucid_nums\n",
        "num_ids": 182
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in xrange(1,n+1):\n        num = i\n        while num:\n            if num % 10 == 0:\n                num = num / 10\n            else:\n                break\n        if i % num == 0:\n            lucids.append(i)\n    return lucids\n",
        "num_ids": 80
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    res = [1]\n    for i in xrange(2, n):\n        if is_lucid(i):\n            res.append(i)\n    return res\n",
        "num_ids": 44
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 1:\n        return [1]\n    if n <= 3:\n        return [1,2,3]\n    ludic = [1,2,3]\n    while True:\n        ludic.append(ludic[-1]+ludic[-2]+ludic[-3])\n        if ludic[-1] > n:\n            return ludic\n",
        "num_ids": 91
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    LUCID_NUMBERS = []\n",
        "num_ids": 13
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def is_lucid(n):\n        n_str = str(n)\n        for i in range(len(n_str)//2):\n            if n_str[i]!= n_str[-1-i]:\n                return False\n        return True\n    def get_lucids(n):\n        n_str = str(n)\n        res = [n]\n        for i in range(len(n_str)//2):\n            n = int(n_str[:len(n_str)//2] + n_str[len(n_str)//2:])\n            res.append(n)\n        return res\n    res = []\n    for i in range(1, n):\n        if is_lucid(i):\n            res.append(i)\n    return res\n",
        "num_ids": 197
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_nums = []\n    for i in range(1,n):\n        if (i**0.5).is_integer() and (i**0.5 + i) in ludic_nums:\n            ludic_nums.append(i)\n    return ludic_nums\n",
        "num_ids": 73
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_list = []\n    for x in range(2,n+1):\n        temp_x = x\n        l = 0\n        while temp_x:\n            l += 1\n            temp_x //= 10\n        if l % 2 == 0:\n            ludic_list.append(x)\n    return ludic_list\n",
        "num_ids": 82
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    \n    s = s.split(' ')\n    i = 0\n    for i in range(len(s)):\n        s[i] = s[i][::-1]\n    return''.join(s)\n",
        "num_ids": 54
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    reverse_word = \"\"\n    words = s.split(\" \")\n    for word in words:\n        reverse_word = reverse_word + word[::-1] + \" \"\n    return reverse_word[:-1]\n",
        "num_ids": 55
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(\" \")\n    words = list(reversed(words))\n    return \" \".join(words)\n    \ndef reverse_words_2(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(\" \")\n    words = list(reversed(words))\n    return \" \".join(words)\n    \ndef reverse_words_3(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_4(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_5(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(\" \")\n    words = words[::-1]\n    return \" \".join(words)\n    \ndef reverse_words_6(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_7(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(reversed(s.split()))\n    \ndef reverse_words_8(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = reversed(s)\n    return \" \".join(s)\n    \ndef reverse_words_9(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = reversed(s)\n    return \" \".join(s)\n    \ndef reverse_words_10(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_11(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_12(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_13(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_14(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_15(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_16(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_17(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_18(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_19(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_20(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_21(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_22(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_23(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_24(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_25(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_26(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_27(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_28(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_29(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_30(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_31(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n    \ndef reverse_words_32(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = ",
        "num_ids": 6
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n",
        "num_ids": 17
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    new_s = s.split(' ')\n    new_s.reverse()\n    new_s =''.join(new_s)\n    return new_s\n",
        "num_ids": 41
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split(\" \")\n    s = s[::-1]\n    s = \" \".join(s)\n    return s\n    \ndef reverse_words_alt(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split(\" \")\n    return \" \".join(s[::-1])\n",
        "num_ids": 25
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split(' ')))\n",
        "num_ids": 18
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s.reverse()\n    return \" \".join(s)\n    \nassert reverse_words('The quick brown fox') == 'fox The quick brown'\nassert reverse_words('The quick brown fox.') == 'fox. The quick brown'\nassert reverse_words('Why did you wait?  You\\'re going to pay for that!') == '! You\\'re going to pay for that! Why did you wait'\n",
        "num_ids": 104
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(reversed(s.split(\" \")))\n",
        "num_ids": 19
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n",
        "num_ids": 17
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    else:\n        for n in range(2,num):\n            if num % n == 0:\n                return False\n        return True\n",
        "num_ids": 45
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for n in range(2, num):\n        if num % n == 0:\n            return False\n    return True\n",
        "num_ids": 30
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 1:\n        return False\n    elif num == 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2,num):\n            if (num % i) == 0:\n                return False\n                break\n        else:\n            return True\n        \ndef reverse_string(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    string_to_reverse = ''\n    for i in range(len(string)):\n        string_to_reverse += string[-(i+1)]\n    return string_to_reverse\n",
        "num_ids": 46
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        if num % 2 == 0:\n            return False\n        else:\n            return prime_num(num-1)\n    \ndef is_prime(num):\n    return prime_num(num)\n",
        "num_ids": 76
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num%2 == 0:\n        return False\n    #if num%2 == 0:\n    #    return False\n    for i in range(3,num,2):\n        if num%i == 0:\n            return False\n    return True\n",
        "num_ids": 83
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2:\n        return True\n    if num < 2:\n        return False\n    if num % 2 == 0:\n        return False\n    if num == 3:\n        return True\n    for i in range(3, int(num**0.5+1), 2):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 86
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2,num):\n        if num%i == 0:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n    return True\n",
        "num_ids": 59
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # a very naive solution\n    if num <= 0:\n        return False\n    elif num == 1:\n        return False\n    elif num == 2:\n        return True\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 72
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\n",
        "num_ids": 14
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    \n    return degree * (math.pi / 180)\n    \ndef radian_degree_list(degree_list):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    \n    return [x * (math.pi / 180) for x in degree_list]\n",
        "num_ids": 24
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*(180/math.pi)\ndef convert_to_decimal(angle):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return angle/180*(math.pi)\ndef convert_to_radians(angle):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return angle*(math.pi/180)\ndef get_distance_between_points(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    return math.sqrt((x2-x1)**2+(y2-y1)**2)\ndef get_distance_between_points_in_meters(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    return math.sqrt((x2-x1)**2+(y2-y1)**2)*100\ndef get_distance_between_points_in_feet(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    return math.sqrt((x2-x1)**2+(y2-y1)**2)*100*3.28084\ndef get_distance_between_points_in_yards(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    return math.sqrt((x2-x1)**2+(y2-y1)**2)*100*3.28084*0.9144\ndef get_distance_between_points_in_miles(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    return math.sqrt((x2-x1)**2+(y2-y1)**2)*100*3.28084*0.621371\ndef get_distance_between_points_in_km(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    return math.sqrt((x2-x1)**2+(y2-y1)**2)*100*3.28084*0.621371*1.60934\ndef get_distance_between_points_in_miles_2(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    return math.sqrt((x2-x1)**2+(y2-y1)**2)*0.621371*100\ndef get_distance_between_points_in_feet_2(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    return math.sqrt((x2-x1)**2+(y2-y1)**2)*0.621371*100*3.28084\ndef get_distance_between_points_in_yards_2(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    return math.sqrt((x2-x1)**2+(y2-y1)**2)*0.621371*100*3.28084*0.9144\ndef get_distance_between_points_in_miles_2(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    return math.sqrt((x2-x1)**2+(y2-y1)**2)*0.621371*100*3.28084*0.621371\ndef get_distance_between_points_in_km_2(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    return math.sqrt((x2-x1)**2+(y2-y1)**2)*0.621371*100*3.28084*0.621371*1.60934\ndef get_distance_between_points_in_feet_in_meters(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    return math.sqrt((x2-x1)**2+(y2-y1)**2)*100*3.28084\ndef get_distance_between_points_in_yards_in_meters(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    return math.sqrt((x2-x1)**2+(y2-y1)**2)*100*3.28084*0.9144\ndef get_distance_between_points_in_miles_in_meters(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    return math.sqrt((x2-x1)**2+(y2-y1)**2)*100*3.28084*0.621371\ndef get_distance_between_points_in_feet_in_meters(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    return math.sqrt((x2-x1)**2+(y2-y1)**2)*100*3.28084*0.621371*0.9144\ndef get_distance_between_points_in_yards_in_meters(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    return math.sqrt((x2-x1)**2+(y2-y1)**2)*100*3.28084*0.621371*0.9144*0.9144\ndef get_distance_between_points_in_miles_in_meters(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    return math.sqrt((x2-x1)**2+(y2-y1)**2)*100*3.28084*0.621371*0.621371\ndef get_distance_between_points_in_feet_in_meters(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    return math.sqrt((x2-x1)**2+(y2-y1)**2)*100*3.28084*0.621371*0.621371*1.60934\ndef get_distance_between_points_in_yards_in_meters(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    return math.sqrt((x2-x1)**2+(y2-y1)**2)*100*3.28084*0.621371*0.621371*1.60934*1.60934\ndef get_distance_between_points_in_miles_in_meters(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    return math.sqrt((x2-x1)**2+(y2-y1)**2)*100*3.28084*0.621371*0.621371*1.60934*0.621371\ndef get_distance_between_points_in_feet_in_feet(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    return math.sqrt((x2-x1)**2+",
        "num_ids": 18
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi*degree/180.0\n",
        "num_ids": 14
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return (degree * math.pi) / 180\ndef radian_degree_inv(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return (radian * 180) / math.pi\ndef hms_to_seconds(h, m, s):\n    '''\n    Write a function to convert hours, minutes and seconds to seconds.\n    '''\n    return h * 3600 + m * 60 + s\ndef seconds_to_hms(seconds):\n    '''\n    Write a function to convert seconds to hours, minutes and seconds.\n    '''\n    h = seconds // 3600\n    s = seconds % 3600\n    m = s // 60\n    s = s % 60\n    return h, m, s\ndef convert_time(time_str):\n    '''\n    Write a function to convert time in hh:mm:ss format to seconds\n    '''\n    h, m, s = time_str.split(':')\n    return hms_to_seconds(int(h), int(m), int(s))\ndef convert_seconds(seconds):\n    '''\n    Write a function to convert seconds to hh:mm:ss format\n    '''\n    h, m, s = seconds_to_hms(seconds)\n    return '%02d:%02d:%02d' % (h, m, s)\ndef convert_distance(distance):\n    '''\n    Write a function to convert distance in meters to yards, miles and feet.\n    '''\n    m, y, ft = distance // 1000, distance % 1000, distance % 10\n    return m, y, ft\ndef convert_distance_inv(m, y, ft):\n    '''\n    Write a function to convert distance in meters to yards, miles and feet.\n    '''\n    return (m + (ft / 10.0)) * 1000, (ft % 10) * 100, (m % 10) * 10\ndef convert_distance_km(distance):\n    '''\n    Write a function to convert distance in meters to yards, miles and feet.\n    '''\n    return distance * 1000, distance * 1000 * 1000, distance * 1000 * 1000 * 1000\ndef convert_distance_km_inv(y, ft, m):\n    '''\n    Write a function to convert distance in meters to yards, miles and feet.\n    '''\n    return y / 1000, ft / 1000 / 1000, m / 1000\ndef convert_distance_km2_feet(km):\n    '''\n    Write a function to convert distance in meters to yards, miles and feet.\n    '''\n    return km * 1000 / 1.094, km * 1000 / 1.094 * 1000, km * 1000 / 1.094 * 1000 * 1000\ndef convert_distance_km2_feet_inv(feet, m):\n    '''\n    Write a function to convert distance in meters to yards, miles and feet.\n    '''\n    return feet * 1.094 / 1000, m / 1000, feet * 1.094 / 1000 / 1000\ndef convert_distance_km2_meters(km):\n    '''\n    Write a function to convert distance in meters to yards, miles and feet.\n    '''\n    return km * 1000 / 1000, km * 1000 / 1000, km * 1000\ndef convert_distance_km2_meters_inv(m, feet):\n    '''\n    Write a function to convert distance in meters to yards, miles and feet.\n    '''\n    return m / 1000, m / 1000 * 1000 / 1000, feet / 1000\ndef convert_distance_km2_miles(km):\n    '''\n    Write a function to convert distance in meters to yards, miles and feet.\n    '''\n    return km * 1000 / 1.609, km * 1000 / 1.609 * 1000, km * 1000 / 1.609 * 1000 * 1000\ndef convert_distance_km2_miles_inv(miles, feet):\n    '''\n    Write a function to convert distance in meters to yards, miles and feet.\n    '''\n    return miles * 1.609 / 1000, miles * 1.609 / 1000 * 1000 / 1000, feet * 1.609 / 1000 / 1000\ndef convert_distance_km2_yards(km):\n    '''\n    Write a function to convert distance in meters to yards, miles and feet.\n    '''\n    return km * 1000 / 1.094, km * 1000 / 1.094, km * 1000\ndef convert_distance_km2_yards_inv(m, feet):\n    '''\n    Write a function to convert distance in meters to yards, miles and feet.\n    '''\n    return m / 1.094, m / 1.094 * 1000 / 1000, feet / 1.094\ndef convert_distance_m2_meters(m):\n    '''\n    Write a function to convert distance in meters to yards, miles and feet.\n    '''\n    return m, m * 1000, m * 1000 * 1000\ndef convert_distance_m2_meters_inv(y, ft, m):\n    '''\n    Write a function to convert distance in meters to yards, miles and feet.\n    '''\n    return y / 1000, y / 1000 * 1000, y / 1000 * 1000 * 1000\ndef convert_distance_m2_feet(m):\n    '''\n    Write a function to convert distance in meters to yards, miles and feet.\n    '''\n    return m, m * 1000 / 1.094, m * 1000 / 1.094 * 1000\ndef convert_distance_m2_feet_inv(y, ft, m):\n    '''\n    Write a function to convert distance in meters to yards, miles and feet.\n    '''\n    return y / 1.094, y / 1.094 * 1000 / 1000, y / 1.094 * 1000 / 1000 * 1000\ndef convert_distance_m2_miles(m):\n    '''\n    Write a function to convert distance in meters to yards, miles and feet.\n    '''\n    return m, m * 1000 / 1.609, m * 1000 / 1.609 * 1000\ndef convert_distance_m2_miles_inv(y, ft, m):\n    '''\n    Write a function to convert distance in meters to yards, miles and feet.\n    '''\n    return y / 1.609, y / 1.609 * 1000 / 1000, y / 1.609 * 1000 / 1000 * 1000\ndef convert_distance_m2_yards(m):\n    '''\n    Write a function to convert distance in meters to yards, miles and feet.\n    '''\n    return m, m * 1000 / 1.094, m * 1000 / 1.094\ndef convert_distance_m2_yards_inv(y, ft, m):\n    '''\n    Write a function to convert distance in meters to yards, miles and feet.\n    '''\n    return y / 1.094, y / 1.094 * 1000 / 1000, y / 1.094 * 1000 / 1000\ndef convert_distance_feet2_meters(feet):\n    '''\n    Write a function to convert distance in meters to yards, miles and feet.\n    '''\n    return feet * 1.094 / 1.0, feet * 1.094 / 1.0 * 1000, feet * 1.094 / 1.0 * 1000 * 1000\ndef convert_distance_feet2_meters_inv(m, y):\n    '''\n    Write a function to convert distance in meters to yards, miles and feet.\n    '''\n    return m / 1.0, m / 1.0 * 1000 / 1000, m / 1.0 * 1000 / 1000 * 1000\ndef convert_distance_feet2_yards(feet):\n    '''\n    Write a function to convert distance in meters to yards, miles and feet.\n    '''\n    return feet * 1.094 / 1.0, feet * 1.094 / 1.0, feet * 1.094 / 1.0\ndef convert_distance_feet2_yards_inv(m, y):\n    '''\n    Write a function to convert distance in meters to yards, miles and feet.\n    '''\n    return m / 1.0, m / 1.0 * 1000 / 1000, m / 1.0 * 1000 / 1000\ndef convert_distance_feet2_miles(feet):\n    '''\n    Write a function to convert distance in meters to yards, miles and feet.\n    '''\n    return feet * 1.094 / 1.609, feet * 1.094 / 1.609 * 1000, feet * 1.094 / 1.609 * 1000 * 1000\ndef convert_distance_fee",
        "num_ids": 49
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n",
        "num_ids": 14
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\n",
        "num_ids": 14
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        return result.group(), result.start(), result.end()\n",
        "num_ids": 34
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    m = re.search(pattern, text)\n    if m is None:\n        raise Exception('Not found')\n    return m.group(), m.start(), m.end()\n",
        "num_ids": 44
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex = re.compile(pattern)\n    result = regex.search(text)\n    return result.group(), result.start(), result.end()\n",
        "num_ids": 39
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    try:\n        return re.compile(pattern).search(text).group(0)\n    except:\n        return None\n",
        "num_ids": 32
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    i = 0\n    n = len(pattern)\n    m = len(text)\n    p = len(pattern)\n    i_ = -1\n    while i < m - p:\n        i_ = i\n        j = 0\n        while j < n:\n            if pattern[j]!= text[i + j]:\n                break\n            j += 1\n        if j == n:\n            return i, i_ + j\n        i += 1\n    return -1, -1\n",
        "num_ids": 117
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex = re.compile(pattern)\n    match = regex.search(text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n",
        "num_ids": 52
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        start = result.start()\n        end = result.end()\n        return text[start:end], start, end\n    return None, None, None\n",
        "num_ids": 55
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pos = 0\n    match = re.search(pattern, text)\n    if match:\n        pos = match.start()\n        return match.group(), pos, match.end()\n    return None, -1, -1\n",
        "num_ids": 55
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches is None:\n        return None\n    else:\n        for match in matches:\n            return match.group(), match.start(), match.end()\n",
        "num_ids": 53
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return text[:match.start()] + text[match.end():]\n",
        "num_ids": 21
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [[0 for x in range(n+1)] for x in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1,n+1):\n        bell[i][0] = 1\n        for j in range(1,i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i-1][j]\n    return bell[n][n-1]\n",
        "num_ids": 111
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return bell_Number(n-1)+bell_Number(n-2)\n",
        "num_ids": 48
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    count = 0\n    for i in range(n):\n        count = count + 1 \n        for j in range(i):\n            count = count + 1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    import math\n    b = (math.factorial(n))**2\n    return b\n",
        "num_ids": 24
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # method 1:\n    #return reduce(lambda x, y: x + y, range(0, n))\n    # method 2:\n    res = [0]\n    for i in range(1, n+1):\n        res.append(res[i-1] + i)\n    return res[n]\n",
        "num_ids": 77
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * bell_Number(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_num = [0]*n\n    for i in range(n):\n        if i==0:\n            bell_num[i] = 1\n        else:\n            bell_num[i] = bell_num[i-1]*(n-i)\n    return bell_num\n    \nprint(bell_Number(5))\nprint(bell_Number(6))\nprint(bell_Number(10))\nprint(bell_Number(15))",
        "num_ids": 109
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return (((1+n)**n)/(1+(n-1)**n))\n",
        "num_ids": 24
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return int((n*(n+1))/2)\n",
        "num_ids": 17
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    # base case\n    if n == 0:\n        return 1\n    # recursive case\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n",
        "num_ids": 49
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list=[]\n    i=0\n    while i<len(list1):\n        if i==L:\n            i=i+1\n        else:\n            new_list.append(list1[i])\n            i=i+1\n    return new_list\n",
        "num_ids": 68
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L > len(list1):\n        return 'Invalid input'\n    else:\n        del list1[L]\n        return list1\n",
        "num_ids": 36
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    result = []\n    for i in list1:\n        if list1.index(i)!= L:\n            result.append(i)\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n",
        "num_ids": 19
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    L1 = []\n    for i in range(0, len(list1)):\n        if i!= L:\n            L1.append(list1[i])\n    return L1\n",
        "num_ids": 48
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n",
        "num_ids": 19
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1[L:L] = []\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # If L is out of bounds for the list\n    if L >= len(list1):\n        return None\n",
        "num_ids": 28
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[0:L] + list1[L+1:]\n",
        "num_ids": 20
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[L:]\n",
        "num_ids": 10
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    l = len(test_list)\n    m = len(test_list[0])\n    result = []\n    for i in xrange(l):\n        result.append(0)\n    for i in xrange(m):\n        for j in xrange(l):\n            if j < N:\n                result[j] += test_list[j][i]\n            else:\n                if result[j-N] < test_list[j][i]:\n                    result[j] = test_list[j][i]\n    return result\n",
        "num_ids": 130
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_of_col = []\n    for row in test_list:\n        max_of_col.append(row[N-1])\n    return max(max_of_col)\n",
        "num_ids": 47
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N > len(test_list):\n        print(\"N must be less than the length of the list\")\n        return None\n    return max(list(zip(*test_list))[N - 1])\n    # '''\n    # for row in test_list:\n    #     print(row)\n    #     print(row[N - 1])\n    # '''\n",
        "num_ids": 2
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_num = None\n    for row in test_list:\n        if len(row) < N:\n            continue\n        if max_num is None or max_num < row[N-1]:\n            max_num = row[N-1]\n    return max_num\n",
        "num_ids": 68
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    #loop through the list\n    max_num = 0\n    for element in test_list:\n        if max_num < element[N]:\n            max_num = element[N]\n    return max_num\n",
        "num_ids": 54
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    res = []\n    for elem in test_list:\n        res.append(elem[N-1])\n    return max(res)\n",
        "num_ids": 37
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list[N])\n",
        "num_ids": 13
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_nth = []\n    for row in test_list:\n        max_nth.append(row[N])\n    return max(max_nth)\n",
        "num_ids": 42
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(row[N-1] for row in test_list)\n",
        "num_ids": 20
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(map(lambda x: x[N], test_list))\n",
        "num_ids": 20
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_list = []\n    for i in range(0,len(lst)):\n        new_list.append([lst[i][0],lst[i][1]])\n    return new_list\n",
        "num_ids": 53
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    res = []\n    for i in lst:\n        res.append(i[0])\n        res.append(i[1])\n    return res\n",
        "num_ids": 39
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [ [lst[i][0], lst[i][1]] for i in range(len(lst)) ]\n",
        "num_ids": 32
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    final_lst = [[],[]]\n    for sublist in lst:\n        final_lst[0].append(sublist[0])\n        final_lst[1].append(sublist[1])\n    return final_lst\n",
        "num_ids": 60
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[x[0],x[1]] for x in lst]\n",
        "num_ids": 20
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # your code goes here\n    return [ [lst[i][0], lst[i][1]] for i in range(0,len(lst))]\n",
        "num_ids": 41
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [lst[0], lst[1]]\n",
        "num_ids": 16
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst1 = []\n    lst2 = []\n    for i in lst:\n        lst1.append(i[0])\n        lst2.append(i[1])\n    lst2.reverse()\n    return [lst1, lst2]\n",
        "num_ids": 68
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    sorted_list = sorted(lst)\n    result = []\n    for i in range(len(sorted_list)):\n        result.append(sorted_list[i][:2])\n    return result\n",
        "num_ids": 54
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if lst == []:\n        return []\n    else:\n        return [[lst[0][0], lst[0][1]], lst[1:]]\n",
        "num_ids": 43
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    res = [0]\n    for i in test_list:\n        res.append(res[-1] + i)\n    return res\n",
        "num_ids": 36
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    output = list(test_list)\n    for i in range(1,len(output)):\n        output[i] = output[i-1] + output[i]\n    return output\n",
        "num_ids": 48
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return [sum(test_list[:x+1]) for x in range(len(test_list))]\n    \n",
        "num_ids": 31
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    answer = []\n    for index in test_list:\n        answer.append(sum(test_list[:index+1]))\n    return answer\n",
        "num_ids": 38
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    for i in xrange(1, len(test_list)):\n        test_list[i] += test_list[i - 1]\n    return test_list\n",
        "num_ids": 42
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum_list = [0]\n    for num in test_list:\n        cumulative_sum_list.append(cumulative_sum_list[-1] + num)\n    return cumulative_sum_list\n",
        "num_ids": 55
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    output_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            output_list.append(sum(test_list[i:j]))\n    return output_list\n",
        "num_ids": 67
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = []\n    cum_sum.append(test_list[0])\n    for i in range(1, len(test_list)):\n        cum_sum.append(cum_sum[i-1] + test_list[i])\n    return cum_sum\n",
        "num_ids": 68
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return reduce(lambda x, y: x + y, test_list)\n",
        "num_ids": 20
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    s = 0\n    for x in test_list:\n        s += x\n    return s\n",
        "num_ids": 25
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in range(0, len(nums)):\n        total = 0\n        for j in range(0, len(nums[i])):\n            total += nums[i][j]\n        averages.append(total/len(nums[i]))\n    return averages\n",
        "num_ids": 77
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_nums = []\n    for row in nums:\n        average_nums.append(sum(row)/len(row))\n    return average_nums\n",
        "num_ids": 42
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(x)/len(x) for x in zip(*nums)]\n",
        "num_ids": 22
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average = []\n    for tup in nums:\n        average.append(tup[0] + tup[1] / 2.0)\n    return average\n",
        "num_ids": 42
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [(lambda x: sum(x)/len(x))(x) for x in zip(*nums)]\n",
        "num_ids": 28
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(x)/len(x) for x in zip(*nums)]\n",
        "num_ids": 22
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for x in nums:\n        avg_list.append(float(sum(x)) / len(x))\n    return avg_list\n",
        "num_ids": 44
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_tuples = []\n    for tup in nums:\n        sum_tup = sum(tup)\n        average_tuples.append(sum_tup / len(tup))\n    return average_tuples\n",
        "num_ids": 57
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    #find the average of the first element and second element of each tuple\n    #return a list of average elements\n    return [(sum(x)/len(x)) for x in zip(*nums)]\n",
        "num_ids": 47
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(n)/len(n) for n in zip(*nums)]\n",
        "num_ids": 22
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple((test_tup1[i] % test_tup2[i] for i in range(len(test_tup1))))\n",
        "num_ids": 37
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    modulo = []\n    for i, j in zip(test_tup1, test_tup2):\n        modulo.append(i % j)\n    return tuple(modulo)\n",
        "num_ids": 48
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    def tuple_mod(num1, num2):\n        return num1 % num2\n    return tuple(map(tuple_mod, test_tup1, test_tup2))\n",
        "num_ids": 47
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # your code goes here\n    return tuple([x%y for x,y in zip(test_tup1, test_tup2)])\n",
        "num_ids": 37
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return tuple(test_tup1)\n    \n",
        "num_ids": 59
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    #for i in range(len(test_tup1)):\n    #    test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return tuple([i % j for i, j in zip(test_tup1, test_tup2)])\n    \ndef tuple_length(tup):\n    return len(tup)\n    \ndef tuple_add(tup1, tup2):\n    return tuple([i + j for i, j in zip(tup1, tup2)])\n    \ndef tuple_subtract(tup1, tup2):\n    return tuple([i - j for i, j in zip(tup1, tup2)])\n    \ndef tuple_multiply(tup1, tup2):\n    return tuple([i * j for i, j in zip(tup1, tup2)])\n    \ndef tuple_power(tup1, tup2):\n    return tuple([i ** j for i, j in zip(tup1, tup2)])\n    \ndef tuple_division(tup1, tup2):\n    return tuple([i / j for i, j in zip(tup1, tup2)])\n    \ndef tuple_exponent(tup1, tup2):\n    return tuple([i ** j for i, j in zip(tup1, tup2)])\n    \ndef tuple_product(tup1, tup2):\n    return tuple([i * j for i, j in zip(tup1, tup2)])\n    \ndef tuple_division_floor(tup1, tup2):\n    return tuple([i // j for i, j in zip(tup1, tup2)])\n    \ndef tuple_max(tup1, tup2):\n    return tuple([max(i, j) for i, j in zip(tup1, tup2)])\n    \ndef tuple_max_product(tup1, tup2):\n    return tuple([max(i, j) for i, j in zip(tup1, tup2)] + [max(tup1[-1] * tup2[-1], tup2[-1] * tup1[-1])])\n    \ndef tuple_mean(tup1, tup2):\n    return tuple([i + j for i, j in zip(tup1, tup2)] / 2)\n    \ndef tuple_mean_product(tup1, tup2):\n    return tuple(tup1) + tuple(tup2)\n    \ndef tuple_average(tup1):\n    return sum(tup1) / len(tup1)\n    \ndef tuple_subtract_modulo(tup1, tup2):\n    return tuple([i - j for i, j in zip(tup1, tup2)] + [tuple_modulo(tup1, tup2)[-1]])\n    \ndef tuple_intersection(tup1, tup2):\n    return tuple([i for i in tup1 if i in tup2])\n    \ndef tuple_union(tup1, tup2):\n    return tuple(set(tup1) | set(tup2))\n    \ndef tuple_difference(tup1, tup2):\n    return tuple(set(tup1) - set(tup2))\n    \ndef tuple_sum(tup1, tup2):\n    return tuple(tuple_add(tup1, tup2))\n    \ndef tuple_max_index(tup1, tup2):\n    return tuple([i for i, j in enumerate(tup1) if j == max(tup1)])\n    \ndef tuple_min_index(tup1, tup2):\n    return tuple([i for i, j in enumerate(tup1) if j == min(tup1)])\n    \ndef tuple_max_product_index(tup1, tup2):\n    return tuple([i for i, j in enumerate(tup1) if j * tup2[i] == max(tup1)])\n    \ndef tuple_min_product_index(tup1, tup2):\n    return tuple([i for i, j in enumerate(tup1) if j * tup2[i] == min(tup1)])\n    \ndef tuple_replace_elements(tup1, tup2, index, new_element):\n    return tuple([i if index!= j else new_element for j, i in enumerate(tup1)])\n    \ndef tuple_concatenation(tup1, tup2):\n    return tuple(tup1 + tup2)\n    \ndef tuple_slice(tup, start, end):\n    return tuple(tup[start:end])\n    \ndef tuple_slice_reverse(tup, start, end):\n    return tuple(tup[start:end][::-1])\n    \ndef tuple_reverse(tup):\n    return tuple(reversed(tup))\n    \ndef tuple_sort(tup):\n    return tuple(sorted(tup))\n    \ndef tuple_to_int(tup):\n    return tuple(map(int, tup))\n    \ndef tuple_to_float(tup):\n    return tuple(map(float, tup))\n    \ndef tuple_to_str(tup):\n    return tuple(map(str, tup))\n    \ndef tuple_to_bool(tup):\n    return tuple(map(bool, tup))\n    \ndef tuple_to_list(tup):\n    return list(tup)\n    \ndef tuple_to_tuple(tup):\n    return tuple(tup)\n    \ndef tuple_to_set(tup):\n    return set(tup)\n    \ndef tuple_to_dict(tup):\n    return dict(tup)\n    \ndef tuple_to_float_dict(tup):\n    return {i: float(j) for i, j in tup}\n    \ndef tuple_to_int_dict(tup):\n    return {i: int(j) for i, j in tup}\n    \ndef tuple_to_str_dict(tup):\n    return {i: str(j) for i, j in tup}\n    \ndef tuple_to_bool_dict(tup):\n    return {i: bool(j) for i, j in tup}\n    \ndef tuple_to_list_dict(tup):\n    return {i: list(j) for i, j in tup}\n    \ndef tuple_to_tuple_dict(tup):\n    return {i: tuple(j) for i, j in tup}\n    \ndef tuple_to_dict_dict(tup):\n    return {i: dict(j) for i, j in tup}\n    \ndef tuple_to_int_list(tup):\n    return [int(i) for i in tup]\n    \ndef tuple_to_float_list(tup):\n    return [float(i) for i in tup]\n    \ndef tuple_to_str_list(tup):\n    return [str(i) for i in tup]\n    \ndef tuple_to_bool_list(tup):\n    return [bool(i) for i in tup]\n    \ndef tuple_to_list_list(tup):\n    return [list(i) for i in tup]\n    \ndef tuple_to_tuple_list(tup):\n    return [tuple(i) for i in tup]\n    \ndef tuple_to_set_list(tup):\n    return [set(i) for i in tup]\n    \ndef tuple_to_dict_list(tup):\n    return [dict(i) for i in tup]\n    \ndef tuple_to_int_set(tup):\n    return set([int(i) for i in tup])\n    \ndef tuple_to_float_set(tup):\n    return set([float(i) for i in tup])\n    \ndef tuple_to_str_set(tup):\n    return set([str(i) for i in tup])\n    \ndef tuple_to_bool_set(tup):",
        "num_ids": 2001
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    # if the length of the first tuple is not equal to the second\n    # then return None\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    \n    # create a list which will contain the modulo result\n    modulo_result = []\n    \n    # loop through both tuples\n    for i in range(len(test_tup1)):\n        # modulo the elements of each tuple\n        modulo_result.append(modulo(test_tup1[i], test_tup2[i]))\n    \n    # return the new tuple\n    return tuple(modulo_result)\n",
        "num_ids": 157
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    if len(test_tup1) == len(test_tup2):\n        return tuple([test_tup1[i] % test_tup2[i] for i in range(len(test_tup1))])\n    \n    else:\n        return 'The lengths of the tuples must be the same'\n    \nprint(tuple_modulo((1,2,3),(2,4,5)))\nprint(tuple_modulo((1,2,3),(2,5)))\nprint(tuple_modulo((1,2,3),(4,5)))\n",
        "num_ids": 145
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        new_tup = []\n        for i in range(len(test_tup1)):\n            new_tup.append(test_tup1[i] % test_tup2[i])\n        return tuple(new_tup)\n    else:\n        return 'Tuples not of same length'\n",
        "num_ids": 97
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples are not the same length\"\n    else:\n        result = []\n        for i in range(0,len(test_tup1)):\n            result.append(test_tup1[i] % test_tup2[i])\n        return result\n",
        "num_ids": 88
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    elif steps < d:\n        return -1\n    elif steps == d:\n        return 1\n    else:\n        return min_Jumps(steps - d, d) + 1 + min_Jumps(steps - 2*d, d)\n",
        "num_ids": 72
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0: return 1\n    if d > steps: return 0\n    if d == steps: return 0\n    if d < 0: return 0\n    minimum_jumps = float(\"inf\")\n    for i in range(steps):\n        minimum_jumps = min(minimum_jumps, 1+min_Jumps(steps-i-1, d-i))\n    return minimum_jumps\n",
        "num_ids": 96
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    memo = {}\n    def helper(i, steps):\n        if steps == 0:\n            return 0\n",
        "num_ids": 28
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return steps\n    elif d == 1:\n        return -1\n    else:\n        return max(min_Jumps(steps - 1, 0), min_Jumps(steps - 2, 1), min_Jumps(steps - 3, 2))\n        \n    \ndef max_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return steps\n    elif d == 1:\n        return -1\n    else:\n        return max(max_Jumps(steps - 1, 0), max_Jumps(steps - 2, 1), max_Jumps(steps - 3, 2))\n",
        "num_ids": 68
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return steps\n    if d == 1:\n        return steps+1\n    if d == 2:\n        return 2*steps + 1\n    return min_Jumps(steps, d-1) + min_Jumps(steps, d-2) + min_Jumps(steps, d-3)\n",
        "num_ids": 79
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    table = [sys.maxint] * (steps + 1)\n    table[0] = 0\n    for i in range(0, steps + 1):\n        for j in range(1, d + 1):\n            if i + j < steps + 1:\n                table[i + j] = min(table[i + j], 1 + table[i])\n    return table[steps]\n",
        "num_ids": 93
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if len(steps) == 1:\n        return abs(steps[0] - d)\n    elif len(steps) == 0:\n        return -1\n    \n    minimum = float(\"inf\")\n    \n    for i in range(1, len(steps)):\n        minimum = min(minimum, min_Jumps(steps[:i], d) + min_Jumps(steps[i:], d - steps[i-1]))\n    \n    return minimum\n",
        "num_ids": 112
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d==1:\n        return 1\n    if d==2:\n        return 2\n    if d==3:\n        return 4\n    if d==4:\n        return 2\n    if d==5:\n        return 4\n    return 0\n",
        "num_ids": 61
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return 0\n    if d < steps:\n        return 1\n    return 1 + min_Jumps(steps-1, d)\n",
        "num_ids": 40
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    if d < 0:\n        return -1\n    if d > steps:\n        return -1\n    elif d == steps:\n        return 1\n    return min_Jumps(steps, d-1) + min_Jumps(steps, d+1) + min_Jumps(steps, d-steps)\n",
        "num_ids": 87
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    res = [0] * len(nums1)\n    for i in range(len(nums1)):\n        res[i] = nums1[i] / nums2[i]\n    return res\n",
        "num_ids": 54
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = [0] * len(nums1)\n    for i in range(len(nums1)):\n        result[i] = nums1[i] / nums2[i]\n    return result\n",
        "num_ids": 54
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    total = 0\n    for i in range(len(nums1)):\n        total += nums1[i]/nums2[i]\n    return total\n",
        "num_ids": 42
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    new = []\n    for i in xrange(len(nums1)):\n        new.append(nums1[i]/nums2[i])\n    return new\n",
        "num_ids": 45
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Error: Lists are not the same length!\"\n    else:\n        div_list = []\n        for i in range(0,len(nums1)):\n            div_list.append(nums1[i]/nums2[i])\n        return div_list\n",
        "num_ids": 85
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    output = []\n    for i in range(len(nums1)):\n        output.append(nums1[i]/nums2[i])\n    return output\n",
        "num_ids": 44
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div_result = []\n    for i in range(len(nums1)):\n        div_result.append(nums1[i]/nums2[i])\n    return div_result\n    \n",
        "num_ids": 52
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    len1 = len(nums1)\n    len2 = len(nums2)\n    if len1 == 0 or len2 == 0:\n        return []\n    return [(nums1[i]/nums2[i]) for i in range(len1)]\n",
        "num_ids": 66
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if not nums1 or not nums2:\n        return None\n    if not len(nums1) == len(nums2):\n        return None\n    output = []\n    for i in range(len(nums1)):\n        output.append(nums1[i] / nums2[i])\n    return output\n",
        "num_ids": 82
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if test_str == '':\n        return ''\n    else:\n        move_num = []\n        move_num = [i for i in test_str if i.isdigit()]\n        for i in test_str:\n            if i.isdigit():\n                move_num.append(i)\n        move_num.sort()\n        return ''.join(move_num)\n",
        "num_ids": 95
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    number_list = [x for x in test_str if x in \"0123456789\"]\n    space_list = [x for x in test_str if x in \" \"]\n    space_list.sort()\n    temp = [x for x in test_str if x not in \"0123456789\"]\n    for i in number_list:\n        temp.append(i)\n    for i in space_list:\n        temp.append(i)\n    return ''.join(temp)\n",
        "num_ids": 120
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = '0123456789'\n    res = ''\n    for i in test_str:\n        if i in nums:\n            res += i\n    for i in nums:\n        if i not in test_str:\n            res += i\n    return res\n",
        "num_ids": 68
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # \u5148\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5217\u8868\n    list_str = list(test_str)\n    # \u5148\u628a\u5217\u8868\u6392\u5e8f\uff0c\u518d\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n    list_str.sort()\n    str_new = ''\n    for i in list_str:\n        str_new += i\n    return str_new\n",
        "num_ids": 117
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    temp_str = list(test_str)\n    digit_list = [str(i) for i in range(10)]\n    for i in range(len(temp_str)):\n        if temp_str[i] in digit_list:\n            temp_str[i] = '%'\n    temp_str = ''.join(temp_str)\n    return temp_str\n",
        "num_ids": 92
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    res = \"\"\n    for char in test_str:\n        if char.isdigit():\n            res += char\n    return res\n",
        "num_ids": 34
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Test 1: no number\n    assert move_num('The quick brown fox jumps over the lazy dog') == 'THe qick brown fox jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy Dog') == 'The Quick Brown Fox Jumps over the lazy Dog'\n    assert move_num('The quck brown fox jumps over the lazy dog') == 'The quck brown fox jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy Dog') == 'The Quck Brown Fox Jumps over the lazy Dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy Dog') == 'The Quck Brown Fox Jumps over the lazy Dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy Dog') == 'The Quck Brown Fox Jumps over the lazy Dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quck Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quck Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quck Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'The Quck Brown Fox Jumps over the lazy dog'\n    assert move_num('The Quick Brown Fox Jumps over the lazy dog') == 'Th",
        "num_ids": 2014
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    import re\n    p = re.compile(r'([^\\d])(\\d+)')\n    def repl(m):\n        return m.group(1)+m.group(2)\n    return p.sub(repl,test_str)\n    \n    \n",
        "num_ids": 66
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    for i in range(0, len(test_str)):\n        if (test_str[i].isdigit()):\n            return test_str[:i] + test_str[i:].replace(test_str[i], '', 1)\n    return test_str\n",
        "num_ids": 69
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    my_str = list(test_str)\n    count = 0\n    while count < len(my_str) - 1:\n        for i in xrange(len(my_str) - 1):\n            if not my_str[i].isdigit():\n                temp = my_str[i]\n                my_str[i] = my_str[i + 1]\n                my_str[i + 1] = temp\n        count += 1\n    return ''.join(my_str)\n",
        "num_ids": 119
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if a == []:\n        return 0\n    if len(a) == 1:\n        return 1\n    a.sort()\n    index = 0\n    n = len(a)\n    while index < n - 1:\n        if a[index] < a[index + 1] / 2:\n            index += 1\n        else:\n            return n - index\n    return n\n",
        "num_ids": 91
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    '''\n    Given a list of integers nums, write a function to return the size of the largest subset of nums that is divisible by every integer in the list.\n    '''\n    \n    '''\n    algorithm:\n    1) initialize min_max = {1: [0, 0]}\n    2) for each number x in nums, update min_max = max(min_max[x][0], min_max[x][1])\n    3) for each x in min_max, return min_max[x][0] + min_max[x][1]\n    '''\n    '''\n    # initialization:\n    min_max = {1: [0, 0]}\n    for num in nums:\n        if num not in min_max:\n            min_max[num] = [0, 0]\n        for index in range(2):\n            min_max[num][index] = max(min_max[num][index], min_max[num][not index] + 1)\n    \n    return max([max(min_max[num]) for num in min_max])\n    '''\n    \n    '''\n    # method 2:\n    if not a:\n        return 0\n    result = 0\n    # add the divisors\n    for i in range(1, int(math.sqrt(a)) + 1):\n        if a % i == 0:\n            if i in a_dict:\n                a_dict[i] += 1\n            else:\n                a_dict[i] = 1\n    \n    for i in a_dict:\n        result = max(result, i * a_dict[i])\n    return result\n    '''\n    \n    \n    '''\n    # method 1:\n    if not a:\n        return 0\n    result = 1\n    # add the divisors\n    for i in range(1, int(math.sqrt(a)) + 1):\n        if a % i == 0:\n            result = max(result, i + a / i)\n    return result\n    '''\n    \n    \n    '''\n    # method 2:\n    if not a:\n        return 0\n    result = 1\n    for i in range(2, int(math.sqrt(a)) + 1):\n        if a % i == 0:\n            result = max(result, i + a / i)\n    return result\n    '''\n    \n    \n    \n    '''\n    # method 1:\n    if not a:\n        return 0\n    result = 1\n    # add the divisors\n    for i in range(1, int(math.sqrt(a)) + 1):\n        if a % i == 0:\n            result += i + a / i\n    return result\n    '''\n    \n    \n    '''\n    # method 2:\n    if not a:\n        return 0\n    result = 1\n    # add the divisors\n    for i in range(2, int(math.sqrt(a)) + 1):\n        if a % i == 0:\n            result += i + a / i\n    return result\n    '''\n    \n    \n    '''\n    # method 1:\n    if not a:\n        return 0\n    result = 1\n    # add the divisors\n    for i in range(1, int(math.sqrt(a)) + 1):\n        if a % i == 0:\n            result += i + a / i\n    return result\n    '''\n    \n    \n    '''\n    # method 2:\n    if not a:\n        return 0\n    result = 1\n    # add the divisors\n    for i in range(2, int(math.sqrt(a)) + 1):\n        if a % i == 0:\n            result += i + a / i\n    return result\n    '''\n    \n    \n    '''\n    # method 1:\n    if not a:\n        return 0\n    result = 1\n    # add the divisors\n    for i in range(1, int(math.sqrt(a)) + 1):\n        if a % i == 0:\n            result += i + a / i\n    return result\n    '''\n    \n    \n    '''\n    # method 2:\n    if not a:\n        return 0\n    result = 1\n    # add the divisors\n    for i in range(2, int(math.sqrt(a)) + 1):\n        if a % i == 0:\n            result += i + a / i\n    return result\n    '''\n    \n    \n    '''\n    # method 1:\n    if not a:\n        return 0\n    result = 1\n    # add the divisors\n    for i in range(1, int(math.sqrt(a)) + 1):\n        if a % i == 0:\n            result += i + a / i\n    return result\n    '''\n    \n    \n    '''\n    # method 2:\n    if not a:\n        return 0\n    result = 1\n    # add the divisors\n    for i in range(2, int(math.sqrt(a)) + 1):\n        if a % i == 0:\n            result += i + a / i\n    return result\n    '''\n    \n    \n    '''\n    # method 1:\n    if not a:\n        return 0\n    result = 1\n    # add the divisors\n    for i in range(1, int(math.sqrt(a)) + 1):\n        if a % i == 0:\n            result += i + a / i\n    return result\n    '''\n    \n    \n    '''\n    # method 2:\n    if not a:\n        return 0\n    result = 1\n    # add the divisors\n    for i in range(2, int(math.sqrt(a)) + 1):\n        if a % i == 0:\n            result += i + a / i\n    return result\n    '''\n    \n    \n    '''\n    # method 1:\n    if not a:\n        return 0\n    result = 1\n    # add the divisors\n    for i in range(1, int(math.sqrt(a)) + 1):\n        if a % i == 0:\n            result += i + a / i\n    return result\n    '''\n    \n    \n    '''\n    # method 2:\n    if not a:\n        return 0\n    result = 1\n    # add the divisors\n    for i in range(2, int(math.sqrt(a)) + 1):\n        if a % i == 0:\n            result += i + a / i\n    return result\n    '''\n    \n    \n    '''\n    # method 1:\n    if not a:\n        return 0\n    result = 1\n    # add the divisors\n    for i in range(1, int(math.sqrt(a)) + 1):\n        if a % i == 0:\n            result += i + a / i\n    return result\n    '''\n    \n    \n    '''\n    # method 2:\n    if not a:\n        return 0\n    result = 1\n    # add the divisors\n    for i in range(2, int(math.sqrt(a)) + 1):\n        if a % i == 0:\n            result += i + a / i\n    return result\n    '''\n    \n    \n    '''\n    # method 1:\n    if not a:\n        return 0\n    result = 1\n    # add the divisors\n    for i in range(1, int(math.sqrt(a)) + 1):\n        if a % i == 0:\n            result += i + a / i\n    return result\n    '''\n    \n    \n    '''\n    # method 2:\n    if not a:\n        return 0\n    result = 1\n    # add the divisors\n    for i in range(2, int(math.sqrt(a)) + 1):\n        if a % i == 0:\n            result += i + a / i\n    return result\n    '''\n    \n    \n    '''\n    # method 1:\n    if not a:\n        return 0\n    result = 1\n    # add the divisors\n    for i in range(1, int(math.sqrt(a)) + 1):\n        if a % i == 0:\n            result += i + a / i\n    return result\n    '''\n    \n    \n    '''\n",
        "num_ids": 2
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    div_pairs = []\n    for i in xrange(len(a)):\n        for j in xrange(i, len(a)):\n            if a[i] % a[j] == 0:\n                div_pairs.append((a[i], a[j]))\n",
        "num_ids": 71
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    divs = {}\n    for i in xrange(1,len(a)):\n        for j in xrange(i):\n            if a[i]%a[j]==0:\n                divs[a[i]] = divs.get(a[i],0) + 1\n    return max(divs.values())\n",
        "num_ids": 81
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    '''\n    brute force\n    '''\n    if not a:\n        return 0\n    return max(\n        len(a) * len(a),\n        largest_subset(a[1:]),\n        largest_subset(a[:-1])\n    )\n",
        "num_ids": 55
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def helper(a, s):\n        if not a:\n            return s\n        else:\n            return max(helper(a[1:], s), helper(a[1:], s+1))\n    return helper(a, 1)\n",
        "num_ids": 60
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if not a:\n        return 0\n    a.sort()\n    result = [[0]]\n    for i in range(1,len(a)):\n        if a[i]%a[i-1]!= 0:\n            result.append([])\n        result[-1].append(a[i])\n    result.append([])\n    result.sort()\n    result = result[-1]\n    if len(result) == 0:\n        return 0\n    return len(result)\n",
        "num_ids": 120
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def recurse(i, memo, a):\n        '''\n        Recursively compute the largest subset that sums to i.\n        '''\n        if i in memo:\n            return memo[i]\n        if i < 0:\n            return 0\n        res = recurse(i-a[i], memo, a) + 1\n        memo[i] = res\n        return res\n    max_len = len(a)\n    memo = {}\n    for i in range(max_len):\n        memo[i] = recurse(i, memo, a)\n    return max(memo.values())\n",
        "num_ids": 113
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    subsets = []\n    \n    # If the list is of length zero or one, we can't have any subsets that contain any pair\n    if len(a) == 0 or len(a) == 1:\n        return 0\n    \n    # For each number, we can either include it in a subset or not\n    for i in range(len(a)):\n        if a[i]%2 == 0:\n            subsets.append(a[i])\n        else:\n            subsets.append(0)\n        \n    # If we only have one number in our subset, we can't have any larger subsets\n    if len(subsets) == 1:\n        return 1\n    \n    # To find the size of the largest subset, we just count the size of the subset with each number and add up the biggest ones\n    return len(subsets) + largest_subset(subsets)\n    \n    \nassert(largest_subset([1,2,3,4,5,6]) == 2)\nassert(largest_subset([1,2,3,4]) == 1)\nassert(largest_subset([5,6,7]) == 1)\nassert(largest_subset([1,1,1,1]) == 1)\nassert(largest_subset([3,4,5,6,7,8,9,10,11,12]) == 2)\nassert(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12]) == 1)\nassert(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 2)\nassert(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]) == 3)\nassert(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 4)\nassert(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150]) == 5)\nassert(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150]) == 6)\nassert(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150]) == 7)\nassert(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150]) == 8)\nassert(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,1",
        "num_ids": 2007
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    result = 1\n    for i in range(len(a)):\n        if result < a[i] / 2:\n            result = a[i] / 2\n        if result < a[i] / 3:\n            result = a[i] / 3\n        if result < a[i] / 4:\n            result = a[i] / 4\n    return result\n",
        "num_ids": 89
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return arr1[0]\n    elif n == 2:\n        return (arr1[0] + arr2[1])/2\n    else:\n        median = get_median(arr1, arr2, n/2)\n        if n % 2 == 0:\n            return median\n        else:\n            if arr1[n/2-1] > median:\n                return median\n            elif arr1[n/2] < median:\n                return median\n            else:\n                return (median + arr1[n/2])/2\n",
        "num_ids": 140
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        return (arr1[n/2] + arr2[n/2]) / 2.0\n    else:\n        return arr1[n/2]\n",
        "num_ids": 48
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    res = []\n    for i in range(n):\n        res.append(arr1[i])\n        res.append(arr2[i])\n    res.sort()\n    med = res[n/2]\n    return med\n",
        "num_ids": 60
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # ith element of the first array = median of ith element of the second array\n    # if the array length is odd, return the middle element\n    # if the array length is even, return the ith element of the second array\n    # the median is the same if the array length is even, the median is the average of\n    # the two elements of the first array which is the median of the second array\n    if n%2==1:\n        return arr1[n//2]\n    else:\n        return (arr1[n//2 - 1] + arr1[n//2])/2\n",
        "num_ids": 140
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        return (arr1[n/2] + arr2[n/2]) / 2.0\n    else:\n        return arr1[n/2]\n",
        "num_ids": 48
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Code here\n    m1 = arr1[n // 2]\n    m2 = arr2[n // 2]\n    if m1 == m2:\n        return m1\n    else:\n        return (max(m1, m2) + min(m1, m2)) / 2\n",
        "num_ids": 72
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = []\n    i,j = 0,0\n    while(i<n and j<n):\n        if arr1[i]<arr2[j]:\n            arr.append(arr1[i])\n            i+=1\n        elif arr1[i]>arr2[j]:\n            arr.append(arr2[j])\n            j+=1\n        else:\n            arr.append(arr1[i])\n            arr.append(arr2[j])\n            i+=1\n            j+=1\n    if i<n:\n        while i<n:\n            arr.append(arr1[i])\n            i+=1\n    else:\n        while j<n:\n            arr.append(arr2[j])\n            j+=1\n    return arr\n",
        "num_ids": 186
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    k = (n + 1) / 2\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n",
        "num_ids": 85
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    m,n=len(arr1),len(arr2)\n    if m>n:\n        return get_median(arr2, arr1, n)\n    k,p=m//2,0\n    i,j=0,0\n    while i<k and j<n:\n        if arr1[i]<arr2[j]:\n            p=i\n            i+=1\n        elif arr1[i]>arr2[j]:\n            p=j\n            j+=1\n        else:\n            i+=1\n            j+=1\n    if i<k:\n        p=k\n        k=i\n    if n&1:\n        return (arr1[p]+arr2[n//2])/2.0\n    else:\n        return (arr1[p]+arr2[n//2-1]+arr2[n//2])/2.0\n    \ndef test():\n    '''\n    This function tests the code\n    '''\n    arr1=[1,3,5,7,9]\n    arr2=[2,4,6,8,10]\n    m=get_median(arr1, arr2, len(arr2))\n    print(m)\n    \nif __name__=='__main__':\n    test(",
        "num_ids": 74
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return None\n    elif n == 1:\n        return (arr1[0] + arr2[0]) / 2.0\n    elif n == 2:\n        return (arr1[0] + arr2[0]) / 2.0\n    else:\n        i = int((n + 1) / 2)\n        if i == 0:\n            return (arr1[0] + arr2[i]) / 2.0\n        elif i == n:\n            return (arr1[i - 1] + arr2[i - 1]) / 2.0\n        else:\n            return (arr1[i - 1] + arr2[i]) / 2.0\n",
        "num_ids": 166
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if len(nums) < n:\n        raise ValueError(\"list must be of length at least \"+str(n))\n    if n == 1:\n        return nums\n    else:\n        return [pow(num,n) for num in nums]\n",
        "num_ids": 64
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for num in nums:\n        n *= num\n    return n\n",
        "num_ids": 20
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [nums[i]**n for i in range(len(nums))]\n",
        "num_ids": 24
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if len(nums) < n:\n        raise ValueError('list must have at least n items')\n    for i in range(len(nums)):\n        nums[i] = nums[i]**n\n    return nums\n",
        "num_ids": 60
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    def power(num,n):\n        if n == 1:\n            return num\n        if n == 0:\n            return 1\n        return num * power(num,n-1)\n    return [power(num,n) for num in nums]\n",
        "num_ids": 62
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n",
        "num_ids": 30
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    p = 1\n    for i in nums:\n        p = p*i**n\n    return p\n",
        "num_ids": 28
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n == 1:\n        return map(lambda x:x**n,nums)\n    else:\n        return map(lambda x:nth_nums(x,n-1),nums)\n",
        "num_ids": 51
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper_string = ''\n    for letter in string:\n        upper_string += letter.upper()\n    return upper_string\n",
        "num_ids": 32
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n",
        "num_ids": 10
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n    ",
        "num_ids": 10
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper()==True:\n        print(\"String is uppercase\")\n    else:\n        print(\"String is not uppercase\")\n",
        "num_ids": 38
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef add_List(newList):\n    '''\n    Write a python function to sum all elements in a given list.\n    '''\n    sum = 0\n    for i in newList:\n        sum += i\n    return sum\n    \ndef min_List(newList):\n    '''\n    Write a python function to return the smallest element in a given list.\n    '''\n    return min(newList)\n    \ndef max_List(newList):\n    '''\n    Write a python function to return the largest element in a given list.\n    '''\n    return max(newList)\n    \ndef num_List(newList):\n    '''\n    Write a python function to count the number of elements in a given list.\n    '''\n    return len(newList)\n    \ndef empty_List(newList):\n    '''\n    Write a python function to check if a list is empty or not.\n    '''\n    return True if len(newList)==0 else False\n    \ndef remove_List(newList, ele):\n    '''\n    Write a python function to remove the first occurrence of a given element from a given list.\n    '''\n    newList.remove(ele)\n    return newList\n    \ndef remove_List_1(newList, ele):\n    '''\n    Write a python function to remove the first occurrence of a given element from a given list.\n    '''\n    newList.remove(ele)\n    return newList\n    \ndef concatenate_List(newList1, newList2):\n    '''\n    Write a python function to concatenate two lists.\n    '''\n    newList1.extend(newList2)\n    return newList1\n    \ndef print_List(newList):\n    '''\n    Write a python function to print a given list elements.\n    '''\n    for i in newList:\n        print(i)\n        \ndef map_List(newList, func):\n    '''\n    Write a python function to map a list using a specified function\n    '''\n    newList = [func(i) for i in newList]\n    return newList\n    \ndef filter_List(newList, func):\n    '''\n    Write a python function to filter a list using a specified function.\n    '''\n    newList = [i for i in newList if func(i)]\n    return newList\n    \ndef reduce_List(newList, func, initializer=None):\n    '''\n    Write a python function to reduce a list using a specified function.\n    '''\n    from functools import reduce\n    newList = reduce(func, newList, initializer)\n    return newList\n    \ndef deep_reverse(newList):\n    '''\n    Write a python function to deep reverse a given list.\n    '''\n    newList2 = []\n    for i in newList:\n        if type(i) is list:\n            newList2.append(deep_reverse(i))\n        else:\n            newList2.append(i)\n    return newList2\n    \ndef power_List(newList, n):\n    '''\n    Write a python function to compute the nth power of a given list.\n    '''\n    newList = [i**n for i in newList]\n    return newList\n    \ndef find_min_List(newList):\n    '''\n    Write a python function to find the minimum element in a given list.\n    '''\n    return min(newList)\n    \ndef find_max_List(newList):\n    '''\n    Write a python function to find the maximum element in a given list.\n    '''\n    return max(newList)\n    \ndef sort_List(newList):\n    '''\n    Write a python function to sort a given list.\n    '''\n    newList.sort()\n    return newList\n    \ndef sort_List_1(newList):\n    '''\n    Write a python function to sort a given list in descending order.\n    '''\n    newList.sort(reverse=True)\n    return newList\n    \ndef sort_List_2(newList):\n    '''\n    Write a python function to sort a given list in ascending order.\n    '''\n    newList.sort()\n    return newList\n    \ndef sort_List_3(newList):\n    '''\n    Write a python function to sort a given list in descending order.\n    '''\n    return sorted(newList, reverse=True)\n    \ndef sort_List_4(newList):\n    '''\n    Write a python function to sort a given list in descending order.\n    '''\n    return sorted(newList)\n    \ndef sort_List_5(newList):\n    '''\n    Write a python function to sort a given list in descending order.\n    '''\n    newList = sorted(newList, reverse=True)\n    return newList\n    \ndef split_List(newList, i):\n    '''\n    Write a python function to split a given list into two parts.\n    '''\n    newList1 = newList[:i]\n    newList2 = newList[i:]\n    return newList1, newList2\n    \ndef avg_List(newList):\n    '''\n    Write a python function to compute the average of all elements in a given list.\n    '''\n    sum = 0\n    for i in newList:\n        sum += i\n    return sum/len(newList)\n    \ndef count_List(newList, ele):\n    '''\n    Write a python function to count the number of occurrences of a given element in a given list.\n    '''\n    return newList.count(ele)\n    \ndef get_List(newList):\n    '''\n    Write a python function to get the index of the first occurrence of a given element in a given list.\n    '''\n    return newList.index(ele)\n    \ndef get_List_1(newList):\n    '''\n    Write a python function to get the index of the last occurrence of a given element in a given list.\n    '''\n    return newList.index(ele)\n    \ndef insert_List(newList, ele, index):\n    '''\n    Write a python function to insert a given element at a given index in a given list.\n    '''\n    newList.insert(index, ele)\n    return newList\n    \ndef insert_List_1(newList, ele, index):\n    '''\n    Write a python function to insert a given element at a given index in a given list.\n    '''\n    newList.insert(index, ele)\n    return newList\n    \ndef insert_List_2(newList, ele, index):\n    '''\n    Write a python function to insert a given element at a given index in a given list.\n    '''\n    newList.insert(index, ele)\n    return newList\n    \ndef remove_List(newList, ele):\n    '''\n    Write a python function to remove the first occurrence of a given element from a given list.\n    '''\n    newList.remove(ele)\n    return newList\n    \ndef remove_List_1(newList, ele):\n    '''\n    Write a python function to remove the first occurrence of a given element from a given list.\n    '''\n    newList.remove(ele)\n    return newList\n    \ndef remove_List_2(newList, ele):\n    '''\n    Write a python function to remove the first occurrence of a given element from a given list.\n    '''\n    newList.remove(ele)\n    return newList\n    \ndef pop_List(newList):\n    '''\n    Write a python function to remove the last element of a given list.\n    '''\n    return newList.pop()\n    \ndef pop_List_1(newList):\n    '''\n    Write a python function to remove the last element of a given list.\n    '''\n    return newList.pop()\n    \ndef pop_List_2(newList):\n    '''\n    Write a python function to remove the last element of a given list.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.append(newList.pop(0))\n    return newList\n",
        "num_ids": 21
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "num_ids": 32
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n",
        "num_ids": 40
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # If list is empty\n    if len(newList)==0:\n        return newList\n    else:\n        return newList[-1:] + newList[1:len(newList)-1] + newList[0:1]\n",
        "num_ids": 59
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    first_ele = newList[0]\n    last_ele = newList[-1]\n    newList[0] = last_ele\n    newList[-1] = first_ele\n    \n    return newList\n    \ndef swap_List_by_swapping(newList):\n    '''\n    Use a for loop to swap the first and last element of a given list.\n    '''\n    \n    length = len(newList)\n    i = 0\n    for i in range(length/2):\n        temp = newList[i]\n        newList[i] = newList[length - 1 - i]\n        newList[length - 1 - i] = temp\n    \n    return newList\n    \ndef is_a_list(obj):\n    '''\n    Write a function that takes an object and returns a boolean True if it is a list or False if it is not.\n    '''\n    \n    if type(obj) is list:\n        return True\n    else:\n        return False\n    \ndef is_a_list_of_lists(obj):\n    '''\n    Write a function that takes an object and returns a boolean True if it is a list of lists or False if it is not.\n    '''\n    \n    if is_a_list(obj) and is_a_list_of_lists(obj[0]):\n        return True\n    else:\n        return False\n    \ndef get_length_of_list(obj):\n    '''\n    Write a function that takes an object and returns the length of the object if it is a list or the length of the first element of the object if it is a list of lists.\n    '''\n    \n    if is_a_list(obj):\n        return len(obj)\n    else:\n        return len(obj[0])\n    \ndef get_length_of_list_of_lists(obj):\n    '''\n    Write a function that takes an object and returns the length of the object if it is a list of lists or the length of the first element of the object if it is a list.\n    '''\n    \n    if is_a_list_of_lists(obj):\n        return len(obj)\n    else:\n        return len(obj[0])\n    \ndef get_first_item(obj):\n    '''\n    Write a function that takes an object and returns the first item if it is a list or the first item of the first item of the object if it is a list of lists.\n    '''\n    \n    if is_a_list(obj):\n        return obj[0]\n    else:\n        return obj[0][0]\n    \ndef get_first_item_of_list(obj):\n    '''\n    Write a function that takes an object and returns the first item of the object if it is a list or the first item of the first item of the object if it is a list of lists.\n    '''\n    \n    if is_a_list_of_lists(obj):\n        return obj[0]\n    else:\n        return obj[0][0]\n    \ndef get_last_item(obj):\n    '''\n    Write a function that takes an object and returns the last item if it is a list or the last item of the last item of the object if it is a list of lists.\n    '''\n    \n    if is_a_list(obj):\n        return obj[-1]\n    else:\n        return obj[-1][-1]\n    \ndef get_last_item_of_list(obj):\n    '''\n    Write a function that takes an object and returns the last item of the object if it is a list or the last item of the last item of the object if it is a list of lists.\n    '''\n    \n    if is_a_list_of_lists(obj):\n        return obj[-1]\n    else:\n        return obj[-1][-1]\n    \ndef get_first_and_last_items(obj):\n    '''\n    Write a function that takes an object and returns a list that contains the first and last items if it is a list or the first and last items of the first and last item of the object if it is a list of lists.\n    '''\n    \n    if is_a_list(obj):\n        return [obj[0], obj[-1]]\n    else:\n        return [obj[0][0], obj[-1][-1]]\n    \ndef get_first_and_last_items_of_list(obj):\n    '''\n    Write a function that takes an object and returns a list that contains the first and last items of the object if it is a list or the first and last items of the first and last item of the object if it is a list of lists.\n    '''\n    \n    if is_a_list_of_lists(obj):\n        return [obj[0], obj[-1]]\n    else:\n        return [obj[0][0], obj[-1][-1]]\n    \ndef get_first_n_items(obj, n):\n    '''\n    Write a function that takes an object and returns a list that contains the first n items if it is a list or the first n items of the first n items of the object if it is a list of lists.\n    '''\n    \n    if is_a_list(obj):\n        return obj[:n]\n    else:\n        return obj[0][:n]\n    \ndef get_first_n_items_of_list(obj, n):\n    '''\n    Write a function that takes an object and returns a list that contains the first n items of the object if it is a list or the first n items of the first n items of the object if it is a list of lists.\n    '''\n    \n    if is_a_list_of_lists(obj):\n        return obj[:n]\n    else:\n        return obj[0][:n]\n    \ndef get_last_n_items(obj, n):\n    '''\n    Write a function that takes an object and returns a list that contains the last n items if it is a list or the last n items of the last n items of the object if it is a list of lists.\n    '''\n    \n    if is_a_list(obj):\n        return obj[-n:]\n    else:\n        return obj[-1][-n:]\n    \ndef get_last_n_items_of_list(obj, n):\n    '''\n    Write a function that takes an object and returns a list that contains the last n items of the object if it is a list or the last n items of the last n items of the object if it is a list of lists.\n    '''\n    \n    if is_a_list_of_lists(obj):\n        return obj[-n:]\n    else:\n        return obj[-1][-n:]\n    \ndef get_middle_item(obj):\n    '''\n    Write a function that takes an object and returns the middle item if it is a list or the middle item of the middle item if it is a list of lists.\n    '''\n    \n    if is_a_list(obj):\n        if get_length_of_list(obj) % 2 == 0:\n            return obj[get_length_of_list(obj)/2 - 1]\n        else:\n            return obj[get_length_of_list(obj)/2]\n    else:\n        if get_length_of_list_of_lists(obj) % 2 == 0:\n            return obj[get_length_of_list_of_lists(obj)/2 - 1]\n        else:\n            return obj[get_length_of_list_of_lists(obj)/2]\n    \ndef get_middle_item_of_list(obj):\n    '''\n    Write a function that takes an object and returns the middle item of the object if it is a list or the middle item of the middle item of the object if it is a list of lists.\n    '''\n    \n    if is_a_list_of_lists(obj):\n        if get_length_of_list_of_lists(obj) % 2 == 0:\n            return obj[get_length_of_list_of_lists(obj)/2 - 1]\n        else:\n            return obj[get_length_of_list_of_lists(obj)/2]\n    else:\n        if get_length_of_list(obj) % 2 == 0:\n            return obj[get_length_of_list(obj)/2 - 1]\n        else:\n            return ob",
        "num_ids": 137
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    return newList[-1:] + newList[1:-1] + newList[:1]\n",
        "num_ids": 26
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if (newList == []):\n        return []\n    return [newList[-1]] + newList[1:-1] + [newList[0]]\n",
        "num_ids": 40
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    size = len(newList)\n    temp = newList[0]\n    newList[0] = newList[size-1]\n    newList[size-1] = temp\n    return newList\n",
        "num_ids": 51
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) == 0:\n        return []\n    if len(newList) == 1:\n        return newList\n    else:\n        newList[0],newList[-1] = newList[-1],newList[0]\n        return newList\n",
        "num_ids": 67
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    print(r)\n    return math.pi * r**2 / 4\n",
        "num_ids": 24
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (3.141592654*r**2)/4\n",
        "num_ids": 18
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import pi\n    \n    return (r * r) * pi / 4\n",
        "num_ids": 22
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    s = math.sqrt(3)*r\n    return math.pi*r*s/3\n    \ndef circle_area(r) :\n    '''\n    Write a python function to find the area of the largest circle that can be inscribed in a square with a given side length.\n    '''\n    return math.pi*r*r\n    \ndef largest_triangle(r) :\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a square with a given side length.\n    '''\n    return r*r/2\n    \ndef largest_circle(r) :\n    '''\n    Write a python function to find the area of the largest circle that can be inscribed in a square with a given side length.\n    '''\n    return r*r*math.pi/4\n    \ndef smallest_triangle(r) :\n    '''\n    Write a python function to find the area of the smallest triangle that can be inscribed in a circle with a given radius.\n    '''\n    return (r/3)*r*r/4\n    \ndef smallest_circle(r) :\n    '''\n    Write a python function to find the area of the smallest circle that can be inscribed in a square with a given side length.\n    '''\n    return r*r*math.pi/4\n    \ndef area_of_smallest_triangle(r) :\n    '''\n    Write a python function to find the area of the smallest triangle that can be inscribed in a circle with a given radius.\n    '''\n    return 3*r*r/4\n    \ndef area_of_smallest_circle(r) :\n    '''\n    Write a python function to find the area of the smallest circle that can be inscribed in a square with a given side length.\n    '''\n    return math.pi*r*r/4\n    \ndef perimeter_of_triangle(r) :\n    '''\n    Write a python function to find the perimeter of a triangle that can be inscribed in a circle with a given radius.\n    '''\n    return 3*math.pi*r\n    \ndef perimeter_of_circle(r) :\n    '''\n    Write a python function to find the perimeter of a circle that can be inscribed in a square with a given side length.\n    '''\n    return math.pi*r*2\n    \ndef perimeter_of_smallest_triangle(r) :\n    '''\n    Write a python function to find the perimeter of the smallest triangle that can be inscribed in a circle with a given radius.\n    '''\n    return math.pi*r\n    \ndef perimeter_of_smallest_circle(r) :\n    '''\n    Write a python function to find the perimeter of the smallest circle that can be inscribed in a square with a given side length.\n    '''\n    return math.pi*r\n    \ndef largest_triangle_in_circle(r) :\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a circle with a given radius.\n    '''\n    return math.pi*r**2/4\n    \ndef largest_circle_in_square(r) :\n    '''\n    Write a python function to find the area of the largest circle that can be inscribed in a square with a given side length.\n    '''\n    return r**2*math.pi/4\n    \ndef perimeter_of_smallest_triangle_in_circle(r) :\n    '''\n    Write a python function to find the perimeter of the smallest triangle that can be inscribed in a circle with a given radius.\n    '''\n    return math.pi*r\n    \ndef perimeter_of_smallest_circle_in_square(r) :\n    '''\n    Write a python function to find the perimeter of the smallest circle that can be inscribed in a square with a given side length.\n    '''\n    return math.pi*r\n    \ndef area_of_largest_triangle_in_circle(r) :\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a circle with a given radius.\n    '''\n    return math.pi*r*r/4\n    \ndef area_of_largest_circle_in_square(r) :\n    '''\n    Write a python function to find the area of the largest circle that can be inscribed in a square with a given side length.\n    '''\n    return r*r*math.pi/4\n    \ndef perimeter_of_largest_triangle_in_circle(r) :\n    '''\n    Write a python function to find the perimeter of the largest triangle that can be inscribed in a circle with a given radius.\n    '''\n    return math.pi*r\n    \ndef perimeter_of_largest_circle_in_square(r) :\n    '''\n    Write a python function to find the perimeter of the largest circle that can be inscribed in a square with a given side length.\n    '''\n    return math.pi*r*2\n    \ndef perimeter_of_smallest_triangle_in_circle(r) :\n    '''\n    Write a python function to find the perimeter of the smallest triangle that can be inscribed in a circle with a given radius.\n    '''\n    return math.pi*r\n    \ndef perimeter_of_smallest_circle_in_square(r) :\n    '''\n    Write a python function to find the perimeter of the smallest circle that can be inscribed in a square with a given side length.\n    '''\n    return math.pi*r\n    \ndef area_of_smallest_triangle_in_circle(r) :\n    '''\n    Write a python function to find the area of the smallest triangle that can be inscribed in a circle with a given radius.\n    '''\n    return math.pi*r**2/4\n    \ndef area_of_smallest_circle_in_square(r) :\n    '''\n    Write a python function to find the area of the smallest circle that can be inscribed in a square with a given side length.\n    '''\n    return r**2*math.pi/4\n    \ndef smallest_triangle_in_circle(r) :\n    '''\n    Write a python function to find the area of the smallest triangle that can be inscribed in a circle with a given radius.\n    '''\n    return r*r/2\n    \ndef smallest_circle_in_square(r) :\n    '''\n    Write a python function to find the area of the smallest circle that can be inscribed in a square with a given side length.\n    '''\n    return r*r*math.pi/4\n    \ndef perimeter_of_smallest_triangle_in_circle(r) :\n    '''\n    Write a python function to find the perimeter of the smallest triangle that can be inscribed in a circle with a given radius.\n    '''\n    return math.pi*r\n    \ndef perimeter_of_smallest_circle_in_square(r) :\n    '''\n    Write a python function to find the perimeter of the smallest circle that can be inscribed in a square with a given side length.\n    '''\n    return math.pi*r\n    \ndef area_of_smallest_triangle_in_circle(r) :\n    '''\n    Write a python function to find the area of the smallest triangle that can be inscribed in a circle with a given radius.\n    '''\n    return math.pi*r**2/4\n    \ndef area_of_smallest_circle_in_square(r) :\n    '''\n    Write a python function to find the area of the smallest circle that can be inscribed in a square with a given side length.\n    '''\n    return r**2*math.pi/4\n    \ndef radius_of_smallest_triangle(r) :\n    '''\n    Write a python function to find the radius of the smallest triangle that can be inscribed in a circle with a given radius.\n    '''\n    return math.sqrt(3)*r\n    \ndef radius_of_smallest_circle(r) :\n    '''\n    Write a python function to find the radius of the smallest circle that can be inscribed in a square with a given side length.\n    '''\n    return math.sqrt(3)*r/2\n    \ndef radius_of_largest_triangle(r) :\n    '''\n    Write a python function to find the radius of the largest triangle that can be inscribed in a circle with a given radius.\n    '''\n    return r*2/3\n    \ndef radiu",
        "num_ids": 15
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = sqrt(3) / 4 * r**2\n    return a\n",
        "num_ids": 21
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = (3**0.5)/4 * r**2\n    return area\n    \ndef equation_of_a_circle(r) :  \n    '''\n    Write a python function that, given the radius of a circle, will return the equation of that circle.\n    '''\n    return \"x^2 + y^2 = r^2\"\n",
        "num_ids": 18
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (3*(r**2))/4\n",
        "num_ids": 15
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # input\n    r = float(r)\n    # compute\n    return (r**2) * (1 - (r**2))/4\n",
        "num_ids": 37
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r > 0 :\n        area = 3 * (r ** 2)\n        print(\"The area of the largest triangle that can be inscribed in a semicircle with a given radius is {}\".format(area))\n    else :\n        print(\"The area of the largest triangle that can be inscribed in a semicircle with a given radius is {}\".format(0))\n",
        "num_ids": 84
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area = 2 * math.pi * r * r / 2\n    return area\n",
        "num_ids": 25
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) -1\n",
        "num_ids": 19
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n",
        "num_ids": 17
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if end <= 0:\n        return 1\n    if start >= end:\n        return 1\n    if array[start]!= start:\n        return start\n    # find the largest num that is >= than the current num\n    for i in range(start+1,end):\n        if array[i] - array[start] >= 0:\n            return array[i]+1\n    return array[start]+1\ndef test_find_First_Missing():\n    array = [1,2,4,5,6,7,8,9,10]\n    assert(find_First_Missing(array)==11)\n    assert(find_First_Missing(array,start=3)==1)\n    assert(find_First_Missing(array,start=2,end=4)==2)\n    array = [1,2,3,5,6,7,8,9,10,11,12]\n    assert(find_First_Missing(array)==13)\n    assert(find_First_Missing(array,start=3)==1)\n    assert(find_First_Missing(array,start=2,end=4)==2)\n    assert(find_First_Missing(array,start=3,end=5)==3)\n    array = [1,2,3,5,6,7,8,9,10,11,12]\n    assert(find_First_Missing(array,start=3,end=5)==1)\n    assert(find_First_Missing(array,start=3,end=5)==1)\ndef find_Missing_Integer(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if end <= 0:\n        return 1\n    if array[start]!= start:\n        return start\n    # find the largest num that is >= than the current num\n    for i in range(start+1,end):\n        if array[i] - array[start] >= 0:\n            return array[i]+1\n    return array[start]+1\ndef test_find_Missing_Integer():\n    array = [1,2,4,5,6,7,8,9,10]\n    assert(find_Missing_Integer(array)==11)\n    assert(find_Missing_Integer(array,start=3)==1)\n    assert(find_Missing_Integer(array,start=2,end=4)==2)\n    array = [1,2,3,5,6,7,8,9,10,11,12]\n    assert(find_Missing_Integer(array)==13)\n    assert(find_Missing_Integer(array,start=3)==1)\n    assert(find_Missing_Integer(array,start=2,end=4)==2)\n    assert(find_Missing_Integer(array,start=3,end=5)==3)\n    array = [1,2,3,5,6,7,8,9,10,11,12]\n    assert(find_Missing_Integer(array,start=3,end=5)==1)\n    assert(find_Missing_Integer(array,start=3,end=5)==1)\n    assert(find_Missing_Integer(array,start=3,end=5)==1)\n",
        "num_ids": 394
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start == end:\n        return start\n    mid = (start + end)/2\n    if (array[mid] - array[start]) * (array[end] - array[mid]) <= 0:\n        if (array[mid] - array[start]) * (array[end] - array[mid+1]) <= 0:\n            return find_First_Missing(array,mid+1,end)\n        return find_First_Missing(array,start,mid)\n    return find_First_Missing(array,mid+1,end)\n",
        "num_ids": 143
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    if start>end:\n        return None\n    mid = (end-start)//2 + start\n    if array[mid]!=mid and array[mid+1]==mid+1:\n        return mid+1\n    elif array[mid]!=mid:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid-1)\n",
        "num_ids": 120
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n",
        "num_ids": 18
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if start>end:\n        return start\n    elif array[start]!=start:\n        return start\n    elif array[end]!=end:\n        return end\n    else:\n        return find_First_Missing(array,start+1,end-1)\ndef find_First_Missing_Better(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if start>end:\n        return start\n    elif array[start]!=start:\n        return start\n    elif array[end]!=end:\n        return end\n    else:\n        if array[start]==array[end]:\n            return find_First_Missing_Better(array,start+1,end-1)\n        else:\n            return find_First_Missing_Better(array,start,end-1)\ndef find_First_Missing_Optimized(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if start>end:\n        return start\n    elif array[start]!=start:\n        return start\n    elif array[end]!=end:\n        return end\n    else:\n        if array[start]==array[end]:\n            return find_First_Missing_Optimized(array,start+1,end-1)\n        else:\n            return find_First_Missing_Optimized(array,start,end-1)\ndef find_First_Missing_Optimized2(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if start>end:\n        return start\n    elif array[start]!=start:\n        return start\n    elif array[end]!=end:\n        return end\n    else:\n        while start<end:\n            if array[start]==array[end]:\n                start+=1\n                end-=1\n            elif array[start]<array[end]:\n                array[start],array[end]=array[end],array[start]\n                start+=1\n                end-=1\n            elif array[start]>array[end]:\n                array[start],array[end]=array[end],array[start]\n                start+=1\n                end-=1\n            else:\n                return find_First_Missing_Optimized2(array,start+1,end-1)\n        return start\ndef find_First_Missing_Optimized3(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if start>end:\n        return start\n    elif array[start]!=start:\n        return start\n    elif array[end]!=end:\n        return end\n    else:\n        while start<end:\n            if array[start]==array[end]:\n                start+=1\n                end-=1\n            elif array[start]<array[end]:\n                array[start],array[end]=array[end],array[start]\n                start+=1\n                end-=1\n            elif array[start]>array[end]:\n                array[start],array[end]=array[end],array[start]\n                start+=1\n                end-=1\n            else:\n                return find_First_Missing_Optimized3(array,start+1,end-1)\n        return start\ndef find_First_Missing_Optimized4(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if start>end:\n        return start\n    elif array[start]!=start:\n        return start\n    elif array[end]!=end:\n        return end\n    else:\n        while start<end:\n            if array[start]==array[end]:\n                start+=1\n                end-=1\n            elif array[start]<array[end]:\n                array[start],array[end]=array[end],array[start]\n                start+=1\n                end-=1\n            elif array[start]>array[end]:\n                array[start],array[end]=array[end],array[start]\n                start+=1\n                end-=1\n            else:\n                return find_First_Missing_Optimized4(array,start+1,end-1)\n        return start\ndef find_First_Missing_Optimized5(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if start>end:\n        return start\n    elif array[start]!=start:\n        return start\n    elif array[end]!=end:\n        return end\n    else:\n        while start<end:\n            if array[start]==array[end]:\n                start+=1\n                end-=1\n            elif array[start]<array[end]:\n                array[start],array[end]=array[end],array[start]\n                start+=1\n                end-=1\n            elif array[start]>array[end]:\n                array[start],array[end]=array[end],array[start]\n                start+=1\n                end-=1\n            else:\n                return find_First_Missing_Optimized5(array,start+1,end-1)\n        return start\ndef find_First_Missing_Optimized6(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if start>end:\n        return start\n    elif array[start]!=start:\n        return start\n    elif array[end]!=end:\n        return end\n    else:\n        while start<end:\n            if array[start]==array[end]:\n                start+=1\n                end-=1\n            elif array[start]<array[end]:\n                array[start],array[end]=array[end],array[start]\n                start+=1\n                end-=1\n            elif array[start]>array[end]:\n                array[start],array[end]=array[end],array[start]\n                start+=1\n                end-=1\n            else:\n                return find_First_Missing_Optimized6(array,start+1,end-1)\n        return start\ndef find_First_Missing_Optimized7(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if start>end:\n        return start\n    elif array[start]!=start:\n        return start\n    elif array[end]!=end:\n        return end\n    else:\n        while start<end:\n            if array[start]==array[end]:\n                start+=1\n                end-=1\n            elif array[start]<array[end]:\n                array[start],array[end]=array[end],array[start]\n                start+=1\n                end-=1\n            elif array[start]>array[end]:\n                array[start],array[end]=array[end],array[start]\n                start+=1\n                end-=1\n            else:\n                return find_First_Missing_Optimized7(array,start+1,end-1)\n        return start\ndef find_First_Missing_Optimized8(array,start=0,end",
        "num_ids": 230
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if(end==None):\n        end=len(array)\n    if(start>=end):\n        return array[0]\n    if(array[start]==start+1):\n        return find_First_Missing(array,start+1,end)\n    elif(array[end]==end-1):\n        return find_First_Missing(array,start,end-1)\n    return array[start]+1\n",
        "num_ids": 103
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if start > end:\n        return start\n    if start == end:\n        return start\n    mid = (start+end)/2\n    if array[mid] == mid:\n        return find_First_Missing(array,start,mid-1)\n    else:\n        return find_First_Missing(array,mid+1,end)\n",
        "num_ids": 98
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    if start > end:\n        return None\n    mid = (start+end)/2\n    if array[mid]!= mid:\n        return mid\n    else:\n        if array[mid-1] == mid-1:\n            return find_First_Missing(array,mid+1,end)\n        else:\n            return find_First_Missing(array,start,mid-1)\n",
        "num_ids": 110
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_str = ''\n    for i in string:\n        if i =='':\n            new_str += '%20'\n        else:\n            new_str += i\n    return new_str\n",
        "num_ids": 50
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return '%20'.join(string.split(' '))\n",
        "num_ids": 17
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = re.sub(r' ', '%20', string)\n    return string\n",
        "num_ids": 23
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return ''.join(string.split())\n",
        "num_ids": 13
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even=[]\n    for i in list:\n        if i%2==0:\n            even.append(i)\n    return even\n    \nprint Split([1,2,3,4,5])\n",
        "num_ids": 51
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n    return even\n",
        "num_ids": 35
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in list:\n        if i%2==0:\n            even.append(i)\n    return even\n",
        "num_ids": 35
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers\n",
        "num_ids": 44
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    newlist = []\n    for i in list:\n        if i % 2 == 0:\n            newlist.append(i)\n    return newlist\n    ",
        "num_ids": 39
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            print list[i]\n",
        "num_ids": 33
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for i in list:\n        if i % 2 == 0:\n            evens.append(i)\n    return evens\n",
        "num_ids": 38
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [x for x in list if x % 2 == 0]\n    \ndef Split1(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return list(filter(lambda x: x%2==0,list))\n    ",
        "num_ids": 21
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_number_list = []\n    for i in list:\n        if i%2 == 0:\n            even_number_list.append(i)\n    return even_number_list\n",
        "num_ids": 47
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    elements = []\n    for x in list:\n        if x%2 == 0:\n            elements.append(x)\n    return elements\n    \ndef main():\n    print(Split([1,2,3,4,5,6]))\n",
        "num_ids": 62
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x = ele[0]\n    y = ele[1]\n    result = [\n        (x+1,y),\n        (x-1,y),\n        (x,y+1),\n        (x,y-1)\n    ]\n    result.extend(sub)\n    return result\n",
        "num_ids": 75
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return ( (ele[0], ele[1]-1), (ele[0], ele[1]+1), (ele[0]-1, ele[1]), (ele[0]+1, ele[1]) )\n",
        "num_ids": 51
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    coor = []\n    for x in range(1, max(ele[0], ele[1]) + 1):\n        if ele[0] + x <= max(ele[0], ele[1]) and ele[1] + x <= max(ele[0], ele[1]):\n            coor.append((ele[0] + x, ele[1] + x))\n        if ele[0] + x <= max(ele[0], ele[1]) and ele[1] - x >= min(ele[0], ele[1]):\n            coor.append((ele[0] + x, ele[1] - x))\n        if ele[0] - x >= min(ele[0], ele[1]) and ele[1] - x >= min(ele[0], ele[1]):\n            coor.append((ele[0] - x, ele[1] - x))\n        if ele[0] - x >= min(ele[0], ele[1]) and ele[1] + x <= max(ele[0], ele[1]):\n            coor.append((ele[0] - x, ele[1] + x))\n    if ele in coor:\n        coor.remove(ele)\n    return coor\n",
        "num_ids": 292
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    sub.append(ele[0])\n    sub.append(ele[1])\n    \n    if ele[0] > 0: \n        if (ele[0]-1, ele[1]) in sub:\n            adjac(ele, sub)\n        else:\n            sub.pop()\n            return\n    if ele[1] > 0:\n        if (ele[0], ele[1]-1) in sub:\n            adjac(ele, sub)\n        else:\n            sub.pop()\n            return\n    if ele[0] < len(ele)-1:\n        if (ele[0]+1, ele[1]) in sub:\n            adjac(ele, sub)\n        else:\n            sub.pop()\n            return\n    if ele[1] < len(ele)-1:\n        if (ele[0], ele[1]+1) in sub:\n            adjac(ele, sub)\n        else:\n            sub.pop()\n            return\n",
        "num_ids": 231
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [(ele[0], ele[1]+1),(ele[0]+1,ele[1]),(ele[0],ele[1]-1),(ele[0]-1,ele[1])]\n",
        "num_ids": 50
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(ele) < 2:\n        return []\n    return [tuple(ele[0:2] + [x]) for x in range(ele[2]-1, ele[2]+2)]\n    \ndef adjac_pairs(coords, *args, **kwargs):\n    '''\n    Same as adjac but with a list of coordinates\n    '''\n    return [tuple(x) for x in coords]\n",
        "num_ids": 17
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x > 0:\n        if y > 0:\n            return (x-1, y-1)\n        elif y == 0:\n            return (x-1, y)\n        else:\n            return (x-1, y+1)\n    elif x == 0:\n        if y > 0:\n            return (x, y-1)\n        elif y == 0:\n            return (x, y)\n        else:\n            return (x, y+1)\n    else:\n        if y > 0:\n            return (x+1, y-1)\n        elif y == 0:\n            return (x+1, y)\n        else:\n            return (x+1, y+1)\n",
        "num_ids": 181
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    list = [(ele[0]+1, ele[1]), (ele[0], ele[1]+1), (ele[0]-1, ele[1]), (ele[0], ele[1]-1)]\n    if len(sub)>0:\n        list = [x for x in list if x not in sub]\n    return list\n",
        "num_ids": 80
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] == 0:\n        return [(ele[0], ele[1]-1), (ele[0], ele[1]+1)]\n    elif ele[0] == 9:\n        return [(ele[0], ele[1]-1), (ele[0], ele[1]+1)]\n    else:\n        return [(ele[0]-1, ele[1]), (ele[0]+1, ele[1])]\n",
        "num_ids": 103
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    new_sub = []\n    if len(sub) == 0:\n        new_sub.append((ele[0], ele[1] - 1))\n        new_sub.append((ele[0], ele[1] + 1))\n        new_sub.append((ele[0] - 1, ele[1]))\n        new_sub.append((ele[0] + 1, ele[1]))\n    else:\n        new_sub.append((ele[0] + 1, ele[1]))\n        new_sub.append((ele[0] - 1, ele[1]))\n        new_sub.append((ele[0], ele[1] + 1))\n        new_sub.append((ele[0], ele[1] - 1))\n    return new_sub\n",
        "num_ids": 185
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    for i in range(len(text)):\n        if text[i] =='':\n            text = text[:i] + '_' + text[i+1:]\n        elif text[i] == '_':\n            text = text[:i] +'' + text[i+1:]\n    return text\n",
        "num_ids": 78
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n",
        "num_ids": 19
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if not text:\n        return text\n    result = []\n    for c in text:\n        if c.isspace():\n            result.append('_')\n        else:\n            result.append(c)\n    return ''.join(result)\n",
        "num_ids": 61
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n",
        "num_ids": 19
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for letter in text:\n        if letter =='':\n            new_text += '_'\n        else:\n            new_text += letter\n    return new_text\n",
        "num_ids": 49
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n",
        "num_ids": 19
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ','_')\n    text = text.replace('_','')\n    return text\n    \ndef replace_underscores(text):\n    '''\n    Write a function to replace underscores with spaces and vice versa in a given string.\n    '''\n    text = text.replace('_','')\n    text = text.replace(' ', '_')\n    return text\n",
        "num_ids": 30
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for i in range(len(text)):\n        if text[i] =='':\n            new_text += '_'\n        elif text[i] == '_':\n            new_text +=''\n        else:\n            new_text += text[i]\n",
        "num_ids": 73
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n",
        "num_ids": 19
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return ''.join(x if x!=''else '_' for x in text)\n",
        "num_ids": 24
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for elem in num_list:\n        if elem!= 0:\n            new_list.append(elem)\n    for i in range(len(num_list)-len(new_list)):\n        new_list.append(0)\n    return new_list\n",
        "num_ids": 75
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if len(num_list) <= 1:\n        return num_list\n",
        "num_ids": 20
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for index, value in enumerate(num_list):\n        if value == 0:\n            num_list.pop(index)\n            num_list.append(0)\n    return num_list\n",
        "num_ids": 49
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.remove(num_list[i])\n            num_list.append(0)\n",
        "num_ids": 52
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes = 0\n    for i in range(0, len(num_list)):\n        if num_list[i] == 0:\n            zeroes += 1\n    for i in range(0, zeroes):\n        num_list.append(0)\n    return num_list\n",
        "num_ids": 71
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    list_with_zeroes = [i for i in num_list if i == 0]\n    list_without_zeroes = [i for i in num_list if i!= 0]\n    print list_with_zeroes + list_without_zeroes\n",
        "num_ids": 63
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    pos = 0\n    for i in xrange(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[pos], num_list[i] = num_list[i], num_list[pos]\n            pos += 1\n    return num_list\n",
        "num_ids": 73
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in num_list:\n        if i == 0:\n            num_list.remove(i)\n            num_list.append(0)\n    return num_list\n",
        "num_ids": 44
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if arr == []:\n        return 0\n    sum = 0\n    for i in xrange(len(arr)):\n        for j in xrange(i+1, len(arr)):\n            sum += arr[i] ^ arr[j]\n    return sum\n",
        "num_ids": 65
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr.sort()\n    result = 0\n    for i in xrange(n):\n        if i == 0 or i == n - 1:\n            result += arr[i]\n        else :\n            result += arr[i]^arr[i-1]\n    return result\n",
        "num_ids": 67
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    return sum([x ^ y for x, y in zip(arr, arr[1:])])\n",
        "num_ids": 25
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0 \n    for i in range(n) : \n        for j in range(i+1,n) : \n            res = res ^ arr[i] ^ arr[j] \n    return res \n",
        "num_ids": 55
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # if len(arr)!= 2:\n    #     print \"Invalid Input\"\n    # else :\n    #     return arr[0] ^ arr[1]\n    return arr[0] ^ arr[1]\n",
        "num_ids": 53
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    if n <= 0 :\n        return 0\n    if n == 1 :\n        return arr[0]\n",
        "num_ids": 29
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            else:\n                ans = ans + arr[i] ^ arr[j]\n    return ans\n",
        "num_ids": 58
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if arr == None:\n        return 0\n    res = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            res += arr[i] ^ arr[j]\n    return res\n",
        "num_ids": 57
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0\n    for i in range(n) : \n        for j in range(i+1,n) : \n            res = res + arr[i] ^ arr[j]\n    return res\n",
        "num_ids": 52
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # method 1\n    sum = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            sum += arr[i] ^ arr[j]\n    return sum\n",
        "num_ids": 59
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "num_ids": 51
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h, i)\n    return [hq.heappop(h) for i in xrange(len(h))]\n",
        "num_ids": 52
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def max_heapify(lst):\n        '''\n        Build a max-heap from the given list.\n        '''\n        for i in range(len(lst)//2 - 1, -1, -1):\n            max_heapify_recursive(lst, i)\n    def max_heapify_recursive(lst, i):\n        '''\n        Build a max-heap from the given list.\n        '''\n        l = len(lst)\n        left = 2*i + 1\n        right = 2*i + 2\n        largest = i\n        if left < l and lst[left] > lst[largest]:\n            largest = left\n        if right < l and lst[right] > lst[largest]:\n            largest = right\n        if largest!= i:\n            lst[largest], lst[i] = lst[i], lst[largest]\n            max_heapify_recursive(lst, largest)\n    max_heapify(iterable)\n    res = []\n    while len(iterable)!= 0:\n        res.append(iterable.pop())\n        max_heapify_recursive(iterable, 0)\n    return res\n",
        "num_ids": 185
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h, i)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "num_ids": 51
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    sorted_list = []\n    hq.heapify(sorted_list)\n    for elem in iterable:\n        hq.heappush(sorted_list, elem)\n    return sorted_list\n",
        "num_ids": 56
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef bubble_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(0, len(iterable)):\n        for j in range(0, len(iterable)-i-1):\n            if iterable[j] > iterable[j+1]:\n                iterable[j], iterable[j+1] = iterable[j+1], iterable[j]\n    return iterable\ndef insertion_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(1, len(iterable)):\n        temp = iterable[i]\n        j = i-1\n        while (j >= 0) and (iterable[j] > temp):\n            iterable[j+1] = iterable[j]\n            j -= 1\n        iterable[j+1] = temp\n    return iterable\ndef merge_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable) <= 1:\n        return iterable\n    mid = int(len(iterable) / 2)\n    left_sorted = merge_sort(iterable[:mid])\n    right_sorted = merge_sort(iterable[mid:])\n    i = 0\n    j = 0\n    k = 0\n    while i < len(left_sorted) and j < len(right_sorted):\n        if left_sorted[i] <= right_sorted[j]:\n            iterable[k] = left_sorted[i]\n            i += 1\n        else:\n            iterable[k] = right_sorted[j]\n            j += 1\n        k += 1\n    while i < len(left_sorted):\n        iterable[k] = left_sorted[i]\n        i += 1\n        k += 1\n    while j < len(right_sorted):\n        iterable[k] = right_sorted[j]\n        j += 1\n        k += 1\n    return iterable\ndef quick_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable) <= 1:\n        return iterable\n    else:\n        pivot = iterable[0]\n        left = []\n        right = []\n        for i in iterable:\n            if i < pivot:\n                left.append(i)\n            elif i > pivot:\n                right.append(i)\n            else:\n                pass\n        return quick_sort(left) + [pivot] + quick_sort(right)\ndef radix_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    max_digit = max(iterable)\n    exp = 1\n    while max_digit / exp > 0:\n        bucket_list = [[] for i in range(10)]\n        for num in iterable:\n            bucket_list[(num // exp) % 10].append(num)\n        iterable = []\n        for bucket in bucket_list:\n            iterable += bucket\n        exp *= 10\n    return iterable\ndef counting_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    buckets = [[] for i in range(10)]\n    for num in iterable:\n        buckets[num].append(num)\n    iterable = []\n    for bucket in buckets:\n        iterable += bucket\n    return iterable\ndef heap_sort_with_heap(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef merge_sort_with_heap(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable) <= 1:\n        return iterable\n    mid = int(len(iterable) / 2)\n    left_sorted = merge_sort_with_heap(iterable[:mid])\n    right_sorted = merge_sort_with_heap(iterable[mid:])\n    i = 0\n    j = 0\n    k = 0\n    while i < len(left_sorted) and j < len(right_sorted):\n        if left_sorted[i] <= right_sorted[j]:\n            iterable[k] = left_sorted[i]\n            i += 1\n        else:\n            iterable[k] = right_sorted[j]\n            j += 1\n        k += 1\n    while i < len(left_sorted):\n        iterable[k] = left_sorted[i]\n        i += 1\n        k += 1\n    while j < len(right_sorted):\n        iterable[k] = right_sorted[j]\n        j += 1\n        k += 1\n    return iterable\ndef quick_sort_with_heap(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable) <= 1:\n        return iterable\n    else:\n        pivot = iterable[0]\n        left = []\n        right = []\n        for i in iterable:\n            if i < pivot:\n                left.append(i)\n            elif i > pivot:\n                right.append(i)\n            else:\n                pass\n        return quick_sort_with_heap(left) + [pivot] + quick_sort_with_heap(right)\ndef radix_sort_with_heap(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    max_digit = max(iterable)\n    exp = 1\n    while max_digit / exp > 0:\n        bucket_list = [[] for i in range(10)]\n        for num in iterable:\n            bucket_list[(num // exp) % 10].append(num)\n        iterable = []\n        for bucket in bucket_list:\n            iterable += bucket\n        exp *= 10\n    return iterable\ndef counting_sort_with_heap(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    buckets = [[] for i in range(10)]\n    for num in iterable:\n        buckets[num].append(num)\n    iterable = []\n    for bucket in buckets:\n        iterable += bucket\n    return iterable\ndef heap_sort_2(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef merge_sort_2(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable) <= 1:\n        return iterable\n    mid = int(len(iterable) / 2)\n    left_sorted = merge_sort_2(iterable[:mid])\n    right_sorted = merge_sort_2(iterable[mid:])\n    i = 0\n    j = 0\n    k = 0\n    while i < len(left_sorted) and j < len(right_sorted):\n        if left_sorted[i] <= right_sorted[j]:\n            iterable[k] = left_sorted[i]\n            i += 1\n        else:\n            iterable[k] = right_sorted[j]\n            j += 1\n        k += 1\n    while i < len(left_sorted):\n        iterable[k] = left_sorted[i]\n        i += 1\n        k += 1\n    while j < len(right_sorted):\n        iterable[k] = right_sorted[j]\n        j += 1\n        k += 1\n    return iterable\ndef quick_sort_2(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable) <= 1:\n        return ite",
        "num_ids": 17
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for i in iterable:\n        hq.heappush(heap, i)\n    return [hq.heappop(heap) for _ in iterable]\n",
        "num_ids": 50
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable)==1:\n        return\n    for i in range(len(iterable)):\n        minimum=iterable[0]\n        hq.heapreplace(iterable,minimum)\n        print(iterable)\n    return iterable\n",
        "num_ids": 64
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # return sorted(iterable)\n    l = list(iterable)\n    hq.heapify(l)\n    return [hq.heappop(l) for i in range(len(l))]\n",
        "num_ids": 54
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for val in iterable:\n        hq.heappush(h,val)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "num_ids": 51
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        print('No loss!')\n    elif actual_cost == sale_amount:\n        print('No profit!')\n    else:\n        print('Loss!')\n",
        "num_ids": 53
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == 0.0:\n        return True\n    elif actual_cost < sale_amount:\n        return False\n    else:\n        return noprofit_noloss(actual_cost - sale_amount, sale_amount)\n",
        "num_ids": 61
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return (actual_cost>=sale_amount)\n",
        "num_ids": 15
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    no_profit=no_loss=0\n    for i in range(len(actual_cost)):\n        if actual_cost[i]>sale_amount[i]:\n            no_profit += (actual_cost[i]-sale_amount[i])\n        elif actual_cost[i]<sale_amount[i]:\n            no_loss += sale_amount[i]-actual_cost[i]\n    if no_profit==0 and no_loss==0:\n        return True\n    else:\n        return False\n        \ndef calculate_profit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit=loss=0\n    for i in range(len(actual_cost)):\n        if actual_cost[i]>sale_amount[i]:\n            profit += actual_cost[i]-sale_amount[i]\n        elif actual_cost[i]<sale_amount[i]:\n            loss += sale_amount[i]-actual_cost[i]\n    return profit,loss\n",
        "num_ids": 94
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        print 'No Profit'\n    elif actual_cost <= sale_amount:\n        print 'No Loss'\n",
        "num_ids": 39
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost==sale_amount:\n        return 'NOPROFIT'\n    elif actual_cost<sale_amount:\n        return 'NOLOSS'\n    else:\n        return 'PROFIT'\n        \n        \ndef main():\n    actual_cost=int(input())\n    sale_amount=int(input())\n    \n    print(noprofit_noloss(actual_cost,sale_amount))\n    \nif __name__=='__main__':\n    main(",
        "num_ids": 122
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost < sale_amount:\n        return False\n    else:\n        return True\n",
        "num_ids": 25
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return \"Unprofitable\"\n    elif actual_cost <= sale_amount:\n        return \"Profitable\"\n    else:\n        return \"Error\"\n",
        "num_ids": 50
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return False\n    return True\n",
        "num_ids": 21
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount==0:\n        print(\"We cannot sell any shares\")\n        return True\n    elif sale_amount<0:\n        print(\"We cannot sell any shares\")\n        return True\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return round((35.74 + 0.6215 * t) + (0.4275 * t - 35.75) * math.pow(v,0.16) + 0.4275 * t * math.pow(v,0.16))\n",
        "num_ids": 62
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    print(v)\n    v=math.ceil(v)\n    print(v)\n    wci=35.74 + 0.6215*t + (0.4275*t-35.75)*math.pow(v,0.16)\n    return round(wci)\n",
        "num_ids": 72
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wc_index = 35.74 + 0.6215*t + (0.4275*t - 35.75)*math.pow(v,0.16)\n    return round(wc_index)\n",
        "num_ids": 53
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    a = 35.74 + 0.6215*t + (35.75*math.pow(v,0.16))\n    return int(round(a))\n",
        "num_ids": 44
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    result=35.74+0.6215*t-35.75*(v**0.16)+0.4275*t*(v**0.16)\n    return int(round(result))\n",
        "num_ids": 51
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    a = 35.74 + 0.6215 * t + (0.4275 * t - 35.75) * math.pow(v, 0.16)\n    return round(a)\n    ",
        "num_ids": 65
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    return int(round(35.74 + 0.6215 * t + ((v**0.16) * (0.4275 * t - 35.75))))\n",
        "num_ids": 56
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v=float(v)\n    t=float(t)\n    wci = 35.74 + 0.6215 * t + (132.74 - 35.74) * math.pow(v,0.16) + 0.4275 * t * math.pow(v,0.16)\n    return int(round(wci))\n",
        "num_ids": 84
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci=35.74 + 0.6215*t + (0.4275*t - 35.75)*math.pow(v,0.16)\n    return int(round(wci))\n",
        "num_ids": 51
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = v/3.6 #Convert to m/s\n    t = (t - 32) * 5/9 #Convert to Fahrenheit\n    wind_chill = 13.12 + (0.6215*t) - (11.37 * math.pow(v, 0.16)) + (0.3965 * t * math.pow(v, 0.16))\n    return math.floor(wind_chill)\n",
        "num_ids": 104
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    #Write your code here\n    sum = 0\n    for x in sample_names:\n        if x[0].isupper():\n            sum += len(x)\n    return sum\n",
        "num_ids": 45
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name[0].isupper():\n            result += len(name)\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if name[0].islower()])\n",
        "num_ids": 26
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    \ndef sample_word_length(sample_string):\n    '''\n    Write a function to return the number of words in a given string.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if name[0].isupper()])\n",
        "num_ids": 26
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    name_list = []\n    for item in sample_names:\n        if item[0].isupper():\n            name_list.append(item)\n    return len(''.join(name_list))\n",
        "num_ids": 50
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    low_letters = 'abcdefghijklmnopqrstuvwxyz'\n    for i in range(len(sample_names)):\n        if sample_names[i][0] in low_letters:\n            sample_names[i] = sample_names[i][1:]\n    return sum(len(x) for x in sample_names)\n",
        "num_ids": 87
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(map(len, [i for i in sample_names if i[0].isupper()]))\n    \nsample_names = ['rory', 'ronaldo', 'jerry', 'erin', 'james', 'brett', 'lilie','micah']\n",
        "num_ids": 68
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if name[0].isupper()])\n",
        "num_ids": 26
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if name[0].isupper()])\n",
        "num_ids": 26
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.split('(')[0]\n    items = items.split(')')[0]\n    return items\n",
        "num_ids": 31
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.split('(',1)[1][:-1]\n    return items\n",
        "num_ids": 23
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    lst=[]\n    for i in items:\n        i=i.replace(')','')\n        i=i.replace('(','')\n        lst.append(i)\n    return lst\n",
        "num_ids": 53
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    i = 0\n    res = []\n    while i < len(items):\n        if items[i] == '(':\n            j = i\n            while j < len(items):\n                if items[j] == ')':\n                    break\n                j += 1\n            res.append(items[i+1:j])\n            i = j + 1\n        else:\n            res.append(items[i])\n        i += 1\n    return res\n",
        "num_ids": 108
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i in range(len(items)):\n        if items[i] == '(':\n            items[i] = ''\n        elif items[i] == ')':\n            items[i] = ''\n        elif items[i] == '[':\n            items[i] = ''\n        elif items[i] == ']':\n            items[i] = ''\n        elif items[i] == '{':\n            items[i] = ''\n        elif items[i] == '}':\n            items[i] = ''\n        elif items[i] == '\"':\n            items[i] = ''\n        elif items[i] == ',':\n            items[i] = ''\n        else:\n            items[i] = items[i]\n    return items\n",
        "num_ids": 190
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for item in items:\n        new_items.append(re.sub(\"[\\(\\)]\",\"\",item))\n    return new_items\n",
        "num_ids": 42
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    lst = []\n    for i in items:\n        if i not in \"()\":\n            lst.append(i)\n    return lst\ndef is_consonant(letter):\n    '''\n    Write a function to return True if the letter is a consonant and False if it is a vowel.\n    '''\n    if letter == 'a' or letter == 'e' or letter == 'i' or letter == 'o' or letter == 'u' or letter == 'y':\n        return False\n    else:\n        return True\ndef pig_latin(word):\n    '''\n    Write a function to convert a word to Pig Latin.\n    '''\n    vowels = 'aeiou'\n    new_word = word\n    if word[0] in vowels:\n        new_word = word + 'yay'\n    else:\n        new_word = word[1:] + word[0] + 'ay'\n    return new_word\ndef vowel_count(string):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    count = 0\n    for i in string:\n        if i in 'aeiou':\n            count += 1\n    return count\ndef first_last(string):\n    '''\n    Write a function to change the case of the first letter and the last letter of the word to upper and lower respectively.\n    '''\n    new_string = ''\n    first = string[0]\n    last = string[-1]\n    if first.isupper():\n        first = first.lower()\n    else:\n        first = first.upper()\n    if last.isupper():\n        last = last.lower()\n    else:\n        last = last.upper()\n    return first + string[1:-1] + last\ndef is_palindrome(string):\n    '''\n    Write a function that takes a string as input and returns True if the string is a palindrome and False if it is not.\n    '''\n    if string[0]!= string[-1]:\n        return False\n    elif len(string) <= 1:\n        return True\n    else:\n        return is_palindrome(string[1:-1])\ndef is_pallindrome(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    lst = []\n    for i in string:\n        lst.append(i)\n    if lst == lst[::-1]:\n        return True\n    else:\n        return False\ndef is_isogram(string):\n    '''\n    Write a function to check if a string is an isogram or not.\n    '''\n    lst = []\n    for i in string:\n        lst.append(i)\n    if len(lst) == len(set(lst)):\n        return True\n    else:\n        return False\ndef is_anagram(string1, string2):\n    '''\n    Write a function to check if two strings are anagram or not.\n    '''\n    if sorted(string1) == sorted(string2):\n        return True\n    else:\n        return False\ndef convert_to_num(string):\n    '''\n    Write a function to convert a string to a number.\n    '''\n    if len(string) == 0:\n        return 0\n    else:\n        return int(string[0]) * convert_to_num(string[1:])\ndef convert_to_num_efficient(string):\n    '''\n    Write a function to convert a string to a number.\n    '''\n    if string == '':\n        return 0\n    else:\n        return int(string[0]) + 10 * convert_to_num_efficient(string[1:])\ndef reverse_string(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    if len(string) <= 1:\n        return string\n    else:\n        return string[-1] + reverse_string(string[:-1])\ndef rotate_string(string,n):\n    '''\n    Write a function to rotate a string by n spaces.\n    '''\n    if n == 0:\n        return string\n    elif n < 0:\n        return rotate_string(string[-n:],n)\n    else:\n        return rotate_string(string[:-n],n)\ndef search_string(string,substring):\n    '''\n    Write a function to search a substring in a string.\n    '''\n    if substring in string:\n        return True\n    else:\n        return False\ndef count_words(string):\n    '''\n    Write a function to count the number of words in a string.\n    '''\n    if string[-1] =='':\n        return 1 + count_words(string[:-1])\n    else:\n        return 1\ndef remove_space(string):\n    '''\n    Write a function to remove all the spaces in a string.\n    '''\n    if string[-1] =='':\n        return string[:-1]\n    else:\n        return string\ndef count_unique_words(string):\n    '''\n    Write a function to count the number of unique words in a string.\n    '''\n    lst = []\n    for i in string:\n        if i!='' and i not in lst:\n            lst.append(i)\n    return len(lst)\ndef count_words_efficient(string):\n    '''\n    Write a function to count the number of words in a string.\n    '''\n    if string == '':\n        return 0\n    else:\n        if string[-1] =='':\n            return 1 + count_words_efficient(string[:-1])\n        else:\n            return 1\ndef count_vowels(string):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    count = 0\n    for i in string:\n        if i in 'aeiou':\n            count += 1\n    return count\ndef is_valid_parenthesis(string):\n    '''\n    Write a function to check if a string is a valid parenthesis.\n    '''\n    if string == ')':\n        return True\n    elif string == '(':\n        return True\n    else:\n        return False\ndef is_valid_parenthesis_efficient(string):\n    '''\n    Write a function to check if a string is a valid parenthesis.\n    '''\n    if string == '':\n        return True\n    elif string[0] == '(' and string[-1] == ')':\n        return True\n    else:\n        return False\ndef is_valid_parenthesis_2(string):\n    '''\n    Write a function to check if a string is a valid parenthesis.\n    '''\n    if len(string) % 2!= 0:\n        return False\n    else:\n        stack = []\n        for i in string:\n            if i == '(':\n                stack.append(')')\n            elif i == ')':\n                if stack == []:\n                    return False\n                else:\n                    stack.pop()\n        if stack == []:\n            return True\n        else:\n            return False\ndef is_valid_parenthesis_3(string):\n    '''\n    Write a function to check if a string is a valid parenthesis.\n    '''\n    if string == '':\n        return True\n    elif string[0] == '(' and string[-1] == ')':\n        return True\n    else:\n        return is_valid_parenthesis_3(string[1:-1])\ndef is_valid_parenthesis_4(string):\n    '''\n    Write a function to check if a string is a valid parenthesis.\n    '''\n    if len(string) == 0:\n        return True\n    elif len(string) % 2!= 0:\n        return False\n    else:\n        count = 0\n        for i in string:\n            if i == '(':\n                count += 1\n            elif i == ')':\n                count -= 1\n            if count < 0:\n                return False\n        if count == 0:\n            return True\n        else:\n            return False\ndef is_valid_parenthesis_5(string):\n    '''\n    Write a function to check if a string is a valid parenthesis.\n    '''\n    if len(string) == 0:\n    ",
        "num_ids": 13
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for i in items:\n        new_items.append(re.sub(r'\\([^)]*\\)', '', i))\n    return new_items\n",
        "num_ids": 47
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if(len(items) == 1):\n        return items[0]\n    l = items[0]\n    r = items[-1]\n    if(l == \"(\" and r == \")\"):\n        return remove_parenthesis(items[1:-1])\n    return l+remove_parenthesis(items[1:-1])+r\n",
        "num_ids": 83
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\([^()]*\\)', '', items)\n",
        "num_ids": 23
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 0: \n        return 0\n    elif n == 1:\n        return 0\n    else:\n        previous = 0\n        count = 0\n        while count <= n:\n            current = previous + count * (count - 1)\n            if current == n:\n                return current\n            previous = current\n            count += 1\n        \nprint(is_nonagonal(3)) # 3\nprint(is_nonagonal(4)) # 6\nprint(is_nonagonal(10)) # 15\nprint(is_nonagonal(-1)) # 0\nprint(is_nonagonal(0)) # 0",
        "num_ids": 144
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    num = 0\n    while num <= n:\n        num = a + b + c\n        a = b\n        b = c\n        c = num\n    return num\n",
        "num_ids": 57
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 3\n    if n == 2:\n        return 7\n    return n**2 + n - 2 * (n - 1)\n",
        "num_ids": 51
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Notice that the sum of the first three numbers is odd.\n    # Therefore the first 3 nonagonals are: 1, 3, 7\n    if n < 3: \n        return 1\n    else:\n        return ((n - 3) % 6) + 1\n",
        "num_ids": 63
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return ((n * (n + 1) + 1) * n) / 2\n",
        "num_ids": 21
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * (n-1) // 2\n",
        "num_ids": 29
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (n - 2) * (n - 4) / 6 == 0\n",
        "num_ids": 22
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    \n    if n % 4 == 0:\n        return 0\n    if n % 4 == 1:\n        return 1\n    if n % 4 == 2:\n        return -1\n    if n % 4 == 3:\n        return 1\n    return -1\n",
        "num_ids": 62
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*(n+1)//2\n",
        "num_ids": 14
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    numerator, denominator = 1, 1\n    while True:\n        numerator, denominator = numerator + denominator, denominator + 1\n        if denominator > n:\n            break\n    return numerator - n + 1\n",
        "num_ids": 58
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #found = re.match('^[^z]+', text)\n    found = re.search('z[^a-zA-Z]', text)\n    return found\n",
        "num_ids": 44
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text is None:\n        return None\n    if len(text) < 1:\n        return None\n    return text_match_wordz(text)\n",
        "num_ids": 39
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text.lower().startswith('z') or text.lower().endswith('z'):\n        return False\n    else:\n        return bool(re.search('z', text.lower()))\n",
        "num_ids": 51
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    x = re.search(r'[^z]z', text)\n    return not bool(x)\n",
        "num_ids": 28
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == '':\n        return False\n    text = re.sub(r'[^a-zA-Z0-9]+', '', text)\n    text = text.lower()\n    if text == 'z' or text == 'zs':\n        return True\n    else:\n        return False\n",
        "num_ids": 75
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text_split = text.split()\n    text_out = []\n    for i in range(len(text_split)):\n        if text_split[i][0] == \"z\" or text_split[i][-1] == \"z\":\n            pass\n        else:\n            text_out.append(text_split[i])\n    return \" \".join(text_out)\n",
        "num_ids": 94
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if (text.find('z')!= 0) and (text.find('z')!= -1):\n        return False\n    elif text.find('z') == 0:\n        return True\n    elif text.find('z') == -1:\n        return True\n",
        "num_ids": 68
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'^z.+?z$')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n",
        "num_ids": 42
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    def z(word):\n        if (word[0] == 'z') or (word[-1] == 'z') or (word[1:-1].find('z')!= -1):\n            return False\n        else:\n            return True\n    words = text.split(' ')\n    count = 0\n    for word in words:\n        if z(word):\n            count += 1\n    return count\n",
        "num_ids": 99
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # use split() function\n    # first split by space, then check the first and the last word\n    s = text.split(' ')\n    # print s\n    # s[0] = ''\n    # s[-1] = ''\n    for x in s:\n        if not re.search(r'[zZ]', x):\n            print x\ndef text_match_wordz_middle2(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # use split() function\n    # first split by space, then check the first and the last word\n    s = text.split(' ')\n    # print s\n    # s[0] = ''\n    # s[-1] = ''\n    for x in s:\n        if not re.search(r'[zZ]', x):\n            print x\n            \ndef text_match_wordz_middle3(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # use split() function\n    # first split by space, then check the first and the last word\n    s = text.split(' ')\n    # print s\n    # s[0] = ''\n    # s[-1] = ''\n    for x in s:\n        if not re.search(r'[zZ]', x):\n            print x\n            \ndef text_match_wordz_middle4(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # use split() function\n    # first split by space, then check the first and the last word\n    s = text.split(' ')\n    # print s\n    # s[0] = ''\n    # s[-1] = ''\n    for x in s:\n        if not re.search(r'[zZ]', x):\n            print x\n            \ndef text_match_wordz_middle5(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # use split() function\n    # first split by space, then check the first and the last word\n    s = text.split(' ')\n    # print s\n    # s[0] = ''\n    # s[-1] = ''\n    for x in s:\n        if not re.search(r'[zZ]', x):\n            print x\n            \ndef text_match_wordz_middle6(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # use split() function\n    # first split by space, then check the first and the last word\n    s = text.split(' ')\n    # print s\n    # s[0] = ''\n    # s[-1] = ''\n    for x in s:\n        if not re.search(r'[zZ]', x):\n            print x\n            \ndef text_match_wordz_middle7(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # use split() function\n    # first split by space, then check the first and the last word\n    s = text.split(' ')\n    # print s\n    # s[0] = ''\n    # s[-1] = ''\n    for x in s:\n        if not re.search(r'[zZ]', x):\n            print x\n            \ndef text_match_wordz_middle8(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # use split() function\n    # first split by space, then check the first and the last word\n    s = text.split(' ')\n    # print s\n    # s[0] = ''\n    # s[-1] = ''\n    for x in s:\n        if not re.search(r'[zZ]', x):\n            print x\n            \ndef text_match_wordz_middle9(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # use split() function\n    # first split by space, then check the first and the last word\n    s = text.split(' ')\n    # print s\n    # s[0] = ''\n    # s[-1] = ''\n    for x in s:\n        if not re.search(r'[zZ]', x):\n            print x\n            \ndef text_match_wordz_middle10(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # use split() function\n    # first split by space, then check the first and the last word\n    s = text.split(' ')\n    # print s\n    # s[0] = ''\n    # s[-1] = ''\n    for x in s:\n        if not re.search(r'[zZ]', x):\n            print x\n            \ndef text_match_wordz_middle11(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # use split() function\n    # first split by space, then check the first and the last word\n    s = text.split(' ')\n    # print s\n    # s[0] = ''\n    # s[-1] = ''\n    for x in s:\n        if not re.search(r'[zZ]', x):\n            print x\n            \ndef text_match_wordz_middle12(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # use split() function\n    # first split by space, then check the first and the last word\n    s = text.split(' ')\n    # print s\n    # s[0] = ''\n    # s[-1] = ''\n    for x in s:\n        if not re.search(r'[zZ]', x):\n            print x\n            \ndef text_match_wordz_middle13(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # use split() function\n    # first split by space, then check the first and the last word\n    s = text.split(' ')\n    # print s\n    # s[0] = ''\n    # s[-1] = ''\n    for x in s:\n        if not re.search(r'[zZ]', x):\n            print x\n            \ndef text_match_wordz_middle14(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # use split() function\n    # first split by space, then check the first and the last word\n    s = text.split(' ')\n    # print s\n    # s[0] = ''\n    # s[-1] = ''\n    for x in s:\n        if not re.search(r'[zZ]', x):\n            print x\n            \ndef text_match_wordz_middle15(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # use split() function\n    # first split by space, then check the first and the last word\n    s = text.split(' ')\n    # print s\n    # s[0] = ''\n    # s[-1] = ''\n    for x in s:\n        if not re.search(r'[zZ]', x):\n            print x\n            \ndef text_match_wordz_middle16(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # use split() function",
        "num_ids": 8
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[k:][::-1]\n",
        "num_ids": 14
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = list(input)\n    input_len = len(input)\n",
        "num_ids": 20
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if input == None or len(input) < 2:\n        return input\n    k = k % len(input)\n    input = input[:k] + input[::-1] + input[k:]\n    return input\n",
        "num_ids": 55
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input = input[:k] + input[::-1]\n    return input\n    \ndef reverse_Array_Upto_K_2(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[k:][::-1] + input[:k]\n    \ndef reverse_Array_Upto_K_3(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[k:][::-1] + input[:k]\n    \ndef reverse_Array_Upto_K_4(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[k:] + input[:k]\n    \n    \nif __name__ == '__main__':\n    a = [1,2,3,4,5]\n    k = 4\n    print reverse_Array_Upto_K_2(a, k)\n    print reverse_Array_Upto_K_3(a, k)\n    print reverse_Array_Upto_K_4(a, k)\n",
        "num_ids": 107
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k == 0:\n        return None\n    if k > len(input):\n        return None\n    elif k < 0:\n        return None\n    else:\n        return input[:k] + input[::-1][k:]\n",
        "num_ids": 59
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[k::-1]\n",
        "num_ids": 12
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    rev_array = input[::-1]\n    return rev_array\n",
        "num_ids": 20
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k] + list(reversed(input[k:]))\n",
        "num_ids": 22
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:][::-1]\n",
        "num_ids": 24
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input.reverse()\n    return input\n",
        "num_ids": 12
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key in test_dict:\n        test_tup = test_tup + (test_dict[key],)\n    return test_tup\n",
        "num_ids": 38
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = list(test_tup)\n    for key, val in test_dict.iteritems():\n        new_tup[key] = val\n    return tuple(new_tup)\n",
        "num_ids": 51
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    tup_with_dict = (test_tup, test_dict)\n    return tup_with_dict\n",
        "num_ids": 30
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    tup_len = len(test_tup)\n    new_tup = tuple(test_tup[0:tup_len]) + tuple(test_dict.values())\n    return new_tup\n",
        "num_ids": 53
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + tuple(test_dict.values())\n",
        "num_ids": 18
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup\n",
        "num_ids": 26
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = ()\n    new_tup = test_tup + (test_dict,)\n    return new_tup\n    \ndef add_dict_to_list(test_list, test_dict):\n    '''\n    Write a function to add a dictionary to the list. The output should be a list.\n    '''\n    new_list = ()\n    new_list = test_list + (test_dict,)\n    return new_list\n    \ndef test_add_dict_to_tuple():\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = (1,2,3)\n    test_dict = {'one':1, 'two':2, 'three':3}\n    \n    assert add_dict_to_tuple(test_tup, test_dict) == (1, 2, 3, {'one': 1, 'two': 2, 'three': 3})\n    \ndef test_add_dict_to_list():\n    '''\n    Write a function to add a dictionary to the list. The output should be a list.\n    '''\n    test_list = [1,2,3]\n    test_dict = {'one':1, 'two':2, 'three':3}\n    \n    assert add_dict_to_list(test_list, test_dict) == [1, 2, 3, {'one': 1, 'two': 2, 'three': 3}]\n    \ndef test_add_dict_to_tuple():\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = (1,2,3)\n    test_dict = {'one':1, 'two':2, 'three':3}\n    \n    assert add_dict_to_tuple(test_tup, test_dict) == (1, 2, 3, {'one': 1, 'two': 2, 'three': 3})\n    \ndef test_add_dict_to_list():\n    '''\n    Write a function to add a dictionary to the list. The output should be a list.\n    '''\n    test_list = [1,2,3]\n    test_dict = {'one':1, 'two':2, 'three':3}\n    \n    assert add_dict_to_list(test_list, test_dict) == [1, 2, 3, {'one': 1, 'two': 2, 'three': 3}]\n    \ndef test_add_dict_to_tuple():\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = (1,2,3)\n    test_dict = {'one':1, 'two':2, 'three':3}\n    \n    assert add_dict_to_tuple(test_tup, test_dict) == (1, 2, 3, {'one': 1, 'two': 2, 'three': 3})\n    \ndef test_add_dict_to_list():\n    '''\n    Write a function to add a dictionary to the list. The output should be a list.\n    '''\n    test_list = [1,2,3]\n    test_dict = {'one':1, 'two':2, 'three':3}\n    \n    assert add_dict_to_list(test_list, test_dict) == [1, 2, 3, {'one': 1, 'two': 2, 'three': 3}]\n    \ndef test_add_dict_to_tuple():\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = (1,2,3)\n    test_dict = {'one':1, 'two':2, 'three':3}\n    \n    assert add_dict_to_tuple(test_tup, test_dict) == (1, 2, 3, {'one': 1, 'two': 2, 'three': 3})\n    \ndef test_add_dict_to_list():\n    '''\n    Write a function to add a dictionary to the list. The output should be a list.\n    '''\n    test_list = [1,2,3]\n    test_dict = {'one':1, 'two':2, 'three':3}\n    \n    assert add_dict_to_list(test_list, test_dict) == [1, 2, 3, {'one': 1, 'two': 2, 'three': 3}]\n    \ndef test_add_dict_to_tuple():\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = (1,2,3)\n    test_dict = {'one':1, 'two':2, 'three':3}\n    \n    assert add_dict_to_tuple(test_tup, test_dict) == (1, 2, 3, {'one': 1, 'two': 2, 'three': 3})\n    \ndef test_add_dict_to_list():\n    '''\n    Write a function to add a dictionary to the list. The output should be a list.\n    '''\n    test_list = [1,2,3]\n    test_dict = {'one':1, 'two':2, 'three':3}\n    \n    assert add_dict_to_list(test_list, test_dict) == [1, 2, 3, {'one': 1, 'two': 2, 'three': 3}]\n    \ndef test_add_dict_to_tuple():\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = (1,2,3)\n    test_dict = {'one':1, 'two':2, 'three':3}\n    \n    assert add_dict_to_tuple(test_tup, test_dict) == (1, 2, 3, {'one': 1, 'two': 2, 'three': 3})\n    \ndef test_add_dict_to_list():\n    '''\n    Write a function to add a dictionary to the list. The output should be a list.\n    '''\n    test_list = [1,2,3]\n    test_dict = {'one':1, 'two':2, 'three':3}\n    \n    assert add_dict_to_list(test_list, test_dict) == [1, 2, 3, {'one': 1, 'two': 2, 'three': 3}]\n    \ndef test_add_dict_to_tuple():\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = (1,2,3)\n    test_dict = {'one':1, 'two':2, 'three':3}\n    \n    assert add_dict_to_tuple(test_tup, test_dict) == (1, 2, 3, {'one': 1, 'two': 2, 'three': 3})\n    \ndef test_add_dict_to_list():\n    '''\n    Write a function to add a dictionary to the list. The output should be a list.\n    '''\n    test_list = [1,2,3]\n    test_dict = {'one':1, 'two':2, 'three':3}\n    \n    assert add_dict_to_list(test_list, test_dict) == [1, 2, 3, {'one': 1, 'two': 2, 'three': 3}]\n    \ndef test_add_dict_to_tuple():\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = (1,2,3)\n    test_dict = {'one':1, 'two':2, 'three':3}\n    \n    assert add_dict_to_tuple(test_tup, test_dict) == (1, 2, 3, {'one': 1, 'two': 2, 'three': 3})\n    \ndef test_add_dict_to_list():\n    '''\n    Write a function t",
        "num_ids": 7
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    #tup_list = list(test_tup)\n    #tup_list.extend(test_dict)\n    #test_tup = tuple(tup_list)\n    test_tup += tuple(test_dict.values())\n    #return test_tup\n    return test_tup\n",
        "num_ids": 77
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup) + tuple(test_dict.values())\n",
        "num_ids": 21
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    try:\n        for key, value in test_dict.iteritems():\n            test_tup = test_tup + (value,)\n        return test_tup\n    except TypeError:\n        return \"Error: Invalid Dictionary\"\n",
        "num_ids": 57
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    m = len(cost)\n    n = len(cost[0])\n    \n    dp = [[0 for i in range(n)] for j in range(m)]\n    \n    for i in range(n):\n        dp[0][i] = cost[0][i]\n    \n    for j in range(m):\n        dp[j][0] = cost[j][0]\n    \n    for i in range(1,m):\n        for j in range(1,n):\n            dp[i][j] = cost[i][j] + min(dp[i-1][j],dp[i][j-1])\n    \n    return dp[m-1][n-1]/(n*m)\n    \nif __name__ == \"__main__\":\n    cost = [[1, 2, 1, 2, 1],\n            [2, 1, 2, 1, 2],\n            [1, 2, 1, 2, 1],\n            [2, 1, 2, 1, 2],\n            [1, 2, 1, 2, 1]]\n    print maxAverageOfPath(cost)",
        "num_ids": 264
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows = len(cost)\n    cols = len(cost[0])\n",
        "num_ids": 21
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    N = len(cost)\n    \n    # Base case - if matrix is size 1x1 then its path is itself,\n    # so average is simply cost of that cell\n    if N == 1:\n        return cost[0][0]\n    \n    # Store max average over all subpaths\n    maxAverage = float('-inf')\n    \n    # Compute max average for all subpaths\n    for i in range(N):\n        for j in range(N):\n            # Compute max average for current path and store it\n            maxAverage = max(maxAverage, averageOfPath(i,j,cost))\n    \n    # Return max average\n    return maxAverage\n",
        "num_ids": 161
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    max_path = [0]\n    row = len(cost)\n    col = len(cost[0])\n    for i in range(row):\n        for j in range(col):\n            max_path.append(cost[i][j]+max_path[i+1] if i+1 < row else 0)\n            max_path[-1] += cost[i][j] if j+1 < col else 0\n    return max_path[-1]/row/col\n",
        "num_ids": 116
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m, n = len(cost), len(cost[0])\n    \n    table = [[0 for j in range(n)] for i in range(m)]\n    \n    table[0][0] = cost[0][0]\n    \n    for i in range(1, m):\n        table[i][0] = table[i-1][0] + cost[i][0]\n        \n    for j in range(1, n):\n        table[0][j] = table[0][j-1] + cost[0][j]\n        \n    for i in range(1, m):\n        for j in range(1, n):\n            table[i][j] = min(table[i-1][j], table[i][j-1]) + cost[i][j]\n            \n    return table[m-1][n-1] / (m*n)\n    \n    \ndef minPathSum(m):\n    '''\n    Given a matrix of size M*N, find the minimum sum of path from each cell to the bottom right corner.\n    '''\n    m, n = len(m), len(m[0])\n    table = [[0 for j in range(n)] for i in range(m)]\n    \n    table[0][0] = m[0][0]\n    \n    for i in range(1, m):\n        table[i][0] = table[i-1][0] + m[i][0]\n        \n    for j in range(1, n):\n        table[0][j] = table[0][j-1] + m[0][j]\n        \n    for i in range(1, m):\n        for j in range(1, n):\n            table[i][j] = min(table[i-1][j], table[i][j-1]) + m[i][j]\n            \n    return table[m-1][n-1]\n    \n    \ndef maxRectangle(histogram):\n    '''\n    Given a histogram, find the largest rectangle with all ones in it.\n    '''\n    m = len(histogram)\n    table = [[0 for j in range(m)] for i in range(m)]\n    \n    for i in range(m):\n        table[i][0] = histogram[i]\n        \n    for j in range(1, m):\n        for i in range(m):\n            if i == 0:\n                table[i][j] = table[i][j-1] + histogram[i]\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1]) + histogram[i]\n                \n    max_area = 0\n    for i in range(m):\n        max_area = max(max_area, table[i][m-1])\n        \n    return max_area\n    \ndef maxOfTwoNumbers(a, b):\n    '''\n    Given two integers, find the maximum of them.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n    \n    \ndef maxProduct(nums):\n    '''\n    Given an integer array, find the maximum product that can be formed from any three numbers in the array.\n    '''\n    n = len(nums)\n    table = [[0 for j in range(n)] for i in range(n)]\n    \n    table[0][0] = nums[0]\n    for i in range(1, n):\n        table[i][0] = nums[i] * table[i-1][0]\n        \n    for j in range(1, n):\n        table[0][j] = nums[j] * table[0][j-1]\n        \n    for i in range(1, n):\n        for j in range(1, n):\n            table[i][j] = max(table[i-1][j], table[i][j-1], nums[i]*nums[j]*table[i-1][j-1])\n            \n    return table[n-1][n-1]\n    \n    \ndef findPeakElement(nums):\n    '''\n    Given an integer array, find the index of a peak element. An array element is a peak if it is NOT smaller than its neighbors.\n    '''\n    if len(nums) == 0:\n        return -1\n    \n    n = len(nums)\n    if n == 1:\n        return 0\n    \n    if nums[0] > nums[1]:\n        return 0\n    \n    if nums[n-1] > nums[n-2]:\n        return n-1\n    \n    low, high = 1, n-2\n    while low <= high:\n        mid = (low + high) / 2\n        if nums[mid] > nums[mid-1] and nums[mid] > nums[mid+1]:\n            return mid\n        elif nums[mid-1] < nums[mid] and nums[mid] < nums[mid+1]:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return -1\n    \n    \ndef intersection(a1, a2):\n    '''\n    Given two arrays a1, a2, each with possibly duplicate elements, return the number of pairs that appear in both arrays.\n    '''\n    count = 0\n    if len(a1) > len(a2):\n        a, b = a1, a2\n    else:\n        a, b = a2, a1\n    \n    for i in a:\n        if i in b:\n            count += 1\n            b.remove(i)\n            \n    return count\n    \n    \ndef maxUniqueMorseRepresentation(a):\n    '''\n    Given a string, find the lexicographically smallest string that contains at most each letter of the string at most twice.\n    '''\n    n = len(a)\n    m = n + 1\n    table = [[0 for j in range(m)] for i in range(n)]\n    \n    for i in range(n):\n        table[i][0] = i\n        \n    for i in range(1, m):\n        if i > n:\n            table[n][i] = table[n-1][i-1]\n        else:\n            table[i][i] = i\n            \n    for i in range(n):\n        for j in range(1, m):\n            if a[i] == a[j]:\n                table[i][j] = table[i-1][j-1]\n            elif a[i] =='':\n                table[i][j] = table[i][j-1]\n            elif a[j] =='':\n                table[i][j] = table[i-1][j]\n            else:\n                table[i][j] = min(table[i-1][j-1], table[i-1][j], table[i][j-1]) + 1\n                \n    return table[n-1][m-1]\n    \n    \ndef findBuildings(buildings):\n    '''\n    Given a 2-d array of integers, each integer represent a building, 0 represents empty space, 1 represents building, find the largest rectangle with all 1s.\n    '''\n    m, n = len(buildings), len(buildings[0])\n    table = [[0 for j in range(n)] for i in range(m)]\n    \n    table[0][0] = buildings[0][0]\n    \n    for i in range(1, m):\n        table[i][0] = buildings[i][0] + table[i-1][0]\n        \n    for j in range(1, n):\n        table[0][j] = buildings[0][j] + table[0][j-1]\n        \n    for i in range(1, m):\n        for j in range(1, n):\n            table[i][j] = min(table[i-1][j], table[i][j-1]) + buildings[i][j]\n            \n    return tabl",
        "num_ids": 194
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    row = len(cost)\n    col = len(cost[0])\n    # we first fill the first row and the first column\n    for i in xrange(1, col):\n        cost[0][i] += cost[0][i-1]\n    for i in xrange(1, row):\n        cost[i][0] += cost[i-1][0]\n    for i in xrange(1, row):\n        for j in xrange(1, col):\n            cost[i][j] += min(cost[i-1][j], cost[i][j-1])\n    return cost[row-1][col-1] / (row*col)\n",
        "num_ids": 161
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    grid = [[0 for i in range(len(cost))] for i in range(len(cost[0]))]\n    \n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            if i == 0 and j == 0:\n                grid[i][j] = cost[i][j]\n            elif i == 0:\n                grid[i][j] = grid[i][j-1] + cost[i][j]\n            elif j == 0:\n                grid[i][j] = grid[i-1][j] + cost[i][j]\n            else:\n                grid[i][j] = min(grid[i-1][j], grid[i][j-1]) + cost[i][j]\n    \n    print grid\n    \n    max_sum = float(\"-inf\")\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            current_sum = grid[i][j]\n            if i == 0 and j == 0:\n                continue\n            elif i == 0:\n                current_sum += grid[i][j-1]\n            elif j == 0:\n                current_sum += grid[i-1][j]\n            else:\n                current_sum += min(grid[i-1][j], grid[i][j-1])\n            \n            max_sum = max(max_sum, current_sum)\n    \n    return max_sum / (len(grid) * len(grid[0]))\n",
        "num_ids": 370
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # We will be using BFS to find the path with the maximum average\n",
        "num_ids": 19
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def maxPathUtil(mat, row, col, m, n, total, path, visited, res):\n        if row == m-1 and col == n-1:\n            res.append(total)\n            return\n        if row < m and col < n:\n            if visited[row][col] == False:\n                visited[row][col] = True\n                maxPathUtil(mat, row, col+1, m, n, total + mat[row][col], path + [mat[row][col]], visited, res)\n                visited[row][col] = False\n            maxPathUtil(mat, row+1, col, m, n, total + mat[row][col], path + [mat[row][col]], visited, res)\n        elif row < m:\n            maxPathUtil(mat, row+1, col, m, n, total + mat[row][col], path + [mat[row][col]], visited, res)\n        else:\n            maxPathUtil(mat, row, col+1, m, n, total + mat[row][col], path + [mat[row][col]], visited, res)\n        \n    m = len(cost)\n    n = len(cost[0])\n    visited = [[False for _ in range(n)] for _ in range(m)]\n    res = []\n    path = []\n    total = 0\n    maxPathUtil(cost, 0, 0, m, n, total, path, visited, res)\n    return max(res)\n",
        "num_ids": 363
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if len(cost) == 0:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    filtered_students = []\n    \n    for student in students.items():\n        height,weight = student[1]\n        \n        if height >= h and weight >= w:\n            filtered_students.append(student)\n            \n    return filtered_students\n",
        "num_ids": 68
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return [k for k,v in students.items() if v[0]>=h and v[1]>=w]\n",
        "num_ids": 33
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return [a for a in students.values() if a[0] > h and a[1] > w]\n",
        "num_ids": 29
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    print('The filtered students are:')\n    for name,(height,weight) in students.items():\n        if height>h and weight>w:\n            print(name)\n",
        "num_ids": 44
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student in students:\n        if students[student][0] > h and students[student][1] > w:\n            filtered_students[student] = students[student]\n    return filtered_students\n",
        "num_ids": 61
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {k: v for k, v in students.items() if v[0] > h and v[1] > w}\n",
        "num_ids": 33
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    print \"Students whose height is above the min height and weight is above the min weight are:\"\n    for student in students:\n        if students[student][0] > h and students[student][1] > w:\n            print student\n    \n",
        "num_ids": 59
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student in students:\n        if student[1][0] > h and student[1][1] > w:\n            filtered_students[student] = students[student]\n    return filtered_students\n",
        "num_ids": 61
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, info in students.iteritems():\n        if info[0] > h and info[1] > w:\n            filtered_students[student] = info\n    return filtered_students\n",
        "num_ids": 59
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    student_dict = {}\n    for student in students:\n        if students[student][0] > h and students[student][1] > w:\n            student_dict[student] = students[student]\n    return student_dict\n",
        "num_ids": 56
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    cnt = 0\n    for i in range(0, len(nums1)):\n        if nums1[i] == nums2[i]:\n            cnt += 1\n    return cnt\n",
        "num_ids": 51
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1) == len(nums2):\n        \n        pair_dict = {}\n        \n        for i in range(len(nums1)):\n            pair_dict[nums1[i]] = 0\n            pair_dict[nums2[i]] = 0\n        \n        for i in range(len(nums1)):\n            if nums1[i] == nums2[i]:\n                pair_dict[nums1[i]] += 1\n        \n        return pair_dict\n    else:\n        return -1\n",
        "num_ids": 134
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(0, len(nums1)):\n        if (eq(nums1[i], nums2[i])):\n            count += 1\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    result = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            result += 1\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return -1\n    else:\n        count = 0\n        for i in range(len(nums1)):\n            if nums1[i] == nums2[i]:\n                count += 1\n        return count\n    \ndef count_same_pair_2(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return -1\n    else:\n        return sum(1 for i in range(len(nums1)) if nums1[i] == nums2[i])\n    \ndef count_same_pair_3(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return -1\n    else:\n        count = 0\n        for i in range(len(nums1)):\n            if nums1[i] == nums2[i]:\n                count += 1\n        return count\n",
        "num_ids": 71
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    #solution 1:\n    return sum(1 for i,j in zip(nums1, nums2) if i == j)\n",
        "num_ids": 35
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    \n    equal_dict = {}\n    for i, num1 in enumerate(nums1):\n        if num1 in equal_dict:\n            equal_dict[num1] += 1\n        else:\n            equal_dict[num1] = 1\n",
        "num_ids": 62
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    counter = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            counter += 1\n    return counter\n",
        "num_ids": 48
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(int(i) ** power for i in str(base))\n",
        "num_ids": 20
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    #return sum(int(digit)**power for digit in str(base**power))\n    #ans = 0\n    #for i in str(base**power):\n    #    ans += int(i)**power\n    #return ans\n    return sum(int(digit)**power for digit in str(base**power))\n",
        "num_ids": 78
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    \n    # if base is 10, convert it to string\n    if base == 10:\n        return sum([int(i) for i in str(power)])\n    \n    # if power is 0, just return 1\n    elif power == 0:\n        return 1\n    \n    # if power is negative, return -1\n    elif power < 0:\n        return -1\n    \n    # loop through power\n    while power > 0:\n        base *= base\n        power -= 1\n    \n    return base\n",
        "num_ids": 123
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([base ** i for i in range(power)])\n",
        "num_ids": 18
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for i in str(base):\n        total += int(i)**power\n    return total\n",
        "num_ids": 30
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n",
        "num_ids": 7
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 1\n    if power == 1:\n        return base\n    return base * power_base_sum(base, power-1)\n",
        "num_ids": 41
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_power_sum = 0\n    for digit in range(0, power+1):\n        base_power_sum += int(base**digit)\n",
        "num_ids": 38
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power < 0:\n        return 0\n    elif power == 0:\n        return 1\n    elif power == 1:\n        return base\n    else:\n        return base * power_base_sum(base, power-1)\n",
        "num_ids": 58
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        total += ((base ** power) % 10)\n        power -= 1\n    return total\n",
        "num_ids": 35
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('\"(.*?)\"', text1)\n",
        "num_ids": 18
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text2 = re.findall(r'\\\".*?\\\"',text1)\n    return text2\n",
        "num_ids": 28
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    q_mark=text1.find('\\\"')\n    e_mark=text1.find('\\\"',q_mark+1)\n    if q_mark > 0:\n        if e_mark > 0:\n            return text1[q_mark+1:e_mark]\n        else:\n            return text1[q_mark+1:len(text1)]\n    else:\n        return None\n",
        "num_ids": 97
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Create a list of quotations marks\n    quotation_list = re.findall('\\\"(.+?)\\\"', text1)\n    # Removing punctuation marks from the list and joining the values\n    return [''.join(v for v in quotations if v not in punctuation) for quotations in quotation_list]\n",
        "num_ids": 74
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    regex=re.compile('\"')\n    text1=regex.findall(text1)\n    return text1\n",
        "num_ids": 33
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    try:\n        text = str(text1)\n    except:\n        return \"Error: Text is not in string format!\"\n    pattern = re.compile(r'\\\"(.*?)\\\"', re.S)\n    matches = re.findall(pattern, text)\n    for match in matches:\n        print match\n    return\n",
        "num_ids": 81
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #print(text1)\n    if(text1[0]==text1[-1]=='\"'):\n        text1=text1[1:-1]\n        \n    #print(text1)\n    #pass\n    return text1\n",
        "num_ids": 61
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    s=''\n    for x in text1:\n        if x=='\"':\n            s=s+' '\n        else:\n            s=s+x\n    return s.split()\n",
        "num_ids": 48
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('\"', text1)\n",
        "num_ids": 15
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    match = re.findall('\"',text1)\n    return match\n",
        "num_ids": 20
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    #initiate list that will contain new values\n    product = []\n    #create list from tuple\n    for i in range(len(test_tup)):\n        #add to product list\n        product.append(test_tup[i]*test_tup[i+1])\n    return tuple(product)\n",
        "num_ids": 78
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    output = ()\n    for i in range(len(test_tup)):\n        output += (test_tup[i] * test_tup[i + 1],)\n    return output\n",
        "num_ids": 49
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    def multiply(t1, t2):\n        if len(t2) > 1:\n            return t1 + (multiply(t1, t2[1:]))\n        else:\n            return t1 + t2\n",
        "num_ids": 58
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(tup1 * tup2 for tup1, tup2 in zip(test_tup[:-1], test_tup[1:]))\n",
        "num_ids": 41
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    #return tuple([tup_i * tup_i for tup_i in test_tup])\n    return tuple([tup_i * tup_i for i, tup_i in enumerate(test_tup[0:])])\n",
        "num_ids": 62
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for idx, value in enumerate(test_tup):\n        result = result + (value * test_tup[idx+1],)\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(map(lambda x, y: x*y, test_tup[:-1], test_tup[1:]))\n",
        "num_ids": 34
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if test_tup == ():\n        return ()\n    else:\n        first = test_tup[0]\n        second = test_tup[1]\n        return (first * second,) + multiply_elements(test_tup[1:])\n",
        "num_ids": 64
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    tup_result = ()\n    for i in range(len(test_tup)-1):\n        tup_result += (test_tup[i],)\n    return tup_result\n",
        "num_ids": 49
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(test_tup[i] * test_tup[i+1] for i in range(len(test_tup)-1))\n",
        "num_ids": 38
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # write your code here\n    return [a+b for a,b in zip(lst1,lst2)]\n",
        "num_ids": 31
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]\n",
        "num_ids": 24
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a,b in zip(lst1,lst2)]\n",
        "num_ids": 24
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)==0:\n        return lst2\n    elif len(lst2)==0:\n        return lst1\n    else:\n        return [lst1[i]+lst2[i] for i in range(max(len(lst1),len(lst2)))]\n",
        "num_ids": 79
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        raise IndexError\n    return [x + y for x,y in zip(lst1,lst2)]\n",
        "num_ids": 45
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst3=[]\n    for i in range(len(lst1)):\n        lst3.append(lst1[i]+lst2[i])\n    return lst3\n",
        "num_ids": 49
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst3 = [a+b for a,b in zip(lst1,lst2)]\n    return lst3\n",
        "num_ids": 33
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    \n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    length=len(lst1)\n    new_lst=[0]*length\n    for i in range(length):\n        new_lst[i]=lst1[i]+lst2[i]\n    return new_lst\n",
        "num_ids": 60
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    new_list = [a + b for a, b in zip(lst1,lst2)]\n    return new_list\n",
        "num_ids": 33
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k,g in groupby(nums)]\n    \ndef first_item(nums):\n    '''\n    Write a function to get the first item from a list.\n    '''\n    return nums[0]\n    \ndef last_item(nums):\n    '''\n    Write a function to get the last item from a list.\n    '''\n    return nums[-1]\n    \ndef first_n(nums, n):\n    '''\n    Write a function to get the first n items from a list.\n    '''\n    return nums[:n]\n    \ndef last_n(nums, n):\n    '''\n    Write a function to get the last n items from a list.\n    '''\n    return nums[-n:]\n    \ndef middle_n(nums, n):\n    '''\n    Write a function to get the first n items from a list.\n    '''\n    return nums[n:-n]\n    \ndef first_and_last(nums):\n    '''\n    Write a function to get the first and last items from a list.\n    '''\n    return nums[:2] + nums[-2:]\n    \ndef third_last(nums):\n    '''\n    Write a function to get the third last item from a list.\n    '''\n    return nums[-3]\n    \ndef every_other_item(nums):\n    '''\n    Write a function to get every other item from a list.\n    '''\n    return nums[::2]\n    \ndef every_other_item_reverse(nums):\n    '''\n    Write a function to get every other item from a list in reverse order.\n    '''\n    return nums[::-2]\n    \ndef every_other_item_reverse_r(nums):\n    '''\n    Write a function to get every other item from a list in reverse order.\n    '''\n    return nums[::-2]\n    \ndef last_one(nums):\n    '''\n    Write a function to get the last item from a list and remove it.\n    '''\n    nums.pop()\n    return nums\n    \ndef last_one_reverse(nums):\n    '''\n    Write a function to get the last item from a list and remove it in reverse order.\n    '''\n    nums.pop(0)\n    return nums\n    \ndef last_one_reverse_r(nums):\n    '''\n    Write a function to get the last item from a list and remove it in reverse order.\n    '''\n    nums.pop(len(nums)-1)\n    return nums\n    \ndef first_three(nums):\n    '''\n    Write a function to get the first three items from a list.\n    '''\n    return nums[:3]\n    \ndef first_three_reverse(nums):\n    '''\n    Write a function to get the first three items from a list in reverse order.\n    '''\n    return nums[-3:]\n    \ndef first_three_reverse_r(nums):\n    '''\n    Write a function to get the first three items from a list in reverse order.\n    '''\n    return nums[-3:]\n    \ndef last_three(nums):\n    '''\n    Write a function to get the last three items from a list.\n    '''\n    return nums[-3:]\n    \ndef last_three_reverse(nums):\n    '''\n    Write a function to get the last three items from a list in reverse order.\n    '''\n    return nums[:3]\n    \ndef last_three_reverse_r(nums):\n    '''\n    Write a function to get the last three items from a list in reverse order.\n    '''\n    return nums[:3]\n    \ndef copy_of_a_list(nums):\n    '''\n    Write a function to get a copy of a list.\n    '''\n    return nums[:]\n    \ndef copy_of_a_list_reverse(nums):\n    '''\n    Write a function to get a copy of a list in reverse order.\n    '''\n    return nums[::-1]\n    \ndef copy_of_a_list_reverse_r(nums):\n    '''\n    Write a function to get a copy of a list in reverse order.\n    '''\n    return nums[::-1]\n    \ndef num_count(nums):\n    '''\n    Write a function to get the number of numbers in a list.\n    '''\n    return len(nums)\n    \ndef sum_of_numbers(nums):\n    '''\n    Write a function to get the sum of numbers in a list.\n    '''\n    return sum(nums)\n    \ndef avg_of_numbers(nums):\n    '''\n    Write a function to get the average of numbers in a list.\n    '''\n    return sum(nums)/len(nums)\n    \ndef num_less_than(nums, n):\n    '''\n    Write a function to get the numbers in a list less than a given number.\n    '''\n    return [x for x in nums if x < n]\n    \ndef num_less_than_r(nums, n):\n    '''\n    Write a function to get the numbers in a list less than a given number.\n    '''\n    return [x for x in nums if x < n]\n    \ndef num_less_than_equal(nums, n):\n    '''\n    Write a function to get the numbers in a list less than or equal to a given number.\n    '''\n    return [x for x in nums if x <= n]\n    \ndef num_less_than_equal_r(nums, n):\n    '''\n    Write a function to get the numbers in a list less than or equal to a given number.\n    '''\n    return [x for x in nums if x <= n]\n    \ndef num_greater_than(nums, n):\n    '''\n    Write a function to get the numbers in a list greater than a given number.\n    '''\n    return [x for x in nums if x > n]\n    \ndef num_greater_than_r(nums, n):\n    '''\n    Write a function to get the numbers in a list greater than a given number.\n    '''\n    return [x for x in nums if x > n]\n    \ndef num_greater_than_equal(nums, n):\n    '''\n    Write a function to get the numbers in a list greater than or equal to a given number.\n    '''\n    return [x for x in nums if x >= n]\n    \ndef num_greater_than_equal_r(nums, n):\n    '''\n    Write a function to get the numbers in a list greater than or equal to a given number.\n    '''\n    return [x for x in nums if x >= n]\n    \ndef num_between(nums, n1, n2):\n    '''\n    Write a function to get the numbers in a list between two numbers.\n    '''\n    return [x for x in nums if x >= n1 and x <= n2]\n    \ndef num_between_r(nums, n1, n2):\n    '''\n    Write a function to get the numbers in a list between two numbers.\n    '''\n    return [x for x in nums if x >= n1 and x <= n2]\n    \ndef num_between_equal(nums, n1, n2):\n    '''\n    Write a function to get the numbers in a list between two numbers.\n    '''\n    return [x for x in nums if x == n1 or x == n2]\n    \ndef num_between_equal_r(nums, n1, n2):\n    '''\n    Write a function to get the numbers in a list between two numbers.\n    '''\n    return [x for x in nums if x == n1 or x == n2]\n    \ndef num_between_not_equal(nums, n1, n2):\n    '''\n    Write a function to get the numbers in a list between two numbers.\n    '''\n    return [x for x in nums if x!= n1 and x!",
        "num_ids": 20
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    i = 0\n    while i < len(nums)-1:\n        if nums[i] == nums[i+1]:\n            nums.pop(i+1)\n        else:\n            i += 1\n    return nums\n",
        "num_ids": 60
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    grouped = []\n    for k, g in groupby(nums):\n        grouped.append(list(g))\n    return list(map(lambda x: x[0], grouped))\n",
        "num_ids": 48
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) < 2:\n        return nums\n    index = 0\n    for i in range(1, len(nums)):\n        if nums[i]!= nums[index]:\n            index += 1\n            nums[index] = nums[i]\n    return nums[:index+1]\n",
        "num_ids": 82
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [x for x, y in groupby(nums)]\n",
        "num_ids": 18
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for k,g in groupby(nums):\n        yield [k,len(list(g))]\n",
        "num_ids": 29
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    #Since itertools.groupby() returns consecutive duplicates, we can use it to iterate through the list\n    #and keep track of consecutive duplicates\n    for key, group in groupby(nums):\n        #If the group of consecutive duplicates is more than 1, return the list\n        if len(list(group)) > 1:\n            return list(group)\n    #If the loop completes and there are no consecutive duplicates, return an empty list\n    return []\n",
        "num_ids": 111
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for k, g in groupby(nums):\n        yield list(g)\n",
        "num_ids": 23
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) <= 1:\n        return nums\n",
        "num_ids": 18
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for k, g in groupby(nums):\n        yield list(g)\n",
        "num_ids": 23
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 3.14*(r**2)*(h/3)\ndef lateral_surface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    return 2*math.pi*r*(r+h)\ndef lateral_surface_rectangular_prism(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular prism given sides a,b and the height h.\n    '''\n    return a*b*h/2\ndef lateral_surface_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given sides a,b and the height h.\n    '''\n    return a+b/2*h\ndef lateral_surface_prism(a,h):\n    '''\n    Write a function to find the lateral surface area of a prism given sides a and the height h.\n    '''\n    return a*h\ndef lateral_surface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    return 4*math.pi*(r**2)\ndef lateral_surface_sphere_parallelepiped(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    return 2*math.pi*r**2\ndef lateral_surface_sphere_cuboid(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    return 4*math.pi*r**2\ndef lateral_surface_sphere_cylinder(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    return 2*math.pi*r**2\ndef lateral_surface_sphere_cuboid(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    return 2*math.pi*r**2\ndef lateral_surface_sphere_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r and height h.\n    '''\n    return 2*math.pi*r**2*h/3\ndef lateral_surface_sphere_rectangular_prism(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a sphere given sides a,b and the height h.\n    '''\n    return 2*math.pi*a*b*h/2\ndef lateral_surface_sphere_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a sphere given sides a,b and the height h.\n    '''\n    return 2*math.pi*a+2*math.pi*b/2*h\ndef lateral_surface_sphere_prism(a,h):\n    '''\n    Write a function to find the lateral surface area of a sphere given sides a and the height h.\n    '''\n    return 2*math.pi*a*h\ndef lateral_surface_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r and height h.\n    '''\n    return 2*math.pi*r**2*h/3\ndef lateral_surface_sphere_cuboid(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r and height h.\n    '''\n    return 2*math.pi*r**2*h\ndef lateral_surface_sphere_parallelepiped(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r and height h.\n    '''\n    return 2*math.pi*r**2*h\ndef lateral_surface_sphere_rectangular_prism(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a sphere given sides a,b and the height h.\n    '''\n    return 2*math.pi*a*b*h/2\ndef lateral_surface_sphere_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a sphere given sides a,b and the height h.\n    '''\n    return 2*math.pi*a+2*math.pi*b/2*h\ndef lateral_surface_sphere_prism(a,h):\n    '''\n    Write a function to find the lateral surface area of a sphere given sides a and the height h.\n    '''\n    return 2*math.pi*a*h\ndef lateral_surface_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r and height h.\n    '''\n    return 2*math.pi*r**2*h\ndef lateral_surface_sphere_cuboid(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r and height h.\n    '''\n    return 2*math.pi*r**2*h\ndef lateral_surface_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r and height h.\n    '''\n    return 2*math.pi*r**2*h\ndef lateral_surface_sphere_cuboid(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r and height h.\n    '''\n    return 2*math.pi*r**2*h\ndef lateral_surface_sphere_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r and height h.\n    '''\n    return 2*math.pi*r**2*h/3\ndef lateral_surface_sphere_rectangular_prism(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a sphere given sides a,b and the height h.\n    '''\n    return 2*math.pi*a*b*h/2\ndef lateral_surface_sphere_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a sphere given sides a,b and the height h.\n    '''\n    return 2*math.pi*a+2*math.pi*b/2*h\ndef lateral_surface_sphere_prism(a,h):\n    '''\n    Write a function to find the lateral surface area of a sphere given sides a and the height h.\n    '''\n    return 2*math.pi*a*h\ndef lateral_surface_sphere_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r and height h.\n    '''\n    return 2*math.pi*r**2*h\ndef lateral_surface_sphere_cuboid(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r and height h.\n    '''\n    return 2*math.pi*r**2*h\ndef lateral_surface_sphere_parallelepiped(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r and height h.\n    '''\n    return 2*math.pi*r**2*h\ndef lateral_surface_sphere_rectangular_prism(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a sphere given sides a,b and the height h.\n    '''\n    return 2*math.pi*a*b*h/2\ndef lateral_surface_sphere_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a sphere given sides a,b and the height h.\n    '''\n    return 2*math.pi*a+2*math.pi*b/2*h\ndef lateral_surface_sphere_prism(a,h):\n    '''\n    Write a function to find the lateral surface area o",
        "num_ids": 13
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2+math.pi*(r**2-h**2)\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    return math.pi*r**2+math.pi*2*r*h\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    return 4*math.pi*r**2\ndef lateralsurface_torus(r,h):\n    '''\n    Write a function to find the lateral surface area of a torus given radius r and the height h.\n    '''\n    return math.pi*r**2+(math.pi*2*r*h)\ndef lateralsurface_hexahedron(a,b):\n    '''\n    Write a function to find the lateral surface area of a hexahedron given base a and height b.\n    '''\n    return a**2*3*(a+b)/3\ndef lateralsurface_octahedron(a,b):\n    '''\n    Write a function to find the lateral surface area of a octahedron given base a and height b.\n    '''\n    return a**2*6*(a+b)/6\ndef lateralsurface_dodecahedron(a,b):\n    '''\n    Write a function to find the lateral surface area of a dodecahedron given base a and height b.\n    '''\n    return a**2*10*(a+b)/10\ndef lateralsurface_icosahedron(a,b):\n    '''\n    Write a function to find the lateral surface area of a icosahedron given base a and height b.\n    '''\n    return a**2*12*(a+b)/12\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and height h.\n    '''\n    return math.pi*r**2*h/3\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given radius r and height h.\n    '''\n    return math.pi*r**2*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    return 4/3*math.pi*r**3\ndef volume_torus(r,h):\n    '''\n    Write a function to find the volume of a torus given radius r and height h.\n    '''\n    return math.pi*r**2*(math.pi*2*r*h)\ndef volume_hexahedron(a,b):\n    '''\n    Write a function to find the volume of a hexahedron given base a and height b.\n    '''\n    return a**3*3*(a+b)/3\ndef volume_octahedron(a,b):\n    '''\n    Write a function to find the volume of a octahedron given base a and height b.\n    '''\n    return a**3*6*(a+b)/6\ndef volume_dodecahedron(a,b):\n    '''\n    Write a function to find the volume of a dodecahedron given base a and height b.\n    '''\n    return a**3*10*(a+b)/10\ndef volume_icosahedron(a,b):\n    '''\n    Write a function to find the volume of a icosahedron given base a and height b.\n    '''\n    return a**3*12*(a+b)/12\ndef area_cone(r,h):\n    '''\n    Write a function to find the area of a cone given radius r and height h.\n    '''\n    return math.pi*r**2\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the area of a cylinder given radius r and height h.\n    '''\n    return math.pi*r**2+math.pi*(r**2-h**2)\ndef area_sphere(r):\n    '''\n    Write a function to find the area of a sphere given radius r.\n    '''\n    return 4*math.pi*r**2\ndef area_torus(r,h):\n    '''\n    Write a function to find the area of a torus given radius r and height h.\n    '''\n    return math.pi*r**2+math.pi*2*r*h\ndef area_hexahedron(a,b):\n    '''\n    Write a function to find the area of a hexahedron given base a and height b.\n    '''\n    return a**2*3\ndef area_octahedron(a,b):\n    '''\n    Write a function to find the area of a octahedron given base a and height b.\n    '''\n    return a**2*6\ndef area_dodecahedron(a,b):\n    '''\n    Write a function to find the area of a dodecahedron given base a and height b.\n    '''\n    return a**2*10\ndef area_icosahedron(a,b):\n    '''\n    Write a function to find the area of a icosahedron given base a and height b.\n    '''\n    return a**2*12\ndef angle_triangle(a,b,c):\n    '''\n    Write a function to find the angle between three sides of a triangle given a,b,c.\n    '''\n    return math.acos((b**2+c**2-a**2)/(2*b*c))\ndef angle_rectangle(a,b):\n    '''\n    Write a function to find the angle between two sides of a rectangle given a and b.\n    '''\n    return math.atan(b/a)\ndef angle_circle(a,b,c):\n    '''\n    Write a function to find the angle between three sides of a circle given a,b,c.\n    '''\n    return math.acos((a**2+c**2-b**2)/(2*a*c))\ndef angle_triangle_rectangle(a,b,c):\n    '''\n    Write a function to find the angle between the triangles the two sides of a rectangle given a,b,c.\n    '''\n    return math.acos((a**2+b**2-c**2)/(2*a*b))\ndef angle_triangle_circle(a,b,c):\n    '''\n    Write a function to find the angle between the triangles the two sides of a circle given a,b,c.\n    '''\n    return math.acos((a**2+c**2-b**2)/(2*a*c))\ndef angle_rectangle_circle(a,b,c):\n    '''\n    Write a function to find the angle between the two sides of a circle given a,b,c.\n    '''\n    return math.acos((a**2+b**2-c**2)/(2*a*b))\ndef angle_hexahedron(a,b,c):\n    '''\n    Write a function to find the angle between three sides of a hexahedron given a,b,c.\n    '''\n    return math.acos((b**2+c**2-a**2)/(2*b*c))\ndef angle_octahedron(a,b,c):\n    '''\n    Write a function to find the angle between three sides of an octahedron given a,b,c.\n    '''\n    return math.acos((a**2+c**2-b**2)/(2*a*c))\ndef angle_dodecahedron(a,b,c):\n    '''\n    Write a function to find the angle between three sides of a dodecahedron given a,b,c.\n    '''\n    return math.acos((a**2+b**2-c**2)/(2*a*b))\ndef angle_icosahedron(a,b,c):\n    '''\n    Write a function to find the angle between three sides of an icosahedron given a,b,c.\n    '",
        "num_ids": 29
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*r*r*h/3\n    return s\n",
        "num_ids": 21
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    volume=math.pi*(r**2)*(h/3)\n    surface=math.pi*(r**2)*(h/2)\n    return volume,surface\nprint lateralsurface_cone(2,3)\n",
        "num_ids": 57
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r == 0:\n        return 0\n    else:\n        area = math.pi*(r**2)\n        area += math.pi*(r**2)*h/3\n        return area\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and height h.\n    '''\n    if r == 0:\n        return 0\n    else:\n        area = 2*math.pi*r**2\n        area += 2*math.pi*r**2*h\n        return area\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    if r == 0:\n        return 0\n    else:\n        area = 4*math.pi*(r**2)\n        return area\ndef main():\n    '''\n    The objective is to write a function that takes in the radius and height of a cone as inputs. \n    The function should return the lateral surface area of the cone. \n    If the height of the cone is 0, then the function should return the lateral surface area of a cylinder. \n    If the height of the cone is greater than 0, then the function should return the lateral surface area of a cone. \n    If the radius of the cone is 0, then the function should return the lateral surface area of a sphere. \n    '''\n    print \"LATERAL SURFACE AREA OF CONE\"\n    r = float(raw_input(\"Enter radius of cone: \"))\n    h = float(raw_input(\"Enter height of cone: \"))\n    print \"LATERAL SURFACE AREA OF CYLINDER\"\n    r = float(raw_input(\"Enter radius of cylinder: \"))\n    h = float(raw_input(\"Enter height of cylinder: \"))\n    print \"LATERAL SURFACE AREA OF SPHERE\"\n    r = float(raw_input(\"Enter radius of sphere: \"))\n    print \"LATERAL SURFACE AREA OF CONE:\",lateralsurface_cone(r,h)\n    print \"LATERAL SURFACE AREA OF CYLINDER:\",lateralsurface_cylinder(r,h)\n    print \"LATERAL SURFACE AREA OF SPHERE:\",lateralsurface_sphere(r)\n",
        "num_ids": 219
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*(r**2)*(h/3)\n",
        "num_ids": 19
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    A=math.pi*r*r\n    A=A*(math.sqrt(3)*h/3)\n    return A\n",
        "num_ids": 37
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2*h/3\n",
        "num_ids": 16
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    SA = math.pi*r**2 + math.pi*(r**2 - math.sqrt(r**2 - h**2))\n    return SA\ndef lateralsurface_torus(r,h):\n    '''\n    Write a function to find the lateral surface area of a torus given radius r and the height h.\n    '''\n    SA = 2*math.pi*r**2 + 2*math.pi*r*math.sqrt(1 - h**2/r**2)\n    return SA\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    SA = 4*math.pi*r**2\n    return SA\ndef lateralsurface_sphere_cylindrical(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere in cylindrical coordinates given radius r and the height h.\n    '''\n    SA = 2*math.pi*r**2 + 2*math.pi*r*math.sqrt(1 - h**2/r**2)\n    return SA\ndef lateralsurface_sphere_2(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere in spherical coordinates given radius r and the height h.\n    '''\n    SA = 4*math.pi*r**2 + 2*math.pi*math.sqrt(1 - h**2/r**2)\n    return SA\ndef lateralsurface_sphere_3(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere in spherical coordinates given radius r and the height h.\n    '''\n    SA = 2*math.pi*r**2 + 2*math.pi*math.sqrt(1 - h**2/r**2)\n    return SA\ndef lateralsurface_sphere_4(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere in spherical coordinates given radius r and the height h.\n    '''\n    SA = 2*math.pi*r**2 + 2*math.pi*math.sqrt(1 - h**2/r**2)\n    return SA\ndef lateralsurface_sphere_5(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere in spherical coordinates given radius r and the height h.\n    '''\n    SA = 2*math.pi*r**2 + 2*math.pi*math.sqrt(1 - h**2/r**2)\n    return SA\ndef lateralsurface_sphere_6(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere in spherical coordinates given radius r and the height h.\n    '''\n    SA = 2*math.pi*r**2 + 2*math.pi*math.sqrt(1 - h**2/r**2)\n    return SA\ndef lateralsurface_sphere_7(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere in spherical coordinates given radius r and the height h.\n    '''\n    SA = 2*math.pi*r**2 + 2*math.pi*math.sqrt(1 - h**2/r**2)\n    return SA\ndef lateralsurface_sphere_8(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere in spherical coordinates given radius r and the height h.\n    '''\n    SA = 2*math.pi*r**2 + 2*math.pi*math.sqrt(1 - h**2/r**2)\n    return SA\ndef lateralsurface_sphere_9(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere in spherical coordinates given radius r and the height h.\n    '''\n    SA = 2*math.pi*r**2 + 2*math.pi*math.sqrt(1 - h**2/r**2)\n    return SA\ndef lateralsurface_sphere_10(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere in spherical coordinates given radius r and the height h.\n    '''\n    SA = 2*math.pi*r**2 + 2*math.pi*math.sqrt(1 - h**2/r**2)\n    return SA\ndef lateralsurface_sphere_11(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere in spherical coordinates given radius r and the height h.\n    '''\n    SA = 2*math.pi*r**2 + 2*math.pi*math.sqrt(1 - h**2/r**2)\n    return SA\ndef lateralsurface_sphere_12(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere in spherical coordinates given radius r and the height h.\n    '''\n    SA = 2*math.pi*r**2 + 2*math.pi*math.sqrt(1 - h**2/r**2)\n    return SA\ndef lateralsurface_sphere_13(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere in spherical coordinates given radius r and the height h.\n    '''\n    SA = 2*math.pi*r**2 + 2*math.pi*math.sqrt(1 - h**2/r**2)\n    return SA\ndef lateralsurface_sphere_14(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere in spherical coordinates given radius r and the height h.\n    '''\n    SA = 2*math.pi*r**2 + 2*math.pi*math.sqrt(1 - h**2/r**2)\n    return SA\ndef lateralsurface_sphere_15(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere in spherical coordinates given radius r and the height h.\n    '''\n    SA = 2*math.pi*r**2 + 2*math.pi*math.sqrt(1 - h**2/r**2)\n    return SA\ndef lateralsurface_sphere_16(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere in spherical coordinates given radius r and the height h.\n    '''\n    SA = 2*math.pi*r**2 + 2*math.pi*math.sqrt(1 - h**2/r**2)\n    return SA\ndef lateralsurface_sphere_17(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere in spherical coordinates given radius r and the height h.\n    '''\n    SA = 2*math.pi*r**2 + 2*math.pi*math.sqrt(1 - h**2/r**2)\n    return SA\ndef lateralsurface_sphere_18(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere in spherical coordinates given radius r and the height h.\n    '''\n    SA = 2*math.pi*r**2 + 2*math.pi*math.sqrt(1 - h**2/r**2)\n    return SA\ndef lateralsurface_sphere_19(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere in spherical coordinates given radius r and the height h.\n    '''\n    SA = 2*math.pi*r**2 + 2*math.pi*math.sqrt(1 - h**2/r**2)\n    return SA\ndef lateralsurface_sphere_20(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere in spherical coordinates given radius r and the height h.\n    '''\n    SA = 2*math.pi*r**2 + 2*math.pi*math.sqrt(1 - h**2/r**2)\n    return SA\ndef lateralsurface_sphere_21(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere in spherical coordinates given radius r and the height h.\n    '''\n    SA = 2*math.p",
        "num_ids": 10
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #convert height to radius\n    R = math.sqrt(h/3.14)\n    #calculate surface area\n    sa = 3.14*R*r**2 + 3.14*R*(R-r)**2\n    print sa\n    return sa\n",
        "num_ids": 68
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text=text.replace(',',':')\n    text=text.replace('.',':')\n    text=text.replace(' ','')\n    return text\n",
        "num_ids": 41
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ',':')\n    text = text.replace('.',':')\n    text = text.replace(',','::')\n    return text\n",
        "num_ids": 42
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub('\\s',':',text)\n    text = re.sub('\\s',':',text)\n    text = re.sub('\\.|,',':',text)\n    return text\n",
        "num_ids": 52
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # characters = re.findall('[-., ]', text)\n    # for char in characters:\n    #     text = text.replace(char, ':')\n    # return text\n    return re.sub('[-., ]', ':', text)\n",
        "num_ids": 64
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s',':',text)\n    text = re.sub(r'\\,','',text)\n    text = re.sub(r'\\.','',text)\n    return text\n",
        "num_ids": 55
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', ':')\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    return text\n",
        "num_ids": 44
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(\"[,]\", \":\", text)\n",
        "num_ids": 18
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\,', ':', text)\n    text = re.sub(r'\\.', ':', text)\n    return text\n",
        "num_ids": 59
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(',',':').replace('.',':').replace(' ',':')\n",
        "num_ids": 25
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\"'\", \"\")\n    text = text.replace(\"-\", \"\")\n    text = text.replace(\"|\", \"\")\n    text = text.replace(\" \", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    return text\n",
        "num_ids": 79
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    def find_first_occurrence_recursive(A, x, start, end):\n        # base case\n        if end < 0:\n            return -1\n        # recursive case\n        mid = int((start + end) / 2)\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                return find_first_occurrence_recursive(A, x, start, mid-1)\n        elif A[mid] > x:\n            return find_first_occurrence_recursive(A, x, start, mid-1)\n        else:\n            return find_first_occurrence_recursive(A, x, mid+1, end)\n    return find_first_occurrence_recursive(A, x, 0, len(A)-1)\n",
        "num_ids": 202
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    \n    left, right = 0, len(A)-1\n    while left <= right:\n        mid = left + (right-left)//2\n        if A[mid] == x:\n            if mid > 0 and A[mid-1] == x:\n                right = mid -1\n            else:\n                return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n",
        "num_ids": 112
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    if A[0] == x:\n        return 0\n    elif A[0] > x:\n        return -1\n    return find_first_occurrence(A[1:], x)\n",
        "num_ids": 64
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    result = -1\n    while start <= end:\n        mid = (start + end) / 2\n        if A[mid] == x:\n            result = mid\n            end = mid - 1\n        elif A[mid] > x:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return result\n",
        "num_ids": 96
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    if len(A) == 1:\n        if A[0] == x:\n            return 0\n        else:\n            return -1\n    start = 0\n    end = len(A) - 1\n    while start <= end:\n        mid = int(start + (end - start)/2)\n        if A[mid] == x:\n            return mid\n        if A[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n",
        "num_ids": 134
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    res = -1\n    while (left <= right):\n        mid = (left + right) // 2\n        if (A[mid] > x):\n            right = mid - 1\n        elif (A[mid] < x):\n            left = mid + 1\n        else:\n            res = mid\n            right = mid - 1\n    return res\n",
        "num_ids": 99
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n",
        "num_ids": 17
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    L = 0\n    R = len(A) - 1\n    while L <= R:\n        mid = (L+R) // 2\n        if A[mid] < x:\n            L = mid + 1\n        elif A[mid] > x:\n            R = mid - 1\n        else:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                R = mid - 1\n    return -1\n",
        "num_ids": 111
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) < 1:\n        return -1\n    l, r = 0, len(A) - 1\n    while l <= r:\n        mid = l + (r - l) / 2\n        if A[mid] < x:\n            l = mid + 1\n        elif A[mid] > x:\n            r = mid - 1\n        else:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                r = mid - 1\n    return -1\n",
        "num_ids": 127
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(0, len(A)):\n        if A[i] == x:\n            return i\n    return -1\n",
        "num_ids": 35
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    sum_so_far = 0\n    product_so_far = 1\n    for i in range(n):\n        sum_so_far = sum_so_far + arr[i]\n        product_so_far = product_so_far * arr[i]\n    for i in range(n):\n        product_so_far = product_so_far * arr[i]\n        sum_so_far = sum_so_far - arr[i]\n        product_so_far = product_so_far / arr[i]\n    return product_so_far\n",
        "num_ids": 144
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    l = len(arr)\n    if l == 0:\n        return 0\n    if l == 1:\n        return arr[0]\n",
        "num_ids": 35
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    arr_len = len(arr)\n    left_subarray_sum = []\n    for i in range(arr_len):\n        left_subarray_sum.append(arr[:i+1])\n    return sum([sum(x) for x in left_subarray_sum])\n",
        "num_ids": 70
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    res = 0\n    prod = 1\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            prod = 1\n            for k in range(i,j+1):\n                prod = prod*arr[k]\n            res += prod\n    return res\n",
        "num_ids": 80
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # base case : if length of arr == 1 then return arr[0]\n    if len(arr) == 1:\n        return arr[0]\n    \n    # if length of arr == 2 then return arr[0] * arr[1]\n    if len(arr) == 2:\n        return arr[0] * arr[1]\n    \n    # calculate sum of left and right\n    left = sum_Of_Subarray_Prod(arr[0:len(arr)//2])\n    right = sum_Of_Subarray_Prod(arr[len(arr)//2:])\n    \n    # calculate products of all possible subarray and store them in result\n    result = []\n    for i in range(len(arr)//2):\n        result.append(left[i] * right[i])\n    \n    # return sum of all products\n    return sum(result)\n    \ndef is_Subseq(arr, seq):\n    '''\n    Write a python function to check if a given string is a subsequence of another given string. https://www.geeksforgeeks.org/check-if-a-given-string-is-a-subsequence-of-another-given-string/\n    '''\n    # if both are of same length\n    if len(arr) == len(seq):\n        for i in range(len(arr)):\n            if seq[i] == arr[i]:\n                continue\n            else:\n                return False\n        return True\n    \n    # if len(arr) < len(seq) then return false\n    if len(arr) < len(seq):\n        return False\n    \n    # find the length of the substring of length len(arr) - 1\n    s = len(arr) - 1\n    while(s >= 0):\n        # check if char at index s in arr is same as seq[0]\n        if seq[0] == arr[s]:\n            return True\n        else:\n            # if not same then decrease s and increase len(arr) by 1\n            s -= 1\n            len(arr) += 1\n    \n    return False\n    \ndef reverse_LinkedList(head):\n    '''\n    Write a python function to reverse a linked list. https://www.geeksforgeeks.org/reverse-a-linked-list/\n    '''\n    # base case : if head is None or head.next is None then return head\n    if head is None or head.next is None:\n        return head\n    \n    # get the last node in the list\n    lastNode = reverse_LinkedList(head.next)\n    \n    # point the last node to the head\n    lastNode.next = head\n    \n    # return the last node\n    return lastNode\n",
        "num_ids": 99
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    res = []\n    left_list = []\n    right_list = []\n    n = len(arr)\n    for i in range(1, n):\n        left_list.append(arr[i-1] * arr[i])\n    for i in range(n-1, -1, -1):\n        right_list.append(arr[i] * arr[i])\n    for i in range(0, n):\n        res.append(left_list[i] * right_list[i])\n    return sum(res)\n",
        "num_ids": 130
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    # store the prefix sum array\n    prefix_sum = [0] * (len(arr) + 1)\n    for i in range(len(arr)):\n        prefix_sum[i + 1] = prefix_sum[i] + arr[i]\n    # initialize result\n    result = 0\n    # traverse prefix sum array to find sum of products of all subarrays\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            result += arr[i] * arr[j] * (prefix_sum[j + 1] - prefix_sum[i])\n    return result\n",
        "num_ids": 163
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    res = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            res += arr[i]*arr[j]\n    return res\n",
        "num_ids": 50
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    \n    # else:\n    #     temp = arr[0]\n    #     arr[0] = arr[-1]\n    #     arr[-1] = temp\n    #     return arr[0] * arr[1] * sum_Of_Subarray_Prod(arr[2:-1])\n    return arr[0] * arr[1] * sum_Of_Subarray_Prod(arr[2:]) + sum_Of_Subarray_Prod(arr[1:])\n",
        "num_ids": 151
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    return sum(sublist_Prod(arr))\n",
        "num_ids": 15
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = (n & 0x5555555555555555) + ((n >> 1) & 0x5555555555555555)\n    n = (n & 0x3333333333333333) + ((n >> 2) & 0x3333333333333333)\n    n = (n & 0x0f0f0f0f0f0f0f0f) + ((n >> 4) & 0x0f0f0f0f0f0f0f0f)\n    return n\n",
        "num_ids": 122
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n ^ (n >> 1)  # count number of 1s before a 0\n    n = n ^ (n >> 2)  # count number of 1s after a 1\n    n = n ^ (n >> 4)  # count number of 1s after a 0\n    n = n ^ (n >> 8)  # count number of 1s after a 1\n    n = n ^ (n >> 16) # count number of 1s after a 0\n    return n\n",
        "num_ids": 110
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return ((n & 0x55555555) << 1) | ((n & 0x55555555) >> 1)\n",
        "num_ids": 32
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n &= 0xfffff000  # mask the last 5 bits\n    n = n | (1 << (32 - 5)) | (1 << 5)\n    return n\n",
        "num_ids": 43
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n ^ (n << 1)\n    n = n ^ (n >> 4)\n    n = n ^ (n << 8)\n    n = n ^ (n >> 5)\n    return n\n",
        "num_ids": 50
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    for i in range(1, len(bin(n)) - 3):\n        if (n & (1 << i))!= (n & (1 << i + 1)):\n            return 1\n    return 0\n",
        "num_ids": 52
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = 1\n    mask1 = ~(~0 << (n-1))\n    mask2 = ~(~0 << n)\n    return ((n & mask1) << 1) | (n & mask2)\n",
        "num_ids": 53
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return (((n & 0x01) << 1) | ((n & 0x02) >> 1)) & 0xff\n",
        "num_ids": 30
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    bit = 1 << (n.bit_length() - 1)\n    n ^= bit\n    n &= ~bit\n    return n\n",
        "num_ids": 35
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = (n & 0x55555555) + ((n >> 1) & 0x55555555)\n    n = (n & 0x33333333) + ((n >> 2) & 0x33333333)\n    n = (n & 0x0f0f0f0f) + ((n >> 4) & 0x0f0f0f0f)\n    return n\n    \ndef is_palindrome(n):\n    n = set_middle_bits(n)\n    while n:\n        if n % 10:\n            return False\n        n /= 10\n    return True\n",
        "num_ids": 144
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        return i\n    return -1\n",
        "num_ids": 45
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == 0:\n        return 0\n    j = bisect.bisect_left(a, a[i-1])\n    if j == i:\n        return i\n    return j\n",
        "num_ids": 64
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return a[:i] + [x] + a[i:]\n",
        "num_ids": 35
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a,x)\n    if i < len(a) and a[i] == x:\n        return i\n    else:\n        return -1\n",
        "num_ids": 48
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    k = bisect.bisect_left(a, x)\n    if k!= 0:\n        if a[k] == x:\n            print('found at index %s' % k)\n        else:\n            print('not found')\n    else:\n        print('not found')\n",
        "num_ids": 71
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    idx = bisect.bisect_left(a, x)\n    return idx\n",
        "num_ids": 24
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = len(a)\n    pos = bisect.bisect_left(a, x)\n    return pos\n",
        "num_ids": 30
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    k = bisect.bisect_left(a, x)\n    if k == n:\n        return -1\n    elif x > a[k]:\n        return k\n    else:\n        return k-1\n",
        "num_ids": 62
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = len(a)\n    # Initialize low and high indices\n    low, high = 0, l-1\n    while low <= high:\n        mid = (high + low) // 2\n        if a[mid] == x:\n            return mid\n        elif x < a[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low\n",
        "num_ids": 94
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a):\n        if a[i] > x:\n            return i\n        return i-1\n    else:\n        return len(a)\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_right(a, x)\n    if i!= 0:\n        if a[i-1] < x:\n            return i\n        else:\n            return i-1\n    else:\n        return 0\ndef is_rotation(a,b):\n    '''\n    Write a function that returns True if a is a rotation of b, False otherwise. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a)!= len(b):\n        return False\n    return a in b+b\ndef is_rotation_tuple(a,b):\n    '''\n    Write a function that returns True if a is a rotation of b, False otherwise. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a)!= len(b):\n        return False\n    a,b = a+a,b+b\n    return a in b\ndef rotate_right(a,x):\n    '''\n    Write a function to rotate an array to the right by k steps. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return a[x:] + a[:x]\ndef rotate_left(a,x):\n    '''\n    Write a function to rotate an array to the left by k steps. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return a[-x:] + a[:-x]\ndef sort_rotation_count_pairs(a, b):\n    '''\n    Write a function to sort an array of tuples using the rotation count. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    a,b = sorted(a), sorted(b)\n    a_index = right_insertion(b, a[0][0])\n    b_index = right_insertion(a, b[0][0])\n    if a_index == b_index:\n        return [a,b]\n    elif a_index > b_index:\n        return b[a_index-b_index:] + b[:a_index-b_index]\n    else:\n        return a[b_index-a_index:] + a[:b_index-a_index]\ndef sort_rotation_count(a):\n    '''\n    Write a function to sort an array of tuples using the rotation count. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    a = sorted(a)\n    left,right = 0, len(a)-1\n    while left < right:\n        if a[left][1] > a[right][1]:\n            left = right\n        elif a[left][1] < a[right][1]:\n            right = left\n        else:\n            a[left], a[right] = a[right], a[left]\n            left += 1\n            right -= 1\n    return a\ndef sort_rotation_count_2(a):\n    '''\n    Write a function to sort an array of tuples using the rotation count. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    a = sorted(a)\n    left,right = 0, len(a)-1\n    while left < right:\n        if a[left][1] > a[right][1]:\n            left = right\n        elif a[left][1] < a[right][1]:\n            right = left\n        else:\n            a[left], a[right] = a[right], a[left]\n            left += 1\n            right -= 1\n    return a\ndef is_max_heap(a):\n    '''\n    Write a function to check if a given array is a max-heap. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    for i in range(n//2):\n        if a[i] > a[2*i+1] or a[i] > a[2*i+2]:\n            return False\n    return True\ndef is_min_heap(a):\n    '''\n    Write a function to check if a given array is a min-heap. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    for i in range(n//2):\n        if a[i] < a[2*i+1] or a[i] < a[2*i+2]:\n            return False\n    return True\ndef is_heap(a, heap_type):\n    '''\n    Write a function to check if a given array is a heap of given heap type. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    for i in range(n//2):\n        if heap_type =='max':\n            if a[i] > a[2*i+1] or a[i] > a[2*i+2]:\n                return False\n        else:\n            if a[i] < a[2*i+1] or a[i] < a[2*i+2]:\n                return False\n    return True\ndef heapsort_max(a):\n    '''\n    Write a function to sort an array of tuples using the maximum values in a heap. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    a = sorted(a, key=lambda x: -x[0])\n    return a\ndef heapsort_min(a):\n    '''\n    Write a function to sort an array of tuples using the minimum values in a heap. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    a = sorted(a, key=lambda x: x[0])\n    return a\ndef heapsort_arr(a):\n    '''\n    Write a function to sort an array of tuples using the minimum values in a heap. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    a = sorted(a, key=lambda x: -x[1])\n    return a\ndef heapsort_comb(a):\n    '''\n    Write a function to sort an array of tuples using the maximum values in a heap. https://www.w3resource.co",
        "num_ids": 30
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    return bool(pattern.match(string))\n",
        "num_ids": 25
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.search(regex, string)\n",
        "num_ids": 14
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.search(regex,string)):\n        return True\n    else:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.search(regex,string))\n",
        "num_ids": 16
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        print('Vowel')\n    else:\n        print('Consonant')\n",
        "num_ids": 34
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string) is not None:\n        print 'YES'\n    else:\n        print 'NO'\n",
        "num_ids": 34
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex, string))\n",
        "num_ids": 16
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    #pattern = re.compile(regex)\n    match = re.search(regex,string)\n    if match:\n        print \"Match Found\"\n    else:\n        print \"No match\"\n",
        "num_ids": 51
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        print string, \"starts with vowel\"\n    else: \n        print string, \"doesn't start with a vowel\"\n",
        "num_ids": 43
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string): \n        print \"Match Found\" \n    else: \n        print \"No Match Found\"\n",
        "num_ids": 45
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return (1 - (1 / n)) * geometric_sum(n - 1)\n",
        "num_ids": 37
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return (n-1) * geometric_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    def gs(n):\n        if n == 1:\n            return 1\n        else:\n            return n * gs(n - 1)\n",
        "num_ids": 37
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return 1.0/float(n)\n",
        "num_ids": 13
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return (1/n) * (1 + geometric_sum(n-1))\n",
        "num_ids": 22
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return (1/float(n))*(float(1)+(geometric_sum(n-1)))\n    \nprint geometric_sum(10",
        "num_ids": 36
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    def geometric_sum_helper(n):\n        if n == 0:\n            return 1\n        else:\n            return n*geometric_sum_helper(n-1)\n",
        "num_ids": 46
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n",
        "num_ids": 30
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n",
        "num_ids": 31
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = 1\n    num = 1\n    while(index < n):\n        num += 1\n        index += num\n",
        "num_ids": 30
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1,int(math.pow(10,n))): \n        s = str(i)\n        if len(s) == n: \n            return i \n",
        "num_ids": 48
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    s=math.pow(10,n)\n    return int((math.sqrt(8*s+1)-1)/2)\n",
        "num_ids": 35
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    b = 1\n    n -= 1\n    while n >= 0:\n        b *= 10\n        n -= 1\n    return b\ndef find_triangular_no(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeeks.org/find-triangular-number-with-n-digits/\n    '''\n    n_digits = math.ceil(math.log10(n))\n    i = 0\n    n_digits = math.ceil(math.log10(n))\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < n_digits:\n        i += 1\n        b = math.floor(i*(i+1)/2)\n        if b == n:\n            return i\n            break\n    while i < ",
        "num_ids": 1890
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    num = math.pow(10,n)\n    index = int(math.ceil(math.sqrt(num)))\n    return index\n",
        "num_ids": 37
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = math.ceil(math.log(n,3))\n    return n\n",
        "num_ids": 23
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #initialize an empty list\n    L = [] \n    n = int(n)\n    m = n * (n + 1) / 2\n    for i in range(1,int(m)):\n        L.append(i)\n    return L[n - 1] \n",
        "num_ids": 69
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    l=int(math.pow(10,n))\n    print('l',l)\n    if(l==6):\n        print(6)\n    for i in range(l,1,-1):\n        if(i*(i+1)/2<n):\n            print(i,i*(i+1)/2)\n            return (i,i*(i+1)/2)\n            break\n    else:\n        return (1,1)\ndef is_Triangular(num):\n    '''\n    Write a python function to check if a number is a triangular number or not.\n    '''\n    if(((math.sqrt(8*num+1)+1)/2).is_integer()):\n        print('Yes')\n    else:\n        print('No')\ndef find_Index_from_Triangular(num):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    l=int(math.pow(10,num))\n    if(l==6):\n        print(6)\n    for i in range(l,1,-1):\n        if(i*(i+1)/2<num):\n            print(i,i*(i+1)/2)\n            return (i,i*(i+1)/2)\n            break\n    else:\n        return (1,1)\ndef find_Index_from_triangular_no_bracket(num):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    l=int(math.pow(10,num))\n    if(l==6):\n        print(6)\n    for i in range(l,1,-1):\n        if(i*(i+1)/2<num):\n            print(i,i*(i+1)/2)\n            return (i,i*(i+1)/2)\n            break\n    else:\n        return (1,1)\n",
        "num_ids": 104
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    n_squared = int(n * (n + 1) * 0.5)\n    n_squared_sqrt = int(math.sqrt(n_squared))\n    return n_squared_sqrt * (n_squared_sqrt + 1) * 0.5 - n_squared\n",
        "num_ids": 78
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = int(math.floor(math.pow(9,n)))\n    #print(index)\n    return index\ndef min_triangular_index(n):\n    '''\n    Write a python function to find the minimum triangular number with n digits. https://www.geeksforgeeks.org/minimum-triangular-number-with-n-digits/\n    '''\n    numerator = 1\n    denominator = 1\n    index = 1\n    while (numerator/denominator) < 10**(n-1):\n        numerator = numerator * 10 + 1\n        denominator = denominator + 1\n    #print(numerator)\n    #print(denominator)\n    index = index + (n-1)*denominator -1\n    return index\ndef find_arr_index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = int(math.floor(math.pow(9,n)))\n    #print(index)\n    return index\ndef find_arr_index_2(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    numerator = 1\n    denominator = 1\n    index = 1\n    while (numerator/denominator) < 10**(n-1):\n        numerator = numerator * 10 + 1\n        denominator = denominator + 1\n    index = index + (n-1)*denominator -1\n    return index\n",
        "num_ids": 83
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    res_dict = {}\n    for i in range(len(test_tup)):\n        res_dict[test_tup[i]] = test_tup[i+1]\n    return res_dict\n",
        "num_ids": 53
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for index, key in enumerate(test_tup):\n        if index + 1 < len(test_tup):\n            test_dict[key] = test_tup[index + 1]\n    return test_dict\n",
        "num_ids": 62
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))\n",
        "num_ids": 27
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[i]:test_tup[i+1] for i in range(0, len(test_tup), 2)}\n",
        "num_ids": 38
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    res_dict = {}\n    for i in range(0,len(test_tup)):\n        res_dict[i] = test_tup[i]\n    return res_dict\n",
        "num_ids": 48
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_from_tup = {k:v for (k,v) in zip(test_tup[::2], test_tup[1::2])}\n    return dict_from_tup\n",
        "num_ids": 51
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup), 2)}\n",
        "num_ids": 38
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[0]: test_tup[1]}\n",
        "num_ids": 20
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            test_dict[test_tup[i]] = test_tup[i + 1]\n    return test_dict\n",
        "num_ids": 62
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in xrange(len(test_tup)):\n        test_dict[test_tup[i-1]] = test_tup[i]\n    return test_dict\n",
        "num_ids": 54
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    #Test Case 1\n    s = 'asdfgh'\n    print all_Characters_Same(s)\n    #Test Case 2\n    s = 'hello'\n    print all_Characters_Same(s)\n",
        "num_ids": 52
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if s.count(s[0]) == len(s) :\n        return True\n    else :\n        return False\n",
        "num_ids": 31
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    x = list(s)\n    y = x[1:]\n    c = x[0]\n    for j in y :\n        if j!= c :\n            return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s))==1 :\n        return True\n    else :\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count = 0\n    for i in s:\n        if i == s[0]:\n            count += 1\n    if count == len(s):\n        return True\n    else:\n        return False\n",
        "num_ids": 49
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return s.count(s[0]) == len(s)\n",
        "num_ids": 18
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return all(x == s[0] for x in s)\n",
        "num_ids": 18
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if not s : return True\n    return len(s) == len(set(s))\n",
        "num_ids": 24
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s))==1\n",
        "num_ids": 13
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) == 1\n",
        "num_ids": 13
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3.0*side*side)/4.0\n",
        "num_ids": 17
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (3**(1/2))/4\n    return area*side**2\ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    volume = (3**(1/2))/4\n    return volume*side**3\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    area = side**2\n    return area\ndef volume_cube(side):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    volume = side**3\n    return volume\ndef area_octahedron(side):\n    '''\n    Write a function to caluclate the area of a octahedron.\n    '''\n    area = (3**(1/2))/2\n    return area*side**2\ndef volume_octahedron(side):\n    '''\n    Write a function to caluclate the volume of a octahedron.\n    '''\n    volume = (3**(1/2))/2\n    return volume*side**3\ndef area_dodecahedron(side):\n    '''\n    Write a function to caluclate the area of a dodecahedron.\n    '''\n    area = (5**(1/2))/4\n    return area*side**2\ndef volume_dodecahedron(side):\n    '''\n    Write a function to caluclate the volume of a dodecahedron.\n    '''\n    volume = (5**(1/2))/4\n    return volume*side**3\ndef area_icosahedron(side):\n    '''\n    Write a function to caluclate the area of a icosahedron.\n    '''\n    area = (5**(1/2))/2\n    return area*side**2\ndef volume_icosahedron(side):\n    '''\n    Write a function to caluclate the volume of a icosahedron.\n    '''\n    volume = (5**(1/2))/2\n    return volume*side**3\ndef area_hexaedron(side):\n    '''\n    Write a function to caluclate the area of a hexaedron.\n    '''\n    area = (3**(1/2))/2\n    return area*side**2\ndef volume_hexaedron(side):\n    '''\n    Write a function to caluclate the volume of a hexaedron.\n    '''\n    volume = (3**(1/2))/2\n    return volume*side**3\ndef area_octaedron(side):\n    '''\n    Write a function to caluclate the area of a octaedron.\n    '''\n    area = (3**(1/2))/4\n    return area*side**2\ndef volume_octaedron(side):\n    '''\n    Write a function to caluclate the volume of a octaedron.\n    '''\n    volume = (3**(1/2))/4\n    return volume*side**3\ndef area_non_trihedral_rectangular_prism(base, height, length):\n    '''\n    Write a function to caluclate the area of a non-trihedral rectangular prism.\n    '''\n    area = base*length*height + height*length*base\n    return area\ndef volume_non_trihedral_rectangular_prism(base, height, length):\n    '''\n    Write a function to caluclate the volume of a non-trihedral rectangular prism.\n    '''\n    volume = base*length*height + height*length*base\n    return volume\ndef area_non_trihedral_rectangular_pyramid(base, height, length):\n    '''\n    Write a function to caluclate the area of a non-trihedral rectangular pyramid.\n    '''\n    area = (base*length*height/2) + (base*height*length/2) + (height*base*length/2)\n    return area\ndef volume_non_trihedral_rectangular_pyramid(base, height, length):\n    '''\n    Write a function to caluclate the volume of a non-trihedral rectangular pyramid.\n    '''\n    volume = (base*length*height/2) + (base*height*length/2) + (height*base*length/2)\n    return volume\ndef area_non_trihedral_triangular_pyramid(base, height, length):\n    '''\n    Write a function to caluclate the area of a non-trihedral triangular pyramid.\n    '''\n    area = (base*length*height/2) + (base*height*length/2) + (height*base*length/2)\n    return area\ndef volume_non_trihedral_triangular_pyramid(base, height, length):\n    '''\n    Write a function to caluclate the volume of a non-trihedral triangular pyramid.\n    '''\n    volume = (base*length*height/2) + (base*height*length/2) + (height*base*length/2)\n    return volume\ndef area_non_trihedral_triangular_dodecahedron(base, height, length):\n    '''\n    Write a function to caluclate the area of a non-trihedral triangular dodecahedron.\n    '''\n    area = (5**(1/2))/4*(base*length*height/2) + (5**(1/2))/4*(base*height*length/2) + (5**(1/2))/4*(height*base*length/2)\n    return area\ndef volume_non_trihedral_triangular_dodecahedron(base, height, length):\n    '''\n    Write a function to caluclate the volume of a non-trihedral triangular dodecahedron.\n    '''\n    volume = (5**(1/2))/4*(base*length*height/2) + (5**(1/2))/4*(base*height*length/2) + (5**(1/2))/4*(height*base*length/2)\n    return volume\ndef area_non_trihedral_triangular_icosahedron(base, height, length):\n    '''\n    Write a function to caluclate the area of a non-trihedral triangular icosahedron.\n    '''\n    area = (5**(1/2))/4*(base*length*height/2) + (5**(1/2))/4*(base*height*length/2) + (5**(1/2))/4*(height*base*length/2)\n    return area\ndef volume_non_trihedral_triangular_icosahedron(base, height, length):\n    '''\n    Write a function to caluclate the volume of a non-trihedral triangular icosahedron.\n    '''\n    volume = (5**(1/2))/4*(base*length*height/2) + (5**(1/2))/4*(base*height*length/2) + (5**(1/2))/4*(height*base*length/2)\n    return volume\ndef area_non_trihedral_triangular_tetrahedron(base, height, length):\n    '''\n    Write a function to caluclate the area of a non-trihedral triangular tetrahedron.\n    '''\n    area = (3**(1/2))/4*(base*length*height/2) + (3**(1/2))/4*(base*height*length/2) + (3**(1/2))/4*(height*base*length/2)\n    return area\ndef volume_non_trihedral_triangular_tetrahedron(base, height, length):\n    '''\n    Write a function to caluclate the volume of a non-trihedral triangular tetrahedron.\n    '''\n    volume = (3**(1/2))/4*(base*length*height/2) + (3**(1/2))/4*(base*height*length/2) + (3**(1/2))/4*(height*base*length/2)\n    return volume\ndef area_non_trihedral_triangular_cube(base, height, length):\n    '''\n    Write a function t",
        "num_ids": 7
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**2 * 3**0.5 / 4.\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return side**2 * 6\ndef area_cone(radius, height):\n    '''\n    Write a function to caluclate the area of a cone.\n    '''\n    return math.pi * radius**2 * height / 3.\ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    return side**3 / 4.\ndef volume_cube(side):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    return side**3\ndef volume_cone(radius, height):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    return (math.pi * radius**2 * height) / 3.\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    return math.pi * radius**2\ndef area_rhombus(diagonal):\n    '''\n    Write a function to caluclate the area of a rhombus.\n    '''\n    return diagonal**2 / 2.\ndef area_rectangle(length, breadth):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    return length * breadth\ndef area_triangle(side1, side2, side3):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    return (side1 + side2 + side3) / 2.\ndef volume_cuboid(length, breadth, height):\n    '''\n    Write a function to caluclate the volume of a cuboid.\n    '''\n    return length * breadth * height\ndef volume_sphere(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4 / 3 * math.pi * radius**3\ndef volume_cylinder(radius, height):\n    '''\n    Write a function to caluclate the volume of a cylinder.\n    '''\n    return math.pi * radius**2 * height\ndef volume_cone(radius, height):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    return math.pi * radius**2 * height / 3.\ndef volume_rectangular_prism(length, breadth, height):\n    '''\n    Write a function to caluclate the volume of a rectangular prism.\n    '''\n    return length * breadth * height\ndef volume_hemisphere(radius):\n    '''\n    Write a function to caluclate the volume of a hemisphere.\n    '''\n    return math.pi * radius**2 * 2\ndef volume_pyramid(base, height):\n    '''\n    Write a function to caluclate the volume of a pyramid.\n    '''\n    return base * height / 3.\ndef volume_cone_shell(radius, height):\n    '''\n    Write a function to caluclate the volume of a cone shell.\n    '''\n    return math.pi * radius**2 * height\ndef volume_cone_hemisphere(radius, height):\n    '''\n    Write a function to caluclate the volume of a cone hemisphere.\n    '''\n    return math.pi * radius**2 * height / 3.\ndef volume_cone_sphere(radius, height):\n    '''\n    Write a function to caluclate the volume of a cone sphere.\n    '''\n    return math.pi * radius**2 * height / 4.\ndef volume_dodecahedron(side):\n    '''\n    Write a function to caluclate the volume of a dodecahedron.\n    '''\n    return side**3 * 5**0.5 / 12.\ndef volume_octahedron(side):\n    '''\n    Write a function to caluclate the volume of an octahedron.\n    '''\n    return side**3 / 6.\ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    return side**3 / 4.\ndef volume_icosahedron(side):\n    '''\n    Write a function to caluclate the volume of an icosahedron.\n    '''\n    return side**3 * 5**0.5 / 120.\ndef volume_truncated_cone(radius, height):\n    '''\n    Write a function to caluclate the volume of a truncated cone.\n    '''\n    return math.pi * radius**2 * height\ndef volume_prism(length, breadth, height):\n    '''\n    Write a function to caluclate the volume of a rectangular prism.\n    '''\n    return length * breadth * height\ndef volume_box(length, breadth, height):\n    '''\n    Write a function to caluclate the volume of a cuboid.\n    '''\n    return length * breadth * height\ndef volume_prism_shell(length, breadth, height):\n    '''\n    Write a function to caluclate the volume of a cuboid.\n    '''\n    return length * breadth * height\ndef volume_pyramid_shell(base, height):\n    '''\n    Write a function to caluclate the volume of a pyramid.\n    '''\n    return base * height\ndef volume_pyramid_cone_shell(base, height):\n    '''\n    Write a function to caluclate the volume of a pyramid.\n    '''\n    return base * height\ndef volume_triangle_shell(side1, side2, side3):\n    '''\n    Write a function to caluclate the volume of a triangle.\n    '''\n    return side1 * side2 * side3 / 2.\ndef volume_triangle_cone_shell(side1, side2, side3):\n    '''\n    Write a function to caluclate the volume of a triangle.\n    '''\n    return side1 * side2 * side3 / 2.\ndef volume_triangle_prism_shell(side1, side2, side3):\n    '''\n    Write a function to caluclate the volume of a triangle.\n    '''\n    return side1 * side2 * side3 / 2.\ndef volume_octahedron_shell(side1, side2, side3):\n    '''\n    Write a function to caluclate the volume of a octahedron.\n    '''\n    return side1 * side2 * side3 / 2.\ndef volume_icosahedron_shell(side1, side2, side3):\n    '''\n    Write a function to caluclate the volume of a octahedron.\n    '''\n    return side1 * side2 * side3 / 2.\ndef volume_tetrahedron_shell(side1, side2, side3):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    return side1 * side2 * side3 / 2.\ndef volume_icosahedron(side):\n    '''\n    Write a function to caluclate the volume of an icosahedron.\n    '''\n    return side**3 * 5**0.5 / 120.\ndef volume_dodecahedron_shell(side1, side2, side3):\n    '''\n    Write a function to caluclate the volume of a dodecahedron.\n    '''\n    return side1 * side2 * side3 / 2.\ndef volume_cube_shell(side1, side2, side3):\n    '''\n    Write a function to caluclate the volume of a cuboid.\n    '''\n    return side1 * side2 * side3\ndef volume_cylinder_shell(radius, height):\n    '''\n    Write a function to caluclate the volume of a cylinder.\n    '''\n    return math.pi * radius**2 * height\ndef volume_cone_shell(radius, height):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    return math.pi * radius**2 * height / 3.\ndef volume_rectangular_prism_shell(length, breadth, height):\n    '''\n    Write a function to caluclate the volum",
        "num_ids": 13
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a=side[0]\n    b=side[1]\n    c=side[2]\n    p=(a+b+c)/2\n    area=math.sqrt(p*(p-a)*(p-b)*(p-c))\n    return area\ndef area_pyramid(side1, side2, side3):\n    '''\n    Write a function to calculate the area of a Pyramid.\n    '''\n    area=1/4*(area_tetrahedron(side1)+area_tetrahedron(side2)+area_tetrahedron(side3))\n    return area\ndef area_trapezium(side1, side2, side3, side4):\n    '''\n    Write a function to calculate the area of a Trapezium.\n    '''\n    a=side1\n    b=side2\n    c=side3\n    d=side4\n    area=1/2*(a+b+c+d)\n    return area\ndef area_cube(side):\n    '''\n    Write a function to calculate the area of a Cube.\n    '''\n    area=side**2\n    return area\ndef area_rectangle(length, breadth):\n    '''\n    Write a function to calculate the area of a Rectangle.\n    '''\n    area=length*breadth\n    return area\ndef area_cylinder(radius,height):\n    '''\n    Write a function to calculate the area of a Cylinder.\n    '''\n    area=math.pi*radius*radius+math.pi*height*radius\n    return area\ndef area_cone(radius,height):\n    '''\n    Write a function to calculate the area of a Cone.\n    '''\n    area=math.pi*radius*radius+math.pi*height*radius\n    return area\ndef area_sphere(radius):\n    '''\n    Write a function to calculate the area of a Sphere.\n    '''\n    area=4*math.pi*radius*radius\n    return area\ndef area_sphere_vol(radius):\n    '''\n    Write a function to calculate the volume of a Sphere.\n    '''\n    volume=4/3*math.pi*radius**3\n    return volume\ndef area_sphere_surf(radius):\n    '''\n    Write a function to calculate the surface area of a Sphere.\n    '''\n    surface_area=4*math.pi*radius**2\n    return surface_area\ndef volume_cone(radius,height):\n    '''\n    Write a function to calculate the volume of a Cone.\n    '''\n    volume=math.pi*radius*radius*height/3\n    return volume\ndef volume_cylinder(radius,height):\n    '''\n    Write a function to calculate the volume of a Cylinder.\n    '''\n    volume=math.pi*radius*radius*height\n    return volume\ndef volume_tetrahedron(side):\n    '''\n    Write a function to calculate the volume of a Tetrahedron.\n    '''\n    volume=1/3*(area_tetrahedron(side[0])+area_tetrahedron(side[1])+area_tetrahedron(side[2]))\n    return volume\ndef volume_pyramid(side1, side2, side3):\n    '''\n    Write a function to calculate the volume of a Pyramid.\n    '''\n    volume=1/3*(area_pyramid(side1, side2, side3))\n    return volume\ndef volume_rectangle(length, breadth):\n    '''\n    Write a function to calculate the volume of a Rectangle.\n    '''\n    volume=length*breadth\n    return volume\ndef volume_sphere(radius):\n    '''\n    Write a function to calculate the volume of a Sphere.\n    '''\n    volume=4/3*math.pi*radius**3\n    return volume\ndef volume_sphere_surf(radius):\n    '''\n    Write a function to calculate the surface area of a Sphere.\n    '''\n    volume=4*math.pi*radius**2\n    return volume\ndef volume_sphere_vol(radius):\n    '''\n    Write a function to calculate the volume of a Sphere.\n    '''\n    volume=4/3*math.pi*radius**3\n    return volume\ndef volume_cylinder(radius,height):\n    '''\n    Write a function to calculate the volume of a Cylinder.\n    '''\n    volume=math.pi*radius*radius*height\n    return volume\ndef volume_tetrahedron(side):\n    '''\n    Write a function to calculate the volume of a Tetrahedron.\n    '''\n    volume=1/3*(area_tetrahedron(side[0])+area_tetrahedron(side[1])+area_tetrahedron(side[2]))\n    return volume\ndef volume_pyramid(side1, side2, side3):\n    '''\n    Write a function to calculate the volume of a Pyramid.\n    '''\n    volume=1/3*(area_pyramid(side1, side2, side3))\n    return volume\ndef volume_rectangle(length, breadth):\n    '''\n    Write a function to calculate the volume of a Rectangle.\n    '''\n    volume=length*breadth\n    return volume\ndef volume_sphere(radius):\n    '''\n    Write a function to calculate the volume of a Sphere.\n    '''\n    volume=4/3*math.pi*radius**3\n    return volume\ndef volume_sphere_surf(radius):\n    '''\n    Write a function to calculate the surface area of a Sphere.\n    '''\n    volume=4*math.pi*radius**2\n    return volume\ndef volume_sphere_vol(radius):\n    '''\n    Write a function to calculate the volume of a Sphere.\n    '''\n    volume=4/3*math.pi*radius**3\n    return volume\ndef volume_cylinder(radius,height):\n    '''\n    Write a function to calculate the volume of a Cylinder.\n    '''\n    volume=math.pi*radius*radius*height\n    return volume\ndef area_triangle(side1,side2,side3):\n    '''\n    Write a function to calculate the area of a Triangle.\n    '''\n    area=0.5*side1*(side2+side3)\n    return area\ndef area_square(side):\n    '''\n    Write a function to calculate the area of a Square.\n    '''\n    area=side*side\n    return area\ndef area_triangle_circum(side1,side2,side3):\n    '''\n    Write a function to calculate the area of a Triangle.\n    '''\n    area=0.5*(side1+side2+side3)\n    return area\ndef area_square_circum(side):\n    '''\n    Write a function to calculate the area of a Square.\n    '''\n    area=side*side\n    return area\ndef area_rectangle_circum(length, breadth):\n    '''\n    Write a function to calculate the area of a Rectangle.\n    '''\n    area=length*breadth\n    return area\ndef area_triangle_circum(side1,side2,side3):\n    '''\n    Write a function to calculate the area of a Triangle.\n    '''\n    area=0.5*(side1+side2+side3)\n    return area\ndef area_circle(radius):\n    '''\n    Write a function to calculate the area of a Circle.\n    '''\n    area=math.pi*radius**2\n    return area\ndef area_square_circum(side):\n    '''\n    Write a function to calculate the area of a Square.\n    '''\n    area=side**2\n    return area\ndef area_circle_circum(radius):\n    '''\n    Write a function to calculate the area of a Circle.\n    '''\n    area=math.pi*radius**2\n    return area\ndef perimeter_triangle(side1,side2,side3):\n    '''\n    Write a function to calculate the perimeter of a Triangle.\n    '''\n    perimeter=side1+side2+side3\n    return perimeter\ndef perimeter_square(side):\n    '''\n    Write a function to calculate th",
        "num_ids": 9
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side==0:\n        print \"Side cannot be 0\"\n        return\n    area=(1/4)*(3**0.5)*(4*(math.sqrt(3))/5)\n    return area\n",
        "num_ids": 54
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) * side * side / 4\ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    return (1 / 6) * math.sqrt(3) * side * side * side\n",
        "num_ids": 24
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side < 0:\n        return 0\n    return math.sqrt(3) * side * side * side / 4\ndef test_area_tetrahedron():\n    assert area_tetrahedron(3) == 60.0\n    assert area_tetrahedron(-5) == 0.0\n",
        "num_ids": 77
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side**2)*(0.5)\n",
        "num_ids": 15
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side * side * side\n",
        "num_ids": 14
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3*(side**2))/4\n",
        "num_ids": 15
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    m = m % len(list)\n    return list[-m:] + list[:-m]\n",
        "num_ids": 26
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    rotate_counter = m % len(list)\n    return list[rotate_counter:] + list[:rotate_counter]\n    \n",
        "num_ids": 36
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "num_ids": 15
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "num_ids": 15
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m == 0:\n        return list\n    if m > len(list):\n        m = m % len(list)\n    tmp = list[-m:]\n    list[-m:] = list[0:-m]\n    list[0:-m] = tmp\n    return list\n    \n",
        "num_ids": 71
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "num_ids": 15
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "num_ids": 15
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    for i in range(m):\n        temp = list[0]\n        for j in range(n-1):\n            list[j] = list[j+1]\n        list[n-1] = temp\n    return list\n",
        "num_ids": 65
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    temp = list[:m]\n    i = m\n    for j in range(n-m):\n        list[i] = list[i+n-m]\n        i += 1\n    list[:m] = temp\n    return list\n",
        "num_ids": 68
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "num_ids": 15
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem == None:\n            return True\n    return False\n",
        "num_ids": 29
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val == None:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    # test_tup = (2,3,None)\n    for i in test_tup:\n        if i is None:\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return False\n    return True\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return False\n    else:\n        return True\n    \ndef check_negative(test_tup):\n    '''\n    Write a function to check if the given tuple has any negative value or not.\n    '''\n    if any(x < 0 for x in test_tup):\n        return False\n    else:\n        return True\n    \ndef check_valid_value(test_tup):\n    '''\n    Write a function to check if the given tuple has valid values or not.\n    '''\n    if not all(x <= y for x, y in zip(test_tup, test_tup[1:])):\n        return False\n    else:\n        return True\n    \ndef test_zero():\n    assert check_none((0,)) == True\n    assert check_negative((0,)) == True\n    assert check_valid_value((0, 1, 2, 3, 4, 5)) == True\n    assert check_valid_value((1, 2, 3, 4, 5, 6)) == False\n",
        "num_ids": 122
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if None == item:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    return False\n",
        "num_ids": 20
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem == None:\n            return True\n    return False\n",
        "num_ids": 29
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: x % int(str(x)[0]), range(startnum, endnum)))\n",
        "num_ids": 30
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return lambda num: True if num >= startnum and num <= endnum and not any(num%int(digit) for digit in str(num)) else False\n",
        "num_ids": 38
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    #def divisible_by_digits(startnum, endnum):\n    if startnum > endnum:\n        return\n    else:\n        for i in range(startnum, endnum+1):\n            divisor = i\n            for j in range(1, len(str(i))+1):\n                divisor = divisor * int(str(i)[j-1])\n            if divisor == i:\n                print i\n",
        "num_ids": 109
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    nums = []\n    for num in range(startnum, endnum+1):\n        nums.append(num)\n    \n    div_nums = []\n    for num in nums:\n        num_digits = [int(digit) for digit in str(num)]\n        if all(num%digit == 0 for digit in num_digits):\n            div_nums.append(num)\n    \n    return div_nums\n",
        "num_ids": 107
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [num for num in range(startnum, endnum+1) if all([int(digit)%num == 0 for digit in str(num)])]\n",
        "num_ids": 40
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    digits = range(startnum, endnum + 1)\n    for i in digits:\n        divis = []\n        for num in str(i):\n            divis.append(i % int(num))\n        if len(divis) == len(set(divis)):\n            print i\n",
        "num_ids": 73
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    output = [i for i in range(startnum,endnum+1) if not any(j for j in str(i) if i % int(j))]\n    return output\n",
        "num_ids": 45
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    listofdivisible = []\n    for num in range(startnum, endnum):\n        if all(num % int(i) == 0 for i in str(num)):\n            listofdivisible.append(num)\n    return listofdivisible\n",
        "num_ids": 62
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return (math.pi*r**2)/4*math.sin(math.radians(a))\ndef line_intersect(line1, line2):\n    '''\n    Write a function that accepts two lines (as lists) and returns the point of intersection of the lines.\n    '''\n    x1,y1,x2,y2 = line1[0][0], line1[0][1], line1[1][0], line1[1][1]\n    x3,y3,x4,y4 = line2[0][0], line2[0][1], line2[1][0], line2[1][1]\n    denominator = (y4-y3)*(x2-x1) - (x4-x3)*(y2-y1)\n    if denominator==0:\n        return None\n    else:\n        return [((x1*y2-y1*x2)*(x3-x4)-(x1-x2)*(x3*y4-y3*x4)) / denominator, ((x1*y2-y1*x2)*(y3-y4)-(y1-y2)*(x3*y4-y3*x4)) / denominator]\ndef check_collision(point,line):\n    '''\n    Write a function that checks if a given point lies inside the line.\n    '''\n    x1,y1,x2,y2 = line[0][0], line[0][1], line[1][0], line[1][1]\n    x,y = point[0], point[1]\n    if (x1 <= x <= x2) and (y1 <= y <= y2):\n        return True\n    else:\n        return False\ndef check_collision_circles(point1,point2,rad1,rad2):\n    '''\n    Write a function that checks if the two circles are intersecting each other\n    '''\n    if point1[0] == point2[0] and point1[1] == point2[1]:\n        return False\n    if point1[0] == point2[0] or point1[1] == point2[1]:\n        return True\n    if math.sqrt((point1[0] - point2[0])**2 + (point1[1] - point2[1])**2) > (rad1+rad2):\n        return False\n    return True\ndef distance(point1,point2):\n    '''\n    Write a function that calculates the distance between two given points.\n    '''\n    x1,y1,x2,y2 = point1[0], point1[1], point2[0], point2[1]\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\ndef check_collision_arcs(point, center, r, ang):\n    '''\n    Write a function that checks if a given point lies inside the circle.\n    '''\n    x,y = point[0], point[1]\n    if distance((x,y),center) <= r:\n        if ang >= 0:\n            return True\n        return False\n    else:\n        return True\ndef line_intersect_arc(line, center, r, ang):\n    '''\n    Write a function that finds the point of intersection of a line with an arc.\n    '''\n    if ang > 360:\n        return None\n    elif ang < 0:\n        return line_intersect([line[1],line[0]],[line[0],line[1]])\n    else:\n        return line_intersect([line[0],line[1]],[line[1],line[0]])\ndef intersection(line1, line2):\n    '''\n    Write a function that accepts two lists (as tuples) and returns the point of intersection of the lines.\n    '''\n    x1,y1,x2,y2 = line1[0][0], line1[0][1], line1[1][0], line1[1][1]\n    x3,y3,x4,y4 = line2[0][0], line2[0][1], line2[1][0], line2[1][1]\n    denominator = (y4-y3)*(x2-x1) - (x4-x3)*(y2-y1)\n    if denominator==0:\n        return None\n    else:\n        return [((x1*y2-y1*x2)*(x3-x4)-(x1-x2)*(x3*y4-y3*x4)) / denominator, ((x1*y2-y1*x2)*(y3-y4)-(y1-y2)*(x3*y4-y3*x4)) / denominator]\ndef check_collision_lines(point,line1,line2):\n    '''\n    Write a function that checks if a given point lies inside the line.\n    '''\n    x1,y1,x2,y2 = line1[0][0], line1[0][1], line1[1][0], line1[1][1]\n    x3,y3,x4,y4 = line2[0][0], line2[0][1], line2[1][0], line2[1][1]\n    if (x1 <= point[0] <= x2) and (y1 <= point[1] <= y2):\n        return True\n    if (x3 <= point[0] <= x4) and (y3 <= point[1] <= y4):\n        return True\n    return False\ndef check_collision_circles(point1,point2,rad1,rad2):\n    '''\n    Write a function that checks if the two circles are intersecting each other\n    '''\n    if point1[0] == point2[0] and point1[1] == point2[1]:\n        return False\n    if point1[0] == point2[0] or point1[1] == point2[1]:\n        return True\n    if distance(point1,point2) > (rad1+rad2):\n        return False\n    return True\ndef distance(point1,point2):\n    '''\n    Write a function that calculates the distance between two given points.\n    '''\n    x1,y1,x2,y2 = point1[0], point1[1], point2[0], point2[1]\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\ndef check_collision_arcs(point, center, r, ang):\n    '''\n    Write a function that checks if a given point lies inside the circle.\n    '''\n    x,y = point[0], point[1]\n    if distance((x,y),center) <= r:\n        if ang >= 0:\n            return True\n        return False\n    else:\n        return True\ndef check_collision_arcs(point, center, r, ang):\n    '''\n    Write a function that checks if a given point lies inside the circle.\n    '''\n    x,y = point[0], point[1]\n    if distance((x,y),center) <= r:\n        if ang >= 0:\n            return True\n        return False\n    else:\n        return True\ndef line_intersect_arc(line, center, r, ang):\n    '''\n    Write a function that finds the point of intersection of a line with an arc.\n    '''\n    if ang > 360:\n        return None\n    elif ang < 0:\n        return line_intersect([line[1],line[0]],[line[0],line[1]])\n    else:\n        return line_intersect([line[0],line[1]],[line[1],line[0]])\ndef intersection(line1, line2):\n    '''\n    Write a function that accepts two lists (as tuples) and returns the point of intersection of the lines.\n    '''\n    x1,y1,x2,y2 = line1[0][0], line1[0][1], line1[1][0], line1[1][1]\n    x3,y3,x4,y4 = line2[0][",
        "num_ids": 62
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = (math.pi)*(r**2)*(a/360)\n        return area\n",
        "num_ids": 40
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r**2*(a/360)\nprint(sector_area(2,360))\nprint(sector_area(2,36))\nprint(sector_area(2,360.5))\n",
        "num_ids": 68
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r>0:\n        return a/2*math.pi*r**2\n    else:\n        return None\n",
        "num_ids": 31
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r*r*(a/360)\n",
        "num_ids": 33
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return (math.pi*r**2)/4*(math.sin(math.radians(a))-math.sin(math.radians(a+180)))/2\n",
        "num_ids": 59
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = (r**2) * (math.pi - math.asin(r/math.sin(math.pi/180 *a)))\n        return area\n",
        "num_ids": 54
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r**2*(a/360)\nprint(sector_area(5,360))\nprint(sector_area(5, 0))\nprint(sector_area(5, 360))\nprint(sector_area(5, 360.1))\n",
        "num_ids": 79
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r**2/2*a\n    \ndef main():\n    print sector_area(2,90)\n    print sector_area(2,361)\n    print sector_area(2,0)\n    print sector_area(2,359)\n    print sector_area(2,360)\n    \nif __name__ == '__main__':\n    main(",
        "num_ids": 108
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        print(\"Angle must be less than 360 degrees\")\n    else:\n        A = (math.pi)*(r**2)*(math.sin(math.radians(a)))/(4)\n        print(A)\n",
        "num_ids": 62
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    LCS = [[[0 for i in range(n + 1)] for i in range(o + 1)] for i in range(m + 1)] \n    result = 0\n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(o + 1): \n                if i == 0 or j == 0 or k == 0: \n                    LCS[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] == Z[k - 1]: \n                    LCS[i][j][k] = LCS[i - 1][j - 1][k - 1] + 1\n                    result = max(result, LCS[i][j][k])\n                else: \n                    LCS[i][j][k] = max(LCS[i - 1][j][k], LCS[i][j - 1][k], LCS[i][j][k - 1])\n    return result\n    \ndef levenshtein_distance(str1, str2): \n    '''\n    Write a function to find the Levenshtein distance for the given two strings. https://www.geeksforgeeks.org/levenshtein-distance-and-text-similarity-in-python/\n    '''\n    dist = [[i] for i in range(len(str2) + 1)]\n    dist[0] = range(1, len(str2) + 1)\n    for i in range(1, len(str1) + 1):\n        for j in range(len(str2) + 1):\n            if j == 0:\n                dist[j] = [i]\n            elif str1[i - 1] == str2[j - 1]:\n                dist[j] = [dist[j - 1][0] + 1]\n            else:\n                dist[j] = [1 + min(dist[j - 1][0], dist[j][0], dist[j - 1][1])]\n    return dist[len(str2)][0]\n    \ndef max_weight_matching(cost): \n    '''\n    Write a function to find the maximal matching for the given weight matrix. https://www.geeksforgeeks.org/dynamic-programming-set-7-max-weight-matching/\n    '''\n    in_matching = [-1] * len(cost) \n    min_cost = 0\n    for i in range(len(cost)): \n        for j in range(len(cost[i])): \n            if i == j or cost[i][j] == -1: \n                continue\n            if in_matching[j] == -1 or cost[i][j] < min_cost: \n                min_cost = cost[i][j] \n                in_matching[j] = i\n    return (in_matching, min_cost)\n    \ndef topological_sort(graph): \n    '''\n    Write a function to find the topological sort of a directed graph. https://www.geeksforgeeks.org/topological-sorting-indegree-based-solution/\n    '''\n    in_degree = [0] * len(graph)\n    for i in range(len(graph)): \n        for j in range(len(graph[i])): \n            if graph[i][j]!= -1: \n                in_degree[j] += 1\n    queue = [] \n    for i in range(len(in_degree)): \n        if in_degree[i] == 0: \n            queue.append(i) \n    top_order = []\n    while queue: \n        u = queue.pop() \n        top_order.append(u) \n        for i in range(len(graph[u])): \n            if graph[u][i]!= -1: \n                in_degree[i] -= 1 \n                if in_degree[i] == 0: \n                    queue.append(i) \n    if len(top_order)!= len(in_degree): \n        return None\n    return top_order\n    \ndef topological_sort_indegree_based(graph): \n    '''\n    Write a function to find the topological sort of a directed graph. https://www.geeksforgeeks.org/topological-sorting-indegree-based-solution/\n    '''\n    in_degree = [0] * len(graph) \n    for i in range(len(graph)): \n        for j in range(len(graph[i])): \n            if graph[i][j]!= -1: \n                in_degree[j] += 1\n    queue = [] \n    for i in range(len(in_degree)): \n        if in_degree[i] == 0: \n            queue.append(i) \n    top_order = []\n    while queue: \n        u = queue.pop() \n        top_order.append(u) \n        for i in range(len(graph[u])): \n            if graph[u][i]!= -1: \n                in_degree[i] -= 1 \n                if in_degree[i] == 0: \n                    queue.append(i) \n    if len(top_order)!= len(in_degree): \n        return None\n    return top_order\n    \ndef k_smallest_pairs(nums1, nums2, k): \n    '''\n    Write a function to find the k smallest pairs of two arrays. https://www.geeksforgeeks.org/smallest-k-pairs-arrays/\n    '''\n    from heapq import heappush, heappop\n    result = []\n    heap = []\n    i = j = 0\n    while i < len(nums1) and j < len(nums2): \n        if nums1[i] < nums2[j]: \n            heappush(heap, (nums1[i], nums2[j]))\n            i += 1\n        else: \n            heappush(heap, (nums2[j], nums1[i]))\n            j += 1\n        if len(heap) > k: \n            heappop(heap)\n    while i < len(nums1): \n        heappush(heap, (nums1[i], None))\n        i += 1\n        if len(heap) > k: \n            heappop(heap)\n    while j < len(nums2): \n        heappush(heap, (nums2[j], None))\n        j += 1\n        if len(heap) > k: \n            heappop(heap)\n    while heap: \n        result.append(heappop(heap))\n    return result\n    \ndef is_sorted(arr): \n    '''\n    Write a function to check if the given array is sorted. https://www.geeksforgeeks.org/check-array-is-sorted-or-not/\n    '''\n    for i in range(1, len(arr)): \n        if arr[i] < arr[i - 1]: \n            return False\n    return True\n    \ndef find_top_k_frequent_elements(arr, k): \n    '''\n    Write a function to find the top K frequent elements in an array. https://www.geeksforgeeks.org/find-the-top-k-frequent-elements-in-an-array/\n    '''\n    map_ = {}\n    for i in range(len(arr)): \n        map_[arr[i]] = map_.get(arr[i], 0) + 1\n    arr = list(map_.keys())\n    arr.sort()\n    arr.reverse()\n    return arr[:k]\n    \ndef count_subarrays(arr, n, k): \n    '''\n    Write a function to count the number of subarrays of size k in an array. https://www.geeksforgeeks.org/count-the-number-of-subarrays-of-size-k-in-an-array/\n    '''\n    result = [",
        "num_ids": 6
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    # Initialize the dp[i][j] array \n    dp = [[[0 for k in range(o + 1)] for j in range(n + 1)] for i in range(m + 1)] \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(o + 1): \n                if (i == 0 or j == 0 or k == 0): \n                    dp[i][j][k] = 0\n                elif (X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]): \n                    dp[i][j][k] = 1 + dp[i - 1][j - 1][k - 1] \n                else: \n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1]) \n    return dp[m][n][o]\n",
        "num_ids": 270
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    # return the last element of the last dimension of the 2D list \n    return L[m][n][o]\n",
        "num_ids": 259
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)] \n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if (i == 0 or j == 0 or k == 0):\n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] == Z[k-1]):\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    # print(L)\n    return L[m][n][o]\n    \n    \n    \ndef subsequences(S, P):\n    '''\n    Write a function to find the longest common subsequence for the given two string sequence.\n    https://www.geeksforgeeks.org/longest-common-subsequence-two-strings/\n    '''\n    m = len(S)\n    n = len(P)\n    L = [[0 for i in range(n+1)] for j in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if (i == 0 or j == 0):\n                L[i][j] = 0\n            elif (S[i-1] == P[j-1]):\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n    # print(L)\n    return L[m][n]\n",
        "num_ids": 173
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    def lcs_of_two(X, Y):\n        m = len(X)\n        n = len(Y)\n        L = [[0 for i in xrange(n+1)] for j in xrange(m+1)]\n        for i in xrange(m+1):\n            for j in xrange(n+1):\n                if i==0 or j==0:\n                    L[i][j] = 0\n                elif X[i-1] == Y[j-1]:\n                    L[i][j] = L[i-1][j-1]+1\n                else:\n                    L[i][j] = max(L[i-1][j], L[i][j-1])\n        return L[m][n]\n",
        "num_ids": 180
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n1 = len(X)\n    n2 = len(Y)\n    n3 = len(Z)\n",
        "num_ids": 29
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n",
        "num_ids": 26
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    L = [[[0 for x in range(o+1)] for x in range(n+1)] for x in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k],L[i][j-1][k],L[i][j][k-1]) \n    return L[m][n][o] \n",
        "num_ids": 241
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    if len(X) == 0 or len(Y) == 0 or len(Z) == 0: \n        return []\n",
        "num_ids": 33
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i==0 or j==0 or k==0:\n                    L[i][j][k]=0\n                elif X[i-1]==Y[j-1]==Z[k-1]:\n                    L[i][j][k]=L[i-1][j-1][k-1]+1\n                else:\n                    L[i][j][k]=max(L[i-1][j][k],L[i][j-1][k],L[i][j][k-1])\n    return L[m][n][o]\n",
        "num_ids": 225
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    list1=re.findall(r'(\\b[A-Z][a-z]+\\b)',str1)\n    str1=re.sub(r'(^\\b[A-Z][a-z]+\\b)',' ',str1)\n    str1=re.sub(r'(\\b[A-Z][a-z]+\\b)','\\g<1> ',str1)\n    print(str1)\ncapital_words_spaces('Hello World')\n",
        "num_ids": 117
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    x = re.findall(r'([A-Z][a-z]+)',str1)\n    for i in x:\n        str1 = re.sub(i,i.strip(),str1)\n    print str1\n",
        "num_ids": 57
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    res=''\n    lst=re.split(' ',str1)\n    for i in lst:\n        if i[0].isupper():\n            res+=i+' '\n        else:\n            res+=i\n    return res\n",
        "num_ids": 59
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    flag = True\n    for i in str1:\n        if i.isupper():\n            flag = False\n            print(i, end=' ')\n        elif i.islower():\n            if not flag:\n                print(i, end=' ')\n            else:\n                flag = False\n            print(i, end=' ')\n    print()\ndef check_for_exception(str1, str2):\n    '''\n    Write a function to check whether two strings are a permutation of each other or not.\n    '''\n    n = len(str1)\n    m = len(str2)\n    if n!= m:\n        return False\n    else:\n        list1 = [0] * 128\n        list2 = [0] * 128\n        for i in str1:\n            if not i.isalnum():\n                return False\n            else:\n                list1[ord(i)] = list1[ord(i)] + 1\n        for i in str2:\n            if not i.isalnum():\n                return False\n            else:\n                list2[ord(i)] = list2[ord(i)] + 1\n        for i in range(0,128):\n            if list1[i]!= list2[i]:\n                return False\n        return True\ndef is_valid_IP(str1):\n    '''\n    Write a function to check whether an input string is a valid IPv4 address or IPv6 address or neither.\n    '''\n    ip = re.findall('\\d+', str1)\n    if len(ip) == 4:\n        for i in ip:\n            if (int(i) < 0) or (int(i) > 255):\n                return False\n        return True\n    elif len(ip) == 16:\n        ip1 = []\n        for i in range(0,8,2):\n            ip1.append(ip[i] + ip[i+1])\n        for i in range(8,16):\n            ip1.append(ip[i])\n        for i in ip1:\n            if (int(i) < 0) or (int(i) > 255):\n                return False\n        return True\n    else:\n        return False\ndef is_valid_CIDR(str1):\n    '''\n    Write a function to check whether a given string represents a valid CIDR block.\n    '''\n    if str1 == None or str1 == '':\n        return False\n    if '/' not in str1:\n        return False\n    else:\n        list1 = str1.split('/')\n        if len(list1)!= 2:\n            return False\n        else:\n            return is_valid_IP(list1[0]) and (int(list1[1]) >= 0 and int(list1[1]) <= 32)\ndef is_valid_subnet_mask(str1):\n    '''\n    Write a function to check whether a given string represents a valid IPv4 subnet mask or not.\n    '''\n    if str1 == None or str1 == '':\n        return False\n    if '/' not in str1:\n        return False\n    else:\n        list1 = str1.split('/')\n        if len(list1)!= 2:\n            return False\n        else:\n            return is_valid_IP(list1[1]) and (int(list1[1]) >= 0 and int(list1[1]) <= 32)\ndef is_valid_subnet_host(str1, str2):\n    '''\n    Write a function to check whether a given string is a valid IPv4 host mask or not.\n    '''\n    if str1 == None or str1 == '':\n        return False\n    if '/' not in str1:\n        return False\n    else:\n        list1 = str1.split('/')\n        if len(list1)!= 2:\n            return False\n        else:\n            return is_valid_IP(list1[0]) and (int(list1[1]) >= 0 and int(list1[1]) <= 32)\ndef is_valid_mask(str1, str2):\n    '''\n    Write a function to check whether a given string represents a valid IPv4 network or not.\n    '''\n    if str1 == None or str1 == '':\n        return False\n    if '/' not in str1:\n        return False\n    else:\n        list1 = str1.split('/')\n        if len(list1)!= 2:\n            return False\n        else:\n            return is_valid_IP(list1[0]) and is_valid_subnet_mask(list1[1])\ndef is_valid_network(str1, str2):\n    '''\n    Write a function to check whether a given string represents a valid IPv4 network or not.\n    '''\n    if str1 == None or str1 == '':\n        return False\n    if '/' not in str1:\n        return False\n    else:\n        list1 = str1.split('/')\n        if len(list1)!= 2:\n            return False\n        else:\n            return is_valid_IP(list1[0]) and is_valid_subnet_mask(list1[1])\ndef is_valid_host(str1, str2):\n    '''\n    Write a function to check whether a given string represents a valid IPv4 host or not.\n    '''\n    if str1 == None or str1 == '':\n        return False\n    if '/' not in str1:\n        return False\n    else:\n        list1 = str1.split('/')\n        if len(list1)!= 2:\n            return False\n        else:\n            return is_valid_IP(list1[0]) and is_valid_subnet_host(list1[1], None)\ndef is_valid_IP_range(str1, str2):\n    '''\n    Write a function to check whether a given string represents a valid IPv4 range or not.\n    '''\n    if str1 == None or str1 == '':\n        return False\n    if '/' not in str1:\n        return False\n    else:\n        list1 = str1.split('/')\n        if len(list1)!= 2:\n            return False\n        else:\n            return is_valid_IP(list1[0]) and is_valid_subnet_host(list1[1], None)\ndef is_valid_subnet_range(str1, str2):\n    '''\n    Write a function to check whether a given string represents a valid IPv4 subnet range or not.\n    '''\n    if str1 == None or str1 == '':\n        return False\n    if '/' not in str1:\n        return False\n    else:\n        list1 = str1.split('/')\n        if len(list1)!= 2:\n            return False\n        else:\n            return is_valid_IP(list1[0]) and is_valid_subnet_mask(list1[1])\ndef is_valid_subnet_ip(str1, str2):\n    '''\n    Write a function to check whether a given string represents a valid IPv4 subnet IP or not.\n    '''\n    if str1 == None or str1 == '':\n        return False\n    if '/' not in str1:\n        return False\n    else:\n        list1 = str1.split('/')\n        if len(list1)!= 2:\n            return False\n        else:\n            return is_valid_IP(list1[0]) and is_valid_subnet_mask(list1[1])\ndef is_valid_IP_range_host(str1, str2):\n    '''\n    Write a function to check whether a given string represents a valid IPv4 range or not.\n    '''\n    if str1 == None or str1 == '':\n        return False\n    if '/' not in str1:\n        return False\n    else:\n        list1 = str1.split('/')\n        if len(list1)!= 2:\n            return False\n        else:\n            return is_valid_IP_range(list1[0], None) and is_valid_subnet_host(list1[1], None)\ndef is_valid_subnet_range_host(str1, str2):\n    '''\n    Write a function to check whether a given string represents a valid IPv4 subnet range or not.\n    '''\n    if str1 == None or str1 == '':\n        return False",
        "num_ids": 18
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    list1=[]\n    list1=str1.split()\n    result=''\n    for i in range(0,len(list1)):\n        if list1[i][0].isupper() and len(list1[i])>1:\n            result+=list1[i][0]\n            result+=' '\n        result+=list1[i][1:]\n    return result\ndef count_words(str1):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    list1=str1.split()\n    return len(list1)\ndef count_vowels(str1):\n    '''\n    Write a function to count the number of vowels in a given string.\n    '''\n    vowels=['a','e','i','o','u']\n    list1=str1.split()\n    count=0\n    for i in range(0,len(list1)):\n        for j in range(0,len(vowels)):\n            if vowels[j] in list1[i]:\n                count+=1\n    return count\ndef count_vowels_string(str1):\n    '''\n    Write a function to count the number of vowels in a given string.\n    '''\n    vowels=['a','e','i','o','u']\n    count=0\n    for i in range(0,len(str1)):\n        if str1[i] in vowels:\n            count+=1\n    return count\ndef find_longest_word(str1):\n    '''\n    Write a function to find the longest word in a string.\n    '''\n    list1=str1.split()\n    longest=0\n    longest_word=''\n    for i in range(0,len(list1)):\n        if len(list1[i])>longest:\n            longest=len(list1[i])\n            longest_word=list1[i]\n    return longest_word\ndef find_longest_word_string(str1):\n    '''\n    Write a function to find the longest word in a string.\n    '''\n    list1=str1.split()\n    longest=0\n    longest_word=''\n    for i in range(0,len(list1)):\n        if len(list1[i])>longest:\n            longest=len(list1[i])\n            longest_word=list1[i]\n    return longest_word\ndef find_longest_word_string_with_spaces(str1):\n    '''\n    Write a function to find the longest word in a string.\n    '''\n    list1=str1.split()\n    longest=0\n    longest_word=''\n    for i in range(0,len(list1)):\n        if len(list1[i])>longest:\n            longest=len(list1[i])\n            longest_word=list1[i]\n    return longest_word\ndef num_spaces(str1):\n    '''\n    Write a function to count the number of spaces in a given string.\n    '''\n    spaces=0\n    for i in range(0,len(str1)):\n        if str1[i]==' ':\n            spaces+=1\n    return spaces\ndef find_string(str1):\n    '''\n    Write a function to find the substring in a given string.\n    '''\n    return str1.find('we')\ndef find_string_len(str1):\n    '''\n    Write a function to find the substring in a given string.\n    '''\n    return len(str1.find('we'))\ndef find_string_without_spaces(str1):\n    '''\n    Write a function to find the substring in a given string.\n    '''\n    return str1.replace(' ','')\ndef find_string_with_spaces(str1):\n    '''\n    Write a function to find the substring in a given string.\n    '''\n    return str1.replace(' ','')\ndef find_string_with_spaces_2(str1):\n    '''\n    Write a function to find the substring in a given string.\n    '''\n    return str1.replace(' ','',1)\ndef find_string_without_spaces_2(str1):\n    '''\n    Write a function to find the substring in a given string.\n    '''\n    return str1.replace(' ','',1)\ndef find_string_reverse(str1):\n    '''\n    Write a function to find the substring in a given string.\n    '''\n    return str1[::-1]\ndef find_string_reverse_2(str1):\n    '''\n    Write a function to find the substring in a given string.\n    '''\n    return str1[::-1]\ndef find_string_reverse_3(str1):\n    '''\n    Write a function to find the substring in a given string.\n    '''\n    return str1[::-1]\ndef find_string_reverse_4(str1):\n    '''\n    Write a function to find the substring in a given string.\n    '''\n    return str1[::-1]\ndef reverse_string(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    return str1[::-1]\ndef reverse_string_2(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    return str1[::-1]\ndef reverse_string_3(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    return str1[::-1]\ndef reverse_string_4(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    return str1[::-1]\ndef reverse_string_5(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    return str1[::-1]\ndef reverse_string_6(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    return str1[::-1]\ndef reverse_string_7(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    return str1[::-1]\ndef reverse_string_8(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    return str1[::-1]\ndef reverse_string_9(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    return str1[::-1]\ndef reverse_string_10(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    return str1[::-1]\ndef reverse_string_11(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    return str1[::-1]\ndef reverse_string_12(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    return str1[::-1]\ndef reverse_string_13(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    return str1[::-1]\ndef reverse_string_14(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    return str1[::-1]\ndef reverse_string_15(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    return str1[::-1]\ndef reverse_string_16(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    return str1[::-1]\ndef reverse_string_17(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    return str1[::-1]\ndef reverse_string_18(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    return str1[::-1]\ndef reverse_string_19(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    return str1[::-",
        "num_ids": 9
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    s=''\n    # print(str1)\n    for i in range(len(str1)):\n        # print(str1[i])\n        if(str1[i].isalpha() and str1[i].isupper()):\n            if(i<len(str1)-1):\n                if(str1[i+1]==' '):\n                    s=s+' '+' '\n                elif(str1[i+1].isalpha()):\n                    s=s+' '+' '\n                elif(str1[i+1]=='-'):\n                    s=s+' '+'-'\n                elif(str1[i+1]=='('):\n                    s=s+' '+'('\n                elif(str1[i+1]=='-'):\n                    s=s+' '+'-'\n                elif(str1[i+1]=='-'):\n                    s=s+' '+'-'\n                else:\n                    s=s+' '\n            else:\n                s=s+' '\n        else:\n            s=s+str1[i]\n    return s\ndef even_occurrence(str1):\n    '''\n    Write a function to compute the number of even number of occurrence of a given string.\n    '''\n    p=re.compile(r'[0-9]')\n    c=0\n    for i in p.findall(str1):\n        if(int(i)%2==0):\n            c=c+1\n    return c\ndef first_and_last_occurrence(str1):\n    '''\n    Write a function to find the first and last occurrence of a substring in a given string.\n    '''\n    c=0\n    for i in range(len(str1)):\n        if(str1[i:].startswith('q')):\n            c=c+1\n        if(str1[i:].endswith('q')):\n            c=c+1\n    return c\ndef permutations(str1):\n    '''\n    Write a function to compute all permutations of a string.\n    '''\n    c=[]\n    for i in range(len(str1)):\n        for j in range(len(str1)):\n            if(i<j):\n                c.append(str1[i]+str1[j])\n    return c\ndef is_increasing(str1):\n    '''\n    Write a function to determine whether a string is an increasing sequence.\n    '''\n    for i in range(len(str1)-1):\n        if(str1[i]>str1[i+1]):\n            return False\n    return True\ndef is_strictly_increasing(str1):\n    '''\n    Write a function to determine whether a string is a strictly increasing sequence.\n    '''\n    for i in range(len(str1)-1):\n        if(str1[i]>=str1[i+1]):\n            return False\n    return True\ndef is_increasing_sequence(str1):\n    '''\n    Write a function to determine whether a string is an increasing sequence.\n    '''\n    if(len(str1)==1):\n        return True\n    if(str1[0]>str1[1]):\n        return False\n    return is_increasing_sequence(str1[1:])\ndef is_descending(str1):\n    '''\n    Write a function to determine whether a string is a descending sequence.\n    '''\n    for i in range(len(str1)-1):\n        if(str1[i]<str1[i+1]):\n            return False\n    return True\ndef is_strictly_descending(str1):\n    '''\n    Write a function to determine whether a string is a strictly descending sequence.\n    '''\n    for i in range(len(str1)-1):\n        if(str1[i]<=str1[i+1]):\n            return False\n    return True\ndef is_descending_sequence(str1):\n    '''\n    Write a function to determine whether a string is a descending sequence.\n    '''\n    if(len(str1)==1):\n        return True\n    if(str1[0]<str1[1]):\n        return False\n    return is_descending_sequence(str1[1:])\ndef is_palindrome(str1):\n    '''\n    Write a function to determine whether a string is a palindrome.\n    '''\n    i=0\n    j=len(str1)-1\n    while(i<j):\n        if(str1[i]!=str1[j]):\n            return False\n        i=i+1\n        j=j-1\n    return True\ndef is_rotation(str1, str2):\n    '''\n    Write a function to determine whether two strings are rotations of each other.\n    '''\n    if(len(str1)!=len(str2)):\n        return False\n    for i in range(len(str1)):\n        if(str1[i:]==str2[:len(str2)-i]):\n            return True\n    return False\ndef rotate(str1,n):\n    '''\n    Write a function to rotate a string by n places.\n    '''\n    return str1[n:]+str1[:n]\ndef is_valid_palindrome(str1):\n    '''\n    Write a function to determine whether a string is a valid palindrome.\n    '''\n    if(len(str1)<2):\n        return True\n    if(str1[0]==str1[-1]):\n        return is_valid_palindrome(str1[1:-1])\n    return False\ndef reverse_str(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    return str1[::-1]\ndef count_vowels(str1):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    v=0\n    for i in range(len(str1)):\n        if(str1[i] in 'aeiouAEIOU'):\n            v=v+1\n    return v\ndef make_lines(str1,n):\n    '''\n    Write a function to return all possible lines that can be made from the given string.\n    '''\n    c=[]\n    for i in range(n):\n        c.append(str1[:i]+'\\n'+str1[i:])\n    return c\ndef make_lines_with_exactly_k_vowels(str1,k):\n    '''\n    Write a function to return all possible lines that can be made from the given string.\n    '''\n    c=[]\n    for i in range(len(str1)):\n        if(count_vowels(str1[i:])>=k):\n            c.append(str1[:i]+'\\n'+str1[i:])\n    return c\ndef is_palindrome_permutation(str1):\n    '''\n    Write a function to determine whether a string is a permutation of a palindrome.\n    '''\n    d={}\n    for i in str1:\n        if(i not in d):\n            d[i]=1\n        else:\n            d[i]+=1\n    if(len(d)==2):\n        if(d[max(d.keys())]==1 and d[min(d.keys())]==1):\n            return True\n    return False\ndef are_anagrams(str1,str2):\n    '''\n    Write a function to determine whether two strings are anagrams of each other.\n    '''\n    if(len(str1)==len(str2)):\n        return sorted(str1)==sorted(str2)\n    return False\ndef is_anagram(str1,str2):\n    '''\n    Write a function to determine whether two strings are anagrams of each other.\n    '''\n    d1={}\n    d2={}\n    for i in str1:\n        if(i not in d1):\n            d1[i]=1\n        else:\n            d1[i]+=1\n    for i in str2:\n        if(i not in ",
        "num_ids": 68
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b[A-Z][^A-Z]*', str1)\n    return''.join(words)\n",
        "num_ids": 38
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'^[A-Z].*','',str1)\n    str1 = re.sub(r'[A-Z][a-z]*',r'\\1',str1)\n    str1 = re.sub(r'[a-z]*',r'',str1)\n    return re.sub(r'\\s+',' ',str1)\n",
        "num_ids": 96
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(\"[a-zA-Z]+\",lambda x: \" \"+x.group(0),str1)\n    return str1\n",
        "num_ids": 39
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    s1 = re.sub('(?<=[a-z])([A-Z])',r'\\1 ',str1)\n    s2 = re.sub('(?<=[A-Z])([A-Z](?=[a-z]))',r'\\1',s1)\n    return s2\n",
        "num_ids": 78
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sorted_nums_str = sorted(nums_str, key=lambda x: float(x))\n    return sorted_nums_str\n    \n",
        "num_ids": 39
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(i) for i in nums_str]\n    nums.sort()\n    return [str(i) for i in nums]\n",
        "num_ids": 41
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    from collections import defaultdict\n    import re\n    def is_number(s):\n        try:\n            float(s)\n            return True\n        except ValueError:\n            pass\n        return False\n",
        "num_ids": 49
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x:int(x))\n",
        "num_ids": 21
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    result = []\n    for i in nums_str:\n        tmp = i.split(\".\")\n        tmp = [int(j) for j in tmp]\n        result.append(tmp)\n    result.sort()\n    for i in result:\n        result_str = \"\"\n        for j in i:\n            result_str += str(j)\n        result_str += \".\"\n        print result_str\n    \nsort_numeric_strings([\"1.2\", \"8.4\", \"9.99\", \"9.95\", \"2.3\", \"1.0\"])\n",
        "num_ids": 140
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: [int(s) for s in re.findall(r'\\d+', x)])\n",
        "num_ids": 39
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda nums_str: [int(s) for s in nums_str.split() if s.isdigit()])\n",
        "num_ids": 43
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    lst = [int(n) for n in nums_str]\n    lst.sort()\n    return [str(lst[i]) for i in range(len(lst))]\n",
        "num_ids": 49
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if len(test_list) == 0:\n        test_list.append(test_tup)\n    else:\n        for i in range(0, len(test_list)):\n            if test_tup == test_list[i]:\n                return\n        test_list.append(test_tup)\n",
        "num_ids": 77
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + [test_tup]\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if not test_list:\n        return test_tup\n    if len(test_list) == 1:\n        return list(test_list[0]) + list(test_tup)\n    else:\n        return list(test_list[0]) + list(test_tup) + list(test_list[1:])\n",
        "num_ids": 81
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    assert isinstance(test_list, list)\n    assert isinstance(test_tup, tuple)\n    \n    new_list = test_list + [test_tup]\n    return new_list\n",
        "num_ids": 51
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return\n",
        "num_ids": 18
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return\n",
        "num_ids": 18
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    if i >= n:\n        return True\n    \n    left = i * 2 + 1\n    right = i * 2 + 2\n    if left < n and arr[left] < arr[i]:\n        return False\n    if right < n and arr[right] < arr[i]:\n        return False\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n",
        "num_ids": 113
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] < arr[i * 2] or arr[i] < arr[i * 2 + 1]:\n        return False\n    else:\n        return True\n",
        "num_ids": 42
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    #leaf node\n    if i >= len(arr):\n        return True\n",
        "num_ids": 20
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] < arr[i/2] or arr[i] < arr[(i-1)/2] or arr[i] < arr[(i-2)/2]:\n        return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    root = i\n    left_child = root * 2 + 1\n    right_child = root * 2 + 2\n    if left_child < arr_length and arr[left_child] < arr[root]:\n        root = left_child\n    if right_child < arr_length and arr[right_child] < arr[root]:\n        root = right_child\n    if root!= i:\n        return False\n    return True\n",
        "num_ids": 103
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i is 0:\n        return True\n    if arr[i] < arr[(i - 1) / 2]:\n        return False\n    return check_min_heap_helper(arr, (i - 1) / 2)\n",
        "num_ids": 58
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    parent = (i-1)//2\n    leftChild = 2*i+1\n    rightChild = 2*i+2\n    if leftChild < len(arr) and arr[i] > arr[leftChild]:\n        return False\n    if rightChild < len(arr) and arr[i] > arr[rightChild]:\n        return False\n    if parent >= 0 and arr[i] < arr[parent]:\n        return False\n    return True\n",
        "num_ids": 107
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 1:\n        return True\n    l = len(arr)\n    if l < 2:\n        return False\n    if arr[i] < arr[(i - 1) // 2] or arr[i] < arr[(i - 2) // 2]:\n        return False\n    return check_min_heap_helper(arr, i - 1)\n",
        "num_ids": 89
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    \n    if left_child < len(arr):\n        if arr[i] > arr[left_child]:\n            return False\n        else:\n            return check_min_heap_helper(arr, left_child)\n    if right_child < len(arr):\n        if arr[i] > arr[right_child]:\n            return False\n        else:\n            return check_min_heap_helper(arr, right_child)\n    else:\n        return True\n",
        "num_ids": 138
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    i = 1\n    jacobsthal = [0, 1]\n    while i < n:\n        jacobsthal.append(jacobsthal[i] + jacobsthal[i-1])\n        i += 1\n    return jacobsthal[n-1]\n",
        "num_ids": 71
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    if n == 0: return 0\n    if n == 1: return 1\n    if n == 2: return 1\n    if n == 3: return 2\n    if n == 4: return 4\n    if n == 5: return 7\n    if n == 6: return 22\n    if n == 7: return 42\n    if n == 8: return 109\n    if n == 9: return 274\n    if n == 10: return 477\n    if n == 11: return 724\n    if n == 12: return 1224\n    if n == 13: return 1620\n    if n == 14: return 2442\n    if n == 15: return 3123\n    if n == 16: return 3432\n    if n == 17: return 4786\n    if n == 18: return 5876\n    if n == 19: return 7749\n    if n == 20: return 8911\n    if n == 21: return 10242\n    if n == 22: return 11287\n    if n == 23: return 12695\n    if n == 24: return 14317\n    if n == 25: return 16489\n    if n == 26: return 18753\n    if n == 27: return 21102\n    if n == 28: return 24709\n    if n == 29: return 28496\n    if n == 30: return 32181\n    if n == 31: return 36371\n    if n == 32: return 47864\n    if n == 33: return 51527\n    if n == 34: return 64464\n    if n == 35: return 74874\n    if n == 36: return 85964\n    if n == 37: return 10056\n    if n == 38: return 12233\n    if n == 39: return 14443\n    if n == 40: return 16672\n    if n == 41: return 18772\n    if n == 42: return 2154\n    if n == 43: return 24181\n    if n == 44: return 29376\n    if n == 45: return 34054\n    if n == 46: return 41256\n    if n == 47: return 45504\n    if n == 48: return 52379\n    if n == 49: return 57430\n    if n == 50: return 59231\n    if n == 51: return 62680\n    if n == 52: return 67426\n    if n == 53: return 71391\n    if n == 54: return 76624\n    if n == 55: return 81856\n    if n == 56: return 87943\n    if n == 57: return 92479\n    if n == 58: return 97638\n    if n == 59: return 102546\n    if n == 60: return 108253\n    if n == 61: return 111869\n    if n == 62: return 121469\n    if n == 63: return 124587\n    if n == 64: return 128179\n    if n == 65: return 131613\n    if n == 66: return 134592\n    if n == 67: return 137431\n    if n == 68: return 142464\n    if n == 69: return 149442\n    if n == 70: return 153541\n    if n == 71: return 161466\n    if n == 72: return 164583\n    if n == 73: return 167554\n    if n == 74: return 172734\n    if n == 75: return 177921\n    if n == 76: return 183011\n    if n == 77: return 188310\n    if n == 78: return 193206\n    if n == 79: return 197797\n    if n == 80: return 201194\n    if n == 81: return 205582\n    if n == 82: return 212852\n    if n == 83: return 219747\n    if n == 84: return 225560\n    if n == 85: return 231811\n    if n == 86: return 234283\n    if n == 87: return 236365\n    if n == 88: return 238606\n    if n == 89: return 241587\n    if n == 90: return 244972\n    if n == 91: return 247167\n    if n == 92: return 250159\n    if n == 93: return 253945\n    if n == 94: return 256235\n    if n == 95: return 259550\n    if n == 96: return 263008\n    if n == 97: return 267641\n    if n == 98: return 270019\n    if n == 99: return 275470\n    if n == 100: return 277781\n",
        "num_ids": 1049
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    prev_jacobsthal = 1\n    i = 2\n    while (i < n): \n        prev_jacobsthal = prev_jacobsthal + 2\n        i = i + 1\n",
        "num_ids": 50
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: return 0\n    elif n == 1: return 1\n    else: \n        return jacobsthal_num(n-1) + jacobsthal_num(n-2) \n",
        "num_ids": 55
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n == 2: \n        return 2\n    return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n",
        "num_ids": 66
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)\n",
        "num_ids": 59
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1: return 1\n    a, b, c, d = 0, 1, 1, 3\n    for i in range(n - 1):\n        a, b, c, d = b, c, d, (2 * d + c)\n    return (b + c) / 2\n    \n    \ndef jacobsthal_lucas(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    '''\n    a, b, c, d = 0, 1, 1, 3\n    for i in range(n - 1):\n        a, b, c, d = b, c, d, (a + b)\n    return (b + c) / 2\n    \n    \ndef number_of_binary_strings(n): \n    '''\n    https://www.hackerrank.com/challenges/compare-two-strings\n    Given two strings, s and t, check if they are equal.\n    '''\n    a, b, c, d, e = 0, 0, 1, 0, 1\n    for i in range(n):\n        a, b, c, d, e = b, c, d, e, a + e\n    return 1 if a == b else 0\n    \n    \ndef find_the_distance(n):\n    '''\n    https://www.hackerrank.com/challenges/the-spread-of-rummikub\n    You are given a string with spaces. One letter is either stored in lowercase or uppercase. Convert it to a string that is made up of \"1\"s and \"0\"s. If the string already has all \"1\"s, return an empty string.\n    '''\n    a, b, c, d = 0, 0, 0, 0\n    for i in range(n):\n        a, b, c, d = b, c, d, a + d\n    return a * b\n    \n    \ndef birthday_ranges(arr, n):\n    '''\n    https://www.hackerrank.com/challenges/the-birthday-bar\n    Two friends are playing a game. They take turns taking turns counting, starting from zero. On your turn, you are given the current count. Print the number of ways you can reach exactly N.\n    '''\n    a, b, c, d = 0, 1, 1, 1\n    for i in range(n):\n        a, b, c, d = b, c, d, a + c\n    return b\n    \n    \ndef decoded_triangle(n, t):\n    '''\n    https://www.hackerrank.com/challenges/breaking-the-codes/problem\n    Given a decimal number, n, convert it into a number that has the same value in all base-10 numbers.\n    You should be able to do this by adding digits to the number.\n    '''\n    a, b, c, d = 0, 1, 1, 1\n    for i in range(n):\n        a, b, c, d = b, c, d, a + d\n    return b\n    \n    \ndef is_leap_year(year):\n    '''\n    https://www.hackerrank.com/challenges/the-love-letter-mystery\n    Given an integer N, return the number of ways to decode a string of length N using integers as well as lowercase and uppercase letters.\n    \n    Constraints\n    1 <= N <= 30\n    The decoded string must be composed of lowercase letters a-z and/or uppercase letters A-Z.\n    '''\n    a, b, c, d = 0, 0, 0, 0\n    for i in range(n):\n        a, b, c, d = b, c, d, a + d\n    return a\n    \n    \ndef super_counting_machine(n, m):\n    '''\n    https://www.hackerrank.com/challenges/the-spy-game\n    Your task is to find a secret integer that has the following properties:\n    \n    It is divisible by m.\n    It is divisible by 6.\n    It is divisible by 7.\n    It is divisible by 8.\n    It is divisible by 11.\n    It is divisible by 13.\n    It is divisible by 17.\n    It is divisible by 19.\n    It is divisible by 20.\n    And then you need to print its product.\n    '''\n    a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z = 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\n    for i in range(n):\n        a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z = b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a + j + k\n    return a * m\n    \n    \ndef lone_sum(a, b, c):\n    '''\n    https://www.hackerrank.com/challenges/lonely-sum\n    Given three integers between 1 and 6, inclusive, representing the values of a, b, and c, respectively, and a number n, return the number of ways to arrange the values of a, b, and c so that they become 1, 2, and 3 respectively.\n    '''\n    a, b, c, d = 0, 0, 0, 0\n    for i in range(n):\n        a, b, c, d = b, c, d, a + d\n    return a + b + c\n    \n    \ndef swap_numbers(a, b):\n    '''\n    https://www.hackerrank.com/challenges/the-minion-game\n    Let's use numbers and strings to see how we might improve our game. There are lots of minions on our team, each minion has a different identity and we suspect they use each number to identify them. We suspect that minions with number x use their identity to identify other minions with number x.\n    \n    There are two types of minions:\n    \n    Minions that use the number x to identify minions with number x.\n    Minions that do not use the number x to identify minions with number x.\n    \n    Your job is to identify which type of minions are identified by the given minion's number.\n    \n    Input\n    The first line of the input contains an integer t (1\u2009\u2264\u2009t\u2009\u2264\u2009100) \u2014 the number of test cases.\n    \n    Each test case is described in the following two lines:\n    \n    An integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009100) \u2014 the number of minions.\n    \n    Then n integers a1,\u2009a2,\u2009...,\u2009an (1\u2009\u2264\u2009ai\u2009\u2264\u2009100), each representing the identity of the minion with number ai.\n    \n    It's guaranteed that each number ai is unique and each number ai appears at most once.\n    \n    Output\n    For each test case, print n integers: the i-th integer represents the type of the i-th minion.\n    \n    In the first sample, you see that minions with number 1 use each number 1 once, minions with number 2 use each number 2 once, and so on. In the second sample, you see that minions with number 1 use each number 1 once, minions with number 2 use each number 2 twice, and so on.\n    '''\n    a, b, c, d = 0, 0, 0, 0\n    for i in range(n):\n        a, b, c, d = b, c, d, a + d\n    return a\n    \n    \nde",
        "num_ids": 56
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    a = 1\n    b = 1\n    nth_jhal = 1\n    for i in xrange(n - 1):\n        a, b = b, a + b\n        nth_jhal = b\n    return nth_jhal\n",
        "num_ids": 61
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: return 0\n    if n == 1: return 1\n    if n % 2 == 0: \n        return (4*jacobsthal_num(n-1)) + 2*jacobsthal_num(n-2)\n    else: \n        return (2*jacobsthal_num(n-1)) + jacobsthal_num(n-2)\n",
        "num_ids": 96
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-2) + jacobsthal_num(n-1)\n",
        "num_ids": 57
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    result = []\n    for item in test_list:\n        if len(result) < K:\n            result.append(item)\n        elif item[1] < result[0][1]:\n            result[0] = item\n    return result\n",
        "num_ids": 61
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    #\n    # Solution 1\n    #\n    # Time Complexity: O(nk)\n    #\n    if K > len(test_list):\n        return -1\n    \n    min_list = []\n    min_list.append(min(test_list, key = lambda x: x[0]))\n    test_list.remove(min(test_list, key = lambda x: x[0]))\n    \n    for i in range(K - 1):\n        min_list.append(min(test_list, key = lambda x: x[1]))\n        test_list.remove(min(test_list, key = lambda x: x[1]))\n    \n    return min_list\n    \n    #\n    # Solution 2\n    #\n    # Time Complexity: O(nk)\n    #\n    if K > len(test_list):\n        return -1\n    \n    new_list = []\n    for i in range(K):\n        min_val = min(test_list, key = lambda x: x[0])\n        new_list.append(min_val)\n        test_list.remove(min_val)\n    \n    return new_list\n    \n    #\n    # Solution 3\n    #\n    # Time Complexity: O(nk)\n    #\n    if K > len(test_list):\n        return -1\n    \n    return heapq.nsmallest(K, test_list)\n    \n    #\n    # Solution 4\n    #\n    # Time Complexity: O(nk)\n    #\n    if K > len(test_list):\n        return -1\n    \n    # Build heap\n    heap = []\n    for i in range(K):\n        heap.append(test_list[i])\n        \n    heapq.heapify(heap)\n    \n    for i in range(K, len(test_list)):\n        if heap[0] > test_list[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, test_list[i])\n    \n    return heap\n    \n    #\n    # Solution 5\n    #\n    # Time Complexity: O(nk)\n    #\n    if K > len(test_list):\n        return -1\n    \n    return heapq.nsmallest(K, test_list)\n    \n    #\n    # Solution 6\n    #\n    # Time Complexity: O(nk)\n    #\n    if K > len(test_list):\n        return -1\n    \n    return heapq.nsmallest(K, test_list, key = lambda x: x[1])\n    \n    #\n    # Solution 7\n    #\n    # Time Complexity: O(nk)\n    #\n    if K > len(test_list):\n        return -1\n    \n    return heapq.nsmallest(K, test_list, key = lambda x: (x[0], x[1]))\n    \n    #\n    # Solution 8\n    #\n    # Time Complexity: O(nk)\n    #\n    if K > len(test_list):\n        return -1\n    \n    return heapq.nsmallest(K, test_list, key = lambda x: (x[0], -x[1]))\n    \n    #\n    # Solution 9\n    #\n    # Time Complexity: O(nk)\n    #\n    if K > len(test_list):\n        return -1\n    \n    return heapq.nsmallest(K, test_list, key = lambda x: (-x[1], x[0]))\n    \n    #\n    # Solution 10\n    #\n    # Time Complexity: O(nk)\n    #\n    if K > len(test_list):\n        return -1\n    \n    return heapq.nsmallest(K, test_list, key = lambda x: (-x[1], -x[0]))\n    \n    #\n    # Solution 11\n    #\n    # Time Complexity: O(nk)\n    #\n    if K > len(test_list):\n        return -1\n    \n    return heapq.nsmallest(K, test_list, key = lambda x: (x[1], -x[0]))\n    \n    #\n    # Solution 12\n    #\n    # Time Complexity: O(nk)\n    #\n    if K > len(test_list):\n        return -1\n    \n    return heapq.nsmallest(K, test_list, key = lambda x: (-x[1], x[0]))\n    \n    #\n    # Solution 13\n    #\n    # Time Complexity: O(nk)\n    #\n    if K > len(test_list):\n        return -1\n    \n    return heapq.nsmallest(K, test_list, key = lambda x: (x[0], x[1]))\n    \n    #\n    # Solution 14\n    #\n    # Time Complexity: O(nk)\n    #\n    if K > len(test_list):\n        return -1\n    \n    return heapq.nsmallest(K, test_list, key = lambda x: (-x[1], x[0]))\n    \n    #\n    # Solution 15\n    #\n    # Time Complexity: O(nk)\n    #\n    if K > len(test_list):\n        return -1\n    \n    return heapq.nsmallest(K, test_list, key = lambda x: (x[0], -x[1]))\n    \n    #\n    # Solution 16\n    #\n    # Time Complexity: O(nk)\n    #\n    if K > len(test_list):\n        return -1\n    \n    return heapq.nsmallest(K, test_list, key = lambda x: (-x[1], x[0]))\n    \n    #\n    # Solution 17\n    #\n    # Time Complexity: O(nk)\n    #\n    if K > len(test_list):\n        return -1\n    \n    return heapq.nsmallest(K, test_list, key = lambda x: (-x[1], -x[0]))\n    \n    #\n    # Solution 18\n    #\n    # Time Complexity: O(nk)\n    #\n    if K > len(test_list):\n        return -1\n    \n    return heapq.nsmallest(K, test_list, key = lambda x: (x[1], x[0]))\n    \n    #\n    # Solution 19\n    #\n    # Time Complexity: O(nk)\n    #\n    if K > len(test_list):\n        return -1\n    \n    return heapq.nsmallest(K, test_list, key = lambda x: (x[1], -x[0]))\n    \n    #\n    # Solution 20\n    #\n    # Time Complexity: O(nk)\n    #\n    if K > len(test_list):\n        return -1\n    \n    return heapq.nsmallest(K, test_list, key = lambda x: (-x[1], x[0]))\n    \n    #\n    # Solution 21\n    #\n    # Time Complexity: O(nk)\n    #\n    if K > len(test_list):\n        return -1\n    \n    return heapq.nlargest(K, test_list, key = lambda x: x[1])\n    \n    #\n    # Solution 22\n    #\n    # Time Complexity: O(nk)\n    #\n    if K > len(test_list):\n        return -1\n    \n    return heapq.nlargest(K, test_list, key = lambda x: x[1])\n    \n    #\n    # Solution 23\n    #\n    # Time Complexity: O(nk)\n    #\n    if K > len(test_list):\n        return -1\n    \n    return heapq.nlargest(K, test_list, key = lambda x: (-x[1], x[0]))\n    \n    #\n    # Solution 24\n    #\n    # Time Complexity: O(nk)\n    #\n    if ",
        "num_ids": 1975
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list = list(test_list)\n    records = []\n    min_list = []\n    #for record in test_list:\n    for i in range(0, len(test_list)):\n        records.append(test_list[i][1:])\n    #records = [record[1:] for record in test_list]\n    #print(records)\n    #print(len(records))\n    #for rec in records:\n    #    print(rec)\n    #records.sort()\n    #print(records)\n    #for i in range(0, len(records)):\n    #    print(records[i])\n    #print(len(records))\n    for i in range(0, K):\n        min_list.append(records[i])\n    print(min_list)\n    return min_list\n    \n    \ndef min_k_table(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    '''\n    test_list = list(test_list)\n    records = []\n    min_list = []\n    #for record in test_list:\n    for i in range(0, len(test_list)):\n        records.append(test_list[i][1:])\n    #records = [record[1:] for record in test_list]\n    #print(records)\n    #print(len(records))\n    #for rec in records:\n    #    print(rec)\n    #records.sort()\n    #print(records)\n    #for i in range(0, len(records)):\n    #    print(records[i])\n    #print(len(records))\n    for i in range(0, K):\n        min_list.append(records[i])\n    return min_list\n    \n    \ndef min_k_records(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    '''\n    test_list = list(test_list)\n    records = []\n    min_list = []\n    #for record in test_list:\n    for i in range(0, len(test_list)):\n        records.append(test_list[i][1:])\n    #records = [record[1:] for record in test_list]\n    #print(records)\n    #print(len(records))\n    #for rec in records:\n    #    print(rec)\n    #records.sort()\n    #print(records)\n    #for i in range(0, len(records)):\n    #    print(records[i])\n    #print(len(records))\n    for i in range(0, K):\n        min_list.append(records[i])\n    return min_list\n    \n    \ndef min_k_records_1(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    '''\n    test_list = list(test_list)\n    records = []\n    min_list = []\n    #for record in test_list:\n    for i in range(0, len(test_list)):\n        records.append(test_list[i][1:])\n    #records = [record[1:] for record in test_list]\n    #print(records)\n    #print(len(records))\n    #for rec in records:\n    #    print(rec)\n    #records.sort()\n    #print(records)\n    #for i in range(0, len(records)):\n    #    print(records[i])\n    #print(len(records))\n    for i in range(0, K):\n        min_list.append(records[i])\n    return min_list\n    \n    \ndef min_k_records_2(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    '''\n    test_list = list(test_list)\n    records = []\n    min_list = []\n    #for record in test_list:\n    for i in range(0, len(test_list)):\n        records.append(test_list[i][1:])\n    #records = [record[1:] for record in test_list]\n    #print(records)\n    #print(len(records))\n    #for rec in records:\n    #    print(rec)\n    #records.sort()\n    #print(records)\n    #for i in range(0, len(records)):\n    #    print(records[i])\n    #print(len(records))\n    for i in range(0, K):\n        min_list.append(records[i])\n    return min_list\n    \n    \ndef min_k_records_3(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    '''\n    test_list = list(test_list)\n    records = []\n    min_list = []\n    #for record in test_list:\n    for i in range(0, len(test_list)):\n        records.append(test_list[i][1:])\n    #records = [record[1:] for record in test_list]\n    #print(records)\n    #print(len(records))\n    #for rec in records:\n    #    print(rec)\n    #records.sort()\n    #print(records)\n    #for i in range(0, len(records)):\n    #    print(records[i])\n    #print(len(records))\n    for i in range(0, K):\n        min_list.append(records[i])\n    return min_list\n    \n    \ndef min_k_records_4(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    '''\n    test_list = list(test_list)\n    records = []\n    min_list = []\n    #for record in test_list:\n    for i in range(0, len(test_list)):\n        records.append(test_list[i][1:])\n    #records = [record[1:] for record in test_list]\n    #print(records)\n    #print(len(records))\n    #for rec in records:\n    #    print(rec)\n    #records.sort()\n    #print(records)\n    #for i in range(0, len(records)):\n    #    print(records[i])\n    #print(len(records))\n    for i in range(0, K):\n        min_list.append(records[i])\n    return min_list\n    \n    \ndef min_k_records_5(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    '''\n    test_list = list(test_list)\n    records = []\n    min_list = []\n    #for record in test_list:\n    for i in range(0, len(test_list)):\n    ",
        "num_ids": 54
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_k = []\n    for i in range(0, K):\n        min_k.append(test_list[i])\n    return min_k\n",
        "num_ids": 40
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if K > len(test_list):\n        return -1\n    # sort by the second element of tuple\n    test_list.sort(key = operator.itemgetter(1))\n    # sort by the first element of tuple\n    test_list.sort(key = operator.itemgetter(0))\n    # now we are at the top K element\n    return test_list[0:K]\n",
        "num_ids": 96
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    sorted_list = sorted(test_list)\n    return [sorted_list[i] for i in range(K)]\n",
        "num_ids": 33
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    final_list = sorted(test_list, key=lambda x: x[1])\n    return final_list[:K]\n",
        "num_ids": 33
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) < K:\n        return None\n    else:\n        min_list = []\n        for i in range(K):\n            min_list.append(test_list[i])\n    return min_list\n",
        "num_ids": 58
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) == 0:\n        return None\n    if len(test_list) < K:\n        return None\n    min_key = test_list[0][0]\n    min_list = []\n    for i in range(len(test_list)):\n        if test_list[i][0] < min_key:\n            min_key = test_list[i][0]\n            min_list = test_list[:i]\n    if len(min_list) < K:\n        return None\n    return min_list\n",
        "num_ids": 134
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) < K:\n        return None\n    \n    sorted_test_list = sorted(test_list, key=lambda x: x[1])\n    #print sorted_test_list\n    return sorted_test_list[:K]\n    \n",
        "num_ids": 67
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    final = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k] and l1[i] not in final:\n                    final.append(l1[i])\n    return final\n",
        "num_ids": 91
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    def common_elements(l1, l2, l3):\n        l4 = []\n        for i in l1:\n            for j in l2:\n                if i == j:\n                    l4.append(i)\n        for i in l2:\n            for j in l3:\n                if i == j:\n                    l4.append(i)\n        return l4\n",
        "num_ids": 96
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for index in range(len(l1)):\n        if l1[index] in l2 and l1[index] in l3:\n            common_elements.append(l1[index])\n    return common_elements\n",
        "num_ids": 65
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1_len = len(l1)\n    l2_len = len(l2)\n    l3_len = len(l3)\n    \n    if l1_len!= l2_len or l1_len!= l3_len:\n        return []\n    \n    # As the lists are sorted, use a set for each list\n    set_1 = set(l1)\n    set_2 = set(l2)\n    set_3 = set(l3)\n",
        "num_ids": 119
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l = [l1[i] for i in range(len(l1)) if l1[i] in l2 and l1[i] in l3]\n    return l\n",
        "num_ids": 45
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    inter = [a for a, b in zip(l1, l2) if a == b]\n    inter.extend([a for a, b in zip(l1, l3) if a == b])\n    inter.extend([a for a, b in zip(l2, l3) if a == b])\n    return list(set(inter))\n",
        "num_ids": 87
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    if l1 is None or l2 is None or l3 is None:\n        return None\n    if len(l1)!= len(l2) or len(l1)!= len(l3):\n        return None\n    index_dict = {}\n    for i in l1:\n        if i not in index_dict:\n            index_dict[i] = 1\n        else:\n            index_dict[i] += 1\n    for i in l2:\n        if i not in index_dict:\n            index_dict[i] = 1\n        else:\n            index_dict[i] += 1\n    for i in l3:\n        if i not in index_dict:\n            index_dict[i] = 1\n        else:\n            index_dict[i] += 1\n    result = []\n    for i in index_dict:\n        if index_dict[i] == len(l1) and index_dict[i] == len(l2) and index_dict[i] == len(l3):\n            result.append(i)\n    return result\n",
        "num_ids": 254
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            index_list.append(l1[i])\n    return index_list\n",
        "num_ids": 62
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l4 = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            l4.append(l1[i])\n    return l4\n",
        "num_ids": 59
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    if not isinstance(l1, list):\n        return []\n    if not isinstance(l2, list):\n        return []\n    if not isinstance(l3, list):\n        return []\n    i = 0\n    j = 0\n    k = 0\n    result = []\n    while i < len(l1) and j < len(l2) and k < len(l3):\n        if l1[i] == l2[j] and l1[i] == l3[k]:\n            result.append(l1[i])\n            i += 1\n            j += 1\n            k += 1\n        else:\n            if l1[i] < l2[j] and l1[i] < l3[k]:\n                i += 1\n            elif l2[j] < l1[i] and l2[j] < l3[k]:\n                j += 1\n            elif l3[k] < l1[i] and l3[k] < l2[j]:\n                k += 1\n            else:\n                result.append(l1[i])\n                i += 1\n                j += 1\n                k += 1\n    return result\n",
        "num_ids": 281
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        numbers.sort()\n        return numbers[1]\n",
        "num_ids": 35
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = second_smallest_helper(numbers, float('inf'))\n    return second_smallest_helper(numbers, smallest)\n",
        "num_ids": 39
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if not numbers:\n        return None\n    numbers = sorted(numbers)\n    return numbers[1]\n",
        "num_ids": 29
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 2:\n        return sorted(numbers)[1]\n    elif len(numbers) == 1:\n        return None\n    elif len(numbers) > 2:\n        return sorted(numbers)[-2]\n",
        "num_ids": 62
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers = list(set(numbers))\n    if len(numbers) < 2:\n        return None\n    numbers.sort()\n    return numbers[1]\n",
        "num_ids": 43
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n",
        "num_ids": 16
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    if len(numbers) == 2:\n        return numbers[0]\n    mins = [float('inf')]\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < min(mins):\n            mins.remove(min(mins))\n            mins.append(num)\n            second_smallest = min(mins)\n    return second_smallest\n",
        "num_ids": 108
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # return sorted(numbers)[1]\n    return sorted(numbers)[-2]\n    \nprint(second_smallest([3, 2, 1]))\nprint(second_smallest([1, 2, 3, 4, 5]))\nprint(second_smallest([1, 3, 5, 2, 4]))\nprint(second_smallest([1, 2, 3, 4])",
        "num_ids": 94
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    #if len(numbers) < 2:\n    #    return\n    #elif len(numbers) == 2:\n    #    return min(numbers)\n    #elif len(numbers) == 3:\n    #    return\n    #else:\n    #    return min(numbers)\n    #return min(numbers)\n    #return sorted(numbers)[1]\n    return sorted(numbers)[-2]\n",
        "num_ids": 106
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match_object = re.match(r'^a[ab]+$', text)\n    if match_object:\n        return True\n    else:\n        return False\n",
        "num_ids": 42
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'a+b',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_zero_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-4.php\n    '''\n    match = re.search(r'a*b',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_one_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-5.php\n    '''\n    match = re.search(r'a+b',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_one_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-6.php\n    '''\n    match = re.search(r'a+b',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_not_followed_by(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything but an 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-7.php\n    '''\n    match = re.search(r'a[^b]',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_not_preceded_by(text):\n    '''\n    Write a function that matches a string that has an 'a' preceded by anything but an 'a'. https://www.w3resource.com/python-exercises/re/python-re-exercise-8.php\n    '''\n    match = re.search(r'a[^a]',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_at_start(text):\n    '''\n    Write a function that matches a string that has an 'a' at the start of the string. https://www.w3resource.com/python-exercises/re/python-re-exercise-9.php\n    '''\n    match = re.search(r'^a',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_at_end(text):\n    '''\n    Write a function that matches a string that has an 'a' at the end of the string. https://www.w3resource.com/python-exercises/re/python-re-exercise-10.php\n    '''\n    match = re.search(r'a$',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything but an 'a'. https://www.w3resource.com/python-exercises/re/python-re-exercise-11.php\n    '''\n    match = re.search(r'a+',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_zero_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything but an 'a'. https://www.w3resource.com/python-exercises/re/python-re-exercise-12.php\n    '''\n    match = re.search(r'a*',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_one_or_more_or_equal(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything but an 'a', followed by anything but an 'a', followed by anything but an 'a', followed by anything but an 'a'. https://www.w3resource.com/python-exercises/re/python-re-exercise-13.php\n    '''\n    match = re.search(r'a+?',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_zero_or_more_or_equal(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything but an 'a', followed by anything but an 'a', followed by anything but an 'a', followed by anything but an 'a'. https://www.w3resource.com/python-exercises/re/python-re-exercise-14.php\n    '''\n    match = re.search(r'a*?',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_choice(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything but an 'a', followed by anything but an 'a', followed by anything but an 'a', followed by anything but an 'a', followed by anything but an 'a'. https://www.w3resource.com/python-exercises/re/python-re-exercise-15.php\n    '''\n    match = re.search(r'a.+?',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_zero_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything but an 'a', followed by anything but an 'a', followed by anything but an 'a', followed by anything but an 'a', followed by anything but an 'a'. https://www.w3resource.com/python-exercises/re/python-re-exercise-16.php\n    '''\n    match = re.search(r'a.+?',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_one_or_more_occurance(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything but an 'a', followed by anything but an 'a', followed by anything but an 'a', followed by anything but an 'a', followed by anything but an 'a'. https://www.w3resource.com/python-exercises/re/python-re-exercise-17.php\n    '''\n    match = re.search(r'a.+?',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_zero_or_one_occurance(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything but an 'a', followed by anything but an 'a', followed by anything but an 'a', followed by anything but an 'a', followed by anything but an 'a'. https://www.w3resource.com/python-exercises/re/python-re-exercise-18.php\n    '''\n    match = re.search(r'a.+?',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_any_occurance(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything but an 'a', followed by anything but an 'a', followed by anything but an 'a', followed by anything but an 'a', followed by anything but an 'a'. https://www.w3resource.com/python-exercises/re/python-re-exercise-19.php\n    '''\n    match = re.search(r'a.+?',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_any_occurance_but_not_first(text):\n    '''\n    Write a function tha",
        "num_ids": 7
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.+b')\n    if re.match(pattern, text):\n        print('Successfully matched')\n    else:\n        print('Not matched')\n",
        "num_ids": 48
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search(r'a.+b',text)\n    return result\n",
        "num_ids": 23
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    p = re.compile(r'ab+')\n    if p.search(text):\n        return \"Match found\"\n    else:\n        return \"Match not found\"\n",
        "num_ids": 44
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"a+b\")\n    if pattern.search(text):\n        print(\"match found\")\n    else:\n        print(\"match not found\")\n",
        "num_ids": 45
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search('a.*?b', text)\n    if match:\n        print match.group()\n    else:\n        print None\n",
        "num_ids": 37
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    regex = re.compile(r'ab+')\n    matches = re.match(regex, text)\n    if matches:\n        return True\n    else:\n        return False\n",
        "num_ids": 48
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Your Code Here\n    \n",
        "num_ids": 10
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    if len(test_list)==0:\n        return 0\n",
        "num_ids": 18
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(0, len(test_list) - 1):\n        if test_list[i] == test_list[len(test_list) - 1 - i]:\n            count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pairs = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                pairs += 1\n    return pairs\n",
        "num_ids": 71
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    # this is a naive solution\n    # for each element in the list, we need to compare the reverse of the element with the element\n    # this is O(n^2) complexity\n    # O(n*n) solution, which is better than this\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n",
        "num_ids": 126
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    dict = {}\n    for i in range(len(test_list)):\n        str = test_list[i]\n        str_rev = str[::-1]\n        if str_rev in dict:\n            dict[str_rev] += 1\n        else:\n            dict[str_rev] = 1\n    return dict\n",
        "num_ids": 80
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_dict = {}\n    for string in test_list:\n        reverse_string = string[::-1]\n        if reverse_string in reverse_dict:\n            reverse_dict[reverse_string] += 1\n        else:\n            reverse_dict[reverse_string] = 1\n    result = 0\n    for string, count in reverse_dict.iteritems():\n        if count > 1:\n            result += int(count*(count-1) / 2)\n    return result\n",
        "num_ids": 115
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # test_list = ['AAC', 'ABC', 'AAA', 'ACA', 'GAT', 'ACG', 'ACT', 'ATG', 'ACC', 'GAA']\n    count = 0\n    for i in xrange(len(test_list)):\n        for j in xrange(len(test_list)):\n            if test_list[j][::-1] == test_list[i] and i!= j:\n                count += 1\n",
        "num_ids": 110
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pair_count = 0\n    # test_list = [\"gabc\", \"bacg\", \"abcg\", \"cgab\", \"agbc\", \"bacg\", \"abcg\"]\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                pair_count += 1\n    return pair_count\n",
        "num_ids": 108
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result = {}\n    for i in list1:\n        result[tuple(i)] = list1.count(i)\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    results = {}\n    for i in list1:\n        if isinstance(i, list):\n            results.setdefault(tuple(i), 0)\n            results[tuple(i)] += 1\n    return results\n",
        "num_ids": 54
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_list = []\n    for item in list1:\n        if item not in unique_list:\n            unique_list.append(item)\n",
        "num_ids": 37
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list_count = {}\n    for i in list1:\n        t = tuple(i)\n        if t in list_count:\n            list_count[t] += 1\n        else:\n            list_count[t] = 1\n    return list_count\n",
        "num_ids": 64
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dic = {}\n    for item in list1:\n        if tuple(item) not in dic:\n            dic[tuple(item)] = 1\n        else:\n            dic[tuple(item)] += 1\n    return dic\n",
        "num_ids": 61
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result = {}\n    for x in list1:\n        if isinstance(x,list):\n            for y in x:\n                if isinstance(y,list):\n                    key = tuple(y)\n                    if key in result:\n                        result[key] += 1\n                    else:\n                        result[key] = 1\n        else:\n            if x in result:\n                result[x] += 1\n            else:\n                result[x] = 1\n    return result\n",
        "num_ids": 112
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = []\n    for i in range(len(list1)):\n        for j in range(i,len(list1)):\n            sublists.append(tuple(list1[i:j+1]))\n    return dict(collections.Counter(sublists))\n",
        "num_ids": 69
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict_of_lists = {}\n    for i in list1:\n        if i not in dict_of_lists.keys():\n            dict_of_lists[i] = [list1.count(i)]\n        else:\n            dict_of_lists[i].append(list1.count(i))\n    return dict_of_lists\n",
        "num_ids": 83
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result = {}\n    for i in range(len(list1)):\n        item = tuple(list1[i])\n        if item in result:\n            result[item] += 1\n        else:\n            result[item] = 1\n    return result\n",
        "num_ids": 62
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    output_dict = {}\n    for sub_list in list1:\n        new_sub_list = tuple(sub_list)\n        if new_sub_list in output_dict.keys():\n            output_dict[new_sub_list] += 1\n        else:\n            output_dict[new_sub_list] = 1\n",
        "num_ids": 80
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return re.match(r'^[0-9]{1,2}(\\.[0-9]{1,2})$', num) is not None\n",
        "num_ids": 40
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return len(num) == 5 and num[-1] == '.' and num[-2] == '.' and num.count('.') == 1 and num.count('e') == 0 and 'e' not in num[:-1] and 'E' not in num[:-1] and all(map(lambda x: ord(x) >= 48 and ord(x) <= 57, num[:-1]))\n",
        "num_ids": 97
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return len(num) <= 3 and num.count('.') <= 1 and len(num) == num.index('.') + 1 and float(num) == float(num.replace('.','',1))\n",
        "num_ids": 51
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    \n    for c in num:\n        if c not in '0123456789.+-':\n            return False\n    \n    return True\n    \ndef parse_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    \n    if num[0] == '.':\n        return False\n    \n    for c in num:\n        if c not in '0123456789':\n            return False\n    \n    return True\n    \ndef is_palindrome(num):\n    '''\n    Write a function to check whether a number is a palindrome.\n    '''\n    \n    if type(num) is not int:\n        return False\n    \n    if num < 0:\n        return False\n    \n    return str(num) == str(num)[::-1]\n    \ndef is_pandigital(num):\n    '''\n    Write a function to check whether a number is a pandigital number. A pandigital number is a number that \n    has all the digits 1 to n in some order, for example, 123456789.\n    '''\n    \n    num_str = str(num)\n    digits = [str(i) for i in range(1, 10)]\n    \n    return set(num_str) == set(digits)\n    \ndef is_pandigital_multiple(num):\n    '''\n    Write a function to check whether a number is a pandigital multiple. A pandigital multiple is a number \n    that is the concatenation of at least one pair of consecutive digits in some order. For example, the \n    pandigital multiples of 45 are: 345, 234, 132, 111, 66, 6, 45, 3, and 0.\n    '''\n    \n    num_str = str(num)\n    digits = [str(i) for i in range(1, 10)]\n    \n    for i in range(len(digits) - 2):\n        if set(digits[i:i+2]) == set(num_str):\n            return True\n    \n    return False\n    \ndef is_super_pandigital(num):\n    '''\n    Write a function to check whether a number is a super pandigital number. A super pandigital number is a \n    number that is the concatenation of all the digits, with the digits in ascending order, except for \n    the leading zero. For example, the super pandigital numbers are: 123456789, 1235897, 1234567, \n    123456789,...\n    '''\n    \n    num_str = str(num)\n    digits = [str(i) for i in range(1, 10)]\n    \n    for i in range(len(digits)):\n        if not is_pandigital(num_str):\n            return False\n        \n        num_str = str(num)\n        num_str = num_str[1:]\n    \n    return True\n    \ndef is_super_pandigital_multiple(num):\n    '''\n    Write a function to check whether a number is a super pandigital multiple. A super pandigital multiple is \n    a number that is the concatenation of all the digits, with the digits in ascending order, except for \n    the leading zero. For example, the super pandigital multiples of 45 are: 345, 234, 132, 111, 66, 6, \n    45, 3, and 0.\n    '''\n    \n    num_str = str(num)\n    digits = [str(i) for i in range(1, 10)]\n    \n    for i in range(len(digits) - 2):\n        if not is_pandigital_multiple(num_str):\n            return False\n        \n        num_str = str(num)\n        num_str = num_str[1:]\n    \n    return True\n    \ndef is_super_perfect(num):\n    '''\n    Write a function to check whether a number is a super perfect number. A super perfect number is a perfect \n    number whose sum of the proper divisors is exactly equal to the number. For example, the super perfect \n    numbers are 6, 28, 496, 8128, and 33550336.\n    '''\n    \n    if num < 0:\n        return False\n    \n    num_str = str(num)\n    digits = [str(i) for i in range(1, 10)]\n    \n    proper_divisors = {1: 1, 2: 2, 3: 3}\n    \n    for i in range(2, int(len(num_str) / 2) + 1):\n        if len(num_str) % i == 0:\n            proper_divisors[i] = int(num_str[:len(num_str) / i])\n    \n    num_sum = 0\n    for d in proper_divisors.values():\n        num_sum += d\n    \n    if num_sum == num:\n        return True\n    \n    return False\n    \ndef is_super_perfect_multiple(num):\n    '''\n    Write a function to check whether a number is a super perfect multiple. A super perfect multiple is a \n    perfect number whose sum of the proper divisors is exactly equal to the number. For example, the \n    super perfect multiples of 45 are: 345, 234, 132, 111, 66, 6, 45, 3, and 0.\n    '''\n    \n    num_str = str(num)\n    digits = [str(i) for i in range(1, 10)]\n    \n    proper_divisors = {1: 1, 2: 2, 3: 3}\n    \n    for i in range(2, int(len(num_str) / 2) + 1):\n        if len(num_str) % i == 0:\n            proper_divisors[i] = int(num_str[:len(num_str) / i])\n    \n    num_sum = 0\n    for d in proper_divisors.values():\n        num_sum += d\n    \n    if num_sum == num:\n        return True\n    \n    return False\n    \ndef is_super_abundant(num):\n    '''\n    Write a function to check whether a number is a super abundant number. A super abundant number is a number \n    whose sum of the proper divisors is greater than the number. For example, the super abundant numbers are \n    12, 120, 2880, and 765241.\n    '''\n    \n    if num < 0:\n        return False\n    \n    num_str = str(num)\n    digits = [str(i) for i in range(1, 10)]\n    \n    proper_divisors = {1: 1, 2: 2, 3: 3}\n    \n    for i in range(2, int(len(num_str) / 2) + 1):\n        if len(num_str) % i == 0:\n            proper_divisors[i] = int(num_str[:len(num_str) / i])\n    \n    num_sum = 0\n    for d in proper_divisors.values():\n        num_sum += d\n    \n    if num_sum > num:\n        return True\n    \n    return False\n    \ndef is_super_abundant_multiple(num):\n    '''\n    Write a function to check whether a number is a super abundant multiple. A super abundant multiple is a \n    number whose sum of the proper divisors is greater than the number. For example, the super abundant \n    multiples of 45 are: 345, 234, 132, 111, 66, 6, 45, 3, and 0.\n    '''\n    \n    num_str = str(num)\n    digits = [str(i) for i in range(1, 10)]\n    \n    proper_divisors = {1: 1, 2: 2, 3: 3}\n    \n    for i in range(2, int(len(num_str) / 2) + 1):\n        if len(num_str) % i == 0:\n            proper_divisors[i] = int(num_str[:len(num_str) / i])\n    \n    num_sum = 0\n    for d in proper_divisors.values():\n        num_sum += d\n    \n    if num_sum > num:\n    ",
        "num_ids": 165
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return re.match(r'\\d{1,}\\.\\d{1,}', num)!= None\n",
        "num_ids": 29
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return len(str(int(num))) == len(num) and '.' in num and str(int(num)) == num\n",
        "num_ids": 32
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num_list = num.split('.')\n    if len(num_list) == 2 and len(num_list[1]) < 2:\n        return True\n    return False\n",
        "num_ids": 45
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.find('.')!= -1:\n        num = num.rstrip('0')\n        return num.endswith('.0')\n    return False\n",
        "num_ids": 42
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # If the string is a decimal number, with a precision of 2, return true\n    return '.' in num\n",
        "num_ids": 28
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    i=0\n    while i<len(arr):\n        if arr.count(arr[i])>1:\n            return False\n        i+=1\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    i=0\n    while i<len(arr):\n        k=i+1\n        while k<len(arr):\n            if arr[i]==arr[k]:\n                del arr[k]\n                break\n            k+=1\n        i+=1\n    return len(arr)\n",
        "num_ids": 71
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr = [int(i) for i in arr]\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False\n    \n    \ndef binarySearch(arr, searchValue):\n    '''\n    Write a python function to search a value in a sorted array\n    '''\n    arr = sorted(arr)\n    low = 0\n    high = len(arr) - 1\n    mid = 0\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == searchValue:\n            return mid\n        elif arr[mid] < searchValue:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n    \ndef find_min_max(arr):\n    '''\n    Write a python function to find the minimum and maximum element in an array\n    '''\n    if len(arr) == 0:\n        return -1\n    arr = [int(i) for i in arr]\n    return [min(arr), max(arr)]\n    \ndef palindrome(arr):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    arr = str(arr)\n    if len(arr) == 0:\n        return True\n    \n    if arr[0] == arr[-1]:\n        return palindrome(arr[1:-1])\n    else:\n        return False\n    \n    \ndef count_odd_even(arr):\n    '''\n    Write a python function to count odd and even elements in an array.\n    '''\n    if len(arr) == 0:\n        return [0,0]\n    \n    odd = even = 0\n    arr = [int(i) for i in arr]\n    for i in arr:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return [odd, even]\n    \n    \ndef find_min(arr):\n    '''\n    Write a python function to find the minimum element in a sorted array\n    '''\n    arr = [int(i) for i in arr]\n    if len(arr) == 0:\n        return -1\n    \n    return min(arr)\n    \n    \ndef find_max(arr):\n    '''\n    Write a python function to find the maximum element in a sorted array\n    '''\n    arr = [int(i) for i in arr]\n    if len(arr) == 0:\n        return -1\n    \n    return max(arr)\n    \n    \ndef check_prime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n    \n    \ndef count_rotated_array(arr):\n    '''\n    Write a python function to find the index of the array element that is closest to the given value.\n    '''\n    if len(arr) == 0:\n        return -1\n    \n    arr = [int(i) for i in arr]\n    low = 0\n    high = len(arr) - 1\n    mid = 0\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == arr[mid + 1]:\n            low = mid + 1\n        elif arr[mid] < arr[mid + 1]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return mid\n    \n    \ndef first_occurence(arr):\n    '''\n    Write a python function to find the index of the first occurence of an element in a sorted array\n    '''\n    arr = [int(i) for i in arr]\n    if len(arr) == 0:\n        return -1\n    \n    low = 0\n    high = len(arr) - 1\n    mid = 0\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == arr[mid - 1] and mid!= 0:\n            low = mid + 1\n        elif arr[mid] < arr[mid - 1]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return mid\n    \n    \ndef find_missing_element(arr, index):\n    '''\n    Write a python function to find the missing element in an array if the array is sorted\n    '''\n    if len(arr) == 0:\n        return -1\n    \n    arr = [int(i) for i in arr]\n    low = 0\n    high = len(arr) - 1\n    mid = 0\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == arr[mid - 1] and mid!= 0:\n            low = mid + 1\n        elif arr[mid] < arr[mid - 1]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    if arr[mid]!= arr[index]:\n        return arr[mid]\n    else:\n        return arr[index]\n    \n    \ndef get_position(arr, val):\n    '''\n    Write a python function to find the index of the first occurence of an element in a sorted array.\n    '''\n    arr = [int(i) for i in arr]\n    if len(arr) == 0:\n        return -1\n    \n    low = 0\n    high = len(arr) - 1\n    mid = 0\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == val:\n            return mid\n        elif arr[mid] < val:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n    \n    \ndef remove_duplicates(arr):\n    '''\n    Write a python function to remove duplicates from an array and sort the array.\n    '''\n    arr = [int(i) for i in arr]\n    if len(arr) == 0:\n        return -1\n    \n    low = 0\n    high = len(arr) - 1\n    mid = 0\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == arr[mid + 1]:\n            arr.pop(mid + 1)\n            high -= 1\n        elif arr[mid] < arr[mid + 1]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return arr\n    \n    \ndef has_duplicates(arr):\n    '''\n    Write a python function to check whether an array contains duplicate elements or not.\n    '''\n    arr = [int(i) for i in arr]\n    if len(arr) == 0:\n        return False\n    \n    arr = sorted(arr)\n    low = 0\n    high = len(arr) - 1\n    mid = 0\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == arr[mid - 1] and mid!= 0:\n            low = mid + 1\n        elif arr[mid] < arr[mid - 1]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    if high < len(arr) - 1:\n        return True\n    else:\n        return False\n    \n    \ndef reverse_array(arr):\n    '''\n    Write a python function to reverse an array\n    '''\n    arr = [int(i) for i in arr]\n    if len(arr) == 0:\n        return -1\n    \n    for i in range(0, len(arr) // 2):\n        arr[i], arr[len(arr) - i - 1] = arr[len(arr) - i - 1], arr[i]\n    return arr\n    \n    \ndef find_largest_prime_factor(num):\n    '''\n    Write a python function to find the largest prime factor of a number.\n    '''\n    num = int(num)\n    if num <= 0:\n        return -1\n    \n    while num % 2 == 0:\n        num //= 2\n    return num\n    \n    \ndef find_smallest_prime_factor(num):\n    '''\n    Writ",
        "num_ids": 4
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    if len(arr) == 0:\n        return True\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return True\n        else:\n            return False\n    else:\n        for i in range(0,len(arr)-1):\n            if arr[i] == arr[i+1]:\n                return False\n    return True\n",
        "num_ids": 105
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(arr) == len(set(arr))\n",
        "num_ids": 16
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr = list(arr)\n    if len(arr) == len(set(arr)):\n        print \"Elements of this list are all distinct\"\n    else:\n        print \"Elements of this list are not all distinct\"\n",
        "num_ids": 56
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    s = set()\n    for ele in arr:\n        if ele not in s:\n            s.add(ele)\n        else:\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr = list(set(arr))\n    if len(arr) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    x = set(arr)\n    if len(x) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)==0:\n        return 1\n    elif len(arr)==1:\n        return 2\n    else:\n        if arr[0]==arr[1]:\n            return unique_Element(arr[1:])\n        else:\n            return 3\n",
        "num_ids": 67
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 >= 1 and monthnum3 <= 12:\n        return True\n    else:\n        return False\n",
        "num_ids": 29
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        print \"The month is a leap month\"\n    else:\n        print \"The month is not a leap month\"\n",
        "num_ids": 56
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 > 0 and monthnum3 < 13:\n        return True\n    else:\n        return False\n",
        "num_ids": 29
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 > 1 and monthnum3 < 13:\n        return True\n    else:\n        return False\ndef check_daynumber_number(daynum4):\n    '''\n    Write a function to check whether the given day number contains 31 days or not. Days are given as number from 1 to 31.\n    '''\n    if daynum4 > 1 and daynum4 < 32:\n        return True\n    else:\n        return False\ndef check_leapyear(leapyear):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if leapyear % 400 == 0 or (leapyear % 4 == 0 and leapyear % 100!= 0):\n        return True\n    else:\n        return False\ndef number_day(year,month,day):\n    '''\n    Write a function to calculate the number of days in the given month.\n    '''\n    if check_daynumber_number(day) == False:\n        return False\n    elif check_monthnumber_number(month) == False:\n        return False\n    elif check_leapyear(year) == False:\n        return False\n    elif day == 30 and (month == 4 or month == 6 or month == 9 or month == 11):\n        return False\n    else:\n        return True\ndef calculate_date(year,month,day):\n    '''\n    Write a function to calculate the number of days between two dates.\n    '''\n    if check_leapyear(year) == True:\n        if day == 31 and month == 2:\n            return 29\n        else:\n            return 31\n    else:\n        if day == 31 and month == 2:\n            return 28\n        else:\n            return 30\ndef check_date(date1,date2):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    if date1 == date2:\n        return True\n    elif date1 > date2:\n        return False\n    else:\n        return True\ndef number_day_new(year,month,day):\n    '''\n    Write a function to calculate the number of days in the given month.\n    '''\n    if check_daynumber_number(day) == False:\n        return False\n    elif check_monthnumber_number(month) == False:\n        return False\n    elif check_leapyear(year) == False:\n        return False\n    elif day == 30 and (month == 4 or month == 6 or month == 9 or month == 11):\n        return False\n    else:\n        return True\ndef calculate_date_new(year,month,day):\n    '''\n    Write a function to calculate the number of days between two dates.\n    '''\n    if check_leapyear(year) == True:\n        if day == 31 and (month == 4 or month == 6 or month == 9 or month == 11):\n            return 29\n        else:\n            return 31\n    else:\n        if day == 31 and (month == 4 or month == 6 or month == 9 or month == 11):\n            return 28\n        else:\n            return 30\ndef check_date_new(date1,date2):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    if date1 == date2:\n        return True\n    elif date1 > date2:\n        return False\n    else:\n        return True\ndef main():\n    year = int(input('Enter the year: '))\n    month = int(input('Enter the month: '))\n    day = int(input('Enter the day: '))\n    date1 = date(year,month,day)\n    year2 = int(input('Enter the year: '))\n    month2 = int(input('Enter the month: '))\n    day2 = int(input('Enter the day: '))\n    date2 = date(year2,month2,day2)\n    print(check_date(date1,date2))\n    print(number_day(year,month,day))\n    print(calculate_date(year,month,day))\n    print(check_date_new(date1,date2))\n    print(number_day_new(year,month,day))\n    print(calculate_date_new(year,month,day))\nif __name__ == '__main__':\n    main()\n",
        "num_ids": 266
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in (1, 3, 5, 7, 8, 10, 12):\n        return True\n    else:\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1:\n        return True\n    elif monthnum3 == 2:\n        return True\n    elif monthnum3 == 3:\n        return True\n    elif monthnum3 == 4:\n        return True\n    elif monthnum3 == 5:\n        return True\n    elif monthnum3 == 6:\n        return True\n    elif monthnum3 == 7:\n        return True\n    elif monthnum3 == 8:\n        return True\n    elif monthnum3 == 9:\n        return True\n    elif monthnum3 == 10:\n        return True\n    elif monthnum3 == 11:\n        return True\n    elif monthnum3 == 12:\n        return True\n    else:\n        return False\ndef check_monthname_number(monthname3):\n    '''\n    Write a function to check whether the given month name contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthname3 == \"January\":\n        return True\n    elif monthname3 == \"February\":\n        return True\n    elif monthname3 == \"March\":\n        return True\n    elif monthname3 == \"April\":\n        return True\n    elif monthname3 == \"May\":\n        return True\n    elif monthname3 == \"June\":\n        return True\n    elif monthname3 == \"July\":\n        return True\n    elif monthname3 == \"August\":\n        return True\n    elif monthname3 == \"September\":\n        return True\n    elif monthname3 == \"October\":\n        return True\n    elif monthname3 == \"November\":\n        return True\n    elif monthname3 == \"December\":\n        return True\n    else:\n        return False\ndef check_monthname_number_dict(monthname3):\n    '''\n    Write a function to check whether the given month name contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthname3 == \"January\":\n        return True\n    elif monthname3 == \"February\":\n        return True\n    elif monthname3 == \"March\":\n        return True\n    elif monthname3 == \"April\":\n        return True\n    elif monthname3 == \"May\":\n        return True\n    elif monthname3 == \"June\":\n        return True\n    elif monthname3 == \"July\":\n        return True\n    elif monthname3 == \"August\":\n        return True\n    elif monthname3 == \"September\":\n        return True\n    elif monthname3 == \"October\":\n        return True\n    elif monthname3 == \"November\":\n        return True\n    elif monthname3 == \"December\":\n        return True\n    else:\n        return False\ndef check_monthname_number_list(monthname3):\n    '''\n    Write a function to check whether the given month name contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthname3 == \"January\":\n        return True\n    elif monthname3 == \"February\":\n        return True\n    elif monthname3 == \"March\":\n        return True\n    elif monthname3 == \"April\":\n        return True\n    elif monthname3 == \"May\":\n        return True\n    elif monthname3 == \"June\":\n        return True\n    elif monthname3 == \"July\":\n        return True\n    elif monthname3 == \"August\":\n        return True\n    elif monthname3 == \"September\":\n        return True\n    elif monthname3 == \"October\":\n        return True\n    elif monthname3 == \"November\":\n        return True\n    elif monthname3 == \"December\":\n        return True\n    else:\n        return False\ndef check_monthname_number_tuple(monthname3):\n    '''\n    Write a function to check whether the given month name contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthname3 == \"January\":\n        return True\n    elif monthname3 == \"February\":\n        return True\n    elif monthname3 == \"March\":\n        return True\n    elif monthname3 == \"April\":\n        return True\n    elif monthname3 == \"May\":\n        return True\n    elif monthname3 == \"June\":\n        return True\n    elif monthname3 == \"July\":\n        return True\n    elif monthname3 == \"August\":\n        return True\n    elif monthname3 == \"September\":\n        return True\n    elif monthname3 == \"October\":\n        return True\n    elif monthname3 == \"November\":\n        return True\n    elif monthname3 == \"December\":\n        return True\n    else:\n        return False\ndef check_monthname_number_set(monthname3):\n    '''\n    Write a function to check whether the given month name contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthname3 == \"January\":\n        return True\n    elif monthname3 == \"February\":\n        return True\n    elif monthname3 == \"March\":\n        return True\n    elif monthname3 == \"April\":\n        return True\n    elif monthname3 == \"May\":\n        return True\n    elif monthname3 == \"June\":\n        return True\n    elif monthname3 == \"July\":\n        return True\n    elif monthname3 == \"August\":\n        return True\n    elif monthname3 == \"September\":\n        return True\n    elif monthname3 == \"October\":\n        return True\n    elif monthname3 == \"November\":\n        return True\n    elif monthname3 == \"December\":\n        return True\n    else:\n        return False\ndef check_monthname_number_string(monthname3):\n    '''\n    Write a function to check whether the given month name contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthname3 == \"January\":\n        return True\n    elif monthname3 == \"February\":\n        return True\n    elif monthname3 == \"March\":\n        return True\n    elif monthname3 == \"April\":\n        return True\n    elif monthname3 == \"May\":\n        return True\n    elif monthname3 == \"June\":\n        return True\n    elif monthname3 == \"July\":\n        return True\n    elif monthname3 == \"August\":\n        return True\n    elif monthname3 == \"September\":\n        return True\n    elif monthname3 == \"October\":\n        return True\n    elif monthname3 == \"November\":\n        return True\n    elif monthname3 == \"December\":\n        return True\n    else:\n        return False\n",
        "num_ids": 189
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    if monthnum3 == 12:\n        print('Month number', monthnum3, 'is December so it has 30 days.')\n    elif monthnum3 == 1:\n        print('Month number', monthnum3, 'is January so it has 31 days.')\n    elif monthnum3 == 2:\n        print('Month number', monthnum3, 'is February so it has 28 days.')\n    elif monthnum3 == 3:\n        print('Month number', monthnum3, 'is March so it has 31 days.')\n    elif monthnum3 == 4:\n        print('Month number', monthnum3, 'is April so it has 30 days.')\n    elif monthnum3 == 5:\n        print('Month number', monthnum3, 'is May so it has 31 days.')\n    elif monthnum3 == 6:\n        print('Month number', monthnum3, 'is June so it has 30 days.')\n    elif monthnum3 == 7:\n        print('Month number', monthnum3, 'is July so it has 31 days.')\n    elif monthnum3 == 8:\n        print('Month number', monthnum3, 'is August so it has 30 days.')\n    elif monthnum3 == 9:\n        print('Month number', monthnum3, 'is September so it has 31 days.')\n    elif monthnum3 == 10:\n        print('Month number', monthnum3, 'is October so it has 30 days.')\n    elif monthnum3 == 11:\n        print('Month number', monthnum3, 'is November so it has 30 days.')\n    else:\n        print('Month number', monthnum3, 'is December so it has 30 days.')\n",
        "num_ids": 400
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n    else:\n        if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n            return True\n        else:\n            return False\ndef check_leapyear(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef check_perfectnum(num):\n    '''\n    Write a function to check whether the given number is a perfect number or not.\n    '''\n    summ = 0\n    for i in range(1,num):\n        if num % i == 0:\n            summ += i\n    if summ == num:\n        return True\n    else:\n        return False\ndef check_armstrongnum(num):\n    '''\n    Write a function to check whether the given number is an Armstrong number or not.\n    '''\n    armstrnum = 0\n    n = num\n    while n > 0:\n        digit = n % 10\n        armstrnum += digit ** 3\n        n //= 10\n    if num == armstrnum:\n        return True\n    else:\n        return False\ndef check_fibonacci(num):\n    '''\n    Write a function to check whether the given number is Fibonacci number or not.\n    '''\n    fibarr = [0,1]\n    for i in range(2,num):\n        fibarr.append(fibarr[i-1] + fibarr[i-2])\n    if num == fibarr[-1]:\n        return True\n    else:\n        return False\ndef check_palindromenum(num):\n    '''\n    Write a function to check whether the given number is a palindromic number or not.\n    '''\n    n = num\n    revnum = 0\n    while n > 0:\n        digit = n % 10\n        revnum = revnum * 10 + digit\n        n //= 10\n    if num == revnum:\n        return True\n    else:\n        return False\ndef check_perfectnum_sumdivisor(num):\n    '''\n    Write a function to check whether the given number is a perfect number or not.\n    '''\n    summ = 0\n    for i in range(1,num):\n        if num % i == 0:\n            summ += i\n    if summ == num:\n        return True\n    else:\n        return False\ndef check_perfectnum_sum_digits(num):\n    '''\n    Write a function to check whether the given number is a perfect number or not.\n    '''\n    summ = 0\n    for i in range(1,num):\n        if num % i == 0:\n            summ += i\n    if summ == num:\n        return True\n    else:\n        return False\ndef check_perfectnum_sum_digits_factors(num):\n    '''\n    Write a function to check whether the given number is a perfect number or not.\n    '''\n    factorarr = []\n    for i in range(1,num):\n        if num % i == 0:\n            factorarr.append(i)\n    summ = 0\n    for i in factorarr:\n        summ += i\n    if summ == num:\n        return True\n    else:\n        return False\ndef check_perfectnum_sum_digits_factors_digits(num):\n    '''\n    Write a function to check whether the given number is a perfect number or not.\n    '''\n    factorarr = []\n    for i in range(1,num):\n        if num % i == 0:\n            factorarr.append(i)\n    summ = 0\n    for i in factorarr:\n        summ += i\n    if summ == num:\n        return True\n    else:\n        return False\ndef check_perfectnum_sum_digits_factors_digits_factors(num):\n    '''\n    Write a function to check whether the given number is a perfect number or not.\n    '''\n    factorarr = []\n    for i in range(1,num):\n        if num % i == 0:\n            factorarr.append(i)\n    summ = 0\n    for i in factorarr:\n        summ += i\n    if summ == num:\n        return True\n    else:\n        return False\ndef check_perfectnum_sum_digits_factors_digits_factors_digits(num):\n    '''\n    Write a function to check whether the given number is a perfect number or not.\n    '''\n    factorarr = []\n    for i in range(1,num):\n        if num % i == 0:\n            factorarr.append(i)\n    summ = 0\n    for i in factorarr:\n        summ += i\n    if summ == num:\n        return True\n    else:\n        return False\ndef check_perfectnum_sum_digits_factors_digits_factors_digits_factors(num):\n    '''\n    Write a function to check whether the given number is a perfect number or not.\n    '''\n    factorarr = []\n    for i in range(1,num):\n        if num % i == 0:\n            factorarr.append(i)\n    summ = 0\n    for i in factorarr:\n        summ += i\n    if summ == num:\n        return True\n    else:\n        return False\ndef check_perfectnum_sum_digits_factors_digits_factors_digits_factors_factors(num):\n    '''\n    Write a function to check whether the given number is a perfect number or not.\n    '''\n    factorarr = []\n    for i in range(1,num):\n        if num % i == 0:\n            factorarr.append(i)\n    summ = 0\n    for i in factorarr:\n        summ += i\n    if summ == num:\n        return True\n    else:\n        return False\ndef check_perfectnum_sum_digits_factors_digits_factors_digits_factors_factors_factors(num):\n    '''\n    Write a function to check whether the given number is a perfect number or not.\n    '''\n    factorarr = []\n    for i in range(1,num):\n        if num % i == 0:\n            factorarr.append(i)\n    summ = 0\n    for i in factorarr:\n        summ += i\n    if summ == num:\n        return True\n    else:\n        return False\ndef check_perfectnum_sum_digits_factors_digits_factors_digits_factors_factors_factors_digits(num):\n    '''\n    Write a function to check whether the given number is a perfect number or not.\n    '''\n    factorarr = []\n    for i in range(1,num):\n        if num % i == 0:\n            factorarr.append(i)\n    summ = 0\n    for i in factorarr:\n        summ += i\n    if summ == num:\n        return True\n    else:\n        return False\ndef check_perfectnum_sum_digits_factors_digits_factors_digits_factors_factors_factors_factors_digits_factors(num):\n    '''\n    Write a function to check whether the given number is a perfect number or not.\n    '''\n    factorarr = []\n    for i in range(1,num):\n        if num % i == 0:\n            factorarr.append(i)\n    summ = 0\n    for i in factorarr:\n        summ += i\n    if summ == num:\n        return True\n    else:\n        return False\ndef check_perfectnum_sum_digits_factors_digits_factors_digits_factors_factors_factors_factors_factors_digits_factors_factors(num):\n    '''\n    Write a function to check whether the given number is a perfect number or not.\n    '''\n    factorarr = []\n    for i in range(",
        "num_ids": 14
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3==2:\n        return True\n    elif (monthnum3<1) or (monthnum3>12):\n        return False\n    else:\n        return True\ndef check_daynumber_number(daynum3):\n    '''\n    Write a function to check whether the given day number contains 31 days or not. Days are given as number from 1 to 31.\n    '''\n    if daynum3==1:\n        return True\n    elif (daynum3<1) or (daynum3>31):\n        return False\n    else:\n        return True\ndef check_year(year3):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    if (year3%4)==0:\n        if (year3%100)==0:\n            if (year3%400)==0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef get_datetime(monthnum3,daynum3,year3):\n    '''\n    Write a function to calculate the number of days between two dates and return it.\n    \n    Example:\n    Date 1: 31/12/2000\n    Date 2: 31/1/2001\n    \n    The function should return number of days: \"29\"\n    '''\n    if check_monthnumber_number(monthnum3)==False:\n        return \"Invalid Month Number\"\n    if check_daynumber_number(daynum3)==False:\n        return \"Invalid Day Number\"\n    if check_year(year3)==False:\n        return \"Invalid Year\"\n    else:\n        if (year3%400)==0:\n            leapyear=True\n        else:\n            leapyear=False\n        month=[0,31,28,31,30,31,30,31,31,30,31,30,31]\n        days=0\n        if leapyear==True:\n            for i in range(1,monthnum3):\n                if i==2:\n                    days=days+29\n                else:\n                    days=days+month[i]\n                if i==monthnum3-1:\n                    if (daynum3<=month[i]):\n                        days=days+daynum3\n            return days\n        else:\n            for i in range(1,monthnum3):\n                if i==2:\n                    days=days+28\n                else:\n                    days=days+month[i]\n                if i==monthnum3-1:\n                    if (daynum3<=month[i]):\n                        days=days+daynum3\n            return days\ndef check_vowel_string(string3):\n    '''\n    Write a function to check whether the given string contains a vowel or not.\n    \n    Example:\n    \"Hello world\"\n    \n    The function should return \"No\"\n    '''\n    if string3.lower() in ['a','e','i','o','u']:\n        return \"Yes\"\n    else:\n        return \"No\"\ndef check_string_length(string3):\n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    \n    Example:\n    \"Hello\"\n    \n    The function should return \"Yes\"\n    '''\n    if len(string3)==1:\n        return \"Yes\"\n    else:\n        if string3[0].lower()==string3[-1].lower():\n            return check_string_length(string3[1:-1])\n        else:\n            return \"No\"\ndef check_vowel_string_number(string3):\n    '''\n    Write a function to check whether the given string contains a vowel or not.\n    \n    Example:\n    \"Hello world\"\n    \n    The function should return \"No\"\n    '''\n    if string3.lower() in ['a','e','i','o','u']:\n        return \"Yes\"\n    else:\n        return \"No\"\ndef get_digit_number(num):\n    '''\n    Write a function to check whether the given number is a digit or not.\n    \n    Example:\n    \"123\"\n    \n    The function should return \"Yes\"\n    '''\n    if num>0:\n        return \"Yes\"\n    else:\n        return \"No\"\ndef get_factorial_digit_sum(num):\n    '''\n    Write a function to calculate the sum of the factorial of all digits of the given number.\n    \n    Example:\n    \"145\"\n    \n    The function should return \"5\"\n    '''\n    if num==0:\n        return 0\n    else:\n        return get_factorial_digit_sum(num//10)+num%10\ndef is_palindrome(string3):\n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    \n    Example:\n    \"Hello\"\n    \n    The function should return \"Yes\"\n    '''\n    if string3==string3[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\"\ndef check_pangram(string3):\n    '''\n    Write a function to check whether the given string contains all the letters of the English alphabet.\n    \n    Example:\n    \"The quick brown fox jumps over the lazy dog\"\n    \n    The function should return \"Yes\"\n    '''\n    if len(string3)>=26:\n        return \"Yes\"\n    else:\n        return \"No\"\ndef is_prime_number(num):\n    '''\n    Write a function to check whether the given number is a prime number or not.\n    \n    Example:\n    \"13\"\n    \n    The function should return \"No\"\n    '''\n    if num>1:\n        if num%2==0:\n            return \"No\"\n        else:\n            for i in range(3,num//2,2):\n                if num%i==0:\n                    return \"No\"\n            return \"Yes\"\n    else:\n        return \"No\"\ndef is_perfect_number(num):\n    '''\n    Write a function to check whether the given number is a perfect number or not.\n    \n    Example:\n    \"6\"\n    \n    The function should return \"Yes\"\n    '''\n    if num==1:\n        return \"No\"\n    else:\n        i=1\n        sum=0\n        while i<num:\n            if num%i==0:\n                sum=sum+i\n            i=i+1\n        if sum==num:\n            return \"Yes\"\n        else:\n            return \"No\"\ndef is_merge_string(string1,string2):\n    '''\n    Write a function to check whether the given strings are a common substring or not.\n    \n    Example:\n    \"Hello\",\"World\"\n    \n    The function should return \"Yes\"\n    '''\n    if string1[0].lower() in string2.lower():\n        return \"Yes\"\n    else:\n        return \"No\"\ndef get_digit_count(num):\n    '''\n    Write a function to check whether the given number is a digit or not.\n    \n    Example:\n    \"123\"\n    \n    The function should return \"Yes\"\n    '''\n    if num>0:\n        return \"Yes\"\n    else:\n        return \"No\"\ndef get_sum_of_digits(num):\n    '''\n    Write a function to calculate the sum of the digits of the given number.\n    \n    Example:\n    \"123\"\n    \n    The function should return \"6\"\n    '''\n    if num==0:\n        return 0\n    else:\n        return get_sum_of_digits(num//10)+num%10\ndef is_leap_year(year3):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    \n    Example:\n    \"2017\"\n    \n    The function should return \"Yes\"\n    '''\n    if (year3%4)==0:\n        if (year3%100)==0:\n            if (year3%400)==0:\n                return \"Yes\"\n            else:\n                return \"No\"\n        else:\n            return \"Yes\"\n    else:\n        return \"No\"\ndef get_gcd(nu",
        "num_ids": 81
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 3 or monthnum3 == 4 or monthnum3 == 5:\n        return True\n    else:\n        return False\ndef check_year(year1):\n    '''\n    Write a function that checks whether the year is a leap year or not. A leap year is divisible by 4, but also by 100, but not divisible by 400. The year 2000 is a leap year.\n    '''\n    if year1 % 4 == 0 and year1 % 100!= 0:\n        return True\n    elif year1 % 400 == 0:\n        return True\n    else:\n        return False\ndef check_leap_year(year2):\n    '''\n    Write a function that checks whether the given year is a leap year or not. A leap year is divisible by 4, but also by 100, but not divisible by 400. The year 2000 is a leap year.\n    '''\n    if year2 % 4 == 0 and year2 % 100!= 0:\n        return True\n    elif year2 % 400 == 0:\n        return True\n    else:\n        return False\ndef main_fun():\n    '''\n    Write a function that asks the user for a number n and gives them the possibility to choose either option.\n    '''\n    num1 = int(input(\"Choose a number:\\n\"))\n    num2 = int(input(\"Choose a number:\\n\"))\n    print(\"The sum of {} and {} is {}\".format(num1,num2,num1+num2))\ndef start():\n    '''\n    Write a function that asks the user to choose an option and calls the function main_fun().\n    '''\n    option = int(input(\"Choose an option:\\n1. Add\\n2. Subtract\\n3. Multiply\\n4. Divide\\n\"))\n    if option == 1:\n        main_fun()\n    elif option == 2:\n        main_fun()\n    elif option == 3:\n        main_fun()\n    elif option == 4:\n        main_fun()\n    else:\n        print(\"Enter a valid option\")\n        start()\nstart()",
        "num_ids": 114
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(1,n):\n        min_diff = min(min_diff,arr[i] - arr[i-1])\n    return min_diff\n",
        "num_ids": 63
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    diff = 1000000\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i] + arr[j] < diff:\n                diff = arr[i] + arr[j]\n    return diff\narr = [int(i) for i in input().split()]\nprint(find_min_diff(arr,len(arr))",
        "num_ids": 94
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    return arr[n-1]-arr[0]\n",
        "num_ids": 21
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort() \n    mini = arr[1] - arr[0] \n    for i in range(n-1): \n        diff = arr[i+1] - arr[i] \n        if diff < mini: \n            mini = diff \n    return mini \n",
        "num_ids": 70
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    #Two Pointers\n    low = 0\n    high = len(arr)-1\n",
        "num_ids": 22
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    \n    arr.sort()\n    res=float('inf')\n    for i in range(n-1):\n        res = min(res,arr[i+1]-arr[i])\n    return res\n",
        "num_ids": 51
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    diff = 0\n    for i in range(1,n):\n        diff = abs(arr[i]-arr[i-1])\n    return diff\n",
        "num_ids": 44
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Sorting the array\n    arr.sort()\n",
        "num_ids": 15
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    m = n - 1\n    while m > 0 and arr[m] == arr[m-1]:\n        m -= 1\n    if m == 0:\n        return arr[0] + arr[1]\n    return arr[m] + arr[m+1]\n",
        "num_ids": 71
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n == 1:\n        return 0\n    # initialize min_diff as max possible value\n    min_diff = arr[1] - arr[0]\n    # find min diff and index of first element\n    for i in range(1,n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n            min_diff_index = i\n    # find min diff and index of last element\n    for i in range(n-1,n):\n        if arr[i] - arr[n-1] < min_diff:\n            min_diff = arr[i] - arr[n-1]\n            min_diff_index = i\n    # print the final min diff\n    print(min_diff)\n",
        "num_ids": 193
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n",
        "num_ids": 9
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    if str.isdigit():\n        return len(str)\n    else:\n        return len(str.replace('.', ''))\n",
        "num_ids": 35
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    def digit_ctr(str):\n        '''\n        Write a python function to count number of digits in a given string.\n        '''\n        #soln1\n        '''\n        #return len([i for i in str if i.isdigit()])\n        '''\n        #soln2\n        '''\n        return sum([1 for i in str if i.isdigit()])\n        '''\n        #soln3\n        '''\n        #return len([i for i in str if i.isdigit()])\n        '''\n        #soln4\n        return sum(map(str.count,digits))\n        '''\n        #soln5\n        '''\n        return sum(c.isdigit() for c in str)\n        '''\n    return digit_ctr(str)\n    \nprint(number_ctr('one12th3'))\n",
        "num_ids": 26
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    number = 0\n    for i in range(len(str)):\n        if str[i].isdigit():\n            number += 1\n    return number\n",
        "num_ids": 39
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    str = str.strip()\n    len_str = len(str)\n    num_ctr = 0\n    for i in range(len_str):\n        if str[i] >= '0' and str[i] <= '9':\n            num_ctr += 1\n    return num_ctr\n",
        "num_ids": 71
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    # Write your code here\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count+=1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\nprint number_ctr('74197253847')",
        "num_ids": 20
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr = ctr + 1\n    return ctr\n",
        "num_ids": 36
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n",
        "num_ids": 9
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return is_polite_helper(n)\ndef is_polite_helper(n):\n    # print \"n=\", n\n    # print \"is_polite_helper(n)\", n, \"==2^3\", pow(2,3)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    # print \"is_polite_helper(n-1) = \", is_polite_helper(n-1)\n    # print \"is_polite_helper(n-2) = \", is_polite_helper(n-2)\n    # print \"is_polite_helper(n-3) = \", is_polite_helper(n-3)\n    # print \"is_polite_helper(n-4) = \", is_polite_helper(n-4)\n    if n % 4 == 1:\n        return is_polite_helper(n - 1) + 1\n    if n % 4 == 2:\n        return is_polite_helper(n - 2) + 2\n    if n % 4 == 3:\n        return is_polite_helper(n - 3) + 3\n    if n % 4 == 0:\n        return is_polite_helper(n - 4) + 4\n",
        "num_ids": 337
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #print n\n    p = 0\n    for i in range(2,n):\n        if math.gcd(n,i) == 1:\n            p+=1\n    return p==n-1\n",
        "num_ids": 51
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n*(n+1)/2\n",
        "num_ids": 13
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return True\n    l = []\n    l.append(0)\n    l.append(1)\n    l.append(0)\n    l.append(1)\n    i = 3\n    while n > 4:\n        l.append(l[i] + l[i - 1])\n        i += 1\n        n -= 1\n    return l[n] % 2 == 0\n",
        "num_ids": 100
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    p = int(math.sqrt(n))\n    #print p,n\n    if (n%p == 0):\n        if (n/p%2 == 0):\n            return p\n        else:\n            return n/p+1\n    else:\n        return n\n",
        "num_ids": 68
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #if n is equal to 1 or n is greater than 1, it will be polite\n    if n == 1 or n > 1:\n        #here n-1 is the number of numbers to be generated\n        for num in range(1, n-1):\n            if is_prime(num) and is_prime(num+2):\n                print num\n                n = n-1\n                break\n    return n \ndef is_prime(num): \n    if num > 1: \n        #check for factors \n        for i in range(2, num): \n            if (num % i) == 0: \n                return False\n        return True \n    return False \n",
        "num_ids": 160
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    polite = [1]\n    for i in xrange(2,n+1):\n        if is_polite_prime(i):\n            polite.append(i)\n            count += 1\n            if count == n:\n                return i\ndef is_polite_prime(n):\n    if n == 1:\n        return False\n    for i in xrange(2,n):\n        if n % i == 0:\n            return False\n    return True\ndef nth_polite(n):\n    if n == 1:\n        return 1\n    #polite = [1]\n    for i in xrange(2,n+1):\n        if is_polite_prime(i):\n            return i\ndef prime_factorization(n):\n    res = []\n    while n % 2 == 0:\n        res.append(2)\n        n /= 2\n    for i in xrange(3,int(math.sqrt(n))+1,2):\n        while n % i == 0:\n            res.append(i)\n            n /= i\n    if n > 2:\n        res.append(n)\n    return res\ndef factorial(n):\n    if n == 1:\n        return 1\n    return n * factorial(n-1)\ndef nth_polite_number(n):\n    if n == 1:\n        return 1\n    else:\n        polite_count = 0\n        for i in xrange(2,n+1):\n            fact = factorial(i)\n            num_polite = fact / i\n            if num_polite % 2 == 0:\n                polite_count += 1\n                if polite_count == n:\n                    return i\ndef lex_perm(a,b):\n    if a < b:\n        return a+b\n    else:\n        return b+a\ndef lex_perm_count(a,b):\n    return factorial(a+b) / (factorial(a) * factorial(b))\ndef binomial_coefficient(n,k):\n    return factorial(n)/(factorial(k)*factorial(n-k))\ndef sum_of_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n /= 10\n    return s\ndef sum_of_digits_count(n):\n    return len(str(n))\ndef palindrome(n):\n    return n == n[::-1]\ndef palindrome_permutation(n):\n    n = str(n)\n    rev = n[::-1]\n    dict = {}\n    for i in n:\n        dict[i] = dict.get(i,0) + 1\n    for i in rev:\n        dict[i] = dict.get(i,0) - 1\n    flag = 1\n    for i in dict:\n        if dict[i]!= 0:\n            flag = 0\n            break\n    return flag\ndef factorial_permutation(n):\n    if n == 1:\n        return [1]\n    res = factorial_permutation(n-1)\n    res.append(n)\n    return res\ndef count_possible_palindromes(n):\n    #n = str(n)\n    #n = n[::-1]\n    if n < 10:\n        return 1\n    if palindrome(n):\n        return 1\n    num = n / 10\n    count = 0\n    for i in xrange(9,0,-1):\n        if palindrome(num):\n            count += 1\n        num /= 10\n    return count\ndef count_possible_palindromes_count(n):\n    #n = str(n)\n    #n = n[::-1]\n    if n < 10:\n        return 1\n    if palindrome(n):\n        return 1\n    num = n / 10\n    count = 0\n    for i in xrange(9,0,-1):\n        if palindrome(num):\n            count += 1\n        num /= 10\n    return count\ndef is_perfect(n):\n    sum = 0\n    for i in xrange(1,n):\n        if n % i == 0:\n            sum += i\n    return sum == n\ndef is_perfect_count(n):\n    sum = 0\n    for i in xrange(1,n):\n        if n % i == 0:\n            sum += i\n    return sum == n\ndef is_perfect_permutation(n):\n    n = str(n)\n    n = n[::-1]\n    rev = n[::-1]\n    dict = {}\n    for i in n:\n        dict[i] = dict.get(i,0) + 1\n    for i in rev:\n        dict[i] = dict.get(i,0) - 1\n    flag = 1\n    for i in dict:\n        if dict[i]!= 0:\n            flag = 0\n            break\n    return flag\ndef is_perfect_permutation_count(n):\n    n = str(n)\n    n = n[::-1]\n    rev = n[::-1]\n    dict = {}\n    for i in n:\n        dict[i] = dict.get(i,0) + 1\n    for i in rev:\n        dict[i] = dict.get(i,0) - 1\n    flag = 1\n    for i in dict:\n        if dict[i]!= 0:\n            flag = 0\n            break\n    return flag\ndef is_perfect_permutation_count(n):\n    n = str(n)\n    n = n[::-1]\n    rev = n[::-1]\n    dict = {}\n    for i in n:\n        dict[i] = dict.get(i,0) + 1\n    for i in rev:\n        dict[i] = dict.get(i,0) - 1\n    flag = 1\n    for i in dict:\n        if dict[i]!= 0:\n            flag = 0\n            break\n    return flag\ndef is_perfect_permutation(n):\n    n = str(n)\n    n = n[::-1]\n    rev = n[::-1]\n    dict = {}\n    for i in n:\n        dict[i] = dict.get(i,0) + 1\n    for i in rev:\n        dict[i] = dict.get(i,0) - 1\n    flag = 1\n    for i in dict:\n        if dict[i]!= 0:\n            flag = 0\n            break\n    return flag\ndef is_perfect_permutation(n):\n    n = str(n)\n    n = n[::-1]\n    rev = n[::-1]\n    dict = {}\n    for i in n:\n        dict[i] = dict.get(i,0) + 1\n    for i in rev:\n        dict[i] = dict.get(i,0) - 1\n    flag = 1\n    for i in dict:\n        if dict[i]!= 0:\n            flag = 0\n            break\n    return flag\ndef is_perfect_permutation(n):\n    n = str(n)\n    n = n[::-1]\n    rev = n[::-1]\n    dict = {}\n    for i in n:\n        dict[i] = dict.get(i,0) + 1\n    for i in rev:\n        dict[i] = dict.get(i,0) - 1\n    flag = 1\n    for i in dict:\n        if dict[i]!= 0:\n            flag = 0\n            break\n    return flag\ndef is_perfect_permutation(n):\n    n = str(n)\n    n = n[::-1]\n    rev = n[::-1]\n    dict = {}\n    for i in n:\n        dict[i] = dict.get(i,0) + 1\n    for i in rev:\n        dict[i] = dict.get(i,0) - 1\n    flag = 1\n    for i in dict:\n        if dict[i]!= 0:\n            flag = 0\n            break\n    return flag\ndef is_perfect_permutation(n):\n    n = str(n)\n    n = n[::-1]\n    rev = n[::-1]\n    dict = {}\n    for i i",
        "num_ids": 2008
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_list = [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373]\n    if n in polite_list:\n        return True\n    return False\n",
        "num_ids": 600
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    numbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,",
        "num_ids": 1999
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0 or n == 1: \n        return True\n    else: \n        num = int(math.sqrt(n))\n        if n%2 == 0: \n            return (is_polite(num-1) and is_polite(n-num))\n        else: \n            return (is_polite(num) and is_polite(n-num))\n",
        "num_ids": 95
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    ret=[]\n    for i in range(len(l1)):\n        if i==len(l1)-1:\n            break\n        ret.append([l1[i],l1[i+1]])\n    return ret\n",
        "num_ids": 58
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for x in range(len(l1)):\n        l2.append(tuple((l1[x],l1[x+1])))\n    return l2\n",
        "num_ids": 49
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) % 2:\n        return []\n    else:\n        return [(l1[i], l1[i+1]) for i in range(len(l1) - 1)]\n",
        "num_ids": 50
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    for i in range(len(l1)-1):\n        if l1[i] + 1!= l1[i+1]:\n            yield l1[i], l1[i+1]\n            i += 1\n        else:\n            i += 1\n        \ndef prime_factors(n):\n    '''\n    Write a function to return all the prime factors of a given integer n.\n    '''\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n    \ndef circular_array_rotation(arr, k):\n    '''\n    Write a function to return the circular array rotation of a given array.\n    '''\n    k = k % len(arr)\n    if k == 0:\n        return arr\n    else:\n        return arr[-k:] + arr[:-k]\n",
        "num_ids": 41
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    for i in range(len(l1)-1):\n        l.append([l1[i],l1[i+1]])\n    return l\n",
        "num_ids": 44
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    new_list = []\n    if len(l1) < 2:\n        return []\n    else:\n        for i in range(len(l1) - 1):\n            new_list.append([l1[i], l1[i + 1]])\n        return new_list\n",
        "num_ids": 70
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    for i in range(0,len(l1)-1):\n        l.append([l1[i],l1[i+1]])\n    return l\n",
        "num_ids": 46
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    results = []\n    for i in range(len(l1)):\n        if i == 0:\n            continue\n        else:\n            results.append([l1[i-1],l1[i]])\n    return results\n",
        "num_ids": 57
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]\n",
        "num_ids": 30
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    num_dict = {}\n    for i in xrange(len(arr)):\n        num_dict[arr[i]] = 0\n",
        "num_ids": 34
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    m = {}\n    for i in arr:\n        if i in m:\n            m[i] += 1\n        else:\n            m[i] = 1\n    for key in m:\n        if (sum - key) in m:\n            return (m[key] * m[(sum - key)])\n    return 0\n    \narr = [1,4,2,2,5,5]\nsum = 4\nprint(get_pairs_count(arr, sum))\n",
        "num_ids": 116
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    dictionary = {}\n    for i in range(len(arr)):\n        dictionary[arr[i]] = 0\n    for i in range(len(arr)):\n        dictionary[arr[i]] += 1\n    for i in range(len(arr)):\n        if(sum - arr[i] in dictionary):\n            return(dictionary[sum - arr[i]])\n        else:\n            dictionary[arr[i]] -= 1\n    return(0)\n",
        "num_ids": 114
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n",
        "num_ids": 61
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    hash_dict = {}\n    pairs_count = 0\n    for i in arr:\n        if i in hash_dict:\n            hash_dict[i] += 1\n        else:\n            hash_dict[i] = 1\n    for i in arr:\n        if (sum - i) in hash_dict:\n            pairs_count += hash_dict[i] * hash_dict[sum - i]\n    return pairs_count\n",
        "num_ids": 105
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    arr_count = {}\n    for num in arr:\n        arr_count[num] = arr_count.get(num, 0) + 1\n    return arr_count\n",
        "num_ids": 43
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        if sum-arr[i] in arr:\n            pairs += 1\n    return pairs\n",
        "num_ids": 42
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    map_count = {}\n    for i in arr:\n        if i in map_count:\n            map_count[i] += 1\n        else:\n            map_count[i] = 1\n",
        "num_ids": 55
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    d = {}\n    for i in range(len(arr)):\n        if arr[i] in d:\n            d[arr[i]] += 1\n        else:\n            d[arr[i]] = 1\n    count = 0\n    for i in range(len(arr)):\n        count += d.get(sum-arr[i], 0)\n    return count\n",
        "num_ids": 90
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n",
        "num_ids": 39
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n",
        "num_ids": 17
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = [li1 for li1 in li1 if li1 not in li2]\n    return diff\n    \ndef DiffCount(li1,li2):\n    '''\n    Write a python function to count the difference between two lists.\n    '''\n    count = 0\n    for li1 in li1:\n        for li2 in li2:\n            if li1 == li2:\n                count += 1\n    return count\n    \ndef DiffSort(li1,li2):\n    '''\n    Write a python function to sort the difference between two lists.\n    '''\n    for li1 in li1:\n        for li2 in li2:\n            if li1 == li2:\n                li1.append(li2)\n    return li1\n    \ndef DiffSortUnique(li1,li2):\n    '''\n    Write a python function to sort the difference between two lists.\n    '''\n    for li1 in li1:\n        for li2 in li2:\n            if li1 == li2:\n                li1.append(li2)\n    return list(set(li1))\n    \ndef DiffCountUnique(li1,li2):\n    '''\n    Write a python function to count the difference between two lists.\n    '''\n    count = 0\n    for li1 in li1:\n        for li2 in li2:\n            if li1 == li2:\n                count += 1\n    return count\n    \ndef DiffSortUnique(li1,li2):\n    '''\n    Write a python function to sort the difference between two lists.\n    '''\n    for li1 in li1:\n        for li2 in li2:\n            if li1 == li2:\n                li1.append(li2)\n    return list(set(li1))\n    \ndef DiffCountUnique(li1,li2):\n    '''\n    Write a python function to count the difference between two lists.\n    '''\n    count = 0\n    for li1 in li1:\n        for li2 in li2:\n            if li1 == li2:\n                count += 1\n    return count\n    \ndef DiffSortUnique(li1,li2):\n    '''\n    Write a python function to sort the difference between two lists.\n    '''\n    for li1 in li1:\n        for li2 in li2:\n            if li1 == li2:\n                li1.append(li2)\n    return list(set(li1))\n    \ndef DiffCountUnique(li1,li2):\n    '''\n    Write a python function to count the difference between two lists.\n    '''\n    count = 0\n    for li1 in li1:\n        for li2 in li2:\n            if li1 == li2:\n                count += 1\n    return count\n    \ndef DiffSortUnique(li1,li2):\n    '''\n    Write a python function to sort the difference between two lists.\n    '''\n    for li1 in li1:\n        for li2 in li2:\n            if li1 == li2:\n                li1.append(li2)\n    return list(set(li1))\n    \ndef DiffCountUnique(li1,li2):\n    '''\n    Write a python function to count the difference between two lists.\n    '''\n    count = 0\n    for li1 in li1:\n        for li2 in li2:\n            if li1 == li2:\n                count += 1\n    return count\n    \ndef DiffSortUnique(li1,li2):\n    '''\n    Write a python function to sort the difference between two lists.\n    '''\n    for li1 in li1:\n        for li2 in li2:\n            if li1 == li2:\n                li1.append(li2)\n    return list(set(li1))\n    \ndef DiffCountUnique(li1,li2):\n    '''\n    Write a python function to count the difference between two lists.\n    '''\n    count = 0\n    for li1 in li1:\n        for li2 in li2:\n            if li1 == li2:\n                count += 1\n    return count\n    \ndef DiffSortUnique(li1,li2):\n    '''\n    Write a python function to sort the difference between two lists.\n    '''\n    for li1 in li1:\n        for li2 in li2:\n            if li1 == li2:\n                li1.append(li2)\n    return list(set(li1))\n    \ndef DiffCountUnique(li1,li2):\n    '''\n    Write a python function to count the difference between two lists.\n    '''\n    count = 0\n    for li1 in li1:\n        for li2 in li2:\n            if li1 == li2:\n                count += 1\n    return count\n    \ndef DiffSortUnique(li1,li2):\n    '''\n    Write a python function to sort the difference between two lists.\n    '''\n    for li1 in li1:\n        for li2 in li2:\n            if li1 == li2:\n                li1.append(li2)\n    return list(set(li1))\n    \ndef DiffCountUnique(li1,li2):\n    '''\n    Write a python function to count the difference between two lists.\n    '''\n    count = 0\n    for li1 in li1:\n        for li2 in li2:\n            if li1 == li2:\n                count += 1\n    return count\n    \ndef DiffSortUnique(li1,li2):\n    '''\n    Write a python function to sort the difference between two lists.\n    '''\n    for li1 in li1:\n        for li2 in li2:\n            if li1 == li2:\n                li1.append(li2)\n    return list(set(li1))\n    \ndef DiffCountUnique(li1,li2):\n    '''\n    Write a python function to count the difference between two lists.\n    '''\n    count = 0\n    for li1 in li1:\n        for li2 in li2:\n            if li1 == li2:\n                count += 1\n    return count\n    \ndef DiffSortUnique(li1,li2):\n    '''\n    Write a python function to sort the difference between two lists.\n    '''\n    for li1 in li1:\n        for li2 in li2:\n            if li1 == li2:\n                li1.append(li2)\n    return list(set(li1))\n    \ndef DiffCountUnique(li1,li2):\n    '''\n    Write a python function to count the difference between two lists.\n    '''\n    count = 0\n    for li1 in li1:\n        for li2 in li2:\n            if li1 == li2:\n                count += 1\n    return count\n    \ndef DiffSortUnique(li1,li2):\n    '''\n    Write a python function to sort the difference between two lists.\n    '''\n    for li1 in li1:\n        for li2 in li2:\n            if li1 == li2:\n                li1.append(li2)\n    return list(set(li1))\n    \ndef DiffCountUnique(li1,li2):\n    '''\n    Write a python function to count the difference between two lists.\n    '''\n    count = 0\n    for li1 in li1:\n        for li2 in li2:\n            if li1 == li2:\n                count += 1\n    return count\n    \ndef DiffSortUnique(li1,li2):\n    '''\n    Write a python function to sort the difference between two lists.\n    '''\n    for li1 in li1:\n        for li2 in li2:\n            if li1 == li2:\n                li1.append(li2)\n    return list(set(li1))\n    \ndef DiffCountUnique(li1,li2):\n    '''\n    Write a python function to count the difference between two lists.\n    '''\n    count = 0\n    for li1 in li1:\n        for li2 in li2:\n            if li1 == li2:\n                count += 1\n    return count\n    \ndef DiffSortUnique(li1,li2):\n    '''\n    Write a python function to sort the difference between two lists.\n    '''\n    for li1 in li1:\n        for li2 in li2:\n            if li1 == li2:\n                li1.append(li2)\n    return list(se",
        "num_ids": 44
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n",
        "num_ids": 39
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n",
        "num_ids": 39
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n",
        "num_ids": 39
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1)-set(li2)))\n",
        "num_ids": 18
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1)-set(li2)))\n",
        "num_ids": 18
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n",
        "num_ids": 39
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\ndef RemoveDuplicates(str1):\n    '''\n    Write a python function to get the duplicates characters from a string.\n    '''\n    a = list(str1)\n    b = []\n    for i in a:\n        if i not in b:\n            b.append(i)\n    return ''.join(b)\ndef intersection(lst1, lst2): \n    return list(set(lst1) & set(lst2))\ndef remove_duplicates(lst): \n    return list(set(lst))\ndef remove_duplicates_set(lst): \n    return list(set(lst))\ndef remove_duplicates_inplace(lst):\n    set_lst = list(set(lst))\n    for num in lst:\n        if num in set_lst:\n            set_lst.remove(num)\n    return set_lst\ndef remove_duplicates_inplace2(lst):\n    return list(set(lst))\ndef convert_to_list(s):\n    return list(s)\ndef convert_to_tuple(s):\n    return tuple(s)\ndef convert_to_set(s):\n    return set(s)\ndef convert_to_frozenset(s):\n    return frozenset(s)\ndef word_in_string(word,string):\n    return word in string\ndef word_not_in_string(word,string):\n    return word not in string\ndef word_in_string_with_space(word,string):\n    return''+word+''in string\ndef word_not_in_string_with_space(word,string):\n    return''+word+''not in string\ndef word_in_string_without_space(word,string):\n    return word in string.replace(' ','')\ndef word_not_in_string_without_space(word,string):\n    return word not in string.replace(' ','')\ndef word_in_string_with_space_and_newline(word,string):\n    return '\\n '+word+'\\n' in string\ndef word_not_in_string_with_space_and_newline(word,string):\n    return '\\n '+word+'\\n' not in string\ndef word_in_string_without_space_and_newline(word,string):\n    return word in string.replace('\\n',' ').replace(' ','')\ndef word_not_in_string_without_space_and_newline(word,string):\n    return word not in string.replace('\\n',' ').replace(' ','')\ndef word_in_string_and_newline(word,string):\n    return '\\n'+word+'\\n' in string\ndef word_not_in_string_and_newline(word,string):\n    return '\\n'+word+'\\n' not in string\ndef word_in_string_with_space_and_newline_and_tab(word,string):\n    return '\\n\\t'+word+'\\n\\t' in string\ndef word_not_in_string_with_space_and_newline_and_tab(word,string):\n    return '\\n\\t'+word+'\\n\\t' not in string\ndef word_in_string_without_space_and_newline_and_tab(word,string):\n    return word in string.replace('\\n',' ').replace('\\t',' ').replace(' ','')\ndef word_not_in_string_without_space_and_newline_and_tab(word,string):\n    return word not in string.replace('\\n',' ').replace('\\t',' ').replace(' ','')\ndef word_in_string_with_space_and_newline_and_tab_and_newline(word,string):\n    return '\\n\\n\\t'+word+'\\n\\n\\t' in string\ndef word_not_in_string_with_space_and_newline_and_tab_and_newline(word,string):\n    return '\\n\\n\\t'+word+'\\n\\n\\t' not in string\ndef word_in_string_without_space_and_newline_and_tab_and_newline(word,string):\n    return word in string.replace('\\n',' ').replace('\\t',' ').replace('\\n\\n',' ').replace('\\n\\t',' ').replace('\\n\\t\\t',' ').replace('\\n\\t\\t\\t',' ').replace('\\t\\t\\t',' ').replace('\\t\\t\\t\\t',' ')\ndef word_not_in_string_without_space_and_newline_and_tab_and_newline(word,string):\n    return word not in string.replace('\\n',' ').replace('\\t',' ').replace('\\n\\n',' ').replace('\\n\\t',' ').replace('\\n\\t\\t',' ').replace('\\n\\t\\t\\t',' ').replace('\\t\\t\\t',' ').replace('\\t\\t\\t\\t',' ')\ndef word_in_string_with_space_and_newline_and_tab_and_tab(word,string):\n    return '\\n\\n\\t\\t'+word+'\\n\\n\\t\\t' in string\ndef word_not_in_string_with_space_and_newline_and_tab_and_tab(word,string):\n    return '\\n\\n\\t\\t'+word+'\\n\\n\\t\\t' not in string\ndef word_in_string_without_space_and_newline_and_tab_and_tab_and_newline(word,string):\n    return word in string.replace('\\n',' ').replace('\\t',' ').replace('\\t\\t',' ').replace('\\t\\t\\t',' ').replace('\\n\\t\\t\\t',' ').replace('\\n\\t\\t\\t\\t',' ').replace('\\t\\t\\t\\t',' ')\ndef word_not_in_string_without_space_and_newline_and_tab_and_tab_and_newline(word,string):\n    return word not in string.replace('\\n',' ').replace('\\t',' ').replace('\\t\\t',' ').replace('\\t\\t\\t',' ').replace('\\n\\t\\t\\t',' ').replace('\\n\\t\\t\\t\\t',' ').replace('\\t\\t\\t\\t',' ')\ndef word_in_string_with_space_and_newline_and_tab_and_tab_and_newline_and_tab(word,string):\n    return '\\n\\n\\t\\t\\t'+word+'\\n\\n\\t\\t\\t' in string\ndef word_not_in_string_with_space_and_newline_and_tab_and_tab_and_newline_and_tab(word,string):\n    return '\\n\\n\\t\\t\\t'+word+'\\n\\n\\t\\t\\t' not in string\ndef word_in_string_without_space_and_newline_and_tab_and_tab_and_newline_and_tab_and_tab(word,string):\n    return word in string.replace('\\n',' ').replace('\\t',' ').replace('\\t\\t',' ').replace('\\t\\t\\t',' ').replace('\\n\\t\\t\\t',' ').replace('\\n\\t\\t\\t\\t',' ').replace('\\t\\t\\t\\t',' ')\ndef word_not_in_string_without_space_and_newline_and_tab_and_tab_and_newline_and_tab_and_tab(word,string):\n    return word not in string.replace('\\n',' ').replace('\\t',' ').replace('\\t\\t',' ').replace('\\t\\t\\t',' ').replace('\\n\\t\\t\\t',' ').replace('\\n\\t\\t\\t\\t',' ').replac",
        "num_ids": 1950
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # Base Case\n    if n == 1 : \n        return 0\n",
        "num_ids": 19
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum(x ** 4 for x in range(1, n + 1, 2))\n",
        "num_ids": 23
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # Initialize a variable to store the sum of the four power of odd numbers\n    total = 0\n",
        "num_ids": 25
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n < 2 : \n        return 0\n    \n    count = 1\n    total = 1\n    while count <= n :\n        total += (count * (count+1) * (count+2) * (count+3))\n        count += 2\n    \n    return total\n",
        "num_ids": 68
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # return n*(n+1)*(n+2)*(n+3)\n    return sum(x**4 for x in range(1, n+1, 2))\n",
        "num_ids": 44
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1) :\n        if (i % 2!= 0) : \n            total += i**4\n    return total \n",
        "num_ids": 46
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_num_total = (n * ((3 * n) + 1)) / 2\n    return odd_num_total\n",
        "num_ids": 31
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    if (n == 0) : \n        return 0\n    for i in range(1,n+1) : \n        if (i%2!= 0) : \n            sum = sum + i**4\n    return sum\n",
        "num_ids": 62
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n < 0 : \n        return 'ValueError'\n    total = 0\n    for i in range(1, n + 1) :\n        if i % 2!= 0 :\n            total += i * i * i * i\n    return total\n    \nprint(odd_num_sum(-2))\nprint(odd_num_sum(-1))\nprint(odd_num_sum(0))\nprint(odd_num_sum(1))\nprint(odd_num_sum(2))\nprint(odd_num_sum(3))\nprint(odd_num_sum(4))\nprint(odd_num_sum(5))\nprint(odd_num_sum(6))\nprint(odd_num_sum(7))\nprint(odd_num_sum(8))\nprint(odd_num_sum(9))\nprint(odd_num_sum(10))\nprint(odd_num_sum(11))\nprint(odd_num_sum(12))\nprint(odd_num_sum(13))\nprint(odd_num_sum(14))\nprint(odd_num_sum(15))\nprint(odd_num_sum(16))\nprint(odd_num_sum(17))\nprint(odd_num_sum(18))\nprint(odd_num_sum(19))\nprint(odd_num_sum(20))\nprint(odd_num_sum(21))\nprint(odd_num_sum(22))\nprint(odd_num_sum(23))\nprint(odd_num_sum(24))\nprint(odd_num_sum(25))\nprint(odd_num_sum(26))\nprint(odd_num_sum(27))\nprint(odd_num_sum(28))\nprint(odd_num_sum(29))\nprint(odd_num_sum(30))\nprint(odd_num_sum(31))\nprint(odd_num_sum(32))\nprint(odd_num_sum(33))\nprint(odd_num_sum(34))\nprint(odd_num_sum(35))\nprint(odd_num_sum(36))\nprint(odd_num_sum(37))\nprint(odd_num_sum(38))\nprint(odd_num_sum(39))\nprint(odd_num_sum(40))\nprint(odd_num_sum(41))\nprint(odd_num_sum(42))\nprint(odd_num_sum(43))\nprint(odd_num_sum(44))\nprint(odd_num_sum(45))\nprint(odd_num_sum(46))\nprint(odd_num_sum(47))\nprint(odd_num_sum(48))\nprint(odd_num_sum(49))\nprint(odd_num_sum(50))\nprint(odd_num_sum(51))\nprint(odd_num_sum(52))\nprint(odd_num_sum(53))\nprint(odd_num_sum(54))\nprint(odd_num_sum(55))\nprint(odd_num_sum(56))\nprint(odd_num_sum(57))\nprint(odd_num_sum(58))\nprint(odd_num_sum(59))\nprint(odd_num_sum(60))\nprint(odd_num_sum(61))\nprint(odd_num_sum(62))\nprint(odd_num_sum(63))\nprint(odd_num_sum(64))\nprint(odd_num_sum(65))\nprint(odd_num_sum(66))\nprint(odd_num_sum(67))\nprint(odd_num_sum(68))\nprint(odd_num_sum(69))\nprint(odd_num_sum(70))\nprint(odd_num_sum(71))\nprint(odd_num_sum(72))\nprint(odd_num_sum(73))\nprint(odd_num_sum(74))\nprint(odd_num_sum(75))\nprint(odd_num_sum(76))\nprint(odd_num_sum(77))\nprint(odd_num_sum(78))\nprint(odd_num_sum(79))\nprint(odd_num_sum(80))\nprint(odd_num_sum(81))\nprint(odd_num_sum(82))\nprint(odd_num_sum(83))\nprint(odd_num_sum(84))\nprint(odd_num_sum(85))\nprint(odd_num_sum(86))\nprint(odd_num_sum(87))\nprint(odd_num_sum(88))\nprint(odd_num_sum(89))\nprint(odd_num_sum(90))\nprint(odd_num_sum(91))\nprint(odd_num_sum(92))\nprint(odd_num_sum(93))\nprint(odd_num_sum(94))\nprint(odd_num_sum(95))\nprint(odd_num_sum(96))\nprint(odd_num_sum(97))\nprint(odd_num_sum(98))\nprint(odd_num_sum(99))\nprint(odd_num_sum(100))\nprint(odd_num_sum(101))\nprint(odd_num_sum(102))\nprint(odd_num_sum(103))\nprint(odd_num_sum(104))\nprint(odd_num_sum(105))\nprint(odd_num_sum(106))\nprint(odd_num_sum(107))\nprint(odd_num_sum(108))\nprint(odd_num_sum(109))\nprint(odd_num_sum(110))\nprint(odd_num_sum(111))\nprint(odd_num_sum(112))\nprint(odd_num_sum(113))\nprint(odd_num_sum(114))\nprint(odd_num_sum(115))\nprint(odd_num_sum(116))\nprint(odd_num_sum(117))\nprint(odd_num_sum(118))\nprint(odd_num_sum(119))\nprint(odd_num_sum(120))\nprint(odd_num_sum(121))\nprint(odd_num_sum(122))\nprint(odd_num_sum(123))\nprint(odd_num_sum(124))\nprint(odd_num_sum(125))\nprint(odd_num_sum(126))\nprint(odd_num_sum(127))\nprint(odd_num_sum(128))\nprint(odd_num_sum(129))\nprint(odd_num_sum(130))\nprint(odd_num_sum(131))\nprint(odd_num_sum(132))\nprint(odd_num_sum(133))\nprint(odd_num_sum(134))\nprint(odd_num_sum(135))\nprint(odd_num_sum(136))\nprint(odd_num_sum(137))\nprint(odd_num_sum(138))\nprint(odd_num_sum(139))\nprint(odd_num_sum(140))\nprint(odd_num_sum(141))\nprint(odd_num_sum(142))\nprint(odd_num_sum(143))\nprint(odd_num_sum(144))\nprint(odd_num_sum(145))\nprint(odd_num_sum(146))\nprint(odd_num_sum(147))\nprint(odd_num_sum(148))\nprint(odd_num_sum(149))\nprint(odd_num_sum(150))\nprint(odd_num_sum(151))\nprint(odd_num_sum(152))\nprint(odd_num_sum(153))\nprint(odd_num_sum(154))\nprint(odd_num_sum(155))\nprint(odd_num_sum(156))\nprint(odd_num_sum(157))\nprint(odd_num_sum(158))\nprint(odd_num_sum(159))\nprint(odd_num_sum(160))\nprint(odd_num_sum(161))\nprint(odd_num_sum(162))\nprint(odd_num_sum(163))\nprint(odd_num_sum(164))\nprint(odd_num_sum(165))\nprint(odd_num_sum(166))\nprint(odd_num_sum(167))\nprint(odd_num_sum(168))\nprint(odd_num_sum(169))\nprint(odd_num_sum(170))\nprint(odd_num_sum(171))\nprint(odd_num_sum(172))\nprint(odd_num_sum(173))\nprint(odd_num_sum(174))\nprin",
        "num_ids": 2012
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 0 : \n        return 0\n    else :\n        return n * (n+1) * (n+2) * (n+3) / 4\n",
        "num_ids": 42
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    \n    # create a queue for the expression\n    q = deque()\n    # iterate through the expression\n    for item in exp:\n        # add item to the queue\n        q.append(item)\n    # the stack\n    s = []\n    # boolean to check if the brackets are balanced\n    balanced = True\n    # iterate through the queue\n    while q:\n        # pop the first item from the queue\n        item = q.popleft()\n        # check if item is an opening bracket\n        if item in [\"(\", \"{\", \"[\"]:\n            # add it to the stack\n            s.append(item)\n        # check if item is a closing bracket\n        elif item in [\")\", \"}\", \"]\"]:\n            # if item is a closing bracket, check if the stack is empty and if it is not return false\n            if len(s) == 0:\n                balanced = False\n                return balanced\n            # if item is not a closing bracket, check if the top item in the stack is a corresponding opening bracket and if it is not return false\n            else:\n                top_item = s[-1]\n                if top_item == \"(\" and item == \")\":\n                    s.pop()\n                elif top_item == \"{\" and item == \"}\":\n                    s.pop()\n                elif top_item == \"[\" and item == \"]\":\n                    s.pop()\n                else:\n                    balanced = False\n                    return balanced\n        else:\n            return balanced\n    # if the queue is empty and the stack is empty, return true\n    if len(q) == 0 and len(s) == 0:\n        return balanced\n    else:\n        return False\n",
        "num_ids": 393
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    brackets = {\n        '[': ']',\n        '{': '}',\n        '(': ')',\n    }\n    for s in exp:\n        if s in brackets:\n            stack.append(s)\n        elif len(stack) == 0 or brackets[stack.pop()]!= s:\n            return False\n    return len(stack) == 0\n",
        "num_ids": 99
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    q = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            q.append(char)\n        else:\n            if len(q) == 0:\n                return False\n            p1 = q.pop()\n            if char == ')':\n                if p1 == '(':\n                    continue\n                else:\n                    return False\n            elif char == '}':\n                if p1 == '{':\n                    continue\n                else:\n                    return False\n            elif char == ']':\n                if p1 == '[':\n                    continue\n                else:\n                    return False\n    if len(q) > 0:\n        return False\n    return True\n",
        "num_ids": 167
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp)%2!= 0:\n        return False\n    stack = deque()\n    for i in exp:\n        if i == '(' or i == '[':\n            stack.append(i)\n        elif i == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n        elif i == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return stack == deque()\n",
        "num_ids": 133
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp) == 0:\n        return True\n    else:\n        start = 0\n        end = len(exp) - 1\n        while start <= end:\n            if exp[start] == '(' and exp[end] == ')':\n                start += 1\n                end -= 1\n            elif exp[start] == '[' and exp[end] == ']':\n                start += 1\n                end -= 1\n            elif exp[start] == '{' and exp[end] == '}':\n                start += 1\n                end -= 1\n            else:\n                return False\n        return True\ndef check_expression_parenthesis(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp) == 0:\n        return True\n    else:\n        start = 0\n        end = len(exp) - 1\n        while start <= end:\n            if exp[start] == '(' and exp[end] == ')':\n                start += 1\n                end -= 1\n            elif exp[start] == '[' and exp[end] == ']':\n                start += 1\n                end -= 1\n            elif exp[start] == '{' and exp[end] == '}':\n                start += 1\n                end -= 1\n            else:\n                return False\n        return True\n",
        "num_ids": 144
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    stack.append(('(',0))\n    for i in exp:\n        if i == '(':\n            stack.append(('(',1))\n        elif i == ')':\n            if stack[-1][1] == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 1:\n        return True\n    else:\n        return False\n    \n    \n",
        "num_ids": 105
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    openers = [\"(\",\"[\",\"{\"]\n    closers = [\")\",\"]\",\"}\"]\n    balanced = True\n    for char in exp:\n        if char in openers:\n            stack.append(char)\n        elif char in closers:\n            pos = closers.index(char)\n            if len(stack)>0:\n                checker = stack.pop()\n                if openers[pos]!= checker:\n                    balanced = False\n                    break\n            else:\n                balanced = False\n                break\n    if balanced and len(stack)==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 158
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for c in exp:\n        if c == '(':\n            stack.append(c)\n        else:\n            if stack:\n                stack.pop()\n            else:\n                return False\n",
        "num_ids": 54
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if exp == '':\n        return True\n    stack = deque()\n    op = {'(':')', '[':']', '{':'}'}\n    for i in range(len(exp)):\n        if exp[i] in '([{':\n            stack.append(exp[i])\n        elif exp[i] in ')]}':\n            if len(stack) == 0:\n                return False\n            if exp[i] == op[stack[-1]]:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n",
        "num_ids": 141
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    s = deque()\n    for char in exp:\n        if char == ')':\n            if len(s) == 0:\n                return False\n            if s[-1] == '(':\n                s.pop()\n            else:\n                return False\n        else:\n            s.append(char)\n",
        "num_ids": 75
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # write your code here\n    start = 0\n    end = len(test_str)\n    while start < len(test_str) and end >= start:\n        if len(test_str[start:end]) == K:\n            test_str = test_str.replace(test_str[start:end],'')\n        start = start + 1\n        end = end - 1\n    return test_str\n",
        "num_ids": 98
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    def _remove_length(word, count):\n        if len(word) == K:\n            return None\n",
        "num_ids": 30
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if len(test_str) == 0:\n        return test_str\n    # first, find all the substrings with length k\n    arr = []\n    for i in range(len(test_str) - K + 1):\n        arr.append(test_str[i:i + K])\n    # now remove all the words with length k\n    for j in range(len(arr)):\n        if arr[j] == arr[j][::-1]:\n            arr.pop(j)\n    return''.join(arr)\n",
        "num_ids": 127
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return''.join(test_str.split(' ')[K:])\n",
        "num_ids": 19
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if K == 1:\n        return test_str.split()\n    elif K == 2:\n        return [w for w in test_str.split() if len(w) == 2]\n    elif K > 2:\n        return [w for w in [w for w in test_str.split() if len(w) == K] if len(w) == K]\n    else:\n        return ''\n",
        "num_ids": 99
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    temp = list(test_str.split(' '))\n    return \" \".join(i for i in temp if len(i)!=K)\n",
        "num_ids": 36
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split(\" \")\n    new_list = [word for word in words if len(word)!= K]\n    return \" \".join(new_list)\n",
        "num_ids": 45
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if K == 0:\n        return test_str\n",
        "num_ids": 15
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    list_1 = test_str.split(' ')\n    new_list = []\n    for each_word in list_1:\n        if len(each_word) == K:\n            pass\n        else:\n            new_list.append(each_word)\n    new_str =''.join(new_list)\n    return new_str\n",
        "num_ids": 84
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str) - K + 1):\n        temp = test_str[i:]\n        if is_word(temp):\n            count += 1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    return re.findall(pattern,text)\n",
        "num_ids": 14
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.search(pattern,text)\n    if result:\n        print(result.span())\n    else:\n        print(\"None\")\n",
        "num_ids": 37
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    for i in range(len(text)-len(pattern)+1):\n        if text[i:i+len(pattern)]==pattern:\n            return [i,i+len(pattern)]\n    return None\ndef left_shift(s,n):\n    return s[n:]+s[:n]\ndef merge_sort(s):\n    '''\n    Write a function to sort a string in alphabetical order.\n    '''\n    if len(s)<2:\n        return s\n    left,right = s[:len(s)//2],s[len(s)//2:]\n    return merge_sort(left) + merge_sort(right)\ndef max_num(s):\n    '''\n    Write a function to return the most frequent element in an array.\n    '''\n    s = list(s)\n    s.sort()\n    max = 1\n    res = s[0]\n    for i in range(1,len(s)):\n        if s[i]==s[i-1]:\n            max+=1\n        else:\n            if max>max:\n                max = max\n                res = s[i]\n            else:\n                pass\n    return res\ndef max_num_n_times(s,n):\n    '''\n    Write a function to return the most frequent element in an array. The function should return the element if the number of occurances of the element is equal to or more than n.\n    '''\n    res = set()\n    s = list(s)\n    s.sort()\n    for i in range(len(s)-n+1):\n        res.add(s[i])\n    max = 1\n    for i in res:\n        if s.count(i)>=max:\n            max = s.count(i)\n            res = i\n    return i\ndef first_occurance(s,t):\n    '''\n    Write a function to find the first occurance of a substring in a string.\n    '''\n    index = s.find(t)\n    if index==-1:\n        return -1\n    else:\n        return index\ndef two_sum(nums,target):\n    '''\n    Write a function to return the indices of two numbers in a list such that they add up to a specific target.\n    '''\n    indexs = []\n    for i in range(len(nums)-1):\n        for j in range(i+1,len(nums)):\n            if nums[i]+nums[j]==target:\n                indexs.append(i)\n                indexs.append(j)\n    return indexs\ndef find_largest(arr):\n    '''\n    Write a function to return the index of the largest value in a list of integers.\n    '''\n    largest = arr[0]\n    largest_index = 0\n    for i in range(1,len(arr)):\n        if arr[i]>largest:\n            largest = arr[i]\n            largest_index = i\n    return largest_index\ndef reverse_digits(s):\n    '''\n    Write a function to reverse digits of a number.\n    '''\n    return int(str(s)[::-1])\ndef reverse_digits_n_times(s,n):\n    '''\n    Write a function to reverse digits of a number n times.\n    '''\n    return int(str(s)[::-1])\ndef palindrome_permutation(s):\n    '''\n    Write a function to check whether a string is a permutation of a palindrome.\n    '''\n    s = list(s)\n    s.sort()\n    return s==s[::-1]\ndef check_palindrome(s):\n    '''\n    Write a function to check whether a string is a palindrome.\n    '''\n    return s==s[::-1]\ndef remove_accents(s):\n    '''\n    Write a function to remove accents from a string.\n    '''\n    res = ''\n    for i in s:\n        if ord(i)>=ord('a') and ord(i)<=ord('z'):\n            res+=i\n        elif ord(i)>=ord('A') and ord(i)<=ord('Z'):\n            res+=i\n        else:\n            pass\n    return res\ndef reverse_string_n_times(s,n):\n    '''\n    Write a function to reverse a string n times.\n    '''\n    return s[::-1]\ndef sub_string(s,start,end):\n    '''\n    Write a function to find the substrings within a string.\n    '''\n    return s[start:end]\ndef rev_sub_string(s,start,end):\n    '''\n    Write a function to find the substrings within a string.\n    '''\n    return s[start:end][::-1]\ndef longest_common_substring(s,t):\n    '''\n    Write a function to find the longest common substring between two strings.\n    '''\n    index = {}\n    for i in range(len(s)):\n        for j in range(len(t)):\n            if s[i]==t[j]:\n                if i not in index:\n                    index[i] = [j]\n                else:\n                    index[i].append(j)\n    max_index = 0\n    max_length = 0\n    for i in index:\n        if len(index[i])>max_length:\n            max_index = i\n            max_length = len(index[i])\n    return s[max_index:max_index+max_length]\ndef find_nth(s,n):\n    '''\n    Write a function to find the nth occurrence of a substring in a string.\n    '''\n    n -= 1\n    start = 0\n    while True:\n        try:\n            start = s.index(s[start:start+n],start)\n        except:\n            break\n    return start\ndef left_rotate_string(s,n):\n    '''\n    Write a function to rotate a string.\n    '''\n    n = n%len(s)\n    return s[n:]+s[:n]\ndef left_rotate_string_n_times(s,n):\n    '''\n    Write a function to rotate a string n times.\n    '''\n    n = n%len(s)\n    return s[n:]+s[:n]\ndef check_valid_username(username):\n    '''\n    Write a function to check whether a string is a valid username.\n    '''\n    if len(username)<6 or len(username)>16:\n        return False\n    elif not re.search('[a-z]',username):\n        return False\n    elif not re.search('[0-9]',username):\n        return False\n    elif not re.search('[A-Z]',username):\n        return False\n    elif not re.search('[_@]',username):\n        return False\n    elif re.search('\\s',username):\n        return False\n    else:\n        return True\ndef count_vowels(s):\n    '''\n    Write a function to count vowels in a string.\n    '''\n    vowels = {'a':0,'e':0,'i':0,'o':0,'u':0}\n    for i in s:\n        if i in vowels:\n            vowels[i]+=1\n    return vowels\ndef remove_vowels(s):\n    '''\n    Write a function to remove vowels from a string.\n    '''\n    res = ''\n    vowels = ['a','e','i','o','u']\n    for i in s:\n        if i not in vowels:\n            res+=i\n    return res\ndef palindrome_permutation_2(s):\n    '''\n    Write a function to check whether a string is a permutation of a palindrome.\n    '''\n    res = {}\n    for i in s:\n        if i not in res:\n            res[i]=1\n        else:\n            res[i]+=1\n    count = 0\n    for i in res:\n        if res[i]%2==1:\n            count+=1\n    return count<2\ndef longest_common_substring_",
        "num_ids": 84
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    index=0\n    while index < len(text):\n        m=re.search(pattern,text[index:])\n        if m is None:\n            return None\n        else:\n            if m.start(1)>=0:\n                return m.start(1),m.end(1)\n            else:\n                return m.start(0),m.end(0)\n        index=index+m.start(1)\n    \ndef number_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    index=0\n    while index < len(text):\n        m=re.search(pattern,text[index:])\n        if m is None:\n            return None\n        else:\n            if m.start(1)>=0:\n                return m.start(1),m.end(1)\n            else:\n                return m.start(0),m.end(0)\n        index=index+m.start(1)\n    \ndef length_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    index=0\n    while index < len(text):\n        m=re.search(pattern,text[index:])\n        if m is None:\n            return None\n        else:\n            if m.start(1)>=0:\n                return m.start(1),m.end(1)\n            else:\n                return m.start(0),m.end(0)\n        index=index+m.start(1)\n    \ndef sub_string(text,pattern,offset=0):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    index=0\n    while index < len(text):\n        m=re.search(pattern,text[index+offset:])\n        if m is None:\n            return None\n        else:\n            if m.start(1)>=0:\n                return m.start(1)+offset,m.end(1)+offset\n            else:\n                return m.start(0)+offset,m.end(0)+offset\n        index=index+m.start(1)\n        \ndef find_sub_string(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    index=0\n    while index < len(text):\n        m=re.search(pattern,text[index:])\n        if m is None:\n            return None\n        else:\n            if m.start(1)>=0:\n                return m.start(1),m.end(1)\n            else:\n                return m.start(0),m.end(0)\n        index=index+m.start(1)\n    \ndef sub_string_no_offset(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    index=0\n    while index < len(text):\n        m=re.search(pattern,text[index:])\n        if m is None:\n            return None\n        else:\n            if m.start(1)>=0:\n                return m.start(1),m.end(1)\n            else:\n                return m.start(0),m.end(0)\n        index=index+m.start(1)\n    \ndef find_sub_string_no_offset(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    index=0\n    while index < len(text):\n        m=re.search(pattern,text[index:])\n        if m is None:\n            return None\n        else:\n            if m.start(1)>=0:\n                return m.start(1),m.end(1)\n            else:\n                return m.start(0),m.end(0)\n        index=index+m.start(1)\n    \ndef number_substring_start(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    index=0\n    while index < len(text):\n        m=re.search(pattern,text[index:])\n        if m is None:\n            return None\n        else:\n            if m.start(1)>=0:\n                return m.start(1),m.end(1)\n            else:\n                return m.start(0),m.end(0)\n        index=index+m.start(1)\n    \ndef number_substring_end(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    index=0\n    while index < len(text):\n        m=re.search(pattern,text[index:])\n        if m is None:\n            return None\n        else:\n            if m.start(1)>=0:\n                return m.start(1),m.end(1)\n            else:\n                return m.start(0),m.end(0)\n        index=index+m.start(1)\n    \ndef length_substring_start(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    index=0\n    while index < len(text):\n        m=re.search(pattern,text[index:])\n        if m is None:\n            return None\n        else:\n            if m.start(1)>=0:\n                return m.start(1),m.end(1)\n            else:\n                return m.start(0),m.end(0)\n        index=index+m.start(1)\n    \ndef length_substring_end(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    index=0\n    while index < len(text):\n        m=re.search(pattern,text[index:])\n        if m is None:\n            return None\n        else:\n            if m.start(1)>=0:\n                return m.start(1),m.end(1)\n            else:\n                return m.start(0),m.end(0)\n        index=index+m.start(1)\n    \ndef length_substring_middle(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    index=0\n    while index < len(text):\n        m=re.search(pattern,text[index:])\n        if m is None:\n            return None\n        else:\n            if m.start(1)>=0:\n                return m.start(1),m.end(1)\n            else:\n                return m.start(0),m.end(0)\n        index=index+m.start(1)\n    \ndef sub_string_middle(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    index=0\n    while index < len(text):\n        m=re.search(pattern,text[index:])\n        if m is None:\n            return None\n        else:\n            if m.start(1)>=0:\n                return m.start(1)+index,m.end(1)+index\n            else:\n                return m.start(0)+index,m.end(0)+index\n        index=index+m.start(1)\n    \ndef sub_string_start_no_offset(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is n",
        "num_ids": 26
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #length of the pattern\n    len_pattern = len(pattern)\n    #length of the text\n    len_text = len(text)\n    #make a hashmap to hold the result\n    hashmap = {}\n    #go through every index in text\n    for i in range(len_text-len_pattern+1):\n        #if the match is found\n        if text[i:i+len_pattern] == pattern:\n            #if the pattern is already in the hashmap\n            if pattern in hashmap:\n                #increase the count\n                hashmap[pattern] += 1\n            #if the pattern is not in the hashmap\n            else:\n                #add the pattern to the hashmap\n                hashmap[pattern] = 1\n    #check if there is a match\n    if len(hashmap) > 0:\n        #get the maximum count\n        max_count = max(hashmap.values())\n        #go through the hashmap to find the maximum count\n        for key in hashmap:\n            #if the count is equal to the max count\n            if hashmap[key] == max_count:\n                #return the position and the pattern\n                return i,key\n    #return None\n    return None\n",
        "num_ids": 284
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    m = re.findall(pattern,text)\n    if m:\n        print(m)\n    else:\n        print('None')\n",
        "num_ids": 36
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        return [m.start() for m in re.finditer(pattern, text)]\n    except Exception:\n        return None\n",
        "num_ids": 35
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance=[]\n    count=0\n    for i in range(len(text)):\n        if text[i:i+len(pattern)]==pattern:\n            occurance.append(i+1)\n            count+=1\n    return count\n",
        "num_ids": 61
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern=pattern.lower()\n    text=text.lower()\n    text=text.replace(' ','')\n    pattern=pattern.replace(' ','')\n    pos=0\n    positions=[]\n    while pos<len(text):\n        if text[pos:].startswith(pattern):\n            positions.append(pos)\n            pos+=len(pattern)\n        else:\n            pos+=1\n    return positions\ndef check_palindrome(string):\n    '''\n    Write a function that takes a string as input and returns True if the string is a palindrome and False otherwise.\n    '''\n    string=string.lower()\n    string=string.replace(' ','')\n    pos=0\n    positions=[]\n    while pos<len(string):\n        if string[pos]!=string[len(string)-pos-1]:\n            return False\n        pos+=1\n    return True\ndef check_palin(string):\n    '''\n    Write a function that takes a string as input and returns True if the string is a palindrome and False otherwise.\n    '''\n    string=string.lower()\n    pos=0\n    positions=[]\n    while pos<len(string):\n        if string[pos]!=string[len(string)-pos-1]:\n            positions.append(pos)\n        pos+=1\n    if len(positions)>1:\n        return False\n    return True\ndef check_permutation(text1,text2):\n    '''\n    Write a function to check if one word is a permutation of the other.\n    '''\n    text1=text1.lower()\n    text2=text2.lower()\n    text1=text1.replace(' ','')\n    text2=text2.replace(' ','')\n    if len(text1)!=len(text2):\n        return False\n    pos=0\n    positions1=[]\n    while pos<len(text1):\n        if text1[pos] in text2:\n            positions1.append(pos)\n        pos+=1\n    pos=0\n    positions2=[]\n    while pos<len(text2):\n        if text2[pos] in text1:\n            positions2.append(pos)\n        pos+=1\n    if len(positions1)!=len(positions2):\n        return False\n    return True\ndef string_permutation(string1,string2):\n    '''\n    Write a function that takes two strings as input and returns True if the strings are permutations of each other.\n    '''\n    string1=string1.lower()\n    string2=string2.lower()\n    string1=string1.replace(' ','')\n    string2=string2.replace(' ','')\n    if len(string1)!=len(string2):\n        return False\n    pos=0\n    positions1=[]\n    while pos<len(string1):\n        if string1[pos] in string2:\n            positions1.append(pos)\n        pos+=1\n    pos=0\n    positions2=[]\n    while pos<len(string2):\n        if string2[pos] in string1:\n            positions2.append(pos)\n        pos+=1\n    if len(positions1)!=len(positions2):\n        return False\n    return True\ndef are_anagrams(string1,string2):\n    '''\n    Write a function that takes two strings as input and returns True if the strings are anagrams of each other and False otherwise.\n    '''\n    string1=string1.lower()\n    string2=string2.lower()\n    string1=string1.replace(' ','')\n    string2=string2.replace(' ','')\n    if len(string1)!=len(string2):\n        return False\n    pos=0\n    positions1=[]\n    while pos<len(string1):\n        if string1[pos] in string2:\n            positions1.append(pos)\n        pos+=1\n    pos=0\n    positions2=[]\n    while pos<len(string2):\n        if string2[pos] in string1:\n            positions2.append(pos)\n        pos+=1\n    if len(positions1)!=len(positions2):\n        return False\n    return True\ndef find_missing_letter(text):\n    '''\n    Write a function that takes a string as input and returns a list of all the missing letters in the string.\n    '''\n    text=text.lower()\n    text=text.replace(' ','')\n    pos=0\n    letters=[]\n    while pos<len(text):\n        if ord(text[pos])>=97 and ord(text[pos])<=122:\n            letters.append(chr(ord(text[pos])-32))\n        pos+=1\n    pos=0\n    while pos<len(letters):\n        if letters[pos] not in text:\n            letters.pop(pos)\n        pos+=1\n    return letters\ndef find_missing_letter_2(text):\n    '''\n    Write a function that takes a string as input and returns a list of all the missing letters in the string.\n    '''\n    text=text.lower()\n    pos=0\n    letters=[]\n    while pos<len(text):\n        if ord(text[pos])>=97 and ord(text[pos])<=122:\n            letters.append(chr(ord(text[pos])-32))\n        pos+=1\n    pos=0\n    while pos<len(letters):\n        if letters[pos] not in text:\n            letters.pop(pos)\n        pos+=1\n    return letters\ndef is_pangram(string):\n    '''\n    Write a function that takes a string as input and returns True if the string is a pangram and False otherwise.\n    '''\n    string=string.lower()\n    string=string.replace(' ','')\n    string=string.replace(',','')\n    if len(string)<26:\n        return False\n    return True\ndef is_pangram_2(string):\n    '''\n    Write a function that takes a string as input and returns True if the string is a pangram and False otherwise.\n    '''\n    string=string.lower()\n    string=string.replace(' ','')\n    string=string.replace(',','')\n    if len(string)<26:\n        return False\n    for i in range(97,123):\n        if chr(i) not in string:\n            return False\n    return True\ndef is_pangram_3(string):\n    '''\n    Write a function that takes a string as input and returns True if the string is a pangram and False otherwise.\n    '''\n    string=string.lower()\n    string=string.replace(' ','')\n    string=string.replace(',','')\n    if len(string)<26:\n        return False\n    for i in range(97,123):\n        if chr(i) not in string:\n            return False\n    return True\ndef count_vowels(string):\n    '''\n    Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in the string.\n    '''\n    string=string.lower()\n    string=string.replace(' ','')\n    vowels=0\n    for i in range(97,123):\n        if chr(i) in string:\n            vowels+=1\n    return vowels\ndef count_vowels_2(string):\n    '''\n    Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in the string.\n    '''\n    string=string.lower()\n    string=string.replace(' ','')\n    vowels=0\n    for i in range(97,123):\n        if chr(i) in string:\n            vowels+=1\n    return vowels\ndef count_vowels_3(string):\n    '''\n    Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in the string.\n    '''\n    string=string.lower()\n    string=string.replace(' ','')\n    vowels=",
        "num_ids": 26
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if type(text)==str and type(pattern)==str:\n        text_len=len(text)\n        pattern_len=len(pattern)\n        if text_len<pattern_len:\n            return None\n        pattern_hash=0\n        for i in range(text_len-pattern_len+1):\n            substring=text[i:i+pattern_len]\n            if substring==pattern:\n                return 'Found substring at position {}'.format(i)\n        return None\n    else:\n        return None\n",
        "num_ids": 128
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    new_nums = []\n    for i in range(0, len(nums), 2):\n        new_nums.append(nums[i])\n    return new_nums\n",
        "num_ids": 47
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i]%2!= 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if not nums[i] % 2:\n            return False\n    return True\n",
        "num_ids": 38
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if (nums[i]%2) == 1:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(num%2==1 for num in nums)\n",
        "num_ids": 18
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n    \ndef even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n    \ndef list_check(nums):\n    '''\n    Write a python function to check whether a list of numbers is sorted in ascending order.\n    '''\n    for i in range(1, len(nums)):\n        if nums[i] < nums[i - 1]:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for index in range(len(nums)):\n        if nums[index] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums)):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for num in nums:\n        if nums[num-1] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 34
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    nums_len = len(nums)\n    for i in range(0, nums_len-1, 2):\n        if (nums[i] % 2)!= 0:\n            print(\"Odd position at {}: {}\".format(i, nums[i]))\n",
        "num_ids": 69
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    if not isinstance(test_str,str):\n        return False\n    vowel_dict = {'a':0,'e':0,'i':0,'o':0,'u':0}\n    for i in range(1,len(test_str)-1):\n        if test_str[i-1] == 'a' and test_str[i] in vowel_dict and test_str[i+1] == 'a':\n            vowel_dict[test_str[i]] += 1\n    return vowel_dict\n",
        "num_ids": 127
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_count = 0\n    for i in xrange(len(test_str) - 1):\n        if test_str[i] in 'aeiou':\n            if test_str[i + 1] in 'aeiou':\n                vowel_count += 1\n    return vowel_count\n",
        "num_ids": 75
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    if type(test_str)!= str:\n        return 0\n",
        "num_ids": 18
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 0\n    for i in range(len(test_str)):\n        if test_str[i-1] in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'] and test_str[i+1] in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']:\n            vowels += 1\n    return vowels\n",
        "num_ids": 118
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    res = 0\n    for i in range(len(test_str)):\n        if test_str[i] == 'a' or test_str[i] == 'e' or test_str[i] == 'i' or test_str[i] == 'o' or test_str[i] == 'u':\n            res += 1\n    return res\n",
        "num_ids": 87
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    test_str = list(test_str)\n    print test_str\n    vowels = [x for x in test_str if x in ['a','e','i','o','u']]\n    print vowels\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "num_ids": 110
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    total = 0\n    for i in range(len(test_str)):\n        if test_str[i-1] in 'aeiou' and test_str[i+1] in 'aeiou':\n            total += 1\n    return total\n",
        "num_ids": 62
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in 'aeiouAEIOU':\n            vowel_count += 1\n    return vowel_count\n",
        "num_ids": 58
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    vowels = 0\n    for i in range(0, len(test_str) - 1):\n        if test_str[i] in ['a', 'e', 'i', 'o', 'u']:\n            if test_str[i + 1] in ['a', 'e', 'i', 'o', 'u']:\n                vowels += 1\n            else:\n                vowels += 0\n        else:\n            vowels += 0\n    return vowels\n",
        "num_ids": 117
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels_dict = {}\n    for i in range(len(test_str) - 1):\n        if test_str[i] in ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'):\n            if test_str[i + 1] in ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'):\n                vowels_dict.setdefault(test_str[i] + test_str[i + 1], 0)\n                vowels_dict[test_str[i] + test_str[i + 1]] += 1\n    return vowels_dict\n",
        "num_ids": 171
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(0,len(arr)):\n        sum += arr[i]\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    ans = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            ans = ans + i\n    print ans\n",
        "num_ids": 39
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    summation = 0\n    for i in arr:\n        summation += i\n    return summation\n",
        "num_ids": 28
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # TODO: complete this function\n    res = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            res += i\n    return res\n",
        "num_ids": 44
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    if arr == []:\n        return 0\n    else:\n        non_repeated = 0\n        for i in arr:\n            if i not in arr[arr.index(i)+1:]:\n                non_repeated += i\n        return non_repeated\n",
        "num_ids": 64
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = 0\n    for i in arr:\n        if arr.count(i) > 1:\n            pass\n        else:\n            s += i\n    return s\n",
        "num_ids": 42
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    total = 0\n    for elt in arr:\n        if elt not in arr[arr.index(elt):]:\n            total += elt\n    return total\n",
        "num_ids": 41
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    n = len(arr)\n    count = {}\n    for i in arr:\n        if i not in count:\n            count[i] = 1\n        else:\n            count[i] += 1\n    for key,value in count.items():\n        if value == 1:\n            return key\n",
        "num_ids": 72
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # return sum(set(arr))\n    return sum(filter(lambda x: arr.count(x) == 1, arr))\n",
        "num_ids": 33
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    d = {}\n    for i in arr:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n",
        "num_ids": 41
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(g) for k, g in groupby(list1)]\n",
        "num_ids": 21
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if not list1:\n        return []\n    k, iter1 = 0, groupby(list1)\n    for i, j in iter1:\n        k = len(list(j))\n        if k > 1:\n            list1[k-1:k] = [[i, k]]\n    return list1\ndef reverse_pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if not list1:\n        return []\n    k, iter1 = 0, groupby(list1)\n    for i, j in iter1:\n        k = len(list(j))\n        if k > 1:\n            list1[k-1:k] = [[i, k]]\n    for i in range(len(list1)):\n        list1[i] = list1[i][::-1]\n    return list1\nlist1 = [1, 1, 2, 2, 3, 3, 4, 4, 5, 6]\nreverse_pack_consecutive_duplicates(list1)\nprint(list1)\ndef reverse_pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if not list1:\n        return []\n    k, iter1 = 0, groupby(list1)\n    for i, j in iter1:\n        k = len(list(j))\n        if k > 1:\n            list1[k-1:k] = [[i, k]]\n    for i in range(len(list1)):\n        list1[i] = list1[i][::-1]\n    return list1\ndef reverse_pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if not list1:\n        return []\n    k, iter1 = 0, groupby(list1)\n    for i, j in iter1:\n        k = len(list(j))\n        if k > 1:\n            list1[k-1:k] = [[i, k]]\n    for i in range(len(list1)):\n        list1[i] = list1[i][::-1]\n    return list1\ndef reverse_pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if not list1:\n        return []\n    k, iter1 = 0, groupby(list1)\n    for i, j in iter1:\n        k = len(list(j))\n        if k > 1:\n            list1[k-1:k] = [[i, k]]\n    for i in range(len(list1)):\n        list1[i] = list1[i][::-1]\n    return list1\ndef reverse_pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if not list1:\n        return []\n    k, iter1 = 0, groupby(list1)\n    for i, j in iter1:\n        k = len(list(j))\n        if k > 1:\n            list1[k-1:k] = [[i, k]]\n    for i in range(len(list1)):\n        list1[i] = list1[i][::-1]\n    return list1\ndef reverse_pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if not list1:\n        return []\n    k, iter1 = 0, groupby(list1)\n    for i, j in iter1:\n        k = len(list(j))\n        if k > 1:\n            list1[k-1:k] = [[i, k]]\n    for i in range(len(list1)):\n        list1[i] = list1[i][::-1]\n    return list1\ndef reverse_pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if not list1:\n        return []\n    k, iter1 = 0, groupby(list1)\n    for i, j in iter1:\n        k = len(list(j))\n        if k > 1:\n            list1[k-1:k] = [[i, k]]\n    for i in range(len(list1)):\n        list1[i] = list1[i][::-1]\n    return list1\ndef reverse_pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if not list1:\n        return []\n    k, iter1 = 0, groupby(list1)\n    for i, j in iter1:\n        k = len(list(j))\n        if k > 1:\n            list1[k-1:k] = [[i, k]]\n    for i in range(len(list1)):\n        list1[i] = list1[i][::-1]\n    return list1\ndef reverse_pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if not list1:\n        return []\n    k, iter1 = 0, groupby(list1)\n    for i, j in iter1:\n        k = len(list(j))\n        if k > 1:\n            list1[k-1:k] = [[i, k]]\n    for i in range(len(list1)):\n        list1[i] = list1[i][::-1]\n    return list1\ndef reverse_pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if not list1:\n        return []\n    k, iter1 = 0, groupby(list1)\n    for i, j in iter1:\n        k = len(list(j))\n        if k > 1:\n            list1[k-1:k] = [[i, k]]\n    for i in range(len(list1)):\n        list1[i] = list1[i][::-1]\n    return list1\ndef reverse_pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if not list1:\n        return []\n    k, iter1 = 0, groupby(list1)\n    for i, j in iter1:\n        k = len(list(j))\n        if k > 1:\n            list1[k-1:k] = [[i, k]]\n    for i in range(len(list1)):\n        list1[i] = list1[i][::-1]\n    return list1\ndef reverse_pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if not list1:\n        return []\n    k, iter1 = 0, groupby(list1)\n    for i, j in iter1:\n        k = len(list(j))\n        if k > 1:\n            list1[k-1:k] = [[i, k]]\n    for i in range(len(list1)):\n        list1[i] = list1[i][::-1]\n    return list1\ndef reverse_pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if not list1:\n        return []\n    k, iter1 = 0, groupby(list1)\n    for i, j in iter1:\n        k = len(list(",
        "num_ids": 45
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    final_list=[]\n    for k,g in groupby(list1):\n        final_list.append(list(g))\n    return final_list\n",
        "num_ids": 40
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # the following method returns a new list with the elements in the same group\n    # and the elements in consecutive groups.\n    groups = [(k, [list1[i] for i in g]) for k,g in groupby(enumerate(list1), lambda i:i[0] - i[1])]\n    return [[u for i, u in g] for k, g in groups if len(g) > 1]\n    \n    # the following method would work, but is much slower.\n    #new_list = []\n    #for k, g in groups:\n    #    if len(g) > 1:\n    #        new_list.append([list1[i] for i in g])\n    #return new_list\n    \n",
        "num_ids": 176
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if not list1:\n        return list1\n    final_list = []\n    list1 = sorted(list1)\n    grouped = groupby(list1)\n    for key, group in grouped:\n        final_list.append([key] + list(group))\n    return final_list\n",
        "num_ids": 72
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = [[list1[0]]]\n    for k, g in groupby(enumerate(list1[1:]), lambda ix: ix[0] - ix[1]):\n        result[-1].extend(map(lambda ix: ix[1], list(g)))\n    return result\n",
        "num_ids": 78
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [[x] for x,y in groupby(list1)]\n",
        "num_ids": 19
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(g) for k,g in groupby(list1)]\n",
        "num_ids": 21
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # print([item for item, group in groupby(list1) if len(list(group))>1])\n    sublist = []\n    for key, group in groupby(list1):\n        if len(list(group))>1:\n            sublist.append([item for item in list(group)])\n        else:\n            sublist.append([key])\n    return sublist\n",
        "num_ids": 94
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = []\n    for k, g in groupby(list1):\n        list2.append(list(g))\n    return list2\n",
        "num_ids": 37
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dictionary = {}\n    for index, item in enumerate(list1):\n        if item in dictionary:\n            dictionary[item] += 1\n        else:\n            dictionary[item] = 1\n        list1[index] = tuple(item)\n    return dictionary\n",
        "num_ids": 66
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    output = {}\n    for i in list1:\n        if isinstance(i,list):\n            out = tuple(i)\n            output[out] = output.get(out,0) + 1\n    return output\n",
        "num_ids": 54
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    import itertools\n    from collections import Counter\n    count = Counter(list1)\n    return { key : count.values() for key in count.keys() }\n",
        "num_ids": 41
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dic = {}\n    for i in range(0, len(list1)):\n        if tuple(list1[i]) not in dic.keys():\n            dic[tuple(list1[i])] = 1\n        else:\n            dic[tuple(list1[i])] += 1\n    return dic\n",
        "num_ids": 81
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_dic = {}\n    for sublist in list1:\n        if type(sublist) == list:\n            sublist = tuple(sublist)\n            if sublist in sublist_dic:\n                sublist_dic[sublist] += 1\n            else:\n                sublist_dic[sublist] = 1\n    return sublist_dic\n",
        "num_ids": 91
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    #we use a dictionary to store all the unique values and their counts\n    counts = {}\n    for i in list1:\n        counts[tuple(i)] = counts.get(tuple(i),0) + 1\n    return counts\n",
        "num_ids": 60
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    from itertools import groupby\n    return {key: len(list(group)) for key, group in groupby(list1)}\n",
        "num_ids": 34
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # input_list = [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]\n    # output = [([1, 2, 3], 2), ([1, 2, 3], 2), ([1, 2, 3], 2), ([1, 2, 3], 2)]\n    # unique_sublists(input_list) == output\n    # output = [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]\n    # unique_sublists(input_list) == output\n    # output = [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]\n    # unique_sublists(input_list) == output\n    # output = [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]\n    # unique_sublists(input_list) == output\n    # output = [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]\n    # unique_sublists(input_list) == output\n    # output = [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]\n    # unique_sublists(input_list) == output\n    # output = [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]\n    # unique_sublists(input_list) == output\n    # output = [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]\n    # unique_sublists(input_list) == output\n    # output = [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]\n    # unique_sublists(input_list) == output\n    # output
        "num_ids": 1987
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_of_lists = []\n    for i in list1:\n        if isinstance(i,list):\n            list_of_lists.append(tuple(i))\n    dictionary = {}\n    for i in list_of_lists:\n        if i not in dictionary.keys():\n            dictionary[i] = 1\n        else:\n            dictionary[i] += 1\n    return dictionary\n",
        "num_ids": 97
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    # Your Code Here\n",
        "num_ids": 10
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result_list = []\n    for combo in combinations(test_list,2):\n        result_list.append(combo)\n    return result_list\n",
        "num_ids": 39
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    count = len(test_list)\n    solutions = []\n    for i in range(1,count+1):\n        for comb in combinations(test_list, i):\n            if sum(comb) == 0:\n                solutions.append(comb)\n    return solutions\n",
        "num_ids": 67
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in test_list:\n        for j in combinations(test_list, i):\n            print(j)\nfind_combinations([(4, 5, 6), (7, 8, 9)])\n",
        "num_ids": 51
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    new_list = []\n    for i in range(0,len(test_list)):\n        for j in range(i+1,len(test_list)):\n            new_list.append((test_list[i],test_list[j]))\n    return new_list\n",
        "num_ids": 70
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #list of tuples\n    for i in xrange(1, len(test_list) + 1):\n        for j in combinations(test_list, i):\n            print j\n",
        "num_ids": 45
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_sum = []\n    for i in test_list:\n        combinations_sum.append(i)\n    for i in combinations(combinations_sum, 2):\n        print i\n",
        "num_ids": 48
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total = len(test_list)\n    subset = []\n    for i in range(1,total):\n        subset.append(combinations(test_list,i))\n    return subset\n",
        "num_ids": 49
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #solution 1:\n    summ=0\n    output_list=[]\n    length=len(test_list)\n    if length==0:\n        return output_list\n    else:\n        for i in range(length):\n            summ=0\n            for j in range(length):\n                summ=summ+test_list[j][i]\n            output_list.append(summ)\n    return output_list\n",
        "num_ids": 106
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    for a,b in test_list:\n        if (a,b) not in res:\n            res.append((a,b))\n        else:\n            continue\n    return res\n",
        "num_ids": 51
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1,len(test_list)):\n        for j in combinations(test_list,i):\n            result.append(sum(j))\n    return result\n",
        "num_ids": 50
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n + 1) :\n        if n % i == 0 :\n            count += 1\n    return count \ndef sum_of_divisors(n) :\n    '''\n    Write a python function to calculate the sum of divisors\n    '''\n    divisors = 0\n    for i in range(1, n + 1) :\n        if n % i == 0 :\n            divisors += i\n    return divisors \ndef sum_of_sqr_divisors(n) :\n    '''\n    Write a python function to calculate the sum of square of divisors. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    divisors = 0\n    for i in range(1, n + 1) :\n        if n % i == 0 :\n            divisors += i * i\n    return divisors \ndef is_prime(n) :\n    '''\n    Write a python function to check whether the number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    if n == 1 :\n        return False\n    elif n == 2 :\n        return True\n    elif n > 2 :\n        for i in range(2, n) :\n            if n % i == 0 :\n                return False\n        return True \ndef is_armstrong(n) :\n    '''\n    Write a python function to check whether the number is armstrong or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    sum = 0\n    temp = n\n    while temp > 0 :\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if n == sum :\n        return True\n    else :\n        return False\ndef is_palindrome(n) :\n    '''\n    Write a python function to check whether the number is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    if n < 0 :\n        return False\n    temp = n\n    sum = 0\n    while temp > 0 :\n        digit = temp % 10\n        sum += digit\n        temp //= 10\n    if sum == n :\n        return True\n    else :\n        return False\ndef is_palin_digit_num(n) :\n    '''\n    Write a python function to check whether the number is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    temp = n\n    sum = 0\n    while temp > 0 :\n        digit = temp % 10\n        sum += digit\n        temp //= 10\n    return sum \ndef is_perfect_num(n) :\n    '''\n    Write a python function to check whether the number is perfect or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    sum = 0\n    for i in range(1, n) :\n        if n % i == 0 :\n            sum += i\n    if sum == n :\n        return True\n    else :\n        return False\ndef is_perfect_num_optimized(n) :\n    '''\n    Write a python function to check whether the number is perfect or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if n == 1 :\n        return False\n    return sum([x for x in range(1, n) if n % x == 0]) == n\ndef is_perfect_num_optimized(n) :\n    '''\n    Write a python function to check whether the number is perfect or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if n == 1 :\n        return False\n    return sum([x for x in range(1, n) if n % x == 0]) == n\ndef is_perfect_num_optimized(n) :\n    '''\n    Write a python function to check whether the number is perfect or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if n == 1 :\n        return False\n    return sum([x for x in range(1, n) if n % x == 0]) == n\ndef is_perfect_num_optimized(n) :\n    '''\n    Write a python function to check whether the number is perfect or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if n == 1 :\n        return False\n    return sum([x for x in range(1, n) if n % x == 0]) == n\ndef is_perfect_num_optimized(n) :\n    '''\n    Write a python function to check whether the number is perfect or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if n == 1 :\n        return False\n    return sum([x for x in range(1, n) if n % x == 0]) == n\ndef is_perfect_num_optimized(n) :\n    '''\n    Write a python function to check whether the number is perfect or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if n == 1 :\n        return False\n    return sum([x for x in range(1, n) if n % x == 0]) == n\ndef is_perfect_num_optimized(n) :\n    '''\n    Write a python function to check whether the number is perfect or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if n == 1 :\n        return False\n    return sum([x for x in range(1, n) if n % x == 0]) == n\ndef is_perfect_num_optimized(n) :\n    '''\n    Write a python function to check whether the number is perfect or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if n == 1 :\n        return False\n    return sum([x for x in range(1, n) if n % x == 0]) == n\ndef is_perfect_num_optimized(n) :\n    '''\n    Write a python function to check whether the number is perfect or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if n == 1 :\n        return False\n    return sum([x for x in range(1, n) if n % x == 0]) == n\ndef is_perfect_num_optimized(n) :\n    '''\n    Write a python function to check whether the number is perfect or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if n == 1 :\n        return False\n    return sum([x for x in range(1, n) if n % x == 0]) == n\ndef is_perfect_num_optimized(n) :\n    '''\n    Write a python function to check whether the number is perfect or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if n == 1 :\n        return False\n    return sum([x for x in range(1, n) if n % x == 0]) == n\ndef is_perfect_num",
        "num_ids": 43
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors_count = 0\n    i = 1\n    while i < (n/2) + 1 :\n        if n%i == 0 :\n            divisors_count += 1\n        i += 1\n    if divisors_count%2 == 0 :\n        return True\n    else :\n        return False\n",
        "num_ids": 77
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n==1) :\n        return 1\n    else :\n        sqrt = int(math.sqrt(n))\n        divisors = 1\n        for x in range(2,sqrt+1) :\n            if (n%x == 0) :\n                divisors+=1\n        if sqrt*sqrt == n :\n            divisors-=1\n        if divisors%2 == 0 :\n            return 1\n        else :\n            return 0\n",
        "num_ids": 115
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    i = 1\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            divisors += 2\n        i += 1\n    return divisors % 2 == 0\n",
        "num_ids": 57
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i==0:\n            if n/i==i:\n                divisors+=1\n            else:\n                divisors+=2\n    return divisors\n",
        "num_ids": 72
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, n) : \n        if n % i == 0 : \n            divisors += 1\n    return divisors \n",
        "num_ids": 46
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n < 1 :\n        return\n    divisors = 1\n    for i in range(2, int(math.sqrt(n))+1) :\n        if n % i == 0 :\n            divisors += 2\n    return divisors\n",
        "num_ids": 63
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,int(math.sqrt(n))+1):\n        if n % i == 0 :\n            count += 2\n        if n % i == 0 and i!= 1 :\n            count += 1\n    if count % 2 == 0 :\n        return True\n    else :\n        return False\n",
        "num_ids": 82
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n < 0:\n        return -1\n    divisors = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            divisors += 1\n        i += 1\n    if divisors%2 == 0:\n        return True\n    else :\n        return False\n",
        "num_ids": 77
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n) : \n        if n % i == 0 : \n            count += 1\n    return count \ndef sieve(n) : \n    '''\n    Write a python function to calculate all prime numbers upto a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-22.php\n    '''\n    # Sieve of Eratosthenes\n    result = []\n    for i in range(2, n + 1) : \n        result.append(i)\n    current = 2\n    while (current <= int(math.sqrt(n))) :\n        if current in result :\n            for i in range(current * 2, n + 1, current) :\n                if i in result :\n                    result.remove(i)\n        current += 1\n    return result\ndef gcd(a, b) : \n    '''\n    Write a python function to calculate the gcd of two numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\n    '''\n    if a > b : \n        return gcd(a - b, b)\n    return gcd(a, b - a)\ndef sum_of_digits(n) : \n    '''\n    Write a python function to calculate the sum of the digits of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    total = 0\n    for i in str(n) : \n        total += int(i)\n    return total\ndef sum_of_squares(n) : \n    '''\n    Write a python function to calculate the sum of the squares of the digits of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    total = 0\n    while n > 0 : \n        i = n % 10\n        total += i * i\n        n //= 10\n    return total\ndef power_of_a_number(a, n) : \n    '''\n    Write a python function to calculate a number raised to the nth power. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    total = 1\n    while n > 0 : \n        total *= a\n        n -= 1\n    return total\ndef is_perfect_square(n) : \n    '''\n    Write a python function to check whether a number is perfect square or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    n_sqrt = n ** 0.5\n    if n_sqrt % 1 == 0 : \n        return True\n    return False\ndef factorial(n) : \n    '''\n    Write a python function to calculate factorial of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    if n == 0 : \n        return 1\n    return n * factorial(n - 1)\ndef is_palindrome(n) : \n    '''\n    Write a python function to check whether a number is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    t = n\n    rev = 0\n    while t > 0 : \n        rem = t % 10\n        rev = rev * 10 + rem\n        t //= 10\n    if n == rev : \n        return True\n    return False\ndef is_anagram(a, b) : \n    '''\n    Write a python function to check whether two strings are anagrams or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    if len(a) == len(b) : \n        a = a.replace(\" \", \"\")\n        b = b.replace(\" \", \"\")\n        if a == b : \n            return True\n        return False\n    return False\ndef factorial(n) : \n    '''\n    Write a python function to calculate factorial of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    if n == 0 : \n        return 1\n    return n * factorial(n - 1)\ndef palindrome_number(n) : \n    '''\n    Write a python function to check whether a number is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    n_sqrt = n ** 0.5\n    if n_sqrt % 1 == 0 : \n        n_sqrt = int(n_sqrt)\n        n_sqrt = str(n_sqrt)\n        if n_sqrt[0] == n_sqrt[-1] : \n            return True\n        return False\n    return False\ndef palindrome_number_iterative(n) : \n    '''\n    Write a python function to check whether a number is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    n_sqrt = n ** 0.5\n    if n_sqrt % 1 == 0 : \n        n_sqrt = int(n_sqrt)\n        n_sqrt = str(n_sqrt)\n        t = n_sqrt[0]\n        rev = n_sqrt[-1]\n        while n_sqrt > 0 : \n            if t!= rev : \n                return False\n            t = n_sqrt[0]\n            rev = n_sqrt[-1]\n            n_sqrt //= 10\n        return True\n    return False\ndef is_palindrome(n) : \n    '''\n    Write a python function to check whether a number is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    n_sqrt = n ** 0.5\n    if n_sqrt % 1 == 0 : \n        n_sqrt = int(n_sqrt)\n        n_sqrt = str(n_sqrt)\n        t = n_sqrt[0]\n        rev = n_sqrt[-1]\n        while n_sqrt > 0 : \n            if t!= rev : \n                return False\n            t = n_sqrt[0]\n            rev = n_sqrt[-1]\n            n_sqrt //= 10\n        return True\n    return False\ndef is_anagram(a, b) : \n    '''\n    Write a python function to check whether two strings are anagram or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    a = a.replace(\" \", \"\")\n    b = b.replace(\" \", \"\")\n    if len(a) == len(b) : \n        a = a.lower()\n        b = b.lower()\n        if a == b : \n            return True\n        return False\n    return False\ndef is_anagram_iterative(a, b) : \n    '''\n    Write a python function to check whether two strings are anagram or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    a = a.replace(\" \", \"\")\n    b = b.replace(\" \", \"\")\n    a = a.lower()\n    b = b.lower()\n    for i in a : \n        if i not in b : \n            return False\n        b = b.replac",
        "num_ids": 68
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n",
        "num_ids": 29
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if (j + 1) % 2!= 0:\n                sum += arr[i][j]\n    return sum\n",
        "num_ids": 61
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if arr == []:\n        return 0\n    \n    # Base Case: If there is only one element, then sum of odd length subarrays is equal to that element\n    if len(arr) == 1:\n        return arr[0]\n",
        "num_ids": 58
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        for j in range(0, len(arr)):\n            if (j - i + 1) % 2 == 1:\n                sum += arr[j]\n    return sum\n",
        "num_ids": 62
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    '''\n    We can use dynamic programming to solve this problem.\n    let dp[i] be the sum of all subarrays of arr[i]\n    the first dp[i] is arr[i] itself\n    second dp[i] is arr[i] + arr[i+1]\n    and so on...\n    '''\n    n = len(arr)\n    dp = [0 for i in range(n)]\n    for i in range(n):\n        if i == 0:\n            dp[i] = arr[i]\n        else:\n            dp[i] = arr[i] + dp[i-1]\n    return dp[n-1]\n",
        "num_ids": 83
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += sum(arr[i:i+2])\n    return total\n",
        "num_ids": 37
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # get the length of the array\n    n = len(arr)\n",
        "num_ids": 19
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    m = len(arr)\n    n = m+1\n    sum = 0\n    for i in range(n):\n        sum += sum(arr[i:m+i])\n    return sum\n",
        "num_ids": 49
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    res = 0\n    for i in range(1,len(arr)+1):\n        res += sum(arr[:i])\n    return res\n",
        "num_ids": 37
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # count = 0\n    # for i in range(len(arr)):\n    #     for j in range(i,len(arr)):\n    #         print(arr[i:j+1])\n    #         if len(arr[i:j+1])%2!= 0:\n    #             count += sum(arr[i:j+1])\n    # return count\n",
        "num_ids": 93
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    def cross_product(a, b):\n        c = [a[1]*b[2] - a[2]*b[1],\n            a[2]*b[0] - a[0]*b[2],\n            a[0]*b[1] - a[1]*b[0]]\n        return c\n",
        "num_ids": 83
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = (g - b)/delta\n    elif cmax == g:\n        h = 2 + (b - r)/delta\n    else:\n        h = 4 + (r - g)/delta\n    if cmax == 0:\n        s = 0\n    else:\n        s = delta/cmax\n    v = cmax\n    return h, s, v\n",
        "num_ids": 173
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    return h, s, v\n",
        "num_ids": 195
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r/255\n    g = g/255\n    b = b/255\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = (60 * ((g-b)/delta) + 360) % 360\n    elif cmax == g:\n        h = (60 * ((b-r)/delta) + 120) % 360\n    elif cmax == b:\n        h = (60 * ((r-g)/delta) + 240) % 360\n",
        "num_ids": 158
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    \n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    m = mx-mn\n    \n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / mx) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / mx) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r - g) / mx) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = m / mx\n    v = mx\n    return h, s, v\n",
        "num_ids": 206
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r - g) / df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df / mx\n    v = mx\n    return (h, s, v)\n    \ndef hsv_to_rgb(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h = float(h)\n    s = float(s)\n    v = float(v)\n    h60 = h / 60.0\n    h60f = math.floor(h60)\n    hi = int(h60f) % 6\n    f = h60 - h60f\n    p = v * (1 - s)\n    q = v * (1 - f * s)\n    t = v * (1 - (1 - f) * s)\n    r, g, b = 0, 0, 0\n    if hi == 0:\n        r, g, b = v, t, p\n    elif hi == 1:\n        r, g, b = q, v, p\n    elif hi == 2:\n        r, g, b = p, v, t\n    elif hi == 3:\n        r, g, b = p, q, v\n    elif hi == 4:\n        r, g, b = t, p, v\n    elif hi == 5:\n        r, g, b = v, p, q\n    r, g, b = int(r * 255), int(g * 255), int(b * 255)\n    return (r, g, b)\n    \ndef hsv_to_rgb_using_formula(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color using formula. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if s == 0.0:\n        return (v, v, v)\n    else:\n        h60 = h / 60\n        h60f = math.floor(h60)\n        hi = int(h60f) % 6\n        f = h60 - h60f\n        p = v * (1 - s)\n        q = v * (1 - f * s)\n        t = v * (1 - (1 - f) * s)\n        r, g, b = 0, 0, 0\n        if hi == 0:\n            r, g, b = v, t, p\n        elif hi == 1:\n            r, g, b = q, v, p\n        elif hi == 2:\n            r, g, b = p, v, t\n        elif hi == 3:\n            r, g, b = p, q, v\n        elif hi == 4:\n            r, g, b = t, p, v\n        elif hi == 5:\n            r, g, b = v, p, q\n        r, g, b = int(r * 255), int(g * 255), int(b * 255)\n        return (r, g, b)\n",
        "num_ids": 283
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Color constants\n    h = 0\n    s = 0\n    v = 0\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    c_max = max(r, g, b)\n    c_min = min(r, g, b)\n    delta = c_max - c_min\n    if delta == 0:\n        h = 0\n    elif c_max == r:\n        h = (g - b)/delta\n    elif c_max == g:\n        h = 2 + ((b - r)/delta)\n    else:\n        h = 4 + ((r - g)/delta)\n    if c_max == 0:\n        s = 0\n    else:\n        s = delta/c_max\n    v = c_max\n    h = h*60\n    s = s*100\n    v = v*100\n    return h, s, v\n",
        "num_ids": 224
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    rgb_r = r / 255.0\n    rgb_g = g / 255.0\n    rgb_b = b / 255.0\n",
        "num_ids": 38
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    maximum = max(r, g, b)\n    minimum = min(r, g, b)\n    if maximum == minimum:\n        h = 0\n    elif maximum == r:\n        h = (g - b) / (maximum - minimum)\n    elif maximum == g:\n        h = 2 + (b - r) / (maximum - minimum)\n    else:\n        h = 4 + (r - g) / (maximum - minimum)\n    h *= 60\n    if maximum == 0:\n        s = 0\n    else:\n        s = (maximum - minimum) / maximum\n    v = maximum\n    return (h, s, v)\n",
        "num_ids": 180
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r/255.0\n    g = g/255.0\n    b = b/255.0\n",
        "num_ids": 29
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for num in list1:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    even_product = 1\n    odd_product = 1\n    for num in even_list:\n        even_product *= num\n    for num in odd_list:\n        odd_product *= num\n    print(even_product, odd_product)\n",
        "num_ids": 117
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n    for item in list1:\n        if item % 2 == 0:\n            even = even * item\n        else:\n            odd = odd * item\n    return even, odd\n",
        "num_ids": 53
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    list1 = list(list1)\n    even_list = []\n    odd_list = []\n    for i in list1:\n        if i%2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    even_list = list(map(lambda x: x*2, even_list))\n    result = list(map(lambda x, y: x*y, even_list, odd_list))\n    return result\n",
        "num_ids": 117
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n    for i in list1:\n        if i % 2 == 0:\n            even *= i\n        else:\n            odd *= i\n    print(\"Product of even and odd number is \", even, odd)\n",
        "num_ids": 61
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    sum_even = 1\n    sum_odd = 1\n",
        "num_ids": 16
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    list1.sort()\n    n=len(list1)\n    result=1\n    if(n%2==0):\n        for i in range(0,n,2):\n            result=result*list1[i]\n    else:\n        for i in range(0,n-1,2):\n            result=result*list1[i]\n        result=result*list1[n-1]\n    return result\n",
        "num_ids": 104
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even=0\n    odd=0\n    for i in range(0,len(list1)):\n        if list1[i]%2==0:\n            even=even*list1[i]\n        else:\n            odd=odd*list1[i]\n    return even,odd\n",
        "num_ids": 72
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    list1 = [1,2,3,4,5,6,7,8]\n    product = 1\n    for x in list1:\n        if x%2 == 0:\n            product *= x\n        else:\n            product *= (x*-1)\n    return product\n",
        "num_ids": 71
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return 'Empty'\n",
        "num_ids": 19
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_product = 1\n    odd_product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_product = even_product * num\n        else:\n            odd_product = odd_product * num\n    print('Even product = ', even_product)\n    print('Odd product = ', odd_product)\n",
        "num_ids": 84
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    #write your code here\n    #tuple_str = tuple(test_str)\n    #return tuple_str\n    return tuple(int(x) for x in test_str)\n",
        "num_ids": 46
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_list = test_str.split(',')\n    int_tuple = []\n    for item in str_list:\n        int_tuple.append(int(item))\n    return tuple(int_tuple)\n    \ndef dict_int_tuple(test_dict):\n    '''\n    Write a function to convert dictionary's keys and values to integer tuple.\n    '''\n    tuple_list = []\n    for key, value in test_dict.items():\n        tuple_list.append((int(key), value))\n    return tuple(tuple_list)\n    \ndef dict_int_str(test_dict):\n    '''\n    Write a function to convert dictionary's keys and values to integer tuple.\n    '''\n    dict_list = []\n    for key, value in test_dict.items():\n        dict_list.append((key, value))\n    return tuple(dict_list)\n    \ndef tuple_int_tuple(test_tuple):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = []\n    for item in test_tuple:\n        int_tuple.append(int(item))\n    return tuple(int_tuple)\n    \ndef tuple_int_str(test_tuple):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_list = []\n    for item in test_tuple:\n        str_list.append(str(item))\n    return tuple(str_list)\n    \ndef tuple_int_int(test_tuple):\n    '''\n    Write a function to convert tuple integer to integer tuple.\n    '''\n    int_tuple = []\n    for item in test_tuple:\n        int_tuple.append(int(item))\n    return tuple(int_tuple)\n    \ndef tuple_int_float(test_tuple):\n    '''\n    Write a function to convert tuple integer to integer tuple.\n    '''\n    float_list = []\n    for item in test_tuple:\n        float_list.append(float(item))\n    return tuple(float_list)\n    \ndef tuple_str_float(test_tuple):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_list = []\n    for item in test_tuple:\n        str_list.append(str(item))\n    return tuple(str_list)\n    \ndef tuple_str_int(test_tuple):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_list = []\n    for item in test_tuple:\n        int_list.append(int(item))\n    return tuple(int_list)\n    \ndef tuple_str_bool(test_tuple):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    bool_list = []\n    for item in test_tuple:\n        bool_list.append(bool(item))\n    return tuple(bool_list)\n    \ndef tuple_str_tuple(test_tuple):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_list = []\n    for item in test_tuple:\n        tuple_list.append(tuple(item))\n    return tuple(tuple_list)\n    \ndef tuple_str_list(test_tuple):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    list_list = []\n    for item in test_tuple:\n        list_list.append(list(item))\n    return tuple(list_list)\n    \ndef tuple_str_dict(test_tuple):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    dict_list = []\n    for item in test_tuple:\n        dict_list.append(dict(item))\n    return tuple(dict_list)\n    \ndef tuple_str_set(test_tuple):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    set_list = []\n    for item in test_tuple:\n        set_list.append(set(item))\n    return tuple(set_list)\n    \ndef tuple_str_frozenset(test_tuple):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    frozenset_list = []\n    for item in test_tuple:\n        frozenset_list.append(frozenset(item))\n    return tuple(frozenset_list)\n    \ndef tuple_str_complex(test_tuple):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    complex_list = []\n    for item in test_tuple:\n        complex_list.append(complex(item))\n    return tuple(complex_list)\n    \ndef tuple_str_range(test_tuple):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    range_list = []\n    for item in test_tuple:\n        range_list.append(range(item))\n    return tuple(range_list)\n    \ndef tuple_str_enumerate(test_tuple):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    enumerate_list = []\n    for item in test_tuple:\n        enumerate_list.append(enumerate(item))\n    return tuple(enumerate_list)\n    \ndef tuple_str_filter(test_tuple):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    filter_list = []\n    for item in test_tuple:\n        filter_list.append(filter(item))\n    return tuple(filter_list)\n    \ndef tuple_str_map(test_tuple):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    map_list = []\n    for item in test_tuple:\n        map_list.append(map(item))\n    return tuple(map_list)\n    \ndef tuple_str_reduce(test_tuple):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    reduce_list = []\n    for item in test_tuple:\n        reduce_list.append(reduce(item))\n    return tuple(reduce_list)\n    \ndef tuple_str_sorted(test_tuple):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    sorted_list = []\n    for item in test_tuple:\n        sorted_list.append(sorted(item))\n    return tuple(sorted_list)\n    \ndef tuple_str_reversed(test_tuple):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    reversed_list = []\n    for item in test_tuple:\n        reversed_list.append(reversed(item))\n    return tuple(reversed_list)\n    \ndef tuple_str_repr(test_tuple):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    repr_list = []\n    for item in test_tuple:\n        repr_list.append(repr(item))\n    return tuple(repr_list)\n    \ndef tuple_str_str(test_tuple):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_list = []\n    for item in test_tuple:\n        str_list.append(str(item))\n    return tuple(str_list)\n    \ndef tuple_str_sum(test_tuple):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    sum_list = []\n    for item in test_tuple:\n        sum_list.append(sum(item))\n    return tuple(sum_list)\n    \ndef tuple_str_min(test_tuple):\n    '''\n    Write a function to convert tuple string to integer tuple.\n",
        "num_ids": 15
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    import re\n    return tuple(map(int,re.findall(r'\\d+',test_str)))\n",
        "num_ids": 30
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    import ast\n    return ast.literal_eval(test_str)\n    \n",
        "num_ids": 22
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_list = test_str.split(',')\n    return tuple(map(int, str_list))\n",
        "num_ids": 29
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))\n",
        "num_ids": 19
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(num) for num in test_str.split(','))\n",
        "num_ids": 22
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str[1:-1]\n    tuple_str = test_str.split(',')\n    int_tuple = tuple(map(int,tuple_str))\n    return int_tuple\n    \n",
        "num_ids": 58
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    list_test = test_str.split(',')\n    tuple_int = tuple(map(int, list_test))\n    return tuple_int\n",
        "num_ids": 39
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(s) for s in test_str.strip(')(').split(','))\n",
        "num_ids": 26
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if x < a[0]:\n        return 0\n    for i in range(len(a)):\n        if a[i] > x:\n            return i\n",
        "num_ids": 41
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    low, high = 0, len(a) - 1\n    while low <= high:\n        mid = (low + high) / 2\n        if x < a[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low\n",
        "num_ids": 65
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    assert isinstance(a,list)\n    assert isinstance(x,int)\n    assert len(a)>=1\n    index = bisect.bisect_right(a, x)\n    return index\n    \ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    assert isinstance(a,list)\n    assert isinstance(x,int)\n    assert len(a)>=1\n    index = bisect.bisect_left(a, x)\n    return index\n    \ndef reverse(a,p,r):\n    '''\n    Write a function to reverse a list in-place (i.e. without creating a new list)\n    '''\n    assert isinstance(a,list)\n    assert isinstance(p,int)\n    assert isinstance(r,int)\n    assert p<r\n    assert p>=0\n    assert r<len(a)\n    for i in range(p,(r+1)/2):\n        a[i],a[r-i] = a[r-i],a[i]\n    return a\n    \ndef rotate(a,d,p):\n    '''\n    Write a function to rotate a list in-place (i.e. without creating a new list)\n    '''\n    assert isinstance(a,list)\n    assert isinstance(d,int)\n    assert isinstance(p,int)\n    assert d>0\n    assert p>=0\n    assert p<len(a)\n    if d==1:\n        return\n    for i in range(p,(len(a)+p-d)/2):\n        a[i],a[i+d] = a[i+d],a[i]\n    for i in range((len(a)+p-d)/2,len(a)):\n        a[i],a[i-d] = a[i-d],a[i]\n    return a\n    \ndef rotate_dict(d,k,delta):\n    '''\n    Write a function to rotate a dictionary in-place (i.e. without creating a new dictionary)\n    '''\n    assert isinstance(d,dict)\n    assert isinstance(k,str)\n    assert isinstance(delta,int)\n    assert delta>=0\n    assert k in d\n    for i in range(delta):\n        d[k+'-'+str(i+1)] = d[k]\n        del d[k]\n    return d\n    \ndef reverse_dict(d,k,delta):\n    '''\n    Write a function to reverse a dictionary in-place (i.e. without creating a new dictionary)\n    '''\n    assert isinstance(d,dict)\n    assert isinstance(k,str)\n    assert isinstance(delta,int)\n    assert delta>=0\n    assert k in d\n    for i in range(delta):\n        d[k+'-'+str(i+1)] = d[k]\n        del d[k]\n    return d\n",
        "num_ids": 87
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect(a, x)\n    return i\n    \na = [1,2,3,4,5,6,7,8,9]\nprint(right_insertion(a, 6))\n",
        "num_ids": 56
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a,x)\n    return i\n",
        "num_ids": 22
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i < len(a):\n        return a[i]\n    else:\n        return None\n",
        "num_ids": 42
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i:\n        if a[i-1]!= x:\n            return i\n        else:\n            return i - 1\n    else:\n        return i\n",
        "num_ids": 58
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    pos = bisect.bisect_right(a, x)\n    if pos == len(a) or a[pos] > x:\n        return pos\n    return pos+1\ndef left_insertion(a, x):\n    pos = bisect.bisect_left(a, x)\n    if pos == 0 or a[pos-1] > x:\n        return pos\n    return pos-1\ndef right_rotation(a, x):\n    '''\n    Write a function to rotate a list to the right by k places.\n    '''\n    if len(a) == 1:\n        return False\n    if len(a) == 2:\n        return a\n    if x < len(a)/2:\n        return a[x:] + a[:x]\n    return a[-x:] + a[:-x]\ndef left_rotation(a, x):\n    '''\n    Write a function to rotate a list to the left by k places.\n    '''\n    if len(a) == 1:\n        return False\n    if len(a) == 2:\n        return a\n    if x < len(a)/2:\n        return a[-x:] + a[:-x]\n    return a[x:] + a[:x]\ndef left_k_rotation(a, x, k):\n    if len(a) == 1:\n        return False\n    if len(a) == 2:\n        return a\n    if x < len(a)/2:\n        return a[-x:] + a[:-x]\n    if x+k > len(a):\n        return a[x-k:] + a[:x-k]\n    return a[x-k:] + a[:x-k]\ndef right_k_rotation(a, x, k):\n    if len(a) == 1:\n        return False\n    if len(a) == 2:\n        return a\n    if x < len(a)/2:\n        return a[x:] + a[:x]\n    if x+k > len(a):\n        return a[-x:] + a[:-x]\n    return a[-x:] + a[:-x]\ndef partition(a, x):\n    '''\n    Write a function to partition a linked list around a value x, such that all nodes less than x are in the left partition and\n    all nodes greater than x are in the right partition.\n    '''\n    if len(a) == 1:\n        return False\n    left = [a[i] for i in xrange(len(a)) if a[i] < x]\n    right = [a[i] for i in xrange(len(a)) if a[i] > x]\n    a.remove(x)\n    a.extend(left)\n    a.extend(right)\n    return True\ndef rearrange_list(a):\n    '''\n    Rearrange a list such that all even integers appear before all odd integers in the same order as the input.\n    '''\n    if len(a) == 0 or len(a) == 1:\n        return False\n    if len(a) == 2:\n        return True\n    left = [a[i] for i in xrange(len(a)) if a[i] % 2 == 0]\n    right = [a[i] for i in xrange(len(a)) if a[i] % 2 == 1]\n    a.remove(a[len(left):len(a)])\n    a.extend(left)\n    a.extend(right)\n    return True\ndef next_greater_element(a):\n    '''\n    Write a function to find the next greater element (also known as next permutation) in a list, in O(N).\n    '''\n    if len(a) == 1:\n        return False\n    for i in xrange(len(a)-2, -1, -1):\n        if a[i] < a[i+1]:\n            for j in xrange(len(a)-1, i, -1):\n                if a[j] > a[i]:\n                    a[i], a[j] = a[j], a[i]\n                    a[i+1:] = sorted(a[i+1:])\n                    return True\n    return False\ndef next_greater_element_recursive(a):\n    '''\n    Write a function to find the next greater element (also known as next permutation) in a list, in O(N).\n    '''\n    def reverse_list(a, start, end):\n        if start >= end:\n            return\n        a[start], a[end] = a[end], a[start]\n        reverse_list(a, start+1, end-1)\n    if len(a) == 1:\n        return False\n    for i in xrange(len(a)-2, -1, -1):\n        if a[i] < a[i+1]:\n            for j in xrange(len(a)-1, i, -1):\n                if a[j] > a[i]:\n                    a[i], a[j] = a[j], a[i]\n                    a[i+1:] = sorted(a[i+1:])\n                    return True\n    reverse_list(a, 0, len(a)-1)\n    return True\ndef get_item_index(a, x):\n    '''\n    Write a function to find the index of an item in a sorted list.\n    '''\n    if len(a) == 1:\n        return -1\n    pos = bisect.bisect_left(a, x)\n    if pos == len(a) or a[pos]!= x:\n        return -1\n    return pos\ndef check_permutation(a, b):\n    '''\n    Write a function that takes in two strings and determines if the characters in the first string are permutations of the characters in the second string.\n    '''\n    if len(a)!= len(b):\n        return False\n    for char in a:\n        if char not in b:\n            return False\n    return True\ndef palindrome_permutation(a):\n    '''\n    Write a function that takes in a string and returns True if the string is a permutation of a palindrome and False otherwise.\n    '''\n    if len(a) == 1:\n        return True\n    if len(a) == 2 and a[0]!= a[1]:\n        return True\n    sorted_a = sorted(a)\n    left = 0\n    right = len(a)-1\n    while left < right:\n        if sorted_a[left]!= sorted_a[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\ndef unique_characters(a):\n    '''\n    Write a function that takes in a string and returns the number of unique characters in the string.\n    '''\n    if len(a) == 0:\n        return 0\n    if len(a) == 1:\n        return 1\n    a = list(a)\n    return len(set(a))\ndef run_length_encoding(a):\n    '''\n    Write a function that takes in a string and returns the run-length encoding of the string as a string.\n    '''\n    encoded_string = ''\n    previous_char = a[0]\n    count = 1\n    for i in xrange(1, len(a)):\n        current_char = a[i]\n        if current_char!= previous_char:\n            encoded_string += str(count) + previous_char\n            previous_char = current_char\n            count = 1\n        else:\n            count += 1\n    encoded_string += str(count) + previous_char\n    return encoded_string\ndef add_two_strings(a, b):\n    '''\n    Write a function that takes in two strings and returns the sum of the two strings.\n    '''\n    if len(a) > len(b):\n        bigger_string = a\n        smaller_string = b\n    else:\n        bigger_string = b\n        smaller_string = a\n    if len(smaller_string) > len(bigger_string):\n        bigger_string = smaller_string\n    bigger_string = list(bigger_string)\n    for i in xrange(len(smaller_string)):\n        if i >= len(bigger_string):\n            bigger_strin",
        "num_ids": 126
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect(a, x)\n    if i == len(a):\n        return i\n    if a[i] < x:\n        return i + 1\n    return i\n",
        "num_ids": 49
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    pos = bisect.bisect_right(a, x)\n    if pos == len(a):\n        return pos\n    if a[pos] < x:\n        return pos + 1\n    return pos\n",
        "num_ids": 51
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    print re.search(r'a.b{3}', text)\n",
        "num_ids": 20
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a{3}b')\n    result = pattern.search(text)\n    if result:\n        print('Found a match!')\n    else:\n        print('No match!')\n",
        "num_ids": 55
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    #pattern = re.compile(r'a{3}')\n    pattern = re.compile(r'ab{3}')\n    return pattern.findall(text)\ndef text_match_two_or_three(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 1 to 3 'b'.\n    '''\n    pattern = re.compile(r'a{1,3}')\n    return pattern.findall(text)\ndef text_match_exactly_one_or_two(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 1 or 2 'b'.\n    '''\n    pattern = re.compile(r'a{1,2}')\n    return pattern.findall(text)\ndef text_match_only_alpha(text):\n    '''\n    Write a function that matches a string that has only alpha characters.\n    '''\n    pattern = re.compile(r'[a-z]+')\n    return pattern.findall(text)\ndef text_match_digits(text):\n    '''\n    Write a function that matches a string that has only digits.\n    '''\n    pattern = re.compile(r'[0-9]+')\n    return pattern.findall(text)\ndef text_match_digits_or_letters(text):\n    '''\n    Write a function that matches a string that has only letters or digits.\n    '''\n    pattern = re.compile(r'[a-z0-9]+')\n    return pattern.findall(text)\ndef text_match_alpha_or_digit(text):\n    '''\n    Write a function that matches a string that has only alpha characters or digits.\n    '''\n    pattern = re.compile(r'[a-z0-9]+')\n    return pattern.findall(text)\ndef text_match_alpha_or_space(text):\n    '''\n    Write a function that matches a string that has only alpha characters or spaces.\n    '''\n    pattern = re.compile(r'[a-z\\s]+')\n    return pattern.findall(text)\ndef text_match_alpha_or_space_or_digit(text):\n    '''\n    Write a function that matches a string that has only alpha characters, spaces or digits.\n    '''\n    pattern = re.compile(r'[a-z\\s0-9]+')\n    return pattern.findall(text)\ndef text_match_alphanum(text):\n    '''\n    Write a function that matches a string that has only alpha-numeric characters.\n    '''\n    pattern = re.compile(r'[a-z0-9]+')\n    return pattern.findall(text)\ndef text_match_word(text):\n    '''\n    Write a function that matches a string that has only one word.\n    '''\n    pattern = re.compile(r'\\w+')\n    return pattern.findall(text)\ndef text_match_word_or_number(text):\n    '''\n    Write a function that matches a string that has only one word or number.\n    '''\n    pattern = re.compile(r'\\w+')\n    return pattern.findall(text)\ndef text_match_word_or_number_or_space(text):\n    '''\n    Write a function that matches a string that has only one word or number, or spaces.\n    '''\n    pattern = re.compile(r'\\w+')\n    return pattern.findall(text)\ndef text_match_word_or_number_or_space_or_alpha(text):\n    '''\n    Write a function that matches a string that has only one word or number, or spaces or letters.\n    '''\n    pattern = re.compile(r'\\w+')\n    return pattern.findall(text)\ndef text_match_word_or_number_or_alpha_or_space(text):\n    '''\n    Write a function that matches a string that has only one word or number, or letters, or spaces.\n    '''\n    pattern = re.compile(r'\\w+')\n    return pattern.findall(text)\ndef text_match_letters_and_digits(text):\n    '''\n    Write a function that matches a string that has letters and digits.\n    '''\n    pattern = re.compile(r'[a-z0-9]+')\n    return pattern.findall(text)\ndef text_match_letters_and_digits_or_space(text):\n    '''\n    Write a function that matches a string that has letters and digits or spaces.\n    '''\n    pattern = re.compile(r'[a-z0-9\\s]+')\n    return pattern.findall(text)\ndef text_match_letters_and_digits_or_space_or_alpha(text):\n    '''\n    Write a function that matches a string that has letters and digits or spaces or letters.\n    '''\n    pattern = re.compile(r'[a-z0-9\\s]+')\n    return pattern.findall(text)\ndef text_match_letters_and_digits_or_space_or_alpha_or_space(text):\n    '''\n    Write a function that matches a string that has letters and digits or spaces or letters or spaces.\n    '''\n    pattern = re.compile(r'[a-z0-9\\s]+')\n    return pattern.findall(text)\ndef text_match_letters_and_digits_or_alpha_or_space_or_alpha(text):\n    '''\n    Write a function that matches a string that has letters and digits or alpha or spaces or alpha or spaces.\n    '''\n    pattern = re.compile(r'[a-z0-9\\s\\w]+')\n    return pattern.findall(text)\ndef text_match_letters_and_digits_or_alpha_or_space_or_alpha_or_space(text):\n    '''\n    Write a function that matches a string that has letters and digits or alpha or spaces or alpha or spaces or spaces.\n    '''\n    pattern = re.compile(r'[a-z0-9\\s\\w]+')\n    return pattern.findall(text)\ndef text_match_letters_and_digits_or_alpha_or_space_or_alpha_or_space_or_space(text):\n    '''\n    Write a function that matches a string that has letters and digits or alpha or spaces or alpha or spaces or spaces or spaces.\n    '''\n    pattern = re.compile(r'[a-z0-9\\s\\w]+')\n    return pattern.findall(text)\ndef text_match_letters_and_digits_or_alpha_or_space_or_alpha_or_space_or_space_or_space(text):\n    '''\n    Write a function that matches a string that has letters and digits or alpha or spaces or alpha or spaces or spaces or spaces or spaces or spaces.\n    '''\n    pattern = re.compile(r'[a-z0-9\\s\\w]+')\n    return pattern.findall(text)\ndef text_match_letters_and_digits_or_alpha_or_space_or_alpha_or_space_or_space_or_space_or_space_or_space_or_space(text):\n    '''\n    Write a function that matches a string that has letters and digits or alpha or spaces or alpha or spaces or spaces or spaces or spaces or spaces or spaces or spaces or spaces or spaces.\n    '''\n    pattern = re.compile(r'[a-z0-9\\s\\w]+')\n    return pattern.findall(text)\ndef text_match_letters_and_digits_or_alpha_or_space_or_alpha_or_space_or_space_or_space_or_space_or_space_or_space_or_space_or_space_or_space_or_space_or_space(text):\n    '''\n    Write a function that matches a string that has letters and digits or alpha or spaces or alpha or spaces or spaces or spaces or spaces or spaces or spaces or spaces or spaces or spaces or spaces or spaces.\n    '''\n    pattern = re.compile(r'[a-z0-9\\s\\",
        "num_ids": 22
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'a(.*)b{3}',text)\n    # a(.*)b{3}\n",
        "num_ids": 33
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search('a(.{1,3})b',text)\n",
        "num_ids": 21
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    result = re.search(r'ab{3}',text)\n    if result:\n        return result.group()\n    else:\n        return None\n",
        "num_ids": 39
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    if pattern.match(text):\n        print(\"Pattern found: %s\" % text)\n",
        "num_ids": 40
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    reg = re.compile(r\"(?<=a)b{3}\")\n    # test = re.search(reg,text)\n    # print(test.group())\n    return reg.search(text)\n",
        "num_ids": 54
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search('a{3}b',text)\n",
        "num_ids": 17
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = re.sub(r'(\\w)(\\1\\1\\1)', r'\\1\\1\\1', text)\n    return text\n",
        "num_ids": 38
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Your Code Here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + [test_str])\n",
        "num_ids": 16
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list + test_str)\n    return new_tuple\n",
        "num_ids": 26
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = []\n    for x in test_str:\n        new_list.append(x)\n    for x in test_list:\n        new_list.append(x)\n    new_tuple = tuple(new_list)\n    return new_tuple\n",
        "num_ids": 67
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    result_list = []\n    result_list = list(test_str)\n    for x in test_list:\n        result_list.append(x)\n    return tuple(result_list)\n",
        "num_ids": 49
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_tuple = (test_str, test_list)\n    return test_tuple\n",
        "num_ids": 25
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list+[test_str])\n",
        "num_ids": 16
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_list, test_str)\n",
        "num_ids": 14
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_str = test_str.replace(\" \", \"\")\n    if len(test_str) == 0:\n        return ()\n    if len(test_str) == 1:\n        return (test_str, )\n    test_str = test_str[1:-1]\n    list_temp = test_str.split(',')\n    list_temp = [i.strip() for i in list_temp]\n    list_temp = [int(i) for i in list_temp]\n    return tuple(list_temp)\n",
        "num_ids": 127
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(nums[i]%2==0 for i in range(0,len(nums),2))\n",
        "num_ids": 30
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # if len(nums) == 0:\n    #     return False\n    # for i in range(len(nums)):\n    #     if not nums[i] % 2:\n    #         return False\n    # return True\n    # return all([n % 2 == 0 for n in nums])\n    return all(n % 2 == 0 for n in nums[::2])\n    ",
        "num_ids": 96
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if len(nums)==0:\n        return True\n    else:\n        if nums[0]%2==0:\n            return even_position(nums[1:])\n        else:\n            return False\n",
        "num_ids": 55
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    assert isinstance(nums, list)\n    assert isinstance(nums[0], int)\n    assert all([isinstance(num, int) for num in nums])\n    return all([num % 2 == 0 for num in nums[0::2]])\n",
        "num_ids": 65
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if nums[i]%2==0:\n            if nums[i+1]%2!=0:\n                return False\n        else:\n            if nums[i+1]%2==0:\n                return False\n    return True\n",
        "num_ids": 78
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    counter = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            for j in range(len(nums[i])):\n                if nums[i][j] % 2 == 0:\n                    counter += 1\n                else:\n                    break\n        else:\n            continue\n    if counter == len(nums):\n        return True\n    else:\n        return False\n",
        "num_ids": 100
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for index in range(0, len(nums), 2):\n        if nums[index] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    '''\n    test_tup = ([('a', 'b'), ('c', 'd')], ['e', 'f'], ['g', 'h'])\n    print(remove_nested(test_tup))\n    # ([('a', 'b'), ('c', 'd')], ['e', 'f', 'g', 'h'])\n    '''\n    return [element for element in test_tup if type(element) is not tuple]\n",
        "num_ids": 23
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(filter(lambda x: x!= test_tup, test_tup))\n",
        "num_ids": 25
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if not isinstance(test_tup, tuple):\n        return test_tup\n",
        "num_ids": 23
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return tuple([remove_nested(x) for x in test_tup])\n    else:\n        return test_tup\n",
        "num_ids": 46
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    res = []\n    for i in test_tup:\n        if type(i)!= tuple:\n            res.append(i)\n        else:\n            res.extend(remove_nested(i))\n    return tuple(res)\n",
        "num_ids": 60
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    res = []\n    for i in test_tup:\n        if isinstance(i, tuple):\n            res.append(remove_nested(i))\n        else:\n            res.append(i)\n    return tuple(res)\n",
        "num_ids": 59
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return (remove_nested(i) for i in test_tup)\n",
        "num_ids": 21
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # One line to remove all nested tuples.\n    return tuple(x for x in test_tup if not isinstance(x, tuple))\n",
        "num_ids": 36
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # We want to remove all elements with a list inside them.\n    new_list = []\n    for i in test_tup:\n        if not isinstance(i, list):\n            new_list.append(i)\n        else:\n            # If the element is a list, we want to loop over the sub-elements.\n            for j in i:\n                new_list.append(j)\n    return tuple(new_list)\n",
        "num_ids": 106
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    _, (_, tuples) = test_tup\n    return [x for x in tuples if not isinstance(x, tuple)]\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    num_lists = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) is list:\n            num_lists += 1\n    return num_lists\n",
        "num_ids": 50
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    while input_list:\n        if isinstance(input_list[0], list):\n            count += 1\n        input_list = input_list[0]\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # Your Code Here \n    return 0\n",
        "num_ids": 13
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n",
        "num_ids": 11
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if len(input_list) == 0:\n        return 1\n    elif len(input_list) == 1:\n        return len(input_list[0])\n    else:\n        return count_list(input_list[:-1]) + count_list(input_list[-1])\n",
        "num_ids": 72
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 1\n    for elem in input_list:\n        if isinstance(elem, list):\n            count += 1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) is list:\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if input_list==[]:\n        return 0\n    else:\n        return 1 + count_list(input_list[1:])\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    #initializing the count to 0\n    count = 0\n    #initializing the sublist count to 0\n    sublist_count = 0\n    #initializing the sublist_count_list to an empty list\n    sublist_count_list = []\n    #initializing the final_list to an empty list\n    final_list = []\n    #iterating through the input_list\n    for elem in input_list:\n        #checking if elem is not a list\n        if type(elem) == list:\n            #incrementing the sublist_count\n            sublist_count += 1\n            #appending the count to sublist_count_list\n            sublist_count_list.append(sublist_count)\n            #checking if the sublist_count is greater than 1\n            if sublist_count > 1:\n                #adding the sublist_count to the final_list\n                final_list.append(sublist_count)\n    #returning the final_list\n    return final_list\n",
        "num_ids": 238
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n",
        "num_ids": 11
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    result = arr.index(x)\n    return result\n",
        "num_ids": 16
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in reversed(range(len(arr))):\n        if arr[i]==x:\n            return i\n    return -1\n",
        "num_ids": 35
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n",
        "num_ids": 17
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0:\n        return 0\n    \n    l=len(arr)-1\n    while l>0:\n        if arr[l]<=x:\n            return l\n        l-=1\n    return 0\n",
        "num_ids": 59
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    if x<arr[0]:\n        return -1\n    if x>arr[n-1]:\n        return n\n    l=0\n    r=n-1\n    while l<=r:\n        mid = (l+r)/2\n        if arr[mid]==x:\n            return mid\n        elif arr[mid]>x:\n            r = mid-1\n        else:\n            l=mid+1\n    return -1\n    \n    \ndef firstOccurance(arr,x):\n    '''\n    Write a python function to find the first occurence of an element in a sorted array.\n    '''\n    n = len(arr)\n    if x<arr[0]:\n        return -1\n    if x>arr[n-1]:\n        return n\n    l=0\n    r=n-1\n    while l<=r:\n        mid = (l+r)/2\n        if arr[mid]==x:\n            return mid\n        elif arr[mid]>x:\n            r = mid-1\n        else:\n            l=mid+1\n    return -1\n",
        "num_ids": 117
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    if arr[-1]==x:\n        return len(arr)-1\n    else:\n        return last(arr[:-1],x)\n    \ndef first(arr,x):\n    '''\n    Write a python function to find the first position of an element in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    if arr[0]==x:\n        return 0\n    else:\n        return first(arr[1:],x)\n    \ndef swap(arr,i,j):\n    '''\n    Write a python function to swap two elements in a list.\n    '''\n    temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp\n",
        "num_ids": 29
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    last = arr.index(x)\n    if last == len(arr)-1:\n        return last\n    else:\n        return last +1\n",
        "num_ids": 37
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    a,b=0,len(arr)-1\n    while a<=b:\n        mid=(a+b)//2\n        if arr[mid]==x:\n            return mid\n        if arr[mid]<x:\n            a=mid+1\n        else:\n            b=mid-1\n    return -1\ndef next(arr,x):\n    '''\n    Write a python function to find the next element in the sorted array.\n    '''\n    a,b=0,len(arr)-1\n    while a<=b:\n        mid=(a+b)//2\n        if arr[mid]==x:\n            if mid==len(arr)-1:\n                return mid+1\n            elif arr[mid+1]<x:\n                return mid+1\n            else:\n                return mid\n        if arr[mid]<x:\n            a=mid+1\n        else:\n            b=mid-1\n    return -1\ndef prev(arr,x):\n    '''\n    Write a python function to find the previous element in the sorted array.\n    '''\n    a,b=0,len(arr)-1\n    while a<=b:\n        mid=(a+b)//2\n        if arr[mid]==x:\n            if mid==0:\n                return mid-1\n            elif arr[mid-1]>x:\n                return mid-1\n            else:\n                return mid\n        if arr[mid]<x:\n            a=mid+1\n        else:\n            b=mid-1\n    return -1\ndef max_heap(arr):\n    '''\n    Write a python function to build a max heap.\n    '''\n    last_parent=(len(arr)-1-1)//2\n    for i in range(last_parent,-1,-1):\n        sift_down(arr,i)\ndef sift_down(arr,i):\n    '''\n    Write a python function to sift down an element in a max heap.\n    '''\n    if i>=len(arr):\n        return\n    lc,rc=i*2+1,i*2+2\n    if lc<=len(arr)-1 and arr[i]<arr[lc]:\n        largest=lc\n    else:\n        largest=i\n    if rc<=len(arr)-1 and arr[largest]<arr[rc]:\n        largest=rc\n    if largest!=i:\n        arr[i],arr[largest]=arr[largest],arr[i]\n        sift_down(arr,largest)\ndef min_heap(arr):\n    '''\n    Write a python function to build a min heap.\n    '''\n    last_parent=(len(arr)-1-1)//2\n    for i in range(last_parent,-1,-1):\n        sift_down(arr,i)\ndef sift_down(arr,i):\n    '''\n    Write a python function to sift down an element in a min heap.\n    '''\n    if i>=len(arr):\n        return\n    lc,rc=i*2+1,i*2+2\n    if lc<=len(arr)-1 and arr[i]>arr[lc]:\n        largest=lc\n    else:\n        largest=i\n    if rc<=len(arr)-1 and arr[largest]>arr[rc]:\n        largest=rc\n    if largest!=i:\n        arr[i],arr[largest]=arr[largest],arr[i]\n        sift_down(arr,largest)\ndef extract_min(arr):\n    '''\n    Write a python function to extract the minimum element in a min heap.\n    '''\n    if len(arr)==0:\n        return\n    last_node=arr.pop()\n    if len(arr)>0:\n        arr[0]=last_node\n        sift_down(arr,0)\n    return last_node\ndef extract_max(arr):\n    '''\n    Write a python function to extract the maximum element in a max heap.\n    '''\n    if len(arr)==0:\n        return\n    last_node=arr.pop()\n    if len(arr)>0:\n        arr[0]=last_node\n        sift_down(arr,0)\n    return last_node\ndef insert(arr,x):\n    '''\n    Write a python function to insert an element into a heap.\n    '''\n    if len(arr)==0:\n        arr.append(x)\n    else:\n        arr.append(x)\n        sift_up(arr,len(arr)-1)\ndef sift_up(arr,i):\n    '''\n    Write a python function to sift up an element in a heap.\n    '''\n    if i==0:\n        return\n    parent=(i-1)//2\n    if arr[i]<arr[parent]:\n        arr[parent],arr[i]=arr[i],arr[parent]\n        sift_up(arr,parent)\ndef heap_sort(arr):\n    '''\n    Write a python function to sort an array using a heap sort.\n    '''\n    arr=arr[:]\n    if len(arr)>0:\n        last_parent=(len(arr)-1-1)//2\n        for i in range(last_parent,-1,-1):\n            sift_down(arr,i)\n        while len(arr)!=0:\n            arr.pop()\n        return arr\ndef heap_sort_wrapper(arr):\n    '''\n    Write a python function to sort an array using a heap sort.\n    '''\n    arr=arr[:]\n    if len(arr)>0:\n        last_parent=(len(arr)-1-1)//2\n        for i in range(last_parent,-1,-1):\n            sift_down(arr,i)\n        while len(arr)!=0:\n            arr.pop()\n        return arr\ndef merge(arr1,arr2):\n    '''\n    Write a python function to merge two sorted arrays.\n    '''\n    arr=[]\n    i,j=0,0\n    while i<len(arr1) and j<len(arr2):\n        if arr1[i]<arr2[j]:\n            arr.append(arr1[i])\n            i+=1\n        else:\n            arr.append(arr2[j])\n            j+=1\n    while i<len(arr1):\n        arr.append(arr1[i])\n        i+=1\n    while j<len(arr2):\n        arr.append(arr2[j])\n        j+=1\n    return arr\ndef quick_sort(arr):\n    '''\n    Write a python function to sort an array using a quick sort.\n    '''\n    arr=arr[:]\n    if len(arr)>1:\n        pivot=arr[len(arr)//2]\n        left,right=[],[]\n        for i in arr:\n            if i<pivot:\n                left.append(i)\n            else:\n                right.append(i)\n        return quick_sort(left)+[pivot]+quick_sort(right)\n    else:\n        return arr\ndef insert_sort(arr):\n    '''\n    Write a python function to sort an array using an insert sort.\n    '''\n    arr=arr[:]\n    if len(arr)>1:\n        for i in range(1,len(arr)):\n            j=i\n            while j>0 and arr[j]<arr[j-1]:\n                arr[j],arr[j-1]=arr[j-1],arr[j]\n                j-=1\n    return arr\ndef insert_sort_wrapper(arr):\n    '''\n    Write a python function to sort an array using an insert sort.\n    '''\n    arr=arr[:]\n    if len(arr)>1:\n        for i in range(1,len(arr)):\n            j=i\n            while j>0 and arr[j]<arr[j-1]:\n                arr[j],arr[j-1]=arr[j-1],arr[j]\n                j-=1\n    return arr\ndef selection_sort(arr):\n    '''\n    Write a python function to sort an array using a selection sort.\n    '''\n    arr=arr[:]\n    if len(arr)>1:\n        for i in range(0",
        "num_ids": 26
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return len(arr) - bisect.bisect_left(arr[::-1],x)\n",
        "num_ids": 26
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    first = 0\n    last = len(arr)-1\n    \n    while first <= last:\n        mid = (first + last)/2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            first = mid + 1\n        else:\n            last = mid - 1\n    return -1\n    \ndef first(arr,x):\n    '''\n    Write a python function to find the first position of an element in a sorted array.\n    '''\n    first = 0\n    last = len(arr)-1\n    \n    while first <= last:\n        mid = (first + last)/2\n        if arr[mid] == x:\n            if mid == 0 or x > arr[mid-1]:\n                return mid\n            last = mid - 1\n        elif arr[mid] < x:\n            first = mid + 1\n        else:\n            last = mid - 1\n    return -1\n    \ndef first_position(arr,x):\n    '''\n    Write a python function to find the first position of an element in a sorted array.\n    '''\n    first = 0\n    last = len(arr)-1\n    \n    while first <= last:\n        mid = (first + last)/2\n        if arr[mid] == x:\n            if mid == 0 or x < arr[mid-1]:\n                return mid\n            last = mid - 1\n        elif arr[mid] < x:\n            first = mid + 1\n        else:\n            last = mid - 1\n    return -1\n    \ndef last_position(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    first = 0\n    last = len(arr)-1\n    \n    while first <= last:\n        mid = (first + last)/2\n        if arr[mid] == x:\n            if mid == len(arr)-1 or x > arr[mid+1]:\n                return mid\n            first = mid + 1\n        elif arr[mid] < x:\n            first = mid + 1\n        else:\n            last = mid - 1\n    return -1\n    \ndef last_position2(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    first = 0\n    last = len(arr)-1\n    \n    while first <= last:\n        mid = (first + last)/2\n        if arr[mid] == x:\n            if mid == len(arr)-1 or x > arr[mid+1]:\n                return mid\n            last = mid - 1\n        elif arr[mid] < x:\n            first = mid + 1\n        else:\n            last = mid - 1\n    return -1\n    \ndef last_position3(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    first = 0\n    last = len(arr)-1\n    \n    while first <= last:\n        mid = (first + last)/2\n        if arr[mid] == x:\n            if mid == len(arr)-1 or x < arr[mid+1]:\n                return mid\n            last = mid - 1\n        elif arr[mid] < x:\n            first = mid + 1\n        else:\n            last = mid - 1\n    return -1\n    \ndef last_position4(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    first = 0\n    last = len(arr)-1\n    \n    while first <= last:\n        mid = (first + last)/2\n        if arr[mid] == x:\n            if mid == len(arr)-1 or x > arr[mid+1]:\n                return mid\n            last = mid - 1\n        elif arr[mid] < x:\n            first = mid + 1\n        else:\n            last = mid - 1\n    return -1\n    \ndef count_occurence(arr,x):\n    '''\n    Write a python function to count the number of occurences of an element in a sorted array.\n    '''\n    first = 0\n    last = len(arr)-1\n    \n    count = 0\n    while first <= last:\n        mid = (first + last)/2\n        if arr[mid] == x:\n            count += 1\n            last = mid - 1\n        elif arr[mid] < x:\n            first = mid + 1\n        else:\n            last = mid - 1\n    return count\n    \ndef count_occurence2(arr,x):\n    '''\n    Write a python function to count the number of occurences of an element in a sorted array.\n    '''\n    first = 0\n    last = len(arr)-1\n    \n    count = 0\n    while first <= last:\n        mid = (first + last)/2\n        if arr[mid] == x:\n            count += 1\n            last = mid - 1\n        elif arr[mid] < x:\n            first = mid + 1\n        else:\n            last = mid - 1\n    return count\n    \ndef count_occurence3(arr,x):\n    '''\n    Write a python function to count the number of occurences of an element in a sorted array.\n    '''\n    first = 0\n    last = len(arr)-1\n    \n    count = 0\n    while first <= last:\n        mid = (first + last)/2\n        if arr[mid] == x:\n            count += 1\n            first = mid + 1\n        elif arr[mid] < x:\n            first = mid + 1\n        else:\n            last = mid - 1\n    return count\n    \ndef count_occurence4(arr,x):\n    '''\n    Write a python function to count the number of occurences of an element in a sorted array.\n    '''\n    first = 0\n    last = len(arr)-1\n    \n    count = 0\n    while first <= last:\n        mid = (first + last)/2\n        if arr[mid] == x:\n            count += 1\n            last = mid - 1\n        elif arr[mid] < x:\n            first = mid + 1\n        else:\n            last = mid - 1\n    return count\n    \ndef count_occurence5(arr,x):\n    '''\n    Write a python function to count the number of occurences of an element in a sorted array.\n    '''\n    first = 0\n    last = len(arr)-1\n    \n    count = 0\n    while first <= last:\n        mid = (first + last)/2\n        if arr[mid] == x:\n            count += 1\n            first = mid + 1\n        elif arr[mid] < x:\n            first = mid + 1\n        else:\n            last = mid - 1\n    return count\n    \ndef count_occurence6(arr,x):\n    '''\n    Write a python function to count the number of occurences of an element in a sorted array.\n    '''\n    first = 0\n    last = len(arr)-1\n    \n    count = 0\n    while first <= last:\n        mid = (first + last)/2\n        if arr[mid] == x:\n            count += 1\n            last = mid - 1\n        elif arr[mid] < x:\n            first = mid + 1\n        else:\n            last = mid - 1\n    return count\n    \ndef count_occurence7(arr,x):\n    '''\n    Write a python function to count the number of occurences of an element in a sorted array.\n    '''\n    first = 0\n    last = len(arr)-1\n    \n    count = 0\n    while first <= last:\n        mid = (first + last)/2\n        if arr[mid] == x:\n            count += 1\n            first = mid + 1\n        elif arr[mid] < x:\n            first = mid + 1\n        else:\n            last = mid - 1\n    return count\n    \ndef count_occurence8(arr,x):\n    '''\n    Write a python function to count the number of occurences of an element in a sorted array.\n    '''\n    first = 0\n    last = len(arr)-1\n    \n    count = 0\n    while first <= last:\n        mid = (first + last)/2\n        if arr[mid] == x:\n            count += 1",
        "num_ids": 54
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    \n    pattern = re.compile('.*?a.*?b')\n    if pattern.match(text):\n        return True\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match = re.match(r'a.*b$', text)\n    if match:\n        return match.group()\n    return None\n",
        "num_ids": 35
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'(?<=a)(.+)(?=b)')\n    match = pattern.search(text)\n    if match:\n        return match.group(1)\n",
        "num_ids": 51
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile('.*a.*b$')\n    if pattern.match(text):\n        return True\n    else:\n        return False\n",
        "num_ids": 39
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search('^[a-z]+', text, re.I) and re.search('[a-z]+$', text, re.I)\n",
        "num_ids": 40
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    #pattern = re.compile(r'(?<=a)[^b]+$')\n    pattern = re.compile(r'(?<=a).*(?=b)')\n    result = pattern.search(text)\n    return result\n",
        "num_ids": 63
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    import re\n    pattern = re.compile(r'a.*b$')\n    if pattern.match(text):\n        return True\n    else:\n        return False\n    \ndef text_starta_endb2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    import re\n    pattern = re.compile(r'a.*?b')\n    if pattern.match(text):\n        return True\n    else:\n        return False\n    \ndef text_starta_endb3(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    import re\n    pattern = re.compile(r'a.*?b', re.DOTALL)\n    if pattern.match(text):\n        return True\n    else:\n        return False\n",
        "num_ids": 49
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match = re.search(r'^[a-zA-Z]+[a-zA-Z]*b$', text)\n    return bool(match)\n    \n    \ndef text_starta_endb_none(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match = re.search(r'^[a-zA-Z]+[a-zA-Z]*b$', text)\n    return bool(match)\n    \n    \ndef text_starta_endb_none(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match = re.search(r'^[a-zA-Z]+[a-zA-Z]*b$', text)\n    return bool(match)\n    \ndef text_starta_endb_none(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match = re.search(r'^[a-zA-Z]+[a-zA-Z]*b$', text)\n    return bool(match)\n    \ndef text_starta_endb_none(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match = re.search(r'^[a-zA-Z]+[a-zA-Z]*b$', text)\n    return bool(match)\n    \ndef text_starta_endb_none(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match = re.search(r'^[a-zA-Z]+[a-zA-Z]*b$', text)\n    return bool(match)\n    \ndef text_starta_endb_none(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match = re.search(r'^[a-zA-Z]+[a-zA-Z]*b$', text)\n    return bool(match)\n    \ndef text_starta_endb_none(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match = re.search(r'^[a-zA-Z]+[a-zA-Z]*b$', text)\n    return bool(match)\n    \ndef text_starta_endb_none(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match = re.search(r'^[a-zA-Z]+[a-zA-Z]*b$', text)\n    return bool(match)\n    \ndef text_starta_endb_none(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match = re.search(r'^[a-zA-Z]+[a-zA-Z]*b$', text)\n    return bool(match)\n    \ndef text_starta_endb_none(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match = re.search(r'^[a-zA-Z]+[a-zA-Z]*b$', text)\n    return bool(match)\n    \ndef text_starta_endb_none(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match = re.search(r'^[a-zA-Z]+[a-zA-Z]*b$', text)\n    return bool(match)\n    \ndef text_starta_endb_none(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match = re.search(r'^[a-zA-Z]+[a-zA-Z]*b$', text)\n    return bool(match)\n    \ndef text_starta_endb_none(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match = re.search(r'^[a-zA-Z]+[a-zA-Z]*b$', text)\n    return bool(match)\n    \ndef text_starta_endb_none(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match = re.search(r'^[a-zA-Z]+[a-zA-Z]*b$', text)\n    return bool(match)\n    \ndef text_starta_endb_none(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match = re.search(r'^[a-zA-Z]+[a-zA-Z]*b$', text)\n    return bool(match)\n    \ndef text_starta_endb_none(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match = re.search(r'^[a-zA-Z]+[a-zA-Z]*b$', text)\n    return bool(match)\n    \ndef text_starta_endb_none(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match = re.search(r'^[a-zA-Z]+[a-zA-Z]*b$', text)\n    return bool(match)\n    \ndef text_starta_endb_none(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match = re.search(r'^[a-zA-Z]+[a-zA-Z]*b$', text)\n    return bool(match)\n    \ndef text_starta_endb_none(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match = re.search(r'^[a-zA-Z]+[a-zA-Z]*b$', text)\n    return bool(match)\n    \ndef text_starta_endb_none(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match = re.search(r'^[a-zA-Z]+[a-zA-Z]*b$', text)\n    return bool(match)\n    \ndef text_starta_endb_none(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match = re.search(r'^[a-zA-Z]+[a-zA-Z]*b$', text)\n    return bool(match)\n    \ndef text_starta_endb_none(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match = re.search(r'^[a-zA-Z]+[a-zA-Z]*b$', text)\n    return bool(match)\n    \ndef text_starta_endb_none(text):\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*?b')\n    if pattern.match(text):\n        return True\n    else:\n        return False\n",
        "num_ids": 39
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match = re.search(r'\\ba.*\\bb', text)\n    if match:\n        return match.group()\n    return None\n",
        "num_ids": 36
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n",
        "num_ids": 11
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    result = 0\n    for i in dict:\n        result += dict[i]\n    return result\n",
        "num_ids": 26
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # Iterate through dictionary, adding up all the values\n    sum = 0\n    for k, v in dict.items():\n        sum += v\n",
        "num_ids": 36
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n",
        "num_ids": 11
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total = total + dict[key]\n    return total\n    \n",
        "num_ids": 30
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    if not isinstance(dict,dict):\n        raise TypeError('Passed argument is not a dictionary')\n    return sum(dict.values())\n",
        "num_ids": 36
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total = total + dict[key]\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total\n",
        "num_ids": 26
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(range(l, r+1, 2))\n",
        "num_ids": 17
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n < 0:\n        return 0\n    elif n > 0:\n        return n + sum_odd(n-1)\n    else:\n        return 0\n",
        "num_ids": 42
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 1:\n            sum += i\n    return sum\n",
        "num_ids": 34
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum([i for i in range(l,r+1) if i % 2!= 0])\n",
        "num_ids": 27
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(n for n in range(l,r+1) if n%2==1)\n",
        "num_ids": 26
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for x in range(l,r+1):\n        if x%2!= 0:\n            sum = sum + x\n    return sum\n",
        "num_ids": 41
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    #sum = n*(n+1)/2\n    #return sum\n    return sum(range(1,n+1,2))\n    \n    \n    \nprint \"1. sum of odd numbers between 0 and 10\",sum_odd(10)\nprint \"2. sum of odd numbers between 5 and 20\",sum_odd(20)\nprint \"3. sum of odd numbers between 0 and 30\",sum_odd(30)\nprint \"4. sum of odd numbers between 0 and 100\",sum_odd(100)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2010
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if not isinstance(n,int):\n        raise TypeError('n is not an integer')\n    if n<0:\n        raise ValueError('n is not a positive integer')\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return (n+1)*(n+2)/2\n",
        "num_ids": 86
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(x for x in range(l, r+1) if x % 2)\n",
        "num_ids": 24
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if type(n)!= int: \n        print 'Invalid input' \n        return\n    if n < 0: \n        print 'Invalid input'\n        return \n    elif n == 0:\n        return 0\n    else: \n        return sum_odd(n-1) + n \n        \ndef sum_even(n): \n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    if type(n)!= int: \n        print 'Invalid input' \n        return \n    if n < 0: \n        print 'Invalid input' \n        return \n    elif n == 0:\n        return 0\n    else: \n        return sum_even(n-1) + 2*n \n    \ndef sum_odd_even(n): \n    '''\n    Write a python function to find the sum of all odd and even natural numbers within the range l and r.\n    '''\n    if type(n)!= int: \n        print 'Invalid input' \n        return \n    if n < 0: \n        print 'Invalid input' \n        return \n    elif n == 0:\n        return 0\n    else: \n        return sum_odd_even(n-1) + n + n \n        \ndef fact(n): \n    '''\n    Write a python function to find the factorial of a number n. \n    '''\n    if type(n)!= int: \n        print 'Invalid input' \n        return\n    elif n < 0: \n        print 'Invalid input' \n        return\n    elif n == 0:\n        return 1\n    else: \n        return n * fact(n-1)\n        \ndef fact_iter(n): \n    '''\n    Write a python function to find the factorial of a number n using iteration. \n    '''\n    if type(n)!= int: \n        print 'Invalid input' \n        return\n    elif n < 0: \n        print 'Invalid input' \n        return\n    elif n == 0:\n        return 1\n    else: \n        fact = 1\n        while n > 1: \n            fact = fact * n \n            n = n - 1\n        return fact\n        \ndef fib(n): \n    '''\n    Write a python function to find the nth Fibonacci number. \n    '''\n    if type(n)!= int: \n        print 'Invalid input' \n        return \n    elif n < 0: \n        print 'Invalid input' \n        return \n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else: \n        return fib(n-1) + fib(n-2)\n        \ndef fib_iter(n): \n    '''\n    Write a python function to find the nth Fibonacci number using iteration. \n    '''\n    if type(n)!= int: \n        print 'Invalid input' \n        return \n    elif n < 0: \n        print 'Invalid input' \n        return \n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else: \n        a, b = 0, 1\n        for i in range(n-1): \n            a, b = b, a+b\n        return b\n        \ndef get_pisano(n): \n    '''\n    Write a python function to find the Pisano period of a number n. \n    '''\n    if type(n)!= int: \n        print 'Invalid input' \n        return \n    elif n < 0: \n        print 'Invalid input' \n        return \n    elif n == 0:\n        return 1\n    else: \n        return get_pisano(n+1) + get_pisano(n-1)\n        \ndef get_pisano_iter(n): \n    '''\n    Write a python function to find the Pisano period of a number n using iteration. \n    '''\n    if type(n)!= int: \n        print 'Invalid input' \n        return \n    elif n < 0: \n        print 'Invalid input' \n        return \n    elif n == 0:\n        return 1\n    else: \n        a, b = 0, 1\n        while a!= b: \n            a, b = b, a+b\n        return get_pisano(a)\n    \ndef fib_mod(n, m): \n    '''\n    Write a python function to find the nth Fibonacci number modulo m. \n    '''\n    if type(n)!= int or type(m)!= int: \n        print 'Invalid input' \n        return \n    elif n < 0 or m < 0: \n        print 'Invalid input' \n        return \n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else: \n        return fib_mod(n-1, m) + fib_mod(n-2, m)\n        \ndef fib_mod_iter(n, m): \n    '''\n    Write a python function to find the nth Fibonacci number modulo m using iteration. \n    '''\n    if type(n)!= int or type(m)!= int: \n        print 'Invalid input' \n        return \n    elif n < 0 or m < 0: \n        print 'Invalid input' \n        return \n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else: \n        a, b = 0, 1\n        for i in range(n-1): \n            a, b = b, (a+b) % m\n        return b\n        \ndef binary_search(l, target, start, end): \n    '''\n    Write a python function to implement binary search. \n    '''\n    if start > end: \n        return False\n    mid = (start + end) // 2\n    if l[mid] == target: \n        return True\n    elif l[mid] > target: \n        return binary_search(l, target, start, mid - 1)\n    elif l[mid] < target: \n        return binary_search(l, target, mid + 1, end)\n        \ndef power_mod(a, b, m): \n    '''\n    Write a python function to find a^b modulo m. \n    '''\n    if type(a)!= int or type(b)!= int or type(m)!= int: \n        print 'Invalid input' \n        return \n    elif a < 0 or b < 0 or m < 0: \n        print 'Invalid input' \n        return \n    elif b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else: \n        return power_mod(a, b//2, m) * power_mod(a, b//2, m) % m\n        \ndef power_mod_iter(a, b, m): \n    '''\n    Write a python function to find a^b modulo m using iteration. \n    '''\n    if type(a)!= int or type(b)!= int or type(m)!= int: \n        print 'Invalid input' \n        return \n    elif a < 0 or b < 0 or m < 0: \n        print 'Invalid input' \n        return \n    elif b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else: \n        a_pow = 1\n        while b > 1: \n            if b % 2 == 1: \n                a_pow = (a_pow * a) % m\n            a = (a * a) % m\n            b //= 2\n        return a_pow\n        \ndef is_palindrome(n): \n    '''\n    Write a python function to check whether a number is a palindrome. \n    '''\n    if type(n)!= int: \n        print 'Invalid input' \n        return \n    elif n < 0: \n        print 'Invalid input' \n        return \n    elif n == 0:\n        return True\n    else: \n        return n % 10 == ",
        "num_ids": 70
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    \n    # Initialize the sum as 0\n    sum = 0\n    \n    # Iterate over the array\n    for ele in arr:\n        \n        # Add current element to sum\n        sum = sum + ele\n    \n    # Return the sum of array\n    return sum\n",
        "num_ids": 66
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for element in arr:\n        total += element\n    return total\n",
        "num_ids": 23
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s = 0\n    for i in arr:\n        s+=i\n    return s\n",
        "num_ids": 23
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if arr:\n        return _sum(arr[1:]) + arr[0]\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << 32) - 1\n    return (n << d) | ((n & mask) >> (32-d))\n",
        "num_ids": 33
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    bitmask = 0xFFFFFFFF\n    result = 0\n    for i in range(d):\n        temp = n & bitmask\n        result = result | (temp<<(32-i-1))\n        n = n >> 1\n    return result\n",
        "num_ids": 60
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n<<d|n>>(32-d)\n",
        "num_ids": 16
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d | n >> (32-d)) & 0xffffffff\n",
        "num_ids": 22
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    res=0\n    for i in range(d):\n        res=res<<1\n        res+=n&1\n        n>>=1\n    return res\ndef right_rotate(n,d):\n    res=0\n    for i in range(d):\n        res=res<<1\n        res+=n&1\n        n>>=1\n    return res\n",
        "num_ids": 89
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n & 0xffffffff\n    n = n << d\n    n = n & 0xffffffff\n    n = n | (n << 1) & 0xffffffff\n    n = n & 0xffffffff\n    return n\n",
        "num_ids": 59
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff\n",
        "num_ids": 24
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n < 0:\n        n = ~n\n    mask = 0x1<<d\n    return ((n & mask)<<d)|(n>>(32-d))\n",
        "num_ids": 43
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d)|(n >> (32-d))\ndef left_rotate_in_bits(n,d):\n    '''\n    Write a function that rotates a number by d bits in a given 32 bit number\n    '''\n    mask = (1<<d)-1\n    return (n & mask) | ((n << 32-d) & ((1<<32)-1))\n",
        "num_ids": 36
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    #print n\n    #print \"left\",n,d\n    return (n << d)|(n >> (32-d))\n",
        "num_ids": 33
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s', '', text)\ndef num_vowels(word):\n    '''\n    Write a function that counts the number of vowels in a word. \n    \n    The function should have one parameter (string). \n    \n    Return the result as an integer.\n    '''\n    return len(re.findall('[aeiou]', word))\n",
        "num_ids": 20
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\" \", \"\", text)\n",
        "num_ids": 14
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "num_ids": 19
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r'[\\s]*', '', text)\n    return text\n",
        "num_ids": 26
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)\n",
        "num_ids": 17
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "num_ids": 19
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r'\\s+', '', text)\n    return text\n",
        "num_ids": 24
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\n",
        "num_ids": 18
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('[\\s]*', '', text)\ndef remove_excess_whitespaces(text):\n    '''\n    Write a function to remove excess whitespaces from a string.\n    '''\n    return re.sub('[\\s]+','', text)\n",
        "num_ids": 17
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "num_ids": 19
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    dic = {}\n    dic[x] = dic.get(x,0) + 1\n    dic[y] = dic.get(y,0) + 1\n    dic[z] = dic.get(z,0) + 1\n    s = set(dic.values())\n    if len(s) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 98
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if (x==y==z):\n        return 3\n    elif (x==y) or (x==z) or (y==z):\n        return 2\n    else:\n        return 0\n    \n",
        "num_ids": 51
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y and y == z:\n        return 1\n    else:\n        return 0\n",
        "num_ids": 25
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert(x==y and y==z)\n    # or\n    return x==y and y==z\n",
        "num_ids": 28
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y and y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n",
        "num_ids": 45
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z:\n        return 3\n    elif x==y or x==z or y==z:\n        return 2\n    else:\n        return 0\n",
        "num_ids": 43
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n",
        "num_ids": 10
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    number_of_equal = 0\n    if x == y == z:\n        number_of_equal = 3\n    elif x == y:\n        number_of_equal = 2\n    elif y == z:\n        number_of_equal = 2\n    return number_of_equal\n",
        "num_ids": 71
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # all([x,y,z])\n    # all([x,y])\n    # all([x])\n    # all([])\n    # all([x,y,z])\n    if x == y == z:\n        return 3\n    elif x == y:\n        return 2\n    elif x == z:\n        return 2\n    elif y == z:\n        return 2\n    else:\n        return 0\n",
        "num_ids": 103
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return (x==y==z)\n",
        "num_ids": 12
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    for i in range(0,n-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return 0\n",
        "num_ids": 45
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i+1\n    return 0\n",
        "num_ids": 39
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    # If array is already sorted then there is no rotation\n    if(arr == sorted(arr)):\n        return 0\n",
        "num_ids": 32
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    start_idx = 0\n    end_idx = len(arr) - 1\n    while start_idx <= end_idx:\n        if arr[start_idx] <= arr[end_idx]:\n            return 0\n        mid_idx = start_idx + (end_idx - start_idx) // 2\n        if arr[start_idx] <= arr[mid_idx] and arr[mid_idx] <= arr[end_idx]:\n            start_idx = mid_idx + 1\n        elif arr[start_idx] > arr[mid_idx]:\n            start_idx = mid_idx + 1\n        else:\n            end_idx = mid_idx - 1\n    return start_idx - 1\n",
        "num_ids": 188
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    n = len(arr)\n",
        "num_ids": 12
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    for i in range(len(arr)):\n        if arr[i]!= arr[(i+1) % len(arr)]:\n            return i\n    return 0\n",
        "num_ids": 44
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        if arr[0] > arr[1]:\n            return 0\n        else:\n            return 1\n",
        "num_ids": 63
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    rotations = 0\n    for i in range(len(arr)-1):\n        if arr[i]>arr[i+1]:\n            rotations +=1\n    return rotations\n",
        "num_ids": 46
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    result = -1\n    for i in xrange(n-1):\n        if arr[i] > arr[i+1]:\n            result += 1\n    return result\n    \n    \n    \ndef get_permutation(string):\n    '''\n    Write a python function to print all permutations of a string. https://www.geeksforgeeks.org/printing-permutations-string/\n    '''\n    if len(string) == 0:\n        return\n    else:\n        if len(string) == 1:\n            print string\n        else:\n            for i in xrange(len(string)):\n                temp = string[i]\n                string = string[:i] + string[i+1:]\n                get_permutation(string)\n                string = temp + string\n                \n                \ndef get_permutations(string):\n    '''\n    Write a python function to print all permutations of a string. https://www.geeksforgeeks.org/printing-permutations-string/\n    '''\n    if len(string) == 0:\n        return\n    else:\n        if len(string) == 1:\n            print string\n        else:\n            for i in xrange(len(string)):\n                temp = string[i]\n                string = string[:i] + string[i+1:]\n                get_permutations(string)\n                string = temp + string\n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n            ",
        "num_ids": 1731
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    rotations = 0\n    if len(arr) == 1:\n        return 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            rotations += 1\n    return rotations\n    \narr = [3, 4, 5, 1, 2]\narr = [4, 3, 1, 2]\nprint(count_rotation(arr))",
        "num_ids": 97
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1:\n        return True\n    else:\n        if (n % int(math.sqrt(n))) == 0:\n            return True\n        else:\n            return False\n",
        "num_ids": 47
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return (n == (int)(pow(n,0.5)))\n",
        "num_ids": 20
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    s = int(n**0.5)\n    return s*s == n\n",
        "num_ids": 22
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n == 1) :\n        return True\n    if (n <= 0) :\n        return False\n    if (n % 2 == 0) :\n        return is_perfect_square(n / 2)\n    return is_perfect_square((n + 1) / 2)\n    return False\n",
        "num_ids": 72
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1:\n        return True\n    n = abs(n)\n    if n == 1:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0 :\n        return False\n",
        "num_ids": 13
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n == 0) :\n        return 0\n",
        "num_ids": 15
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n==0:\n        return True\n    i = 1\n    while i*i<=n:\n        if i*i==n:\n            return True\n        i+=1\n    return False\n",
        "num_ids": 50
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0 :\n        return False\n",
        "num_ids": 13
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    \n    # If n is greater than 0, then n is a positive number\n    if n > 0:\n        # To get the square of n\n        square = n*n\n        # This is to check whether the given number is a perfect square or not\n        if (square == n):\n            return True\n        else:\n            return False\n        \n    # If n is less than 0, then n is a negative number\n    else:\n        # To get the square of n\n        square = n*n\n        # This is to check whether the given number is a perfect square or not\n        if (square == n):\n            return True\n        else:\n            return False\n",
        "num_ids": 155
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in arr:\n        if i%2 == 1:\n            return False\n    return True\n    \ndef is_prime(num):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if num <= 1:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    elif num < 9:\n        return True\n    elif num%3 == 0:\n        return False\n    else:\n        for i in range(5,int(num**0.5 + 1),6):\n            if num % i == 0:\n                return False\n        return True\n    \ndef is_sorted_list(l):\n    '''\n    Write a function to check whether the list is sorted or not.\n    '''\n    for i in range(1,len(l)):\n        if l[i-1] > l[i]:\n            return False\n    return True\n",
        "num_ids": 38
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(len(arr)):\n        if (arr[i] % 2!= 0):\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    total = 1\n    for num in arr: \n        total *= num\n    return total % 2 == 0\n",
        "num_ids": 29
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n",
        "num_ids": 28
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return True if product % 2 == 0 else False\n",
        "num_ids": 32
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for item in arr:\n        product *= item\n    return product % 2 == 0\n",
        "num_ids": 28
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in range(len(arr)): \n        product = product * arr[i]\n    if(product%2==0): \n        return True\n    else: \n        return False\n",
        "num_ids": 54
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return reduce(lambda x, y: x * y, arr) % 2 == 0\n",
        "num_ids": 22
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return True\n    else:\n        product = 1\n        for i in arr:\n            product *= i\n        return product % 2 == 0\n",
        "num_ids": 46
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return reduce(lambda x, y: x * y, arr) % 2 == 0\n",
        "num_ids": 22
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    for list in lists:\n        sum = 0\n        for element in list:\n            sum += element\n        if sum > max_sum:\n            max_sum = sum\n            max_list = list\n    return max_list\n",
        "num_ids": 62
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return max(lists, key=lambda l: sum(l))\n",
        "num_ids": 18
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max = -1\n    max_list = []\n    for l in lists:\n        sum = 0\n        for i in l:\n            sum += i\n        if sum > max:\n            max = sum\n            max_list = l\n    return max_list\n",
        "num_ids": 64
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    total = -1\n    final = []\n    for l in lists:\n        total += sum(l)\n        if total > total:\n            total = sum(l)\n            final = l\n    return final\n",
        "num_ids": 52
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_sum_list = []\n    for i in range(len(lists)):\n        sum_list = 0\n        for j in range(len(lists[i])):\n            sum_list = sum_list + lists[i][j]\n        if sum_list > max_sum:\n            max_sum = sum_list\n            max_sum_list = lists[i]\n    return max_sum_list\n",
        "num_ids": 111
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    current_max_sum = 0\n    max_list = []\n    for list in lists:\n        current_max_sum = 0\n        for i in list:\n            current_max_sum += i\n        if current_max_sum > current_max_sum:\n            max_list = list\n            current_max_sum = 0\n    return max_list\n",
        "num_ids": 87
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if lists == []:\n        return []\n    list_max = [lists[0][0]]\n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n        if current_sum > sum(list_max):\n            list_max = lists[i]\n    return list_max\n",
        "num_ids": 100
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_sum_list = []\n    for sublist in lists:\n        if sum(sublist) > max_sum:\n            max_sum = sum(sublist)\n    for sublist in lists:\n        if sum(sublist) == max_sum:\n            max_sum_list.append(sublist)\n    return max_sum_list\n",
        "num_ids": 92
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    current = 0\n    max_list = []\n    for i in range(0,len(lists)):\n        current = current + lists[i]\n        max_list.append(current)\n    print max_list\n    return max_list\n",
        "num_ids": 60
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    length = len(lists)\n    if length == 0:\n        return None\n    elif length == 1:\n        return lists[0]\n    else:\n        max_sum = -sys.maxint\n        list_of_max_sum = None\n        for i in xrange(0, length):\n            for j in xrange(0, length):\n                if i!= j and j!= 0 and i!= length - 1:\n                    current_sum = sum(lists[i]) + sum(lists[j])\n                    if current_sum > max_sum:\n                        max_sum = current_sum\n                        list_of_max_sum = lists[i] + lists[j]\n    return list_of_max_sum\n",
        "num_ids": 174
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    test_str = test_str.lower()\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i] == test_str[i-1]:\n            current_run = current_run + 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 1\n    return max_run\n",
        "num_ids": 108
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    count_run = 0\n    for char in test_str:\n        if char.isupper():\n            count_run += 1\n        else:\n            max_run = max(max_run, count_run)\n            count_run = 0\n    max_run = max(max_run, count_run)\n    return max_run\n",
        "num_ids": 89
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    #max_run = 0\n    #uppercase_count = 0\n    #for char in test_str:\n    #    if char.isupper():\n    #        uppercase_count += 1\n    #        if uppercase_count > max_run:\n    #            max_run = uppercase_count\n    #    else:\n    #        uppercase_count = 0\n    #return max_run\n",
        "num_ids": 103
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    upper = 0\n    temp = 0\n    for i in test_str:\n        if i.isupper():\n            temp += 1\n        else:\n            temp = 0\n        upper = max(upper, temp)\n    return upper\n",
        "num_ids": 57
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    upper_count = 0\n    \n    for char in test_str:\n        if char.isupper():\n            upper_count += 1\n        else:\n            upper_count = 0\n        if upper_count > max_run:\n            max_run = upper_count\n    return max_run\n",
        "num_ids": 72
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    curr_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            curr_run += 1\n        else:\n            max_run = max(max_run, curr_run)\n            curr_run = 0\n    return max(max_run, curr_run)\n",
        "num_ids": 94
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if test_str == None:\n        return 0\n    max = 1\n    current = 1\n    for i in range(1, len(test_str)):\n        if test_str[i-1] < test_str[i]:\n            current += 1\n            if current > max:\n                max = current\n        else:\n            current = 1\n    return max\n",
        "num_ids": 89
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    curr_count = 0\n    for c in test_str:\n        if c.isupper():\n            curr_count += 1\n        else:\n            if curr_count > max_count:\n                max_count = curr_count\n            curr_count = 0\n    return max_count\n",
        "num_ids": 82
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max = 0\n    for i in range(len(test_str)):\n        count = 0\n        if test_str[i].isupper():\n            for j in range(i,len(test_str)):\n                if test_str[j].isupper():\n                    count += 1\n                else:\n                    break\n            if count > max:\n                max = count\n    return max\n",
        "num_ids": 94
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if test_str is None:\n        return 0\n",
        "num_ids": 15
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n",
        "num_ids": 28
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n",
        "num_ids": 24
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return next((x for x in nums if x % 2 == 1), None)\n    \ndef first_odd_index(nums):\n    '''\n    Write a python function to find the index of the first odd number in a given list of numbers.\n    '''\n    for i, x in enumerate(nums):\n        if x % 2 == 1:\n            return i\n    return None\n",
        "num_ids": 32
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for n in nums:\n        if n % 2 == 1:\n            return n\n    return None\n",
        "num_ids": 27
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for n in nums:\n        if n % 2!= 0:\n            return n\n    return None\n",
        "num_ids": 28
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2!=0:\n            return nums[i]\n    return None\n",
        "num_ids": 41
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!=0:\n            return i\n    return None\n",
        "num_ids": 28
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!= 0:\n            return i\n    return None\n",
        "num_ids": 28
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return next((num for num in nums if num%2==1), None)\n",
        "num_ids": 22
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!= 0:\n            return i\n",
        "num_ids": 24
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] not in K:\n        return False\n    elif test_tup[1] not in K:\n        return False\n    else:\n        return True\n    \ndef sort_tuples(tup):\n    '''\n    Given a tuple of tuples, sort it by the second element of the tuple.\n    '''\n    return sorted(tup, key=lambda x: x[1])\n",
        "num_ids": 19
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    \n    if (test_tup[0]+test_tup[1]) <= K:\n        print \"True\"\n    else:\n        print \"False\"\n    \n    return \n",
        "num_ids": 47
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return test_tup[K] == 'K'\n",
        "num_ids": 16
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    print(\"Checking for tuples containing the {}.\".format(K))\n    for tup in test_tup:\n        if K in tup:\n            print(tup)\n",
        "num_ids": 46
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    print \"Checking K: \", test_tup, K\n    return True if K in test_tup else False\n",
        "num_ids": 30
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # YOUR CODE GOES HERE\n    return True\n",
        "num_ids": 14
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if len(tup)!= K:\n            return False\n    return True\n",
        "num_ids": 32
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return all(tup[K] == test_tup[K] for tup in test_tups)\n",
        "num_ids": 29
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    tuple_1 = test_tup[0]\n    tuple_2 = test_tup[1]\n    if tuple_1[K-1] == tuple_2[K-1]:\n        print tuple_1, tuple_2,'match'\n    else:\n        print tuple_1, tuple_2, 'do not match'\n",
        "num_ids": 83
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K == 1:\n        for elem in test_tup:\n            if elem!= test_tup[0]:\n                return False\n        return True\n    else:\n        return False\n",
        "num_ids": 50
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return all([test_tup1[i]>=test_tup2[i] for i in range(len(test_tup2))])\n",
        "num_ids": 39
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for idx in xrange(len(test_tup1)):\n        if test_tup2[idx] < test_tup1[idx]:\n            print '1'\n            return False\n    return True\n",
        "num_ids": 56
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return True\n    return False\n",
        "num_ids": 46
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print('Lengths of tuples must be equal.')\n        return False\n    if test_tup1 == test_tup2:\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True\n",
        "num_ids": 103
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] >= test_tup2[i]:\n                print 'No'\n                return\n        print 'Yes'\n    else:\n        print 'No'\n",
        "num_ids": 83
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return True\n    elif test_tup1[1] > test_tup2[1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for tup1_tup2 in zip(test_tup1, test_tup2):\n        if tup1_tup2[0] > tup1_tup2[1]:\n            return False\n    return True\n",
        "num_ids": 59
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return all(i1 < i2 for i1,i2 in zip(test_tup1, test_tup2))\n",
        "num_ids": 33
    }
]