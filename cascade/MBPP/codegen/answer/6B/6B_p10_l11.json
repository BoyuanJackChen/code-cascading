[
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1).intersection(set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [element for element in test_tup1 if element in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n    \n    \n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    shared_elements = []\n    for num1 in test_list1:\n        for num2 in test_list2:\n            if num1 == num2:\n                shared_elements.append(num1)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    for element in test_tup1:\n        if element in test_tup2:\n            return True\n    return False\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if type(test_tup1)!= type(test_tup2):\n        return False\n    else:\n        set1 = set(test_tup1)\n        set2 = set(test_tup2)\n        return set1 & set2\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return tuple(shared_elements)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_tup1_list = list(test_tup1)\n    test_tup2_list = list(test_tup2)\n    intersection = []\n    for i in test_tup1_list:\n        if i in test_tup2_list:\n            intersection.append(i)\n    return intersection\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if isinstance(test_tup1, tuple):\n        if isinstance(test_tup2, tuple):\n            # if both lists are tuples\n            if len(test_tup1) == len(test_tup2):\n                test_tup3 = ()\n                for i in xrange(len(test_tup1)):\n                    # if both lists have same length\n                    if test_tup1[i] in test_tup2:\n                        test_tup3 += (test_tup1[i],)\n                return test_tup3\n            else:\n                return None\n        else:\n            return None\n    else:\n        return None\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<2:\n        return False\n    if n==2:\n        return False\n    if n%2==0:\n        return True\n    sqr = int(math.sqrt(n))\n    for i in range(3,sqr+1,2):\n        if n%i==0:\n            return True\n    return False\ndef non_prime_count(start,end):\n    '''\n    Write a python function to return the number of non-prime numbers \n    in the range(start,end+1).\n    '''\n    count = 0\n    for i in range(start,end+1):\n        if is_not_prime(i):\n            count+=1\n    return count\ndef is_not_prime_list(n):\n    '''\n    Write a python function to identify non-prime numbers in a list.\n    '''\n    for i in n:\n        if is_not_prime(i):\n            return True\n    return False\ndef non_prime_count_list(n):\n    '''\n    Write a python function to return the number of non-prime numbers \n    in the list.\n    '''\n    count = 0\n    for i in n:\n        if is_not_prime(i):\n            count+=1\n    return count\ndef non_prime_list(start,end):\n    '''\n    Write a python function to return a list of non-prime numbers \n    in the range(start,end+1).\n    '''\n    n = []\n    for i in range(start,end+1):\n        if is_not_prime(i):\n            n.append(i)\n    return n\ndef non_prime_list_generator(start,end):\n    '''\n    Write a python function to return a generator that yields a list of \n    non-prime numbers in the range(start,end+1).\n    '''\n    for i in range(start,end+1):\n        if is_not_prime(i):\n            yield i\ndef non_prime_count_generator(start,end):\n    '''\n    Write a python function to return the number of non-prime numbers \n    in the range(start,end+1).\n    '''\n    count = 0\n    for i in range(start,end+1):\n        if is_not_prime(i):\n            count+=1\n    return count\ndef sum_of_squares_of_first_n_primes(n):\n    '''\n    Write a python function to calculate sum of squares of first n prime numbers.\n    '''\n    if n==1:\n        return 0\n    return n*(n+1)*(2*n+1)/6\ndef sum_of_squares_of_first_n_primes_generator(n):\n    '''\n    Write a python function to calculate sum of squares of first n prime numbers\n    using a generator.\n    '''\n    if n==1:\n        yield 0\n    yield n*(n+1)*(2*n+1)/6\ndef sum_of_squares_of_first_n_primes_list(n):\n    '''\n    Write a python function to calculate sum of squares of first n prime numbers.\n    '''\n    nums = []\n    if n==1:\n        return 0\n    nums.append(0)\n    nums.append(1)\n    nums.append(4)\n    for i in range(3,n+1):\n        nums.append(nums[i-1]+i)\n    return sum(nums)\ndef sum_of_squares_of_first_n_primes_list_generator(n):\n    '''\n    Write a python function to calculate sum of squares of first n prime numbers\n    using a generator.\n    '''\n    if n==1:\n        yield 0\n    yield 1\n    yield 4\n    nums = [0,1,4]\n    for i in range(3,n+1):\n        nums.append(nums[i-1]+i)\n    yield sum(nums)\ndef sum_of_squares_of_first_n_primes_generator(n):\n    '''\n    Write a python function to calculate sum of squares of first n prime numbers\n    using a generator.\n    '''\n    if n==1:\n        yield 0\n    yield 1\n    yield 4\n    nums = [0,1,4]\n    for i in range(3,n+1):\n        nums.append(nums[i-1]+i)\n    for i in nums:\n        yield i\ndef sum_of_squares_of_first_n_primes_list(n):\n    '''\n    Write a python function to calculate sum of squares of first n prime numbers.\n    '''\n    return sum_of_squares_of_first_n_primes_list_generator(n)\ndef sum_of_squares_of_first_n_primes_generator(n):\n    '''\n    Write a python function to calculate sum of squares of first n prime numbers\n    using a generator.\n    '''\n    if n==1:\n        yield 0\n    yield 1\n    yield 4\n    nums = [0,1,4]\n    for i in range(3,n+1):\n        nums.append(nums[i-1]+i)\n    for i in nums:\n        yield i\ndef sum_of_squares_of_first_n_primes(n):\n    '''\n    Write a python function to calculate sum of squares of first n prime numbers.\n    '''\n    return sum_of_squares_of_first_n_primes_generator(n)\ndef sum_of_squares_of_first_n_primes_list_generator(n):\n    '''\n    Write a python function to calculate sum of squares of first n prime numbers\n    using a generator.\n    '''\n    return sum_of_squares_of_first_n_primes_generator(n)\ndef sum_of_squares_of_first_n_primes_generator(n):\n    '''\n    Write a python function to calculate sum of squares of first n prime numbers\n    using a generator.\n    '''\n    if n==1:\n        yield 0\n    yield 1\n    yield 4\n    nums = [0,1,4]\n    for i in range(3,n+1):\n        nums.append(nums[i-1]+i)\n    for i in nums:\n        yield i\ndef sum_of_squares_of_first_n_primes_list(n):\n    '''\n    Write a python function to calculate sum of squares of first n prime numbers.\n    '''\n    return sum_of_squares_of_first_n_primes_list_generator(n)\ndef sum_of_squares_of_first_n_primes_list_generator(n):\n    '''\n    Write a python function to calculate sum of squares of first n prime numbers\n    using a generator.\n    '''\n    if n==1:\n        yield 0\n    yield 1\n    yield 4\n    nums = [0,1,4]\n    for i in range(3,n+1):\n        nums.append(nums[i-1]+i)\n    for i in nums:\n        yield i\ndef sum_of_squares_of_first_n_primes(n):\n    '''\n    Write a python function to calculate sum of squares of first n prime numbers.\n    '''\n    return sum_of_squares_of_first_n_primes_generator(n)\ndef sum_of_squares_of_first_n_primes_list(n):\n    '''\n    Write a python function to calculate sum of squares of first n prime numbers.\n    '''\n    return sum_of_squares_of_first_n_primes_list_generator(n)\ndef sum_of_squares_of_first_n_primes_list(n):\n    '''\n    Write a python function to calculate sum of squares of first n prime numbers.\n    '''\n    nums = []\n    if n==1:\n        return 0\n    nums.append(0)\n    nums.append(1"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2,n):\n        if n%i==0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==1:\n        return 0\n    elif n%2==0:\n        return 1\n    elif n<=3:\n        return 2\n    elif n%3==0:\n        return 3\n    elif n<=5:\n        return 4\n    elif n%5==0:\n        return 5\n    elif n<=7:\n        return 6\n    elif n%7==0:\n        return 7\n    else:\n        return 8\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    elif n % 2 == 0:\n        return True\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n % i == 0:\n                return True\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    else:\n        if n % 2 == 0:\n            return False\n        else:\n            i = 3\n            while i * i <= n:\n                if n % i == 0:\n                    return False\n                i += 2\n            return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2 or n == 3:\n        return False\n    if n % 2 == 0 or n < 2:\n        return True\n    for x in range(3,int(math.sqrt(n))+1,2):\n        if n % x == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n > 1:\n        for i in range(2,n):\n            if n%i == 0:\n                return True\n    else:\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    #prime numbers are greater than 1\n    if n < 1:\n        return False\n    #all even numbers are not primes\n    elif n == 2:\n        return False\n    #check for divisibility by integers other than 2 and itself\n    #using the modulo operator\n    elif n % 2 == 0:\n        return False\n    else:\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    #prime numbers are greater than 1\n    if n < 1:\n        return False\n    #all even numbers are not primes\n    elif n == 2:\n        return True\n    #check for divisibility by integers other than 2 and itself\n    #using the modulo operator\n    elif n % 2 == 0:\n        return False\n    else:\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums.sort()\n    return nums[-n:]\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    res=[]\n    for i in xrange(n):\n        res.append(hq.heappop(nums))\n    return res\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    res=[]\n    for i in xrange(n):\n        res.append(hq.heappop(nums))\n    return res\nclass Heap:\n    def __init__(self,n):\n        self.h=[None for i in xrange(n)]\n        self.n=n\n    def insert(self,v):\n        self.h[self.n]=v\n        self.n+=1\n    def extract(self):\n        self.n-=1\n        res=self.h[0]\n        self.h[0]=self.h[self.n]\n        self.h[self.n]=None\n        self.max_heapify(0)\n        return res\n    def max_heapify(self,i):\n        l=2*i+1\n        r=2*i+2\n        if l<self.n and self.h[l]>self.h[i]:\n            largest=l\n        else:\n            largest=i\n        if r<self.n and self.h[r]>self.h[largest]:\n            largest=r\n        if largest!=i:\n            self.h[largest],self.h[i]=self.h[i],self.h[largest]\n            self.max_heapify(largest)\n    def print_heap(self):\n        for i in xrange(self.n):\n            print self.h[i]\n    def print_maxheap(self):\n        for i in xrange(self.n-1,-1,-1):\n            print self.h[i]\ndef heap_sort(nums):\n    '''\n    Write a function to sort a list of integers in ascending order.\n    '''\n    h=Heap(len(nums))\n    for i in xrange(len(nums)):\n        h.insert(nums[i])\n    res=[]\n    for i in xrange(len(nums)):\n        res.append(h.extract())\n    return res\ndef k_largest(nums,k):\n    '''\n    Write a function to find the k largest integers from a given list of numbers.\n    '''\n    hq.heapify(nums)\n    res=[]\n    for i in xrange(k):\n        res.append(hq.heappop(nums))\n    return res\ndef max_heapify(nums,i):\n    l=2*i+1\n    r=2*i+2\n    largest=i\n    if l<nums.length and nums[l]>nums[i]:\n        largest=l\n    if r<nums.length and nums[r]>nums[largest]:\n        largest=r\n    if largest!=i:\n        nums[largest],nums[i]=nums[i],nums[largest]\n        max_heapify(nums,largest)\ndef max_heap_sort(nums):\n    '''\n    Write a function to sort a list of integers in descending order.\n    '''\n    h=Heap(len(nums))\n    for i in xrange(len(nums)):\n        h.insert(nums[i])\n    res=[]\n    for i in xrange(len(nums)):\n        res.append(h.extract())\n    return res\ndef merge_sort(nums):\n    '''\n    Write a function to sort a list of integers in ascending order.\n    '''\n    if len(nums)<2:\n        return nums\n    mid=len(nums)/2\n    nums1=merge_sort(nums[:mid])\n    nums2=merge_sort(nums[mid:])\n    res=[]\n    while len(nums1)!=0 or len(nums2)!=0:\n        if len(nums1)!=0 and len(nums2)!=0:\n            if nums1[0]>nums2[0]:\n                res.append(nums1[0])\n                nums1=nums1[1:]\n            else:\n                res.append(nums2[0])\n                nums2=nums2[1:]\n        elif len(nums1)!=0:\n            res.append(nums1[0])\n            nums1=nums1[1:]\n        elif len(nums2)!=0:\n            res.append(nums2[0])\n            nums2=nums2[1:]\n    return res\ndef quick_sort(nums):\n    '''\n    Write a function to sort a list of integers in ascending order.\n    '''\n    def partition(nums,p,r):\n        x=nums[r]\n        i=p-1\n        for j in xrange(p,r):\n            if nums[j]<=x:\n                i+=1\n                nums[i],nums[j]=nums[j],nums[i]\n        nums[i+1],nums[r]=nums[r],nums[i+1]\n        return i+1\n    def quick_sort_helper(nums,p,r):\n        if p<r:\n            q=partition(nums,p,r)\n            quick_sort_helper(nums,p,q-1)\n            quick_sort_helper(nums,q+1,r)\n    quick_sort_helper(nums,0,len(nums)-1)\n    return nums\ndef select_sort(nums):\n    '''\n    Write a function to sort a list of integers in ascending order.\n    '''\n    for i in xrange(len(nums)-1):\n        min_index=i\n        for j in xrange(i+1,len(nums)):\n            if nums[j]<nums[min_index]:\n                min_index=j\n        nums[i],nums[min_index]=nums[min_index],nums[i]\n    return nums\ndef hash_sort(nums):\n    '''\n    Write a function to sort a list of integers in ascending order.\n    '''\n    hash_table={}\n    for num in nums:\n        if num not in hash_table:\n            hash_table[num]=0\n        hash_table[num]+=1\n    res=[]\n    for num in nums:\n        res+=num*hash_table[num],\n    return res\ndef radix_sort(nums):\n    '''\n    Write a function to sort a list of integers in ascending order.\n    '''\n    n=len(str(max(nums)))\n    for i in xrange(n):\n        buckets=[[] for i in xrange(10)]\n        for num in nums:\n            buckets[int(num/(10**i)%10)].append(num)\n        nums=[item for bucket in buckets for item in bucket]\n    return nums\ndef heap_sort_helper(nums):\n    if len(nums)==1:\n        return nums\n    max_heap=nums[:]\n    max_heap[0],max_heap[-1]=max_heap[-1],max_heap[0]\n    max_heap[-1],max_heap[0]=max_heap[0],max_heap[-1]\n    n=len(nums)-1\n    for i in xrange(n,-1,-1):\n        max_heapify(max_heap,i)\n    for i in xrange(n,0,-1):\n        nums[i],nums[0]=nums[0],nums[i]\n        max_heapify(max_heap,0)\n    return nums\ndef heap_sort(nums):\n    '''\n    Write a functio"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i] > heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap,nums[i])\n    return heap\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap = []\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i] < heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap,nums[i])\n    return heap\ndef heap_merge(nums1,nums2):\n    '''\n    Write a function that merges two sorted arrays into a new array.\n    '''\n    hq.heapify(nums1)\n    hq.heapify(nums2)\n    heap = []\n    while len(nums1) > 0 and len(nums2) > 0:\n        if nums1[0] < nums2[0]:\n            heap.append(nums1[0])\n            hq.heappop(nums1)\n        else:\n            heap.append(nums2[0])\n            hq.heappop(nums2)\n    while len(nums1) > 0:\n        heap.append(nums1[0])\n        hq.heappop(nums1)\n    while len(nums2) > 0:\n        heap.append(nums2[0])\n        hq.heappop(nums2)\n    return heap\ndef heap_merge_sort(nums):\n    '''\n    Write a function that merges two sorted arrays into a new array.\n    '''\n    hq.heapify(nums)\n    heap = []\n    while len(nums) > 0:\n        heap.append(hq.heappop(nums))\n    return heap\ndef heap_unique(nums):\n    '''\n    Write a function to remove duplicates from an unsorted array.\n    '''\n    if len(nums) == 0:\n        return nums\n    heap = []\n    for i in range(len(nums)):\n        hq.heappush(heap,nums[i])\n    new_nums = []\n    for i in range(len(nums)):\n        if nums[i]!= heap[0]:\n            new_nums.append(nums[i])\n    return new_nums\ndef heap_topk(nums,k):\n    '''\n    Write a function to find the k largest numbers in an array.\n    '''\n    heap = []\n    for i in range(k):\n        hq.heappush(heap,nums[i])\n    for i in range(k,len(nums)):\n        if nums[i] > heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap,nums[i])\n    return heap\ndef heap_heapify(nums):\n    '''\n    Write a function to heapify a given array.\n    '''\n    hq.heapify(nums)\n    return nums\ndef heap_sort(nums):\n    '''\n    Write a function to sort an array using heap sort.\n    '''\n    hq.heapify(nums)\n    return [hq.heappop(nums) for i in range(len(nums))]\ndef heap_intersection(nums1,nums2):\n    '''\n    Write a function that returns the intersection of two arrays.\n    '''\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    res = []\n    i = j = 0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] == nums2[j]:\n            res.append(nums1[i])\n            i += 1\n            j += 1\n        elif nums1[i] < nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return res\ndef heap_sort_compare(nums1,nums2):\n    '''\n    Write a function to compare the first array with second array and find the second array in first array\n    '''\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    res = []\n    i = j = 0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] == nums2[j]:\n            res.append(nums2[j])\n            i += 1\n            j += 1\n        elif nums1[i] < nums2[j]:\n            res.append(nums1[i])\n            i += 1\n        else:\n            res.append(nums2[j])\n            j += 1\n    while i < len(nums1):\n        res.append(nums1[i])\n        i += 1\n    while j < len(nums2):\n        res.append(nums2[j])\n        j += 1\n    return res\ndef max_subarray(nums):\n    '''\n    Write a function to find the contiguous subarray within an array (containing at least one number) which has the largest sum.\n    '''\n    max_curr = max_global = nums[0]\n    for i in range(1,len(nums)):\n        max_curr = max(nums[i],max_curr+nums[i])\n        max_global = max(max_global,max_curr)\n    return max_global\ndef max_subarray_2(nums):\n    '''\n    Write a function to find the contiguous subarray within an array (containing at least one number) which has the largest sum.\n    '''\n    curr_sum = max_global = nums[0]\n    for i in range(1,len(nums)):\n        if nums[i] > 0:\n            curr_sum += nums[i]\n        else:\n            curr_sum = 0\n        max_global = max(max_global,curr_sum)\n    return max_global\ndef max_subarray_3(nums):\n    '''\n    Write a function to find the contiguous subarray within an array (containing at least one number) which has the largest sum.\n    '''\n    curr_sum = max_global = nums[0]\n    for i in range(1,len(nums)):\n        if curr_sum < 0:\n            curr_sum = nums[i]\n        else:\n            curr_sum += nums[i]\n        max_global = max(max_global,curr_sum)\n    return max_global\ndef max_subarray_4(nums):\n    '''\n    Write a function to find the contiguous subarray within an array (containing at least one number) which has the largest sum.\n    '''\n    curr_sum = max_global = nums[0]\n    for i in range(1,len(nums)):\n        curr_sum = max(nums[i],nums[i]+curr_sum)\n        max_global = max(max_global,curr_sum)\n    return max_global\ndef max_subarray_5(nums):\n    '''\n    Write a function to find the contiguous subarray within an array (containing at least one number) which has the largest sum.\n    '''\n    curr_sum = max_global = nums[0]\n    for i in range(1,len(nums)):\n        if nums[i-1] > 0:\n            curr_sum += nums[i]\n        else:\n            curr"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    sorted_nums=sorted(nums,reverse=True)\n    return sorted_nums[0:n]\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    sorted_nums=sorted(nums)\n    return sorted_nums[0:n]\ndef heap_sort(nums):\n    '''\n    Write a function that will sort a list of numbers using heap sort.\n    '''\n    hq.heapify(nums)\n    heap_sort_nums=[]\n    while len(nums)!=0:\n        heap_sort_nums.append(hq.heappop(nums))\n    return heap_sort_nums\ndef heapsort(arr,n):\n    '''\n    Write a function that will sort a list of numbers using heapsort.\n    '''\n    for i in range(n):\n        hq.heapify(arr)\n    return [hq.heappop(arr) for i in range(n)]\ndef bubble_sort(nums):\n    '''\n    Write a function to sort a list of numbers using bubble sort.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums)-1):\n            if nums[j]>nums[j+1]:\n                temp=nums[j]\n                nums[j]=nums[j+1]\n                nums[j+1]=temp\n    return nums\ndef insert_sort(nums):\n    '''\n    Write a function to sort a list of numbers using insertion sort.\n    '''\n    for i in range(1,len(nums)):\n        x=nums[i]\n        j=i-1\n        while j>=0 and nums[j]>x:\n            nums[j+1]=nums[j]\n            j-=1\n        nums[j+1]=x\n    return nums\ndef partition(arr,low,high):\n    pivot=arr[high]\n    i=low-1\n    for j in range(low,high):\n        if arr[j]<=pivot:\n            i+=1\n            arr[j],arr[i]=arr[i],arr[j]\n    arr[i+1],arr[high]=arr[high],arr[i+1]\n    return i+1\ndef quick_sort(nums,low,high):\n    '''\n    Write a function to sort a list of numbers using quick sort.\n    '''\n    if low<high:\n        p=partition(nums,low,high)\n        quick_sort(nums,low,p-1)\n        quick_sort(nums,p+1,high)\n    return nums\ndef merge_sort(arr):\n    '''\n    Write a function to sort a list of numbers using merge sort.\n    '''\n    if len(arr)>1:\n        mid=len(arr)//2\n        L=arr[:mid]\n        R=arr[mid:]\n        merge_sort(L)\n        merge_sort(R)\n        i=j=k=0\n        while i<len(L) and j<len(R):\n            if L[i]<R[j]:\n                arr[k]=L[i]\n                i+=1\n            else:\n                arr[k]=R[j]\n                j+=1\n            k+=1\n        while i<len(L):\n            arr[k]=L[i]\n            i+=1\n            k+=1\n        while j<len(R):\n            arr[k]=R[j]\n            j+=1\n            k+=1\n    return arr\ndef count_inversions(arr):\n    '''\n    Write a function to count the inversions in an array\n    '''\n    count=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]>arr[j]:\n                count+=1\n    return count\ndef count_sort(arr):\n    '''\n    Write a function to sort a list of numbers using count sort.\n    '''\n    max_num=max(arr)\n    count_arr=[0]*(max_num+1)\n    for num in arr:\n        count_arr[num]+=1\n    j=0\n    for i in range(len(count_arr)):\n        while count_arr[i]>0:\n            arr[j]=i\n            j+=1\n            count_arr[i]-=1\n    return arr\ndef heap_sort_using_heap(nums):\n    '''\n    Write a function to sort a list of numbers using heap sort.\n    '''\n    max_heap=[]\n    for i in nums:\n        hq.heappush(max_heap,-1*i)\n    sorted_nums=[]\n    while len(max_heap)!=0:\n        sorted_nums.append(-1*hq.heappop(max_heap))\n    return sorted_nums\ndef heap_sort_using_heap2(nums):\n    '''\n    Write a function to sort a list of numbers using heap sort.\n    '''\n    max_heap=[]\n    for i in nums:\n        hq.heappush(max_heap,i)\n    sorted_nums=[]\n    while len(max_heap)!=0:\n        sorted_nums.append(hq.heappop(max_heap))\n    return sorted_nums\ndef heap_sort_using_heap3(nums):\n    '''\n    Write a function to sort a list of numbers using heap sort.\n    '''\n    for i in range(len(nums)//2-1,-1,-1):\n        heap_sort_using_heap3_helper(nums,i,len(nums))\n    return nums\ndef heap_sort_using_heap3_helper(nums,i,length):\n    l=2*i+1\n    r=2*i+2\n    max_heap=[]\n    if l<length and nums[i]<nums[l]:\n        max_heap.append(nums[i])\n        heap_sort_using_heap3_helper(nums,l,length)\n    if r<length and nums[i]<nums[r]:\n        max_heap.append(nums[i])\n        heap_sort_using_heap3_helper(nums,r,length)\n    if len(max_heap)==0:\n        return\n    else:\n        max_heap.sort()\n        nums[i]=max_heap[0]\n        heap_sort_using_heap3_helper(nums,i,length)\ndef max_heapify(nums,i):\n    '''\n    Write a function to build a max heap from a list of numbers.\n    '''\n    l=2*i+1\n    r=2*i+2\n    if l<len(nums) and nums[l]>nums[i]:\n        largest=l\n    else:\n        largest=i\n    if r<len(nums) and nums[r]>nums[largest]:\n        largest=r\n    if largest!=i:\n        nums[i],nums[largest]=nums[largest],nums[i]\n        max_heapify(nums,largest)\ndef max_heap_insert(nums,n):\n    '''\n    Write a function to build a max heap from a list of numbers.\n    '''\n    for i in range(len(nums),len(nums)-1-n,-1):\n        max_heapify(nums,i-1)\ndef build_max_heap(nums):\n    '''\n    Write a function to build a max heap from a list of numbers.\n    '''\n    for i in range(len(nums)//2-1,-1,-1):\n        max_heapify(nums,i"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq=[]\n    for i in range(n):\n        hq.append(-nums[i])\n    return hq\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h=[]\n    for i in nums:\n        hq.heappush(h,(-i,i))\n    res=[]\n    for i in range(n):\n        res.append(hq.heappop(h)[1])\n    return res[::-1]\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    result = []\n    for i in range(n):\n        result.append(hq.heappop(nums))\n    return result\n    \n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return [hq.heappop() for i in range(n)]\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    return [hq.heappop() for i in range(n)]\ndef heapsort(nums):\n    '''\n    Write a function that takes in a list of integers and returns a new list of integers\n    representing the Heap Sort of the given array.\n    '''\n    result = []\n    hq.heapify(nums)\n    while(len(nums)>0):\n        result.append(hq.heappop(nums))\n    return result\ndef merge_sort(nums):\n    '''\n    Write a function that takes in a list of integers and returns a new list of integers\n    representing the Merge Sort of the given array.\n    '''\n    if(len(nums)>1):\n        mid = len(nums)//2\n        left = merge_sort(nums[:mid])\n        right = merge_sort(nums[mid:])\n        result = []\n        while(len(left)>0 and len(right)>0):\n            if(left[0]>right[0]):\n                result.append(right.pop(0))\n            else:\n                result.append(left.pop(0))\n        if(len(left)>0):\n            result += left\n        if(len(right)>0):\n            result += right\n        return result\n    else:\n        return nums\ndef find_peak(nums):\n    '''\n    Write a function that takes in a list of integers and returns an integer\n    representing the highest peak in the list. A peak is defined as adjacent integers in the list whose difference is 1.\n    '''\n    for i in range(len(nums)-1):\n        if(nums[i]<nums[i+1]):\n            return nums[i+1]\n    return nums[0]\ndef find_peak2(nums):\n    '''\n    Write a function that takes in a list of integers and returns an integer\n    representing the highest peak in the list. A peak is defined as adjacent integers in the list whose difference is 1.\n    '''\n    if(len(nums)<3):\n        return nums[0]\n    for i in range(len(nums)-1):\n        if(nums[i]<nums[i+1]):\n            return nums[i+1]\n    return nums[0]\ndef longest_subarray(nums,k):\n    '''\n    Write a function that takes in a list of integers and returns a list of integers\n    representing the longest subarray of the given array that contains at least k elements.\n    '''\n    result = [nums[0]]\n    start = 0\n    end = 0\n    length = 0\n    while(end<len(nums)):\n        if(nums[end]>=k):\n            length += 1\n        else:\n            end+=1\n        if(length>len(result)):\n            result = nums[start:end]\n        elif(length==len(result)):\n            if(end-start>len(result)):\n                result = nums[start:end]\n    return result\ndef longest_subarray2(nums,k):\n    '''\n    Write a function that takes in a list of integers and returns a list of integers\n    representing the longest subarray of the given array that contains at least k elements.\n    '''\n    if(k<1):\n        return []\n    result = []\n    for i in range(len(nums)):\n        if(len(result)==0 or nums[i]>nums[result[-1]]):\n            result.append(i)\n        elif(len(result)>0 and nums[i]<nums[result[-1]]):\n            start = result.pop()\n            if(len(result)==0):\n                result.append(start)\n            else:\n                end = result.pop()\n                if(i-end-1>len(result)):\n                    result.append(start)\n                    result.append(end)\n                else:\n                    result[-1] = end\n    return result\ndef max_in_window(nums,k):\n    '''\n    Write a function that takes in a list of integers and returns a list of integers\n    representing the max number of elements that can be in a window of size k.\n    '''\n    if(len(nums)<k):\n        return []\n    max_in_window = []\n    for i in range(len(nums)-k+1):\n        window = nums[i:i+k]\n        max_in_window.append(max(window))\n    return max_in_window\ndef max_in_window2(nums,k):\n    '''\n    Write a function that takes in a list of integers and returns a list of integers\n    representing the max number of elements that can be in a window of size k.\n    '''\n    result = []\n    if(len(nums)<k):\n        return result\n    for i in range(len(nums)-k+1):\n        window = nums[i:i+k]\n        result.append(max(window))\n    return result\ndef max_in_window3(nums,k):\n    '''\n    Write a function that takes in a list of integers and returns a list of integers\n    representing the max number of elements that can be in a window of size k.\n    '''\n    result = []\n    if(len(nums)<k):\n        return result\n    window = nums[:k]\n    result.append(max(window))\n    for i in range(len(nums)-k+1):\n        window = nums[i+k-1:i+k+1]\n        result.append(max(window))\n    return result\ndef max_in_window4(nums,k):\n    '''\n    Write a function that takes in a list of integers and returns a list of integers\n    representing the max number of elements that can be in a window of size k.\n    '''\n    result = []\n    if(len(nums)<k):\n        return result\n    window = nums[:k]\n    result.append(max(window))\n    for i in range(len(nums)-k+1):\n        window = nums[i:i+k]\n        result.append(max(window))\n    return result\ndef max_in_window5(nums,k):\n    '''\n    Write a function that takes in a list of integers and returns a list of integers\n    representing the max number of elements that can be in a window of size k.\n    '''\n    result = []\n    if(len(nums)<k):\n        return result\n    window = nums[:k]\n    result.append(max(window))\n    for i in range(len(nums)-k+1):\n        window = nums[i:i+k]\n        result.append(max(window))\n    return result\ndef max_in_window6(nums,k):\n    '''\n    Write a function that takes in a list of integers and returns a list of integers\n    representing the max number of elements that can be in a window of size k.\n    '''\n    result = []\n    if(len(nums)<k):\n        return result\n    window = nums[:k]\n    result.append(max(window))\n    for i in range(len(nums)-k+1):\n        window = nums[i:i+k]\n        result.append(max(window))\n    return result\ndef max_in_window7(nums,k):\n    '''\n    Write a function that takes in a list of integers and returns a list of integers\n    representing the max number of elements that can be in a window of size k.\n    '''\n    result = []\n    if(len(nums)<k):\n        return result\n    window = nums[:k]\n    resul"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    hq.heapify(heap)\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]>heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap,nums[i])\n    return heap\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap = []\n    hq.heapify(heap)\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]<heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap,nums[i])\n    return heap\ndef heap_queue_sort(nums):\n    '''\n    Write a function to sort a list of numbers.\n    '''\n    heap = []\n    hq.heapify(heap)\n    for i in nums:\n        hq.heappush(heap,i)\n    return hq.nsmallest(len(nums),heap)\ndef heap_queue_sort_rev(nums):\n    '''\n    Write a function to sort a list of numbers.\n    '''\n    heap = []\n    hq.heapify(heap)\n    for i in nums:\n        hq.heappush(heap,i)\n    return hq.nlargest(len(nums),heap)\ndef heap_queue_sorted(nums):\n    '''\n    Write a function to sort a list of numbers.\n    '''\n    heap = []\n    hq.heapify(heap)\n    for i in nums:\n        hq.heappush(heap,i)\n    return heap\ndef heap_queue_sorted_rev(nums):\n    '''\n    Write a function to sort a list of numbers.\n    '''\n    heap = []\n    hq.heapify(heap)\n    for i in nums:\n        hq.heappush(heap,i)\n    return heap\ndef heap_queue_max(nums):\n    '''\n    Write a function to find the max element in a given list of numbers.\n    '''\n    heap = []\n    hq.heapify(heap)\n    for i in nums:\n        hq.heappush(heap,i)\n    return heap[0]\ndef heap_queue_max_rev(nums):\n    '''\n    Write a function to find the max element in a given list of numbers.\n    '''\n    heap = []\n    hq.heapify(heap)\n    for i in nums:\n        hq.heappush(heap,i)\n    return heap[0]\ndef heap_queue_max_rev2(nums):\n    '''\n    Write a function to find the max element in a given list of numbers.\n    '''\n    heap = []\n    hq.heapify(heap)\n    for i in nums:\n        hq.heappush(heap,i)\n    return hq.nlargest(len(nums),heap)\ndef heap_queue_max_rev3(nums):\n    '''\n    Write a function to find the max element in a given list of numbers.\n    '''\n    heap = []\n    hq.heapify(heap)\n    for i in nums:\n        hq.heappush(heap,i)\n    return heap\ndef heap_queue_min(nums):\n    '''\n    Write a function to find the min element in a given list of numbers.\n    '''\n    heap = []\n    hq.heapify(heap)\n    for i in nums:\n        hq.heappush(heap,i)\n    return heap[0]\ndef heap_queue_min_rev(nums):\n    '''\n    Write a function to find the min element in a given list of numbers.\n    '''\n    heap = []\n    hq.heapify(heap)\n    for i in nums:\n        hq.heappush(heap,i)\n    return hq.nsmallest(len(nums),heap)\ndef heap_queue_min_rev2(nums):\n    '''\n    Write a function to find the min element in a given list of numbers.\n    '''\n    heap = []\n    hq.heapify(heap)\n    for i in nums:\n        hq.heappush(heap,i)\n    return hq.nsmallest(len(nums),heap)\ndef heap_queue_min_rev3(nums):\n    '''\n    Write a function to find the min element in a given list of numbers.\n    '''\n    heap = []\n    hq.heapify(heap)\n    for i in nums:\n        hq.heappush(heap,i)\n    return heap\ndef heap_queue_partition(nums,left,right):\n    '''\n    Write a function to do partition sort on a given list of numbers.\n    '''\n    pivot = nums[left]\n    i = left\n    j = right\n    while i < j:\n        while i<right and nums[i]<=pivot:\n            i+=1\n        while nums[j]>pivot:\n            j-=1\n        if i<j:\n            nums[i],nums[j] = nums[j],nums[i]\n    if j>left:\n        nums[left],nums[j] = nums[j],nums[left]\n    return j\ndef heap_queue_partition_rev(nums,left,right):\n    '''\n    Write a function to do partition sort on a given list of numbers.\n    '''\n    pivot = nums[left]\n    i = left\n    j = right\n    while i < j:\n        while i<right and nums[i]>=pivot:\n            i+=1\n        while nums[j]<pivot:\n            j-=1\n        if i<j:\n            nums[i],nums[j] = nums[j],nums[i]\n    if j>left:\n        nums[left],nums[j] = nums[j],nums[left]\n    return j\ndef heap_queue_partition_rev2(nums,left,right):\n    '''\n    Write a function to do partition sort on a given list of numbers.\n    '''\n    pivot = nums[left]\n    i = left\n    j = right\n    while i < j:\n        while i<right and nums[i]>=pivot:\n            i+=1\n        while nums[j]<pivot:\n            j-=1\n        if i<j:\n            nums[i],nums[j] = nums[j],nums[i]\n    if j>left:\n        nums[left],nums[j] = nums[j],nums[left]\n    return j\ndef heap_queue_partition_rev3(nums,left,right):\n    '''\n    Write a function to do partition sort on a given list of numbers.\n    '''\n    pivot = nums[left]\n    i = left\n    j = right\n    while i < j:\n        while i<right and nums[i]>=pivot:\n            i+=1\n        while nums[j]<pivot:\n            j-=1\n        if i<j:\n            nums[i],nums[j] = nums[j],nums[i]\n    if j>left:\n        nums[left],nums[j] = nums[j],nums[left]\n    return j\ndef heap_queue_max_k"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n    return [hq.heappop(h) for i in range(n)]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    y = x & (x-1)\n    if y == 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_More (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position more than once or not.\n    '''\n    y = x & (x-1)\n    z = x | (x-1)\n    if y & z == 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_Less (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position less than one or not.\n    '''\n    y = x & (x-1)\n    if y!= 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_Less_or_Equal (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position less than or equal to one or not.\n    '''\n    y = x & (x-1)\n    z = x | (x-1)\n    if y <= z:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_More_or_Equal (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position more than one or not.\n    '''\n    y = x & (x-1)\n    z = x | (x-1)\n    if y >= z:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_Zero (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position zero or not.\n    '''\n    y = x & (x-1)\n    if y == 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_One (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position one or not.\n    '''\n    y = x & (x-1)\n    if y!= 1:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_Zero_or_One (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position zero or one or both.\n    '''\n    y = x & (x-1)\n    if y == 0 or y == 1:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_Zero_or_More (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position zero or more than zero.\n    '''\n    y = x & (x-1)\n    z = x | (x-1)\n    if y >= z:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_Zero_or_Less (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position zero or less than zero.\n    '''\n    y = x & (x-1)\n    if y <= 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_Zero_or_Less_or_Equal (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position zero or less than zero or equal to zero.\n    '''\n    y = x & (x-1)\n    z = x | (x-1)\n    if y <= z:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_Zero_or_More_or_Equal (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position zero or more than zero or equal to zero.\n    '''\n    y = x & (x-1)\n    z = x | (x-1)\n    if y >= z:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_Exactly_One (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position exactly one.\n    '''\n    y = x & (x-1)\n    z = x | (x-1)\n    if y!= 1 or z!= 1:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_Exactly_One_or_Zero (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position exactly one or zero.\n    '''\n    y = x & (x-1)\n    z = x | (x-1)\n    if y!= 1 or z!= 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_Exactly_One_or_More (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position exactly one or more.\n    '''\n    y = x & (x-1)\n    z = x | (x-1)\n    if y!= 1 or z!= 1:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_Exactly_One_or_Less (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position exactly one or less.\n    '''\n    y = x & (x-1)\n    if y!= 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_Exactly_One_or_Less_or_Equal (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position exactly one or less than or equal to zero.\n    '''\n    y = x & (x-1)\n    z = x | (x-1)\n    if y!= 0 or z!= 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_Exactly_One_or_More_or_Equal (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position exactly one or more than or equal to zero.\n    '''\n    y = x & (x-1)\n    z = x | (x-1)\n    if y!= 0 or z!= 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_Exactly_Zero (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position exactly zero.\n    '''\n    y = x & (x-1)\n    if y == 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_Exactly_Zero_or_One (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position exactly zero or one.\n    '''\n    y = x & (x-1)\n    z = x | (x-1)\n    if y == 0 or y == 1 or z == 0 or z == 1:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_Exactly_Zero_or_More (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position exactly zero or more.\n    '''\n    y = x & (x-1)\n    z = x | (x-1)\n    if y >= z:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_Exactly_Zero_or_Less (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position exactly zero or less.\n    '''\n    y = x & (x-1)\n    if y <= 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_Exactly_Zero_or_Less_or_Equal (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position exactly zero or less than or equal to zero.\n    '''\n    y = x & (x-1)\n    z = x | (x-1)\n    if y <= 0 or y <= z:"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x&(x-1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    num1 = x & (x-1)\n    num2 = x+1\n    if num1!= num2:\n        return True\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x==1:\n        return False\n    else:\n        return x&(x-1)==0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 1:\n        return True\n    if x == 0:\n        return False\n    while x > 1:\n        if x%2!= 1:\n            return False\n        x = x//2\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x==1:\n        return True\n    elif x==0:\n        return False\n    else:\n        y = x-1\n        if x&y==y:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x!= 0) and (x & (x - 1) == 0)\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 1:\n        return True\n    while x > 0:\n        if x & 1 == 1:\n            return False\n        x = x >> 1\n    return True\n    \ndef  Remove_Duplicates(A):\n    '''\n    Write a python function to remove duplicates from an array\n    '''\n    hashmap = {}\n    res = []\n    for i in A:\n        if i not in hashmap:\n            hashmap[i] = 1\n            res.append(i)\n    return res\n    \ndef Count_The_Largest_and_Smallest_Numbers(A):\n    '''\n    Write a python function to count the largest and smallest number in an array\n    '''\n    res = [A[0], A[-1]]\n    for i in A:\n        if i > res[0]:\n            res[0] = i\n        if i < res[1]:\n            res[1] = i\n    return res\n    \ndef Power_Of_2(x):\n    '''\n    Write a python function to find out the power of a number\n    '''\n    count = 0\n    while x > 0:\n        x = x >> 1\n        count += 1\n    return count\n    \ndef Unsigned_to_Binary(n):\n    '''\n    Write a python function to convert an unsigned integer into binary representation\n    '''\n    if n < 0:\n        return -1*Unsigned_to_Binary(-n)\n    res = 0\n    while n > 0:\n        res = 10*res + n%10\n        n = n//10\n    return res\n    \ndef Binary_To_Unsigned(n):\n    '''\n    Write a python function to convert a binary number into an unsigned integer\n    '''\n    if n < 0:\n        return -1*Binary_To_Unsigned(-n)\n    res = 0\n    while n > 0:\n        res = 10*res + n%10\n        n = n//10\n    return res\n    \ndef Positive_Negative(n):\n    '''\n    Write a python function to check whether a number is positive or negative\n    '''\n    if n > 0:\n        return 'positive'\n    elif n < 0:\n        return 'negative'\n    return 'zero'\n    \ndef Cyclic_Rotation(string, count):\n    '''\n    Write a python function to rotate a string by n number of positions\n    '''\n    n = count % len(string)\n    if n == 0:\n        return string\n    else:\n        return string[-n:] + string[:len(string)-n]\n    \ndef Radix_Sort(A, base):\n    '''\n    Write a python function to sort an array using radix sort\n    '''\n    d = {}\n    for i in A:\n        if base not in d.keys():\n            d[base] = [i]\n        else:\n            d[base].append(i)\n    res = []\n    for i in range(10):\n        if str(i) in d.keys():\n            res += d[str(i)]\n    return res\n    \ndef Cycle_Sort(A):\n    '''\n    Write a python function to sort an array using cycle sort\n    '''\n    n = len(A)\n    for i in range(n):\n        swapped = False\n        for j in range(n-i-1):\n            if A[j] > A[j+1]:\n                A[j], A[j+1] = A[j+1], A[j]\n                swapped = True\n        if not swapped:\n            return A\n    return A\n    \ndef Select_Sort(A):\n    '''\n    Write a python function to sort an array using select sort\n    '''\n    for i in range(len(A)):\n        min_index = i\n        for j in range(i+1, len(A)):\n            if A[j] < A[min_index]:\n                min_index = j\n        A[i], A[min_index] = A[min_index], A[i]\n    return A\n    \ndef Insert_Sort(A):\n    '''\n    Write a python function to sort an array using insert sort\n    '''\n    for i in range(1, len(A)):\n        j = i\n        key = A[i]\n        while j > 0 and A[j-1] > key:\n            A[j] = A[j-1]\n            j -= 1\n        A[j] = key\n    return A\n    \ndef Merge_Sort(A, start, end):\n    '''\n    Write a python function to sort an array using merge sort\n    '''\n    if start < end:\n        mid = (start + end) // 2\n        Merge_Sort(A, start, mid)\n        Merge_Sort(A, mid+1, end)\n        Merge(A, start, mid, end)\n    return A\n    \ndef Merge(A, start, mid, end):\n    n1 = mid - start + 1\n    n2 = end - mid\n    L = [0]*(n1)\n    R = [0]*(n2)\n    for i in range(n1):\n        L[i] = A[start+i]\n    for j in range(n2):\n        R[j] = A[mid+1+j]\n    i = 0\n    j = 0\n    for k in range(start, end+1):\n        if i == n1:\n            A[k] = R[j]\n            j += 1\n        elif j == n2:\n            A[k] = L[i]\n            i += 1\n        elif L[i] < R[j]:\n            A[k] = L[i]\n            i += 1\n        else:\n            A[k] = R[j]\n            j += 1\n    \ndef Quick_Sort(A, start, end):\n    '''\n    Write a python function to sort an array using quick sort\n    '''\n    if start < end:\n        pivot = partition(A, start, end)\n        Quick_Sort(A, start, pivot-1)\n        Quick_Sort(A, pivot+1, end)\n    return A\n    \ndef partition(A, start, end):\n    pivot = A[end]\n    pindex = start\n    for i in range(start, end):\n        if A[i] <= pivot:\n            A[i], A[pindex] = A[pindex], A[i]\n            pindex += 1\n    A[pindex], A[end] = A[end], A[pindex]\n    return pindex\n    \ndef Counting_Sort(A, B, k):\n    '''\n    Write a python function to sort an array using counting sort\n    '''\n    n = len(A)\n    C = [0]*(k+1)\n    for i in range(n):\n        C[A[i]] += 1\n    for i in range(1, k+1):\n        C[i] += C[i-1]\n    for i in range(n-1, -1, -1):\n        B[C[A[i]]-1] = A[i]\n        C[A[i]] -= 1\n    return B\n    \ndef String_Rotation(string, char):\n    '''\n    Write a python function to count the number of rotations of a string\n    '''\n    return string.count(char)\n    \ndef Search(A, key):\n    '''\n    Write a python function to search for an element in an array\n    '''\n    for i in range(len(A)):\n        if A[i] == key:\n            return i\n    return -1\n    \ndef Replace_String(A, B, old, new):\n    '''\n    Write a python function to replace the substring of the original string\n    '''\n    n = len(old)\n    if len(A) < n:\n        return A\n    return A[0:n] + new + A[n:]\n    \ndef One_Away(A, B):\n    '''\n    Write a python function to check if two strings are one-away\n    '''\n    if len(A) == len(B):\n        return Replace_String(A, B, A[1:], B[1:]) == A"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    pass\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 1: \n        return True\n    else:\n        y = x\n        while y:\n            if y & 1:\n                y = y & (y - 1)\n            else:\n                return False\n    return True\ndef is_Power_Of_Three (x): \n    '''\n    Write a python function to check whether the number is power of 3 or not.\n    '''\n    if x == 1:\n        return True\n    else:\n        y = x\n        while y:\n            if y % 3:\n                return False\n            y = y/3\n    return True\ndef is_Power_Of_Four (x): \n    '''\n    Write a python function to check whether the number is power of 4 or not.\n    '''\n    if x == 1:\n        return True\n    else:\n        y = x\n        while y:\n            if y % 4:\n                return False\n            y = y/4\n    return True\ndef is_Power_Of_Five (x): \n    '''\n    Write a python function to check whether the number is power of 5 or not.\n    '''\n    if x == 1:\n        return True\n    else:\n        y = x\n        while y:\n            if y % 5:\n                return False\n            y = y/5\n    return True\ndef is_Power_Of_Six (x): \n    '''\n    Write a python function to check whether the number is power of 6 or not.\n    '''\n    if x == 1:\n        return True\n    else:\n        y = x\n        while y:\n            if y % 6:\n                return False\n            y = y/6\n    return True\ndef is_Power_Of_Seven (x): \n    '''\n    Write a python function to check whether the number is power of 7 or not.\n    '''\n    if x == 1:\n        return True\n    else:\n        y = x\n        while y:\n            if y % 7:\n                return False\n            y = y/7\n    return True\ndef is_Power_Of_Eight (x): \n    '''\n    Write a python function to check whether the number is power of 8 or not.\n    '''\n    if x == 1:\n        return True\n    else:\n        y = x\n        while y:\n            if y % 8:\n                return False\n            y = y/8\n    return True\ndef is_Power_Of_Nine (x): \n    '''\n    Write a python function to check whether the number is power of 9 or not.\n    '''\n    if x == 1:\n        return True\n    else:\n        y = x\n        while y:\n            if y % 9:\n                return False\n            y = y/9\n    return True\ndef is_Power_Of_Ten (x): \n    '''\n    Write a python function to check whether the number is power of 10 or not.\n    '''\n    if x == 1:\n        return True\n    else:\n        y = x\n        while y:\n            if y % 10:\n                return False\n            y = y/10\n    return True\ndef is_Power_Of_Eleven (x): \n    '''\n    Write a python function to check whether the number is power of 11 or not.\n    '''\n    if x == 1:\n        return True\n    else:\n        y = x\n        while y:\n            if y % 11:\n                return False\n            y = y/11\n    return True\ndef is_Power_Of_Twelve (x): \n    '''\n    Write a python function to check whether the number is power of 12 or not.\n    '''\n    if x == 1:\n        return True\n    else:\n        y = x\n        while y:\n            if y % 12:\n                return False\n            y = y/12\n    return True\ndef is_Power_Of_Thirteen (x): \n    '''\n    Write a python function to check whether the number is power of 13 or not.\n    '''\n    if x == 1:\n        return True\n    else:\n        y = x\n        while y:\n            if y % 13:\n                return False\n            y = y/13\n    return True\ndef is_Power_Of_Fourteen (x): \n    '''\n    Write a python function to check whether the number is power of 14 or not.\n    '''\n    if x == 1:\n        return True\n    else:\n        y = x\n        while y:\n            if y % 14:\n                return False\n            y = y/14\n    return True\ndef is_Power_Of_Fifteen (x): \n    '''\n    Write a python function to check whether the number is power of 15 or not.\n    '''\n    if x == 1:\n        return True\n    else:\n        y = x\n        while y:\n            if y % 15:\n                return False\n            y = y/15\n    return True\ndef is_Power_Of_Sixteen (x): \n    '''\n    Write a python function to check whether the number is power of 16 or not.\n    '''\n    if x == 1:\n        return True\n    else:\n        y = x\n        while y:\n            if y % 16:\n                return False\n            y = y/16\n    return True\ndef is_Power_Of_Seventeen (x): \n    '''\n    Write a python function to check whether the number is power of 17 or not.\n    '''\n    if x == 1:\n        return True\n    else:\n        y = x\n        while y:\n            if y % 17:\n                return False\n            y = y/17\n    return True\ndef is_Power_Of_Eighteen (x): \n    '''\n    Write a python function to check whether the number is power of 18 or not.\n    '''\n    if x == 1:\n        return True\n    else:\n        y = x\n        while y:\n            if y % 18:\n                return False\n            y = y/18\n    return True\ndef is_Power_Of_Nineteen (x): \n    '''\n    Write a python function to check whether the number is power of 19 or not.\n    '''\n    if x == 1:\n        return True\n    else:\n        y = x\n        while y:\n            if y % 19:\n                return False\n            y = y/19\n    return True\ndef is_Power_Of_Twenty (x): \n    '''\n    Write a python function to check whether the number is power of 20 or not.\n    '''\n    if x == 1:\n        return True\n    else:\n        y = x\n        while y:\n            if y % 20:\n                return False\n            y = y/20\n    return True\ndef is_Power_Of_Twenty_One (x): \n    '''\n    Write a python function to check whether the number is power of 21 or not.\n    '''\n    if x == 1:\n        return True\n    else:\n        y = x\n        while y:\n            if y % 21:\n                return False\n            y = y/21\n    return True\ndef is_Power_Of_Twenty_Two (x): \n    '''\n    Write a python function to check whether the number is power of 22 or not.\n    '''\n    if x == 1:\n        return True\n    else:\n        y = x\n        while y:\n            if y % 22:\n                return False\n            y = y/22\n    return True\ndef is_Power_Of_Twenty_Three (x): \n    '''\n    Write a python function to check whether the number is power of 23 or not.\n    '''\n    if x == 1:\n        return True\n    else:\n        y = x\n        while y:\n            if y % 23:\n                return False\n            y = y/23\n    return True\ndef is_Power_Of_Twenty_Four (x): \n    '''\n    Write a python function to check whether the number is power of 24 or not.\n    '''\n    if x == 1:\n        return True\n    else:\n        y = x\n        while y:\n            if y % 24:\n                return False\n            y = y/24\n    return True\ndef is_Power_Of_Twenty_Five (x): \n    '''\n    Write a python function to check whether the number is power of 25 or not.\n    ''"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    lst = re.findall(r\"[\\w']{4,}\",text)\n    return lst\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    words = re.split('[\\s]+', text)\n    ans = []\n    for i in words:\n        if len(i) > 3:\n            ans.append(i)\n    return ans\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(\"\\w{4,}\", text)\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    def is_valid(word):\n        return len(word) > 3\n    \n    if text is None:\n        return []\n    \n    return [word for word in re.findall('[A-Za-z]+',text) if is_valid(word)]\n    \n    \ndef find_char_short(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    \n    def is_valid(word):\n        return len(word) > 2\n    \n    if text is None:\n        return []\n    \n    return [word for word in re.findall('[A-Za-z]+',text) if is_valid(word)]\n    \n    \ndef find_char_mid(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    \n    def is_valid(word):\n        return len(word) > 2\n    \n    if text is None:\n        return []\n    \n    return [word for word in re.findall('[A-Za-z]+',text) if is_valid(word)]\n    \n    \ndef find_word_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    def is_valid(word):\n        return len(word) > 3\n    \n    if text is None:\n        return []\n    \n    return [word for word in re.findall('[A-Za-z]+',text) if is_valid(word)]\n    \n    \ndef find_word_short(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    \n    def is_valid(word):\n        return len(word) > 2\n    \n    if text is None:\n        return []\n    \n    return [word for word in re.findall('[A-Za-z]+',text) if is_valid(word)]\n    \n    \ndef find_word_mid(text):\n    '''\n    Write a function to find all words which are at least 3 characters long in a string.\n    '''\n    \n    def is_valid(word):\n        return len(word) > 2\n    \n    if text is None:\n        return []\n    \n    return [word for word in re.findall('[A-Za-z]+',text) if is_valid(word)]\n    \n    \ndef word_bigger_5(text):\n    '''\n    Write a function to find all words which are at least 5 characters long in a string.\n    '''\n    \n    def is_valid(word):\n        return len(word) > 5\n    \n    if text is None:\n        return []\n    \n    return [word for word in re.findall('[A-Za-z]+',text) if is_valid(word)]\n    \n    \ndef word_bigger_3_6(text):\n    '''\n    Write a function to find all words which are at least 5 characters long in a string.\n    '''\n    \n    def is_valid(word):\n        return len(word) > 3 and len(word) < 6\n    \n    if text is None:\n        return []\n    \n    return [word for word in re.findall('[A-Za-z]+',text) if is_valid(word)]\n    \n    \ndef word_bigger_3_7(text):\n    '''\n    Write a function to find all words which are at least 5 characters long in a string.\n    '''\n    \n    def is_valid(word):\n        return len(word) > 3 and len(word) < 7\n    \n    if text is None:\n        return []\n    \n    return [word for word in re.findall('[A-Za-z]+',text) if is_valid(word)]\n    \n    \ndef word_bigger_3_8(text):\n    '''\n    Write a function to find all words which are at least 5 characters long in a string.\n    '''\n    \n    def is_valid(word):\n        return len(word) > 3 and len(word) < 8\n    \n    if text is None:\n        return []\n    \n    return [word for word in re.findall('[A-Za-z]+',text) if is_valid(word)]\n    \n    \ndef word_bigger_3_9(text):\n    '''\n    Write a function to find all words which are at least 5 characters long in a string.\n    '''\n    \n    def is_valid(word):\n        return len(word) > 3 and len(word) < 9\n    \n    if text is None:\n        return []\n    \n    return [word for word in re.findall('[A-Za-z]+',text) if is_valid(word)]\n    \n    \ndef word_bigger_3_10(text):\n    '''\n    Write a function to find all words which are at least 5 characters long in a string.\n    '''\n    \n    def is_valid(word):\n        return len(word) > 3 and len(word) < 10\n    \n    if text is None:\n        return []\n    \n    return [word for word in re.findall('[A-Za-z]+',text) if is_valid(word)]\n    \n    \ndef word_bigger_3_11(text):\n    '''\n    Write a function to find all words which are at least 5 characters long in a string.\n    '''\n    \n    def is_valid(word):\n        return len(word) > 3 and len(word) < 11\n    \n    if text is None:\n        return []\n    \n    return [word for word in re.findall('[A-Za-z]+',text) if is_valid(word)]\n    \n    \ndef word_bigger_3_12(text):\n    '''\n    Write a function to find all words which are at least 5 characters long in a string.\n    '''\n    \n    def is_valid(word):\n        return len(word) > 3 and len(word) < 12\n    \n    if text is None:\n        return []\n    \n    return [word for word in re.findall('[A-Za-z]+',text) if is_valid(word)]\n    \n    \ndef word_bigger_3_13(text):\n    '''\n    Write a function to find all words which are at least 5 characters long in a string.\n    '''\n    \n    def is_valid(word):\n        return len(word) > 3 and len(word) < 13\n    \n    if text is None:\n        return []\n    \n    return [word for word in re.findall('[A-Za-z]+',text) if is_valid(word)]\n    \n    \ndef word_bigger_3_14(text):\n    '''\n    Write a function to find all words which are at least 5 characters long in a string.\n    '''\n    \n    def is_valid(word):\n        return len(word) > 3 and len(word) < 14\n    \n    if text is None:\n        return []\n    \n    return [word for word in re.findall('[A-Za-z]+',text) if is_valid(word)]\n    \n    \ndef word_bigger_3_15(text):\n    '''\n    Write a function to find all words which are at least 5 characters long in a string.\n    '''\n    \n    def is_valid(word):\n        return len(word) > 3 and len(word) < 15\n    \n    if text is None:\n        return []\n    \n    return [word for word in re.findall('[A-Za-z]+',text) if is_valid(word)]\n    \n    \ndef word_bigger_3_16(text):\n    '''\n    Write a function to find all words which are at least 5 characters long in a string.\n    '''\n    \n    def is_valid(word):\n        return len(word) > 3 and len(word) < 16\n    \n    if text is None:\n        return []\n    \n    return [word for word in re.findall('[A-Za-z]+',text) if i"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_list = re.findall(r'\\w{4,}',text)\n    return char_list\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile('[\\w\\s]+')\n    words = pattern.findall(text)\n    print words\n    # words = set(words)\n    # for word in words:\n    #     if len(word)>=4:\n    #         print word\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return [w for w in text.split() if len(w)>=4]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    list = []\n    if len(text) >= 4:\n        for word in re.finditer(\"\\w+\", text):\n            if len(word.group(0)) >= 4:\n                list.append(word.group(0))\n    return list\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall('\\S{4,}', text)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for n in nums:\n        squares.append(n**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for x in nums:\n        squares.append(x**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i**2)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**2\n    return nums\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        i *= i\n        print(i)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        print(i**2)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # for all the elements of the string.\n    for i in range(len(str)):\n        \n        # Get the substring from i to the end of the string.\n        test = str[i:] + str[:i]\n        \n        # If this substring is same as the string, we have found a rotation.\n        if test == str:\n            return i\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n=len(str)\n    i=0\n    while i<n/2:\n        if str[i]!=str[n-i-1]:\n            return i\n        i+=1\n    return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str = str + str\n    if str == str[::-1]:\n        return 0\n    elif str == str[::-1][1:]:\n        return 1\n    else:\n        return 2\n    "
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 1:\n        return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if str==str[::-1]:\n        return 0\n    n=len(str)\n    for i in range(1,n):\n        if str[i:]==str[i:][::-1]:\n            return i\n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    length = len(str)\n    # Initialize result\n    res = length\n    # Initialize the last index of the string\n    last = -1\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 0 or len(str) == 1: \n        return 0\n    if str == str[::-1]: \n        return 0\n    for i in range(len(str)//2): \n        if str[i]!= str[-1-i]: \n            return i+1\n    return len(str)\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str = list(str)\n    n = len(str)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        for i in range(n):\n            if str[i]!= str[n-1]:\n                break\n        if i == n-1:\n            return 0\n        else:\n            return 1 + find_Rotations(str[i+1:])\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = []\n    for i in range(1,len(str)):\n        if str[:i] == str[i:i*2]:\n            rotations.append(i)\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #Return False if string is empty\n    if not str:\n        return False\n    \n    #We are going to create a new string with len(str) - 1 letters so that we can compare the string after it is rotated to the first string\n    new_str = ''\n    for i in range(len(str) - 1):\n        new_str += str[i]\n    \n    #Compare the new string to the first string\n    if new_str == str:\n        return 0\n    else:\n        return 1 + find_Rotations(new_str)\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        return s.replace(ch, '',1)+s.replace(ch, '')\n    else:\n        return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.rstrip(ch).lstrip(ch)\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\")\n    "
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.strip(ch)\n    s=s.strip(ch)\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i=0\n    while i<=len(s)-1:\n        if s[i]==ch:\n            s=s[:i]+s[i+1:]\n        else:\n            i=i+1\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.strip(ch)\n    s = s.strip(ch)\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'',1).replace(ch,'',1)\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.replace(ch,\"\")\n    return s.replace(s[::-1], \"\")\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    try: \n        s = list(s)\n        s.remove(ch)\n        s.remove(ch)\n        s = ''.join(s)\n    except:\n        pass\n    return s\ndef count_letters(s): \n    '''\n    Write a python function to count the occurrence of each letter in the string. \n    '''\n    return{letter:s.count(letter) for letter in s}\ndef p_str(s):\n    '''\n    Write a python function to return the first and last occurrence of a given character in the string. \n    '''\n    return {letter:s.index(letter) for letter in s}\ndef has_vowels(s): \n    '''\n    Write a python function to check whether a string contains vowel or not. \n    '''\n    s = list(s)\n    vowels = ['a','e','i','o','u']\n    s = [char for char in s if char in vowels]\n    if s: \n        return True\n    else: \n        return False\ndef is_palindrome(s): \n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    s = list(s)\n    if s == s[::-1]: \n        return True\n    else: \n        return False\ndef sort_dict(d): \n    '''\n    Write a python function to sort the values of a dictionary.\n    '''\n    d = {key:val for key,val in sorted(d.items(), key = lambda x:x[1])}\n    return d\ndef square_numbers(nums): \n    '''\n    Write a python function to square a list of numbers. \n    '''\n    return [num ** 2 for num in nums]\ndef count_occurences(s,letter): \n    '''\n    Write a python function to count the occurrences of a given letter in the string. \n    '''\n    return len(s.split(letter))-1\ndef split_n_letters(s,n): \n    '''\n    Write a python function to split a string into a list of n-sized strings.\n    '''\n    s = list(s)\n    return [s[i:i+n] for i in range(0,len(s),n)]\ndef get_vowels(s): \n    '''\n    Write a python function to count the occurence of each vowel in a given string.\n    '''\n    vowels = ['a','e','i','o','u']\n    return {v:s.count(v) for v in vowels}\ndef get_consonants(s): \n    '''\n    Write a python function to count the occurence of each consonant in a given string.\n    '''\n    consonants = ['q','w','r','t','y','p','s','d','f','g','h','j','k','l','z','x','c','v','b','n','m','a','o','u','i']\n    return {c:s.count(c) for c in consonants}\ndef get_alternating_vowel_consonant(s): \n    '''\n    Write a python function to count the occurrences of alternating vowels and consonants in a given string.\n    '''\n    consonants = ['q','w','r','t','y','p','s','d','f','g','h','j','k','l','z','x','c','v','b','n','m','a','o','u','i']\n    vowels = ['a','e','i','o','u']\n    vowel_consonant = {v:s.count(v) for v in vowels}\n    consonant_vowel = {c:s.count(c) for c in consonants}\n    return vowel_consonant,consonant_vowel\ndef get_alternating_vowel_consonant_count(s): \n    '''\n    Write a python function to count the occurrences of alternating vowels and consonants in a given string.\n    '''\n    consonants = ['q','w','r','t','y','p','s','d','f','g','h','j','k','l','z','x','c','v','b','n','m','a','o','u','i']\n    vowels = ['a','e','i','o','u']\n    vowel_consonant = {v:s.count(v) for v in vowels}\n    consonant_vowel = {c:s.count(c) for c in consonants}\n    return sum([vowel_consonant[v] for v in vowels]),sum([consonant_vowel[c] for c in consonants])\ndef get_permutations(s): \n    '''\n    Write a python function to count the permutations of a given string.\n    '''\n    return len(set(s))\ndef get_permutations_count(s): \n    '''\n    Write a python function to count the permutations of a given string.\n    '''\n    return len(set(s))\ndef get_p_vowel_count(s): \n    '''\n    Write a python function to count the occurrences of each vowel in a given string.\n    '''\n    vowels = ['a','e','i','o','u']\n    return {v:s.count(v) for v in vowels}\ndef get_p_consonant_count(s): \n    '''\n    Write a python function to count the occurrences of each consonant in a given string.\n    '''\n    consonants = ['q','w','r','t','y','p','s','d','f','g','h','j','k','l','z','x','c','v','b','n','m','a','o','u','i']\n    return {c:s.count(c) for c in consonants}\ndef get_p_vowel_consonant_count(s): \n    '''\n    Write a python function to count the occurrences of each vowel and consonant in a given string.\n    '''\n    vowels = ['a','e','i','o','u']\n    consonants = ['q','w','r','t','y','p','s','d','f','g','h','j','k','l','z','x','c','v','b','n','m','a','o','u','i']\n    vowel_consonant = {v:s.count(v) for v in vowels}\n    consonant_vowel = {c:s.count(c) for c in consonants}\n    return vowel_consonant,consonant_vowel\ndef get_p_vowel_consonant_count(s): \n    '''\n    Write a python function to count the occurrences of each vowel and consonant in a given string.\n    '''\n    vowels = ['a','e','i','o','u']\n    consonants = ['q','w','r','t','y','p','s','d','f','g','h','j','k','l','z','x','c','v','b','n','m','a','o','u','i']\n    vowel_consonant = {v:s.count(v) for v in vowels}\n    consonant_vowel = {c:s.count(c) for c in consonants}\n    return sum([vowel_consonant[v] for v in vowels]),sum([consonant_vowel[c] for c in consonants])\ndef get_p_vowel_consonant_count(s): \n    '''\n    Write a python function to count the occurrences of each vowel and consonant in a given string.\n    '''\n    vowels = ['a','e','i','o','u']\n    consonants = ['q','w','r','t','y','p','s','d','f','g','h','j','k','l','z','x','c','v','b','n','m','a','o','u','i']\n    vowel_consonant = {v:s.count(v) for v in vowels}\n    consonant_vowel = {c:s.count(c) for c in consonants}\n    return sum([vowe"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # if(len(s)>1):\n    #     if(s[0]==ch):\n    #         s=s[1:]\n    #     if(s[-1]==ch):\n    #         s=s[:-1]\n    # else:\n    #     s=''\n    return s.replace(ch,\"\",1).replace(ch,\"\")\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    if not M:\n        return M\n    M = copy.deepcopy(M)\n    n = len(M)\n    # for i in xrange(n):\n    #     for j in xrange(n):\n    #         print M[i][j],\n    #     print\n    # print\n    for i in xrange(n):\n        for j in xrange(n):\n            if i == j:\n                continue\n            if sum(M[i]) < sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M\n    \ndef shortest_path_in_matrix(M, n, v, w):\n    '''\n    Given a directed and weighted graph, return the length of the shortest path from v to w.\n    The graph is given as an array of edges. Each edge is a string in the format: \"from to length\".\n    '''\n    G = {i:[] for i in xrange(n)}\n    for i in xrange(n):\n        for j in xrange(n):\n            if M[i][j]!= -1:\n                G[i].append((j, M[i][j]))\n    # print G\n    stack = [(0, v, 0)]\n    while len(stack)!= 0:\n        cur = stack.pop()\n        cur_dist, cur_idx, cur_weight = cur\n        if cur_idx == w:\n            return cur_weight\n        for next_idx, next_dist in G[cur_idx]:\n            if next_idx not in visited:\n                stack.append((cur_weight + next_dist, next_idx, cur_weight + next_dist))\n    return -1\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sum = []\n    for i in xrange(len(M)):\n        row_sum.append(sum(M[i]))\n    for j in xrange(len(M)):\n        m = []\n        for k in xrange(len(M)):\n            m.append(M[k][j])\n        M[j] = sorted(m)\n    sorted_rows = sorted(row_sum)\n    m = []\n    for i in xrange(len(M)):\n        m.append(M[i][row_sum.index(sorted_rows[i])])\n    return m\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    def compute_row_sums(M):\n        return [sum(row) for row in M]\n    def merge_row_sums(row_sums1, row_sums2):\n        return [sum(a) for a in zip(row_sums1, row_sums2)]\n    def sort_matrix_by_row_sums(M, row_sums):\n        M_new = []\n        for row_sum in row_sums:\n            row = []\n            for i in range(len(M[0])):\n                row.append(M[row_sums.index(row_sum)][i])\n            M_new.append(row)\n        return M_new\n    def merge_sort_row_sums(M):\n        n = len(M)\n        if n <= 1:\n            return M\n        return merge(merge_sort_row_sums(M[:n/2]), merge_sort_row_sums(M[n/2:]))\n    def merge(left, right):\n        if not left:\n            return right\n        if not right:\n            return left\n        if left[0] < right[0]:\n            return [left[0]] + merge(left[1:], right)\n        return [right[0]] + merge(left, right[1:])\n    row_sums = compute_row_sums(M)\n    return sort_matrix_by_row_sums(M, merge_sort_row_sums(row_sums))\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Implement this function\n    return sorted(M, key = lambda M : sum(M[i] for i in range(len(M))))\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_matrix = sorted(M, key=lambda x: sum(x))\n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Number of rows and columns of the matrix\n    row_n = len(M)\n    col_n = len(M[0])\n    \n    # Sort the matrix based on the sum of each row\n    for row in range(row_n):\n        for col in range(col_n):\n            # Find the index of the smallest element\n            smallest = row\n            for i in range(row, col_n):\n                if M[row][i] < M[smallest][i]:\n                    smallest = i\n            # Swap the rows\n            temp = M[row]\n            M[row] = M[smallest]\n            M[smallest] = temp\n    return M\n    \n    \ndef rotate_matrix(M):\n    '''\n    Write a function to rotate a given matrix, 90 degrees (clockwise), by \n    applying the following rules:\n    \n    1. If a given cell is not a visited cell, mark it as visited and the \n    adjacent cells as visited.\n    \n    2. For each cell adjacent to the visited cell, if it is not a visited cell, \n    mark it as visited and the adjacent cells as visited.\n    \n    3. Repeat steps 2 and 3 until all the cells have been visited.\n    \n    You may assume all input matrices are square.\n    '''\n    \n    # Get the number of rows and columns\n    row_n = len(M)\n    col_n = len(M[0])\n    \n    # Start from top-left corner\n    row, col = 0, 0\n    \n    # Loop for each cell\n    while row < row_n and col < col_n:\n        # If the cell is not visited\n        if M[row][col]!= 1:\n            # Mark all the adjacent cells as visited\n            visited = set()\n            for i in range(4):\n                # Move right\n                row = row + 1\n                if row < row_n and M[row][col]!= 1:\n                    visited.add((row, col))\n                    M[row][col] = 1\n                # Move down\n                col = col + 1\n                if col < col_n and M[row][col]!= 1:\n                    visited.add((row, col))\n                    M[row][col] = 1\n                # Move left\n                row = row - 1\n                if row >= 0 and M[row][col]!= 1:\n                    visited.add((row, col))\n                    M[row][col] = 1\n                # Move up\n                col = col - 1\n                if col >= 0 and M[row][col]!= 1:\n                    visited.add((row, col))\n                    M[row][col] = 1\n            # Change the cell value\n            M[row][col] = 0\n            \n        # Move to next cell\n        row, col = row + 1, col\n    return M\n    \n    \ndef max_product_subarray(nums):\n    '''\n    Given an array of integers, find two non-overlapping subarrays which have the largest product.\n    \n    For example, given [4,2,5,1,8], the output should be maximum product subarray = 8.\n    \n    The subarray must be non-empty.\n    '''\n    \n    # Store the maximum product and the corresponding start and end index\n    max_product, start_index, end_index = nums[0], 0, 0\n    \n    for i in range(1, len(nums)):\n        # If the product is negative, make it positive\n        nums[i] = max(nums[i], nums[i] * nums[i - 1])\n        # Check if the product is a new max\n        if nums[i] > max_product:\n            max_product = nums[i]\n            start_index = i - 1\n            end_index = i\n    # Return the maximum product\n    return max_product, start_index, end_index\n    \n    \ndef fib_faster(n):\n    '''\n    Given a non-negative integer 'n', write a function to compute the nth fibonacci number.\n    \n    You may assume that the input n is less than 2^31 - 1.\n    '''\n    \n    # Store the last 2 fibonacci numbers\n    last_two = [1, 1]\n    \n    # Loop until we reach the required number\n    while len(last_two) <= n:\n        # Add the last two numbers to the array and update the last two numbers\n        last_two.append(last_two[-1] + last_two[-2])\n    \n    # Return the last two numbers\n    return last_two[n]\n    \n    \ndef fib(n):\n    '''\n    Write a function to compute all fibonacci numbers less than 2^31 - 1.\n    \n    You may assume that the input n is less than 2^31 - 1 and n >= 0.\n    '''\n    \n    # Store the last two fibonacci numbers\n    last_two = [1, 1]\n    \n    # Loop until we reach the required number\n    while len(last_two) <= n:\n        # Add the last two numbers to the array and update the last two numbers\n        last_two.append(last_two[-1] + last_two[-2])\n    \n    # Return the last two numbers\n    return last_two[n]\n    \n    \ndef kth_smallest_element(nums, k):\n    '''\n    Given an array of integers and a number k, find the kth smallest number in \n    the array.\n    \n    Note that it is the kth smallest number in the sorted order, not the kth \n    distinct element.\n    \n    For example, given array = [1, 5, 12, 2, 11, 5], and k = 3, the 3rd smallest number is 5.\n    '''\n    \n    # Sort the array and return the kth number\n    nums.sort()\n    return nums[k - 1]\n    \n    \ndef kth_smallest_element_2d(matrix, k):\n    '''\n    Given a 2d array and a number k, find the kth smallest number in the array.\n    \n    Note that it is the kth smallest number in the sorted order, not the kth \n    distinct element.\n    \n    For example, given array = [\n    [1, 5, 12], \n    [2, 11, 5], \n    [3, 4, 6]\n    ], and k = 5, the 5th smallest number is 12.\n    '''\n    \n    # Sort the matrix and return the kth number\n    matrix.sort()\n    return matrix[k - 1][0]\n    \n    \ndef rotate_matrix_90_degree(M):\n    '''\n    Write a function to rotate a given matrix 90 degrees (clockwise).\n    \n    You may assume the matrix is square.\n    '''\n    \n    # Get the number of rows and columns\n    row_n = len(M)\n    col_n = len(M[0])\n    \n    # Loop for each row\n    for row in range(row_n):\n        # Loop for each column\n        for col in range(row, col_n):\n            # Rotate the cell\n            M[row][col], M[col][row] = M[col][row], M[row][col]\n    return M\n    \n    \ndef check_valid_row_col(row_n, col_n, row, col):\n    '''\n    Write a function to check if the given row and column indexes are valid.\n    \n    A valid row and column index is an index in the range [0, row_n] and [0, col_n].\n    '''\n    \n    return 0 <= row < row_n and 0 <= col < col_n\n    \n    \ndef max_product_subarray_2d(matrix):\n    '''\n    Given a 2d array of integers, find a subarray with the largest product and return \n    the product.\n    \n    If the largest product is not unique, return the maximum value.\n    \n    For example, given the 2d array [\n    [2, 3, -2, 4],\n    [-5, 2, -1, 2],\n    [-10, -10, -10, 1],\n    [3, 3, 3, 10]\n    ], the output should be 235.\n    '''\n    \n    # Get the numbe"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    L = []\n    for i in range(rows):\n        L.append([])\n        for j in range(cols):\n            L[i].append(M[i][j])\n    L.sort(reverse = True)\n    for i in range(rows):\n        for j in range(cols):\n            M[i][j] = L[i][j]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    N = len(M)\n    K = len(M[0])\n    for i in xrange(N):\n        for j in xrange(N):\n            for k in xrange(K-1):\n                if M[i][k] > M[i][k+1]:\n                    temp = M[i][k]\n                    M[i][k] = M[i][k+1]\n                    M[i][k+1] = temp\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        M[i].sort()\n    for i in range(n-1):\n        if sum(M[i]) > sum(M[i+1]):\n            temp = M[i]\n            M[i] = M[i+1]\n            M[i+1] = temp\n    return M\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #l = float(input('Length of the triangle : '))\n    #b = float(input('Base of the triangle : '))\n    #h = float(input('Height of the triangle : '))\n    volume = (l*b*h)/3\n    print('The volume of the triangle is : ',volume)\n    return\n    "
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    def find_volume(l,b,h) :\n        return (l*b*h)/3.0\n    \n    print find_volume(l,b,h)\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/3\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return 1.0/6.0*l*b*h\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3) * b * h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    print(\"Volume of a triangular prism :\")\n    print((l*b*h)/3)\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/3.0)*(l*b*h)\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = b*h/3\n    return Volume\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    import math\n    return (l*b*h)/3\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0\n    for i in range(len(l)) : \n        volume += l[i] * b[i] * h[i]\n    return volume\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.findall('[a-z]+_[a-z]+', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return (text.islower() and '_' in text)\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(\"[a-z]+_[a-z]+\",text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('[a-z]+_+[a-z]+',text))\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'[a-z]+_[a-z]+',text)\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    lowercase_letters = re.findall('[a-z]+',text)\n    return len(lowercase_letters) > 0\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('[a-z]+_[a-z]+', text) is not None\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r\"[a-z]+_[a-z]+\", text, re.IGNORECASE) is not None\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[a-z]+_',text))\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text_lower = text.lower()\n    length = len(text_lower)\n    if length < 1:\n        return False\n    if length == 1:\n        if text_lower[0].isalpha():\n            return True\n        else:\n            return False\n    else:\n        if text_lower[0].isalpha() and text_lower[1].isalpha():\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    \n    # Function Dec.\n    def perimeter(a):\n        return a*4\n    \n    # Function Call.\n    return perimeter(a)\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    int_list = [] \n    for i in string: \n        int_list.append(ord(i))\n    return int_list\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str1 = list(string)\n    str2 = list(string)\n    for i in range(len(str1)):\n        if str1[i] in str2:\n            str1.remove(str1[i])\n    return str1\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    for i in string:\n        list1.append(i)\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    for i in string:\n        list1.append(i)\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\ndef search_char(list1, char):\n    '''\n    Write a function to find the index of the character in a string.\n    '''\n    for i in list1:\n        if i == char:\n            return list1.index(char)\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    for i in string:\n        list1.append(i)\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    for i in string:\n        list1.append(i)\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    for i in string:\n        list1.append(i)\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    for i in string:\n        list1.append(i)\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    for i in string:\n        list1.append(i)\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    for i in string:\n        list1.append(i)\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    for i in string:\n        list1.append(i)\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    for i in string:\n        list1.append(i)\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    for i in string:\n        list1.append(i)\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    for i in string:\n        list1.append(i)\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    for i in string:\n        list1.append(i)\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    for i in string:\n        list1.append(i)\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    for i in string:\n        list1.append(i)\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    for i in string:\n        list1.append(i)\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    for i in string:\n        list1.append(i)\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    for i in string:\n        list1.append(i)\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    for i in string:\n        list1.append(i)\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    for i in string:\n        list1.append(i)\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\ndef str_to_list(string): \n    '''\n    Write a functio"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    \n    #To remove characters from the string\n    string_after_removal = \"\"\n    for i in range(len(string)):\n        if string[i] not in string_after_removal:\n            string_after_removal += string[i]\n    return string_after_removal\n    \n    \ndef remove_elements(string, set_of_removal):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    \n    #To remove characters from the string\n    string_after_removal = \"\"\n    for i in range(len(string)):\n        if string[i] not in set_of_removal:\n            string_after_removal += string[i]\n    return string_after_removal\n    \ndef is_perfect_square(num):\n    '''\n    A number is called a perfect square if the square of the number is equal to the number. For example,\n    we can see that 2, 4, 9, 16, and 25 are the only six perfect squares that exist in this set.\n    '''\n    \n    #This is a simple approach to checking if a number is a perfect square\n    if (num * num) == num:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str_array = list(string)\n    remove_list = []\n    for i in range(len(str_array)):\n        if str_array[i] in str_array[i+1:]:\n            remove_list.append(str_array[i])\n    for i in remove_list:\n        str_array.remove(i)\n    return str_array\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_of_char = [] \n    for i in string: \n        if i not in list_of_char: \n            list_of_char.append(i) \n    return list_of_char\ndef generate_hash_functions(p, m):\n    '''\n    Write a function to generate the hash functions in a range of the length of the first string.\n    The function should return a list of list containing the hash functions.\n    '''\n    hash_functions = [] \n    for i in range(m): \n        hash_functions.append([]) \n    for i in range(m): \n        for j in range(p): \n            hash_functions[i].append(j) \n    return hash_functions\ndef join_hash_functions(hash_functions, m):\n    '''\n    Write a function to join hash functions into a list.\n    '''\n    hash_function_joined = [] \n    for i in range(m): \n        hash_function_joined.append(hash_functions[i][0])\n    return hash_function_joined\ndef generate_hash_function_by_character(characters, hash_functions):\n    '''\n    Write a function to generate hash functions by giving the characters and their hash functions.\n    The function should return a list of list containing the hash functions.\n    '''\n    return_hash_function = [] \n    for i in characters: \n        return_hash_function.append(hash_functions[ord(i) - ord('a')])\n    return return_hash_function\ndef generate_hash_function_by_int(int_characters, hash_functions):\n    '''\n    Write a function to generate hash functions by giving the integers and their hash functions.\n    The function should return a list of list containing the hash functions.\n    '''\n    return_hash_function = [] \n    for i in int_characters: \n        return_hash_function.append(hash_functions[i])\n    return return_hash_function\ndef generate_hash_value_by_string(string, hash_function):\n    '''\n    Write a function to generate hash value by giving a string and a hash function.\n    The function should return an integer.\n    '''\n    hash_value = 0\n    for i in string: \n        hash_value += hash_function[ord(i) - ord('a')]\n    return hash_value\ndef generate_hash_value_by_list(string, hash_function):\n    '''\n    Write a function to generate hash value by giving a string and a hash function.\n    The function should return an integer.\n    '''\n    hash_value = 0\n    for i in string: \n        hash_value += hash_function[ord(i) - ord('a')]\n    return hash_value\ndef generate_hash_value_by_int(int_string, hash_function):\n    '''\n    Write a function to generate hash value by giving a string and a hash function.\n    The function should return an integer.\n    '''\n    hash_value = 0\n    for i in int_string: \n        hash_value += hash_function[i]\n    return hash_value\ndef generate_hash_value_by_list_of_int(int_string, hash_function):\n    '''\n    Write a function to generate hash value by giving a string and a hash function.\n    The function should return an integer.\n    '''\n    hash_value = 0\n    for i in int_string: \n        hash_value += hash_function[i]\n    return hash_value\ndef generate_hash_value_by_list_of_int(int_string, hash_function):\n    '''\n    Write a function to generate hash value by giving a string and a hash function.\n    The function should return an integer.\n    '''\n    hash_value = 0\n    for i in int_string: \n        hash_value += hash_function[i]\n    return hash_value\ndef generate_hash_value_by_string_and_int(string, int_value):\n    '''\n    Write a function to generate hash value by giving a string and an integer.\n    The function should return an integer.\n    '''\n    hash_value = 0\n    for i in string: \n        hash_value += hash_function[ord(i) - ord('a')]\n    return hash_value + int_value\ndef generate_hash_value_by_list_of_string_and_int(list_of_string, list_of_int):\n    '''\n    Write a function to generate hash value by giving a list of strings and an integer.\n    The function should return an integer.\n    '''\n    hash_value = 0\n    for i in list_of_string: \n        hash_value += generate_hash_function_by_string(i, hash_function)\n    for i in list_of_int: \n        hash_value += i\n    return hash_value\ndef generate_hash_value_by_list_of_string_and_int(list_of_string, list_of_int):\n    '''\n    Write a function to generate hash value by giving a list of strings and an integer.\n    The function should return an integer.\n    '''\n    hash_value = 0\n    for i in list_of_string: \n        hash_value += generate_hash_function_by_string(i, hash_function)\n    for i in list_of_int: \n        hash_value += i\n    return hash_value\ndef generate_hash_value_by_string_and_int(string, int_value):\n    '''\n    Write a function to generate hash value by giving a string and an integer.\n    The function should return an integer.\n    '''\n    hash_value = 0\n    for i in string: \n        hash_value += hash_function[ord(i) - ord('a')]\n    return hash_value + int_value\ndef generate_hash_value_by_list_of_string_and_int(list_of_string, list_of_int):\n    '''\n    Write a function to generate hash value by giving a list of strings and an integer.\n    The function should return an integer.\n    '''\n    hash_value = 0\n    for i in list_of_string: \n        hash_value += generate_hash_function_by_string(i, hash_function)\n    for i in list_of_int: \n        hash_value += i\n    return hash_value\ndef generate_hash_value_by_list_of_string_and_int(list_of_string, list_of_int):\n    '''\n    Write a function to generate hash value by giving a list of strings and an integer.\n    The function should return an integer.\n    '''\n    hash_value = 0\n    for i in list_of_string: \n        hash_value += generate_hash_function_by_string(i, hash_function)\n    for i in list_of_int: \n        hash_value += i\n    return hash_value\ndef generate_hash_value_by_list_of_string_and_int(list_of_string, list_of_int):\n    '''\n    Write a function to generate hash value by giving a list of strings and an integer.\n    The function should return an integer.\n    '''\n    hash_value = 0\n    for i in list_of_string: \n        hash_value += generate_hash_function_by_string(i, hash_function)\n    for i in list_of_int: \n        hash_value += i\n    return hash_value\ndef generate_hash_value_by_list_of_string_and_int(list_of_string, list_of_int):\n    '''\n    Write a function to generate hash value by giving a list of strings and an integer.\n    The function should return an integer.\n    '''\n    hash_value = 0\n    for i in list_of_string: \n        hash_value += generate_hash_function_by_string(i, hash_function)\n    for i in list_of_int: \n        hash_value += i\n    return hash_value\ndef generate_hash_value_by_list_of_string_and_int(list_of_string, list_of_int):\n    '''\n    Write a function to generate has"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_1 = []\n    for i in string:\n        if i not in list_1:\n            list_1.append(i)\n    return list_1\ndef find_minimum_distance(string1, string2):\n    '''\n    Write a function to find the minimum distance between characters of two strings.\n    '''\n    list_1 = str_to_list(string1)\n    list_2 = str_to_list(string2)\n    list_3 = []\n    for i in list_2:\n        if i not in list_1:\n            list_3.append(i)\n    min_dist = len(string1)\n    for i in list_3:\n        dist = string1.find(i) - string2.find(i)\n        if dist < min_dist:\n            min_dist = dist\n    return min_dist\ndef find_substring_occurence(string, substring):\n    '''\n    Write a function to find the first occurrence of the smallest substring in a given string.\n    '''\n    list_1 = []\n    list_2 = []\n    for i in range(len(string)):\n        list_1.append(string[i])\n        if string[i] not in list_1:\n            list_1.append(string[i])\n        if string[i] in list_1 and string[i] not in list_2:\n            list_2.append(string[i])\n    return list_2\ndef find_common_character_set(string_1, string_2):\n    '''\n    Write a function to find the common characters between two strings.\n    '''\n    list_1 = str_to_list(string_1)\n    list_2 = str_to_list(string_2)\n    list_3 = []\n    for i in list_1:\n        if i in list_2:\n            list_3.append(i)\n    return list_3\ndef find_common_characters(string_1, string_2):\n    '''\n    Write a function to find the common characters between two strings.\n    '''\n    list_1 = str_to_list(string_1)\n    list_2 = str_to_list(string_2)\n    list_3 = []\n    for i in list_1:\n        if i in list_2:\n            list_3.append(i)\n    return list_3\ndef find_rotation_count(string_1, string_2):\n    '''\n    Write a function to find the minimum number of characters to be inserted and deleted to make the first string a substring of the second string.\n    '''\n    list_1 = []\n    for i in range(len(string_1)):\n        list_1.append(string_1[i])\n    list_2 = []\n    for i in range(len(string_2)):\n        list_2.append(string_2[i])\n    list_3 = []\n    for i in list_1:\n        if i in list_2:\n            list_3.append(i)\n    return len(list_1) - len(list_3)\ndef is_substring(string_1, string_2):\n    '''\n    Write a function to find if a string is a substring of another string.\n    '''\n    list_1 = []\n    for i in range(len(string_1)):\n        list_1.append(string_1[i])\n    list_2 = []\n    for i in range(len(string_2)):\n        list_2.append(string_2[i])\n    list_3 = []\n    for i in list_1:\n        if i in list_2:\n            list_3.append(i)\n    if len(list_1) == len(list_3):\n        return True\n    else:\n        return False\ndef find_longest_string(string_1, string_2):\n    '''\n    Write a function to find the longest common substring between two strings.\n    '''\n    list_1 = []\n    for i in range(len(string_1)):\n        list_1.append(string_1[i])\n    list_2 = []\n    for i in range(len(string_2)):\n        list_2.append(string_2[i])\n    list_3 = []\n    for i in list_1:\n        if i in list_2:\n            list_3.append(i)\n    return list_3\ndef find_longest_substring_with_equal_characters(string_1, string_2):\n    '''\n    Write a function to find the longest substring with all the characters of the other string in it.\n    '''\n    list_1 = []\n    for i in range(len(string_1)):\n        list_1.append(string_1[i])\n    list_2 = []\n    for i in range(len(string_2)):\n        list_2.append(string_2[i])\n    list_3 = []\n    for i in list_1:\n        if i in list_2:\n            list_3.append(i)\n    return list_3\ndef find_rotation(string_1, string_2):\n    '''\n    Write a function to find the minimum number of characters that needs to be changed to find the first common substring.\n    '''\n    list_1 = []\n    for i in range(len(string_1)):\n        list_1.append(string_1[i])\n    list_2 = []\n    for i in range(len(string_2)):\n        list_2.append(string_2[i])\n    list_3 = []\n    for i in list_1:\n        if i in list_2:\n            list_3.append(i)\n    return len(list_1) - len(list_3)\ndef string_compression(string):\n    '''\n    Write a function to compress a string. For example, \"aabcccccaaa\" would become a2b1c5a3.\n    '''\n    list_1 = []\n    list_2 = []\n    for i in range(len(string)):\n        list_1.append(string[i])\n    list_2.append(list_1[0])\n    count = 1\n    for i in range(1, len(list_1)):\n        if list_1[i] == list_1[i - 1]:\n            count += 1\n        else:\n            list_2.append(str(count))\n            list_2.append(list_1[i])\n            count = 1\n    list_3 = []\n    for i in list_2:\n        if type(i) == int:\n            list_3.append(str(i))\n        else:\n            list_3.append(i)\n    return ''.join(list_3)\ndef find_longest_palindrome(string):\n    '''\n    Write a function to find the longest palindrome in a given string.\n    '''\n    list_1 = []\n    for i in range(len(string)):\n        list_1.append(string[i])\n    list_2 = []\n    for i in range(len(string)):\n        list_2.append(string[i])\n    list_3 = []\n    for i in list_1:\n        if i in list_2:\n            list_3.append(i)\n    return list_3\ndef find_anagram(string_1, string_2):\n    '''\n    Write a function to find the first anagram of two strings.\n    '''\n    list_1 = []\n    for i in range(len(string_1)):\n        list_1.append(string_1[i])\n    list_2 = []\n    for i in range(len(string_2)):\n        list_2.append(string_2[i])\n    list_3 = []\n    for i in list_1:\n        if i in list_2:\n            list_3.append(i)\n    return list_3\ndef find_anagram_using_sorted_string(string_1, string_2):\n    '''\n    Write a function to find the first anagram of two strings.\n    '''\n    list_1 = []\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str2 = set(string)\n    list1 = []\n    for i in range(0,len(string)):\n        for j in range(0,len(str2)):\n            if string[i] == str2[j]:\n                break\n        if j == len(str2)-1:\n            list1.append(string[i])\n    return list1\ndef apply_Sbox(x):\n    '''\n    Write a function to apply the Sbox to each of the 16 bits of the key and return the 32 bit result.\n    '''\n    if x%2 == 1:\n        x = x ^ (1 << 1)\n        x = x ^ (1 << 2)\n        x = x ^ (1 << 4)\n        x = x ^ (1 << 7)\n        x = x ^ (1 << 10)\n        x = x ^ (1 << 13)\n        x = x ^ (1 << 15)\n    return x\ndef round_key(key, rnd):\n    '''\n    Write a function to return the 16 round keys for a given key and round number.\n    '''\n    if rnd == 1:\n        return key\n    return [key[i] for i in [1,2,3,4,11,12,13,14]]\ndef shift_rows(state):\n    '''\n    Write a function to apply a linear matrix shift to the state using Sbox.\n    '''\n    for i in range(1, 4):\n        state[i] = apply_Sbox(state[i])\n    return state\ndef galois_multiplication(a, b):\n    '''\n    Write a function to perform a Galois Multiplication between 2 integers.\n    '''\n    p = 0\n    while b:\n        if b & 1:\n            p ^= a\n        a <<= 1\n        if a & 0x100:\n            a ^= 0x1b\n        b >>= 1\n    return p\ndef mix_column(state, inv=False):\n    '''\n    Write a function to return the 8x8 matrix of the output of the Mix Columns.\n    '''\n    # Main Mix Column\n    t1 = galois_multiplication(2, state[0]) ^ galois_multiplication(3, state[1]) ^ state[2] ^ state[3]\n    t2 = state[0] ^ galois_multiplication(2, state[1]) ^ galois_multiplication(3, state[2]) ^ state[3]\n    t3 = state[0] ^ state[1] ^ galois_multiplication(2, state[2]) ^ galois_multiplication(3, state[3])\n    t4 = galois_multiplication(2, state[0]) ^ state[1] ^ state[2] ^ galois_multiplication(3, state[3])\n    # Inv Mix Column\n    if inv:\n        t1, t2, t3, t4 = t4, t1, t2, t3\n    # Addition of Main Mix Column and Inv Mix Column\n    t = []\n    t.append(t1)\n    t.append(t2)\n    t.append(t3)\n    t.append(t4)\n    return t\ndef add_round_key(state, round_key):\n    '''\n    Write a function to add the round key to the state and return the new state.\n    '''\n    return [[x ^ y for x, y in zip(a, b)] for a, b in zip(state, round_key)]\ndef s_box(state, byte):\n    '''\n    Write a function to return the 8x8 Sbox result for a given byte.\n    '''\n    row = byte >> 4\n    col = byte & 15\n    return state[row][col]\ndef s_box_inv(state, byte):\n    '''\n    Write a function to return the inverse Sbox result for a given byte.\n    '''\n    row = byte >> 4\n    col = byte & 15\n    return state[15 - row][15 - col]\ndef round_key_expansion(key, rounds):\n    '''\n    Write a function to return the 16 round keys for a given key and number of rounds.\n    '''\n    round_keys = []\n    for i in range(1, rounds + 1):\n        # Each round has 2 parts, 1 is the 16-bit round key and the other is the number of shifts to apply\n        round_key = key[16 * (i - 1):16 * i]\n        round_key = round_key_gen(round_key, i)\n        round_keys.append(round_key)\n    return round_keys\ndef round_key_gen(key, rnd):\n    '''\n    Write a function to return the 16 round keys for a given key and number of rounds.\n    '''\n    return [key[i] for i in [1, 2, 3, 4, 11, 12, 13, 14]]\ndef initial_state(key):\n    '''\n    Write a function to return the Initial State of the 8x8 State Matrix of the AES Encryption Algorithm.\n    '''\n    state = []\n    # Plaintext to 8x8 matrix\n    for i in range(0, 16):\n        state.append(key[8 * i:8 * (i + 1)])\n    # Shift rows and then Mix Columns\n    state = shift_rows(state)\n    state = mix_column(state)\n    return state\ndef cipher_text(msg, key, rounds):\n    '''\n    Write a function to return the cipher text for a given message and key and number of rounds.\n    '''\n    # Convert the message to an 8x8 matrix\n    state = []\n    for i in range(0, 8):\n        state.append(msg[8 * i:8 * (i + 1)])\n    # Add the Initial State\n    state = add_round_key(state, initial_state(key))\n    # Each round has 2 parts, 1 is the 16-bit round key and the other is the number of shifts to apply\n    round_keys = round_key_expansion(key, rounds)\n    for rnd in range(1, rounds + 1):\n        state = sub_bytes(state)\n        state = shift_rows(state)\n        state = mix_column(state)\n        state = add_round_key(state, round_keys[rnd - 1])\n    return state\ndef sub_bytes(state):\n    '''\n    Write a function to return the 8x8 Substitution of the State Matrix with Sbox.\n    '''\n    return [[s_box(x, y) for x, y in zip(a, b)] for a, b in zip(state, state)]\ndef sub_bytes_inv(state):\n    '''\n    Write a function to return the 8x8 inverse Substitution of the State Matrix with Sbox.\n    '''\n    return [[s_box_inv(x, y) for x, y in zip(a, b)] for a, b in zip(state, state)]\ndef shift_rows_inv(state):\n    '''\n    Write a function to return the 8x8 inverse Shift Rows of the State Matrix.\n    '''\n    return [[state[i][j] for i in range(1, 4)] for j in range(0, 4)]\ndef add_round_key(state, round_key):\n    '''\n    Write a function to return the 8x8 Addition of the State Matrix with Round Key.\n    '''\n    return [[x ^ y for x, y in zip(a, b)] for a, b in zip(state, round_key)]\ndef chxor(a, b):\n    '''\n    Write a function to return the XOR of the two hex strings, a and b.\n    '''\n    return hex(int(a, 16) ^ int(b, 16))\ndef xor_list(list1, list2):\n    '''\n    Write a function to return the XOR of the two hex strings, a and b.\n    '''\n    return [hex(int(x, 16) ^ int(y, 16)) for x, y in zip(list1, list2)]\ndef hex_to_list(str):\n    '''\n    Write a function to return the hex string of a given byte list\n    '''\n    return [hex(x) for x in str]\ndef list_to_hex(list):\n    '''"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    li = [0]*256\n    for i in range(len(string)):\n        li[ord(string[i])] = i\n    return li\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    i = 0\n    list = []\n    while i < len(string):\n        if string[i] not in list:\n            list.append(string[i])\n        i = i + 1\n    return list\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if not arraynums:\n        return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    res = [x for x in arraynums if arraynums.count(x)>1]\n    print(res)\n    if len(res) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,7,8,2,3,1]\n    # [4,3,2,"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    indexes = []\n    for i in range(len(arraynums)):\n        indexes.append(i)\n        if arraynums[i] in arraynums[i+1:]:\n            indexes.remove(i)\n    return len(indexes)\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    def has_duplicate(arraynums):\n        return len(arraynums)!= len(set(arraynums))\n    assert has_duplicate(arraynums) == False\n    assert has_duplicate([1,2,3,4,5]) == False\n    assert has_duplicate([1,2,3,4,1]) == True\n    assert has_duplicate([1,1,1,3,3,4,3,2,4,2]) == True\n    assert has_duplicate([]) == False\n    assert has_duplicate([1,2]) == False\n    assert has_duplicate([1,2,3,4,5,6,7,8,9]) == False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    nums = [1, 2, 3, 4, 5, 6]\n    target = 4\n    assert find_duplicate(nums) == 4\n    nums = [1, 3, 4, 2, 2]\n    assert find_duplicate(nums) == 2\n    nums = [1, 3, 2, 4, 2]\n    assert find_duplicate(nums) == 2\n    nums = [1, 3, 5, 4, 5]\n    assert find_duplicate(nums) == 5\n    nums = [1, 2, 3, 4, 5, 6, 7, 8]\n    assert find_duplicate(nums) == -1\n    nums = []\n    assert find_duplicate(nums) == -1\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums)!= len(set(arraynums))\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    visited = {}\n    for num in arraynums:\n        if num in visited:\n            return True\n        else:\n            visited[num] = True\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    result = False\n    n = len(arraynums)\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            elif arraynums[i] == arraynums[j]:\n                result = True\n                break\n        if result:\n            break\n    return result\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    a = str(x)\n    b = len(a)\n    t=0\n    for i in range(1,b+1):\n        t=t+int(a[b-i])**i\n    if(t==x):\n        return True\n    else:\n        return False\n    \n    \ndef reverse_num(x):\n    '''\n    Write a function to reverse an integer number.\n    '''\n    if(x<0):\n        x=-x\n        x=str(x)\n        x=x[::-1]\n        x=int(x)\n        x=-x\n        return x\n    else:\n        x=str(x)\n        x=x[::-1]\n        x=int(x)\n        return x\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    x_len = len(x)\n    count = 0\n    for i in x:\n        if i in ['a','e','i','o','u']:\n            count = count + 1\n    if count >= 2 and count <= x_len-2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x%7 == 1\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    import re\n    if re.search('^.*[0-9]{1,}(?![0-9])',x):\n        return False\n    else:\n        return True\n    \n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    #woodall -> abcd efgh ijkl mnop qrst uvwx z\n    import re\n    return bool(re.match(\"^[a-z]*d[a-z]*$\", x))\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    digits = [int(x) for x in str(x)]\n    return all(digit%2==0 for digit in digits) and sum(digits)%3==0\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x.lower() in ['z', 'p', 'r','s', 'e', 't', 'g', 'h', 'j', 'k', 'l','m', 'n', 'o', 'u', 'v', 'w', 'x', 'y', 'd', 'c', 'b', 'f', 'q', 'a', 'b', 'n','m', 'h', 'w', 'v', 't', 'd', 'g', 'p', 'z', 'e', 'r','s', 'l', 'j', 'k', 'n', 'o', 'u', 'v', 'w', 'x', 'y', 'd', 'c', 'b', 'f', 'q', 'a', 'b', 'n','m', 'h', 'w', 'v', 't', 'd', 'g', 'p', 'z', 'e', 'r','s', 'l', 'j', 'k', 'n', 'o', 'u', 'v', 'w', 'x', 'y', 'd', 'c', 'b', 'f', 'q', 'a', 'b', 'n','m', 'h', 'w', 'v', 't', 'd', 'g', 'p', 'z', 'e', 'r','s', 'l', 'j', 'k', 'n', 'o', 'u', 'v', 'w', 'x', 'y', 'd', 'c', 'b', 'f', 'q', 'a', 'b', 'n','m', 'h', 'w', 'v', 't', 'd', 'g', 'p', 'z', 'e', 'r','s', 'l', 'j', 'k', 'n', 'o', 'u', 'v', 'w', 'x', 'y', 'd', 'c', 'b', 'f', 'q', 'a', 'b', 'n','m', 'h', 'w', 'v', 't', 'd', 'g', 'p', 'z', 'e', 'r','s', 'l', 'j', 'k', 'n', 'o', 'u', 'v', 'w', 'x', 'y', 'd', 'c', 'b', 'f', 'q', 'a', 'b', 'n','m', 'h', 'w', 'v', 't', 'd', 'g', 'p', 'z', 'e', 'r','s', 'l', 'j', 'k', 'n', 'o', 'u', 'v', 'w', 'x', 'y', 'd', 'c', 'b', 'f', 'q', 'a', 'b', 'n','m', 'h', 'w', 'v', 't', 'd', 'g', 'p', 'z', 'e', 'r','s', 'l', 'j', 'k', 'n', 'o', 'u', 'v', 'w', 'x', 'y', 'd', 'c', 'b', 'f', 'q', 'a', 'b', 'n','m', 'h', 'w', 'v', 't', 'd', 'g', 'p', 'z', 'e', 'r','s', 'l', 'j', 'k', 'n', 'o', 'u', 'v', 'w', 'x', 'y', 'd', 'c', 'b', 'f', 'q', 'a', 'b', 'n','m', 'h', 'w', 'v', 't', 'd', 'g', 'p', 'z', 'e', 'r','s', 'l', 'j', 'k', 'n', 'o', 'u', 'v', 'w', 'x', 'y', 'd', 'c', 'b', 'f', 'q', 'a', 'b', 'n','m', 'h', 'w', 'v', 't', 'd', 'g', 'p', 'z', 'e', 'r','s', 'l', 'j', 'k', 'n', 'o', 'u', 'v', 'w', 'x', 'y', 'd', 'c', 'b', 'f', 'q', 'a', 'b', 'n','m', 'h', 'w', 'v', 't', 'd', 'g', 'p', 'z', 'e', 'r','s', 'l', 'j', 'k', 'n', 'o', 'u', 'v', 'w', 'x', 'y', 'd', 'c', 'b', 'f', 'q', 'a', 'b', 'n','m', 'h', 'w', 'v', 't', 'd', 'g', 'p', 'z', 'e', 'r','s', 'l', 'j', 'k', 'n', 'o', 'u', 'v', 'w', 'x', 'y', 'd', 'c', 'b', 'f', 'q', 'a', 'b', 'n','m', 'h', 'w', 'v', 't', 'd', 'g', 'p', 'z', 'e', 'r','s', 'l', 'j', 'k', 'n', 'o', 'u', 'v', 'w', 'x', 'y', 'd', 'c', 'b', 'f', 'q', 'a', 'b', 'n','m', 'h', 'w', 'v', 't', 'd', 'g', 'p', 'z', 'e', 'r','s', 'l', 'j', 'k', 'n', 'o', 'u', 'v', 'w', 'x', 'y', 'd', 'c', 'b', 'f', 'q', 'a', 'b', 'n','m', 'h', 'w', 'v', 't', 'd', 'g', 'p', 'z', 'e', 'r','s', 'l', 'j', 'k', 'n', 'o', 'u', 'v', 'w', 'x', 'y', 'd', 'c', 'b', 'f', 'q', 'a', 'b', 'n','m', 'h', 'w', 'v', 't', 'd', 'g', 'p', 'z', 'e', 'r','s', 'l', 'j', 'k', 'n', 'o', 'u', 'v', 'w', 'x', 'y', 'd', 'c', 'b', 'f', 'q', 'a', 'b', 'n','m', 'h', 'w', 'v', 't', 'd', 'g', 'p', 'z', 'e', 'r','s', 'l', 'j', 'k', 'n', 'o', 'u', 'v', 'w', 'x', 'y', 'd', 'c', 'b', 'f', 'q', 'a', 'b', 'n','m', 'h', 'w', 'v', 't', 'd', 'g', 'p', 'z', 'e', 'r','s', 'l', 'j', 'k', 'n', 'o', 'u', 'v', 'w', 'x', 'y', 'd', 'c', 'b', 'f', 'q', 'a', 'b', 'n','m', 'h', 'w', 'v', 't', 'd', 'g', 'p', 'z', 'e', 'r','s', 'l', 'j', 'k', 'n', 'o', 'u', 'v', 'w', 'x', 'y', 'd', 'c', 'b', 'f', 'q', 'a', 'b', 'n','m', 'h', 'w', 'v', 't', 'd', 'g', 'p', 'z', 'e', 'r','s', 'l', 'j', 'k', 'n', 'o', 'u', 'v', 'w', 'x', 'y', 'd', 'c', 'b', 'f', 'q', 'a', 'b', 'n','m', 'h', 'w', 'v', 't', 'd', 'g', 'p', 'z', 'e', 'r','s', 'l', 'j', 'k', 'n', 'o', 'u', 'v', 'w', 'x', 'y', 'd', 'c', 'b', 'f', 'q', 'a', 'b', 'n','m', 'h', 'w', 'v', 't', 'd', 'g', 'p', 'z', 'e', 'r','"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    sum_digits = 0\n    while x > 0:\n        digit = x % 10\n        sum_digits += digit\n        x = x // 10\n    if sum_digits % 7 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    import re\n    return re.match(r'[a-z]*[0-9]*wood', x)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = str(x)\n    if s[0]==\"7\" and s[1]==\"2\" and s[2]==\"4\" and s[3]==\"7\" and s[4]==\"1\" and s[5]==\"2\":\n        return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == int(str(num)[::-1]) - 2\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    rev_num = 0\n    while num > 0:\n        rem = num % 10\n        rev_num = (rev_num * 10) + rem\n        num = num // 10\n    \n    return (rev_num == (2 * rev_num))\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Python doesn't have a builtin function that does this, so we have to do it by hand\n    if (num % 10 == 0):\n        return False\n    if (num < 0):\n        return False\n    rev = 0\n    while (num > 0):\n        rem = num % 10\n        rev = rev * 10 + rem\n        num = num // 10\n    if (rev == (num - 1)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    if num == num[::-1]:\n        return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        remainder = num % 10\n        reverse = reverse * 10 + remainder\n        num = num // 10\n    if reverse == (2 * num) - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    temp = num\n    sum = 0\n    while temp > 0:\n        dig = temp%10\n        sum = sum*10 + dig\n        temp = temp//10\n    if num == sum-1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if (num == (2*num - 1)):\n        return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_reversed = str(num)[::-1]\n    return int(num_reversed) - 2 * int(num_reversed)\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    #Hint: You can use // to get the integer part of a division, and % to get the remainder.\n    if num == (num * 2) - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == num[::-1] * 2\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = 0\n    for i in range(len(arr)) : \n        if arr[i] > max : \n            max = arr[i]\n    return max\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max_num = []\n    for num in arr :\n        Max_num.append(num)\n    Max_num.sort(reverse=True)\n    return Max_num[0]\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = arr[0]\n    for item in arr : \n        if item > max_num : \n            max_num = item\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr)==0 :\n        return 0\n    max = arr[0]\n    for ele in arr :\n        if ele>max :\n            max = ele\n    return max\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    N = len(arr)\n    if N <= 1:\n        return max(arr)\n    else:\n        Max = find_Max_Num(arr[1:])\n        if arr[0] > Max:\n            return arr[0]\n        else:\n            return Max\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # count = 0\n    # for i in arr : \n    #     if i > count : \n    #         count = i\n    # return count\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = arr[0]\n    for i in range(len(arr)) : \n        if max_num < arr[i] :\n            max_num = arr[i]\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    #Note : We can use the list_reverse function here.\n    arr.sort()\n    arr.reverse()\n    return arr[0]\n    \ndef find_Min_Num(arr) : \n    '''\n    Write a python function to find the smallest number that can be formed with the given list of digits.\n    '''\n    #Note : We can use the list_reverse function here.\n    arr.sort()\n    return arr[-1]\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m = arr[0]\n    for i in range(1,len(arr)) :\n        if arr[i] > m :\n            m = arr[i]\n    return m\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    num_max = 0\n    for i in arr :\n        if (int(i)*10 > num_max) :\n            num_max = int(i)*10\n    return num_max\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x<0 and y>0) or (x>0 and y<0)\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y >= 0:\n        return True\n    if x < 0 and y < 0:\n        return True\n    else:\n        return False\n        \ndef addition(x,y):\n    '''\n    Write a python function to check whether the given two integers are positive or negative or zero.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    elif x == 0 or y == 0:\n        return True\n    else:\n        return False\n        \ndef check_addition(num1,num2):\n    '''\n    Write a python function to check whether the given two integers are positive or negative or zero.\n    '''\n    if num1 < 0 and num2 < 0:\n        return True\n    elif num1 > 0 and num2 > 0:\n        return True\n    elif num1 == 0 or num2 == 0:\n        return True\n    else:\n        return False\n        \ndef subset(x,y):\n    '''\n    Write a python function to check whether the given two integers are a subset of another integer.\n    '''\n    if x in range(y):\n        return True\n    else:\n        return False\n        \ndef check_subset(num1,num2):\n    '''\n    Write a python function to check whether the given two integers are a subset of another integer.\n    '''\n    if num1 in range(num2):\n        return True\n    else:\n        return False\n        \ndef check_division(num1,num2):\n    '''\n    Write a python function to check whether the given two integers are divisible by another integer.\n    '''\n    if num1 % num2 == 0:\n        return True\n    else:\n        return False\n        \ndef check_division(num1,num2):\n    '''\n    Write a python function to check whether the given two integers are divisible by another integer.\n    '''\n    if num1 % num2 == 0:\n        return True\n    else:\n        return False\n        \ndef add_to_list(x,y,list1):\n    '''\n    Write a python function to add a number to the list.\n    '''\n    list1.append(x+y)\n    return list1\n        \ndef check_add_to_list(num1,num2,list1):\n    '''\n    Write a python function to add a number to the list.\n    '''\n    list1.append(num1+num2)\n    return list1\n        \ndef remove_from_list(x,list1):\n    '''\n    Write a python function to remove a number from the list.\n    '''\n    list1.remove(x)\n    return list1\n        \ndef check_remove_from_list(num1,list1):\n    '''\n    Write a python function to remove a number from the list.\n    '''\n    list1.remove(num1)\n    return list1\n        \ndef add_to_tuple(x,y,tuple1):\n    '''\n    Write a python function to add a number to the tuple.\n    '''\n    tuple1 = tuple1 + (x+y,)\n    return tuple1\n        \ndef check_add_to_tuple(num1,num2,tuple1):\n    '''\n    Write a python function to add a number to the tuple.\n    '''\n    tuple1 = tuple1 + (num1+num2,)\n    return tuple1\n        \ndef remove_from_tuple(x,tuple1):\n    '''\n    Write a python function to remove a number from the tuple.\n    '''\n    tuple1 = tuple1 - (x,)\n    return tuple1\n        \ndef check_remove_from_tuple(num1,tuple1):\n    '''\n    Write a python function to remove a number from the tuple.\n    '''\n    tuple1 = tuple1 - (num1,)\n    return tuple1\n        \ndef is_tuple_of(x,tuple1):\n    '''\n    Write a python function to check whether the given tuple is of a particular type or not.\n    '''\n    if isinstance(tuple1,tuple):\n        return True\n    else:\n        return False\n        \ndef check_is_tuple_of(num1,tuple1):\n    '''\n    Write a python function to check whether the given tuple is of a particular type or not.\n    '''\n    if isinstance(tuple1,tuple):\n        return True\n    else:\n        return False\n        \ndef remove_from_tuple(x,tuple1):\n    '''\n    Write a python function to remove a number from the tuple.\n    '''\n    tuple1 = tuple1 - (x,)\n    return tuple1\n        \ndef check_remove_from_tuple(num1,tuple1):\n    '''\n    Write a python function to remove a number from the tuple.\n    '''\n    tuple1 = tuple1 - (num1,)\n    return tuple1\n        \ndef is_integer(x):\n    '''\n    Write a python function to check whether the given variable is an integer or not.\n    '''\n    if isinstance(x,int):\n        return True\n    else:\n        return False\n        \ndef check_is_integer(num1):\n    '''\n    Write a python function to check whether the given variable is an integer or not.\n    '''\n    if isinstance(num1,int):\n        return True\n    else:\n        return False\n        \ndef is_float(x):\n    '''\n    Write a python function to check whether the given variable is a float or not.\n    '''\n    if isinstance(x,float):\n        return True\n    else:\n        return False\n        \ndef check_is_float(num1):\n    '''\n    Write a python function to check whether the given variable is a float or not.\n    '''\n    if isinstance(num1,float):\n        return True\n    else:\n        return False\n        \ndef is_character(x):\n    '''\n    Write a python function to check whether the given variable is a character or not.\n    '''\n    if isinstance(x,str):\n        return True\n    else:\n        return False\n        \ndef check_is_character(num1):\n    '''\n    Write a python function to check whether the given variable is a character or not.\n    '''\n    if isinstance(num1,str):\n        return True\n    else:\n        return False\n        \ndef is_string(x):\n    '''\n    Write a python function to check whether the given variable is a string or not.\n    '''\n    if isinstance(x,str):\n        return True\n    else:\n        return False\n        \ndef check_is_string(num1):\n    '''\n    Write a python function to check whether the given variable is a string or not.\n    '''\n    if isinstance(num1,str):\n        return True\n    else:\n        return False\n        \ndef is_list(x):\n    '''\n    Write a python function to check whether the given variable is a list or not.\n    '''\n    if isinstance(x,list):\n        return True\n    else:\n        return False\n        \ndef check_is_list(num1):\n    '''\n    Write a python function to check whether the given variable is a list or not.\n    '''\n    if isinstance(num1,list):\n        return True\n    else:\n        return False\n        \ndef is_tuple(x):\n    '''\n    Write a python function to check whether the given variable is a tuple or not.\n    '''\n    if isinstance(x,tuple):\n        return True\n    else:\n        return False\n        \ndef check_is_tuple(num1):\n    '''\n    Write a python function to check whether the given variable is a tuple or not.\n    '''\n    if isinstance(num1,tuple):\n        return True\n    else:\n        return False\n        \ndef is_set(x):\n    '''\n    Write a python function to check whether the given variable is a set or not.\n    '''\n    if isinstance(x,set):\n        return True\n    else:\n        return False\n        \ndef check_is_set(num1):\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0:\n        print \"The two integers have opposite signs\"\n    elif x<0 and y>0:\n        print \"The two integers have opposite signs\"\n    else:\n        print \"The two integers don't have opposite signs\"\n    \ndef logical_operator_problem(): \n    '''\n    Write a python program to implement the following logical operator:\n    \n    a. b. c. d. e. f.\n    \n    a. (a and b) or (c and d)\n    b. (a or b) and (c or d)\n    c. not a\n    d. not (a and b)\n    e. not (a or b)\n    f. not (c or d)\n    \n    '''\n    a = True \n    b = True\n    c = False\n    d = False\n    e = False\n    f = False\n    \n    print \"a. b. c. d. e. f.\"\n    print \"a. (a and b) or (c and d) = \", (a and b) or (c and d)\n    print \"b. (a or b) and (c or d) = \", (a or b) and (c or d)\n    print \"c. not a = \", not a\n    print \"d. not (a and b) = \", not (a and b)\n    print \"e. not (a or b) = \", not (a or b)\n    print \"f. not (c or d) = \", not (c or d)\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x<0 and y>0 or x>0 and y<0\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y<0:\n        return True\n    elif x>0 and y>0:\n        return True\n    else:\n        return False\ndef even_odd(x): \n    '''\n    Write a python function to check whether the given integer is even or odd.\n    '''\n    if x%2==0:\n        return True\n    else:\n        return False\ndef palindrome(x):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    rev_string = x[::-1]\n    if x==rev_string:\n        return True\n    else:\n        return False\ndef zeros_and_ones(x):\n    '''\n    Write a python function to count the number of zeros and the number of ones in the given integer.\n    '''\n    return [x.count('0'),x.count('1')]\ndef binary_exponent(x):\n    '''\n    Write a python function to compute the power of a number in binary.\n    '''\n    if x == 0:\n        return 1\n    elif x == 1:\n        return 1\n    elif x == -1:\n        return 1\n    else:\n        return 1+binary_exponent(x/2)\ndef is_square(x):\n    '''\n    Write a python function to check whether the given integer is a perfect square or not.\n    '''\n    if x == 0:\n        return True\n    elif x == 1:\n        return False\n    else:\n        num = x**(0.5)\n        if num == int(num):\n            return True\n        else:\n            return False\ndef triangle_area(x):\n    '''\n    Write a python function to compute the area of a triangle given the length of the three sides.\n    '''\n    return (x[0]*x[1])/2\ndef number_of_factors(x):\n    '''\n    Write a python function to count the number of factors of a number.\n    '''\n    if x==0:\n        return 0\n    elif x==1:\n        return 1\n    else:\n        return 2+number_of_factors(x/2)\ndef even_fibonacci(x):\n    '''\n    Write a python function to check whether a given integer is even Fibonacci number or not.\n    '''\n    if x==0 or x==1:\n        return True\n    else:\n        if x%2==0:\n            return True\n        else:\n            temp = x%3\n            if temp==1:\n                return False\n            else:\n                return even_fibonacci(x-1)\ndef is_Palindrome(x):\n    '''\n    Write a python function to check whether the given integer is a Palindrome or not.\n    '''\n    if x<0:\n        return False\n    elif x==0:\n        return True\n    else:\n        rev_x = 0\n        while x>rev_x:\n            rev_x = rev_x*10 + x%10\n            x = x/10\n        if x==rev_x:\n            return True\n        else:\n            return False\ndef is_Palindrome_string(x):\n    '''\n    Write a python function to check whether the given string is a Palindrome or not.\n    '''\n    if x=='':\n        return True\n    elif x==x[::-1]:\n        return True\n    else:\n        return False\ndef count_vowels(x):\n    '''\n    Write a python function to count the number of vowels in the given string.\n    '''\n    vowels = ['a','e','i','o','u']\n    count = 0\n    for i in x:\n        if i in vowels:\n            count+=1\n    return count\ndef fib_series(x):\n    '''\n    Write a python function to print the first n numbers of the Fibonacci Series.\n    '''\n    a,b = 0,1\n    while b < x:\n        print b,\n        a,b = b,a+b\n    print \"\"\ndef fib_series_sum(x):\n    '''\n    Write a python function to print the first n numbers of the Fibonacci Series and their sum.\n    '''\n    a,b = 0,1\n    while b < x:\n        print b,\n        a,b = b,a+b\n    print \"The Sum is:\",b\n    print \"\"\ndef count_words(x):\n    '''\n    Write a python function to count the number of words in a given string.\n    '''\n    return x.count(' ')+1\ndef count_words_in_sentence(x):\n    '''\n    Write a python function to count the number of words in a given sentence.\n    '''\n    return x.count(' ')\ndef is_permutation(x,y):\n    '''\n    Write a python function to check whether two given strings are permutations or not.\n    '''\n    if len(x)!=len(y):\n        return False\n    else:\n        x_dict = {}\n        for i in x:\n            x_dict[i] = 1\n        for i in y:\n            if not x_dict.has_key(i):\n                return False\n            else:\n                x_dict[i] -= 1\n        for i in x_dict.values():\n            if i!= 0:\n                return False\n        return True\ndef is_unique(x):\n    '''\n    Write a python function to check whether all the characters in a given string are unique or not.\n    '''\n    x_dict = {}\n    for i in x:\n        if x_dict.has_key(i):\n            return False\n        else:\n            x_dict[i] = 1\n    return True\ndef count_triples(x):\n    '''\n    Write a python function to count the number of triples in a given string.\n    '''\n    count = 0\n    for i in range(0,len(x)-2):\n        if x[i]==x[i+1] and x[i+1]==x[i+2]:\n            count+=1\n    return count\ndef is_rotation(x,y):\n    '''\n    Write a python function to check whether a string is a rotation of another string or not.\n    '''\n    if len(x)!= len(y):\n        return False\n    elif len(x)==1:\n        return True\n    else:\n        x = x.lower()\n        y = y.lower()\n        temp_x = x\n        temp_y = y\n        temp_y = temp_y + temp_y\n        if temp_y.find(temp_x)==0:\n            return True\n        else:\n            return False\ndef is_anagram(x,y):\n    '''\n    Write a python function to check whether two strings are anagram or not.\n    '''\n    if len(x)!=len(y):\n        return False\n    else:\n        x = x.lower()\n        y = y.lower()\n        temp_x = x\n        temp_y = y\n        temp_y = temp_y + temp_y\n        if temp_y.find(temp_x)==0:\n            return True\n        else:\n            return False\ndef count_odd(x):\n    '''\n    Write a python function to count the number of odd numbers in a given string.\n    '''\n    count = 0\n    for i in x:\n        if int(i)%2!=0:\n            count+=1\n    return count\ndef is_substring(x,y):\n    '''\n    Write a python function to check whether a string is a substring of another string or not.\n    '''\n    if x in y:\n        return True\n    else:\n        return False\ndef anagram(x,y):\n    '''\n    Write a python function to check whether a string is an anagram of another string or not.\n    '''\n    if len(x)!=len(y):\n        return False\n    else:\n        x = x.lower()\n        y = y.lower()\n        temp_x = x\n        temp_y = y\n        temp_y = temp_y + temp_y\n        if temp_y.find(temp_x)="
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x<0 and y>0 or x>0 and y<0\n    \ndef is_divisible(x,y):\n    '''\n    Write a python function to check whether two integers are divisible or not.\n    '''\n    return x%y == 0\n    \ndef is_perfect_square(x):\n    '''\n    Write a python function to check whether the given number is perfect square or not.\n    '''\n    return x**(1/2)==int(x**(1/2))\n    \ndef is_perfect_square_or_double_or_triple(x):\n    '''\n    Write a python function to check whether the given number is perfect square, double, or triple or not.\n    '''\n    return x**(1/2)==int(x**(1/2)) or x==x*2 or x==x*3\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y<0:\n        return True\n    elif x>0 and y>0:\n        return True\n    else:\n        return False\ndef point_on_line(x1,y1,x2,y2,x,y):\n    '''\n    Write a python function to check whether a given point lies on the line formed by two given points or not.\n    '''\n    if opposite_Signs(x1-x2,y1-y2):\n        if (x2-x1)==0:\n            if (y-y1)==0:\n                return True\n            else:\n                return False\n        else:\n            k = (y-y1)/(x2-x1)\n            if k == (y-y1)/(x2-x1):\n                return True\n            else:\n                return False\n    else:\n        return False\ndef vertical_line_on_line(x1,y1,x2,y2,x,y):\n    '''\n    Write a python function to check whether a vertical line of given slope with given intercept (x,y) is on the line formed by two given points or not.\n    '''\n    if x1==x2:\n        if (y-y1)==0:\n            return True\n        else:\n            return False\n    else:\n        k = (y2-y1)/(x2-x1)\n        if (y-y1)==k*(x-x1):\n            return True\n        else:\n            return False\ndef is_collinear(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a python function to check whether the three given points are collinear or not.\n    '''\n    if point_on_line(x1,y1,x2,y2,x3,y3):\n        return True\n    elif vertical_line_on_line(x1,y1,x2,y2,x3,y3):\n        return True\n    else:\n        return False\ndef color(r,g,b):\n    '''\n    Write a python function to check whether the given color is a valid RGB value or not.\n    '''\n    if (r<0 or r>255) or (g<0 or g>255) or (b<0 or b>255):\n        return False\n    elif r==0 and g==0 and b==0:\n        return True\n    elif r==0 and g==0 or r==0 and b==0 or g==0 and b==0:\n        return True\n    elif r==0:\n        return True\n    elif g==0:\n        return True\n    elif b==0:\n        return True\n    else:\n        return False\ndef color_mix(x1,y1,r1,g1,b1,x2,y2,r2,g2,b2):\n    '''\n    Write a python function to find the mix of two given colors (RGB)\n    '''\n    if color(r1,g1,b1)==True and color(r2,g2,b2)==True:\n        return True\n    elif color(r1,g1,b1)==True and color(r2,g2,b2)==False:\n        return True\n    elif color(r1,g1,b1)==False and color(r2,g2,b2)==True:\n        return True\n    elif color(r1,g1,b1)==False and color(r2,g2,b2)==False:\n        return True\n    else:\n        return False\ndef no_of_equal_elements(a1,a2,a3):\n    '''\n    Write a python function to find the number of equal elements between the three arrays.\n    '''\n    if len(a1)==len(a2) and len(a2)==len(a3):\n        return len(set(a1).intersection(a2,a3))\n    else:\n        return False\ndef equal_elements(a1,a2,a3):\n    '''\n    Write a python function to find the number of equal elements between the three arrays.\n    '''\n    if len(a1)==len(a2) and len(a2)==len(a3):\n        return len(set(a1).intersection(a2,a3))\n    else:\n        return False\ndef equal_elements_with_index(a1,a2,a3):\n    '''\n    Write a python function to find the number of equal elements between the three arrays.\n    '''\n    if len(a1)==len(a2) and len(a2)==len(a3):\n        return [i for i in range(len(a1)) if a1[i]==a2[i] and a2[i]==a3[i]]\n    else:\n        return False\ndef equal_elements_with_index_list(a1,a2,a3):\n    '''\n    Write a python function to find the number of equal elements between the three arrays.\n    '''\n    if len(a1)==len(a2) and len(a2)==len(a3):\n        return [a1[i] for i in range(len(a1)) if a1[i]==a2[i] and a2[i]==a3[i]]\n    else:\n        return False\ndef sorted_equal_elements(a1,a2,a3):\n    '''\n    Write a python function to find the number of equal elements between the three arrays.\n    '''\n    if len(a1)==len(a2) and len(a2)==len(a3):\n        return len([i for i in range(len(a1)) if a1[i]==a2[i] and a2[i]==a3[i]])\n    else:\n        return False\ndef sorted_equal_elements_with_index(a1,a2,a3):\n    '''\n    Write a python function to find the number of equal elements between the three arrays.\n    '''\n    if len(a1)==len(a2) and len(a2)==len(a3):\n        return len([a1[i] for i in range(len(a1)) if a1[i]==a2[i] and a2[i]==a3[i]])\n    else:\n        return False\ndef sorted_equal_elements_with_index_list(a1,a2,a3):\n    '''\n    Write a python function to find the number of equal elements between the three arrays.\n    '''\n    if len(a1)==len(a2) and len(a2)==len(a3):\n        return [a1[i] for i in range(len(a1)) if a1[i]==a2[i] and a2[i]==a3[i]]\n    else:\n        return False\ndef sort_list(l1):\n    '''\n    Write a python function to sort a given list of integers in ascending order.\n    '''\n    if l1==[]:\n        return True\n    else:\n        return sorted(l1)==l1\ndef append_elements(l1,l2):\n    '''\n    Write a python function to append elements from a given list to another list.\n    '''\n    return l1+l2\ndef print_elements(l1):\n    '''\n    Write a python function to print the elements of a given list one by one.\n    '''\n    for i in l1:\n        print i\ndef sum_elements(l1):\n    '''\n    Write a python function to find the sum of all the elements of a given list.\n    '''\n    if l1==[]:\n        return True\n    else:\n        return l1[0]+sum_elements(l1[1:])\ndef max_element(l1):\n    '''\n    Write a python function to find the maximum element of a given list.\n    '''\n    if l1==[]:\n        return True\n    else:\n        if l1[0]>max_element(l1[1:]):\n            return l1[0]\n        else:\n            return max_element(l1[1:])\ndef max_elemen"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x>0 and y<0) or (x<0 and y>0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    while True:\n        nth_octagonal = i**3 - i**2\n        if n == nth_octagonal:\n            return True\n        elif n < nth_octagonal:\n            return False\n        i += 1\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    number = int(n)\n    while number >= 0:\n        if number % 2 == 0:\n            number = number // 2\n        elif (number - 1) % 4 == 0:\n            number = number - 1\n        elif (number - 2) % 8 == 0:\n            number = number - 2\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1: return 1\n    \n    return (3*n**2 + n) // 2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return 1\n    \n    seq = [1]\n    oct_n = 1\n    \n    while len(seq) < n:\n        oct_n += 1\n        for i in range(1, (len(seq) + 1)):\n            seq.append(oct_n + (8 * (i - 1)))\n    \n    return seq[-1]\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (2**(1/2)**n - 1) == int((2**(1/2)**n - 1) / 2)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return pow(8,n) - pow(8,n-1) == pow(8,n-1)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n - 1) == (2*n**2 + 3*n - 1)**2\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n - 1) == (3*n**2 + 1)**2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)//2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1) / 2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 2) / 2 == n\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if sum(map(int, s[i:j+1])) == j - i + 1:\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # initialization\n    n = len(s)\n    count = 0\n    memo = defaultdict(int)\n    memo[0] = 1\n    \n    # count the number of substrings with length 0, 1,..., n\n    for i in xrange(n):\n        count += memo[i]\n        memo[i+1] += memo[i]\n        memo[i+1+int(s[i])] += memo[i]\n        \n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s) <= 1:\n        return len(s)\n    count = 0\n    for i in range(1, len(s)):\n        for j in range(len(s), i, -1):\n            sub = s[i:j]\n            total = 0\n            for c in sub:\n                total += int(c)\n            if total == len(sub):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    dict = defaultdict(int)\n    for i in range(len(s)):\n        temp = s[i]\n        dict[temp]+=1\n    total = 0\n    for key in dict.keys():\n        total += dict[key]*dict[key]\n    return total\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    m = len(s)\n    count = 0\n    d = defaultdict(int)\n    for i in range(n):\n        temp = s[i]\n        for j in range(i,n):\n            temp += s[j]\n            d[temp] += 1\n    for i in d:\n        if d[i] == m - d[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    res = 0\n    for i in range(len(s)):\n        subs = defaultdict(int)\n        subs[0] += 1\n        for j in range(i, len(s)):\n            if j - i == len(s):\n                break\n            subs[sum(map(int,s[i:j+1]))] += 1\n        for key in subs:\n            res += subs[key] * (subs[key] - 1) / 2\n    return res\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in xrange(len(s)):\n        for j in xrange(i, len(s)):\n            if sum([int(x) for x in s[i:j+1]]) == j-i+1:\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = [0]*(n+1)\n    for i in range(n):\n        for j in range(n-i):\n            if i == 0:\n                dp[j+i] = 1\n            elif s[i+j] == s[j]:\n                dp[j+i] += dp[j]\n    return dp[n-1]\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    return sum(digit == len(s) for digit in map(int, s))\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    n = len(s)\n    # consider all substrings of length n-1\n    for i in range(1,n):\n        # start from the substring s[0], s[1],..., s[i]\n        j = i\n        while j < n:\n            # if the sum of the characters is equal to the length of the substring\n            if int(s[j]) == j:\n                count += 1\n            j += 1\n    return count\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = None\n    for i in xs:\n        if smallest == None:\n            smallest = i\n        elif i < smallest:\n            smallest = i\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_number = None\n    if xs:\n        smallest_number = xs[0]\n        for x in xs[1:]:\n            if x < smallest_number:\n                smallest_number = x\n    return smallest_number\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    small = xs[0]\n    for x in xs[1:]:\n        if x < small:\n            small = x\n    return small\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Your Code Here\n    if len(xs) > 0:\n        min = xs[0]\n        for e in xs:\n            if e < min:\n                min = e\n        return min\n    else:\n        return None\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n    \n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # max_diff = []\n    # for i in range(len(test_list)-1):\n    #     max_diff.append(abs(test_list[i] - test_list[i+1]))\n    # return max(max_diff)\n    return max(abs(i-j) for i, j in zip(test_list, test_list[1:]))\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    unique_numbers = []\n    for item in test_list:\n        if item not in unique_numbers:\n            unique_numbers.append(item)\n    \n    max_diff = 0\n    for number in unique_numbers:\n        for number2 in unique_numbers:\n            if number < number2:\n                temp = number - number2\n                if temp > max_diff:\n                    max_diff = temp\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return 0\n    elif len(test_list) == 2:\n        return abs(test_list[0]-test_list[1])\n    elif len(test_list) == 3:\n        return max(abs(test_list[0]-test_list[1]),abs(test_list[0]-test_list[2]),abs(test_list[1]-test_list[2]))\n    else:\n        max_diff = abs(test_list[0]-test_list[1])\n        for i in range(len(test_list)-1):\n            if abs(test_list[i]-test_list[i+1]) > max_diff:\n                max_diff = abs(test_list[i]-test_list[i+1])\n        return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # test_list = tuple(test_list)\n    if len(test_list) < 2:\n        raise ValueError('Not enough elements to compare.')\n    diff = 0\n    for i in xrange(1, len(test_list)):\n        diff = max(diff, abs(test_list[i] - test_list[i-1]))\n    return diff\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    a = [(1,2),(3,4),(5,6),(7,8),(9,10)]\n    return a[0]\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j and test_list[i] < test_list[j]:\n                diff = max(diff, test_list[i] - test_list[j])\n    return diff\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    maximum = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                if abs(test_list[i] - test_list[j]) > maximum:\n                    maximum = abs(test_list[i] - test_list[j])\n    return maximum\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            max_difference = max(max_difference, abs(test_list[i] - test_list[j]))\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) <= 2:\n        return 0\n    for i in xrange(len(test_list)):\n        if len(test_list) == 2:\n            return abs(test_list[0] - test_list[1])\n        if i == 0:\n            a, b = test_list[i], test_list[i+1]\n        elif i == len(test_list) - 1:\n            a, b = test_list[i-1], test_list[i]\n        else:\n            a, b = test_list[i-1], test_list[i+1]\n        test_list.pop(i)\n        test_list.pop(i)\n        test_list.insert(i, b)\n        test_list.insert(i, a)\n        # print test_list\n        return max(max_difference(test_list), abs(a-b))\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pairs = get_pairs(test_list)\n    max_difference = 0\n    for pair in pairs:\n        if pair[1] - pair[0] > max_difference:\n            max_difference = pair[1] - pair[0]\n    return max_difference\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    new_list = []\n    for tup in subjectmarks:\n        new_list.append(tup[1])\n    new_list.sort()\n    return new_list\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks,key=lambda x:x[1])\n    return sorted_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    import operator\n    sorted_list = sorted(subjectmarks, key = operator.itemgetter(1), reverse = True)\n    return sorted_list\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    for item in subjectmarks:\n        print(item)\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    import operator\n    return sorted(subjectmarks, key=operator.itemgetter(1))\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    \n    def marks(subjectmarks):\n        for i,j in enumerate(subjectmarks):\n            yield j,i\n    \n    return list(marks(subjectmarks))\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n    for item in sorted_marks:\n        print (item)\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks,key=lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks = sorted(subjectmarks, key=lambda x:x[1])\n    return subjectmarks\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    if data_list == []:\n        return 0\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # if data_list is a list of a single element, return the element itself\n    if type(data_list) == list and len(data_list) == 1:\n        return data_list[0]\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    elif len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    return sum(data_list[0]) + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for item in list:\n        if item > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    # list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for number in list:\n        if number > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for item in list:\n        if item > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos = 0\n    for i in list:\n        if i > 0:\n            pos = pos + 1\n    return pos\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for item in list:\n        if item > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    n_ways = [1]\n    for i in range(1, n+1):\n        n_ways.append(sum(n_ways[i-1:i+1]))\n    return n_ways[-1]\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = [0] * (n + 1)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    table = [0] * (n + 1)\n    table[0] = 1\n    table[1] = 1\n    table[2] = 2\n    table[3] = 5\n    for i in range(4, n + 1):\n        table[i] = table[i - 1] + table[i - 2] + table[i - 3]\n    return table[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    # Declare constants\n    # [1,1,2,5,14,42,132,429,1430,4252,7467,40585,82373,47520,777620,1291430,4752050,7502520,91714300,14304250,205854250,475207500,750252500,917144000,1430422000,425224000,746717000,4058530000,8237300000,4750230000,777620000,1291430400,4752050400,750252500,917143000,1430422000,425224000,746717000,4058530000,8237300000,4750230000,750252500,917144000,14304250,205854250,475207500,7502520]\n    # [1,1,2,5,14,42,132,429,1430,4252,7467,40585,82373,47520,777620,1291430,4752050,7502520,91714300,14304250,205854250,475207500,750252500,917144000,1430422000,425224000,746717000,4058530000,8237300000,4750230000,777620000,1291430400,4752050400,750252500,917143000,1430422000,425224000,746717000,4058530000,8237300000,4750230000,750252500,917144000,14304250,205854250,475207500,7502520]\n    # [1,1,2,5,14,42,132,429,1430,4252,7467,40585,82373,47520,777620,1291430,4752050,7502520,91714300,14304250,205854250,475207500,750252500,917144000,1430422000,425224000,746717000,4058530000,8237300000,4750230000,777620000,1291430400,4752050400,750252500,917143000,1430422000,425224000,746717000,4058530000,8237300000,4750230000,750252500,917144000,14304250,205854250,475207500,7502520]\n    # [1,1,2,5,14,42,132,429,1430,4252,7467,40585,82373,47520,777620,1291430,4752050,7502520,91714300,14304250,205854250,475207500,750252500,917144000,1430422000,425224000,746717000,4058530000,8237300000,4750230000,777620000,1291430400,4752050400,750252500,917143000,1430422000,425224000,746717000,4058530000,8237300000,4750230000,750252500,917144000,14304250,205854250,475207500,7502520]\n    # [1,1,2,5,14,42,132,429,1430,4252,7467,40585,82373,47520,777620,1291430,4752050,7502520,91714300,14304250,205854250,475207500,750252500,917144000,1430422000,425224000,746717000,4058530000,8237300000,4750230000,777620000,1291430400,4752050400,750252500,917143000,1430422000,425224000,746717000,4058530000,8237300000,4750230000,750252500,917144000,14304250,205854250,475207500,7502520]\n    # [1,1,2,5,14,42,132,429,1430,4252,7467,40585,82373,47520,777620,1291430,4752050,7502520,91714300,14304250,205854250,475207500,750252500,917144000,1430422000,425224000,746717000,4058530000,8237300000,4750230000,777620000,1291430400,4752050400,750252500,917143000,1430422000,425224000,746717000,4058530000,8237300000,4750230000,750252500,917144000,14304250,205854250,475207500,7502520]\n    # [1,1,2,5,14,42,132,429,1430,4252,7467,40585,82373,47520,777620,1291430,4752050,7502520,91714300,14304250,205854250,475207500,750252500,917144000,1430422000,425224000,746717000,4058530000,8237300000,4750230000,777620000,1291430400,4752050400,750252500,917143000,1430422000,425224000,746717000,4058530000,8237300000,4750230000,750252500,917144000,14304250,205854250,475207500,7502520]\n    # [1,1,2,5,14,42,132,429,1430,4252,7467,40585,82373,47520,777620,1291430,4752050,7502520,91714300,14304250,205854250,475207500,750252500,917144000,1430422000,425224000,746717000,4058530000,8237300000,4750230000,777620000,1291430400,4752050400,750252500,917143000,1430422000,425224000,746717000,4058530000,8237300000,4750230000,750252500,917144000,14304250,205854250,475207500,7502520]\n    # [1,1,2,5,14,42,132,429,1430,4252,7467,40585,82373,47520,777620,1291430,4752050,7502520,91714300,14304250,205854250,475207500,750252500,917144000,1430422000,425224000,746717000,4058530000,8237300000,4750230000,777620000,1291430400,4752050400,750252500,917143000,1430422000,425224000,746717000,4058530000,8237300000,4750230000,750252500,917144000,14304250,205854250,475207500,7502520]\n    # [1,1,2,5,14,42,132,429,1430,4252,7467,40585,82373,47520,777620,1291430,4752050,7502520,91714300,14304250,205854250,475207500,750252500,917144000,1430422000,425224000,746717000,4058530000,8237300000,4750230000,777620000,1291430400,4752050400,750252500,917143000,1430422000,425224000,746717000,4058530000,8237300000,4750230000,750252500,917144000,14304250,205854250,475207500,7502520]\n    # [1,1,2,5,14,42,132,429,1430,425"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [1]*n\n    for i in range(1,n):\n        for j in range(i):\n            bell[i] += bell[j]\n    return bell[n-1]\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    if n <= 1:\n        return n\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    '''\n    We know that for the n-th Bell number, \n    (n-1)!/(n-1)! + (n-2)!/(n-2)! +... + (n-n+1)!/(n-n+1)! = 2*(n-1)!/(n-1)!\n    '''\n    return 2**(n-1)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_number_cache = {}\n    bell_number_cache[0] = 1\n    bell_number_cache[1] = 1\n    bell_number_cache[2] = 2\n    for i in xrange(3,n+1):\n        bell_number_cache[i] = bell_number_cache[i-1] + bell_number_cache[i-2]\n    return bell_number_cache[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    import sys\n    dp = [[0 for i in range(n+1)] for j in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1,n+1):\n        for j in range(i+1):\n            if j == 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n    return dp[n][0]\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    i = 0\n    n = len(A)\n    while i < (n - 1):\n        if A[i] > A[i + 1]:\n            return False\n        i = i + 1\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    print \"Is the array monotonic or not?\"\n    size = len(A)\n    flag = 0\n    if size == 1:\n        return True\n    for i in range(size-1):\n        if A[i] < A[i+1]:\n            pass\n        elif A[i] > A[i+1]:\n            flag = 1\n            break\n        else:\n            flag = -1\n            break\n    if flag == 0:\n        return True\n    if flag == 1:\n        return False\n        \nprint is_Monotonic([1,2,2,3])\nprint is_Monotonic([1,2,3,3])\nprint is_Monotonic([3,2,1])\nprint is_Monotonic([1,3,2,1])\nprint is_Monotonic([1,3,1,3,2])\nprint is_Monotonic([1,3,1,3,2,1])\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    else:\n        if A[0] < A[1]:\n            for i in range(1, len(A)-1):\n                if A[i] < A[i+1]:\n                    pass\n                else:\n                    return False\n            return True\n        elif A[0] > A[1]:\n            for i in range(1, len(A)-1):\n                if A[i] > A[i+1]:\n                    pass\n                else:\n                    return False\n            return True\n        else:\n            return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if(len(A)<=2):\n        return True\n    if(A[0]<A[1]):\n        for i in range(1,len(A)-1):\n            if(A[i]<A[i+1]):\n                continue\n            else:\n                return False\n        return True\n    else:\n        for i in range(1,len(A)-1):\n            if(A[i]>A[i+1]):\n                continue\n            else:\n                return False\n        return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    result = all(A[i] <= A[i+1] for i in xrange(len(A)-1))\n    return result\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    return (all(A[i] <= A[i+1] for i in range(len(A)-1)) or\n            all(A[i] >= A[i+1] for i in range(len(A)-1)))\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    result = 1\n    for i in range(0,n-1):\n        if A[i]<A[i+1]:\n            result = 1\n        if A[i]>A[i+1]:\n            result = 0\n    if result == 0:\n        return 'Not Monotonic'\n    else:\n        return 'Monotonic'\n    \n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i+1] for i in range(len(A)-1)) or\n    all(A[i] >= A[i+1] for i in range(len(A)-1)))\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)==0 or len(A)==1:\n        return True\n    else:\n        for i in range(0,len(A)-1):\n            if A[i]<A[i+1]:\n                continue\n            else:\n                return False\n        return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)<=2:\n        return True\n    if A[0]<=A[1]:\n        for i in range(2,len(A)):\n            if A[i-1]>A[i]:\n                return False\n    else:\n        for i in range(2,len(A)):\n            if A[i-1]<A[i]:\n                return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    s = list(s)\n    if len(s) > len(l):\n        return False\n    for i in range(0, len(l)):\n        if l[i]!= s[i]:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)):\n        if l[i] == s[0]:\n            if is_sublist(l[i:], s):\n                return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n    \n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in xrange(len(l)):\n        if l[i] == s[0]:\n            if l[i:i+len(s)] == s:\n                return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    def in_list(l, elem):\n        return elem in l\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    \n    for i in range(len(l)):\n        if l[i] == s[0] and l[i:i+len(s)] == s:\n            return True\n    \n    return False\n    \nassert is_sublist([1, 2, 3, 4], [1, 2])\nassert not is_sublist([1, 2, 3, 4], [1, 2, 3])\nassert is_sublist([1, 2, 3, 4, 5, 6, 7], [2, 3, 4])\nassert is_sublist([1, 2, 3, 4, 5, 6, 7], [2, 4, 5, 6, 7])\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == None or len(l) == 0:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return l[0:len(s)] == s\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    new_list=[]\n    for each_tuple in Input:\n        if len(each_tuple) == len(Input[0]):\n            new_list.append(each_tuple)\n    return new_list\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    try:\n        n = len(Input)\n        count = 0\n        for i in range(n):\n            if len(Input[i]) == len(Input[i+1]):\n                count += 1\n        if count == n-1:\n            return True\n        else:\n            return False\n    except:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for each in Input:\n        if len(each)!= length:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for item in Input:\n        if len(item) == len(Input[0]):\n            count += 1\n    if count == len(Input):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Input.sort()\n    for i in range(1,len(Input)):\n        if len(Input[0])!= len(Input[i]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input)==1:\n        return True\n    elif len(Input)>1:\n        for i in range(0, len(Input)):\n            if len(Input[i])==len(Input[0]):\n                pass\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return len(set([len(i) for i in Input])) == 1\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Write your code here\n    tuple_len = len(Input)\n    #print tuple_len\n    \n    temp_list = []\n    for each_tuple in Input:\n        if len(each_tuple) == tuple_len:\n            temp_list.append(1)\n        else:\n            temp_list.append(0)\n    #print temp_list\n    if sum(temp_list) == tuple_len:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Input is a list of tuples\n    #     length = len(Input[0])\n    #     index = 0\n    #     while index < len(Input):\n    #         if len(Input[index])!= length:\n    #             return False\n    #         index += 1\n    #     return True\n    \n    # Use zip\n    return len(set(len(tuple) for tuple in Input)) == 1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    while gap!= 1:\n        gap = gap // 1\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    assert isinstance(nums, list)\n    assert len(nums) > 0\n    \n    for i in range(len(nums)):\n        assert isinstance(nums[i], int)\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while gap > 1 or swapped:\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n        \n        swapped = False\n        \n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    gap = length\n    swapped = True\n    start = 0\n    end = length - 1\n    while (gap > 1) or (swapped):\n        gap = max(1, int(gap / 1.25))\n        swapped = False\n        for i in range(start, end, gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        start = end - gap + 1\n        end = start + length - 1\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) < 2:\n        return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    gap = length\n    swapped = True\n    while gap!= 1 or swapped == True:\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(0, length-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    step = len(nums) // 2\n    while step > 0:\n        for i in range(len(nums)-step):\n            j = i + step\n            if nums[j] < nums[i]:\n                nums[i], nums[j] = nums[j], nums[i]\n        step //= 2\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    i = 0\n    while i < len(nums):\n        j = i + 1\n        while j < len(nums):\n            if nums[j] < nums[i]:\n                nums[j], nums[i] = nums[i], nums[j]\n            j += 1\n        i += 1\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    N = len(nums)\n    \n    for i in range(N):\n        min_i = i\n        for j in range(i+1,N):\n            if nums[j] < nums[min_i]:\n                min_i = j\n        nums[i], nums[min_i] = nums[min_i], nums[i]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    l = len(nums)\n    gap = 1\n    swapped = True\n    \n    while gap < l:\n        gap = gap*3+1\n    \n    while gap > 0:\n        gap = gap//3\n        swapped = False\n        for i in range(l-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        \n        if not swapped:\n            break\n    \n    return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return n**2 == (n-1)**2 + n**2\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 1:\n        print('true')\n    if n == 2:\n        print('true')\n    if n == 3:\n        print('true')\n    if n == 4:\n        print('true')\n    if n == 5:\n        print('true')\n    if n == 6:\n        print('true')\n    if n == 7:\n        print('true')\n    if n == 8:\n        print('true')\n    if n == 9:\n        print('true')\n    if n == 10:\n        print('true')\n    if n == 11:\n        print('true')\n    if n == 12:\n        print('true')\n    if n == 13:\n        print('true')\n    if n == 14:\n        print('true')\n    if n == 15:\n        print('true')\n    if n == 16:\n        print('true')\n    if n == 17:\n        print('true')\n    if n == 18:\n        print('true')\n    if n == 19:\n        print('true')\n    if n == 20:\n        print('true')\n    if n == 21:\n        print('true')\n    if n == 22:\n        print('true')\n    if n == 23:\n        print('true')\n    if n == 24:\n        print('true')\n    if n == 25:\n        print('true')\n    if n == 26:\n        print('true')\n    if n == 27:\n        print('true')\n    if n == 28:\n        print('true')\n    if n == 29:\n        print('true')\n    if n == 30:\n        print('true')\n    if n == 31:\n        print('true')\n    if n == 32:\n        print('true')\n    if n == 33:\n        print('true')\n    if n == 34:\n        print('true')\n    if n == 35:\n        print('true')\n    if n == 36:\n        print('true')\n    if n == 37:\n        print('true')\n    if n == 38:\n        print('true')\n    if n == 39:\n        print('true')\n    if n == 40:\n        print('true')\n    if n == 41:\n        print('true')\n    if n == 42:\n        print('true')\n    if n == 43:\n        print('true')\n    if n == 44:\n        print('true')\n    if n == 45:\n        print('true')\n    if n == 46:\n        print('true')\n    if n == 47:\n        print('true')\n    if n == 48:\n        print('true')\n    if n == 49:\n        print('true')\n    if n == 50:\n        print('true')\n    if n == 51:\n        print('true')\n    if n == 52:\n        print('true')\n    if n == 53:\n        print('true')\n    if n == 54:\n        print('true')\n    if n == 55:\n        print('true')\n    if n == 56:\n        print('true')\n    if n == 57:\n        print('true')\n    if n == 58:\n        print('true')\n    if n == 59:\n        print('true')\n    if n == 60:\n        print('true')\n    if n == 61:\n        print('true')\n    if n == 62:\n        print('true')\n    if n == 63:\n        print('true')\n    if n == 64:\n        print('true')\n    if n == 65:\n        print('true')\n    if n == 66:\n        print('true')\n    if n == 67:\n        print('true')\n    if n == 68:\n        print('true')\n    if n == 69:\n        print('true')\n    if n == 70:\n        print('true')\n    if n == 71:\n        print('true')\n    if n == 72:\n        print('true')\n    if n == 73:\n        print('true')\n    if n == 74:\n        print('true')\n    if n == 75:\n        print('true')\n    if n == 76:\n        print('true')\n    if n == 77:\n        print('true')\n    if n == 78:\n        print('true')\n    if n == 79:\n        print('true')\n    if n == 80:\n        print('true')\n    if n == 81:\n        print('true')\n    if n == 82:\n        print('true')\n    if n == 83:\n        print('true')\n    if n == 84:\n        print('true')\n    if n == 85:\n        print('true')\n    if n == 86:\n        print('true')\n    if n == 87:\n        print('true')\n    if n == 88:\n        print('true')\n    if n == 89:\n        print('true')\n    if n == 90:\n        print('true')\n    if n == 91:\n        print('true')\n    if n == 92:\n        print('true')\n    if n == 93:\n        print('true')\n    if n == 94:\n        print('true')\n    if n == 95:\n        print('true')\n    if n == 96:\n        print('true')\n    if n == 97:\n        print('true')\n    if n == 98:\n        print('true')\n    if n == 99:\n        print('true')\n    if n == 100:\n        print('true')\n    if n == 101:\n        print('true')\n    if n == 102:\n        print('true')\n    if n == 103:\n        print('true')\n    if n == 104:\n        print('true')\n    if n == 105:\n        print('true')\n    if n == 106:\n        print('true')\n    if n == 107:\n        print('true')\n    if n == 108:\n        print('true')\n    if n == 109:\n        print('true')\n    if n == 110:\n        print('true')\n    if n == 111:\n        print('true')\n    if n == 112:\n        print('true')\n    if n == 113:\n        print('true')\n    if n == 114:\n        print('true')\n    if n == 115:\n        print('true')\n    if n == 116:\n        print('true')\n    if n == 117:\n        print('true')\n    if n == 118:\n        print('true')\n    if n == 119:\n        print('true')\n    if n == 120:\n        print('true')\n    if n == 121:\n        print('true')\n    if n == 122:\n        print('true')\n    if n == 123:\n        print('true')\n    if n == 124:\n        print('true')\n    if n == 125:\n        print('true')\n    if n == 126:\n        print('true')\n    if n == 127:\n        print('true')\n    if n == 128:\n        print('true')\n    if n == 129:\n        print('true')\n    if n == 130:\n        print('true')\n    if n == 131:\n        print('true')\n    if n == 132:\n        print('true')\n    if n == 133:\n        print('true')\n    if n == 134:\n        print('true')\n    if n == 135:\n        print('true')\n    if n == 136:\n        print('true')\n    if n == 137:\n        print('true')\n    if n == 138:\n        print('true')\n    if n == 139:\n        print('true')\n    if n == 140:\n        print('true')\n    if n == 141:\n        print('true')\n    if n == 142:\n        print('true')\n    if n == 143:\n        print('true')\n    if n == 144:\n        print('true')\n    if n == 145:\n        print('true')\n    if n == 146:\n        print('true')\n    if n == 147:\n        print('true')\n    if n == 148:\n        print('true')\n    if n == 149:\n        print('true')\n    if n == 150:\n        print('true')\n    if n == 151:\n        print('true')\n    if n == 152:\n        print('true')\n    if n == 153:\n        print('true')\n    if n == 154:\n        print('true')\n    if n ="
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i ** 2 + j ** 2 == n: \n                return True\n            elif i ** 2 + j ** 2 > n: \n                return False\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    x = int(math.sqrt(n))\n    if x**2==n:\n        return True\n    else:\n        return False\ndef dif_Cubed(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of three cubed or not.\n    '''\n    x = int(math.sqrt(n))\n    if x**3==n:\n        return True\n    else:\n        return False\ndef dif_Triangular(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two triangular or not.\n    '''\n    x = int(math.sqrt(n))\n    if x*(x+1)==n:\n        return True\n    else:\n        return False\ndef dif_Tricubed(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of three tricubed or not.\n    '''\n    x = int(math.sqrt(n))\n    if x*(x+1)*(x+2)==n:\n        return True\n    else:\n        return False\ndef dif_Hexagonal(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two hexagonal or not.\n    '''\n    x = int(math.sqrt(n))\n    if x*(2*x-1)==n:\n        return True\n    else:\n        return False\ndef dif_Hexcube(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of three hexagonal or not.\n    '''\n    x = int(math.sqrt(n))\n    if x*(2*x-1)*(x+1)==n:\n        return True\n    else:\n        return False\ndef dif_Dodecagonal(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two dodecagonal or not.\n    '''\n    x = int(math.sqrt(n))\n    if x*(3*x-1)==n:\n        return True\n    else:\n        return False\ndef dif_Dodeccube(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of three dodecagonal or not.\n    '''\n    x = int(math.sqrt(n))\n    if x*(3*x-1)*(x+1)==n:\n        return True\n    else:\n        return False\ndef dif_Trinomial(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two trinomial or not.\n    '''\n    x = int(math.sqrt(n))\n    if x*(x+1)*(2*x+1)==n:\n        return True\n    else:\n        return False\ndef dif_Tricubed(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of three trinomial or not.\n    '''\n    x = int(math.sqrt(n))\n    if x*(x+1)*(2*x+1)==n:\n        return True\n    else:\n        return False\ndef dif_Dodecagonal(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two dodecagonal or not.\n    '''\n    x = int(math.sqrt(n))\n    if x*(3*x-1)==n:\n        return True\n    else:\n        return False\ndef dif_Dodeccube(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of three dodecagonal or not.\n    '''\n    x = int(math.sqrt(n))\n    if x*(3*x-1)*(x+1)==n:\n        return True\n    else:\n        return False\ndef dif_Hexagonal(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two hexagonal or not.\n    '''\n    x = int(math.sqrt(n))\n    if x*(2*x-1)==n:\n        return True\n    else:\n        return False\ndef dif_Hexcube(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of three hexagonal or not.\n    '''\n    x = int(math.sqrt(n))\n    if x*(2*x-1)*(x+1)==n:\n        return True\n    else:\n        return False\ndef dif_Pentagonal(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two pentagonal or not.\n    '''\n    x = int(math.sqrt(n))\n    if x*(3*x-1)/2==n:\n        return True\n    else:\n        return False\ndef dif_Pentacube(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of three pentagonal or not.\n    '''\n    x = int(math.sqrt(n))\n    if x*(3*x-1)/2*(x+1)==n:\n        return True\n    else:\n        return False\ndef dif_Trinomial(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two trinomial or not.\n    '''\n    x = int(math.sqrt(n))\n    if x*(x+1)*(2*x+1)==n:\n        return True\n    else:\n        return False\ndef dif_Tricubed(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of three trinomial or not.\n    '''\n    x = int(math.sqrt(n))\n    if x*(x+1)*(2*x+1)==n:\n        return True\n    else:\n        return False\ndef dif_Pentagonal(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two pentagonal or not.\n    '''\n    x = int(math.sqrt(n))\n    if x*(3*x-1)/2==n:\n        return True\n    else:\n        return False\ndef dif_Pentacube(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of three pentagonal or not.\n    '''\n    x = int(math.sqrt(n))\n    if x*(3*x-1)/2*(x+1)==n:\n        return True\n    else:\n        return False\ndef dif_Dodecagonal(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two dodecagonal or not.\n    '''\n    x = int(math.sqrt(n))\n    if x*(3*x-1)==n:\n        return True\n    else:\n        return False\ndef dif_Dodeccube(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of three dodecagonal or not.\n    '''\n    x = int(math.sqrt(n))\n    if x*(3*x-1)*(x+1)==n:\n        return True\n    else:\n        return False\ndef dif_Trinomial(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two trinomial or not.\n    '''\n    x = int(math.sqrt(n))\n    if x*(x+1)*(2*x+1)==n:\n        return True\n    else:\n        return False\ndef dif_Tricubed(n): \n    '''\n    Write "
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n<=0):\n        return True\n    else:\n        temp=n\n        a=0\n        b=0\n        while(temp):\n            a=a+(temp%10)**2\n            temp=temp//10\n        temp=n\n        while(temp):\n            b=b+(temp%10)**2\n            temp=temp//10\n        if(a==b):\n            return True\n        else:\n            return False\n    \ndef dif_square_sum(n):\n    '''\n    Write a python function to check whether the given number can be represented as the sum of two squares or not.\n    '''\n    if (n<=0):\n        return True\n    else:\n        temp=n\n        a=0\n        b=0\n        while(temp):\n            a=a+(temp%10)**2\n            temp=temp//10\n        temp=n\n        while(temp):\n            b=b+(temp%10)**2\n            temp=temp//10\n        if(a==b):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    temp = int(math.sqrt(n))\n    if n < temp*temp:\n        return False\n    if n == temp*temp:\n        return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,int(n**(1/2))):\n        if (i**2) - (n-i**2) in range(1,n):\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    sqrt = sqrt_iter(n)\n    sqrt_m1 = sqrt - 1\n    sqrt_m1_sqrt = sqrt_m1 * sqrt_m1\n    if sqrt_m1_sqrt == n:\n        return True\n    if sqrt_m1_sqrt > n:\n        return False\n    if sqrt_m1_sqrt < n:\n        return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0: return True\n    for i in range(1, n+1):\n        if n-i**2 in range(1, n+1): return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i**2<=n:\n        if i**2+i**2 == n:\n            return True\n        i+=1\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    for i in range(len(patterns)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    result = []\n    for pattern in patterns:\n        color = colors.pop(0)\n        result.append(color in pattern)\n    return all(result)\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) == 0:\n        return False\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        for j in range(len(patterns)):\n            if patterns[j][i]!= colors[i]:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    c = colors[0]\n    for p in patterns:\n        if p[0]!= c:\n            return False\n        c = p[1]\n    return True\n    \ndef is_permutation(word1, word2):\n    '''\n    Write a function that returns true if the letters in word1 are permutations of the letters in word2.\n    '''\n    if len(word1)!= len(word2):\n        return False\n    if sorted(word1) == sorted(word2):\n        return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(patterns) == 0:\n        return True\n    for index in xrange(0, len(patterns)):\n        pattern = patterns[index]\n        if pattern[0] == \"color\":\n            if (colors[index]!= pattern[1]):\n                return False\n        else:\n            if (colors[index] == pattern[1]):\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    if colors[0] == patterns[0]:\n        if len(patterns) < 2:\n            return True\n        else:\n            return is_samepatterns(colors[1:], patterns[1:])\n    else:\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for index in range(len(patterns)):\n        colors = colors[len(patterns[index]):]\n        for color in patterns[index]:\n            if color not in colors:\n                return False\n        colors = colors[len(patterns[index]):]\n    return True\n    \n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    for i in range(len(patterns)):\n        if patterns[i]!= colors[i]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    if not patterns:\n        return True\n    \n    pattern = patterns[0]\n    if len(pattern)!= len(colors):\n        return False\n    \n    for color in colors:\n        if color not in pattern:\n            return False\n    \n    return is_samepatterns(colors[len(pattern):], patterns[1:])\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    output = []\n    for i in range(len(test_list)):\n        if all(x%K == 0 for x in test_list[i]):\n            output.append(test_list[i])\n    return output\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [(x, y) for x, y in test_list if x % K == 0 and y % K == 0]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    possible_tuples = []\n    for tup in test_list:\n        for element in tup:\n            if element % K!= 0:\n                break\n        else:\n            possible_tuples.append(tup)\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    final_list = []\n    for elem in test_list:\n        if all(x % K == 0 for x in elem):\n            final_list.append(elem)\n    return final_list\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    if K == 1:\n        return [(i,) for i in test_list]\n    elif K == 2:\n        return [(i,j) for i in test_list for j in test_list if i!=j and (i%j)==0]\n    else:\n        temp_list = []\n        for i in test_list:\n            temp_list.append(i)\n        return find_tuples(temp_list, K-1)\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for i in range(len(test_list)):\n        if all(x % K == 0 for x in test_list[i]):\n            divisible_tuples.append(test_list[i])\n    return divisible_tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    div_tuples = []\n    for tup in test_list:\n        if tup[0]%K==0 and tup[1]%K==0:\n            div_tuples.append(tup)\n    return div_tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    for ele in test_list:\n        if len(ele) == K:\n            if all(x%K == 0 for x in ele):\n                res.append(ele)\n    return res\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for tuple in test_list:\n        if all(x%K == 0 for x in tuple):\n            divisible_tuples.append(tuple)\n    return divisible_tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for tuple in test_list:\n        if all(elem%K == 0 for elem in tuple):\n            divisible_tuples.append(tuple)\n    return divisible_tuples\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    #Code\n    return (n % 11) == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11) == 0: \n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \ndef main():\n    '''\n    Write a python function to convert a number to string in a particular base.\n    '''\n    convert_to_base(37,3)\n    \n    '''\n    Write a python function to find whether a number is palindrome or not.\n    '''\n    is_palindrome(1234)\n    \n    '''\n    Write a python function to find whether a number is prime or not.\n    '''\n    is_prime(15)\n    \n    '''\n    Write a python function to find whether a number is perfect or not.\n    '''\n    is_perfect(10)\n    \n    '''\n    Write a python function to print the factorial of a number.\n    '''\n    factorial(4)\n    \n    '''\n    Write a python function to print the fibonacci series upto a given number.\n    '''\n    fibonacci(10)\n    \n    '''\n    Write a python function to print the fibonacci series upto a given number\n    using recursion.\n    '''\n    fibonacci_recursive(10)\n    \n    '''\n    Write a python function to print the fibonacci series upto a given number\n    using iteration.\n    '''\n    fibonacci_iterative(10)\n    \n    '''\n    Write a python function to print the fibonacci series upto a given number\n    using iteration.\n    '''\n    fibonacci_iterative_optimized(10)\n    \n    '''\n    Write a python function to print the fibonacci series upto a given number\n    using iteration.\n    '''\n    fibonacci_iterative_optimized(10)\n    \n    '''\n    Write a python function to print the tribonacci series upto a given number.\n    '''\n    tribonacci(10)\n    \n    '''\n    Write a python function to print the tribonacci series upto a given number\n    using recursion.\n    '''\n    tribonacci_recursive(10)\n    \n    '''\n    Write a python function to print the tribonacci series upto a given number\n    using iteration.\n    '''\n    tribonacci_iterative(10)\n    \n    '''\n    Write a python function to find the largest prime factor of a given number.\n    '''\n    max_prime_factor(100)\n    \n    '''\n    Write a python function to find the smallest prime factor of a given number.\n    '''\n    min_prime_factor(100)\n    \n    '''\n    Write a python function to find the largest prime factor of a given number.\n    '''\n    max_prime_factor_optimized(100)\n    \n    '''\n    Write a python function to find the smallest prime factor of a given number.\n    '''\n    min_prime_factor_optimized(100)\n    \n    '''\n    Write a python function to find the smallest multiple of three numbers.\n    '''\n    smallest_multiple(27, 18, 19)\n    \n    '''\n    Write a python function to print the longest common prefix between two strings.\n    '''\n    lcp(['Python', 'Python', 'Python'])\n    \n    '''\n    Write a python function to print the longest common prefix between two strings.\n    '''\n    lcp_optimized(['Python', 'Python', 'Python'])\n    \n    '''\n    Write a python function to print the longest common prefix between two strings.\n    '''\n    lcp_optimized_space(['Python', 'Python', 'Python'])\n    \n    '''\n    Write a python function to print the number of vowels in a string.\n    '''\n    vowels_count('Python')\n    \n    '''\n    Write a python function to print the number of vowels in a string.\n    '''\n    vowels_count_optimized('Python')\n    \n    '''\n    Write a python function to print the number of vowels in a string.\n    '''\n    vowels_count_optimized('Python')\n    \n    '''\n    Write a python function to find the longest substring which is palindrome.\n    '''\n    longest_palindrome('Python')\n    \n    '''\n    Write a python function to find the longest substring which is palindrome.\n    '''\n    longest_palindrome_optimized('Python')\n    \n    '''\n    Write a python function to find the longest substring which is palindrome.\n    '''\n    longest_palindrome_optimized('Python')\n    \n    '''\n    Write a python function to print the longest common substring between two strings.\n    '''\n    lcs('Python', 'Python')\n    \n    '''\n    Write a python function to print the longest common substring between two strings.\n    '''\n    lcs_optimized('Python', 'Python')\n    \n    '''\n    Write a python function to print the longest common substring between two strings.\n    '''\n    lcs_optimized('Python', 'Python')\n    \n    '''\n    Write a python function to find the longest common substring between two strings.\n    '''\n    lcs_length('Python', 'Python')\n    \n    '''\n    Write a python function to find the longest common substring between two strings.\n    '''\n    lcs_length_optimized('Python', 'Python')\n    \n    '''\n    Write a python function to find the longest common substring between two strings.\n    '''\n    lcs_length_optimized('Python', 'Python')\n    \n    '''\n    Write a python function to print the longest common suffix between two strings.\n    '''\n    lcs_suffix('Python', 'Python')\n    \n    '''\n    Write a python function to print the longest common suffix between two strings.\n    '''\n    lcs_suffix_optimized('Python', 'Python')\n    \n    '''\n    Write a python function to print the longest common suffix between two strings.\n    '''\n    lcs_suffix_optimized('Python', 'Python')\n    \n    '''\n    Write a python function to print the longest common prefix between two strings.\n    '''\n    lcs_prefix('Python', 'Python')\n    \n    '''\n    Write a python function to print the longest common prefix between two strings.\n    '''\n    lcs_prefix_optimized('Python', 'Python')\n    \n    '''\n    Write a python function to print the longest common prefix between two strings.\n    '''\n    lcs_prefix_optimized('Python', 'Python')\n    \n    '''\n    Write a python function to print the number of words in a string.\n    '''\n    words_count('Python')\n    \n    '''\n    Write a python function to print the number of words in a string.\n    '''\n    words_count_optimized('Python')\n    \n    '''\n    Write a python function to print the number of words in a string.\n    '''\n    words_count_optimized('Python')\n    \n    '''\n    Write a python function to print the number of words in a string.\n    '''\n    words_count_optimized('Python')\n    \n    '''\n    Write a python function to print the number of words in a string.\n    '''\n    words_count_optimized('Python')\n    \n    '''\n    Write a python function to print the number of words in a string.\n    '''\n    words_count_optimized('Python')\n    \n    '''\n    Write a python function to print the number of words in a string.\n    '''\n    words_count_optimized('Python')\n    \n    '''\n    Write a python function to print the number of words in a string.\n    '''\n    words_count_optimized('Python')\n    \n    '''\n    Write a python function to print the number of words in a string.\n    '''\n    words_count_optimized('Python')\n    \n    '''\n    Write a python function to print the number of words in a string.\n    '''\n    words_count_optimized('Python')\n    \n    '''\n    Write a python function to print the number of words in a string.\n    '''\n    words_count_optimized('Python')\n    \n    '''\n    Write a python function to print the number of words in "
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11) == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0: \n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2\n    \nprint word_len('hi')\nprint word_len('python')\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2!=0\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return (len(s) % 2)\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n    "
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    l = len(s)\n    if l%2==0:\n        return False\n    else:\n        return True\n    \ndef all_vowels_present(s):\n    '''\n    Write a python function to check whether a word contains all vowels (a, e, i, o, u) or not.\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    for i in vowels:\n        if i not in s:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    \n    s = s.strip()\n    print \"The length of the string is :\",len(s)\n    \n    if(len(s)%2 == 0):\n        print \"The word is even\"\n    \n    else:\n        print \"The word is odd\"\n    \n    print \"\\n\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==1\n    #return (len(s)%2==1)\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        return 0\n    if n <= 3:\n        return n\n    if n == 4:\n        return 4\n    return tetrahedral_number(n-3) + tetrahedral_number(n-2) + tetrahedral_number(n-1)\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int((n * (n + 1) * (n + 2)) / 6)\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral = 0\n    a = 1\n    b = 2\n    for i in range(2, n + 1):\n        a, b = b, a + b\n        tetrahedral += a\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n    if n == 3:\n        return 10\n    if n == 4:\n        return 40\n    if n == 5:\n        return 109\n    if n == 6:\n        return 208\n    if n == 7:\n        return 253\n    if n == 8:\n        return 351\n    if n == 9:\n        return 520\n    if n == 10:\n        return 805\n    if n == 11:\n        return 1460\n    if n == 12:\n        return 2321\n    if n == 13:\n        return 3272\n    if n == 14:\n        return 4344\n    if n == 15:\n        return 5750\n    if n == 16:\n        return 7904\n    if n == 17:\n        return 10640\n    if n == 18:\n        return 13272\n    if n == 19:\n        return 15906\n    if n == 20:\n        return 18384\n    if n == 21:\n        return 21600\n    if n == 22:\n        return 25280\n    if n == 23:\n        return 31212\n    if n == 24:\n        return 36036\n    if n == 25:\n        return 41932\n    if n == 26:\n        return 48000\n    if n == 27:\n        return 55104\n    if n == 28:\n        return 61920\n    if n == 29:\n        return 69792\n    if n == 30:\n        return 76272\n    if n == 31:\n        return 82984\n    if n == 32:\n        return 90336\n    if n == 33:\n        return 105120\n    if n == 34:\n        return 112704\n    if n == 35:\n        return 119688\n    if n == 36:\n        return 125760\n    if n == 37:\n        return 130592\n    if n == 38:\n        return 138456\n    if n == 39:\n        return 145952\n    if n == 40:\n        return 155368\n    if n == 41:\n        return 166432\n    if n == 42:\n        return 176576\n    if n == 43:\n        return 186640\n    if n == 44:\n        return 187024\n    if n == 45:\n        return 19720\n    if n == 46:\n        return 208000\n    if n == 47:\n        return 218512\n    if n == 48:\n        return 222704\n    if n == 49:\n        return 235648\n    if n == 50:\n        return 241344\n    if n == 51:\n        return 251488\n    if n == 52:\n        return 261736\n    if n == 53:\n        return 271820\n    if n == 54:\n        return 281980\n    if n == 55:\n        return 292352\n    if n == 56:\n        return 302736\n    if n == 57:\n        return 312720\n    if n == 58:\n        return 321728\n    if n == 59:\n        return 331936\n    if n == 60:\n        return 342032\n    if n == 61:\n        return 352432\n    if n == 62:\n        return 362528\n    if n == 63:\n        return 372724\n    if n == 64:\n        return 382816\n    if n == 65:\n        return 392912\n    if n == 66:\n        return 403008\n    if n == 67:\n        return 413208\n    if n == 68:\n        return 423024\n    if n == 69:\n        return 432928\n    if n == 70:\n        return 443336\n    if n == 71:\n        return 453464\n    if n == 72:\n        return 463572\n    if n == 73:\n        return 473680\n    if n == 74:\n        return 483788\n    if n == 75:\n        return 493896\n    if n == 76:\n        return 503904\n    if n == 77:\n        return 513992\n    if n == 78:\n        return 523784\n    if n == 79:\n        return 533792\n    if n == 80:\n        return 543900\n    if n == 81:\n        return 553904\n    if n == 82:\n        return 563908\n    if n == 83:\n        return 573912\n    if n == 84:\n        return 583916\n    if n == 85:\n        return 593920\n    if n == 86:\n        return 603924\n    if n == 87:\n        return 613952\n    if n == 88:\n        return 623776\n    if n == 89:\n        return 633776\n    if n == 90:\n        return 643980\n    if n == 91:\n        return 653984\n    if n == 92:\n        return 663988\n    if n == 93:\n        return 673992\n    if n == 94:\n        return 683996\n    if n == 95:\n        return 693900\n    if n == 96:\n        return 703904\n    if n == 97:\n        return 713952\n    if n == 98:\n        return 723776\n    if n == 99:\n        return 733776\n    if n == 100:\n        return 743804\n    if n == 101:\n        return 753908\n    if n == 102:\n        return 763808\n    if n == 103:\n        return 773804\n    if n == 104:\n        return 783808\n    if n == 105:\n        return 793808\n    if n == 106:\n        return 803808\n    if n == 107:\n        return 813808\n    if n == 108:\n        return 823808\n    if n == 109:\n        return 833808\n    if n == 110:\n        return 843808\n    if n == 111:\n        return 853808\n    if n == 112:\n        return 863808\n    if n == 113:\n        return 873808\n    if n == 114:\n        return 883808\n    if n == 115:\n        return 893808\n    if n == 116:\n        return 903808\n    if n == 117:\n        return 913808\n    if n == 118:\n        return 923808\n    if n == 119:\n        return 933808\n    if n == 120:\n        return 943808\n    if n == 121:\n        return 953808\n    if n == 122:\n        return 963808\n    if n == 123:\n        return 973808\n    if n == 124:\n        return 983808\n    if n == 125:\n        return 993808\n    if n == 126:\n        return 1003808\n    if n == 127:\n        return 1013808\n    if n == 128:\n        return 1023808\n    if n == 129:\n        return 1033808\n    if n == 130:\n        return 1043808\n    if n == 131:\n        return 1053808\n    if n == 132:\n        return 1063808\n    if n == 133:\n        return 1073808\n    if n == 134:\n        return 1083808\n    if n == 135:\n        return 1093808\n    if n == 136:\n        return 1101808\n    if n == 137:\n        return 1113808\n    if n == 138:\n        return 1129808\n    if n == 139:\n        return 1137808\n    if n == 140:\n        return 1157808\n    if n == 141:\n        return 1165808\n    if n == 142:\n        return 1173808\n    if n == 143:\n        return 1183808\n    if n == 144:\n        return 1193808\n    if n == 145:\n        return 1203808\n    if n == 146:\n        return 1213808\n    if n == 147:\n        return 1223808\n    if n == 148:\n        return 1233808\n    if n == 149:\n        return 1243808\n    if n == 150:\n        return 1253808\n    if n == 151:\n        return 1263808\n    if n == 152:\n        return 1273808\n    if n == 153:\n        return 1283808\n    if n == 154:\n        return 1293808\n    if n == 155:\n        return 1301808\n    if n == 156:\n        return 1311808\n    if n == 157:\n        return 1321808\n    if n == 158:\n        return 1331808\n    i"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    a = 0\n    i = 1\n    while (a < n):\n        a = 4*i*(i+1)*(2*i+1)\n        i += 1\n    return a\n    \ndef tetrahedral_number_efficient(n):\n    '''\n    This function takes care of the above function\n    '''\n    \n    i = 1\n    a = 0\n    while (a < n):\n        a = 4*i*(i+1)*(2*i+1)\n        i += 1\n    return a\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_numbers = [0,1,2,4,6,8,12,20]\n    return tetrahedral_numbers[n]\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_numbers = [0,0,1,2,3]\n    for i in range(4,n+1):\n        tetrahedral_numbers.append(tetrahedral_numbers[i-1]+1)\n        if i%2 == 0:\n            tetrahedral_numbers[i] += tetrahedral_numbers[i-2]\n    return tetrahedral_numbers[n]\n    \nif __name__ == \"__main__\":\n    import sys\n    print tetrahedral_number(int(sys.argv[1]))"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int(n*(n+1)*(n+2)/6)\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    if n == 0:\n        return 1\n    if n == 1:\n        return 4\n    if n == 2:\n        return 4\n    if n == 3:\n        return 6\n    if n == 4:\n        return 10\n    if n == 5:\n        return 20\n    if n == 6:\n        return 40\n    if n == 7:\n        return 120\n    if n == 8:\n        return 720\n    if n == 9:\n        return 5040\n    if n == 10:\n        return 40320\n    if n == 11:\n        return 362880\n    if n == 12:\n        return 3628800\n    if n == 13:\n        return 39916800\n    if n == 14:\n        return 479001600\n    if n == 15:\n        return 6227020800\n    if n == 16:\n        return 87178291200\n    if n == 17:\n        return 1307674368000\n    if n == 18:\n        return 3489001600\n    if n == 19:\n        return 38742048976000\n    if n == 20:\n        return 477406913936000\n    if n == 21:\n        return 657504000000\n    if n == 22:\n        return 665152000000000\n    if n == 23:\n        return 72057594037927935\n    if n == 24:\n        return 879609302220229\n    if n == 25:\n        return 14930352105609\n    if n == 26:\n        return 24157817371525\n    if n == 27:\n        return 552213900000\n    if n == 28:\n        return 560689104027899\n    if n == 29:\n        return 5718435337790\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    return (4/3)*pi*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0 / 3.0) * math.pi * (r ** 3)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume= 4/3*math.pi*(r**3)\n    return volume\ndef convert_celsius_to_fahrenheit(c):\n    '''\n    Write a function to convert a temperature from Celsius to Fahrenheit.\n    '''\n    fahrenheit=(c*9/5)+32\n    return fahrenheit\ndef convert_fahrenheit_to_celsius(f):\n    '''\n    Write a function to convert a temperature from Fahrenheit to Celsius.\n    '''\n    celsius=(f-32)*5/9\n    return celsius\ndef vol_cuboid(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid2(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid3(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid4(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid5(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid6(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid7(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid8(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid9(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid10(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid11(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid12(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid13(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid14(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid15(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid16(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid17(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid18(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid19(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid20(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid21(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid22(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid23(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid24(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid25(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid26(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid27(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid28(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid29(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid30(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid31(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid32(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid33(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid34(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid35(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid36(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid37(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid38(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid39(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid40(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid41(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef vol_cuboid42(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3)*math.pi*(r**3)\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = 4/3*math.pi*(r**3)\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*(math.pi)*(r**3)\n    \ndef volume_sphere2(r):\n    return 4/3*math.pi*r**3\n    "
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r**3\n    return V\ndef volume_ball(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = 4*math.pi*r**3/3\n    return V\ndef volume_cuboid(l):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    V = l**3\n    return V\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = 1/3*math.pi*r**2*h\n    return V\ndef volume_pyramid(b,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = 1/3*math.pi*b**2*h\n    return V\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi*r**2*h\n    return V\ndef volume_cone_sod(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi*r**2*h/3\n    return V\ndef volume_cuboid_sod(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    V = l**2\n    return V\ndef volume_sphere_sod(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r**3\n    return V\ndef volume_ball_sod(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = 4*math.pi*r**3/3\n    return V\ndef volume_cuboid_sod(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    V = l**2\n    return V\ndef volume_cone_sod(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = 1/3*math.pi*r**2*h\n    return V\ndef volume_pyramid_sod(b,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = 1/3*math.pi*b**2*h\n    return V\ndef volume_cylinder_sod(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi*r**2*h\n    return V\ndef volume_sphere_sod(r):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (4/3)*math.pi*r**3\n    return V\ndef volume_ball_sod(r):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = 4*math.pi*r**3/3\n    return V\ndef volume_cuboid_sod(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    V = l**2\n    return V\ndef volume_sphere_sod(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r**3\n    return V\ndef volume_ball_sod(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = 4*math.pi*r**3/3\n    return V\ndef volume_cuboid_sod(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    V = l**2\n    return V\ndef volume_cone_sod(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = 1/3*math.pi*r**2*h\n    return V\ndef volume_pyramid_sod(b,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = 1/3*math.pi*b**2*h\n    return V\ndef volume_cylinder_sod(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi*r**2*h\n    return V\ndef volume_cone_sod(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = 1/3*math.pi*r**2*h/3\n    return V\ndef volume_sphere_sod(r):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (4/3)*math.pi*r**3\n    return V\ndef volume_ball_sod(r):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = 4*math.pi*r**3/3\n    return V\ndef volume_cuboid_sod(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    V = l**2\n    return V\ndef volume_cone_sod(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = 1/3*math.pi*r**2*h\n    return V\ndef volume_pyramid_sod(b,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = 1/3*math.pi*b**2*h\n    return V\ndef volume_cylinder_sod(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi*r**2*h\n    return V\ndef volume_sphere_sod(r):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (4/3)*math.pi*r**3\n    return V\ndef volume_ball_sod(r):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = 4*math.pi*r**3/3\n    return V\ndef volume_cuboid_sod(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    V = l**2\n    return V\ndef volume_sphere_sod(r):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (4/3)*math.pi*r**3\n    return V\ndef volume_ball_sod(r):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = 4*math.pi*r**3/3\n    return V\ndef volume_cuboid_sod(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    V = l**2\n    return V\ndef volume_cone_sod(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = 1/3*math.pi*r**2*h\n    return V\ndef volume_pyramid_sod(b,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = 1/3*math.pi*b**2*h\n    return V\ndef volume_cylinder_sod(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi*r**2*h\n    return V\ndef volume_cone_sod(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = 1/3*math.pi*r**2"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = 0\n    for i in strr:\n        res = (res + ord(i)) % 26\n    return chr(res + ord('a'))\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for i in range(len(strr)):\n        result = result + ord(strr[i])\n    return result%26\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    tmp_ascii = 0\n    for i in range(len(strr)):\n        tmp_ascii += ord(strr[i])\n    return (tmp_ascii%26)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    string=strr\n    list=[]\n    for i in string:\n        list.append(ord(i))\n    n=0\n    for i in range(0,len(list)):\n        n=n+list[i]\n    n=n%26\n    list2=[]\n    for i in string:\n        list2.append(chr(ord(i)+n))\n    return ''.join(list2)\ndef deciphered_String(strr):\n    '''\n    Write a python function to find the deciphered string from the given string.\n    '''\n    string=strr\n    list=[]\n    for i in string:\n        list.append(ord(i))\n    n=0\n    for i in range(0,len(list)):\n        n=n+list[i]\n    n=n%26\n    list2=[]\n    for i in string:\n        list2.append(chr(ord(i)-n))\n    return ''.join(list2)\ndef all_permutations(strr):\n    '''\n    Write a python function to find all the permutations of a string.\n    '''\n    string=strr\n    list=[]\n    for i in string:\n        list.append(i)\n    print list\n    print list[:]\n    for i in range(1,len(list)):\n        list2=[]\n        for j in range(0,len(list)):\n            list2.append(list[j])\n        list2.insert(i,list2[0])\n        del list2[0]\n        print list2\n        list2[0]=list[i]\n        list2[i]=list2[0]\n        list2.insert(0,list[i])\n        print list2\n        del list2[i+1]\n        list2.insert(0,list[i])\n        print list2\n    return\ndef all_permutations(strr):\n    '''\n    Write a python function to find all the permutations of a string.\n    '''\n    string=strr\n    list=[]\n    for i in string:\n        list.append(i)\n    print list\n    print list[:]\n    for i in range(1,len(list)):\n        list2=[]\n        for j in range(0,len(list)):\n            list2.append(list[j])\n        list2.insert(i,list2[0])\n        del list2[0]\n        print list2\n        list2[0]=list[i]\n        list2[i]=list2[0]\n        list2.insert(0,list[i])\n        print list2\n        del list2[i+1]\n        list2.insert(0,list[i])\n        print list2\n    return\ndef all_permutations(strr):\n    '''\n    Write a python function to find all the permutations of a string.\n    '''\n    string=strr\n    list=[]\n    for i in string:\n        list.append(i)\n    print list\n    print list[:]\n    for i in range(1,len(list)):\n        list2=[]\n        for j in range(0,len(list)):\n            list2.append(list[j])\n        list2.insert(i,list2[0])\n        del list2[0]\n        print list2\n        list2[0]=list[i]\n        list2[i]=list2[0]\n        list2.insert(0,list[i])\n        print list2\n        del list2[i+1]\n        list2.insert(0,list[i])\n        print list2\n    return\ndef get_all_permutations(strr):\n    '''\n    Write a python function to find all the permutations of a string.\n    '''\n    string=strr\n    list=[]\n    for i in string:\n        list.append(i)\n    print list\n    print list[:]\n    for i in range(1,len(list)):\n        list2=[]\n        for j in range(0,len(list)):\n            list2.append(list[j])\n        list2.insert(i,list2[0])\n        del list2[0]\n        print list2\n        list2[0]=list[i]\n        list2[i]=list2[0]\n        list2.insert(0,list[i])\n        print list2\n        del list2[i+1]\n        list2.insert(0,list[i])\n        print list2\n    return\ndef get_all_permutations(strr):\n    '''\n    Write a python function to find all the permutations of a string.\n    '''\n    string=strr\n    list=[]\n    for i in string:\n        list.append(i)\n    print list\n    print list[:]\n    for i in range(1,len(list)):\n        list2=[]\n        for j in range(0,len(list)):\n            list2.append(list[j])\n        list2.insert(i,list2[0])\n        del list2[0]\n        print list2\n        list2[0]=list[i]\n        list2[i]=list2[0]\n        list2.insert(0,list[i])\n        print list2\n        del list2[i+1]\n        list2.insert(0,list[i])\n        print list2\n    return\ndef get_all_permutations(strr):\n    '''\n    Write a python function to find all the permutations of a string.\n    '''\n    string=strr\n    list=[]\n    for i in string:\n        list.append(i)\n    print list\n    print list[:]\n    for i in range(1,len(list)):\n        list2=[]\n        for j in range(0,len(list)):\n            list2.append(list[j])\n        list2.insert(i,list2[0])\n        del list2[0]\n        print list2\n        list2[0]=list[i]\n        list2[i]=list2[0]\n        list2.insert(0,list[i])\n        print list2\n        del list2[i+1]\n        list2.insert(0,list[i])\n        print list2\n    return\ndef get_all_permutations(strr):\n    '''\n    Write a python function to find all the permutations of a string.\n    '''\n    string=strr\n    list=[]\n    for i in string:\n        list.append(i)\n    print list\n    print list[:]\n    for i in range(1,len(list)):\n        list2=[]\n        for j in range(0,len(list)):\n            list2.append(list[j])\n        list2.insert(i,list2[0])\n        del list2[0]\n        print list2\n        list2[0]=list[i]\n        list2[i]=list2[0]\n        list2.insert(0,list[i])\n        print list2\n        del list2[i+1]\n        list2.insert(0,list[i])\n        print list2\n    return\ndef get_all_permutations(strr):\n    '''\n    Write a python function to find all the permutations of a string.\n    '''\n    string=strr\n    list=[]\n    for i in string:\n        list.append(i)\n    print list\n    print list[:]\n    for i in range(1,len(list)):\n        list2=[]\n        for j in range(0,len(list)):\n            list2.append(list[j])\n        list2.insert(i,list2[0])\n        del list2[0]\n        print list2\n        list2[0]=list[i]\n        list2[i]=list2[0]\n        list2.insert(0,list[i])\n        print list2\n        del list2[i+1]\n        list2.insert(0,list[i])\n        print list2\n    return\ndef get_all_permutations(strr):\n    '''\n    Write a python function to find all the permutations of a string.\n    '''\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = sum([ord(x) for x in strr]) % 26\n    return chr(res)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return chr(sum(map(ord,strr))%26)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    list=[]\n    for i in strr:\n        list.append(ord(i))\n    ans=0\n    for i in list:\n        ans=ans+i\n    return ans%26\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for i in strr:\n        ascii_sum += ord(i)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return chr(reduce((lambda x, y: x + ord(y)), strr, 0) % 26)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    summ = 0\n    for i in strr:\n        summ = summ + ord(i)\n    summ = summ % 26\n    l = chr(summ)\n    return l\n    \ndef encrypt(strr):\n    \"\"\"\n    Encrypts the string using ROT13 Cipher.\n    \"\"\"\n    l = ''\n    for i in strr:\n        l = l + get_Char(i)\n    return l\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = [0,1]\n    while len(a) < n:\n        a = [1] + [a[i] + a[i-1] for i in range(1,len(a))] + [1]\n    return a[n-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 1\n    if n <= 5:\n        return 2**n-1\n    else:\n        return sequence(n-5) + (sequence(n-1) - sequence(n-5))\n    \n    \ndef count_pattern(num_list, pattern):\n    '''\n    Write a function to count the number of times a pattern appears in a list.\n    '''\n    if len(num_list) == 0:\n        return 0\n    if len(num_list) == 1:\n        return 0 if num_list[0]!= pattern else 1\n    if pattern == num_list[0]:\n        return 1 + count_pattern(num_list[1:], pattern)\n    else:\n        return count_pattern(num_list[1:], pattern)\n    \n    \ndef is_palindrome(num):\n    '''\n    Write a function to check if a number is a palindrome\n    '''\n    if num < 0:\n        return False\n    if num == 0:\n        return True\n    if num % 10 == 0:\n        return is_palindrome(num//10)\n    if num % 10!= 0 and num//10!= 0:\n        return False\n    if num % 10 == num//10:\n        return True\n    \n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    def newman_conway_seq(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 2\n        elif n == 2:\n            return 3\n        elif n == 3:\n            return 5\n        else:\n            return newman_conway_seq(n-1) + newman_conway_seq(n-2) + newman_conway_seq(n-3)\n    return newman_conway_seq(n)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [1, 2, 3]\n    while seq[-1] < n:\n        new_num = sum(seq[-3:])\n        seq.append(new_num)\n    return seq[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1]\n    if n < 2: \n        return sequence[n]\n    else: \n        count = 0 \n        while count < n - 1: \n            num = sequence[-1] + sequence[-2] \n            sequence.append(num) \n            count += 1 \n        return sequence[-1] \n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 0: \n        return False\n    if n == 1: \n        return 0\n    return sequence(n-1) + sequence(n-2) + sequence(n-3)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = []\n    for i in range(n):\n        seq.append(i+1)\n        if i % 2 == 0:\n            seq[i] += seq[i-1]\n        else:\n            seq[i] += (seq[i-1] - 1)\n    return seq[n-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return n**2 + (n**2 - n - 1)**2\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return sequence(n - 1) + sequence(n - 2) + sequence(n - 3)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4*math.pi*r**2\n    print(area)\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa = 4 * math.pi * r**2\n    return sa\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*(r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    \n    return (4 * math.pi * (r ** 2))\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa = 4 * math.pi * (r ** 2)\n    return sa\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * (r ** 3)\n    return v\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    sa = 2 * math.pi * (r ** 2) + 2 * math.pi * r * h\n    return sa\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v = math.pi * (r ** 2) * h\n    return v\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    sa = math.pi * (r ** 2) + math.pi * r * (r + h)\n    return sa\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * h / 3\n    return v\ndef surfacearea_torus(r, R):\n    '''\n    Write a function to find the surface area of a torus.\n    '''\n    sa = 2 * math.pi * (r ** 2) + 2 * math.pi * r * R\n    return sa\ndef volume_torus(r, R):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    v = (math.pi * (r ** 2)) * R * 2 / 3\n    return v\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r ** 2)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*(r+h)\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return math.pi*(r*r+(h*h))/2\ndef surfacearea_pyramid(r,h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    return math.pi*(r*r+(h*h)/2)\ndef surfacearea_triangle(r,h):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return math.pi*(r*r)\ndef surfacearea_trapezium(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    return a*b+2*a*h+2*b*h\ndef surfacearea_square(a):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    return a*a\ndef surfacearea_rectangle(l,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return l*b\ndef surfacearea_rectangularprism(l,b,h):\n    '''\n    Write a function to find the surface area of a rectangular prism.\n    '''\n    return 2*l*b+2*b*h+2*l*h\ndef surfacearea_rectangularpyramid(l,b,h):\n    '''\n    Write a function to find the surface area of a rectangular pyramid.\n    '''\n    return l*b+b*h+2*l*h\ndef surfacearea_circularcylinder(r,h):\n    '''\n    Write a function to find the surface area of a circular cylinder.\n    '''\n    return math.pi*(r*r+h*h)\ndef surfacearea_cuboid(l,b,h):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    return 2*(l*b+b*h+l*h)\ndef surfacearea_conicalcylinder(r,h):\n    '''\n    Write a function to find the surface area of a conical cylinder.\n    '''\n    return math.pi*r*(r+h)\ndef surfacearea_ellipsoidalprism(r1,r2,h):\n    '''\n    Write a function to find the surface area of an ellipsoidal prism.\n    '''\n    return 4*math.pi*r1*r2+2*math.pi*r1*r2*h\ndef surfacearea_ellipsoidalpyramid(r1,r2,h):\n    '''\n    Write a function to find the surface area of an ellipsoidal pyramid.\n    '''\n    return math.pi*(r1*r1+r2*r2+h*h)/2\ndef surfacearea_ellipsoidalpyramidalprism(r1,r2,h):\n    '''\n    Write a function to find the surface area of an ellipsoidal pyramidal prism.\n    '''\n    return math.pi*(r1*r1+r2*r2+h*h)\ndef surfacearea_ellipsoidalpyramid(r1,r2,h):\n    '''\n    Write a function to find the surface area of an ellipsoidal pyramid.\n    '''\n    return math.pi*(r1*r1+r2*r2)/2\ndef surfacearea_ellipticalpyramid(r1,r2,h):\n    '''\n    Write a function to find the surface area of an elliptical pyramid.\n    '''\n    return math.pi*(r1*r1+r2*r2+h*h)\ndef surfacearea_ellipticalpyramidalprism(r1,r2,h):\n    '''\n    Write a function to find the surface area of an elliptical pyramidal prism.\n    '''\n    return math.pi*(r1*r1+r2*r2+h*h)\ndef surfacearea_sphericalcylinder(r,h):\n    '''\n    Write a function to find the surface area of a spherical cylinder.\n    '''\n    return 4*math.pi*r*r*h\ndef surfacearea_conicalcone(r,h):\n    '''\n    Write a function to find the surface area of a conical cone.\n    '''\n    return math.pi*r*(r+h)\ndef surfacearea_conicalcone(r,h):\n    '''\n    Write a function to find the surface area of a conical cone.\n    '''\n    return math.pi*r*(r+h)\ndef surfacearea_conicaltorus(r1,r2,h):\n    '''\n    Write a function to find the surface area of a conical torus.\n    '''\n    return math.pi*(r1*r1+r2*r2)*h\ndef surfacearea_sphericalcone(r,h):\n    '''\n    Write a function to find the surface area of a spherical cone.\n    '''\n    return math.pi*r*(r+h)\ndef surfacearea_paraboloid(a,b):\n    '''\n    Write a function to find the surface area of a paraboloid.\n    '''\n    return 2*math.pi*a*b\ndef surfacearea_parabola(a,b,c):\n    '''\n    Write a function to find the surface area of a parabola.\n    '''\n    return math.pi*(a*b)\ndef surfacearea_hyperbola(a,b,c):\n    '''\n    Write a function to find the surface area of a hyperbola.\n    '''\n    return math.pi*(a*b)\ndef surfacearea_paraboloid(a,b):\n    '''\n    Write a function to find the surface area of a paraboloid.\n    '''\n    return 2*math.pi*a*b\ndef surfacearea_sphericalconic(a,b,c):\n    '''\n    Write a function to find the surface area of a spherical conic.\n    '''\n    return math.pi*(a*b)\ndef surfacearea_conic(a,b,c):\n    '''\n    Write a function to find the surface area of a conic.\n    '''\n    return 2*math.pi*a*b\ndef surfacearea_tricylinder(r,h):\n    '''\n    Write a function to find the surface area of a tricylinder.\n    '''\n    return 2*math.pi*(r*r+(r+h)*(r+h))/2\ndef surfacearea_ellipsoidalprism(r1,r2,h):\n    '''\n    Write a function to find the surface area of an ellipsoidal prism.\n    '''\n    return 4*math.pi*r1*r2+2*math.pi*r1*r2*h\ndef surfacearea_ellipsoidalpyramid(r1,r2,h):\n    '''\n    Write a function to find the surface area of an ellipsoidal pyramid.\n    '''\n    return 2*math.pi*r1*r2+2*math.pi*r1*r2*h\ndef surfacearea_sphericalprism(r,h):\n    '''\n    Write a function to find the surface area of a spherical prism.\n    '''\n    return 2*math.pi*(r*r+h*h)\ndef surfacearea_sphericalcylinder(r,h):\n    '''\n    Write a function to find the surface area of a spherical cylinder.\n    '''\n    return math.pi*(r*r+h*h)\ndef surfacearea_sphericalpyramid(r,h):\n    '''\n    Write a function to find the surface area of a spherical pyramid.\n    '''\n    return math.pi*r*r+2*math.pi*r*r*h\ndef surfacearea_ellipsoidalcone(r,h):\n    ''"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\ndef surfacearea_cube(s):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6*s**2\ndef surfacearea_sphere_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a sphere and a cylinder.\n    '''\n    return 2*math.pi*r**2 + 2*math.pi*r*h\ndef surfacearea_rectangle(b,h):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return b*h\ndef surfacearea_rectangle_square(b,h):\n    '''\n    Write a function to find the surface area of a rectangle and a square.\n    '''\n    return 2*(b*h + b*h)\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return math.pi*r**2 + math.pi*r*h\ndef surfacearea_cone_square(r,h):\n    '''\n    Write a function to find the surface area of a cone and a square.\n    '''\n    return math.pi*r**2 + math.pi*r*h\ndef surfacearea_dodecagon(s):\n    '''\n    Write a function to find the surface area of a dodecagon.\n    '''\n    return 24*s**2\ndef surfacearea_octagon(s):\n    '''\n    Write a function to find the surface area of an octagon.\n    '''\n    return 8*s**2\ndef surfacearea_octagon_square(s):\n    '''\n    Write a function to find the surface area of a octagon and a square.\n    '''\n    return 8*s**2\ndef surfacearea_trapezoid(b,h):\n    '''\n    Write a function to find the surface area of a trapzoid.\n    '''\n    return b*h\ndef surfacearea_trapezoid_square(b,h):\n    '''\n    Write a function to find the surface area of a trapzoid and a square.\n    '''\n    return 2*(b*h + b*h)\ndef surfacearea_triangle(b,h):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return b*h\ndef surfacearea_triangle_square(b,h):\n    '''\n    Write a function to find the surface area of a triangle and a square.\n    '''\n    return b*h\ndef surfacearea_hexagon(s):\n    '''\n    Write a function to find the surface area of a hexagon.\n    '''\n    return 6*s**2\ndef surfacearea_hexagon_square(s):\n    '''\n    Write a function to find the surface area of a hexagon and a square.\n    '''\n    return 6*s**2\ndef surfacearea_tricorn(r1,r2,r3):\n    '''\n    Write a function to find the surface area of a tricorn.\n    '''\n    return 2*(math.pi*r1**2 + math.pi*r2**2 + math.pi*r3**2)\ndef surfacearea_tricorn_square(r1,r2,r3):\n    '''\n    Write a function to find the surface area of a tricorn and a square.\n    '''\n    return 2*(math.pi*r1**2 + math.pi*r2**2 + math.pi*r3**2)\ndef surfacearea_tricorn_octagon(r1,r2,r3):\n    '''\n    Write a function to find the surface area of a tricorn and a octagon.\n    '''\n    return 8*(math.pi*r1**2 + math.pi*r2**2 + math.pi*r3**2)\ndef surfacearea_tricorn_octagon_square(r1,r2,r3):\n    '''\n    Write a function to find the surface area of a tricorn and an octagon and a square.\n    '''\n    return 8*(math.pi*r1**2 + math.pi*r2**2 + math.pi*r3**2)\ndef surfacearea_tricorn_octagon_hexagon(r1,r2,r3):\n    '''\n    Write a function to find the surface area of a tricorn and an octagon and a hexagon.\n    '''\n    return 6*(math.pi*r1**2 + math.pi*r2**2 + math.pi*r3**2)\ndef surfacearea_tricorn_octagon_hexagon_square(r1,r2,r3):\n    '''\n    Write a function to find the surface area of a tricorn and an octagon and a hexagon and a square.\n    '''\n    return 6*(math.pi*r1**2 + math.pi*r2**2 + math.pi*r3**2)\ndef surfacearea_square_circle(r):\n    '''\n    Write a function to find the surface area of a square and a circle.\n    '''\n    return math.pi*r**2\ndef surfacearea_square_circle_square(r):\n    '''\n    Write a function to find the surface area of a square and a circle and a square.\n    '''\n    return math.pi*r**2\ndef surfacearea_square_rectangle(b,h):\n    '''\n    Write a function to find the surface area of a square and a rectangle.\n    '''\n    return 2*b*h\ndef surfacearea_square_rectangle_square(b,h):\n    '''\n    Write a function to find the surface area of a square and a rectangle and a square.\n    '''\n    return 2*b*h\ndef surfacearea_square_cone(r,h):\n    '''\n    Write a function to find the surface area of a square and a cone.\n    '''\n    return math.pi*r**2 + math.pi*r*h\ndef surfacearea_square_cone_square(r,h):\n    '''\n    Write a function to find the surface area of a square and a cone and a square.\n    '''\n    return math.pi*r**2 + math.pi*r*h\ndef surfacearea_square_dodecagon(s):\n    '''\n    Write a function to find the surface area of a square and a dodecagon.\n    '''\n    return 24*s**2\ndef surfacearea_square_octagon(s):\n    '''\n    Write a function to find the surface area of a square and an octagon.\n    '''\n    return 8*s**2\ndef surfacearea_square_octagon_square(s):\n    '''\n    Write a function to find the surface area of a square and an octagon and a square.\n    '''\n    return 8*s**2\ndef surfacearea_square_triangle(b,h):\n    '''\n    Write a function to find the surface area of a square and a triangle.\n    '''\n    return b*h\ndef surfacearea_square_triangle_square(b,h):\n    '''\n    Write a function to find the surface area of a square and a triangle and a square.\n    '''\n    return b*h\ndef surfacearea_square_hexagon(s):\n    '''\n    Write a function to find the surface area of a square and a hexagon.\n    '''\n    return 6*s**2\ndef surfacearea_square_hexagon_square(s):\n    '''\n    Write a function to find the surface area of a square and a hexagon and a square.\n    '''\n    return 6*s**2\ndef surfacearea_square_tricorn(r1,r2,r3):\n    '''\n    Write a function to find the surface area of a square and a tricorn.\n    '''\n    return 2*(math.pi*r1**2 + math.pi*r2**2 + math.pi*r3**2)\ndef surfacearea_square_tricorn_square(r1,r2,r3):\n    '''\n    Write a function to find the surface area of a square and a tricorn and a square.\n    '''\n    return 2*(math.p"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa = 4 * math.pi * (r**2)\n    return sa\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(2*n + 1) // 2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (2 * n * (n ** 2 + 1) / 3 + n**2 - (n**3 - n**2)**2 / (2*n))\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n*(2*n - 1)) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/2*n*(3*n - 2)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return 2*(2**n - 1) / 3\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(((3**0.5)/2) * (n**2 + n))\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    from math import sqrt\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 7\n    else:\n        return 7*sqrt(3)*(2*n-1)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return (1 + 2 ** (1 / 2)) ** n - 1\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (2 * n + 1) / 2)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n % 2 == 0:\n        return -1\n    else:\n        return n * (2 * n - 1) / 2\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d = {}\n    for d1 in (dict1,dict2,dict3):\n        d.update(d1)\n    return d\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    d = {}\n    d.update(dict1)\n    d.update(dict2)\n    return d\ndef merge_dictionaries_one(dict1):\n    '''\n    Write a function to merge a single dictionary into a single dictionary.\n    '''\n    d = {}\n    d.update(dict1)\n    return d\ndef merge_dictionaries(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d = {}\n    for d1 in (dict1,dict2,dict3):\n        d.update(d1)\n    return d\ndef merge_dictionaries_rec(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    d = {}\n    if len(dict1) > len(dict2):\n        for key,value in dict1.iteritems():\n            if key in dict2.keys():\n                d[key] = [value,dict2[key]]\n            else:\n                d[key] = value\n    else:\n        for key,value in dict2.iteritems():\n            if key in dict1.keys():\n                d[key] = [value,dict1[key]]\n            else:\n                d[key] = value\n    return d\ndef merge_dictionaries_rec_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    d = {}\n    for key,value in dict1.iteritems():\n        if key in dict2.keys():\n            d[key] = [value,dict2[key]]\n        else:\n            d[key] = value\n    for key,value in dict2.iteritems():\n        if key not in dict1.keys():\n            d[key] = value\n    return d\ndef merge_dictionaries_rec_three(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d = {}\n    for key,value in dict1.iteritems():\n        if key in dict2.keys():\n            d[key] = [value,dict2[key]]\n        else:\n            d[key] = value\n    for key,value in dict2.iteritems():\n        if key not in dict1.keys():\n            d[key] = value\n    for key,value in dict3.iteritems():\n        if key not in d.keys():\n            d[key] = value\n    return d\ndef merge_dictionaries_rec_four(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    d = {}\n    for key,value in dict1.iteritems():\n        d[key] = [value,dict2[key]]\n    for key,value in dict2.iteritems():\n        d[key] = [value,dict1[key]]\n    return d\ndef merge_dictionaries_rec_five(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    d = {}\n    for key,value in dict1.iteritems():\n        d[key] = value+dict2[key]\n    return d\ndef merge_dictionaries_rec_six(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    d = {}\n    for key,value in dict1.iteritems():\n        d[key] = value+dict2[key]\n    for key,value in dict2.iteritems():\n        d[key] = value+dict1[key]\n    return d\ndef merge_dictionaries_rec_seven(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    d = {}\n    for key,value in dict1.iteritems():\n        if key in dict2.keys():\n            d[key] = [value,dict2[key]]\n        else:\n            d[key] = value\n    for key,value in dict2.iteritems():\n        if key not in dict1.keys():\n            d[key] = value\n    return d\ndef merge_dictionaries_rec_eight(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    d = {}\n    for key,value in dict1.iteritems():\n        d[key] = [value,dict2[key]]\n    for key,value in dict2.iteritems():\n        if key not in d.keys():\n            d[key] = value\n    return d\ndef merge_dictionaries_rec_nine(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    d = {}\n    for key,value in dict1.iteritems():\n        if key in dict2.keys():\n            d[key] = [value,dict2[key]]\n        else:\n            d[key] = value\n    for key,value in dict2.iteritems():\n        if key not in dict1.keys():\n            d[key] = value\n    return d\ndef merge_dictionaries_rec_ten(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    d = {}\n    for key,value in dict1.iteritems():\n        if key in dict2.keys():\n            d[key] = [value,dict2[key]]\n        else:\n            d[key] = value\n    for key,value in dict2.iteritems():\n        if key not in d.keys():\n            d[key] = value\n    return d\ndef merge_dictionaries_rec_eleven(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    d = {}\n    for key,value in dict1.iteritems():\n        if key in dict2.keys():\n            d[key] = [value,dict2[key]]\n        else:\n            d[key] = value\n    for key,value in dict2.iteritems():\n        if key not in d.keys():\n            d[key] = value\n    return d\ndef merge_dictionaries_rec_twelve(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    d = {}\n    for key,value in dict1.iteritems():\n        if key in dict2.keys():\n            d[key] = [value,dict2[key]]\n        else:\n            d[key] = value\n    for key,value in dict2.iteritems():\n        if key not in d.keys():\n            d[key] = value\n    return d\ndef merge_dictionaries_rec_thirteen(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    d = {}\n    for key,value in dict1.iteritems():\n        if key in dict2.keys():\n            d[key] = [value,dict2[key]]\n        else:\n            d[key] = value\n    for key,value in dict2.iteritems():\n        if key not in d.keys():\n            d[key] = value\n    return d\ndef merge_dictionaries_rec_fourteen(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    d = {}\n    for key,value in dict1.iteritems():\n        if key in dict2.keys():\n            d[key] = [value,dict2[key]]\n        else:\n            d[key] = value\n    for key,value in dict2.iteritems():\n        if key not in d.keys():\n        "
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    \n    def merge_dicts(dict1,dict2):\n        '''\n        Write a function to merge two dictionaries. \n        '''\n        result = {}\n        for key in dict1.keys():\n            result[key] = [dict1[key], dict2[key]]\n        return result\n    \n    def merge_dicts_two(dict1,dict2):\n        '''\n        Write a function to merge two dictionaries. \n        '''\n        result = {}\n        for key in dict1.keys():\n            result[key] = [dict1[key], dict2[key]]\n        return result\n    \n    def merge_dicts_three(dict1,dict2,dict3):\n        '''\n        Write a function to merge three dictionaries. \n        '''\n        result = {}\n        for key in dict1.keys():\n            result[key] = [dict1[key], dict2[key], dict3[key]]\n        return result\n    \n    \n    return merge_dicts_three(dict1,dict2,dict3)\n    # return merge_dicts_two(dict1,dict2)\n    # return merge_dicts(dict1,dict2)\n    # return merge_dicts_three(dict1,dict2,dict3)\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if isinstance(dict1, dict) and isinstance(dict2, dict) and isinstance(dict3, dict):\n        mergedDict = {}\n        for key in set(dict1.keys()) | set(dict2.keys()) | set(dict3.keys()):\n            if key in dict1 and key in dict2 and key in dict3:\n                mergedDict[key] = [dict1[key], dict2[key], dict3[key]]\n            elif key in dict1 and key in dict2:\n                mergedDict[key] = [dict1[key], dict2[key]]\n            elif key in dict1 and key in dict3:\n                mergedDict[key] = [dict1[key], dict3[key]]\n            elif key in dict2 and key in dict3:\n                mergedDict[key] = [dict2[key], dict3[key]]\n            else:\n                mergedDict[key] = dict1[key]\n        return mergedDict\n    else:\n        print('Please enter a dictionary for each one')\n        return\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {}\n    for item in dict1:\n        result[item] = dict1[item]\n    for item in dict2:\n        result[item] = dict2[item]\n    for item in dict3:\n        result[item] = dict3[item]\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for key in dict1:\n        dict4[key] = dict1[key]\n    for key in dict2:\n        dict4[key] = dict2[key]\n    for key in dict3:\n        dict4[key] = dict3[key]\n    return dict4\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    print \"dictionary1: \",dict1\n    print \"dictionary2: \",dict2\n    print \"dictionary3: \",dict3\n    print \"merged_dict: \",(dict1.copy()).update((dict2.copy()).update(dict3.copy()))\n    print \"dictionary1: \",dict1\n    print \"dictionary2: \",dict2\n    print \"dictionary3: \",dict3\n    print \"merged_dict: \",(dict1.copy()).update(dict2.copy()).update(dict3.copy())\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    for key in dict1.keys():\n        if key in dict2.keys():\n            dict2[key] = dict1[key]\n        elif key in dict3.keys():\n            dict2[key] = dict3[key]\n        else:\n            dict2[key] = dict1[key]\n    return dict2\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Solution 1\n    # result_dict = {}\n    # for dict in (dict1,dict2,dict3):\n    #     result_dict.update(dict)\n    # return result_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merge_dictionaries = {}\n    for i in dict1.keys():\n        merge_dictionaries[i] = dict1[i]\n    for j in dict2.keys():\n        if j in merge_dictionaries.keys():\n            merge_dictionaries[j] += dict2[j]\n        else:\n            merge_dictionaries[j] = dict2[j]\n    for k in dict3.keys():\n        if k in merge_dictionaries.keys():\n            merge_dictionaries[k] += dict3[k]\n        else:\n            merge_dictionaries[k] = dict3[k]\n    return merge_dictionaries\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if len(dict1) == 0:\n        return dict2\n    elif len(dict2) == 0:\n        return dict1\n    elif len(dict3) == 0:\n        return dict2\n    else:\n        keys = dict1.keys() | dict2.keys() | dict3.keys()\n        values = dict1.values() | dict2.values() | dict3.values()\n        return dict(zip(keys,values))\n    \n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # h = {}\n    # for item in list1:\n    #     h[item] = h.get(item, 0) + 1\n    # return h\n    return collections.Counter(list1)\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i not in freq:\n            freq[i] = 0\n        freq[i] += 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Dictionary\n    return collections.Counter(list1)\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    list2 = collections.Counter(list1)\n    print (list2)\n    return list2\n    \ndef count_hundred(list2):\n    '''\n    Write a function that takes a list of numbers and returns a list of the number of times the number at that index appeared in the list.\n    '''\n    list3 = []\n    for number in list2:\n        if number == 100:\n            list3.append(1)\n        else:\n            list3.append(0)\n    return list3\n    \ndef word_count(filename):\n    '''\n    Write a function that takes a filename as input, and returns a list of all the words in the file.\n    '''\n    file1 = open(filename, 'r')\n    list4 = []\n    for line in file1:\n        list4.append(line.strip())\n    return list4\n    \ndef letter_count(list4):\n    '''\n    Write a function that takes a list of words as input and returns a list of tuples with the word and the number of times it appeared.\n    '''\n    list5 = []\n    for word in list4:\n        count = 0\n        for letter in word:\n            count = count + 1\n        list5.append((word, count))\n    return list5\n    \ndef dict_list(list5):\n    '''\n    Write a function that takes a list of tuples and creates a dictionary with the first element as the key and the second element as the value.\n    '''\n    dict1 = {}\n    for (word, count) in list5:\n        dict1[word] = count\n    return dict1\n    \ndef word_dict(list5):\n    '''\n    Write a function that takes a list of tuples and creates a dictionary with the first element as the key and the second element as the value.\n    '''\n    dict1 = {}\n    for (word, count) in list5:\n        dict1[word] = count\n    return dict1\n    \ndef dict_letter(dict1):\n    '''\n    Write a function that takes a dictionary of words and returns a dictionary with the number of times the letter appears in the word as the value.\n    '''\n    dict2 = {}\n    for word, count in dict1.items():\n        for letter in word:\n            if letter not in dict2:\n                dict2[letter] = 1\n            else:\n                dict2[letter] = dict2[letter] + 1\n    return dict2\n    \ndef dict_letter_freq(dict2):\n    '''\n    Write a function that takes a dictionary with the number of times each letter appears in the word as the value, and returns a list of tuples with the letter and the percentage of the word that uses that letter as the key value pair.\n    '''\n    dict3 = {}\n    for letter, count in dict2.items():\n        dict3[letter] = round((count / len(dict2)) * 100, 2)\n    return dict3\n    \ndef dict_word_freq(dict1):\n    '''\n    Write a function that takes a dictionary with the number of times each letter appears in the word as the value, and returns a list of tuples with the word and the percentage of the word that uses that letter as the key value pair.\n    '''\n    dict2 = {}\n    for word, count in dict1.items():\n        dict2[word] = round((count / len(dict1)) * 100, 2)\n    return dict2\n    \ndef word_dict_letter(list5):\n    '''\n    Write a function that takes a list of tuples and creates a dictionary with the first element as the key and the second element as the value.\n    '''\n    dict1 = {}\n    for (word, count) in list5:\n        dict1[word] = count\n    return dict1\n    \ndef word_dict_letter_freq(dict1):\n    '''\n    Write a function that takes a dictionary with the number of times each letter appears in the word as the value, and returns a list of tuples with the letter and the percentage of the word that uses that letter as the key value pair.\n    '''\n    dict2 = {}\n    for word, count in dict1.items():\n        dict2[word] = round((count / len(dict1)) * 100, 2)\n    return dict2\n    \ndef letter_dict(dict1):\n    '''\n    Write a function that takes a dictionary with the number of times each letter appears in the word as the value, and returns a list of tuples with the letter and the percentage of the word that uses that letter as the key value pair.\n    '''\n    dict2 = {}\n    for word, count in dict1.items():\n        for letter in word:\n            if letter not in dict2:\n                dict2[letter] = count\n            else:\n                dict2[letter] = dict2[letter] + count\n    return dict2\n    \ndef letter_dict_freq(dict1):\n    '''\n    Write a function that takes a dictionary with the number of times each letter appears in the word as the value, and returns a list of tuples with the letter and the percentage of the word that uses that letter as the key value pair.\n    '''\n    dict2 = {}\n    for word, count in dict1.items():\n        for letter in word:\n            if letter not in dict2:\n                dict2[letter] = round((count / len(dict1)) * 100, 2)\n            else:\n                dict2[letter] = dict2[letter] + round((count / len(dict1)) * 100, 2)\n    return dict2\n    \ndef letter_dict_freq(dict1):\n    '''\n    Write a function that takes a dictionary with the number of times each letter appears in the word as the value, and returns a list of tuples with the letter and the percentage of the word that uses that letter as the key value pair.\n    '''\n    dict2 = {}\n    for word, count in dict1.items():\n        for letter in word:\n            if letter not in dict2:\n                dict2[letter] = round((count / len(dict1)) * 100, 2)\n            else:\n                dict2[letter] = dict2[letter] + round((count / len(dict1)) * 100, 2)\n    return dict2\n    \ndef main():\n    filename = 'alice.txt'\n    list6 = word_dict(word_count(filename))\n    dict7 = dict_list(list6)\n    dict8 = word_dict(word_count(filename))\n    dict9 = letter_dict(dict8)\n    dict10 = freq_count(list6)\n    dict11 = letter_dict_freq(dict10)\n    dict12 = dict_letter(dict11)\n    print (dict12)\n    \nmain()\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] = freq_dict[item] + 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    list_count = {}\n    for item in list1:\n        if item not in list_count:\n            list_count[item] = 0\n        list_count[item] += 1\n    return list_count\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d={}\n    for item in list1:\n        if item in d:\n            d[item]+=1\n        else:\n            d[item]=1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    list1 = [x for x in list1 if x!= None]\n    count = collections.Counter(list1)\n    return count\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = collections.defaultdict(int)\n    for ele in list1:\n        dict1[ele] += 1\n    return dict1\ndef line_histogram(file_name):\n    '''\n    Write a function to generate a line histogram, given the name of a file containing a series of lines of text.\n    '''\n    hist = freq_count(open(file_name, 'r').read().split('\\n'))\n    for key, value in hist.items():\n        print key, value\ndef word_histogram(file_name):\n    '''\n    Write a function to generate a word histogram, given the name of a file containing a series of words, one per line.\n    '''\n    hist = {}\n    for line in open(file_name, 'r').read().split('\\n'):\n        for word in line.split(' '):\n            if word in hist:\n                hist[word] += 1\n            else:\n                hist[word] = 1\n    for word, count in hist.items():\n        print word, count\ndef new_lines(file_name):\n    '''\n    Write a function to generate a new file containing all the lines in the first file but with all instances of the word \"the\" removed.\n    '''\n    new_file_name = file_name[:len(file_name)-4] + 'new' + file_name[len(file_name)-4:]\n    for line in open(file_name, 'r').readlines():\n        new_file = open(new_file_name, 'w')\n        new_file.write(line.replace('the', ''))\n        new_file.close()\ndef remove_punctuation(file_name):\n    '''\n    Write a function to remove punctuation from a string.\n    '''\n    for line in open(file_name, 'r').readlines():\n        new_file = open(file_name[:len(file_name)-4] + 'new' + file_name[len(file_name)-4:], 'w')\n        for char in line:\n            if char not in ',.;:?!@#$%^&*()-_=+[]{}|/<>':\n                new_file.write(char)\n        new_file.close()\ndef reverse_words(file_name):\n    '''\n    Write a function to reverse the order of the words in a file.\n    '''\n    for line in open(file_name, 'r').readlines():\n        new_file = open(file_name[:len(file_name)-4] + 'new' + file_name[len(file_name)-4:], 'w')\n        for word in line.split(' '):\n            new_file.write(word[::-1] +'')\n        new_file.close()\ndef remove_stop_words(file_name):\n    '''\n    Write a function to remove all the stop words from a file.\n    '''\n    stop_words = ['ourselves', 'hers', 'between', 'yourself', 'but', 'again', 'there', 'about', 'once', 'during', 'out','very', 'having', 'with', 'they', 'own', 'an', 'be','some', 'for', 'do', 'its', 'yours','such', 'into', 'of','most', 'itself', 'other', 'off', 'is','s', 'am', 'or', 'who', 'as', 'from', 'him', 'each', 'the', 'themselves', 'until', 'below', 'are', 'we', 'these', 'your', 'his', 'through', 'don', 'nor','me', 'were', 'her','more', 'himself', 'this', 'down','should', 'our', 'their', 'while', 'above', 'both', 'up', 'to', 'ours', 'had','she', 'all', 'no', 'when', 'at', 'any', 'before', 'them','same', 'and', 'been', 'have', 'in', 'will', 'on', 'does', 'yourselves', 'then', 'that', 'because', 'what', 'over', 'why','so', 'can', 'did', 'not', 'now', 'under', 'he', 'you', 'herself', 'has', 'just', 'where', 'too', 'only','myself', 'which', 'those', 'i', 'after', 'few', 'whom', 't', 'being', 'if', 'theirs','my', 'against', 'a', 'by', 'doing', 'it', 'how', 'further', 'was', 'here', 'than']\n    for line in open(file_name, 'r').readlines():\n        new_file = open(file_name[:len(file_name)-4] + 'new' + file_name[len(file_name)-4:], 'w')\n        for word in line.split(' '):\n            if word.lower() not in stop_words:\n                new_file.write(word +'')\n        new_file.close()\ndef spell_checker(file_name):\n    '''\n    Write a function to spell check a word.\n    '''\n    from enchant import Dict\n    for line in open(file_name, 'r').readlines():\n        new_file = open(file_name[:len(file_name)-4] + 'new' + file_name[len(file_name)-4:], 'w')\n        for word in line.split(' '):\n            dict1 = Dict(\"en_US\")\n            if not dict1.check(word):\n                new_file.write(word +'')\n        new_file.close()\ndef remove_rare_words(file_name):\n    '''\n    Write a function to remove all words that occur less than 3 times in a file.\n    '''\n    for line in open(file_name, 'r').readlines():\n        new_file = open(file_name[:len(file_name)-4] + 'new' + file_name[len(file_name)-4:], 'w')\n        for word in line.split(' '):\n            if line.count(word) > 2:\n                new_file.write(word +'')\n        new_file.close()\ndef word_count(file_name):\n    '''\n    Write a function to get the word count of a file, one per line.\n    '''\n    word_count = {}\n    for line in open(file_name, 'r').readlines():\n        line = line.split(' ')\n        for word in line:\n            if word in word_count:\n                word_count[word] += 1\n            else:\n                word_count[word] = 1\n    return word_count\ndef word_count_without_stop_words(file_name):\n    '''\n    Write a function to get the word count of a file, one per line, excluding stop words.\n    '''\n    stop_words = ['ourselves', 'hers', 'between', 'yourself', 'but', 'again', 'there', 'about', 'once', 'during', 'out','very', 'having', 'with', 'they', 'own', 'an', 'be','some', 'for', 'do', 'its', 'yours','such', 'into', 'of','most', 'itself', 'other', 'off', 'is','s', 'am', 'or', 'who', 'as', 'from', 'him', 'each', 'the', 'themselves', 'until', 'below', 'are', 'we', 'these', 'your', 'his', 'through', 'don', 'nor','me', 'were', 'her','more', 'himself', 'this', 'down','should', 'our', 'their', 'while', 'above', 'both', 'up', 'to', 'ours', 'had','she', 'all', 'no', 'when', 'at', 'any', 'before', 'them','same', 'and', 'been', 'have', 'in', 'will', 'on', 'does', 'yourselves', 'then', 'that', 'because', 'what', 'over', 'why','so', 'can', 'did', 'not', 'now', 'under', 'he', 'you', 'herself', 'has', 'just', 'where', 'too', 'only','myself', 'which', 'those', '"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 0\n    lst = [int(i) for i in str(N)]\n    if N < 0:\n        return int(str(abs(N))[1])\n    else:\n        return int(str(N)[:-1])\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    left, right = 1, N\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid * (mid + 1) <= 2 * N:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest_num = int(N)\n    while closest_num > 1:\n        if abs(closest_num - N) < abs(closest_num - (closest_num - 1)):\n            closest_num -= 1\n        else:\n            closest_num -= 2\n    return closest_num\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_val = 1\n    for i in range(N-1,0,-1):\n        if abs(N-i) < abs(N-min_val):\n            min_val = i\n    return min_val\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return 2**N - 1\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_diff = abs(N-1)\n    min_num = 1\n    for num in range(2,N+1):\n        diff = abs(N-num)\n        if diff < min_diff:\n            min_diff = diff\n            min_num = num\n    return min_num\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    largest_int = 10**6\n    smallest_int = -10**6\n    closest_int = 0\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return -1\n    if N == 2:\n        return -1\n    if N == 3:\n        return -1\n    if N == 4:\n        return 2\n    if N == 5:\n        return 3\n    if N == 6:\n        return 5\n    if N == 7:\n        return 6\n    if N == 8:\n        return 7\n    if N == 9:\n        return 8\n    if N == 10:\n        return 9\n    if N == 11:\n        return 10\n    if N == 12:\n        return 11\n    if N == 13:\n        return 12\n    if N == 14:\n        return 13\n    if N == 15:\n        return 14\n    if N == 16:\n        return 15\n    if N == 17:\n        return 16\n    if N == 18:\n        return 17\n    if N == 19:\n        return 19\n    if N == 20:\n        return 19\n    if N == 21:\n        return 20\n    if N == 22:\n        return 21\n    if N == 23:\n        return 22\n    if N == 24:\n        return 22\n    if N == 25:\n        return 22\n    if N == 26:\n        return 23\n    if N == 27:\n        return 24\n    if N == 28:\n        return 25\n    if N == 29:\n        return 26\n    if N == 30:\n        return 26\n    if N == 31:\n        return 27\n    if N == 32:\n        return 27\n    if N == 33:\n        return 28\n    if N == 34:\n        return 29\n    if N == 35:\n        return 29\n    if N == 36:\n        return 30\n    if N == 37:\n        return 31\n    if N == 38:\n        return 32\n    if N == 39:\n        return 32\n    if N == 40:\n        return 33\n    if N == 41:\n        return 34\n    if N == 42:\n        return 35\n    if N == 43:\n        return 36\n    if N == 44:\n        return 37\n    if N == 45:\n        return 38\n    if N == 46:\n        return 38\n    if N == 47:\n        return 39\n    if N == 48:\n        return 40\n    if N == 49:\n        return 41\n    if N == 50:\n        return 41\n    if N == 51:\n        return 42\n    if N == 52:\n        return 43\n    if N == 53:\n        return 44\n    if N == 54:\n        return 44\n    if N == 55:\n        return 45\n    if N == 56:\n        return 46\n    if N == 57:\n        return 47\n    if N == 58:\n        return 48\n    if N == 59:\n        return 48\n    if N == 60:\n        return 49\n    if N == 61:\n        return 50\n    if N == 62:\n        return 50\n    if N == 63:\n        return 51\n    if N == 64:\n        return 52\n    if N == 65:\n        return 53\n    if N == 66:\n        return 54\n    if N == 67:\n        return 54\n    if N == 68:\n        return 55\n    if N == 69:\n        return 56\n    if N == 70:\n        return 57\n    if N == 71:\n        return 58\n    if N == 72:\n        return 59\n    if N == 73:\n        return 60\n    if N == 74:\n        return 61\n    if N == 75:\n        return 62\n    if N == 76:\n        return 63\n    if N == 77:\n        return 64\n    if N == 78:\n        return 65\n    if N == 79:\n        return 66\n    if N == 80:\n        return 67\n    if N == 81:\n        return 68\n    if N == 82:\n        return 69\n    if N == 83:\n        return 70\n    if N == 84:\n        return 71\n    if N == 85:\n        return 72\n    if N == 86:\n        return 73\n    if N == 87:\n        return 74\n    if N == 88:\n        return 75\n    if N == 89:\n        return 76\n    if N == 90:\n        return 77\n    if N == 91:\n        return 78\n    if N == 92:\n        return 79\n    if N == 93:\n        return 80\n    if N == 94:\n        return 81\n    if N == 95:\n        return 82\n    if N == 96:\n        return 83\n    if N == 97:\n        return 84\n    if N == 98:\n        return 84\n    if N == 99:\n        return 85\n    if N == 100:\n        return 86\n    if N == 101:\n        return 87\n    if N == 102:\n        return 88\n    if N == 103:\n        return 89\n    if N == 104:\n        return 90\n    if N == 105:\n        return 91\n    if N == 106:\n        return 92\n    if N == 107:\n        return 93\n    if N == 108:\n        return 94\n    if N == 109:\n        return 95\n    if N == 110:\n        return 96\n    if N == 111:\n        return 97\n    if N == 112:\n        return 98\n    if N == 113:\n        return 99\n    if N == 114:\n        return 100\n    if N == 115:\n        return 101\n    if N == 116:\n        return 102\n    if N == 117:\n        return 103\n    if N == 118:\n        return 104\n    if N == 119:\n        return 105\n    if N == 120:\n        return 106\n    if N == 121:\n        return 107\n    if N == 122:\n        return 108\n    if N == 123:\n        return 109\n    if N == 124:\n        return 110\n    if N == 125:\n        return 111\n    if N == 126:\n        return 112\n    if N == 127:\n        return 113\n    if N == 128:\n        return 114\n    if N == 129:\n        return 115\n    if N == 130:\n        return 116\n    if N == 131:\n        return 117\n    if N == 132:\n        return 118\n    if N == 133:\n        return 119\n    if N == 134:\n        return 120\n    if N == 135:\n        return 121\n    if N == 136:\n        return 122\n    if N == 137:\n        return 123\n    if N == 138:\n        return 124\n    if N == 139:\n        return 125\n    if N == 140:\n        return 126\n    if N == 141:\n        return 127\n    if N == 142:\n        return 128\n    if N == 143:\n        return 129\n    if N == 144:\n        return 130\n    if N == 145:\n        return 131\n    if N == 146:\n        return 132\n    if N == 147:\n        return 133\n    if N == 148:\n        return 134\n    if N == 149:\n        return 135\n    if N == 150:\n        return 136\n    if N == 151:\n        return 137\n    if N == 152:\n        return 138\n    if N == 153:\n        return 139\n    if N == 154:\n        return 140\n    if N == 155:\n        return 141\n    if N == 156:\n        return 142\n    if N == 157:\n        return 143\n    if N == 158:\n        return 144\n    if N == 159:\n        return 145\n    if N == 160:\n        return 146\n    if N == 161:\n        return 147\n    if N == 162:\n        return 148\n    if N == 163:\n        return 149\n    if N == 164:\n        return 150\n    if N == 165:\n        return 151\n    if N == 166:\n        return 152\n    if N == 167:\n        return 153\n    if N == 168:\n        return 154\n    if N == 169:\n        return 155\n    if N == 170:\n        return 156\n    if N == 171:\n        return 157\n    if N == 172:\n        return 158\n    if N == 173:\n        return 159\n    if N == 174:\n        return 160\n    if N == 175:\n        return 161\n    if N == 176:\n        return 162\n    if N == 177:\n        return 163\n    if N == 178:\n        return 164\n    if N == 179:\n        return 165\n    if N == 180:\n        return 166\n    if N == 181:\n        return 167\n    if N == 182:\n        return 168\n    if N == 183:\n        return 169\n    i"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 1\n    elif N == 2:\n        return 1\n    elif N == 3:\n        return 1\n    elif N == 4:\n        return 2\n    elif N == 5:\n        return 2\n    elif N == 6:\n        return 2\n    elif N == 7:\n        return 3\n    elif N == 8:\n        return 3\n    elif N == 9:\n        return 3\n    elif N == 10:\n        return 4\n    elif N == 11:\n        return 4\n    elif N == 12:\n        return 4\n    elif N == 13:\n        return 4\n    elif N == 14:\n        return 5\n    elif N == 15:\n        return 5\n    elif N == 16:\n        return 5\n    elif N == 17:\n        return 6\n    elif N == 18:\n        return 6\n    elif N == 19:\n        return 6\n    elif N == 20:\n        return 6\n    elif N == 21:\n        return 7\n    elif N == 22:\n        return 7\n    elif N == 23:\n        return 7\n    elif N == 24:\n        return 7\n    elif N == 25:\n        return 8\n    elif N == 26:\n        return 8\n    elif N == 27:\n        return 8\n    elif N == 28:\n        return 8\n    elif N == 29:\n        return 8\n    elif N == 30:\n        return 8\n    elif N == 31:\n        return 9\n    elif N == 32:\n        return 9\n    elif N == 33:\n        return 9\n    elif N == 34:\n        return 9\n    elif N == 35:\n        return 9\n    elif N == 36:\n        return 9\n    elif N == 37:\n        return 10\n    elif N == 38:\n        return 10\n    elif N == 39:\n        return 10\n    elif N == 40:\n        return 10\n    elif N == 41:\n        return 10\n    elif N == 42:\n        return 10\n    elif N == 43:\n        return 11\n    elif N == 44:\n        return 11\n    elif N == 45:\n        return 11\n    elif N == 46:\n        return 11\n    elif N == 47:\n        return 11\n    elif N == 48:\n        return 11\n    elif N == 49:\n        return 12\n    elif N == 50:\n        return 12\n    elif N == 51:\n        return 12\n    elif N == 52:\n        return 12\n    elif N == 53:\n        return 12\n    elif N == 54:\n        return 12\n    elif N == 55:\n        return 12\n    elif N == 56:\n        return 12\n    elif N == 57:\n        return 13\n    elif N == 58:\n        return 13\n    elif N == 59:\n        return 13\n    elif N == 60:\n        return 13\n    elif N == 61:\n        return 13\n    elif N == 62:\n        return 13\n    elif N == 63:\n        return 13\n    elif N == 64:\n        return 14\n    elif N == 65:\n        return 14\n    elif N == 66:\n        return 14\n    elif N == 67:\n        return 14\n    elif N == 68:\n        return 14\n    elif N == 69:\n        return 14\n    elif N == 70:\n        return 14\n    elif N == 71:\n        return 14\n    elif N == 72:\n        return 14\n    elif N == 73:\n        return 14\n    elif N == 74:\n        return 15\n    elif N == 75:\n        return 15\n    elif N == 76:\n        return 15\n    elif N == 77:\n        return 15\n    elif N == 78:\n        return 15\n    elif N == 79:\n        return 15\n    elif N == 80:\n        return 15\n    elif N == 81:\n        return 15\n    elif N == 82:\n        return 15\n    elif N == 83:\n        return 16\n    elif N == 84:\n        return 16\n    elif N == 85:\n        return 16\n    elif N == 86:\n        return 16\n    elif N == 87:\n        return 16\n    elif N == 88:\n        return 16\n    elif N == 89:\n        return 16\n    elif N == 90:\n        return 17\n    elif N == 91:\n        return 17\n    elif N == 92:\n        return 17\n    elif N == 93:\n        return 17\n    elif N == 94:\n        return 17\n    elif N == 95:\n        return 17\n    elif N == 96:\n        return 17\n    elif N == 97:\n        return 17\n    elif N == 98:\n        return 17\n    elif N == 99:\n        return 17\n    elif N == 100:\n        return 18\n    elif N == 101:\n        return 18\n    elif N == 102:\n        return 18\n    elif N == 103:\n        return 18\n    elif N == 104:\n        return 18\n    elif N == 105:\n        return 18\n    elif N == 106:\n        return 18\n    elif N == 107:\n        return 18\n    elif N == 108:\n        return 18\n    elif N == 109:\n        return 19\n    elif N == 110:\n        return 19\n    elif N == 111:\n        return 19\n    elif N == 112:\n        return 19\n    elif N == 113:\n        return 19\n    elif N == 114:\n        return 19\n    elif N == 115:\n        return 19\n    elif N == 116:\n        return 19\n    elif N == 117:\n        return 19\n    elif N == 118:\n        return 19\n    elif N == 119:\n        return 19\n    elif N == 120:\n        return 19\n    elif N == 121:\n        return 19\n    elif N == 122:\n        return 19\n    elif N == 123:\n        return 19\n    elif N == 124:\n        return 19\n    elif N == 125:\n        return 19\n    elif N == 126:\n        return 19\n    elif N == 127:\n        return 19\n    elif N == 128:\n        return 19\n    elif N == 129:\n        return 19\n    elif N == 130:\n        return 19\n    elif N == 131:\n        return 19\n    elif N == 132:\n        return 19\n    elif N == 133:\n        return 19\n    elif N == 134:\n        return 19\n    elif N == 135:\n        return 19\n    elif N == 136:\n        return 19\n    elif N == 137:\n        return 19\n    elif N == 138:\n        return 19\n    elif N == 139:\n        return 19\n    elif N == 140:\n        return 19\n    elif N == 141:\n        return 19\n    elif N == 142:\n        return 19\n    elif N == 143:\n        return 19\n    elif N == 144:\n        return 19\n    elif N == 145:\n        return 19\n    elif N == 146:\n        return 19\n    elif N == 147:\n        return 19\n    elif N == 148:\n        return 19\n    elif N == 149:\n        return 19\n    elif N == 150:\n        return 19\n    elif N == 151:\n        return 19\n    elif N == 152:\n        return 19\n    elif N == 153:\n        return 19\n    elif N == 154:\n        return 19\n    elif N == 155:\n        return 19\n    elif N == 156:\n        return 19\n    elif N == 157:\n        return 19\n    elif N == 158:\n        return 19\n    elif N == 159:\n        return 19\n    elif N == 160:\n        return 19\n    elif N == 161:\n        return 19\n    elif N == 162:\n        return 19\n    elif N == 163:\n        return 19\n    elif N == 164:\n        return 19\n    elif N == 165:\n        return 19\n    elif N == 166:\n        return 19\n    elif N == 167:\n        return 19\n    elif N == 168:\n        return 19\n    eli"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    s = [0]\n    for i in range(1, N):\n        if i < 3:\n            s.append(i)\n        else:\n            s.append(s[-1] + s[-2] + s[-3])\n    return s[-1]\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    \n    \n    str1 = max(list1, key = len)\n    print str1\n    return len(str1)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len_list = []\n    for i in list1:\n        len_list.append(len(i))\n    return(max(len_list))\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return max(map(len,list1))\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length = 0\n    for word in list1:\n        if len(word) > length:\n            length = len(word)\n    return length\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return max([len(w) for w in list1])\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return max(len(word) for word in list1)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length=0\n    for each in list1:\n        if len(each)>length:\n            length=len(each)\n    return length\n    \ndef find_longest_word(list1):\n    '''\n    Write a python function to find the longest word in a list of words.\n    '''\n    for each in list1:\n        if len(each)==len_log(list1):\n            return each\n    return None\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len_list = [len(word) for word in list1]\n    max_len = max(len_list)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length = max(len(i) for i in list1)\n    return length\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if s in sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(str1) < len(sub_str):\n        return False\n    if sub_str == str1:\n        return True\n    return any(sub_str in item for item in str1)\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return [True for s in str1 if sub_str in s]\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str not in str1:\n        return False\n    sub_str_len = len(sub_str)\n    sub_str_ind = 0\n    for index in range(len(str1)):\n        if str1[index: index + sub_str_len] == sub_str:\n            sub_str_ind = index\n            break\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_length = len(sub_str)\n    for i in range(0, len(str1) - sub_str_length):\n        if (str1[i:i+sub_str_length] == sub_str):\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    indices = []\n    for i in xrange(len(str1) - len(sub_str) + 1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            indices.append(i)\n    return indices\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in xrange(len(str1) - len(sub_str) + 1):\n        if str1[i:i + len(sub_str)] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    start = 0\n    sub_str_len = len(sub_str)\n    while(start < len(str1)):\n        if sub_str == str1[start:start + sub_str_len]:\n            return True\n        start += 1\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    res = [True]*(n+1)\n    for i in range(3,n+1,2):\n        if res[i]:\n            res[i*3::i] = [False]*len(res[i*3::i])\n    return res[n]\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    return s == s[::-1]\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return str(n)[::-1] == str(n)\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return len(str(n)) == len(str(int(n*2)))\n    \n    \nprint(is_undulating(1))\nprint(is_undulating(2))\nprint(is_undulating(3))\nprint(is_undulating(4))\nprint(is_undulating(5))\nprint(is_undulating(6))\nprint(is_undulating(7))\nprint(is_undulating(8))\nprint(is_undulating(9))\nprint(is_undulating(10))\nprint(is_undulating(11))\nprint(is_undulating(12))\nprint(is_undulating(13))\nprint(is_undulating(14))\nprint(is_undulating(15))\nprint(is_undulating(16))\nprint(is_undulating(17))\nprint(is_undulating(18))\nprint(is_undulating(19))\nprint(is_undulating(20))\nprint(is_undulating(21))\nprint(is_undulating(22))\nprint(is_undulating(23))\nprint(is_undulating(24))\nprint(is_undulating(25))\nprint(is_undulating(26))\nprint(is_undulating(27))\nprint(is_undulating(28))\nprint(is_undulating(29))\nprint(is_undulating(30))\nprint(is_undulating(31))\nprint(is_undulating(32))\nprint(is_undulating(33))\nprint(is_undulating(34))\nprint(is_undulating(35))\nprint(is_undulating(36))\nprint(is_undulating(37))\nprint(is_undulating(38))\nprint(is_undulating(39))\nprint(is_undulating(40))\nprint(is_undulating(41))\nprint(is_undulating(42))\nprint(is_undulating(43))\nprint(is_undulating(44))\nprint(is_undulating(45))\nprint(is_undulating(46))\nprint(is_undulating(47))\nprint(is_undulating(48))\nprint(is_undulating(49))\nprint(is_undulating(50))\nprint(is_undulating(51))\nprint(is_undulating(52))\nprint(is_undulating(53))\nprint(is_undulating(54))\nprint(is_undulating(55))\nprint(is_undulating(56))\nprint(is_undulating(57))\nprint(is_undulating(58))\nprint(is_undulating(59))\nprint(is_undulating(60))\nprint(is_undulating(61))\nprint(is_undulating(62))\nprint(is_undulating(61))\nprint(is_undulating(60))\nprint(is_undulating(59))\nprint(is_undulating(58))\nprint(is_undulating(57))\nprint(is_undulating(56))\nprint(is_undulating(55))\nprint(is_undulating(54))\nprint(is_undulating(53))\nprint(is_undulating(52))\nprint(is_undulating(51))\nprint(is_undulating(50))\nprint(is_undulating(49))\nprint(is_undulating(48))\nprint(is_undulating(47))\nprint(is_undulating(46))\nprint(is_undulating(45))\nprint(is_undulating(44))\nprint(is_undulating(43))\nprint(is_undulating(42))\nprint(is_undulating(41))\nprint(is_undulating(40))\nprint(is_undulating(39))\nprint(is_undulating(38))\nprint(is_undulating(37))\nprint(is_undulating(36))\nprint(is_undulating(35))\nprint(is_undulating(34))\nprint(is_undulating(33))\nprint(is_undulating(32))\nprint(is_undulating(31))\nprint(is_undulating(30))\nprint(is_undulating(29))\nprint(is_undulating(28))\nprint(is_undulating(27))\nprint(is_undulating(26))\nprint(is_undulating(25))\nprint(is_undulating(24))\nprint(is_undulating(23))\nprint(is_undulating(22))\nprint(is_undulating(21))\nprint(is_undulating(20))\nprint(is_undulating(19))\nprint(is_undulating(18))\nprint(is_undulating(17))\nprint(is_undulating(16))\nprint(is_undulating(15))\nprint(is_undulating(14))\nprint(is_undulating(13))\nprint(is_undulating(12))\nprint(is_undulating(11))\nprint(is_undulating(10))\nprint(is_undulating(9))\nprint(is_undulating(8))\nprint(is_undulating(7))\nprint(is_undulating(6))\nprint(is_undulating(5))\nprint(is_undulating(4))\nprint(is_undulating(3))\nprint(is_undulating(2))\nprint(is_undulating(1))\nprint(is_undulating(0))\nprint(is_undulating(29))\nprint(is_undulating(28))\nprint(is_undulating(27))\nprint(is_undulating(26))\nprint(is_undulating(25))\nprint(is_undulating(24))\nprint(is_undulating(23))\nprint(is_undulating(22))\nprint(is_undulating(21))\nprint(is_undulating(20))\nprint(is_undulating(19))\nprint(is_undulating(18))\nprint(is_undulating(17))\nprint(is_undulating(16))\nprint(is_undulating(15))\nprint(is_undulating(14))\nprint(is_undulating(13))\nprint(is_undulating(12))\nprint(is_undulating(11))\nprint(is_undulating(10))\nprint(is_undulating(9))\nprint(is_undulating(8))\nprint(is_undulating(7))\nprint(is_undulating(6))\nprint(is_undulating(5))\nprint(is_undulating(4))\nprint(is_undulating(3))\nprint(is_undulating(2))\nprint(is_undulating(1))\nprint(is_undulating(0))\nprint(is_undulating(-1))\nprint(is_undulating(-2))\nprint(is_undulating(-3))\nprint(is_undulating(-4))\nprint(is_undulating(-5))\nprint(is_undulating(-6))\nprint(is_undulating(-7))\nprint(is_undulating(-8))\nprint(is_undulating(-9))\nprint(is_undulating(-10))\nprint(is_undulating(-11))\nprint(is_undulating(-12))\nprint(is_undulating(-13))\nprint(is_undulating(-14))\nprint(is_undulating(-15))\nprint(is_undulating(-16))\nprint(is_undulating(-17))\nprint(is_undulating(-18))\nprint(is_undulating(-19))\nprint(is_undulating(-20))\nprint(is_undulating(-21))\nprint(is_undulating(-22))\nprint(is_undulating(-23))\nprint(is_undulating(-24))\nprint(is_undulating(-25))\nprint(is_undulating(-26))\nprint(is_undulating(-27))\nprint(is_undulating(-28))\nprint(is_undulating(-29))\nprint(is_undulating(-30))\nprint(is_undulating(-31))\nprint(is_undulating(-32))\nprint(is_undulating(-33))\nprint(is_undulating(-34))\nprint(is_undulating(-35))\nprint(is_undulating(-36))\nprint(is_undulating(-37))\nprint(is_undulating(-38))\nprint(is_undulating(-39))\nprint(is_undulating(-40))\nprint(is_undulating(-41))\nprint(is_undulating(-42))\nprint(is_undulating(-43))\nprint(is_undulating(-44))\nprint(is_undulating(-45)"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    import math \n    if n < 0:\n        return False\n    if math.log10(n) > math.log10(1) + 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    t = str(n)\n    l = len(t)\n    return t[l-1] == t[l-2]\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 10:\n        return True\n    elif n == 10:\n        return False\n    else:\n        previous = int(str(n)[-2:])\n        return is_undulating(previous)\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in xrange(len(s)-1):\n        if s[i] == s[i+1]:\n            return False\n    return True\n    \ndef is_undulating_2(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in xrange(len(s)-2):\n        if s[i] == s[i+2]:\n            return False\n    return True\n    \ndef is_undulating_3(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in xrange(len(s)-3):\n        if s[i] == s[i+3]:\n            return False\n    return True\n    \ndef is_undulating_4(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in xrange(len(s)-4):\n        if s[i] == s[i+4]:\n            return False\n    return True\n    \ndef is_undulating_5(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in xrange(len(s)-5):\n        if s[i] == s[i+5]:\n            return False\n    return True\n    \ndef is_undulating_6(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in xrange(len(s)-6):\n        if s[i] == s[i+6]:\n            return False\n    return True\n    \ndef is_undulating_7(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in xrange(len(s)-7):\n        if s[i] == s[i+7]:\n            return False\n    return True\n    \ndef is_undulating_8(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in xrange(len(s)-8):\n        if s[i] == s[i+8]:\n            return False\n    return True\n    \ndef is_undulating_9(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in xrange(len(s)-9):\n        if s[i] == s[i+9]:\n            return False\n    return True\n    \ndef is_undulating_10(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in xrange(len(s)-10):\n        if s[i] == s[i+10]:\n            return False\n    return True\n    \ndef is_undulating_11(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in xrange(len(s)-11):\n        if s[i] == s[i+11]:\n            return False\n    return True\n    \ndef is_undulating_12(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in xrange(len(s)-12):\n        if s[i] == s[i+12]:\n            return False\n    return True\n    \ndef is_undulating_13(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in xrange(len(s)-13):\n        if s[i] == s[i+13]:\n            return False\n    return True\n    \ndef is_undulating_14(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in xrange(len(s)-14):\n        if s[i] == s[i+14]:\n            return False\n    return True\n    \ndef is_undulating_15(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in xrange(len(s)-15):\n        if s[i] == s[i+15]:\n            return False\n    return True\n    \ndef is_undulating_16(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in xrange(len(s)-16):\n        if s[i] == s[i+16]:\n            return False\n    return True\n    \ndef is_undulating_17(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in xrange(len(s)-17):\n        if s[i] == s[i+17]:\n            return False\n    return True\n    \ndef is_undulating_18(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in xrange(len(s)-18):\n        if s[i] == s[i+18]:\n            return False\n    return True\n    \ndef is_undulating_19(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in xrange(len(s)-19):\n        if s[i] == s[i+19]:\n            return False\n    return True\n    \ndef is_undulating_20(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in xrange(len(s)-20):\n        if s[i] == s[i+20]:\n            return False\n    return True\n    \ndef is_undulating_21(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in xrange(len(s)-21):\n        if s[i] == s[i+21]:\n            return False\n    return True\n    \ndef is_undulating_22(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in xrange(len(s)-22):\n        if s[i] == s[i+22]:\n            return False\n    return True\n    \ndef is_undulating_23(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in xrange(len(s)-23):\n        if s[i] == s[i+23]:\n            return False\n    return True\n    \ndef is_undulating_24(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in xrange(len(s)-24):\n        if s[i] == s[i+24]:\n            return False\n    return True\n    \ndef is_undulating_25(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in xrange(len(s)-25)"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def is_undulating(n): \n        if n%2 == 0:\n            return False\n        else:\n            return True\n    if is_undulating(n) == True:\n        return True\n    else:\n        return False\n        "
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    digits = []\n    while n:\n        digits.append(n%10)\n        n //= 10\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b%2:\n        return (power(a, b//2)*power(a, b//2))\n    else:\n        return (power(a, b//2)*power(a, b//2))\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b%2 == 0:\n        return power(a,b/2)**2\n    else:\n        return power(a,b-1)*a\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1/power(a,-b)\n    else:\n        return power(a,b-1)*a\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a * power(a, b-1)\n    \ndef factorial(n):\n    '''\n    Write a function to calculate the factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return n\n    else:\n        return n * factorial(n-1)\n    \ndef fib(n):\n    '''\n    Write a function to calculate the nth Fibonacci number.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b % 2 == 0:\n        return (power(a,b/2)**2)\n    else:\n        return (a*power(a,(b-1)/2)**2)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if (b == 0):\n        return 1\n    if (b > 0):\n        return a*power(a,b-1)\n    if (b < 0):\n        return 1/power(a,-b)\n    \ndef nth_power(a,n):\n    '''\n    Write a function that calculates the value of a to the nth power.\n    '''\n    if (n == 0):\n        return 1\n    if (n > 0):\n        return a*nth_power(a,n-1)\n    if (n < 0):\n        return 1/nth_power(a,-n)\n    \ndef sum_n(a,n):\n    '''\n    Write a function that takes two numbers and returns the sum.\n    '''\n    if (n == 1):\n        return a\n    else:\n        return a + sum_n(a,n-1)\n    \ndef multiply_n(a,n):\n    '''\n    Write a function that takes two numbers and returns the product.\n    '''\n    if (n == 1):\n        return a\n    else:\n        return a * multiply_n(a,n-1)\n    \ndef fibonacci(n):\n    '''\n    Write a function that returns the nth number of the Fibonacci sequence.\n    '''\n    if (n == 0):\n        return 0\n    if (n == 1):\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n    \ndef factorial(n):\n    '''\n    Write a function that takes in a positive integer and returns the factorial of that number.\n    '''\n    if (n == 0):\n        return 1\n    else:\n        return n*factorial(n-1)\n    \ndef sum_all_digits(n):\n    '''\n    Write a function that takes in a positive integer and returns the sum of the digits of that number.\n    '''\n    if (n == 0):\n        return 0\n    else:\n        return n%10 + sum_all_digits(n/10)\n    \ndef is_even(n):\n    '''\n    Write a function that takes in a positive integer and returns a boolean indicating whether or not the number is even.\n    '''\n    if (n == 0):\n        return True\n    else:\n        return is_even(n-1)\n    \ndef is_odd(n):\n    '''\n    Write a function that takes in a positive integer and returns a boolean indicating whether or not the number is odd.\n    '''\n    if (n == 0):\n        return False\n    else:\n        return is_odd(n-1)\n    \ndef is_divisible_by_4(n):\n    '''\n    Write a function that takes in a positive integer and returns a boolean indicating whether or not the number is divisible by 4.\n    '''\n    if (n == 0):\n        return False\n    else:\n        return is_divisible_by_4(n-4)\n    \ndef is_divisible_by_5(n):\n    '''\n    Write a function that takes in a positive integer and returns a boolean indicating whether or not the number is divisible by 5.\n    '''\n    if (n == 0):\n        return False\n    else:\n        return is_divisible_by_5(n-5)\n    \ndef is_divisible_by_6(n):\n    '''\n    Write a function that takes in a positive integer and returns a boolean indicating whether or not the number is divisible by 6.\n    '''\n    if (n == 0):\n        return False\n    else:\n        return is_divisible_by_6(n-6)\n    \ndef is_divisible_by_7(n):\n    '''\n    Write a function that takes in a positive integer and returns a boolean indicating whether or not the number is divisible by 7.\n    '''\n    if (n == 0):\n        return False\n    else:\n        return is_divisible_by_7(n-7)\n    \ndef is_divisible_by_8(n):\n    '''\n    Write a function that takes in a positive integer and returns a boolean indicating whether or not the number is divisible by 8.\n    '''\n    if (n == 0):\n        return False\n    else:\n        return is_divisible_by_8(n-8)\n    \ndef is_divisible_by_9(n):\n    '''\n    Write a function that takes in a positive integer and returns a boolean indicating whether or not the number is divisible by 9.\n    '''\n    if (n == 0):\n        return False\n    else:\n        return is_divisible_by_9(n-9)\n    \ndef is_divisible_by_10(n):\n    '''\n    Write a function that takes in a positive integer and returns a boolean indicating whether or not the number is divisible by 10.\n    '''\n    if (n == 0):\n        return False\n    else:\n        return is_divisible_by_10(n-10)\n    \ndef is_divisible_by_11(n):\n    '''\n    Write a function that takes in a positive integer and returns a boolean indicating whether or not the number is divisible by 11.\n    '''\n    if (n == 0):\n        return False\n    else:\n        return is_divisible_by_11(n-11)\n    \ndef is_divisible_by_12(n):\n    '''\n    Write a function that takes in a positive integer and returns a boolean indicating whether or not the number is divisible by 12.\n    '''\n    if (n == 0):\n        return False\n    else:\n        return is_divisible_by_12(n-12)\n    \ndef is_divisible_by_13(n):\n    '''\n    Write a function that takes in a positive integer and returns a boolean indicating whether or not the number is divisible by 13.\n    '''\n    if (n == 0):\n        return False\n    else:\n        return is_divisible_by_13(n-13)\n    \ndef is_divisible_by_14(n):\n    '''\n    Write a function that takes in a positive integer and returns a boolean indicating whether or not the number is divisible by 14.\n    '''\n    if (n == 0):\n        return False\n    else:\n        return is_divisible_by_14(n-14)\n    \ndef is_divisible_by_15(n):\n    '''\n    Write a function that takes in a positive integer and returns a boolean indicating whether or not the number is divisible by 15.\n    '''\n    if (n == 0):\n        return False\n    else:\n        return is_divisible_by_15(n-15)\n    \ndef is_divisible_by_16(n):\n    '''\n    Write a function that takes in a positive integer and returns a boolean indicating whether or not the number is divisible by 16.\n    '''\n    if (n == 0):\n        return False\n    else:\n        return is_divisible_by_16(n-16)\n    \ndef is_divisible_by_17(n):\n    '''\n    Write a function that takes in a positive integer and returns a boolean indicating whether or not the number is divisible by 17.\n    '''\n    if (n == 0):\n        return False\n    else:\n        return is_divisible_by_17(n-17)\n    \ndef is_divisible_by_18(n):\n    '''\n    Write a function that takes in a positive integer and returns a boolean indicating whether or not the number is divisible by 18.\n    '''\n    if (n == 0):\n        return False\n    else:\n        return is_divisible_by_18(n-18)\n    \ndef is_divisible_by_19(n):\n    '''\n    Write a function that takes in a positive integer and returns a boolean indicating whether or not the number is divisible by 19.\n    '''\n    if (n == 0):\n        return False\n    else:\n        return is_divisible_by_19(n-19)\n    \ndef is_divisible_by_20(n):\n    '''\n    Write a function that takes in a positive integer and returns a boolean indicating whether or not the number is divisible by 20.\n    '''\n    if (n == 0):\n    "
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1 / power(a,-b)\n    else:\n        temp = power(a,b//2)\n        if b % 2 == 0:\n            return temp * temp\n        else:\n            return temp * temp * a\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b % 2 == 1:\n        return a*power(a,b-1)\n    else:\n        return power(a*a,b/2)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b > 1:\n        return a * power(a, b - 1)\n    elif b < 0:\n        return 1 / power(a, -b)\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n    \ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    return max(test_list, key=itemgetter(1))[0]\n    \ndef index_rearrange(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list with the values rearranged based on the second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))\n    \ndef index_rearrange_by_second_value(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list with the values rearranged based on the second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))\n    \ndef index_reverse(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list with the values reversed based on the second value.\n    '''\n    return sorted(test_list, key=itemgetter(1), reverse=True)\n    \ndef index_reverse_by_second_value(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list with the values reversed based on the second value.\n    '''\n    return sorted(test_list, key=itemgetter(1), reverse=True)\n    \ndef index_alphabetize(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list with the values sorted based on the second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))\n    \ndef index_alphabetize_by_second_value(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list with the values sorted based on the second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))\n    \ndef index_groupby_a_value(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list with the values grouped by the first value.\n    '''\n    result = {}\n    for k, v in test_list:\n        result.setdefault(k, []).append(v)\n    return result\n    \ndef index_groupby_a_value_by_second_value(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list with the values grouped by the first value.\n    '''\n    result = {}\n    for k, v in test_list:\n        result.setdefault(k, []).append(v)\n    return result\n    \ndef index_groupby_b_value(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list with the values grouped by the second value.\n    '''\n    result = {}\n    for k, v in test_list:\n        result.setdefault(v, []).append(k)\n    return result\n    \ndef index_groupby_b_value_by_second_value(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list with the values grouped by the second value.\n    '''\n    result = {}\n    for k, v in test_list:\n        result.setdefault(v, []).append(k)\n    return result\n    \ndef index_sort(test_list, sort_by_second_value=False):\n    '''\n    Given a list of tuples, write a function that returns a new list with the values sorted based on the second value.\n    '''\n    if sort_by_second_value:\n        return sorted(test_list, key=itemgetter(1))\n    return sorted(test_list, key=itemgetter(0))\n    \ndef index_sort_by_second_value(test_list, sort_by_second_value=False):\n    '''\n    Given a list of tuples, write a function that returns a new list with the values sorted based on the second value.\n    '''\n    if sort_by_second_value:\n        return sorted(test_list, key=itemgetter(1))\n    return sorted(test_list, key=itemgetter(0))\n    \ndef index_union(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list that contains all values from both the original list and another list.\n    '''\n    return list(set(test_list) | set(test_list2))\n    \ndef index_union_by_second_value(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list that contains all values from both the original list and another list.\n    '''\n    return list(set(test_list) | set(test_list2))\n    \ndef index_difference(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list that contains values from the original list that do not appear in the second list.\n    '''\n    return list(set(test_list) - set(test_list2))\n    \ndef index_difference_by_second_value(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list that contains values from the original list that do not appear in the second list.\n    '''\n    return list(set(test_list) - set(test_list2))\n    \ndef index_intersection(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list that contains all values that appear in both the original list and another list.\n    '''\n    return list(set(test_list) & set(test_list2))\n    \ndef index_intersection_by_second_value(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list that contains all values that appear in both the original list and another list.\n    '''\n    return list(set(test_list) & set(test_list2))\n    \ndef index_union_by_second_value(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list that contains all values that appear in both the original list and another list.\n    '''\n    return list(set(test_list) | set(test_list2))\n    \ndef index_intersection_by_second_value(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list that contains all values that appear in both the original list and another list.\n    '''\n    return list(set(test_list) & set(test_list2))\n    \ndef index_union_by_second_value(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list that contains all values that appear in both the original list and another list.\n    '''\n    return list(set(test_list) | set(test_list2))\n    \ndef index_add(test_list, index):\n    '''\n    Given a list of tuples, write a function that returns a new list with the values added to the index value.\n    '''\n    return [k + index for k in test_list]\n    \ndef index_add_by_second_value(test_list, index):\n    '''\n    Given a list of tuples, write a function that returns a new list with the values added to the index value.\n    '''\n    return [k + index for k in test_list]\n    \ndef index_multiply(test_list, index):\n    '''\n    Given a list of tuples, write a function that returns a new list with the values multiplied by the index value.\n    '''\n    return [k * index for k in test_list]\n    \ndef index_multiply_by_second_value(test_list, index):\n    '''\n    Given a list of tuples, write a function that returns a new list with the values multiplied by the index value."
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # index_minimum([(3,5), (6,1), (1,8), (2,9)]) # should return 1\n    # index_minimum([(6,1), (1,8), (2,9)]) # should return 1\n    # index_minimum([(6,1), (1,8), (2,9), (0,9)]) # should return 0\n    # index_minimum([(3,9), (6,1), (1,8), (2,9)]) # should return 1\n    # index_minimum([(3,9), (6,1), (1,8), (2,9), (0,9)]) # should return 0\n    # index_minimum([(0,9), (1,8), (2,9)]) # should return 1\n    # index_minimum([(0,9), (1,8), (2,9), (3,9)]) # should return 0\n    # index_minimum([(0,9), (1,8), (2,9), (3,9), (4,9)]) # should return 2\n    # index_minimum([(0,9), (1,8), (2,9), (3,9), (4,9), (5,9)]) # should return 3\n    # index_minimum([(0,9), (1,8), (2,9), (3,9), (4,9), (5,9), (6,9)]) # should return 4\n    # index_minimum([(0,9), (1,8), (2,9), (3,9), (4,9), (5,9), (6,9), (7,9)]) # should return 5\n    # index_minimum([(0,9), (1,8), (2,9), (3,9), (4,9), (5,9), (6,9), (7,9), (8,9)]) # should return 6\n    # index_minimum([(0,9), (1,8), (2,9), (3,9), (4,9), (5,9), (6,9), (7,9), (8,9), (9,9)]) # should return 7\n    # index_minimum([(0,9), (1,8), (2,9), (3,9), (4,9), (5,9), (6,9), (7,9), (8,9), (9,9), (10,9)]) # should return 9\n    # index_minimum([(0,9), (1,8), (2,9), (3,9), (4,9), (5,9), (6,9), (7,9), (8,9), (9,9), (10,9), (11,9)]) # should return 10\n    # index_minimum([(0,9), (1,8), (2,9), (3,9), (4,9), (5,9), (6,9), (7,9), (8,9), (9,9), (10,9), (11,9), (12,9)]) # should return 11\n    # index_minimum([(0,9), (1,8), (2,9), (3,9), (4,9), (5,9), (6,9), (7,9), (8,9), (9,9), (10,9), (11,9), (12,9), (13,9)]) # should return 12\n    # index_minimum([(0,9), (1,8), (2,9), (3,9), (4,9), (5,9), (6,9), (7,9), (8,9), (9,9), (10,9), (11,9), (12,9), (13,9), (14,9)]) # should return 13\n    # index_minimum([(0,9), (1,8), (2,9), (3,9), (4,9), (5,9), (6,9), (7,9), (8,9), (9,9), (10,9), (11,9), (12,9), (13,9), (14,9), (15,9)]) # should return 14\n    # index_minimum([(0,9), (1,8), (2,9), (3,9), (4,9), (5,9), (6,9), (7,9), (8,9), (9,9), (10,9), (11,9), (12,9), (13,9), (14,9), (15,9), (16,9)]) # should return 15\n    # index_minimum([(0,9), (1,8), (2,9), (3,9), (4,9), (5,9), (6,9), (7,9), (8,9), (9,9), (10,9), (11,9), (12,9), (13,9), (14,9), (15,9), (16,9), (17,9)]) # should return 16\n    # index_minimum([(0,9), (1,8), (2,9), (3,9), (4,9), (5,9), (6,9), (7,9), (8,9), (9,9), (10,9), (11,9), (12,9), (13,9), (14,9), (15,9), (16,9), (17,9), (18,9)]) # should return 17\n    # index_minimum([(0,9), (1,8), (2,9), (3,9), (4,9), (5,9), (6,9), (7,9), (8,9), (9,9), (10,9), (11,9), (12,9), (13,9), (14,9), (15,9), (16,9), (17,9), (18,9), (19,9)]) # should return 18\n    # index_minimum([(0,9), (1,8), (2,9), (3,9), (4,9), (5,9), (6,9), (7,9), (8,9), (9,9), (10,9), (11,9), (12,9), (13,9), (14,9), (15,9), (16,9), (17,9), (18,9), (19,9), (20,9)]) # should return 19\n    # index_minimum([(0,9), (1,8), (2,9), (3,9), (4,9), (5,9), (6,9), (7,9), (8,9), (9,9), (10,9), (11,9), (12,9), (13,9), (14,9), (15,9), (16,9), (17,9), (18,9), (19,9), (20,9), (21,9)]) # should return 20\n    # index_minimum([(0,9), (1,8), (2,9), (3,9), (4,9), (5,9), (6,9), (7,9), (8,9), (9,9), (10,9), (11,9), (12,9), (13,9), (14,9), (15,9), (16,9), (17,9), (18,9), (19,9), (20,9), (21,9), (22,9)]) # should return 21\n    # index_minimum([(0,9), (1,8), (2,9), (3,9), (4,9), (5,9), (6,9), (7,9), (8,9), (9,9), (10,9), (11,9), (12,9), (13,9), (14,9), (15,9), (16,9), (17,9), (18,9), (19,9), (20,9), (21,9), (22,9), (23,9)]) # should return 22\n    # index_minimum([(0,9), (1,8), (2,9), (3,9), (4,9), (5,9), (6,9), (7,9), (8,9), (9,9), (10,9), (11,9), (12,9), (13,9), (14,9), (15,9), "
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key = itemgetter(1))[0]\n    \ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the greatest second value.\n    '''\n    return max(test_list, key = itemgetter(1))[0]\n    \ndef index_last(test_list):\n    '''\n    Given a list of tuples, write a function that returns the last value of the tuple with the smallest second value.\n    '''\n    return test_list[-1][1]\n    \ndef index_first(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    return test_list[0][1]\n    \ndef max_list(test_list):\n    '''\n    Given a list of tuples, write a function that returns the maximum value in the list.\n    '''\n    return max(test_list, key = itemgetter(1))[1]\n    \ndef min_list(test_list):\n    '''\n    Given a list of tuples, write a function that returns the minimum value in the list.\n    '''\n    return min(test_list, key = itemgetter(1))[1]\n    \ndef all_equal(test_list):\n    '''\n    Given a list of tuples, write a function that returns True if all the values in the list are the same, False otherwise.\n    '''\n    return len(set(test_list)) <= 1\n    \ndef count_set(test_list):\n    '''\n    Given a list of tuples, write a function that returns the number of unique values in the list.\n    '''\n    return len(set(test_list))\n    \ndef reverse_list(test_list):\n    '''\n    Given a list of tuples, write a function that returns the reverse of the list.\n    '''\n    test_list.reverse()\n    return test_list\n    \ndef list_intersect(test_list):\n    '''\n    Given a list of tuples, write a function that returns the intersection of the lists in the list.\n    '''\n    return list(set(test_list[0]) & set(test_list[1]))\n    \ndef list_difference(test_list):\n    '''\n    Given a list of tuples, write a function that returns the difference of the lists in the list.\n    '''\n    return list(set(test_list[0]) ^ set(test_list[1]))\n    \ndef list_union(test_list):\n    '''\n    Given a list of tuples, write a function that returns the union of the lists in the list.\n    '''\n    return list(set(test_list[0]) | set(test_list[1]))\n    \ndef list_product(test_list):\n    '''\n    Given a list of tuples, write a function that returns the cartesian product of the lists in the list.\n    '''\n    return list(set(test_list[0]) * set(test_list[1]))\n    \ndef list_duplicate(test_list):\n    '''\n    Given a list of tuples, write a function that returns the duplicate elements of the lists in the list.\n    '''\n    return list(set([x for x in test_list[0] if test_list[0].count(x) > 1] + [x for x in test_list[1] if test_list[1].count(x) > 1]))\n    \ndef list_sum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of the lists in the list.\n    '''\n    return sum(test_list[0]) + sum(test_list[1])\n    \ndef list_index(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first occurrence of the maximum value in the list.\n    '''\n    return test_list.index(max(test_list, key = itemgetter(1)))\n    \ndef list_slice(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list that contains the first three elements of the list.\n    '''\n    return test_list[0:3]\n    \ndef list_sort(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list with the values sorted in increasing order.\n    '''\n    return sorted(test_list, key = itemgetter(1))\n    \ndef list_unique(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list with the values of the list unique.\n    '''\n    return list(set(test_list))\n    \ndef list_max(test_list):\n    '''\n    Given a list of tuples, write a function that returns the maximum value of the list.\n    '''\n    return max(test_list, key = itemgetter(1))[1]\n    \ndef list_min(test_list):\n    '''\n    Given a list of tuples, write a function that returns the minimum value of the list.\n    '''\n    return min(test_list, key = itemgetter(1))[1]\n    \ndef list_len(test_list):\n    '''\n    Given a list of tuples, write a function that returns the length of the list.\n    '''\n    return len(test_list)\n    \ndef list_slice(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list with the first three elements of the list.\n    '''\n    return test_list[0:3]\n    \ndef list_set(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list with the first three elements of the list in the order they appear in the original list.\n    '''\n    return list(set(test_list[0:3]))\n    \ndef list_reverse(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list with the last three elements of the list in the reverse order.\n    '''\n    return test_list[-3:] + test_list[:-3]\n    \ndef list_map(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list with the values in the list transformed with the given function.\n    '''\n    return [function(x) for x in test_list]\n    \ndef list_filter(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list with the values of the list transformed with the given function.\n    '''\n    return [x for x in test_list if function(x)]\n    \ndef list_reduce(test_list, function, initializer=None):\n    '''\n    Given a list of tuples, write a function that returns a new list with the first two values of the list transformed with the given function.\n    '''\n    return [function(test_list[0], test_list[1])] + list_reduce(test_list[2:], function, initializer)\n    \ndef list_sum(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list with the values of the list added together.\n    '''\n    return sum(test_list)\n    \ndef list_length(test_list):\n    '''\n    Given a list of tuples, write a function that returns the length of the list.\n    '''\n    return len(test_list)\n    \ndef list_reverse(test_list):\n    '''\n    Given a list of tuples, write a function that returns the reverse of the list.\n    '''\n    return test_list[::-1]\n    \ndef list_contains(test_list, value):\n    '''\n    Given a list of tuples, write a function that returns True if the list contains the value, False otherwise.\n    '''\n    return value in test_list\n    \ndef list_map(test_list):\n    '''\n    Give"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[1]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min = min(test_list, key=itemgetter(1))\n    return min[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key = itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_value = (float('inf'), 0)\n    for index, value in enumerate(test_list):\n        if min_value[1] > value[1]:\n            min_value = (index, value[1])\n    return min_value[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Your code here\n    l = []\n    for tup in test_list:\n        l.append(tup[1])\n    return min(l)\n    \n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for sublist in lst:\n        if len(sublist)<min_len:\n            min_len = len(sublist)\n    return min_len\n    \ndef Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the largest list in a list of lists.\n    '''\n    max_len = 0\n    for sublist in lst:\n        if len(sublist)>max_len:\n            max_len = len(sublist)\n    return max_len\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for l in lst:\n        if len(l) < min_length:\n            min_length = len(l)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = lst[0]\n    for i in lst:\n        if len(i) < len(min):\n            min = i\n    return min\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 9999999999999999\n    for lst in lst:\n        if len(lst) < min_len:\n            min_len = len(lst)\n    return min_len\n    \n    \ndef Find_Min_Length_List(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = lst[0][0]\n    for lst in lst:\n        if len(lst) < min_len:\n            min_len = len(lst)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    Min = len(lst[0])\n    for i in lst:\n        if len(i) < Min:\n            Min = len(i)\n    return Min\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min=len(lst[0])\n    for i in range(len(lst)):\n        if(len(lst[i])<min):\n            min=len(lst[i])\n    return min\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest = lst[0]\n    for a in lst:\n        if len(a) < len(smallest):\n            smallest = a\n    return len(smallest)\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for l in lst:\n        if len(l) < min_length:\n            min_length = len(l)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst)\n    for lst in lst:\n        if min_len > len(lst):\n            min_len = len(lst)\n    return min_len\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 1\n    for i in range(2, n//2+1):\n        if n%i == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    else:\n        div = []\n        i = 1\n        while i < n:\n            if n%i == 0:\n                div.append(i)\n            i += 1\n        return len(div)\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    from math import sqrt\n    from itertools import count, islice\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = [1]\n    for i in xrange(2,int(n**0.5)+1):\n        if n%i == 0:\n            divisors.append(i)\n            divisors.append(n/i)\n    return sum(divisors)\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i=2\n    divisors=1\n    while n>1:\n        if n%i==0:\n            divisors+=1\n            n/=i\n        else:\n            i+=1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = 0\n    if n == 1:\n        div = 0\n    else:\n        for i in range(1,n):\n            if n%i == 0:\n                div+=1\n    return div\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    \n    divisors = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            divisors += 1\n        i += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = [i for i in range(1, n + 1) if n % i == 0]\n    return len(divisors)\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    else:\n        if n%2 == 0:\n            return 1 + divisor(n/2)\n        else:\n            return 1 + divisor((n-1)/2)\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Sort the list of lists based on the length of each element.\n    freq_dic = {}\n    list1 = sorted(list1, key=len)\n    # Start the loop from the smallest size.\n    for x in range(len(list1)):\n        # If the frequency is not in the dictionary, add it.\n        if len(list1[x]) not in freq_dic:\n            freq_dic[len(list1[x])] = 1\n        # If the frequency is in the dictionary, increment the frequency.\n        else:\n            freq_dic[len(list1[x])] += 1\n    return freq_dic\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    my_dict = {}\n    for i in list1:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    return my_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_list = []\n    for l in list1:\n        if l not in freq_list:\n            freq_list.append(l)\n    d = {}\n    for i in range(len(freq_list)):\n        d[freq_list[i]] = list1.count(freq_list[i])\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_list = []\n    for element in list1:\n        if element not in frequency_list:\n            frequency_list.append(element)\n    frequency_dict = {}\n    for element in frequency_list:\n        frequency_dict[element] = list1.count(element)\n    return frequency_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict_ = {}\n    for i in list1:\n        if i not in dict_:\n            dict_[i] = 1\n        else:\n            dict_[i] += 1\n    return dict_\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # list1 = [[1, 2], [3, 4], [5, 6, 7, 8]]\n    # list1 = [[[1, 2], [3, 4], [5, 6, 7, 8]], [1, 2, 3], [1, 1, 2, 3, 4, 5, 6, 7, 8, 9]]\n    freq = {}\n    for x in list1:\n        for y in x:\n            if y not in freq:\n                freq[y] = 1\n            else:\n                freq[y] += 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dic = {}\n    for item in list1:\n        if item not in dic:\n            dic[item] = 1\n        else:\n            dic[item] += 1\n    return dic\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for x in list1:\n        if x in freq:\n            freq[x] += 1\n        else:\n            freq[x] = 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    counts = {}\n    for item in list1:\n        if type(item) is list:\n            for val in item:\n                counts[val] = counts.get(val, 0) + 1\n        else:\n            counts[item] = counts.get(item, 0) + 1\n    return counts\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    answer = 1\n    for num in numbers:\n        answer *= num\n    return answer / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    return reduce(lambda a,b:a*b,numbers) / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return [numbers[i] * numbers.__len__() for i in range(numbers.__len__())]\n    \nif __name__ == '__main__':\n    num_list = [1,2,3,4,5,6,7,8,9,10,11,12]\n    print multiply_num(num_list)"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result = result * number\n    return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    total /= len(numbers)\n    return total\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for i in numbers:\n        total = total * i\n    return total / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return reduce(lambda x, y: x * y, numbers) / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if numbers == []:\n        return 1\n    else:\n        return numbers[0] * multiply_num(numbers[1:])\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    num = 1\n    for n in numbers:\n        num = num * n\n    return num\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    new_number = 1\n    for number in numbers:\n        new_number = new_number * number\n    return new_number / len(numbers)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 2 + 10 * decimal_to_binary(n // 2)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    elif n > 1:\n        return decimal_to_binary(n//2) + str(n % 2)\n    return str(n)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    res = \"\"\n    while n:\n        res += str(n % 2)\n        n = n // 2\n    return res[::-1]\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return str(bin(n).replace(\"0b\", \"\"))\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\",\"\")\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return ''\n    elif n % 2 == 0:\n        return decimal_to_binary(n / 2) + '0'\n    else:\n        return decimal_to_binary(n / 2) + '1'\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: return '0'\n    d, m = divmod(n, 2)\n    return decimal_to_binary(d) + str(m)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if not isinstance(n, int) or n < 0:\n        return None\n    elif n == 0:\n        return '0'\n    elif n == 1:\n        return '1'\n    return (decimal_to_binary(n/2) + decimal_to_binary(n%2))\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # if n is 0 then return 0\n    if n == 0:\n        return '0'\n    # if n is 1 then return 1\n    if n == 1:\n        return '1'\n    # create the list for the final answer\n    answer = []\n    # keep looping while n is not 0\n    while n!= 0:\n        # append the current number to the list\n        answer.append(n%2)\n        # divide by 2\n        n = n//2\n    # reverse the list\n    answer.reverse()\n    # turn the list into a string\n    answer = ''.join([str(elem) for elem in answer])\n    # return the string\n    return answer\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    bin_num = ''\n    if n < 0:\n        n = n * -1\n    while n > 0:\n        if n % 2 == 0:\n            bin_num = '0' + bin_num\n        else:\n            bin_num = '1' + bin_num\n        n = n / 2\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # ALGORITHM: the smallest number greater than num (padded to be odd) is always the sum of the digits of num + 1 and if the sum is odd, it is incremented by 1 to get a even number.\n    # therefore if the sum is even, the number is equal to the next_smallest_palindrome of the sum of digits of num.\n    # by extending the above algorithm to negative numbers, we get the largest palindrome smaller than the number.\n    # returns the smallest number greater than num (padded to be odd)\n    if num < 0:\n        num = -num\n    s = 0\n    while True:\n        n = num + s + 1\n        if n < 10:\n            return n\n        if n % 10 == 1:\n            s += 1\n        else:\n            break\n    if s == 0:\n        return num + 1\n    if (s + 1) % 2 == 0:\n        return n - s\n    else:\n        return n + 1 - s\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # get the number's digits\n    digits = [int(x) for x in str(num)]\n    n = len(digits)\n    # reverse the digits\n    digits.reverse()\n    # reverse the digits\n    #for i in range(n/2):\n    #    digits[i],digits[n-1-i] = digits[n-1-i],digits[i]\n    # convert it back to a number\n    num = int(''.join([str(x) for x in digits]))\n    # get the largest digit\n    largest = max(digits)\n    # get the smallest digit\n    smallest = min(digits)\n    # subtract 1 from the largest and add it to the smallest\n    # so that the number is at least one greater than the largest\n    largest = largest - 1\n    smallest = smallest + 1\n    # make sure it's not the smallest\n    if smallest == 0:\n        smallest = 1\n    # add the smallest and the largest to get the next smallest palindrome\n    num += smallest\n    num -= largest\n    # convert it back to a number\n    num = int(''.join([str(x) for x in [str(smallest),str(largest),str(num)]]))\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    if num_str[0] == '1':\n        return 10\n    num_str = num_str[::-1]\n    for i in range(len(num_str)):\n        if num_str[i]!= '9':\n            num_str = num_str[:i] + '9' + num_str[i+1:]\n            return int(num_str)\n        \ndef sum_digits(number):\n    '''\n    Write a function that takes an integer as input and returns the sum of the digits in the integer.\n    '''\n    number_str = str(number)\n    if len(number_str) == 1:\n        return int(number_str)\n    else:\n        return sum([int(x) for x in number_str])\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num > 9999:\n        return 0\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = int(num)\n    if num >= 1:\n        if num == 1:\n            return 2\n        elif num % 10 == 1:\n            return num + 1\n        elif num % 10 == 0:\n            return num + 11\n        else:\n            return num - 1\n    else:\n        return num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = num\n    s = str(n)\n    # reverse string\n    s = s[::-1]\n    # multiply by 10\n    s = int(s)*10\n    # make int\n    s = int(s)\n    # convert to string\n    s = str(s)\n    # reverse string\n    s = s[::-1]\n    # remove the leading zeros\n    s = s.lstrip('0')\n    # add one to the string\n    s = str(int(s) + 1)\n    # reverse string\n    s = s[::-1]\n    # return int\n    return int(s)\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    is_palindrome = lambda x: str(x) == str(x)[::-1]\n    num = 10**len(str(num)) + 1 if num < 10**len(str(num)) - 1 else num\n    while True:\n        if is_palindrome(num):\n            return num + 1\n        num += 1\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def _is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    if num == 0:\n        return 1\n    num += 1\n    while not _is_palindrome(num):\n        num += 1\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    return int(num + str(num)[::-1])\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    if num[-1] == '0':\n        return int(num[:-1]+'1')\n    else:\n        result = num[:-1]\n        result = result+'1'\n        result = int(result)\n        return result\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return -1\n    elif k == 1:\n        return arr[0]\n    elif k == len(arr):\n        return arr[-1]\n    elif k == len(arr) - 1:\n        return arr[-2]\n    else:\n        return arr[k - 1] + kth_element(arr[0:k], k)\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr_len = len(arr)\n    if k > arr_len:\n        return \"Index out of bounds\"\n    elif k < 1:\n        return \"Index out of bounds\"\n    else:\n        pivot = arr[arr_len - 1]\n        left_pivot = arr[0]\n        # binary search\n        left = 0\n        right = arr_len - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] < left_pivot:\n                left = mid + 1\n            elif arr[mid] == left_pivot:\n                left = mid + 1\n            else:\n                right = mid - 1\n        # print(left, right)\n        if k <= left:\n            return arr[left-1]\n        else:\n            right = arr_len - 1\n            left = 0\n            while left <= right:\n                mid = (left + right) // 2\n                if arr[mid] > right_pivot:\n                    right = mid - 1\n                elif arr[mid] == right_pivot:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            if k <= left:\n                return arr[left-1]\n            else:\n                return arr[right]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    pivot = arr[0]\n    smaller = 0\n    larger = len(arr) - 1\n    while True:\n        if pivot > arr[larger]:\n            smaller += 1\n            if smaller > k:\n                return arr[smaller - 1]\n        elif pivot < arr[larger]:\n            larger -= 1\n            if larger < k:\n                return arr[larger]\n        else:\n            return pivot\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[(len(arr) - k + 1) % len(arr)]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 0 or k > len(arr):\n        return None\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 0:\n        raise IndexError(\"Array is empty\")\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not arr:\n        return None\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    temp = []\n    new_word = ''\n    for letter in word:\n        if letter.isupper() and letter == letter.lower():\n            temp.append(new_word)\n            new_word = ''\n        else:\n            new_word += letter\n    temp.append(new_word)\n    return ''.join(temp)\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if not word:\n        return None\n    # convert snake_case to camel_case\n    output = word[0].upper()\n    for i in xrange(1, len(word)):\n        if word[i] == '_':\n            continue\n        output += word[i].upper()\n    return output\n    \ndef reverse_dict(dict):\n    new_dict = {}\n    for key, value in dict.iteritems():\n        new_dict[value] = key\n    return new_dict\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # We first split the string at the \"_\"\n    words = word.split(\"_\")\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''.join(w.capitalize() for w in word.split('_'))\n    return camel_case\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Convert snake case to camel case\n    first, *middle, last = word.split('_')\n    return first + ''.join(x.title() for x in middle) + last\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # First, get the first word to camel case\n    if word[0].isupper():\n        camel_case = word[0].lower() + word[1:]\n    else:\n        camel_case = word[0].upper() + word[1:]\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word.find('_') == -1:\n        return word\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    new_word = word.replace('_','')\n    new_word = new_word.split()\n    new_word = \"\".join(new_word)\n    return new_word[0].lower() + new_word[1:]\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    index = 0\n    for i in word:\n        if i.isupper() and index == 0:\n            camel_case += i\n            index = 1\n        elif i.isupper() and index > 0:\n            camel_case += i\n        else:\n            camel_case += i.lower()\n    return camel_case\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word == None:\n        return None\n    elif type(word)!= str:\n        return None\n    else:\n        new = word.split(\"_\")\n        camel = ''\n        for i in new:\n            camel = camel + i.capitalize()\n        return camel\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    eulerian = n + m - 2\n    if eulerian > 0:\n        return eulerian\n    else:\n        return 0\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n > m:\n        return -1\n    return (m - n) * (m + n + 1) / 2\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def tree_num(n, m): \n        '''\n        Write a function to find the number of unrooted trees with n tips and m\n        edges. \n        '''\n        if n == 0: \n            return 0\n        if n == 1: \n            return 1\n        if m == 0: \n            return 0\n        if m == 1: \n            return 2\n        return tree_num(n - 1, m) + tree_num(n - 1, m - 1)\n    def Eulerian(n, m):\n        '''\n        Write a function to find the number of Eulerian trees with n tips and m\n        edges. \n        '''\n        if n == 0: \n            return 0\n        if n == 1: \n            return 1\n        if m == 0: \n            return 0\n        if m == 1: \n            return 2\n        return Eulerian(n - 1, m) + Eulerian(n - 1, m - 1)\n    return (tree_num(n, m) - Eulerian(n, m))/2\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0: \n        return m + 1\n    elif n == 1:\n        return m + 2\n    else:\n        return m + eulerian_num(n-1, m + 1) + eulerian_num(n-1, m + 2)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return m\n    elif m == 0:\n        return n\n    elif n == m:\n        return n + 1\n    else:\n        return n + eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n    return n\n    \ndef eulerian_string(s, n):\n    '''\n    Write a function to return the Eulerian string of a given string.\n    '''\n    if n == 0:\n        return s\n    elif s[n - 1] == 'A':\n        return eulerian_string(s, n - 1) + 'C'\n    else:\n        return eulerian_string(s, n - 1) + 'A'\n    return s\n    \ndef eulerian_string_2(s, n, m):\n    '''\n    Write a function to return the Eulerian string of a given string.\n    '''\n    if n == 0:\n        return m\n    elif s[n - 1] == 'A':\n        return eulerian_string_2(s, n - 1, m + 'C')\n    else:\n        return eulerian_string_2(s, n - 1, m + 'A')\n    return s\n    \ndef eulerian_string_3(s, n, m):\n    '''\n    Write a function to return the Eulerian string of a given string.\n    '''\n    if n == 0:\n        return m\n    elif s[n - 1] == 'A':\n        return eulerian_string_3(s, n - 1, m + 'C')\n    else:\n        return eulerian_string_3(s, n - 1, m + 'A')\n    return s\n    \ndef eulerian_string_4(s, n, m):\n    '''\n    Write a function to return the Eulerian string of a given string.\n    '''\n    if n == 0:\n        return m\n    elif s[n - 1] == 'A':\n        return eulerian_string_4(s, n - 1, m + 'C')\n    else:\n        return eulerian_string_4(s, n - 1, m + 'A')\n    return s\n    \ndef kmer_table(s):\n    '''\n    Write a function to generate a hash table from a string of n length.\n    '''\n    kmer = {}\n    for i in range(len(s) - 1):\n        kmer[s[i:i + 2]] = 0\n    return kmer\n    \ndef kmer_table_2(s):\n    '''\n    Write a function to generate a hash table from a string of n length.\n    '''\n    kmer = {}\n    for i in range(len(s) - 1):\n        kmer[s[i:i + 2]] = kmer.get(s[i:i + 2], 0) + 1\n    return kmer\n    \ndef frequency_table(s):\n    '''\n    Write a function to generate a frequency table from a string of n length.\n    '''\n    freq = {}\n    for i in s:\n        freq[i] = 0\n    return freq\n    \ndef frequency_table_2(s):\n    '''\n    Write a function to generate a frequency table from a string of n length.\n    '''\n    freq = {}\n    for i in s:\n        freq[i] = freq.get(i, 0) + 1\n    return freq\n    \ndef frequency_table_3(s):\n    '''\n    Write a function to generate a frequency table from a string of n length.\n    '''\n    freq = {}\n    for i in s:\n        freq[i] = freq.get(i, 0) + 1\n    return freq\n    \ndef frequency_table_4(s):\n    '''\n    Write a function to generate a frequency table from a string of n length.\n    '''\n    freq = {}\n    for i in s:\n        freq[i] = freq.get(i, 0) + 1\n    return freq\n    \ndef rev_comp(s):\n    '''\n    Write a function to return the reverse complement of a string.\n    '''\n    rev = ''\n    for i in s:\n        if i == 'A':\n            rev = rev + 'T'\n        elif i == 'T':\n            rev = rev + 'A'\n        elif i == 'C':\n            rev = rev + 'G'\n        elif i == 'G':\n            rev = rev + 'C'\n    return rev\n    \ndef rev_comp_2(s):\n    '''\n    Write a function to return the reverse complement of a string.\n    '''\n    rev = ''\n    for i in s:\n        if i == 'A':\n            rev = rev + 'T'\n        elif i == 'T':\n            rev = rev + 'A'\n        elif i == 'C':\n            rev = rev + 'G'\n        elif i == 'G':\n            rev = rev + 'C'\n    return rev\n    \ndef rev_comp_3(s):\n    '''\n    Write a function to return the reverse complement of a string.\n    '''\n    rev = ''\n    for i in s:\n        if i == 'A':\n            rev = rev + 'T'\n        elif i == 'T':\n            rev = rev + 'A'\n        elif i == 'C':\n            rev = rev + 'G'\n        elif i == 'G':\n            rev = rev + 'C'\n    return rev\n    \ndef rev_comp_4(s):\n    '''\n    Write a function to return the reverse complement of a string.\n    '''\n    rev = ''\n    for i in s:\n        if i == 'A':\n            rev = rev + 'T'\n        elif i == 'T':\n            rev = rev + 'A'\n        elif i == 'C':\n            rev = rev + 'G'\n        elif i == 'G':\n            rev = rev + 'C'\n    return rev\n    \ndef common_kmers(k):\n    '''\n    Write a function to return all the common k-mers from a collection of strings.\n    '''\n    kmer = {}\n    for i in range(len(k[0]) - k + 1):\n        kmer[k[0][i:i + k]] = 0\n    for i in range(1, len(k)):\n        for j in range(len(k[i]) - k + 1):\n            if k[0][j:j + k] in kmer.keys():\n                kmer[k[0][j:j + k]] += 1\n    return kmer\n    \ndef common_kmers_2(k):\n    '''\n    Write a function to return all the common k-mers from a collection of strings.\n    '''\n    kmer = {}\n    for i in range(len(k[0]) - k + 1):\n        kmer[k[0][i:i + k]] = kmer.get(k[0][i:i + k], 0) + 1\n    return kmer\n    \ndef common_kmers_3(k):\n    '''\n    Write a function to return all the common k-mers from a collection of strings.\n    '''\n    kmer = {}\n    for i in range(len(k[0]) - k + 1):\n        kmer[k[0][i:i + k]] = kmer.get(k[0][i:i + k], 0) + 1\n    return kmer\n    \ndef hamming_distance(s, t):\n    '''\n    Write a function to return the hamming distance between two strings.\n    '''\n    dist = 0\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            dist += 1\n    return dist\n    \ndef hamming_distance_2(s, t):\n    '''\n    Write a function to return the hamming distance between two strings.\n    '''\n    dist = 0\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            dist += 1\n    return dist\n    \ndef hamming_distance_3(s, t):\n    ''"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 and m == 0:\n        return 0\n    if n == 0:\n        return 1\n    if m == 0:\n        return 0\n    return eulerian_num(n-1, m) + eulerian_num(n, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return (n**2 + m**2)**(1/2)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n**2 + m**2\n    \n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n%2 == 1 and m%2 == 1: \n        return 1\n    elif n%2 == 1 or m%2 == 1: \n        return 0\n    else: \n        return eulerian_num(n/2, m) + eulerian_num(n, m/2)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return (factorial(n) // factorial(n - m) // factorial(m)) % (10 ** 9 + 7)\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #This is a different way of writing the same code.\n    output_list = []\n    for sublist in input_list:\n        sublist.sort()\n        output_list.append(sublist)\n    return output_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n    for l in input_list:\n        l.sort()\n        output_list.append(l)\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n    for s in input_list:\n        output_list.append(sorted(s))\n    return output_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output = []\n    for i in input_list:\n        output.append(sorted(i))\n    return output\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    # If the sublist is of length 1, it is already sorted.\n    if len(input_list[0]) == 1:\n        return input_list\n    \n    # If there are no sublists, return the list itself.\n    if len(input_list) == 1:\n        return input_list[0]\n    \n    # Sort the sublists.\n    mid = len(input_list) // 2\n    left = sort_sublists(input_list[:mid])\n    right = sort_sublists(input_list[mid:])\n    \n    # Combine the sorted sublists.\n    return merge(left, right)\n    \ndef merge(left, right):\n    '''\n    Write a function to merge two sorted sublists.\n    '''\n    \n    # Initialize an empty list that will contain the sorted sublists.\n    sorted_list = []\n    \n    # Initialize a pointer for the left sublist.\n    left_pointer = 0\n    \n    # Initialize a pointer for the right sublist.\n    right_pointer = 0\n    \n    # Loop while both pointers are not at the end of either list.\n    while left_pointer < len(left) and right_pointer < len(right):\n        # If the left pointer is at the end of the left sublist,\n        # then add the right sublist's elements to the sorted list.\n        if left[left_pointer] < right[right_pointer]:\n            sorted_list.append(left[left_pointer])\n            left_pointer += 1\n        # Otherwise, add the right sublist's elements to the sorted list.\n        else:\n            sorted_list.append(right[right_pointer])\n            right_pointer += 1\n            \n    # Add the rest of the elements from the left sublist to the sorted list.\n    while left_pointer < len(left):\n        sorted_list.append(left[left_pointer])\n        left_pointer += 1\n    \n    # Add the rest of the elements from the right sublist to the sorted list.\n    while right_pointer < len(right):\n        sorted_list.append(right[right_pointer])\n        right_pointer += 1\n    \n    # Return the sorted list.\n    return sorted_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    # initialize an empty list\n    sorted_list = []\n    \n    # iterate over the list of lists\n    for lst in input_list:\n        \n        # create a new list for each sublist\n        sorted_list.append(sorted(lst))\n    \n    # return the list of lists\n    return sorted_list\n    \nprint sort_sublists([['a','b','c','d'],['e','f','g','h'],['i','j','k','l']]"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n    for x in input_list:\n        result.append(sorted(x))\n    return result\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublists = []\n    # iterate over the list of lists\n    for x in input_list:\n        # get the length of the sublist\n        sublist_length = len(x)\n        # generate a sorted list from the sublist\n        sublist = sorted(x)\n        # append the sorted sublist to a new list\n        sublists.append(sublist)\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for i in input_list:\n        new_list.append(sorted(i))\n    return new_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    print 'Before sort'\n    print input_list\n    for sublist in input_list:\n        sublist.sort()\n    print 'After sort'\n    print input_list\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(lst)\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n    \n    \n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum([i for i in lst if i is True])\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    if lst:\n        return len(lst)\n    else:\n        return 0\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for elem in lst:\n        if elem:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    x=0\n    for i in lst:\n        if i:\n            x=x+1\n    return x\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum([bool(lst[i]) for i in range(len(lst))])\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(bool(i) for i in lst)\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return lst.count(True)\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    #test_list = [1,2,3]\n    #test_tup = ('a','b','c')\n    #test_list.append(test_tup)\n    #print test_list\n    #list_set = set(test_list)\n    #print list_set\n    #list_set.add(test_tup)\n    #print list_set\n    #print len(list_set)\n    #list_set.remove(test_tup)\n    #print list_set\n    #print len(list_set)\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    tup1 = test_list\n    tup2 = test_tup\n    return tup1 + tup2\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    list_set = set(test_list)\n    tup_set = set(test_tup)\n    test_tup_set = set(test_tup)\n    return test_tup_set | list_set\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_tup:\n        test_list.append(i)\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # test_list = [1, 2, 3]\n    # test_tup = (4, 5, 6)\n    return test_list + list(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if test_tup is not None:\n        test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 is None:\n        return num2\n    if num2 is None:\n        return num1\n    if num3 is None:\n        return num1\n    # set pointers\n    ptr1 = 0\n    ptr2 = 0\n    ptr3 = 0\n    list_out = []\n    while (ptr1<len(num1) and ptr2<len(num2) and ptr3<len(num3)):\n        if num1[ptr1]<num2[ptr2]:\n            list_out.append(num1[ptr1])\n            ptr1+=1\n        elif num1[ptr1]>num2[ptr2]:\n            list_out.append(num2[ptr2])\n            ptr2+=1\n        else:\n            list_out.append(num2[ptr2])\n            list_out.append(num1[ptr1])\n            ptr2+=1\n            ptr1+=1\n    while (ptr1<len(num1)):\n        list_out.append(num1[ptr1])\n        ptr1+=1\n    while (ptr2<len(num2)):\n        list_out.append(num2[ptr2])\n        ptr2+=1\n    while (ptr3<len(num3)):\n        list_out.append(num3[ptr3])\n        ptr3+=1\n    return list_out\n    \ndef merge_sort(num):\n    '''\n    Write a function to sort a list in ascending order.\n    '''\n    if num is None or len(num)==0:\n        return num\n    if len(num)==1:\n        return num\n    # midpoint of the list\n    mid = len(num)/2\n    left = merge_sort(num[:mid])\n    right = merge_sort(num[mid:])\n    return merge_sorted_list(left,right,num)\n    \ndef kth_element(num,k):\n    '''\n    Write a function to find the kth smallest element in a sorted list.\n    '''\n    if num is None or len(num)==0:\n        return None\n    if len(num)==1:\n        return num[0]\n    if k==0:\n        return None\n    if k>len(num):\n        return None\n    if k==len(num):\n        return num[-1]\n    else:\n        mid = len(num)/2\n        left = num[:mid]\n        right = num[mid:]\n        if k<=mid:\n            return kth_element(left,k)\n        else:\n            return kth_element(right,k-mid-1)\n    \ndef heap_sort(num):\n    '''\n    Write a function to sort a list in ascending order.\n    '''\n    if num is None:\n        return None\n    if len(num)==0:\n        return num\n    heapq.heapify(num)\n    while len(num)>1:\n        heapq.heappop(num)\n        heapq.heappop(num)\n    return num\n    \ndef find_rotation_point(num):\n    '''\n    Write a function to find the point at which an array is rotated.\n    '''\n    if num is None or len(num)==0:\n        return None\n    if len(num)==1:\n        return 0\n    first = num[0]\n    ptr = 1\n    while (ptr<len(num)):\n        if num[ptr]>first:\n            return ptr\n        ptr+=1\n    return 0\n    \ndef find_element(num,target):\n    '''\n    Write a function to find an element in a sorted array.\n    '''\n    if num is None or len(num)==0:\n        return None\n    if len(num)==1:\n        if num[0]==target:\n            return 0\n        else:\n            return -1\n    mid = len(num)/2\n    if num[mid]==target:\n        return mid\n    if num[mid]>target:\n        return find_element(num[:mid],target)\n    else:\n        return find_element(num[mid:],target)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1_copy = num1[:]\n    num2_copy = num2[:]\n    num3_copy = num3[:]\n    i,j,k = 0,0,0\n    merged_list = []\n    while i < len(num1_copy) or j < len(num2_copy) or k < len(num3_copy):\n        if i < len(num1_copy) and j < len(num2_copy) and k < len(num3_copy):\n            if num1_copy[i] < num2_copy[j] and num2_copy[j] < num3_copy[k]:\n                merged_list.append(num1_copy[i])\n                i += 1\n            elif num1_copy[i] > num2_copy[j] and num2_copy[j] < num3_copy[k]:\n                merged_list.append(num2_copy[j])\n                j += 1\n            else:\n                merged_list.append(num3_copy[k])\n                k += 1\n        elif i < len(num1_copy):\n            merged_list.append(num1_copy[i])\n            i += 1\n        elif j < len(num2_copy):\n            merged_list.append(num2_copy[j])\n            j += 1\n        else:\n            merged_list.append(num3_copy[k])\n            k += 1\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 is None:\n        return num2+num3\n    if num2 is None:\n        return num1+num3\n    if num3 is None:\n        return num1+num2\n    return sorted(num1+num2+num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return heapq.merge(num1,num2,num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1_len = len(num1)\n    num2_len = len(num2)\n    num3_len = len(num3)\n    if (num1_len > num2_len and num1_len > num3_len):\n        a = num1\n        b = num2\n        c = num3\n    elif (num2_len > num1_len and num2_len > num3_len):\n        a = num2\n        b = num1\n        c = num3\n    else:\n        a = num3\n        b = num1\n        c = num2\n    i = j = 0\n    arr = []\n    while i < len(a) and j < len(b):\n        if a[i] < b[j]:\n            arr.append(a[i])\n            i += 1\n        else:\n            arr.append(b[j])\n            j += 1\n    while i < len(a):\n        arr.append(a[i])\n        i += 1\n    while j < len(b):\n        arr.append(b[j])\n        j += 1\n    return arr\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1.extend(num2)\n    num1.extend(num3)\n    return sorted(num1)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            l.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            l.append(num2[j])\n            j += 1\n        else:\n            l.append(num3[k])\n            k += 1\n    l += num1[i:]\n    l += num2[j:]\n    l += num3[k:]\n    return l\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1_list = []\n    num2_list = []\n    num3_list = []\n    if len(num1)>0:\n        num1_list = num1\n    if len(num2)>0:\n        num2_list = num2\n    if len(num3)>0:\n        num3_list = num3\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merge_list=[]\n    i=0\n    j=0\n    k=0\n    if num1==[] and num2==[] and num3==[]:\n        return []\n    if num1==[] and num2!=[]:\n        return num2\n    if num1==[] and num3!=[]:\n        return num3\n    if num2==[] and num3!=[]:\n        return num2\n    if num2!=[]:\n        while(i<len(num1) and j<len(num2)):\n            if num1[i]<num2[j]:\n                merge_list.append(num1[i])\n                i+=1\n            else:\n                merge_list.append(num2[j])\n                j+=1\n        if i==len(num1):\n            for a in range(j,len(num2)):\n                merge_list.append(num2[a])\n        if j==len(num2):\n            for a in range(i,len(num1)):\n                merge_list.append(num1[a])\n        return merge_list\n    if num3!=[]:\n        while(i<len(num1) and j<len(num3)):\n            if num1[i]<num3[j]:\n                merge_list.append(num1[i])\n                i+=1\n            else:\n                merge_list.append(num3[j])\n                j+=1\n        if i==len(num1):\n            for a in range(j,len(num3)):\n                merge_list.append(num3[a])\n        if j==len(num3):\n            for a in range(i,len(num1)):\n                merge_list.append(num1[a])\n        return merge_list\ndef merge_sorted_list_1(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merge_list=[]\n    if num1==[] and num2==[] and num3==[]:\n        return []\n    if num1==[] and num2!=[]:\n        return num2\n    if num1==[] and num3!=[]:\n        return num3\n    if num2==[] and num3!=[]:\n        return num2\n    if num2!=[]:\n        while(i<len(num1) and j<len(num2)):\n            if num1[i]<num2[j]:\n                merge_list.append(num1[i])\n                i+=1\n            else:\n                merge_list.append(num2[j])\n                j+=1\n        if i==len(num1):\n            for a in range(j,len(num2)):\n                merge_list.append(num2[a])\n        if j==len(num2):\n            for a in range(i,len(num1)):\n                merge_list.append(num1[a])\n        return merge_list\n    if num3!=[]:\n        while(i<len(num1) and j<len(num3)):\n            if num1[i]<num3[j]:\n                merge_list.append(num1[i])\n                i+=1\n            else:\n                merge_list.append(num3[j])\n                j+=1\n        if i==len(num1):\n            for a in range(j,len(num3)):\n                merge_list.append(num3[a])\n        if j==len(num3):\n            for a in range(i,len(num1)):\n                merge_list.append(num1[a])\n        return merge_list\ndef merge_sorted_list_2(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merge_list=[]\n    if num1==[] and num2==[] and num3==[]:\n        return []\n    if num1==[] and num2!=[]:\n        return num2\n    if num1==[] and num3!=[]:\n        return num3\n    if num2==[] and num3!=[]:\n        return num2\n    if num2!=[]:\n        while(i<len(num1) and j<len(num2)):\n            if num1[i]<num2[j]:\n                merge_list.append(num1[i])\n                i+=1\n            else:\n                merge_list.append(num2[j])\n                j+=1\n        if i==len(num1):\n            for a in range(j,len(num2)):\n                merge_list.append(num2[a])\n        if j==len(num2):\n            for a in range(i,len(num1)):\n                merge_list.append(num1[a])\n        return merge_list\n    if num3!=[]:\n        while(i<len(num1) and j<len(num3)):\n            if num1[i]<num3[j]:\n                merge_list.append(num1[i])\n                i+=1\n            else:\n                merge_list.append(num3[j])\n                j+=1\n        if i==len(num1):\n            for a in range(j,len(num3)):\n                merge_list.append(num3[a])\n        if j==len(num3):\n            for a in range(i,len(num1)):\n                merge_list.append(num1[a])\n        return merge_list\ndef merge_sorted_list_3(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merge_list=[]\n    if num1==[] and num2==[] and num3==[]:\n        return []\n    if num1==[] and num2!=[]:\n        return num2\n    if num1==[] and num3!=[]:\n        return num3\n    if num2==[] and num3!=[]:\n        return num2\n    if num2!=[]:\n        while(i<len(num1) and j<len(num2)):\n            if num1[i]<num2[j]:\n                merge_list.append(num1[i])\n                i+=1\n            else:\n                merge_list.append(num2[j])\n                j+=1\n        if i==len(num1):\n            for a in range(j,len(num2)):\n                merge_list.append(num2[a])\n        if j==len(num2):\n            for a in range(i,len(num1)):\n                merge_list.append(num1[a])\n        return merge_list\n    if num3!=[]:\n        while(i<len(num1) and j<len(num3)):\n            if num1[i]<num3[j]:\n                merge_list.append(num1[i])\n                i+=1\n            else:\n                merge_list.append(num3[j])\n                j+=1\n        if i==len(num1):\n            for a in range(j,len(num3)):\n                merge_list.append(num3[a])\n        if j==len(num3):\n            for a in range(i,len(num1)):\n                merge_list.append(num1[a])\n        return merge_list\ndef merge_sorted_list_4(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merge_list=[]\n    if num1==[] and num2==[] and num3==[]:\n        return []\n    if num1==[] and num2!=[]:\n        return num2\n    if num1==[] and num3!=[]:\n        return num3\n    if num2==[] and num3!=[]:\n        return num2\n    if num2!=[]:\n        while(i<len(num1) and j<len(num2)):\n            if num1[i]<num2[j]:\n                merge_list.append(num"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return heapq.merge(num1,num2,num3)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if len(s) == 1:\n        return s[0]\n    else:\n        return ((s[1:]+s[0])[n%len(s)]+odd_Equivalent(s[1:],n))\n        \n    \n    \ndef alternate_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an alternate value when rotating a binary string the given number of times.\n    '''\n    if len(s) == 1:\n        return s[0]\n    else:\n        return ((s[1:]+s[0])[n%len(s)]+alternate_Equivalent(s[1:],n))\n    \n    \ndef base_3_to_10(s):\n    '''\n    Write a python function to convert a binary string to a decimal number.\n    '''\n    return reduce(lambda x,y: x*2+y,map(lambda x: int(x),s))\n    \n    \ndef base_10_to_base_3(s):\n    '''\n    Write a python function to convert a decimal number to a binary string.\n    '''\n    s=str(s)\n    s_len=len(s)\n    if s_len==1:\n        return s\n    else:\n        return base_10_to_base_3(s[s_len-1]+s[:s_len-1])\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n==0: \n        return 1\n    else: \n        return (odd_Equivalent(s,n-1)*2 + 1)%(10**9 + 7)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    p = len(s)\n    s2 = ''\n    for i in range(p):\n        s2 = s2 + s[p-i-1]\n    #print(s2)\n    count = 0\n    for i in range(p):\n        if int(s2[i])%2!= int(s[i])%2:\n            count +=1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary = bin(int(s,2)^n)\n    length = len(binary)-2\n    count = 0\n    for i in range(length):\n        if binary[i] == '1':\n            count += 1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    count = 0\n    \n    for i in range(n):\n        s_temp = s\n        s = s_temp[-1] + s_temp[:-1]\n        \n        if (int(s,2) % 2)!= 0:\n            count += 1\n    \n    return count\n    \ndef count_zeros(s):\n    '''\n    Write a python function to return the number of zeros in the binary representation of a given number.\n    '''\n    \n    count = 0\n    \n    while s!= 0:\n        if s % 2 == 0:\n            s = s / 2\n        else:\n            s = s - 1\n            count += 1\n            \n    return count\n    \ndef count_binary(s,n):\n    '''\n    Write a python function to return the count of the number of times that a given number occurs in a binary string.\n    '''\n    \n    count = 0\n    \n    for i in range(n):\n        if s[i] == '1':\n            count += 1\n    \n    return count\n    \ndef hamming_distance(s1,s2):\n    '''\n    Write a python function to return the Hamming distance between two binary strings.\n    '''\n    \n    distance = 0\n    \n    if len(s1)!= len(s2):\n        print \"Lengths do not match\"\n        \n    for i in range(len(s1)):\n        if s1[i]!= s2[i]:\n            distance += 1\n    \n    return distance\n    \ndef closest_power_of_two(n):\n    '''\n    Write a python function to return the closest power of two for the given number.\n    '''\n    \n    pow = 1\n    \n    while pow < n:\n        pow *= 2\n    \n    if pow!= n:\n        pow += 1\n    \n    return pow\n    \ndef single_digit_count(n):\n    '''\n    Write a python function to return the count of the number of times that a given number occurs in a string of digits.\n    '''\n    \n    count = 0\n    \n    while n!= 0:\n        if n % 10 == 1:\n            count += 1\n        n = n / 10\n    \n    return count\n    \ndef closest_power_of_2(n):\n    '''\n    Write a python function to return the closest power of 2 for the given number.\n    '''\n    \n    pow = 1\n    \n    while pow < n:\n        pow *= 2\n    \n    if pow!= n:\n        pow += 1\n    \n    return pow\n    \ndef multi_digit_count(n):\n    '''\n    Write a python function to return the count of the number of times that a given number occurs in a string of digits.\n    '''\n    \n    count = 0\n    \n    while n!= 0:\n        if n % 10 == 1:\n            count += 1\n        n = n / 10\n    \n    return count\n    \ndef closest_power_of_3(n):\n    '''\n    Write a python function to return the closest power of 3 for the given number.\n    '''\n    \n    pow = 1\n    \n    while pow < n:\n        pow *= 3\n    \n    if pow!= n:\n        pow += 1\n    \n    return pow\n    \ndef is_balanced_parentheses(s):\n    '''\n    Write a python function to return True if a string of parentheses is properly balanced and False otherwise.\n    '''\n    \n    count = 0\n    \n    for i in range(len(s)):\n        if s[i] == '(':\n            count += 1\n        elif s[i] == ')':\n            count -= 1\n    \n    return count == 0\n    \ndef is_balanced_brackets(s):\n    '''\n    Write a python function to return True if a string of brackets is properly balanced and False otherwise.\n    '''\n    \n    count = 0\n    \n    for i in range(len(s)):\n        if s[i] == '[':\n            count += 1\n        elif s[i] == ']':\n            count -= 1\n    \n    return count == 0\n    \ndef is_balanced_braces(s):\n    '''\n    Write a python function to return True if a string of braces is properly balanced and False otherwise.\n    '''\n    \n    count = 0\n    \n    for i in range(len(s)):\n        if s[i] == '{':\n            count += 1\n        elif s[i] == '}':\n            count -= 1\n    \n    return count == 0\n    \ndef is_balanced_paranthesis(s):\n    '''\n    Write a python function to return True if a string of parantheses is properly balanced and False otherwise.\n    '''\n    \n    count = 0\n    \n    for i in range(len(s)):\n        if s[i] == '(':\n            count += 1\n        elif s[i] == ')':\n            count -= 1\n    \n    return count == 0\n    \ndef palindrome_permutation(s):\n    '''\n    Write a python function to return True if a string is a permutation of a palindrome and False otherwise.\n    '''\n    \n    count = 0\n    \n    for i in range(len(s)):\n        if s[i]!= s[-(i + 1)]:\n            count += 1\n    \n    return count <= 1\n    \ndef count_binary_trees(n):\n    '''\n    Write a python function to return the count of the number of ways that a given number of nodes can be arranged into a binary tree.\n    '''\n    \n    count = 0\n    \n    for i in range(n):\n        if 2**i <= n:\n            count += 1\n    \n    return count\n    \ndef count_binary_strings(n):\n    '''\n    Write a python function to return the count of the number of strings of length n that can be formed from 0 or 1 characters.\n    '''\n    \n    count = 0\n    \n    for i in range(n):\n        if i == 0 or i == 1:\n            count += 1\n        else:\n            count += 2 * count_binary_strings(i - 1)\n    \n    return count\n    \ndef is_prime(n):\n    '''\n    Write a python function to return True if a given number is prime and False otherwise.\n    '''\n    \n    if n <= 1:\n        return False\n    \n    for i in range(2,n):\n        if n % i == 0:\n            return False\n            \n    return True\n    \ndef is_palindrome(n):\n    '''\n    Write a python function to return True if a given number is a palindrome and False otherwise.\n    '''\n    \n    temp = n\n    rev = 0\n    \n    while temp!= 0:\n        digit = temp % 10\n        rev = rev * 10 + digit\n        temp = temp / 10\n    \n    if rev == n:\n        return True\n    else:\n        return False\n    \ndef count_prime_digits(n):\n    '''\n    Write a python function to return the count of the number of digits that are prime numbers.\n    '''\n    \n    count = 0\n    \n    while n!= 0:\n        if is_prime(n % 10):\n            count += 1\n        n = n / 10\n    \n    return count\n    \ndef count_odd_digits(n):\n    '''\n    Write a python function to return the count of the number of odd digits.\n    '''\n    \n    count = 0\n    \n    while n!= 0:\n        if n % 10 % 2!= 0:\n            count += 1\n        n = n / 10\n    \n    return count\n    \ndef count_even_digits(n):\n    '''\n    Write a python function to return the count of the number of even digits.\n    '''\n    \n    count = 0\n    \n    while n!= 0:\n        if n % 10 % 2 == 0:\n            count += 1\n        n = n / 10\n    \n    return count\n    \ndef is_palindrome_permutation(s):\n    '''\n    Write a python function to return True if a string is a permutation of a palindrome and False otherwise.\n    '''\n    \n    temp "
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # s = raw_input()\n    # n = int(raw_input())\n    import math\n    if n==0:\n        return 1\n    if n==1:\n        if s[0]=='1':\n            return 1\n        else:\n            return 0\n    else:\n        ans = 0\n        for i in range(n):\n            if (s[0]=='1'):\n                ans += 1\n            elif (s[0]=='0'):\n                ans += 0\n            else:\n                print \"error\"\n            if len(s)==1:\n                return ans\n            s = s[-1]+s[1:len(s)-1]\n        return ans\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if len(s) == 0:\n        return 0\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    bit_string=bitstring(s)\n    count=0\n    for i in range(0,n):\n        bit_string=rotate(bit_string)\n        for j in range(0,len(bit_string)):\n            if(bit_string[j]=='1'):\n                count=count+1\n                break\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def alternate(s,n):\n        return int(s,2) ^ n\n    def bit_flip(s,n):\n        return int(s,2) ^ (n*'0')\n    def bit_flip_reversed(s,n):\n        return int(s,2) ^ (n*'1')\n    def bit_flip_reverse(s,n):\n        return int(s,2) ^ (n*'1')\n    def bit_flip_reversed_reverse(s,n):\n        return int(s,2) ^ (n*'0')\n    def all_same(s,n):\n        return n * '0' in s\n    def all_equal(s,n):\n        return n * '1' in s\n    def all_equal_2(s,n):\n        return n * '1' in s\n    def all_different(s,n):\n        return n * '1' not in s\n    def all_different_2(s,n):\n        return n * '0' not in s\n    def all_different_3(s,n):\n        return n * '1' not in s\n    def all_different_4(s,n):\n        return n * '0' not in s\n    def all_different_5(s,n):\n        return n * '1' not in s\n    def all_different_6(s,n):\n        return n * '0' not in s\n    def all_different_7(s,n):\n        return n * '1' not in s\n    def all_different_8(s,n):\n        return n * '0' not in s\n    def all_different_9(s,n):\n        return n * '1' not in s\n    def all_different_10(s,n):\n        return n * '0' not in s\n    def all_different_11(s,n):\n        return n * '1' not in s\n    def all_different_12(s,n):\n        return n * '0' not in s\n    def all_different_13(s,n):\n        return n * '1' not in s\n    def all_different_14(s,n):\n        return n * '0' not in s\n    def all_different_15(s,n):\n        return n * '1' not in s\n    def all_different_16(s,n):\n        return n * '0' not in s\n    def all_different_17(s,n):\n        return n * '1' not in s\n    def all_different_18(s,n):\n        return n * '0' not in s\n    def all_different_19(s,n):\n        return n * '1' not in s\n    def all_different_20(s,n):\n        return n * '0' not in s\n    def all_different_21(s,n):\n        return n * '1' not in s\n    def all_different_22(s,n):\n        return n * '0' not in s\n    def all_different_23(s,n):\n        return n * '1' not in s\n    def all_different_24(s,n):\n        return n * '0' not in s\n    def all_different_25(s,n):\n        return n * '1' not in s\n    def all_different_26(s,n):\n        return n * '0' not in s\n    def all_different_27(s,n):\n        return n * '1' not in s\n    def all_different_28(s,n):\n        return n * '0' not in s\n    def all_different_29(s,n):\n        return n * '1' not in s\n    def all_different_30(s,n):\n        return n * '0' not in s\n    def all_different_31(s,n):\n        return n * '1' not in s\n    def all_different_32(s,n):\n        return n * '0' not in s\n    def all_different_33(s,n):\n        return n * '1' not in s\n    def all_different_34(s,n):\n        return n * '0' not in s\n    def all_different_35(s,n):\n        return n * '1' not in s\n    def all_different_36(s,n):\n        return n * '0' not in s\n    def all_different_37(s,n):\n        return n * '1' not in s\n    def all_different_38(s,n):\n        return n * '0' not in s\n    def all_different_39(s,n):\n        return n * '1' not in s\n    def all_different_40(s,n):\n        return n * '0' not in s\n    def all_different_41(s,n):\n        return n * '1' not in s\n    def all_different_42(s,n):\n        return n * '0' not in s\n    def all_different_43(s,n):\n        return n * '1' not in s\n    def all_different_44(s,n):\n        return n * '0' not in s\n    def all_different_45(s,n):\n        return n * '1' not in s\n    def all_different_46(s,n):\n        return n * '0' not in s\n    def all_different_47(s,n):\n        return n * '1' not in s\n    def all_different_48(s,n):\n        return n * '0' not in s\n    def all_different_49(s,n):\n        return n * '1' not in s\n    def all_different_50(s,n):\n        return n * '0' not in s\n    def all_different_51(s,n):\n        return n * '1' not in s\n    def all_different_52(s,n):\n        return n * '0' not in s\n    def all_different_53(s,n):\n        return n * '1' not in s\n    def all_different_54(s,n):\n        return n * '0' not in s\n    def all_different_55(s,n):\n        return n * '1' not in s\n    def all_different_56(s,n):\n        return n * '0' not in s\n    def all_different_57(s,n):\n        return n * '1' not in s\n    def all_different_58(s,n):\n        return n * '0' not in s\n    def all_different_59(s,n):\n        return n * '1' not in s\n    def all_different_60(s,n):\n        return n * '0' not in s\n    def all_different_61(s,n):\n        return n * '1' not in s\n    def all_different_62(s,n):\n        return n * '0' not in s\n    def all_different_63(s,n):\n        return n * '1' not in s\n    def all_different_64(s,n):\n        return n * '0' not in s\n    def all_different_65(s,n):\n        return n * '1' not in s\n    def all_different_66(s,n):\n        return n * '0' not in s\n    def all_different_67(s,n):\n        return n * '1' not in s\n    def all_different_68(s,n):\n        return n * '0' not in s\n    def all_different_69(s,n):\n        return n * '1' not in s\n    def all_different_70(s,n):\n        return n * '0' not in s\n    def all_different_71(s,n):\n        return n * '1' not in s\n    def all_different_72(s,n):\n        return n * '0' not in s\n    def all_different_73(s,n):\n        return n * '1' not in s\n    def all_different_74(s,n):\n        return n * '0' not in s\n    def all_different_75(s,n):\n        return n * "
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    res = s.replace('0','')\n    res = res.replace('1', 'X')\n    res = res.split(' ')\n    out = []\n    for i in range(n):\n        for j in res:\n            if j!= '':\n                out.append(int(j[1::]))\n        res = [x[1::] for x in res[1::]]\n    return len([x for x in out if x%2==1])\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in nestedlist:\n        for j in nestedlist:\n            if i==j:\n                common_elements.append(i)\n    print common_elements\n    \ndef common_in_nested_lists_sort(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    sortedlist = sorted(nestedlist)\n    print sortedlist\n    for i in range(1,len(sortedlist)):\n        if sortedlist[i]==sortedlist[i-1]:\n            print sortedlist[i]\n            \ndef common_in_nested_lists_flatten(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    flattenedlist = list(itertools.chain(*nestedlist))\n    print flattenedlist\n    \ndef common_in_nested_lists_set(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    s = set(itertools.chain(*nestedlist))\n    print s\n    \ndef common_in_nested_lists_tuple(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    t = tuple(itertools.chain(*nestedlist))\n    print t\n    \ndef common_in_nested_lists_list_to_string(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    str1 = ''\n    for i in nestedlist:\n        str1 += str(i)\n    print str1\n    \ndef common_in_nested_lists_set_to_string(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    str1 = ''\n    for i in set(itertools.chain(*nestedlist)):\n        str1 += str(i)\n    print str1\n    \ndef common_in_nested_lists_tuple_to_string(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    str1 = ''\n    for i in tuple(itertools.chain(*nestedlist)):\n        str1 += str(i)\n    print str1\n    \ndef common_in_nested_lists_list_to_string_format(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    str1 = ''\n    for i in nestedlist:\n        str1 += str(i) + ', '\n    print str1\n    \ndef common_in_nested_lists_set_to_string_format(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    str1 = ''\n    for i in set(itertools.chain(*nestedlist)):\n        str1 += str(i) + ', '\n    print str1\n    \ndef common_in_nested_lists_tuple_to_string_format(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    str1 = ''\n    for i in tuple(itertools.chain(*nestedlist)):\n        str1 += str(i) + ', '\n    print str1\n    \ndef common_in_nested_lists_list_to_string_format_1(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    str1 = ''\n    for i in nestedlist:\n        str1 += '[' + str(i) + ', '\n    print str1\n    \ndef common_in_nested_lists_set_to_string_format_1(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    str1 = ''\n    for i in set(itertools.chain(*nestedlist)):\n        str1 += '[' + str(i) + ', '\n    print str1\n    \ndef common_in_nested_lists_tuple_to_string_format_1(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    str1 = ''\n    for i in tuple(itertools.chain(*nestedlist)):\n        str1 += '[' + str(i) + ', '\n    print str1\n    \ndef common_in_nested_lists_list_to_string_format_2(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    str1 = '['\n    for i in nestedlist:\n        str1 += str(i) + ', '\n    print str1[:-2] + ']'\n    \ndef common_in_nested_lists_set_to_string_format_2(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    str1 = '['\n    for i in set(itertools.chain(*nestedlist)):\n        str1 += str(i) + ', '\n    print str1[:-2] + ']'\n    \ndef common_in_nested_lists_tuple_to_string_format_2(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    str1 = '['\n    for i in tuple(itertools.chain(*nestedlist)):\n        str1 += str(i) + ', '\n    print str1[:-2] + ']'\n    \ndef common_in_nested_lists_list_to_string_format_3(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    str1 = ''\n    for i in nestedlist:\n        str1 += str(i) + ', '\n    print str1\n    \ndef common_in_nested_lists_set_to_string_format_3(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    str1 = ''\n    for i in set(itertools.chain(*nestedlist)):\n        str1 += str(i) + ', '\n    print str1\n    \ndef common_in_nested_lists_tuple_to_string_format_3(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    str1 = ''\n    for i in tuple(itertools.chain(*nestedlist)):\n        str1 += str(i) + ', '\n    print str1\n    \ndef common_in_nested_lists_list_to_string_format_4(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    str1 = ''\n    for i in nestedlist:\n        str1 += str(i) + ', '\n    print '[' + str1[:-2] + ']'\n    \ndef common_in_nested_lists_set_to_string_format_4(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    str1 = ''\n    for i in set(itertools.chain(*nestedlist)):\n        str1 += str(i) + ', '\n    print '[' + str1[:-2] + ']'\n    \ndef common_in_nested_lists_tuple_to_string_format_4(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    str1 = ''\n    for i in tuple(itertools.chain(*nestedlist)):\n        str1 += str(i) + ', '\n    print '[' + str1[:-2] + ']'\n    \ndef common_in_nested_lists_list_to_string_format_5(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    ''"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Note: Consider to use filter and reduce function if possible\n    return list(set.intersection(*map(set,nestedlist)))\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) == 0:\n        return []\n    elif len(nestedlist) == 1:\n        return nestedlist[0]\n    else:\n        return common_in_nested_lists([item for sublist in nestedlist[1:] for item in sublist]) + \\\n               common_in_nested_lists([item for sublist in nestedlist[:-1] for item in sublist])\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elems = []\n    for i in nestedlist:\n        if isinstance(i, list):\n            for j in common_in_nested_lists(i):\n                common_elems.append(j)\n        else:\n            common_elems.append(i)\n    return common_elems\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist: return []\n    if len(nestedlist) == 1: return nestedlist[0]\n    if len(nestedlist) == 2:\n        if nestedlist[0] == nestedlist[1]: return nestedlist[0]\n        return []\n    return common_in_nested_lists([x for sublist in nestedlist[1:] for x in sublist]) + \\\n           common_in_nested_lists([x for sublist in nestedlist[1:] for x in sublist]) + \\\n           common_in_nested_lists([x for sublist in nestedlist[1:] for x in sublist])\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return [val for val in set(nestedlist[0]) for nestedlist in nestedlist[1:]]\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    mylist = []\n    for i in nestedlist:\n        for j in i:\n            if j not in mylist:\n                mylist.append(j)\n    return mylist\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    nestedlist = nestedlist\n    for x in range(len(nestedlist)):\n        nestedlist[x] = set(nestedlist[x])\n    return list(nestedlist[0].intersection(*nestedlist))\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    for item in nestedlist:\n        for inner_item in item:\n            if inner_item in nestedlist:\n                common_elements.append(inner_item)\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for ele in nestedlist:\n        for el in ele:\n            if el not in common_list:\n                common_list.append(el)\n    return common_list\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return int(text)\n    else:\n        return 0\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    text = text.strip()\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    result = True\n    for c in text:\n        if c not in '0123456789':\n            result = False\n            break\n    return result\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    return True\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return text.isdigit()\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text[0] == '-':\n        return False\n    try:\n        int(text)\n    except ValueError:\n        return False\n    return True\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    text = text.strip()\n    text = text.replace(\" \", \"\")\n    if len(text) > 1:\n        return False\n    if text.isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for each_dict in list1:\n        if each_dict == {}:\n            return True\n    return False\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    #import pdb;pdb.set_trace()\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    count = 0\n    for i in list1:\n        if i:\n            count += 1\n    if count == 0:\n        return True\n    else:\n        return False\n    \n    \ndef gcd(a, b):\n    '''\n    Write a function to return the Greatest Common Divisor of a and b.\n    '''\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif a > b:\n        return gcd(a-b, b)\n    else:\n        return gcd(a, b-a)\n    \n    \ndef flatten_list(l):\n    '''\n    Write a function to flatten a list of lists.\n    \n    >>> flatten_list([[1,2],[3,4]])\n    [1, 2, 3, 4]\n    \n    >>> flatten_list([])\n    []\n    '''\n    return [x for sublist in l for x in sublist]\n    \n    \ndef palindrome(string):\n    '''\n    Write a function to check whether a string is a palindrome.\n    \n    >>> palindrome('abcba')\n    True\n    \n    >>> palindrome('abc')\n    False\n    '''\n    return string == string[::-1]\n    \n    \ndef caesar_cipher(string, key):\n    '''\n    Write a function to implement Caesar Cipher.\n    \n    >>> caesar_cipher('abc', 2)\n    'zab'\n    \n    >>> caesar_cipher('abcd', 5)\n    'bcde'\n    \n    >>> caesar_cipher('123', 2)\n    '123'\n    '''\n    n = ord('a')\n    return ''.join(chr((ord(x)-n+key)%26+n) if x.isalpha() else x for x in string)\n    \n    \ndef knot_hash(string, skip, rounds):\n    '''\n    Write a function to implement Knot Hash.\n    \n    >>> knot_hash('this is a string', 10, 1)\n    'akltqznfryqyehklnwjxwbu'\n    \n    >>> knot_hash('fluffy', 4, 1)\n    'ngxlgmlwqjvbqjxhxqm'\n    '''\n    string = list(string)\n    temp = list(range(256))\n    skip = skip + len(string)\n    for _ in range(rounds):\n        for i in range(len(string)):\n            index = (temp[i] + ord(string[i])) % 256\n            temp[index], temp[i] = temp[i], temp[index]\n        for i in range(skip):\n            index = (temp[i] + ord(string[i])) % 256\n            temp[index], temp[i] = temp[i], temp[index]\n    dense = [temp[i] for i in range(skip) if i % 16 == 0]\n    return ''.join([chr(dense[i]^dense[i+16]) for i in range(16)])\n    \n    \ndef knapsack(items, capacity):\n    '''\n    Write a function to implement 0/1 Knapsack Problem.\n    \n    >>> knapsack([(4,10),(5,15),(2,5)], 10)\n    [(2, 5), (4, 10), (5, 15)]\n    \n    >>> knapsack([(1,1),(2,2),(3,3)], 6)\n    [(2, 2), (3, 3)]\n    \n    >>> knapsack([], 6)\n    []\n    '''\n    return [t for t in items if t[0] <= capacity]\n    \n    \ndef grid_traveler(m, n):\n    '''\n    Write a function to calculate all possible combinations of (m, n) and then calculate the number of possible paths to reach the bottom right corner.\n    \n    >>> grid_traveler(1, 1)\n    1\n    \n    >>> grid_traveler(2, 3)\n    6\n    \n    >>> grid_traveler(5, 3)\n    28\n    '''\n    return factorial(m + n) / (factorial(m) * factorial(n))\n    \n    \ndef count_battleships(board):\n    '''\n    Write a function to count the number of battleships on a board.\n    \n    >>> count_battleships([['X', '.', '.', 'X'], ['.', 'X', '.', '.'], ['.', '.', 'X', 'X']])\n    2\n    \n    >>> count_battleships([['.', '.', 'X', '.'], ['X', 'X', 'X', 'X']])\n    0\n    '''\n    def check(r, c):\n        if board[r][c] == 'X':\n            board[r][c] = 'H'\n            if r+1 < len(board) and board[r+1][c] == 'X':\n                check(r+1, c)\n            if r-1 >= 0 and board[r-1][c] == 'X':\n                check(r-1, c)\n            if c+1 < len(board[r]) and board[r][c+1] == 'X':\n                check(r, c+1)\n            if c-1 >= 0 and board[r][c-1] == 'X':\n                check(r, c-1)\n        return board\n    count = 0\n    for row in range(len(board)):\n        for col in range(len(board[row])):\n            if board[row][col] == 'X':\n                board = check(row, col)\n                count += 1\n    return count\n    \n    \ndef super_ugly(n, primes):\n    '''\n    Write a function to generate the nth super ugly number.\n    \n    >>> super_ugly(12, [2, 3, 5])\n    15\n    \n    >>> super_ugly(13, [2, 3, 5])\n    25\n    \n    >>> super_ugly(100, [2, 3, 5])\n    8585744\n    '''\n    uglies = [1]\n    for _ in range(n):\n        if uglies[0] == 1:\n            uglies.pop(0)\n        uglies.append(min([prime*uglies[0] for prime in primes]))\n    return uglies[-1]\n    \n    \ndef bubble_sort(nums):\n    '''\n    Write a function to sort a list using bubble sort.\n    \n    >>> bubble_sort([5, 2, 3, 4, 1])\n    [1, 2, 3, 4, 5]\n    '''\n    for _ in range(len(nums)-1):\n        for i in range(len(nums)-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n    return nums\n    \n    \ndef power_set(s):\n    '''\n    Write a function to generate all subsets of a set.\n    \n    >>> power_set([1, 2, 3])\n    [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]\n    '''\n    if len(s) == 0:\n        return [[]]\n    return power_set(s[1:]) + [s[:1]+subset for subset in power_set(s[1:])]\n    \n    \ndef permutations(string):\n    '''\n    Write a function to generate all permutations of a string.\n    \n    >>> permutations('abc')\n    ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n    '''\n    return [''.join(t) for t in set([''.join(t) for t in set(permutations(string[1:]))]+[string[:1]+''.join(t) for t in set(permutations(string[1:]))])]\n    \n    \ndef permute_string(string):\n    '''\n    Write a function to generate all permutations of a string"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)>0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if len(item) > 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    result = True\n    for d in list1:\n        if d:\n            result = False\n    return result\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if list1[0] == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if not nums: return None\n    if len(nums) == 1: return nums[0]\n    else:\n        nums.sort()\n        nums[0] += nums[-1]\n        del nums[-1]\n        return tuple_to_int(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    out = 0\n    for num in nums:\n        out = out * 10 + num\n    return out\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        total = 0\n        for x in nums:\n            total += x * 10**(len(nums) - 1)\n        return total\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return functools.reduce(lambda x,y: x*10+y,nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = sorted(nums)\n    tuple_int = 0\n    for i in range(0, len(nums)):\n        tuple_int += nums[i] * (10**i)\n    return tuple_int\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    l = len(nums)\n    num = 0\n    for i in range(l):\n        num = num + nums[i] * pow(10, l - 1 - i)\n    return num\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [[float(x) for x in item] for item in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [[float(e) for e in row] for row in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for row in test_list:\n        row_float = []\n        for column in row:\n            try:\n                column = float(column)\n            except ValueError:\n                pass\n            row_float.append(column)\n        float_list.append(row_float)\n    return float_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for elem in range(len(test_list)):\n        for i in range(len(test_list[elem])):\n            try:\n                test_list[elem][i] = float(test_list[elem][i])\n            except:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(i) for i in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Make a new list to store the floats in\n    float_list = []\n    \n    # Loop through each sublist\n    for sublist in test_list:\n        # Loop through each element in the sublist\n        for element in sublist:\n            # If the element is convertible to a float, add it to the new list\n            if isinstance(element, float):\n                float_list.append(element)\n                break\n            # If it is not convertible to a float, raise a ValueError\n            else:\n                raise ValueError(\"Element %s is not convertible to a float\" % element)\n    \n    # Return the new list\n    return float_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                test_list[i][j] = 0\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [[float(x) for x in l] for l in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(i) if isinstance(i, (int, long, float)) else i for i in test_list]\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return list(string.split(' '))\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return -1\n    if n == 1:\n        return arr[0]\n    if arr[0]!= arr[1]:\n        return arr[0]\n    if arr[-1]!= arr[-2]:\n        return arr[-1]\n    left = 0\n    right = n-1\n    while left < right:\n        mid = left + (right - left) // 2\n        if arr[mid] == arr[mid - 1]:\n            left = mid + 1\n        elif arr[mid] == arr[mid + 1]:\n            right = mid\n        else:\n            return arr[mid]\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    num1 = 0\n    for i in range(len(arr)):\n        num1 = num1 ^ arr[i]\n        #print(num1, \" - \", arr[i])\n    return num1\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) < 2:\n        return arr\n    if len(arr) == 2:\n        if arr[0]!= arr[1]:\n            return arr[0]\n        else:\n            return arr[1]\n    mid = len(arr) // 2\n    left_half = search(arr[:mid])\n    right_half = search(arr[mid:])\n    if left_half == right_half:\n        return left_half\n    left_start = 0\n    right_start = 0\n    if left_half < right_half:\n        left_start = mid\n        right_start = 0\n    else:\n        left_start = 0\n        right_start = mid\n    while True:\n        if left_start > len(arr) - 1 or right_start > len(arr) - 1:\n            break\n        if arr[left_start] == arr[right_start]:\n            left_start += 1\n            right_start += 1\n        elif arr[left_start] < arr[right_start]:\n            left_start += 1\n        else:\n            right_start += 1\n    if left_start > len(arr) - 1:\n        return right_half\n    elif right_start > len(arr) - 1:\n        return left_half\n    return arr[left_start]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    return find_unique(arr)\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    return arr[0] if arr.count(arr[0]) == 1 else arr[1]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if not arr:\n        return None\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    low = 0\n    high = len(arr) - 1\n    while(low <= high):\n        mid = int((low + high) / 2)\n        if(mid == low or mid == high):\n            return arr[mid]\n        count = 0\n        for i in range(len(arr)):\n            if arr[i] > arr[mid]:\n                count += 1\n        if count > mid:\n            high = mid - 1\n        else:\n            low = mid + 1\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr.count(arr[i]) == 1:\n            return arr[i]\n    return 0\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    #base case\n    if n == 1:\n        return arr[0]\n    #else find the index of the middle element\n    mid = n/2\n    #if the array is even, we do not have to do anything\n    if n%2 == 0:\n        if arr[mid-1] == arr[mid]:\n            return search(arr[:mid])\n        else:\n            return search(arr[mid:])\n    #if the array is odd, we have to find the mid element\n    else:\n        #we find the index of the element before the middle\n        if arr[mid-1] == arr[mid]:\n            return search(arr[:mid])\n        else:\n            return search(arr[mid:])\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    d = {}\n    for i in arr:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    return d\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif len(list1) == 1:\n        return list1[0]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    pairs = [(i,j) for i in list1 for j in list1 if i < j]\n    return max([abs(i*j) for i,j in pairs])\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for index, val in enumerate(list1):\n        if index % 2 == 0:\n            val_tuple = list1[index]\n            for index_2, val_2 in enumerate(val_tuple):\n                if index_2 % 2 == 0:\n                    product = val_tuple[index_2] * val\n                    if product > max_product:\n                        max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2 = list(zip(list1,list1))\n    list3 = []\n    for i in range(len(list2)-1):\n        list3.append(abs(list2[i][0]*list2[i+1][1]))\n    return max(list3)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return (0, 0)\n    \n    max_tuple = list1[0]\n    max_val = max_tuple[0] * max_tuple[1]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    n = len(list1)\n    \n    #Maximum product will be stored here\n    max_product = 0\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    print \"Input: \", list1\n    print \"Output: \", max_product_tuple(list1)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in list1:\n        for j in list1:\n            product = i[0]*i[1]*j[1]\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return ()\n    elif len(list1) == 1:\n        return list1[0]\n    elif len(list1) == 2:\n        return (list1[0][0] * list1[1][1], list1[0][1] * list1[1][0])\n    else:\n        max_tuple = list1[0]\n        for x in list1[1:]:\n            #print(x)\n            current_tuple = max_product_tuple(list1[0:list1.index(x)])\n            #print(current_tuple)\n            current_product = current_tuple[0] * x[1]\n            #print(current_product)\n            if current_product > max_tuple[0]:\n                max_tuple = (current_product, x[1])\n            current_product = current_tuple[1] * x[0]\n            #print(current_product)\n            if current_product > max_tuple[1]:\n                max_tuple = (current_product, x[0])\n        return max_tuple\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    #List of tuples\n    max_product = 0\n    for i in range(0,len(list1)-1):\n        for j in range(i+1,len(list1)):\n            temp = abs(list1[i][0]*list1[i][1]*list1[j][0]*list1[j][1])\n            if temp > max_product:\n                max_product = temp\n    return max_product\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum(sorted([n for n in range(2, limit) if is_amicable(n)]))\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        j = sum_of_divisors(i)\n        if j!= i and sum_of_divisors(j) == i:\n            amicable_numbers.add(i)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    \n    amicable_numbers = set()\n    for x in range(1, limit):\n        y = sum(divisors(x))\n        if x!= y and divisors(y) == [x]:\n            amicable_numbers.add(x)\n            amicable_numbers.add(y)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    amicable_numbers = []\n    for i in range(1, limit):\n        n1 = get_factors(i)\n        n2 = get_factors(sum(n1))\n        if i == sum(n2) and i!= sum(n1) and i!= sum(n1):\n            amicable_sum += i\n            amicable_numbers.append(i)\n            amicable_numbers.append(sum(n1))\n    return amicable_sum\n    \ndef get_factors(number):\n    '''\n    Get factors of a number\n    '''\n    factor_list = []\n    for i in range(1, int(math.sqrt(number))):\n        if number % i == 0:\n            factor_list.append(i)\n            factor_list.append(number / i)\n    return factor_list\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        for j in range(1, limit):\n            if i == j:\n                continue\n            if sum(divisors(i)) == j and sum(divisors(j)) == i:\n                amicable_numbers.add(i)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        if sum_of_divisors(i) == i:\n            sum += i\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    for i in range(1, limit):\n        amicable_numbers.add(i)\n        dividend = i\n        divisor = sum(divmod(dividend, divisor)[::-1] for divisor in amicable_numbers if divisor!= i)\n        if divisor in amicable_numbers:\n            amicable_numbers.remove(divisor)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum([b for a in range(1,limit) if a % 2 == 0 and sum([b for b in range(a,limit) if b % a == 0]) == a])\n    "
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_list = []\n    for n in range(2, limit):\n        if n not in amicable_list:\n            result = sum(get_amicable_sum_list(n))\n            if result!= n:\n                if result in amicable_list:\n                    amicable_list.append(n)\n                else:\n                    amicable_list.append(result)\n    return sum(amicable_list)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum(filter(lambda x: x[0] == x[1] and x[0]!= x[1],\n        map(lambda x: (factorial(x), x),\n            filter(lambda x: factorial(x) < limit, range(1, limit)))))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)\n    \n    \n    \n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    r = cmath.polar(a + cmath.exp(1j*b))\n    angle = 180*r[1]/cmath.pi\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    arg = a * cmath.rect(1,b)\n    angle = cmath.phase(arg)\n    return angle\ndef quadratic_equation(a,b,c):\n    '''\n    Write a function to solve quadratic equation of the form ax**2 + bx + c = 0.\n    '''\n    return (-b + (b**2 - 4 * a * c)**0.5) / (2 * a)\ndef inv_mod(a,n):\n    '''\n    Write a function to compute the inverse of a modulo n.\n    '''\n    def egcd(a, b):\n        if a == 0:\n            return (b, 0, 1)\n        else:\n            g, y, x = egcd(b % a, a)\n            return (g, x - (b // a) * y, y)\n    def modinv(a, n):\n        g, x, y = egcd(a, n)\n        if g!= 1:\n            raise Exception('modular inverse does not exist')\n        else:\n            return x % n\n    x = modinv(a,n)\n    return x\ndef bubble_sort(arr):\n    '''\n    Write a function to do bubble sort.\n    '''\n    for i in range(len(arr)):\n        for j in range(len(arr) - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\ndef subsets(arr):\n    '''\n    Write a function to compute all the subsets of a given set.\n    '''\n    def power(a,n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return a\n        else:\n            return a * power(a, n - 1)\n    def multinomial(n, r):\n        return power(n, r) / (factorial(r) * factorial(n - r))\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n    def permutations(arr, r):\n        if r == len(arr):\n            return 1\n        else:\n            return multinomial(len(arr), r) * permutations(arr, r + 1)\n    def combinations(arr, r):\n        if r == len(arr):\n            return 1\n        else:\n            return multinomial(len(arr), r) * combinations(arr, r + 1)\n    def subset(arr, r):\n        if r == 0:\n            return [[]]\n        else:\n            return subset(arr, r - 1) + [arr[i] for i in range(len(arr)) if arr[i] not in arr[:i]]\n    def permutations_dict(arr):\n        res = {}\n        for i in range(len(arr)):\n            res[i] = arr[i]\n        return res\n    def combinations_dict(arr):\n        res = {}\n        for i in range(len(arr)):\n            res[i] = arr[i]\n        for i in range(len(arr)):\n            for j in range(i, len(arr)):\n                res[i, j] = res[i] + res[j]\n        return res\n    def permutations_tuple(arr):\n        res = ()\n        for i in range(len(arr)):\n            res += (arr[i],)\n        return res\n    def combinations_tuple(arr):\n        res = ()\n        for i in range(len(arr)):\n            res += (arr[i],)\n        for i in range(len(arr)):\n            for j in range(i, len(arr)):\n                res += (arr[i], arr[j])\n        return res\n    def combinations_dict(arr):\n        res = {}\n        for i in range(len(arr)):\n            res[i] = arr[i]\n        for i in range(len(arr)):\n            for j in range(i, len(arr)):\n                res[i, j] = res[i] + res[j]\n        return res\n    def subset_dict(arr):\n        res = {}\n        for i in range(len(arr)):\n            res[i] = arr[i]\n        for i in range(len(arr)):\n            for j in range(i, len(arr)):\n                res[i, j] = res[i] + res[j]\n        return res\n    arr = list(arr)\n    if len(arr) == 0:\n        return [[]]\n    else:\n        return [arr[:]] + subsets(arr[1:])\ndef superpermutations(arr):\n    '''\n    Write a function to compute all the superpermutations of a given set.\n    '''\n    def superpermutations(arr, r, i, n, st):\n        if i == n:\n            for j in range(n):\n                st.append(arr[j])\n            print(st)\n            return\n        for j in range(i, n):\n            arr[i], arr[j] = arr[j], arr[i]\n            superpermutations(arr, r, i + 1, n, st)\n            arr[i], arr[j] = arr[j], arr[i]\n    def permutations(arr, r, i, n):\n        if i == n:\n            print(arr)\n            return\n        for j in range(i, n):\n            arr[i], arr[j] = arr[j], arr[i]\n            permutations(arr, r, i + 1, n)\n            arr[i], arr[j] = arr[j], arr[i]\n    def superpermutations_dict(arr):\n        res = {}\n        for i in range(len(arr)):\n            res[i] = arr[i]\n        for i in range(len(arr)):\n            for j in range(i, len(arr)):\n                res[i, j] = res[i] + res[j]\n        return res\n    def permutations_dict(arr):\n        res = {}\n        for i in range(len(arr)):\n            res[i] = arr[i]\n        for i in range(len(arr)):\n            for j in range(i, len(arr)):\n                res[i, j] = res[i] + res[j]\n        return res\n    def superpermutations_tuple(arr):\n        res = ()\n        for i in range(len(arr)):\n            res += (arr[i],)\n        return res\n    def permutations_tuple(arr):\n        res = ()\n        for i in range(len(arr)):\n            res += (arr[i],)\n        for i in range(len(arr)):\n            for j in range(i, len(arr)):\n                res += (arr[i], arr[j])\n        return res\n    def superpermutations_tuple(arr):\n        res = ()\n        for i in range(len(arr)):\n            res += (arr[i],)\n        for i in range(len(arr)):\n            for j in range(i, len(arr)):\n                res += (arr[i], arr[j])\n        return res\n    def superpermutations_dict(arr):\n        res = {}\n        for i in range(len(arr)):\n            res[i] = arr[i]\n        for i in range(len(arr)):\n            for j in range(i, len(arr)):\n                res[i, j] = res[i] + res[j]\n        return res\n    def permutations_dict(arr):\n        res = {}\n        for i in range(len(arr)):\n            res[i] = arr[i]\n        for i in range(len(arr)):\n            for j in range(i, len(arr)):\n                res[i, j] = res[i] + res[j]\n        return res\n    res = []\n    for i in range(len(arr)):\n        superpermutations(arr, i, 0, len(arr), [])\n    return res\ndef transposition(arr):\n    '''\n    Write a function to compute the transposition of an array.\n    '''\n    def transposition(arr)"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a==0 and b==0:\n        return 0\n    else:\n        angle = cmath.phase(complex(a,b))\n        if angle < 0:\n            angle = 360 + angle\n        return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    if angle<0:\n        angle+=2*cmath.pi\n    return angle\ndef angle_complex_2(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    if angle<0:\n        angle+=2*cmath.pi\n    return angle\ndef angle_complex_3(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_4(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_5(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_6(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_7(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_8(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_9(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_10(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_11(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_12(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_13(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_14(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_15(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_16(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_17(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_18(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_19(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_20(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_21(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_22(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_23(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_24(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_25(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_26(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_27(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_28(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_29(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_30(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_31(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_32(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_33(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_34(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_35(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_36(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_37(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_38(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_39(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_40(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_41(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_42(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(angle_complex(a,b))\ndef angle_complex_43(a,b):\n    '''\n    Write a function to get the angle of "
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    prev_zero = 0\n    prev_one = 0\n    for i in range(len(string)): \n        if string[i] == '0': \n            prev_zero += 1\n        else: \n            prev_one += 1\n        max_diff = max(max_diff, prev_zero - prev_one)\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    zeros = 1\n    ones = 1\n    max_zeros = 0\n    max_ones = 0\n    for i in xrange(len(string)):\n        if string[i] == '0':\n            zeros += 1\n            ones = 1\n            if zeros > max_zeros:\n                max_zeros = zeros\n                max_ones = ones\n        else:\n            zeros = 1\n            ones += 1\n            if ones > max_ones:\n                max_ones = ones\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    sub_string = ''\n    max_length = 0\n    for i in xrange(len(string)):\n        if string[i] == '0':\n            sub_string = sub_string + '0'\n            if len(sub_string) > max_length:\n                max_length = len(sub_string)\n        elif string[i] == '1':\n            sub_string = sub_string + '1'\n            if len(sub_string) > max_length:\n                max_length = len(sub_string)\n        else:\n            sub_string = sub_string + string[i]\n    return max_length\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    #Convert the given string to a list of integers\n    count = [int(i) for i in string]\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # if string is empty return 0\n    if len(string) == 0:\n        return 0\n    \n    # if string is 1 then return -1\n    if len(string) == 1:\n        if string[0] == '1':\n            return -1\n        else:\n            return 0\n    \n    # store the number of ones in the first string\n    first_str_ones = 0\n    \n    # traverse the string\n    for i in range(len(string)):\n        # if first_str_ones is 0, then add 1 to first_str_ones\n        if first_str_ones == 0:\n            if string[i] == '1':\n                first_str_ones += 1\n        else:\n            # if first_str_ones is 1 then add -1 to first_str_ones\n            if string[i] == '1':\n                first_str_ones -= 1\n        \n        # return the max difference between first_str_ones and number of ones in the string\n        return max(first_str_ones, number_ones_in_str(string[i:]))\n    \n    \ndef number_ones_in_str(string):\n    '''\n    Write a function to count the number of ones in the given string.\n    '''\n    # if string is empty return 0\n    if len(string) == 0:\n        return 0\n    \n    # if string is 1 then return -1\n    if len(string) == 1:\n        if string[0] == '1':\n            return -1\n        else:\n            return 0\n    \n    # store the number of ones in the first string\n    first_str_ones = 0\n    \n    # traverse the string\n    for i in range(len(string)):\n        # if first_str_ones is 0, then add 1 to first_str_ones\n        if first_str_ones == 0:\n            if string[i] == '1':\n                first_str_ones += 1\n        else:\n            # if first_str_ones is 1 then add -1 to first_str_ones\n            if string[i] == '1':\n                first_str_ones -= 1\n        \n        # return the max difference between first_str_ones and number of ones in the string\n        return first_str_ones\n    \n    \ndef find_max_diff(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # if string is empty return 0\n    if len(string) == 0:\n        return 0\n    \n    # if string is 1 then return -1\n    if len(string) == 1:\n        if string[0] == '1':\n            return -1\n        else:\n            return 0\n    \n    # store the number of ones in the first string\n    first_str_ones = 0\n    \n    # traverse the string\n    for i in range(len(string)):\n        # if first_str_ones is 0, then add 1 to first_str_ones\n        if first_str_ones == 0:\n            if string[i] == '1':\n                first_str_ones += 1\n        else:\n            # if first_str_ones is 1 then add -1 to first_str_ones\n            if string[i] == '1':\n                first_str_ones -= 1\n        \n        # return the max difference between first_str_ones and number of ones in the string\n        return max(first_str_ones, number_ones_in_str(string[i:]))\n    \n    \ndef max_ones(s):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # if string is empty return 0\n    if len(s) == 0:\n        return 0\n    \n    # if string is 1 then return -1\n    if len(s) == 1:\n        if s[0] == '1':\n            return -1\n        else:\n            return 0\n    \n    # store the number of ones in the first string\n    first_str_ones = 0\n    \n    # traverse the string\n    for i in range(len(s)):\n        # if first_str_ones is 0, then add 1 to first_str_ones\n        if first_str_ones == 0:\n            if s[i] == '1':\n                first_str_ones += 1\n        else:\n            # if first_str_ones is 1 then add -1 to first_str_ones\n            if s[i] == '1':\n                first_str_ones -= 1\n        \n        # return the max difference between first_str_ones and number of ones in the string\n        return max(first_str_ones, number_ones_in_str(s[i:]))\n    \n    \ndef number_ones_in_str(s):\n    '''\n    Write a function to count the number of ones in the given string.\n    '''\n    # if string is empty return 0\n    if len(s) == 0:\n        return 0\n    \n    # if string is 1 then return -1\n    if len(s) == 1:\n        if s[0] == '1':\n            return -1\n        else:\n            return 0\n    \n    # store the number of ones in the first string\n    first_str_ones = 0\n    \n    # traverse the string\n    for i in range(len(s)):\n        # if first_str_ones is 0, then add 1 to first_str_ones\n        if first_str_ones == 0:\n            if s[i] == '1':\n                first_str_ones += 1\n        else:\n            # if first_str_ones is 1 then add -1 to first_str_ones\n            if s[i] == '1':\n                first_str_ones -= 1\n        \n        # return the max difference between first_str_ones and number of ones in the string\n        return first_str_ones\n    \n    \ndef find_max_diff(s):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # if string is empty return 0\n    if len(s) == 0:\n        return 0\n    \n    # if string is 1 then return -1\n    if len(s) == 1:\n        if s[0] == '1':\n            return -1\n        else:\n            return 0\n    \n    # store the number of ones in the first string\n    first_str_ones = 0\n    \n    # traverse the string\n    for i in range(len(s)):\n        # if first_str_ones is 0, then add 1 to first_str_ones\n        if first_str_ones == 0:\n            if s[i] == '1':\n                first_str_ones += 1\n        else:\n            # if first_str_ones is 1 then add -1 to first_str_ones\n            if s[i] == '1':\n                first_str_ones -= 1\n        \n        # return the max difference between first_str_ones and number of ones in the string\n        return max(first_str_ones, number_ones_in_str(s[i:]))\n    \n    \ndef max_ones(s):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # if string is empty return 0\n    if len(s) == 0:\n        return 0\n    \n    # if string is 1 then return -1\n    if len(s) == 1:\n        if s[0] == '1':\n            return -1\n        else:\n            return 0\n    \n    # store the number of ones in the first string\n    first_str_ones = 0\n    \n    # traverse the string\n    for i in range(len(s)):\n        # if first_str_ones is 0, then add 1 to first_str_ones\n        if first_str_ones == 0:\n            if s[i] == '1':\n                first_str_ones += 1\n        else:\n            # if first_str_ones is 1 then add -1 to first_str_ones\n            if "
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    current_length = 0\n    count_1 = 0\n    count_0 = 0\n    if len(string) == 0:\n        return 0\n    for i in range(0,len(string)):\n        if string[i] == '1':\n            count_1 += 1\n        elif string[i] == '0':\n            count_0 += 1\n        current_length += 1\n        if count_1 > count_0:\n            max_length = max(max_length,current_length-1)\n        else:\n            max_length = max(max_length,current_length)\n        \n    return max_length\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    max_length = 0\n    for i in range(len(string)):\n        if string[i] == '1':\n            count_1 += 1\n        else:\n            count_0 += 1\n        if count_1 == count_0:\n            max_length = max(max_length, count_1)\n        elif count_0 > count_1:\n            max_length = max(max_length, count_0 - count_1)\n    return max_length\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) < 2:\n        return\n    l = len(string)\n    max_diff = 0\n    for i in range(l):\n        for j in range(i,l):\n            temp = string[i:j+1]\n            if temp.count('1') > temp.count('0'):\n                max_diff = max(max_diff,temp.count('1') - temp.count('0'))\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if not string:\n        return 0\n    else:\n        max_diff = 0\n        char_arr = [0] * len(string)\n        for i in range(len(string)):\n            if string[i] == '0':\n                char_arr[i] = 1\n            else:\n                char_arr[i] = -1\n            if i < len(string)-1:\n                char_arr[i+1] = char_arr[i] + 1\n            max_diff = max(max_diff, abs(char_arr[i]))\n        return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    index = 0\n    result = 0\n    while index < len(string):\n        result = max(result, abs(string.count('0') - string.count('1')))\n        if string[index:index+2] == '00':\n            index += 2\n        else:\n            index += 1\n    return result\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    #print \"Let's find the sum of common divisors of two numbers\"\n    divisors = []\n    for i in range(2, min(a,b)+1):\n        if (a % i == 0) and (b % i == 0):\n            divisors.append(i)\n    #print divisors\n    sum = 0\n    for i in divisors:\n        sum = sum + i\n    print \"The sum of common divisors is %d\" %(sum)\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    result = a\n    for i in range(b,0,-1):\n        if(a % i == 0 and b % i == 0):\n            result = result + i\n    return result\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if(b==0):\n        return 1\n    if(a==b):\n        return a\n    else:\n        if(a>b):\n            return a*sum(b,a%b)\n        else:\n            return b*sum(a,b%a)\nprint(sum(36,60))"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    i = 2\n    div1 = 0\n    div2 = 0\n    while i <= a:\n        if a%i == 0 and b%i == 0:\n            div1 = i\n        i += 1\n    i = 2\n    while i <= b:\n        if b%i == 0 and a%i == 0:\n            div2 = i\n        i += 1\n    return div1 + div2\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    a1=a\n    b1=b\n    while (a1%b1)!=0:\n        a1=b1\n        b1=a1%b1\n    return b1\ndef sum_divisors(a):\n    '''\n    Write a python function to find the sum of divisors of a given number.\n    '''\n    sum_div=0\n    for i in range(1,a):\n        if a%i==0:\n            sum_div=sum_div+i\n    return sum_div\ndef amicable(a):\n    '''\n    Write a python function to find amicable numbers between 1 and n.\n    '''\n    a1=a\n    s1=0\n    while (a1%2==0):\n        s1=s1+2\n        a1=a1/2\n    l2=sum_divisors(s1)\n    s2=0\n    while (l2%2==0):\n        s2=s2+2\n        l2=l2/2\n    if sum(s1,s2)==a:\n        print(a)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    lcm = a\n    gcd = b\n    while gcd > 0:\n        lcm = lcm*b//gcd\n        gcd = gcd*b//gcd\n    return lcm\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    lst = []\n    for i in range(1,a):\n        if a % i == 0 and b % i == 0:\n            lst.append(i)\n    return sum(lst)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    for x in range(2,min(a,b)+1):\n        if (a%x == 0) & (b%x == 0):\n            return x\n    return 1\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common = gcd(a,b)\n    return a*b/common\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    gcd=1\n    if(a<b):\n        a,b=b,a\n    while(b!=0):\n        gcd,a,b=a,b,a%b\n    return a\ndef lcm(a,b):\n    '''\n    Write a python function to find the least common multiple of two given numbers.\n    '''\n    return int(a*b/sum(a,b))\ndef isPrimitive(n):\n    '''\n    Write a python function to find if the given number is prime or not.\n    '''\n    if(n<=1):\n        return False\n    if(n==2):\n        return True\n    if(n>2 and n%2==0):\n        return False\n    i=3\n    while(i*i<=n):\n        if(n%i==0):\n            return False\n        i+=2\n    return True\ndef primeFactors(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    factors=[]\n    if(n<0):\n        n=-n\n    while(n%2==0):\n        factors.append(2)\n        n=n/2\n    for i in range(3,int(n**0.5)+1,2):\n        while(n%i==0):\n            factors.append(i)\n            n=n/i\n    if(n>2):\n        factors.append(n)\n    return factors\ndef gcdPrimeFactors(a,b):\n    '''\n    Write a python function to find the gcd of two given numbers and the prime factors of the first number.\n    '''\n    gcd=sum(primeFactors(a))\n    return gcd,primeFactors(a)\ndef invert(a,m):\n    '''\n    Write a python function to find the modular inverse of a number with respect to a given modulus\n    '''\n    gcd,factors=gcdPrimeFactors(a,m)\n    for i in factors:\n        if((i*a)%m==1):\n            return i\n    return None\ndef isCoprime(a,b):\n    '''\n    Write a python function to find if the given two numbers are coprime or not.\n    '''\n    if(gcd(a,b)==1):\n        return True\n    else:\n        return False\ndef isCoPrime(a,b):\n    '''\n    Write a python function to find if the given two numbers are co-prime or not.\n    '''\n    if(isCoprime(a,b)==True):\n        return True\n    else:\n        return False\ndef extendedEuclid(a,b):\n    '''\n    Write a python function to find the GCD of two numbers with extended Euclid's Algorithm.\n    '''\n    if(b==0):\n        return (1,0)\n    else:\n        gcd,y,x=extendedEuclid(b,a%b)\n        return (gcd,x-(a//b)*y,y)\ndef modInverse(a,m):\n    '''\n    Write a python function to find the modular inverse of a number with respect to a given modulus\n    '''\n    gcd,x=extendedEuclid(a,m)\n    return x%m\ndef modExp(a,b,m):\n    '''\n    Write a python function to find the modular exponentiation of a number with respect to a given modulus.\n    '''\n    if(b==0):\n        return 1\n    elif(b%2==1):\n        return (modExp(a,b-1,m)*a)%m\n    else:\n        return modExp(a**2,b/2,m)\ndef ChineseRemainderTheorem(a,b):\n    '''\n    Write a python function to find the greatest common divisor of two given numbers, and the remainder when both numbers are divided by it.\n    '''\n    if(a<0):\n        a=-a\n    if(b<0):\n        b=-b\n    gcd,remainder=gcdPrimeFactors(a,b)\n    if(remainder==[]):\n        return gcd\n    else:\n        result=remainder[0]\n        for i in remainder[1:]:\n            result=lcm(result,i)\n        return gcd,result\ndef eulerTotient(n):\n    '''\n    Write a python function to find the Euler's totient function of a given number.\n    '''\n    result=n\n    for i in range(2,n):\n        if(n%i==0):\n            result=result-1\n    return result\ndef order(a,p):\n    '''\n    Write a python function to find the order of a number with respect to a given prime number.\n    '''\n    return eulerTotient(p)\ndef primeFactors(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    factors=[]\n    if(n<0):\n        n=-n\n    while(n%2==0):\n        factors.append(2)\n        n=n/2\n    for i in range(3,int(n**0.5)+1,2):\n        while(n%i==0):\n            factors.append(i)\n            n=n/i\n    if(n>2):\n        factors.append(n)\n    return factors\ndef primeFactorsPrime(n):\n    '''\n    Write a python function to find the prime factors of a given number and the number itself.\n    '''\n    factors=primeFactors(n)\n    result=[]\n    for i in factors:\n        result.append(i)\n        result.append(n)\n    return result\ndef efficientFactors(n):\n    '''\n    Write a python function to find the factors of a given number with small prime factors and large prime factors.\n    '''\n    i=2\n    factors=[]\n    while(i*i<=n):\n        if(n%i==0):\n            factors.append(i)\n            n=n/i\n        else:\n            i+=1\n    if(n>1):\n        factors.append(n)\n    return factors\ndef efficientFactorsPrime(n):\n    '''\n    Write a python function to find the prime factors of a given number with small prime factors and large prime factors.\n    '''\n    factors=efficientFactors(n)\n    result=[]\n    for i in factors:\n        result.append(i)\n        result.append(n)\n    return result\ndef factorization(n):\n    '''\n    Write a python function to find the factorization of a given number.\n    '''\n    result=[]\n    if(n<0):\n        n=-n\n    if(n==0):\n        return result\n    if(n==1):\n        return result\n    if(isPrime(n)==True):\n        return [n]\n    factors=efficientFactorsPrime(n)\n    result.append(factors)\n    for i in factors:\n        while(n%i==0):\n            n=n/i\n            result.append(i)\n    return result\ndef isFibonacci(n):\n    '''\n    Write a python function to find if the given number is a fibonacci number or not.\n    '''\n    if(n==0 or n==1):\n        return True\n    a=0\n    b=1\n    for i in range(2,n+1):\n        a,b=b,a+b\n    return n==a\ndef fibonacci(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    if(n<=1):\n        return n\n    a=0\n    b=1\n    for i in range(2,n+1):\n        a,b=b,a+b\n    return a\ndef isPrime(n):\n    '''\n    Write a python function to find if the given number is a prime or not.\n    '''\n    if(n<=1):\n        return False\n    if(n==2):\n        return True\n    if(n%2==0):\n        return False\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    #return x*y\n    #return x.__mul__(y)\n    return x*y\n    \n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if x == 0 or y == 0:\n        return 0\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if x == 0 or y == 0:\n        return 0\n    else:\n        return x + multiply_int(x, y - 1)\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # your code here\n    return [x for x in str if len(x) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    for i in str:\n        if len(i) > n:\n            print(i)\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [w for w in str if len(w) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # return [w for w in str if len(w) > n]\n    # return filter(lambda x: len(x) > n, str)\n    return [w for w in str if len(w) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    list_of_long_words = []\n    for word in str:\n        if len(word) > n:\n            list_of_long_words.append(word)\n    return list_of_long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [x for x in str if len(x) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [item for item in str if len(item)>n]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split(\" \")\n    l = []\n    for word in words:\n        if len(word) > n:\n            l.append(word)\n    return l\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Runtime: O(n^2)\n    def find_long_words(str):\n        n = len(str)\n        for i in range(n):\n            for j in range(i+1, n):\n                if str[i:j] in word_list:\n                    word_list.append(str[i:j])\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # the matrix must be square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    else:\n        square_sum = 0\n        for i in range(len(my_matrix)):\n            square_sum += my_matrix[i][i]\n        # the sum of the bottom row must be equal to the sum of the top row\n        if square_sum!= my_matrix[len(my_matrix) - 1][len(my_matrix) - 1]:\n            return False\n        # the sum of the left column must be equal to the sum of the right column\n        for i in range(len(my_matrix)):\n            sum_column = 0\n            for j in range(len(my_matrix)):\n                sum_column += my_matrix[j][i]\n            if sum_column!= my_matrix[len(my_matrix) - 1][i]:\n                return False\n        # the sum of the diagonal must be equal to the sum of the anti-diagonal\n        sum_diagonal = 0\n        for i in range(len(my_matrix)):\n            sum_diagonal += my_matrix[i][i]\n        if sum_diagonal!= my_matrix[len(my_matrix) - 1][len(my_matrix) - 1]:\n            return False\n        # the sum of the sub-matrix must be equal to the sum of the main matrix\n        for i in range(len(my_matrix) - 1):\n            for j in range(len(my_matrix) - 1):\n                square_sum = 0\n                square_sum += my_matrix[i][j]\n                square_sum += my_matrix[i][j+1]\n                square_sum += my_matrix[i+1][j]\n                square_sum += my_matrix[i+1][j+1]\n                if square_sum!= my_matrix[len(my_matrix) - 1][len(my_matrix) - 1]:\n                    return False\n        return True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    row_sum = [0] * len(my_matrix)\n    col_sum = [0] * len(my_matrix)\n    for i in range(len(my_matrix)):\n        row_sum[i] = sum(my_matrix[i])\n        col_sum[i] = sum([my_matrix[i][j] for j in range(len(my_matrix))])\n    diag_sum = [0] * (len(my_matrix) - 1)\n    diag_sum.append(my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2])\n    diag_sum.append(my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0])\n    print (row_sum)\n    print (col_sum)\n    print (diag_sum)\n    return row_sum == col_sum == diag_sum\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    magic_square = [[int(i) for i in row] for row in my_matrix]\n    magic_square_sum = 0\n    for row in magic_square:\n        magic_square_sum += sum(row)\n    for i in range(0, len(my_matrix)):\n        temp_sum = 0\n        for j in range(0, len(my_matrix)):\n            temp_sum += my_matrix[i][j]\n        if temp_sum!= magic_square_sum:\n            return False\n    for i in range(0, len(my_matrix)):\n        temp_sum = 0\n        for j in range(0, len(my_matrix)):\n            temp_sum += my_matrix[j][i]\n        if temp_sum!= magic_square_sum:\n            return False\n    if magic_square_sum!= 50:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix) == 1:\n        return True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    magic_sum = 0\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    \n    for i in range(rows):\n        magic_sum += my_matrix[i][i]\n    for i in range(rows):\n        magic_sum += my_matrix[i][rows-i-1]\n    for i in range(rows):\n        magic_sum += my_matrix[rows-i-1][i]\n    for i in range(rows):\n        magic_sum += my_matrix[rows-i-1][rows-i-1]\n    \n    if magic_sum == rows*(rows*rows + 1)/2:\n        return True\n    else:\n        return False\n    \ndef get_magic_square_rec(my_matrix, row, col, magic_sum, magic_square):\n    '''\n    Write a function to generate magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    \n    if row == rows and col == cols:\n        if magic_sum == rows*(rows*rows + 1)/2:\n            print_magic_square(my_matrix)\n            return True\n        else:\n            return False\n    \n    else:\n        if col < cols-1:\n            magic_square[row][col] = my_matrix[row][col]\n            get_magic_square_rec(my_matrix, row, col+1, magic_sum + my_matrix[row][col], magic_square)\n        if row < rows-1:\n            magic_square[row][col] = my_matrix[row][col]\n            get_magic_square_rec(my_matrix, row+1, col, magic_sum + my_matrix[row][col], magic_square)\n        if col > 0 and row > 0:\n            magic_square[row][col] = my_matrix[row][col]\n            get_magic_square_rec(my_matrix, row-1, col-1, magic_sum + my_matrix[row][col], magic_square)\n        if col > 0 and row < rows-1:\n            magic_square[row][col] = my_matrix[row][col]\n            get_magic_square_rec(my_matrix, row+1, col-1, magic_sum + my_matrix[row][col], magic_square)\n        if col < cols-1 and row < rows-1:\n            magic_square[row][col] = my_matrix[row][col]\n            get_magic_square_rec(my_matrix, row-1, col+1, magic_sum + my_matrix[row][col], magic_square)\n        if col < cols-1 and row > 0:\n            magic_square[row][col] = my_matrix[row][col]\n            get_magic_square_rec(my_matrix, row-1, col+1, magic_sum + my_matrix[row][col], magic_square)\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] == my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]:\n        return True\n    return False\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    return sum(my_matrix[0]) == sum(my_matrix[i][0] for i in range(1, len(my_matrix))) == sum(my_matrix[-1][j] for j in range(1, len(my_matrix))) == sum(my_matrix[i][-1] for i in range(1, len(my_matrix))) == sum(my_matrix[i][i] for i in range(1, len(my_matrix)))\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    print(my_matrix)\n    if len(my_matrix) == 1:\n        if my_matrix[0][0] == 5:\n            return True\n    \n    cols = len(my_matrix[0])\n    for col in range(cols):\n        if sum(my_matrix[row][col] for row in range(len(my_matrix)))!= 5:\n            return False\n    \n    for col in range(cols):\n        if sum(my_matrix[row][col] for row in range(cols))!= 5:\n            return False\n    \n    for row in range(len(my_matrix)):\n        if sum(my_matrix[row][col] for col in range(len(my_matrix[row])))!= 5:\n            return False\n    \n    for row in range(len(my_matrix)):\n        if sum(my_matrix[row][col] for row in range(len(my_matrix))[col:])!= 5:\n            return False\n    \n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= len(my_matrix[0]):\n        raise ValueError('Matrix must be square')\n    if len(my_matrix) % 2!= 0:\n        raise ValueError('Matrix must have an even number of rows and columns')\n    if min(min(my_matrix)) > 0:\n        raise ValueError('Matrix must be non-negative')\n    if sum(sum(my_matrix))!= 0:\n        raise ValueError('Matrix must have a sum of zero')\n    # your code here\n    n = len(my_matrix)\n    for i in my_matrix:\n        for j in i:\n            if j!= (n ** 2 - n) // 2:\n                raise ValueError('The magic square must be square and the sum of its rows must be zero')\n    # your code here\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    s = 0\n    for i in xrange(n):\n        s += my_matrix[i][i]\n    if s!= n**2:\n        return False\n    for i in xrange(n):\n        s = 0\n        for j in xrange(n):\n            s += my_matrix[i][j]\n        if s!= n**2:\n            return False\n    for j in xrange(n):\n        s = 0\n        for i in xrange(n):\n            s += my_matrix[i][j]\n        if s!= n**2:\n            return False\n    return True\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    from collections import Counter\n    if not nums:\n        return\n    counter = Counter(nums)\n    max_freq = counter.most_common()[0][1]\n    for key, val in counter.items():\n        if val == max_freq:\n            return key\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for i in nums:\n        d[i] += 1\n    res = [0,0]\n    for k,v in d.items():\n        if v > res[1]:\n            res = [k, v]\n    return res\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    \n    max_occur = -1\n    for key, val in count.items():\n        if val > max_occur:\n            max_occur = val\n            max_key = key\n    return max_key\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = 0\n    max_freq_item = None\n    freq = defaultdict(int)\n    for item in nums:\n        freq[item] += 1\n        if freq[item] > max_freq:\n            max_freq = freq[item]\n            max_freq_item = item\n    return max_freq_item\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    return max(d, key=lambda x: d[x])\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    num_freq = defaultdict(int)\n    for num in nums:\n        num_freq[num] += 1\n    max_occur = 0\n    max_freq_val = None\n    for num, freq in num_freq.items():\n        if freq > max_occur:\n            max_occur = freq\n            max_freq_val = num\n    return max_freq_val\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for n in nums:\n        d[n] += 1\n    return max(d, key=d.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = 0\n    max_freq_item = None\n    for item in nums:\n        if nums[item] > max_freq:\n            max_freq = nums[item]\n            max_freq_item = item\n    return max_freq_item\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] if nums[0] == nums[1] else nums[1]\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    result = None\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > freq[result]:\n            result = num\n    return result\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    str2 = ''\n    for char in str1:\n        if char in vowels:\n            str2 = str2 + char\n        else:\n            str2 = str2 + char\n    return str2\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    str1 = list(str1)\n    start = 0\n    end = len(str1) - 1\n    while start <= end:\n        if str1[start] in vowels and str1[end] in vowels:\n            str1[start], str1[end] = str1[end], str1[start]\n            start += 1\n            end -= 1\n        elif str1[start] not in vowels:\n            start += 1\n        elif str1[end] not in vowels:\n            end -= 1\n    return \"\".join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    return str1.translate(str.maketrans('aeiouAEIOU', 'iuaeiouIUAEIOU'))[::-1]\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # for i in range(len(str1)):\n    #     if str1[i] in 'aeiouAEIOU':\n    #         temp = str1[i]\n    #         str1 = str1[:i] + temp + str1[i+1:]\n    # return str1\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    l = list(str1)\n    for i in range(len(l)):\n        if l[i] in vowels:\n            l[i] = l[i][::-1]\n    return ''.join(l)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    result = \"\"\n    for i in str1:\n        if i in vowels:\n            result += i\n        else:\n            result += i\n    return result\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    str1 = str1.lower()\n    length = len(str1)\n    reversed_string = \"\"\n    for i in range(length):\n        char = str1[i]\n        if char not in vowels:\n            reversed_string += char\n        else:\n            reversed_string += char[::-1]\n    return reversed_string\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for i in str1:\n        if i not in vowels:\n            result = result + i\n    return result\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowel_list = ['a','e','i','o','u','A','E','I','O','U']\n    str1 = str1.lower()\n    str2 = \"\"\n    for i in str1:\n        if i in vowel_list:\n            str2 = str2 + i\n    for i in range(len(str2)):\n        str2 = str2[::-1]\n    return str2\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str2 = []\n    for l in str1:\n        if l in vowels:\n            str2.append(l)\n        else:\n            str2.append(l)\n    return ''.join(str2)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    str1 = list(str1)\n    i = 0\n    j = len(str1) - 1\n    while i <= j:\n        if str1[i].lower() not in vowels:\n            i += 1\n        elif str1[j].lower() not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return ''.join(str1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # result = \"tuple: \" + str(tup1)\n    result = \"\"\n    for item in tup1:\n        result += item + \" \"\n    return result\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '(%s, %s, %s)' % tup1\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = ''\n    for i in tup1:\n        str1 = str1 + str(i)\n    return str1\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    def convert_tup_string(tup1):\n        if len(tup1) == 1:\n            return str(tup1)\n        elif len(tup1) > 1:\n            return convert_tup_string(tup1[1:]) + tup1[0]\n        else:\n            return 'error'\n    return convert_tup_string(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for item in tup1:\n        string += str(item)\n    return string\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_str = \"\"\n    for x in tup1:\n        tup_str += str(x) + ','\n    return tup_str[:-1]\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = ''\n    for i in tup1:\n        str1 += str(i)\n    return str1\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if not nums:\n        return 0\n    sum = 0\n    for n in nums:\n        if n < 0:\n            sum += n\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # negative_nums = list(filter(lambda x: x < 0, nums))\n    # return sum(negative_nums)\n    return sum(list(filter(lambda x: x < 0, nums)))\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    numsum = 0\n    for i in nums:\n        if i < 0:\n            numsum += i\n    return numsum\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(filter(lambda x: x < 0, nums))\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        return nums[0] + sum_negativenum(nums[1:])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for i in nums:\n        if i < 0:\n            total += i\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if nums == None or len(nums) == 0:\n        return 0\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    result = 0\n    for num in nums:\n        if num < 0:\n            result = result + num\n    return result\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if nums == []:\n        return 0\n    else:\n        return -sum(nums)\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # your code here\n    return sum(i for i in nums if i < 0)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*(2*n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n*(2*n + 1) / 2)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 3 * n + 1\n    else:\n        return 4 * n - 2\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    return 2 * (n - 1) ** 2 + 1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # 1st hexagonal number is 1\n    # 2nd hexagonal number is 6\n    # 3rd hexagonal number is 28\n    # 4th hexagonal number is 496\n    # 5th hexagonal number is 8128\n    # 6th hexagonal number is 1048576\n    # 7th hexagonal number is 140737488\n    # 8th hexagonal number is 16777216\n    # 9th hexagonal number is 187933884\n    # 10th hexagonal number is 21769\n    # 11th hexagonal number is 2354034\n    # 12th hexagonal number is 252657\n    # 13th hexagonal number is 269970\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(((3 * (n + 1)) ** 0.5) + 0.5)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    nonzeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            nonzeroes += 1\n    return float(zeroes) / nonzeroes\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if not nums:\n        return 0\n    count = 0\n    for n in nums:\n        if n == 0:\n            count += 1\n    return count / float(len(nums))\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n = len(nums)\n    zeroes = 0\n    non_zeroes = 0\n    for i in nums:\n        if i == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return zeroes / non_zeroes\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    from collections import Counter\n    cnt = Counter(nums)\n    return cnt[0] / float(len(nums))\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count/float(len(nums))\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n = len(nums)\n    i = 0\n    while i < n:\n        if nums[i] == 0:\n            nums.pop(i)\n            n -= 1\n        else:\n            i += 1\n    return n\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n = len(nums)\n    n0 = 0\n    for num in nums:\n        if num == 0:\n            n0 += 1\n    return n0/float(n)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeroes = 0\n    count_non_zeroes = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count_zeroes += 1\n        else:\n            count_non_zeroes += 1\n    return float(count_zeroes) / count_non_zeroes\ndef sort_012(nums):\n    '''\n    Given an input array consisting on only 0, 1, and 2, sort the array in a single traversal.\n    '''\n    zeroes = 0\n    index = 0\n    while index < len(nums):\n        if nums[index] == 0:\n            zeroes += 1\n            nums.pop(index)\n            nums.insert(zeroes, 0)\n            index += 1\n        index += 1\ndef sort_012_1(nums):\n    '''\n    Given an input array consisting on only 0, 1, and 2, sort the array in-place.\n    '''\n    n = len(nums)\n    # Build a sorted array containing 0, 1, and 2\n    k = n - 1\n    for i in range(n):\n        # Not in-place swap the value at each index\n        if nums[i] == 0:\n            nums[i], nums[0] = nums[0], nums[i]\n            nums[0], nums[k] = nums[k], nums[0]\n            k -= 1\n        elif nums[i] == 1:\n            nums[i], nums[k + 1] = nums[k + 1], nums[i]\n            k -= 1\n        elif nums[i] == 2:\n            nums[i], nums[k + 2] = nums[k + 2], nums[i]\n            k -= 1\ndef sort_012_2(nums):\n    '''\n    Given an input array consisting on only 0, 1, and 2, sort the array in-place.\n    '''\n    # Start at the end of the array\n    end = len(nums) - 1\n    index = end\n    # Start at index 0\n    beginning = 0\n    # While the index is not out of bounds\n    while index >= 0:\n        # Check if the value at index is 0\n        if nums[index] == 0:\n            # Move the value to the beginning of the array\n            nums[beginning], nums[index] = nums[index], nums[beginning]\n            # Move index forward\n            index -= 1\n            # Move beginning to the right\n            beginning += 1\n        # Check if the value at index is 1\n        elif nums[index] == 1:\n            # Move the value to the beginning of the array\n            nums[beginning], nums[index] = nums[index], nums[beginning]\n            # Move index forward\n            index -= 1\n            # Move beginning to the right\n            beginning += 1\n        # Check if the value at index is 2\n        elif nums[index] == 2:\n            # Move the value to the beginning of the array\n            nums[beginning], nums[index] = nums[index], nums[beginning]\n            # Move index forward\n            index -= 1\n            # Move beginning to the right\n            beginning += 1\ndef find_max_consecutive_ones(nums):\n    '''\n    Given a binary array, find the maximum number of consecutive 1s in this array.\n    '''\n    # The max consecutive 1s\n    max_consecutive_ones = 0\n    # The current consecutive 1s\n    current_consecutive_ones = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            # Reset the current consecutive 1s\n            current_consecutive_ones = 0\n        else:\n            current_consecutive_ones += 1\n        # Update the max consecutive 1s\n        max_consecutive_ones = max(current_consecutive_ones, max_consecutive_ones)\n    return max_consecutive_ones\ndef find_max_consecutive_ones_2(nums):\n    '''\n    Given a binary array, find the maximum number of consecutive 1s in this array.\n    '''\n    # The max consecutive 1s\n    max_consecutive_ones = 0\n    # The current consecutive 1s\n    current_consecutive_ones = 0\n    for i in range(len(nums)):\n        # If the value is 0, reset the current consecutive 1s\n        if nums[i] == 0:\n            current_consecutive_ones = 0\n        # Otherwise, increment the current consecutive 1s\n        else:\n            current_consecutive_ones += 1\n        # Update the max consecutive 1s\n        max_consecutive_ones = max(current_consecutive_ones, max_consecutive_ones)\n    return max_consecutive_ones\ndef find_max_consecutive_ones_3(nums):\n    '''\n    Given a binary array, find the maximum number of consecutive 1s in this array.\n    '''\n    # The max consecutive 1s\n    max_consecutive_ones = 0\n    # The current consecutive 1s\n    current_consecutive_ones = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            # Reset the current consecutive 1s\n            current_consecutive_ones = 0\n        else:\n            current_consecutive_ones += 1\n        # Update the max consecutive 1s\n        max_consecutive_ones = max(current_consecutive_ones, max_consecutive_ones)\n    return max_consecutive_ones\ndef rotate_left3(nums, k):\n    '''\n    Given an array of integers and a number of steps, rotate the array to the left by k steps.\n    '''\n    # Use a copy of the original array\n    nums_copy = nums[:]\n    # Make the offset\n    offset = k % len(nums)\n    # Move the elements of the array over by the offset\n    for i in range(offset):\n        nums[i] = nums_copy[len(nums) - 1 - i]\n    # Reverse the order of the elements\n    for i in range(len(nums) // 2):\n        nums[i], nums[len(nums) - i - 1] = nums[len(nums) - i - 1], nums[i]\ndef rotate_left3_1(nums, k):\n    '''\n    Given an array of integers and a number of steps, rotate the array to the left by k steps.\n    '''\n    # Use a copy of the original array\n    nums_copy = nums[:]\n    # Make the offset\n    offset = k % len(nums)\n    # Move the elements of the array over by the offset\n    for i in range(offset):\n        nums[i] = nums_copy[len(nums) - 1 - i]\n    # Reverse the order of the elements\n    nums.reverse()\ndef reverse3(nums):\n    '''\n    Given an array of integers, reverse the order of the array.\n    '''\n    # Use a copy of the original array\n    nums_copy = nums[:]\n    # Reverse the order of the elements\n    nums.reverse()\ndef reverse3_1(nums):\n    '''\n    Given an array of integers, reverse the order of the array.\n    '''\n    # Use a copy of the original array\n    nums_copy = nums[:]\n    # Reverse the order of the elements\n    nums[:] = nums_copy[::-1]\ndef reverse3_2(nums):\n    '''\n    Given an array of integers, reverse the order of the array.\n    '''\n    # Start at the end of the array\n    end = len(nums) - 1\n    # Start at index 0\n    beginning = 0\n    # While the index is not out of bounds\n    while beginning < end:\n        # Swap the values at beginning and end\n        nums[beginning], nums[end] = nums[end], nums[beginning]\n        # Move beginning to the right\n        beginning += 1\n        # Move end to the left\n        end -= 1\ndef reverse3_3"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    print \"ratio: \",float(count)/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    count_a = 0\n    for i in nums:\n        if i == 0:\n            count = count + 1\n        else:\n            count_a = count_a + 1\n    print count, count_a\n    return count/count_a\n    \ndef mergesort(arr, left, right):\n    arr = arr[left:right+1]\n    \n    if len(arr) > 1:\n        mid = len(arr)//2\n        L = arr[:mid]\n        R = arr[mid:]\n        \n        mergesort(arr, 0, len(L)-1)\n        mergesort(arr, 0, len(R)-1)\n        i = j = k = 0\n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n        \n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n            \n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    s=0\n    while n>0:\n        s=s+n%2\n        n/=2\n    return s==0\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0:\n        return True\n    elif n==1:\n        return False\n    else:\n        b=bin(n).replace(\"0b\",\"\")\n        for i in range(len(b)):\n            if int(b[i])==0:\n                continue\n            else:\n                if 2**i>n:\n                    return False\n                else:\n                    continue\n        return True\n    "
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    while(n % 2 == 0):\n        n = n / 2\n    return n == 1\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n > 0:\n        while n:\n            last_digit = n % 10\n            if last_digit == 0:\n                n = n / 10\n                continue\n            elif last_digit == 1:\n                if n / 10 == 1:\n                    return True\n                else:\n                    return False\n            elif last_digit == 2:\n                if n / 10 > 1:\n                    if (n % 10) / 2 == 0:\n                        n = n / 10\n                        continue\n                    else:\n                        return False\n                else:\n                    return True\n            elif last_digit == 5:\n                if (n % 10) / 2 == 0:\n                    n = n / 10\n                    continue\n                else:\n                    return False\n            else:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    from collections import Counter\n    s = Counter(str(n))\n    \n    flag = True\n    for key in s:\n        if s[key]>1:\n            flag = False\n            break\n    return flag\n    \ndef Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to return the sum of powers of two.\n    '''\n    \n    if is_Sum_Of_Powers_Of_Two(n):\n        return n\n    \n    x = n\n    for i in range(n.bit_length()):\n        x = x + (1<<i)\n    \n    return x\n    \ndef is_Sum_Of_Power_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of power of two or not.\n    '''\n    \n    s = 0\n    while n:\n        if n&1:\n            s+=1\n        n=n>>1\n    \n    return s==1 or s%2==0\n    \ndef Sum_Of_Power_Of_Two(n): \n    '''\n    Write a python function to return the sum of power of two.\n    '''\n    \n    if is_Sum_Of_Power_Of_Two(n):\n        return n\n    \n    x = 0\n    while n:\n        if n&1:\n            x+=1\n        n=n>>1\n    \n    return (1<<x)\n    \ndef is_Sum_Of_Powers_Of_Two_And_Three(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of two and three or not.\n    '''\n    \n    from collections import Counter\n    s = Counter(str(n))\n    \n    flag = True\n    for key in s:\n        if s[key]>1:\n            flag = False\n            break\n        elif s[key]==1:\n            if key!='3' and key!='6':\n                flag = False\n                break\n    return flag\n    \ndef Sum_Of_Powers_Of_Two_And_Three(n): \n    '''\n    Write a python function to return the sum of powers of two and three.\n    '''\n    \n    if is_Sum_Of_Powers_Of_Two_And_Three(n):\n        return n\n    \n    x = n\n    for i in range(n.bit_length()):\n        x = x + (1<<i)\n    \n    return x\n    \ndef is_Sum_Of_Powers_Of_Two_And_Three(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of power of two, three and four or not.\n    '''\n    \n    s = 0\n    while n:\n        if n&1:\n            s+=1\n        n=n>>1\n    \n    flag = True\n    if s%2==0:\n        if s==2:\n            if n==3 or n==5:\n                flag = True\n            else:\n                flag = False\n        elif s==1:\n            if n==2 or n==3:\n                flag = True\n            else:\n                flag = False\n        else:\n            flag = False\n    \n    return flag\n    \ndef Sum_Of_Powers_Of_Two_And_Three(n): \n    '''\n    Write a python function to return the sum of powers of two, three and four.\n    '''\n    \n    if is_Sum_Of_Powers_Of_Two_And_Three(n):\n        return n\n    \n    x = 0\n    while n:\n        if n&1:\n            x+=1\n        n=n>>1\n    \n    return (1<<x)\n    \ndef is_Sum_Of_Powers_Of_Two_And_Three_Plus_One(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of two, three and four and one or not.\n    '''\n    \n    from collections import Counter\n    s = Counter(str(n))\n    \n    flag = True\n    for key in s:\n        if s[key]>1:\n            flag = False\n            break\n        elif s[key]==1:\n            if key!='3' and key!='6':\n                flag = False\n                break\n    return flag\n    \ndef Sum_Of_Powers_Of_Two_And_Three_Plus_One(n): \n    '''\n    Write a python function to return the sum of powers of two, three and four and one.\n    '''\n    \n    if is_Sum_Of_Powers_Of_Two_And_Three_Plus_One(n):\n        return n\n    \n    x = n\n    for i in range(n.bit_length()):\n        x = x + (1<<i)\n    \n    return x\n    \ndef is_Sum_Of_Powers_Of_Two_And_Three_Plus_One(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of two, three and four and one or not.\n    '''\n    \n    s = 0\n    while n:\n        if n&1:\n            s+=1\n        n=n>>1\n    \n    flag = True\n    if s%2==0:\n        if s==2:\n            if n==3 or n==5:\n                flag = True\n            else:\n                flag = False\n        elif s==1:\n            if n==2 or n==3:\n                flag = True\n            else:\n                flag = False\n        else:\n            flag = False\n    \n    return flag\n    \ndef Sum_Of_Powers_Of_Two_And_Three_Plus_One(n): \n    '''\n    Write a python function to return the sum of powers of two, three and four and one.\n    '''\n    \n    if is_Sum_Of_Powers_Of_Two_And_Three_Plus_One(n):\n        return n\n    \n    x = 0\n    while n:\n        if n&1:\n            x+=1\n        n=n>>1\n    \n    return (1<<x)\n    \ndef is_Sum_Of_Powers_Of_Two_And_Three_Plus_One(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of two, three and four and one or not.\n    '''\n    \n    s = 0\n    while n:\n        if n&1:\n            s+=1\n        n=n>>1\n    \n    flag = True\n    if s%2==0:\n        if s==2:\n            if n==3 or n==5:\n                flag = True\n            else:\n                flag = False\n        elif s==1:\n            if n==2 or n==3:\n                flag = True\n            else:\n                flag = False\n        else:\n            flag = False\n    \n    return flag\n    \ndef Sum_Of_Powers_Of_Two_And_Three_Plus_One(n): \n    '''\n    Write a python function to return the sum of powers of two, three and four and one.\n    '''\n    \n    if is_Sum_Of_Powers_Of_Two_And_Three_Plus_One(n):\n        return n\n    \n    x = 0\n    while n:\n        if n&1:\n            x+=1\n        n=n>>1\n    \n    return (1<<x)\n    \ndef is_Sum_Of_Powers_Of_Two_And_Three_Plus_One(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of two, three and four and one or not.\n    '''\n    \n    s = 0\n    while n:\n        if n&1:\n            s+=1\n        n=n>>1\n    \n    flag = True\n    if s%2==0:\n        if s==2:\n            if n==3 or n==5:\n                flag = True\n            else:"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    temp=str(bin(n))\n    total=0\n    s=len(temp)-2\n    for i in temp:\n        if i=='1':\n            total+=1\n    if total>=s:\n        return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Take the number n as input\n    n = int(n)\n    # If n is less than 1 then n cannot be represented\n    # as sum of non-zero powers of 2\n    if n < 1:\n        return 0\n    # Now check if the number n is a power of 2\n    # In python, we can check if a number is power of 2 by using\n    # a built-in function 'bin' that returns a string of the binary representation\n    # of the number n\n    if bin(n).count('1') == 1:\n        # If n is a power of 2 then return 1\n        return 1\n    # Now check if the number n is divisible by a power of 2\n    # If it is divisible by a power of 2 then return 1\n    for i in range(1, n):\n        if n % (2 ** i) == 0:\n            return 1\n    # If the loop completes without returning 1 then n is not a power of 2\n    return 0\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def is_Power_of_Two(n): \n        if n == 0: return False\n        if n == 1: return True\n        if n % 2 == 0: return is_Power_of_Two(n/2)\n        else: return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    s=0\n    temp=n\n    while temp>0:\n        bit=temp&1\n        s=s+bit\n        temp=temp>>1\n    if s==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Base Case \n    if n == 0: \n        return True\n    # If there is an even power of 2 \n    if (n & (n-1) == 0): \n        return False\n    else: \n        return (is_Power_Of_Two(n)) \n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 22/7*r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    if isinstance(r, (int, float)) == False:\n        print 'Radius must be a number'\n        return -1\n    if r <= 0:\n        print 'Radius must be positive'\n        return -1\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return 2*pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # TODO: Fix the floating point math and put a test for r.\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    \n    from math import pi\n    \n    return 2 * pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return math.pi * 2 * r\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # flatten a list of lists\n    \n    res = []\n    for item in test_list:\n        res.extend(item)\n    return res\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [x for sublist in test_list for x in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    #global test_list\n    #print 'flattening the list...'\n    test_list = [item for sublist in test_list for item in sublist]\n    return test_list\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    single_list = []\n    for l in test_list:\n        for m in l:\n            single_list.append(m)\n    return single_list\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    return set([i for j in test_list for i in j])\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for val in sublist:\n            flat_list.append(val)\n    return flat_list\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for i in test_list:\n        flat_list += i\n    return flat_list\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    final_list = []\n    for list in test_list:\n        for number in list:\n            final_list.append(number)\n    return final_list\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat = []\n    for i in test_list:\n        if isinstance(i, list):\n            flat.extend(extract_singly(i))\n        else:\n            flat.append(i)\n    return flat\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    new_list = []\n    for i in test_list:\n        if isinstance(i, list):\n            for j in i:\n                new_list.append(j)\n        else:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # find the smallest element and exchange with first element\n        idx = n - i - 1\n        if nums[idx] < nums[0]:\n            nums[0], nums[idx] = nums[idx], nums[0]\n            if idx > 0:\n                nums[0:idx] = reversed(nums[0:idx])\n                nums[0:idx+1] = reversed(nums[0:idx+1])\n                nums[0:idx+1] = reversed(nums[0:idx+1])\n        else:\n            break\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    return pancake_sort_aux(nums, len(nums))\n    \ndef pancake_sort_aux(nums, size):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if size == 1:\n        return nums\n    \n    middle = size/2\n    \n    nums = flip_pancake_last_n(nums, middle)\n    nums = flip_pancake_last_n(nums, middle)\n    nums = flip_pancake_last_n(nums, middle)\n    \n    return pancake_sort_aux(nums, size-1)\n    \ndef flip_pancake_last_n(nums, num_flip):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(num_flip):\n        last = nums[-1]\n        nums = nums[:-1]\n        nums.append(last)\n    return nums\n    \ndef pancake_sort_in_place(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    k = int(n/2)\n    \n    for i in range(k):\n        max_j = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_j]:\n                max_j = j\n        nums[i], nums[max_j] = nums[max_j], nums[i]\n        nums = nums[:i+1] + sorted(nums[i+1:])\n    \n    return nums\n    \ndef pancake_sort_2_pass(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    k = int(n/2)\n    \n    for i in range(k, -1, -1):\n        max_j = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_j]:\n                max_j = j\n        nums[i], nums[max_j] = nums[max_j], nums[i]\n        nums = nums[:i+1] + sorted(nums[i+1:])\n    \n    return nums\n    \ndef pancake_sort_3_pass(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    k = int(n/2)\n    \n    for i in range(k, -1, -1):\n        max_j = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_j]:\n                max_j = j\n        nums[i], nums[max_j] = nums[max_j], nums[i]\n        nums = nums[:i+1] + sorted(nums[i+1:])\n    \n    return nums\n    \ndef pancake_sort_4_pass(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    k = int(n/2)\n    \n    for i in range(k, -1, -1):\n        max_j = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_j]:\n                max_j = j\n        nums[i], nums[max_j] = nums[max_j], nums[i]\n        nums = nums[:i+1] + sorted(nums[i+1:])\n    \n    return nums\n    \ndef pancake_sort_5_pass(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    k = int(n/2)\n    \n    for i in range(k, -1, -1):\n        max_j = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_j]:\n                max_j = j\n        nums[i], nums[max_j] = nums[max_j], nums[i]\n        nums = nums[:i+1] + sorted(nums[i+1:])\n    \n    return nums\n    \ndef pancake_sort_in_place_2_pass(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    k = int(n/2)\n    \n    for i in range(k, -1, -1):\n        max_j = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_j]:\n                max_j = j\n        nums[i], nums[max_j] = nums[max_j], nums[i]\n        nums = nums[:i+1] + sorted(nums[i+1:])\n    \n    return nums\n    \ndef pancake_sort_in_place_3_pass(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    k = int(n/2)\n    \n    for i in range(k, -1, -1):\n        max_j = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_j]:\n                max_j = j\n        nums[i], nums[max_j] = nums[max_j], nums[i]\n        nums = nums[:i+1] + sorted(nums[i+1:])\n    \n    return nums\n    \ndef pancake_sort_in_place_4_pass(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    k = int(n/2)\n    \n    for i in range(k, -1, -1):\n        max_j = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_j]:\n                max_j = j\n        nums[i], nums[max_j] = nums[max_j], nums[i]\n        nums = nums[:i+1] + sorted(nums[i+1:])\n    \n    return nums\n    \ndef pancake_sort_in_place_5_pass(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    k = int(n/2)\n    \n    for i in range(k, -1, -1):\n        max_j = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_j]:\n                max_j = j\n        nums[i], nums[max_j] = nums[max_j], nums[i]\n        nums = nums[:i+1] + sorted(nums[i+1:])\n    \n    return nums\n    \ndef pancake_sort_in_place_6_pass(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    k = int(n/2)\n    \n    for i in range(k, -1, -1):\n        max_j = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_j]:\n                max_j = j\n        nums[i], nums[max_j] = nums[max_j], nums[i]\n        nums = nums[:i+1] + sorted(nums[i+1:])\n    \n    return nums\n    \ndef pancake_sort_in_place_7_pass(nums):\n    '''\n    Write a function t"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Find the maximum number of pancakes to flip\n    # (in order to minimize the number of flips)\n    for i in range(len(nums) // 2, 0, -1):\n        print(i)\n        max_index = get_max_pancake_index(nums, i)\n        print(nums)\n        print(nums[:max_index + 1])\n        # Swap the elements which are out of order\n        nums[:max_index + 1] = nums[:max_index + 1][::-1]\n        print(nums)\n        # Find the maximum index where the elements are swapped\n        max_index = get_max_pancake_index(nums, i)\n        print(nums)\n        print(nums[:max_index + 1])\n        # Reverse the elements which are swapped\n        nums[:max_index + 1] = nums[:max_index + 1][::-1]\n        print(nums)\n        print()\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in xrange(n//2, -1, -1):\n        pancake_rotate(nums, i)\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Do not change the line below.\n    print('Before:', nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    \n    length = len(nums)\n    for i in xrange(length):\n        if i == 0:\n            continue\n        if nums[i] < nums[i-1]:\n            k = i\n            while k > 0 and nums[k] < nums[k-1]:\n                nums[k], nums[k-1] = nums[k-1], nums[k]\n                k -= 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n    result = []\n    for i in xrange(len(nums)-1, 0, -1):\n        for j in xrange(len(nums)-i, 0, -1):\n            if nums[j] < nums[j-1]:\n                nums[j], nums[j-1] = nums[j-1], nums[j]\n                result.append(j)\n    return result\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for n in range(len(nums),1,-1):\n        for i in range(len(nums)-n+1):\n            if nums[i] > nums[i+n-1]:\n                nums[i], nums[i+n-1] = nums[i+n-1], nums[i]\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    if nums == []:\n        return []\n    \n    n = len(nums)\n    \n    for i in xrange(n/2, 0, -1):\n        j = 0\n        while j < i:\n            if nums[j] > nums[j + i]:\n                nums[j], nums[j + i] = nums[j + i], nums[j]\n            j += 1\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    return sum(x==y==z for x,y,z in zip(list1,list2,list3))\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    counter = 0\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return -1\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return 0\n    else:\n        count = 0\n        for i in range(len(list1)):\n            if list1[i] == list2[i] and list1[i] == list3[i]:\n                count += 1\n        return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    res = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            res += 1\n    return res\n    \ndef is_count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    res = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            res += 1\n    return res\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list2[i] == list3[i]:\n                count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    for i in range(len(list1)):\n        if list1[i] == list3[i]:\n            count += 1\n    for i in range(len(list2)):\n        if list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n        if list1[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    from collections import Counter\n    lst = zip(list1,list2,list3)\n    cnt = Counter(lst)\n    return cnt.values()\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # print(len(Input))\n    if len(Input)==0:\n        return 0\n    if len(Input)==1:\n        return 1\n    if len(Input)==2:\n        if Input[0]==Input[1]:\n            return 1\n        return 0\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return Input.count(list())\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    n_lists = 0\n    for i in Input:\n        if isinstance(i, list):\n            n_lists += 1\n    return n_lists\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    counter = 0\n    for i in Input:\n        if isinstance(i,list):\n            counter+=1\n    return counter\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count+=1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if isinstance(Input, tuple):\n        return sum(1 for i in Input if isinstance(i, list))\n    else:\n        return \"Not a tuple\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # example1 = ('a',) # a single tuple \n    # example2 = ('a', 'b', 'c') # 2 \n    # example3 = ('a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c') # 8\n    # print('1: ', find_lists(example1)) # 1\n    # print('2: ', find_lists(example2)) # 2\n    # print('3: ', find_lists(example3)) # 8\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Input=list(Input)\n    count=0\n    for i in Input:\n        if type(i)==list:\n            count+=1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) is list:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    lst = []\n    for ele in Input:\n        if isinstance(ele, list):\n            lst.append(ele)\n    return len(lst)\n    \ndef find_tuples(Input): \n    '''\n    Write a function to find number of tuples present in the given tuple.\n    '''\n    \n    lst = []\n    for ele in Input:\n        if isinstance(ele, tuple):\n            lst.append(ele)\n    return len(lst)\n    \ndef get_lists(Input): \n    '''\n    Write a function to get all the lists of a tuple.\n    '''\n    \n    lst = []\n    for ele in Input:\n        if isinstance(ele, list):\n            lst.append(ele)\n    return lst\n    \ndef get_tuples(Input): \n    '''\n    Write a function to get all the tuples of a tuple.\n    '''\n    \n    lst = []\n    for ele in Input:\n        if isinstance(ele, tuple):\n            lst.append(ele)\n    return lst\n    \ndef find_singles(Input): \n    '''\n    Write a function to find number of singles present in the given tuple.\n    '''\n    \n    lst = []\n    for ele in Input:\n        if ele not in lst:\n            lst.append(ele)\n    return len(lst)\n    \ndef find_doubles(Input): \n    '''\n    Write a function to find number of doubles present in the given tuple.\n    '''\n    \n    lst = []\n    for ele in Input:\n        if ele not in lst:\n            lst.append(ele)\n    return len(lst)\n    \ndef get_singles(Input): \n    '''\n    Write a function to get all the singles of a tuple.\n    '''\n    \n    lst = []\n    for ele in Input:\n        if ele not in lst:\n            lst.append(ele)\n    return lst\n    \ndef get_doubles(Input): \n    '''\n    Write a function to get all the doubles of a tuple.\n    '''\n    \n    lst = []\n    for ele in Input:\n        if ele not in lst:\n            lst.append(ele)\n    return lst\n    \ndef is_ordered(Input): \n    '''\n    Write a function to determine whether a tuple is ordered or not.\n    '''\n    \n    for i in range(len(Input) - 1):\n        if Input[i] > Input[i + 1]:\n            return False\n    return True\n    \ndef is_sorted(Input): \n    '''\n    Write a function to determine whether a tuple is sorted or not.\n    '''\n    \n    for i in range(len(Input) - 1):\n        if Input[i] > Input[i + 1]:\n            return False\n    return True\n    \ndef is_anagram(Input, s): \n    '''\n    Write a function to determine whether the two tuples are anagrams or not.\n    '''\n    lst = get_sorted(Input)\n    lst2 = get_sorted(s)\n    if lst == lst2:\n        return True\n    return False\n    \ndef get_sorted(Input): \n    '''\n    Write a function to get all the sorted tuples of a tuple.\n    '''\n    \n    lst = []\n    for ele in Input:\n        lst.append(ele)\n    lst.sort()\n    return lst\n    \ndef find_anagrams(Input, s): \n    '''\n    Write a function to find all the anagrams of a tuple present in a tuple.\n    '''\n    lst = get_sorted(Input)\n    lst2 = get_sorted(s)\n    lst_out = []\n    for i in range(len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n            lst_out.append(lst[i])\n    return lst_out\n    \ndef merge_tuples(Input, s): \n    '''\n    Write a function to merge two tuples.\n    '''\n    return tuple(Input) + tuple(s)\n    \ndef get_max(Input): \n    '''\n    Write a function to get the maximum element of a tuple.\n    '''\n    \n    lst = []\n    for ele in Input:\n        lst.append(ele)\n    return max(lst)\n    \ndef get_min(Input): \n    '''\n    Write a function to get the minimum element of a tuple.\n    '''\n    \n    lst = []\n    for ele in Input:\n        lst.append(ele)\n    return min(lst)\n    \ndef get_length(Input): \n    '''\n    Write a function to get the length of a tuple.\n    '''\n    \n    return len(Input)\n    \ndef get_reverse(Input): \n    '''\n    Write a function to get the reverse of a tuple.\n    '''\n    lst = []\n    for ele in Input:\n        lst.append(ele)\n    lst.reverse()\n    return tuple(lst)\n    \ndef get_reversed(Input): \n    '''\n    Write a function to get the reversed of a tuple.\n    '''\n    lst = []\n    for ele in Input:\n        lst.append(ele)\n    return tuple(reversed(lst))\n    \ndef tuple_check(Input, s): \n    '''\n    Write a function to check whether a tuple is superset of another tuple.\n    '''\n    lst1 = get_sorted(Input)\n    lst2 = get_sorted(s)\n    if len(lst1) > len(lst2):\n        return False\n    for i in range(len(lst1)):\n        if lst1[i] > lst2[i]:\n            return False\n    return True\n    \ndef tuple_count(Input, s): \n    '''\n    Write a function to count the number of times a tuple is superset of another tuple.\n    '''\n    lst1 = get_sorted(Input)\n    lst2 = get_sorted(s)\n    count = 0\n    for i in range(len(lst1)):\n        if lst1[i] > lst2[i]:\n            count += 1\n    return count\n    \ndef tuple_union(Input, s): \n    '''\n    Write a function to get the union of a tuple and another tuple.\n    '''\n    return tuple(Input) + tuple(s)\n    \ndef get_tuples_same_length(Input): \n    '''\n    Write a function to get all the tuples with the same length as the given tuple.\n    '''\n    lst = []\n    for ele in Input:\n        lst.append(ele)\n    if len(lst) == 1:\n        return lst\n    lst2 = []\n    for ele in Input:\n        if len(ele) == len(Input):\n            lst2.append(ele)\n    return lst2\n    \ndef get_tuples_same_order(Input): \n    '''\n    Write a function to get all the tuples with the same order as the given tuple.\n    '''\n    lst = []\n    for ele in Input:\n        lst.append(ele)\n    lst2 = []\n    for ele in Input:\n        if lst == lst2:\n            lst2.append(ele)\n    return lst2\n    \ndef get_tuples_different_length(Input): \n    '''\n    Write a function to get all the tuples with different lengths as the given tuple.\n    '''\n    lst = []\n    for ele in Input:\n        lst.append(ele)\n    lst2 = []\n    for ele in Input:\n        if len(ele)!= len(Input):\n            lst2.append(ele)\n    return lst2\n    \ndef get_tuples_different_order(Input): \n    '''\n    Write a function to get all the tuples with different orders as the given tuple.\n    '''\n    lst "
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_d = -1\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            temp = abs(arr[i] - arr[j])\n            if temp > max_d:\n                max_d = temp\n    return max_d\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1] - arr[0]\n    \ndef max_Abs_Diff_Recursive(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    return max(max_Abs_Diff_Recursive(arr[1:]), arr[0] - min(arr[1:]))\n    \ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\n    \ndef fibonacci(n):\n    '''\n    Write a python function to find the fibonacci series upto nth index.\n    '''\n    arr = [0, 1]\n    for i in range(2, n+1):\n        arr.append(arr[i-1] + arr[i-2])\n    return arr\n    \ndef count_Digits(n):\n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    cnt = 0\n    while n > 0:\n        cnt += 1\n        n = n // 10\n    return cnt\n    \ndef count_Digits_Recursive(n):\n    if n == 0:\n        return 1\n    return 1 + count_Digits_Recursive(n // 10)\n    \ndef sum_Digits(n):\n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    if n == 0:\n        return 0\n    return n % 10 + sum_Digits(n // 10)\n    \ndef sum_Digits_Recursive(n):\n    if n == 0:\n        return 0\n    return n % 10 + sum_Digits_Recursive(n // 10)\n    \ndef palindrome_Recursive(n):\n    if n == 0:\n        return True\n    if n < 0:\n        return False\n    if n % 10!= 0 and n // 10 == n % 10:\n        return True and palindrome_Recursive(n // 10)\n    return False\n    \ndef palindrome_Recursive_Sequential(n):\n    '''\n    Write a python function to check if a number is palindrome or not.\n    '''\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n % 10!= 0 and n // 10 == n % 10:\n        return palindrome_Recursive_Sequential(n // 10)\n    return False\n    \ndef palindrome_Recursive_Iterative(n):\n    '''\n    Write a python function to check if a number is palindrome or not.\n    '''\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    cnt = 0\n    while n > 0:\n        cnt += 1\n        n = n // 10\n    if n == 0:\n        return True\n    \n    n = n // 10\n    if n % 10!= 0:\n        return False\n    return palindrome_Recursive_Iterative(n // 10)\n    \ndef find_Digits_Recursive(n, arr):\n    if n == 0:\n        return True\n    if n < 0:\n        return False\n    if n % 10!= 0 and n // 10 == n % 10:\n        return find_Digits_Recursive(n // 10, arr)\n    return False\n    \ndef find_Digits_Recursive_Sequential(n, arr):\n    '''\n    Write a python function to find if a number has all its digits same or not.\n    '''\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n % 10!= 0 and n // 10 == n % 10:\n        return find_Digits_Recursive_Sequential(n // 10, arr)\n    return False\n    \ndef find_Digits_Recursive_Iterative(n, arr):\n    '''\n    Write a python function to find if a number has all its digits same or not.\n    '''\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    while n > 0:\n        if n % 10!= 0 and n // 10 == n % 10:\n            return find_Digits_Recursive_Iterative(n // 10, arr)\n        n = n // 10\n    return False\n    \ndef is_Prime(n):\n    '''\n    Write a python function to find if a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0 and n > 2:\n        return False\n    return is_Prime(n // 2)\n    \ndef is_Prime_Recursive(n, arr):\n    '''\n    Write a python function to find if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    if n % 2 == 0 and n > 2:\n        return False\n    return is_Prime_Recursive(n // 2, arr)\n    \ndef is_Prime_Recursive_Sequential(n, arr):\n    '''\n    Write a python function to find if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    if n % 2 == 0 and n > 2:\n        return False\n    return True\n    \ndef is_Prime_Recursive_Iterative(n, arr):\n    '''\n    Write a python function to find if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    if n % 2 == 0 and n > 2:\n        return False\n    while n > 1:\n        if n % 2 == 0 and n > 2:\n            return False\n        n = n // 2\n    return True\n    \ndef is_Prime_Iterative(n, arr):\n    '''\n    Write a python function to find if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    if n % 2 == 0 and n > 2:\n        return False\n    while n > 1:\n        if n % 2 == 0 and n > 2:\n            return False\n        n = n // 2\n    return True\n    \ndef sieve(n):\n    '''\n    Write a python function to find the prime number upto nth index.\n    '''\n    arr = [True for i in range(n+1)]\n    i = 2\n    while i * i <= n:\n        if arr[i]:\n            j = i * i\n            while j <= n:\n                arr[j] = False\n                j += i\n        i += 1\n    return arr\n    \ndef sieve_Iterative(n):\n    '''\n    Write a python function to find the prime number upto nth index.\n    '''\n    arr = [True for i in range(n+1)]\n    i = 2\n    while i * i <= n:\n        if arr[i]:\n            j = i * i\n            while j <= n:\n                arr[j] = False\n                j += i\n        i += 1\n    return arr\n    \ndef count_Digits_Recursive(n):\n    '''\n    Write a python function to find the number of digits in a given number.\n    '''\n    if n == 0:\n        return 0\n    return 1 + count_Digits_Recursive(n // 10)\n    \ndef count_Digits_Iterative(n):\n    '''\n    Write a python function to find the number of digits in a given number.\n    '''\n    cnt = 0\n    while n > 0:\n        cnt += 1\n        n = n // 10\n    return cnt\n    \ndef count_Digits_Recursive_Sequential(n):\n    '''\n    Write a python function to find the number of digits in a given number.\n    '''\n    if n == 0:\n        return 0\n    return 1 + count_Digits_Recursive_Sequential(n // 10)\n    \ndef count_Digits_Iterative_Sequential(n):\n    '''\n    Write a python function to find the number of digits in a given number.\n    '''\n    cnt = 0\n    while n > 0:\n        cnt += 1\n        "
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[-1]-arr[0]\n    \ndef test_max_Abs_Diff():\n    assert max_Abs_Diff([1,2,3,4,5])==1\n    assert max_Abs_Diff([5,4,3,2,1])==4\n    assert max_Abs_Diff([1])==1\n    assert max_Abs_Diff([2,3,1,5])==4\n    assert max_Abs_Diff([1,2,3,4,5,6,7])==6\n    assert max_Abs_Diff([1,3,5,7])==7\n    assert max_Abs_Diff([7,6,5,4,3,2,1])==6\n    assert max_Abs_Diff([])==None\n    assert max_Abs_Diff([1])==1\n    assert max_Abs_Diff([1,2,3,4])==2\n    assert max_Abs_Diff([1,2,3,4,5,6])==5\n    \ntest_max_Abs_Diff("
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    maxDiff = arr[1] - arr[0]\n    for i in range(len(arr)-1):\n        diff = arr[i+1] - arr[i]\n        if diff > maxDiff:\n            maxDiff = diff\n    return maxDiff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return abs(arr[-1]-arr[0])\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    for i in range(0, len(arr)):\n        for j in range(0, len(arr)):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    array_len = len(arr)\n    max_diff = abs(arr[1]-arr[0])\n    for i in range(1,array_len):\n        for j in range(i+1,array_len):\n            current_diff = abs(arr[j] - arr[i])\n            if current_diff > max_diff:\n                max_diff = current_diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[-1] - arr[0]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max([abs(arr[i] - arr[i+1]) for i in range(len(arr)-1)])\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n):\n        if a * x + b * n == n:\n            return (x, n / a)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    #checking for corner case\n    if n == 0:\n        return (0, 0)\n    if a == 0:\n        if b % n == 0:\n            return (0, b // n)\n        else:\n            return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return (0, 0)\n    if n < 0:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if (n - b) % a == 0:\n        x = (n - b) / a\n        return (x, a * x + b)\n    else:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    if n == 0:\n        return (0, 0)\n    \n    l = a // n\n    r = b // n\n    \n    # If a is even, then the solution must be (l, n-l)\n    if a % 2 == 0:\n        if n % 2 == 0:\n            return (l, n - l)\n        else:\n            return (r, n - r)\n            \n    # If b is even, then the solution must be (n-r, r)\n    if b % 2 == 0:\n        if n % 2 == 0:\n            return (n - r, r)\n        else:\n            return (l, n - l)\n    \n    # If the n is not divisible by either a or b, then the solution must be None\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    def solve_for_a(a, b, n):\n        '''\n        a, b, n are all integers\n        returns a tuple (x, y) if a*x + b*y = n, or None if no solution\n        '''\n        if n == 0:\n            return None\n        \n        if n < 0:\n            return -(-n // b)\n        \n        return (n // a, n % a)\n    \n    \n    def solve_for_b(a, b, n):\n        '''\n        a, b, n are all integers\n        returns a tuple (x, y) if a*x + b*y = n, or None if no solution\n        '''\n        if n == 0:\n            return None\n        \n        if n < 0:\n            return -(-n // a)\n        \n        return (n % b, n // b)\n    \n    \n    def solve_for_a_prime(a, b, n):\n        '''\n        a, b, n are all integers\n        returns a tuple (x, y) if a*x + b*y = n, or None if no solution\n        '''\n        if n == 0:\n            return None\n        \n        if n < 0:\n            return (-(-n // b) + 1, (-(n // a)) - 1)\n        \n        return (n // a, n % a)\n    \n    \n    def solve_for_b_prime(a, b, n):\n        '''\n        a, b, n are all integers\n        returns a tuple (x, y) if a*x + b*y = n, or None if no solution\n        '''\n        if n == 0:\n            return None\n        \n        if n < 0:\n            return (-(-n // a) + 1, (-(n // b)) - 1)\n        \n        return (n % b, n // b)\n    \n    \n    def solve_for_x(a, b, n):\n        '''\n        a, b, n are all integers\n        returns a tuple (x, y) if a*x + b*y = n, or None if no solution\n        '''\n        if n == 0:\n            return None\n        \n        return solve_for_a_prime(a, b, n)[0]\n    \n    \n    def solve_for_y(a, b, n):\n        '''\n        a, b, n are all integers\n        returns a tuple (x, y) if a*x + b*y = n, or None if no solution\n        '''\n        if n == 0:\n            return None\n        \n        return solve_for_a_prime(a, b, n)[1]\n    \n    \n    def solve_for_x_prime(a, b, n):\n        '''\n        a, b, n are all integers\n        returns a tuple (x, y) if a*x + b*y = n, or None if no solution\n        '''\n        if n == 0:\n            return None\n        \n        return solve_for_b_prime(a, b, n)[0]\n    \n    \n    def solve_for_y_prime(a, b, n):\n        '''\n        a, b, n are all integers\n        returns a tuple (x, y) if a*x + b*y = n, or None if no solution\n        '''\n        if n == 0:\n            return None\n        \n        return solve_for_b_prime(a, b, n)[1]\n    \n    \n    def solve_for_x_prime_prime(a, b, n):\n        '''\n        a, b, n are all integers\n        returns a tuple (x, y) if a*x + b*y = n, or None if no solution\n        '''\n        if n == 0:\n            return None\n        \n        return solve_for_b_prime(a, b, n)[0]\n    \n    \n    def solve_for_y_prime_prime(a, b, n):\n        '''\n        a, b, n are all integers\n        returns a tuple (x, y) if a*x + b*y = n, or None if no solution\n        '''\n        if n == 0:\n            return None\n        \n        return solve_for_b_prime(a, b, n)[1]\n    \n    \n    def solve_for_x_2(a, b, n):\n        '''\n        a, b, n are all integers\n        returns a tuple (x, y) if a*x + b*y = n, or None if no solution\n        '''\n        if n == 0:\n            return None\n        \n        return solve_for_a_prime(a, b, n)[0]\n    \n    \n    def solve_for_y_2(a, b, n):\n        '''\n        a, b, n are all integers\n        returns a tuple (x, y) if a*x + b*y = n, or None if no solution\n        '''\n        if n == 0:\n            return None\n        \n        return solve_for_a_prime(a, b, n)[1]\n    \n    \n    def solve_for_x_2_prime(a, b, n):\n        '''\n        a, b, n are all integers\n        returns a tuple (x, y) if a*x + b*y = n, or None if no solution\n        '''\n        if n == 0:\n            return None\n        \n        return solve_for_b_prime(a, b, n)[0]\n    \n    \n    def solve_for_y_2_prime(a, b, n):\n        '''\n        a, b, n are all integers\n        returns a tuple (x, y) if a*x + b*y = n, or None if no solution\n        '''\n        if n == 0:\n            return None\n        \n        return solve_for_b_prime(a, b, n)[1]\n    \n    \n    def solve_for_x_3(a, b, n):\n        '''\n        a, b, n are all integers\n        returns a tuple (x, y) if a*x + b*y = n, or None if no solution\n        '''\n        if n == 0:\n            return None\n        \n        return solve_for_a_prime(a, b, n)[0]\n    \n    \n    def solve_for_y_3(a, b, n):\n        '''\n        a, b, n are all integers\n        returns a tuple (x, y) if a*x + b*y = n, or None if no solution\n        '''\n        if n == 0:\n            return None\n        \n        return solve_for_a_prime(a, b, n)[1]\n    \n    \n    def solve_for_x_3_prime(a, b, n):\n        '''\n        a, b, n are all integers\n        returns a tuple (x, y) if a*x + b*y = n, or None if no solution\n        '''\n        if n == 0:\n            return None\n        \n        return solve_for_b_prime(a, b, n)[0]\n    \n    \n    def solve_for_y_3_prime(a, b, n):\n        '''\n        a, b, n are all integers\n        returns a tuple (x, y) if a*x + b*y = n, or None if no solution\n        '''\n        if n == 0:\n            return None\n        \n        return solve_for_b_prime(a, b, n)[1]\n    \n    \n    def solve_for_x_3_prime_prime(a, b, n):\n        '''\n        a, b, n are all integers\n        returns a tuple (x, y) if a*x + b*y = n, or None if no solution\n        '''\n        if n == 0:\n            return None\n        \n        return solve_for_b_prime(a, b, n)[0]\n    \n    \n    def solve_for_y_3_prime_prime(a, b, n):\n        '''\n        a, b, n are all integers\n        returns a tuple (x, y) if a*x + b*y = n, o"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        return (a, 1) if a * b == n else None\n    if a == 0:\n        return (1, b) if a * b == n else None\n    if a == 1:\n        return (b, 1) if a * b == n else None\n    if a % 2 == 0:\n        return find_solution(a // 2, b, n)\n    g = gcd(b, n - b)\n    if g == 1:\n        return None\n    l1 = lcm(b, n - b)\n    x, y = find_solution(a, b // g, n // g)\n    if x is not None:\n        return x * g, y * g\n    else:\n        return find_solution(a // l1, b // g, n // g)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return (0, 0)\n    else:\n        for x in range(0, n + 1):\n            for y in range(0, n + 1):\n                if a * x + b * y == n:\n                    return (x, y)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    n = int(n)\n    for x in range(1, n):\n        y = (n-a*x) / b\n        if y == int(y):\n            return (x, y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        if a * x + b * n - a * b * n == n * n:\n            return (x, int(n / b))\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    #Get the size of both lists\n    l1_size = len(list1)\n    l2_size = len(list2)\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [i for i in list1 if i not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list(set(list1) - set(list2))\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        list1.remove(item)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [value for value in list1 if value not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    return list(set1 - set2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # This is basically the same as the previous problem,\n    # but this time we have to use the sum_series function from previous problem,\n    # and make sure the range of i values is from 0 to n // 2\n    return sum_series(n) if n < 0 else sum_series(n - 1) + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 2:\n        return 0\n    else:\n        return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    \n    result = n\n    if n%2 == 0:\n        for i in range(0, n // 2):\n            result -= 2 * i\n    else:\n        for i in range(0, (n // 2) + 1):\n            result -= 2 * i\n        result += n - 2 * (n // 2)\n    \n    return result\n    \n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n - sum_series(n-2) if n > 1 else 0\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return (n+1)//2*n\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return ((s * l / 2) * (l * tan(pi / l)))\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return ((s**2)*(1/4)*(tan(pi/s))*l)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*l)/2*tan(pi/s)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s == 3:\n        return s*l**2/4\n    elif s == 4:\n        return (l/2)*(s**2+(s**2-4*l**2)**0.5)\n    elif s == 5:\n        return (l/2)*(s**2+(s**2-5*l**2)**0.5)\n    elif s == 6:\n        return (l/2)*(s**2+(s**2-6*l**2)**0.5)\n    else:\n        return None\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return ((0.25 * s ** 2) * l) / (tan(pi / s))\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.25 * s * l) * tan(pi/s)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    #angle = (s-2) * 180 / s\n    area = (s**2) * (3.14 / 4)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    s=s/2\n    return (s*(l**2)/(4*tan(pi/l)))\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s % 2 == 0:\n        return (l * ((1/tan(pi/s))**2))/4\n    else:\n        return (l * ((1/tan(pi/s))**2))/2\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * (s * s * tan(pi / l))\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s=0\n    for i in range(1,n):\n        if n%i==0:\n            s+=i\n    if s==n:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    total = 0\n    for i in range(1, n):\n        if n % i == 0:\n            total += i\n    if total == n:\n        return True\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = 1\n    #list = [n, divisors, divisors+n, divisors-n, n*divisors, n*divisors-n, n*divisors+n]\n    list = [n, divisors, divisors+n, divisors-n, n*divisors, n*divisors-n, n*divisors+n]\n    for i in list:\n        if i < divisors:\n            divisors = i\n    return divisors == n\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    else:\n        divisors = []\n        divisors.append(1)\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                divisors.append(i)\n                divisors.append(int(n / i))\n        divisors.sort()\n        s = sum(divisors)\n        return s == n\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sqrt = math.sqrt(n)\n    divisors = []\n    for i in range(1, int(sqrt)):\n        if n%i == 0:\n            divisors.append(i)\n            divisors.append(n/i)\n    divisors.sort()\n    return divisors[len(divisors) - 1] + divisors[len(divisors) - 2]\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if (n <= 0): \n        return 0\n    factors = []\n    div = int(math.sqrt(n))\n    for i in range(1, div + 1):\n        if (n % i == 0):\n            factors.append(i)\n            factors.append(int(n / i))\n    factors = list(set(factors))\n    factors.sort()\n    result = 0\n    for i in range(0, len(factors)):\n        result += factors[i]\n    return result\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor = 1\n    sum = 0\n    while divisor < n:\n        if n % divisor == 0:\n            sum += divisor\n        divisor += 1\n    if sum == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return (n > 0) and (math.sqrt(n) == int(math.sqrt(n))) and ((n%2) == (sum_of_divisors(n)%2))\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors_sum = 0 \n    for i in range(1, n+1):\n        if n % i == 0: \n            divisors_sum += i \n    return divisors_sum\ndef len_loop(n):\n    '''\n    Given an integer n, return the length of the loop of consecutive numbers which are a square.\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n <= 1: \n        return False\n    sqrt = math.floor(math.sqrt(n)) \n    divs = [i for i in range(1, sqrt + 1) if n % i == 0] \n    if sum(divs) == sqrt: \n        return True \n    return False\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    import re\n    mapping = {'a':0,'b':1,'c':2,'d':3,'e':4,'f':5,'g':6,'h':7,'i':8,'j':9,'k':10,'l':11,'m':12,'n':13,'o':14,'p':15,'q':16,'r':17,'s':18,'t':19,'u':20,'v':21,'w':22,'x':23,'y':24,'z':25}\n    str1 = str1.lower()\n    result = [mapping[i] for i in str1 if i in mapping.keys()]\n    return len(result)\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    dict_char_position = {}\n    for char_position, char in enumerate(str1):\n        if char.islower():\n            dict_char_position.setdefault(char, []).append(char_position)\n    return dict_char_position\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    result = {}\n    for i in range(len(letters)):\n        result[letters[i]] = 0\n        for j in range(len(str1)):\n            if letters[i] == str1[j].lower():\n                result[letters[i]] += 1\n    return result\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    from collections import Counter\n    str1 = str1.lower()\n    d = Counter(str1)\n    return sum(d[ch] for ch in 'abcdefghijklmnopqrstuvwxyz')\n    \n    \n    \ndef count_char_position_2(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return sum(1 for ch in str1.lower() if ch in 'abcdefghijklmnopqrstuvwxyz')\n    \n    \n    \ndef count_char_position_3(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return sum(1 for ch in 'abcdefghijklmnopqrstuvwxyz' if str1.lower().count(ch) == 1)\n    \n    \ndef count_char_position_4(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    import collections\n    return sum(collections.Counter(str1.lower())[ch] for ch in 'abcdefghijklmnopqrstuvwxyz')\n    \n    \n    \ndef count_char_position_5(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    d = {}\n    for ch in str1:\n        if ch in d: d[ch] += 1\n        else: d[ch] = 1\n    return sum(d[ch] for ch in 'abcdefghijklmnopqrstuvwxyz')\n    \n    \n    \ndef count_char_position_6(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    from collections import Counter\n    return sum(d[ch] for ch in 'abcdefghijklmnopqrstuvwxyz')\n    \n    \n    \ndef count_char_position_7(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return sum(str1.lower().count(ch) for ch in 'abcdefghijklmnopqrstuvwxyz')\n    \n    \ndef count_char_position_8(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return sum(1 for ch in str1.lower() if ch in 'abcdefghijklmnopqrstuvwxyz')\n    \n    \n    \ndef count_char_position_9(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return sum(1 for ch in 'abcdefghijklmnopqrstuvwxyz' if str1.lower().count(ch) == 1)\n    \n    \n    \ndef count_char_position_10(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    d = {}\n    for ch in str1:\n        if ch in d: d[ch] += 1\n        else: d[ch] = 1\n    return sum(d[ch] for ch in 'abcdefghijklmnopqrstuvwxyz')\n    \n    \n    \ndef count_char_position_11(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    from collections import Counter\n    return sum(d[ch] for ch in 'abcdefghijklmnopqrstuvwxyz')\n    \n    \n    \ndef count_char_position_12(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return sum(d[ch] for ch in 'abcdefghijklmnopqrstuvwxyz' if str1.lower().count(ch) == 1)\n    \n    \n    \ndef count_char_position_13(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return sum(str1.lower().count(ch) for ch in 'abcdefghijklmnopqrstuvwxyz')\n    \n    \ndef count_char_position_14(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return sum(1 for ch in str1.lower() if ch in 'abcdefghijklmnopqrstuvwxyz')\n    \n    \ndef count_char_position_15(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return sum(1 for ch in 'abcdefghijklmnopqrstuvwxyz' if str1.lower().count(ch) == 1)\n    \n    \n    \ndef count_char_position_16(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    d = {}\n    for ch in str1:\n        if ch in d: d[ch] += 1\n        else: d[ch] = 1\n    return sum(d[ch] for ch in 'abcdefghijklmnopqrstuvwxyz')\n    \n    \n    \ndef count_char_position_17(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return sum(d[ch] for ch in 'abcdefghijklmnopqrstuvwxyz' if str1.lower().count(ch) == 1)\n    \n    \n    \ndef count_char_position_18(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return sum(str1.lower().count(ch) for ch in 'abcdefghijklmnopqrstuvwxyz')\n    \n    \ndef count_char_position_19(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return sum(1 for ch in str1.lower() if ch in 'abcdefghijklmnopqrstuvwxyz')\n    \n    \n    \ndef count_char_position_20(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return sum(1 for ch in 'abcdefghijklmnopqrstuvwxyz' if str1.lower().count(ch) == 1)\n    \n    \n    \ndef count_char_position_21(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string a"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # build dict\n    d = {}\n    for i, c in enumerate(string.ascii_lowercase):\n        d[c] = i + 1\n    return sum([1 for c in str1 if d[c] == d[str1[c]]])\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    import string\n    str1 = str1.lower()\n    for letter in string.ascii_lowercase:\n        print (letter, str1.count(letter))\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    count = 0\n    for i in range(26):\n        for j in range(len(str1)):\n            if str1[j].lower() == chr(97+i):\n                count += 1\n    return count\n    \ndef count_char_letters(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        for j in range(len(str1)):\n            if str1[j].lower() == chr(97+i):\n                count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for char in str1:\n        if char.lower() == char.upper():\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = {'a':0,'b':0,'c':0,'d':0,'e':0,'f':0,'g':0,'h':0,'i':0,'j':0,'k':0,'l':0,'m':0,'n':0,'o':0,'p':0,'q':0,'r':0,'s':0,'t':0,'u':0,'v':0,'w':0,'x':0,'y':0,'z':0}\n    for char in str1:\n        if char.lower() in alphabet.keys():\n            alphabet[char.lower()] += 1\n    return(sum(alphabet.values()))\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabets = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for alphabet in alphabets:\n        count += str1.count(alphabet)\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    from itertools import permutations\n    from operator import xor\n    count = 0\n    for i in permutations(A,2):\n        if xor(i[0], i[1]) % 2 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(0, len(A)): \n        for j in range(i + 1, len(A)): \n            if A[i] ^ A[j] == 0: \n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # Create a dict of all the unique integers, and a list of xors to all the integers\n    xors = {}\n    for number in A:\n        number_xor = 0\n        for i in range(32):\n            if ((number >> i) & 1)!= 0:\n                number_xor |= 1 << i\n        if number_xor in xors:\n            xors[number_xor].append(number)\n        else:\n            xors[number_xor] = [number]\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pair_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                pair_count += 1\n    return pair_count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    counter = 0\n    for i in range(0, len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    res = 0\n    for i in xrange(len(A)):\n        for j in xrange(i,len(A)):\n            if (A[i] ^ A[j]) & 1 == 0:\n                res += 1\n    return res\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    t = 0 \n    for i in range(0, len(A)-1):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                t += 1\n    return t\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    def find_xor(A): \n        '''\n        Find the xor of the first and second elements of a list. \n        '''\n        return A[0]^A[1]\n    \n    def count_xors(A): \n        '''\n        Return the number of pairs of integers in a list that xor to an even number.\n        '''\n        return sum(1 for i in A if i&1==0)\n    \n    def xor_of_evens(A): \n        '''\n        Return the xor of the even elements of a list. \n        '''\n        return reduce(lambda x,y: x^y, [x for x in A if x&1==0])\n    \n    def count_xors_of_evens(A): \n        '''\n        Return the xor of the even elements of a list. \n        '''\n        return sum(1 for x in A if x&1==0)\n    \n    def xor_of_odds(A): \n        '''\n        Return the xor of the odd elements of a list. \n        '''\n        return reduce(lambda x,y: x^y, [x for x in A if x&1==1])\n    \n    def count_xors_of_odds(A): \n        '''\n        Return the xor of the odd elements of a list. \n        '''\n        return sum(1 for x in A if x&1==1)\n    \n    xor_of_evens = xor_of_evens(A)\n    count_xors_of_evens = count_xors_of_evens(A)\n    xor_of_odds = xor_of_odds(A)\n    count_xors_of_odds = count_xors_of_odds(A)\n    \n    if xor_of_evens == xor_of_odds: \n        return (count_xors_of_evens, count_xors_of_odds)\n    else: \n        return (count_xors_of_evens, count_xors_of_odds)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for i in xrange(len(A)-1):\n        for j in xrange(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                even_pairs += 1\n    return even_pairs\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    counter = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and A[i] % 2 == 0 and A[j] % 2 == 0:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    elif n & (n-1) == 0:\n        return n\n    else:\n        return 1<<(len(bin(n))-2)\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    count = 0\n    while(n/2**count)>1:\n        count += 1\n    return 2**count\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n = int(n)\n    if n == 0:\n        return 1\n    return 1 << (n - 1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while i < n:\n        i = i << 1\n    return i\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    if n == 1:\n        return 1\n    else:\n        return next_power_of_2(n - 1) * 2\n    \ndef sum_of_digits(n):\n    '''\n    Write a python function to calculate the sum of digits of n\n    '''\n    if n < 10:\n        return n\n    else:\n        sum_of_digits_of_n = (n % 10) + sum_of_digits(int(n / 10))\n        return sum_of_digits_of_n\n    \ndef max_digit(n):\n    '''\n    Write a python function to find the largest digit of n\n    '''\n    return max(int(x) for x in str(n))\n    \ndef min_digit(n):\n    '''\n    Write a python function to find the smallest digit of n\n    '''\n    return min(int(x) for x in str(n))\n    \ndef fizz_buzz(n):\n    '''\n    Write a python function to print the word Fizz if n is divisible by 3. Else print the word Buzz and if n is divisible by 5 print the word FizzBuzz. If n is divisible by both 3 and 5 print the word FizzBuzz. Else print n.\n    '''\n    if n % 3 == 0 and n % 5 == 0:\n        return 'FizzBuzz'\n    elif n % 3 == 0:\n        return 'Fizz'\n    elif n % 5 == 0:\n        return 'Buzz'\n    else:\n        return n\n    \ndef lcm(a, b):\n    '''\n    Write a python function to calculate the least common multiple of two positive integers.\n    '''\n    if a > b:\n        greater = a\n    else:\n        greater = b\n    while True:\n        if ((greater % a == 0) and (greater % b == 0)):\n            lcm = greater\n            break\n        greater += 1\n    return lcm\n    \ndef gcd(a, b):\n    '''\n    Write a python function to calculate the greatest common divisor of two positive integers.\n    '''\n    if a < b:\n        smaller = a\n    else:\n        smaller = b\n    while True:\n        if smaller == 0:\n            return smaller\n        if a % smaller == 0 and b % smaller == 0:\n            gcd = smaller\n            break\n        smaller -= 1\n    return gcd\n    \ndef hcf(a, b):\n    '''\n    Write a python function to calculate the highest common factor of two positive integers.\n    '''\n    if a < b:\n        smaller = a\n    else:\n        smaller = b\n    while True:\n        if smaller == 0:\n            return smaller\n        if a % smaller == 0 and b % smaller == 0:\n            hcf = smaller\n            break\n        smaller -= 1\n    return hcf\n    \ndef is_prime(n):\n    '''\n    Write a python function to determine if a number is prime or not\n    '''\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        limit = int(n**0.5) + 1\n        for x in range(3, limit, 2):\n            if n % x == 0:\n                return False\n        return True\n    \ndef is_palindrome(n):\n    '''\n    Write a python function to determine if a number is a palindrome.\n    '''\n    string_of_num = str(n)\n    if string_of_num == string_of_num[::-1]:\n        return True\n    else:\n        return False\n        \ndef rotate(num, n):\n    '''\n    Write a python function to rotate a number n times\n    '''\n    if n > 0:\n        rotated_num = num * pow(10, n)\n        return rotated_num\n    if n < 0:\n        n = n * -1\n        rotated_num = (num % 10) * pow(10, n)\n        return rotated_num\n    \ndef reverse_num(num):\n    '''\n    Write a python function to reverse a number\n    '''\n    num = str(num)\n    reverse_num = num[::-1]\n    return reverse_num\n    \ndef is_pandigital(num):\n    '''\n    Write a python function to check if the number is pandigital or not\n    '''\n    temp_list = [0,1,2,3,4,5,6,7,8,9]\n    str_num = str(num)\n    list_num = list(str_num)\n    if list_num == temp_list:\n        return True\n    return False\n    \ndef is_euler_projection(num):\n    '''\n    Write a python function to check if the number is euler's projection of a square number or not\n    '''\n    if num < 9:\n        return False\n    elif num % 4 == 0 and num % 9 == 0:\n        return True\n    else:\n        return False\n    \ndef is_partition(num):\n    '''\n    Write a python function to check if a number is a partition of a square number or not\n    '''\n    if num < 9:\n        return False\n    elif num % 4 == 0 and num % 9 == 0:\n        return True\n    else:\n        return False\n    \ndef is_decimal_number(num):\n    '''\n    Write a python function to check if a number is a decimal number or not\n    '''\n    if num < 1:\n        return False\n    elif num == 1:\n        return True\n    else:\n        return False\n    \ndef is_perfect_square(num):\n    '''\n    Write a python function to check if a number is a perfect square or not\n    '''\n    temp_num = num / 2\n    if temp_num == int(temp_num):\n        return True\n    return False\n    \ndef is_power_of_2(num):\n    '''\n    Write a python function to check if a number is a power of 2 or not\n    '''\n    if num < 1:\n        return False\n    elif num == 1:\n        return True\n    else:\n        return False\n    \ndef is_power_of_n(num, n):\n    '''\n    Write a python function to check if a number is a power of n or not\n    '''\n    if num < 1:\n        return False\n    elif num == 1:\n        return True\n    else:\n        temp_num = num / n\n        if temp_num == int(temp_num):\n            return True\n        else:\n            return False\n    \ndef is_anagram(s1, s2):\n    '''\n    Write a python function to check if two strings are anagram or not\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        temp_list = list(s1)\n        temp_list2 = list(s2)\n        temp_list.sort()\n        temp_list2.sort()\n        if temp_list == temp_list2:\n            return True\n        return False\n    \ndef is_anagram_soln_1(s1, s2):\n    '''\n    Write a python function to check if two strings are anagram or not (soln 1)\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        temp_list = list(s1)\n        temp_list.sort()\n        temp_list2 = list(s2)\n        temp_list2.sort()\n        if temp_list == temp_list2:\n            return True\n        return False\n    \ndef is_anagram_soln_2(s1, s2):\n    '''\n    Write a python function to check if two strings are anagram or not (soln 2)\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        temp_list = list(s1)\n        temp_list2 = list(s2)\n        for x in temp_list:\n            if x in temp_list2:\n                temp_list2.remove(x)\n            else:\n                return False\n    "
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(int(math.log(n, 2)) + 1)\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**n\n    \ndef print_binary_no(n):\n    '''\n    Write a python function to convert an integer number n to its corresponding binary number as a string. \n    '''\n    bin_no = ''\n    while n > 0:\n        rem = n % 2\n        bin_no = str(rem) + bin_no\n        n = n >> 1\n    return bin_no\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if (n == 0):\n        return 1\n    pow2 = 1\n    while pow2 <= n:\n        pow2 *= 2\n    return pow2\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return 1 << (n - 1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n -= 1\n    count = 0\n    while n > 0:\n        n >>= 1\n        count += 1\n    return 1 << count\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    n = len(a)\n    count = 0\n    for i in range(n):\n        if a[i] == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in range(len(a)):\n        if a[i]==x:\n            count=count+1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    counter = 0\n    for i in range(len(a)):\n        if (a[i] == x):\n            counter = counter + 1\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for item in a:\n        if item == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    a.append(x)\n    a.sort()\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    for i in x:\n        if i == a:\n            cnt = cnt + 1\n        else:\n            continue\n    return cnt\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if a in x:\n        counter = 0\n        for i in x:\n            if a == i:\n                counter += 1\n        return counter\n    else:\n        return 'Not Found'\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for x in list1[m:n+1]:\n        sum += x\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    s = 0\n    for i in list1[m:n+1]:\n        s += i\n    return s\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])                                                                                                                                                                                                    \n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    count = 0\n    for i in range(m, n+1):\n        count += list1[i]\n    return count\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # The start index is included, but the end index is excluded,\n    # therefore we need to add 1 to the end index in order to get the last element of the list.\n    return sum(list1[m:n+1])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return ((5 * math.sqrt(5) + 1) / 2) * a\ndef perimeter_non_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular non-pentagon from the length of its sides.\n    '''\n    return ((1 + math.sqrt(5)) / 2) * a\ndef number_of_sides(a, b, c):\n    '''\n    Write a function to find the number of sides for a regular pentagon, non-pentagon, or non-regular pentagon from its lengths.\n    '''\n    if (a + b + c) < math.sqrt(3) * min(a, b, c):\n        return -1\n    if a == b == c:\n        return 5\n    if a == b or a == c or b == c:\n        return 3\n    return 4\ndef apothem(a, b, c, aper):\n    '''\n    Write a function to find the apothem (or height) for a regular pentagon, non-pentagon, or non-regular pentagon from its lengths, given the apothem for each.\n    '''\n    return math.sqrt((perimeter_pentagon(a) / (5 * math.sqrt(5))) * ((perimeter_pentagon(b) / (5 * math.sqrt(5))) * ((perimeter_pentagon(c) / (5 * math.sqrt(5))) * (1 - aper))))\ndef area_of_triangle(a, b, c):\n    '''\n    Write a function to find the area of a triangle from the length of its sides.\n    '''\n    s = (a + b + c) / 2\n    return math.sqrt(s * (s - a) * (s - b) * (s - c))\ndef area_of_circumscribed_circle(a):\n    '''\n    Write a function to find the area of the circumscribed circle for a regular non-pentagon from the length of its sides.\n    '''\n    return ((5 * math.sqrt(5)) / 4) * a * a\ndef area_of_inscribed_circle(a, b, c):\n    '''\n    Write a function to find the area of the inscribed circle for a regular non-pentagon from its lengths.\n    '''\n    return ((4 * a * b * c) / ((a + b + c) * (a + b - c) * (a - b + c) * (a + b + c)))\ndef area_of_non_regular_pentagon(a, b, c, aper):\n    '''\n    Write a function to find the area of a non-regular pentagon from its lengths, given its apothem and inscribed circle.\n    '''\n    return ((perimeter_non_pentagon(a) * perimeter_non_pentagon(b) * perimeter_non_pentagon(c)) / (apothem(a, b, c, aper) * perimeter_non_pentagon(a)))\ndef area_of_regular_pentagon(a, b, c, aper):\n    '''\n    Write a function to find the area of a regular pentagon from its lengths, given its apothem and inscribed circle.\n    '''\n    return ((perimeter_pentagon(a) * perimeter_pentagon(b) * perimeter_pentagon(c)) / (apothem(a, b, c, aper) * perimeter_pentagon(a)))\ndef area_of_non_regular_hexagon(a, b, c, aper):\n    '''\n    Write a function to find the area of a non-regular hexagon from its lengths, given its apothem and inscribed circle.\n    '''\n    return ((perimeter_non_pentagon(a) * perimeter_non_pentagon(b) * perimeter_non_pentagon(c)) / (apothem(a, b, c, aper) * perimeter_non_pentagon(a)))\ndef area_of_regular_hexagon(a, b, c, aper):\n    '''\n    Write a function to find the area of a regular hexagon from its lengths, given its apothem and inscribed circle.\n    '''\n    return ((perimeter_pentagon(a) * perimeter_pentagon(b) * perimeter_pentagon(c)) / (apothem(a, b, c, aper) * perimeter_pentagon(a)))\ndef area_of_non_regular_heptagon(a, b, c, aper):\n    '''\n    Write a function to find the area of a non-regular heptagon from its lengths, given its apothem and inscribed circle.\n    '''\n    return ((perimeter_non_pentagon(a) * perimeter_non_pentagon(b) * perimeter_non_pentagon(c)) / (apothem(a, b, c, aper) * perimeter_non_pentagon(a)))\ndef area_of_regular_heptagon(a, b, c, aper):\n    '''\n    Write a function to find the area of a regular heptagon from its lengths, given its apothem and inscribed circle.\n    '''\n    return ((perimeter_pentagon(a) * perimeter_pentagon(b) * perimeter_pentagon(c)) / (apothem(a, b, c, aper) * perimeter_pentagon(a)))\ndef area_of_non_regular_octagon(a, b, c, aper):\n    '''\n    Write a function to find the area of a non-regular octagon from its lengths, given its apothem and inscribed circle.\n    '''\n    return ((perimeter_non_pentagon(a) * perimeter_non_pentagon(b) * perimeter_non_pentagon(c)) / (apothem(a, b, c, aper) * perimeter_non_pentagon(a)))\ndef area_of_regular_octagon(a, b, c, aper):\n    '''\n    Write a function to find the area of a regular octagon from its lengths, given its apothem and inscribed circle.\n    '''\n    return ((perimeter_pentagon(a) * perimeter_pentagon(b) * perimeter_pentagon(c)) / (apothem(a, b, c, aper) * perimeter_pentagon(a)))\ndef area_of_non_regular_nonagon(a, b, c, aper):\n    '''\n    Write a function to find the area of a non-regular non-pentagon from its lengths, given its apothem and inscribed circle.\n    '''\n    return ((perimeter_non_pentagon(a) * perimeter_non_pentagon(b) * perimeter_non_pentagon(c)) / (apothem(a, b, c, aper) * perimeter_non_pentagon(a)))\ndef area_of_regular_non_pentagon(a, b, c, aper):\n    '''\n    Write a function to find the area of a regular non-pentagon from its lengths, given its apothem and inscribed circle.\n    '''\n    return ((perimeter_pentagon(a) * perimeter_pentagon(b) * perimeter_pentagon(c)) / (apothem(a, b, c, aper) * perimeter_pentagon(a)))\ndef area_of_non_regular_non_hexagon(a, b, c, aper):\n    '''\n    Write a function to find the area of a non-regular non-hexagon from its lengths, given its apothem and inscribed circle.\n    '''\n    return ((perimeter_non_pentagon(a) * perimeter_non_pentagon(b) * perimeter_non_pentagon(c)) / (apothem(a, b, c, aper) * perimeter_non_pentagon(a)))\ndef area_of_regular_non_hexagon(a, b, c, aper):\n    '''\n    Write a function to find the area of a regular non-hexagon from its lengths, given its apothem and inscribed circle.\n    '''\n    return ((perimeter_pentagon(a) * perimeter_pentagon(b) * perimeter_pentagon(c)) / (apothem(a, b, c, aper) * perimeter_pentagon(a)))\ndef area_of_non_regular_non_heptagon(a, b, c, aper):\n    '''\n    Write a function to find the area of a non-regular non-heptagon from its lengths, given it"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (5*a) + (5*math.sqrt(5))\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(5)))\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(2)))\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(2)))\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(5)))\ndef perimeter_heptagon2(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(5)))\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(2)))\ndef perimeter_heptagon3(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(5)))\ndef perimeter_octagon4(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(2)))\ndef perimeter_octagon5(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(2)))\ndef perimeter_nonagon2(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(2)))\ndef perimeter_octagon6(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(2)))\ndef perimeter_heptagon7(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(5)))\ndef perimeter_nonagon3(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(2)))\ndef perimeter_octagon8(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(2)))\ndef perimeter_octagon9(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(2)))\ndef perimeter_heptagon10(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(5)))\ndef perimeter_nonagon4(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(2)))\ndef perimeter_octagon11(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(2)))\ndef perimeter_octagon12(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(2)))\ndef perimeter_octagon13(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(2)))\ndef perimeter_octagon14(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(2)))\ndef perimeter_octagon15(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(2)))\ndef perimeter_octagon16(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(2)))\ndef perimeter_octagon17(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(2)))\ndef perimeter_octagon18(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(2)))\ndef perimeter_octagon19(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(2)))\ndef perimeter_octagon20(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(2)))\ndef perimeter_octagon21(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(2)))\ndef perimeter_octagon22(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(2)))\ndef perimeter_octagon23(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(2)))\ndef perimeter_octagon24(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(2)))\ndef perimeter_octagon25(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(2)))\ndef perimeter_octagon26(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(2)))\ndef perimeter_octagon27(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(2)))\ndef perimeter_octagon28(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(2)))\ndef perimeter_octagon29(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(2)))\ndef perimeter_octagon30(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return(a*(3+math.sqrt(2)))\ndef perimeter_octago"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return math.pow(a,5)*(3*(1+math.sqrt(5))/2)\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5 + 2 * math.sqrt(3) * a\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return ((3*a)**2)/4\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5+a\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5 + a*5\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5+(a**2)**(0.5)\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = ((5 * a) + (10 * math.sqrt(5))) / 2\n    return perimeter\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+4] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if'std' in s:\n        return s.count('std')\n    return -1\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # define a function to check data type\n    def is_type(t):\n        if type(t) is int or type(t) is float:\n            return True\n        elif type(t) is str:\n            return True\n        elif type(t) is bool:\n            return True\n        else:\n            return False\n    \n    # define a function to check if all the elements in tuple have same data type or not\n    def check_type_all(t):\n        for e in t:\n            if not is_type(e):\n                return False\n        return True\n    \n    return check_type_all(test_tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    res=True\n    for x in test_tuple:\n        if type(x)!=type(test_tuple[0]):\n            res=False\n            break\n    return res\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = []\n    for i in range(0, len(test_tuple)):\n        if isinstance(test_tuple[i], list):\n            data_types.append('list')\n        elif isinstance(test_tuple[i], tuple):\n            data_types.append('tuple')\n        elif isinstance(test_tuple[i], dict):\n            data_types.append('dict')\n        elif isinstance(test_tuple[i], set):\n            data_types.append('set')\n        elif isinstance(test_tuple[i], int):\n            data_types.append('int')\n        elif isinstance(test_tuple[i], str):\n            data_types.append('str')\n        elif isinstance(test_tuple[i], float):\n            data_types.append('float')\n        elif isinstance(test_tuple[i], bool):\n            data_types.append('bool')\n        elif isinstance(test_tuple[i], list) or isinstance(test_tuple[i], tuple) or isinstance(test_tuple[i], dict) or isinstance(test_tuple[i], set) or isinstance(test_tuple[i], int) or isinstance(test_tuple[i], str) or isinstance(test_tuple[i], float) or isinstance(test_tuple[i], bool):\n            continue\n        else:\n            data_types.append('unknown')\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all(isinstance(item, type(test_tuple[0])) for item in test_tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    i = 0\n    while i < len(test_tuple):\n        if isinstance(test_tuple[i], list):\n            if len(test_tuple) == 1:\n                return True\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_list = [type(element) for element in test_tuple]\n    return all(type_list[0] == element for element in type_list)\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if type(test_tuple)!= tuple:\n        return False\n    else:\n        for item in test_tuple:\n            if type(item) == type(test_tuple[0]):\n                continue\n            else:\n                return False\n        return True\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # all_types = [x for x in test_tuple if type(x) is type(test_tuple[0])]\n    # if len(all_types) == 1:\n    #     return all_types[0]\n    # else:\n    #     return False\n    return all(type(x) is type(test_tuple[0]) for x in test_tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    count_type = {}\n    for each in test_tuple:\n        if each in count_type:\n            count_type[each] += 1\n        else:\n            count_type[each] = 1\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_tuple = test_tuple.split(',')\n    if len(test_tuple) == 0:\n        return False\n    for item in test_tuple:\n        if type(item)!= type(test_tuple[0]):\n            return False\n    return True\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # base case: array is empty, return false\n    if n == 0:\n        return False\n    # if there is only one element, it is the majority\n    if n == 1:\n        return True\n    # if the first element is not the majority, then it is not the majority\n    if arr[0]!= x:\n        return False\n    # recurse on the array in the middle\n    return is_majority(arr[1:n], n-1, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # idea: count the number of x in arr, and if it's more than n/2, return true\n    if len(arr) == 0:\n        return False\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    return count > n/2\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # If the array is empty, return False\n    if n == 0:\n        return False\n    \n    # If the array is of length 1, return the element\n    if n == 1:\n        return arr[0]\n    \n    # If the array contains two elements, if x is the same as both elements, return False\n    if arr[0] == arr[1] and x == arr[0]:\n        return False\n    \n    # We know that the array contains more than one element\n    # If x is less than the first element, return is_majority(arr[1:], n-1, x)\n    if x < arr[0]:\n        return is_majority(arr[1:], n-1, x)\n    \n    # If x is greater than the last element, return is_majority(arr[:-1], n-1, x)\n    if x > arr[n-1]:\n        return is_majority(arr[:-1], n-1, x)\n    \n    # Otherwise, count how many times x occurs in the array\n    count = 0\n    for i in range(n):\n        if x == arr[i]:\n            count += 1\n    \n    # If x occurs more than n/2 times, return True\n    if count > n/2:\n        return True\n    \n    # Otherwise, return is_majority(arr[:i]+arr[i+1:], n-1, x)\n    return is_majority(arr[:i]+arr[i+1:], n-1, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # element = 0\n    # count = 0\n    # for i in range(n):\n    #     if arr[i] == x:\n    #         count += 1\n    #     if count > (n / 2):\n    #         element = arr[i]\n    #         break\n    # if element == 0:\n    #     return False\n    # else:\n    #     return True\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return True\n    elif n == 2:\n        if arr[0] == arr[1]:\n            return True\n        else:\n            return False\n    else:\n        if arr[n/2] == x:\n            return is_majority(arr[:n/2], n/2, x) and is_majority(arr[n/2:], n-n/2, x)\n        else:\n            return is_majority(arr[:n/2], n/2, x) or is_majority(arr[n/2:], n-n/2, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    idx = 0\n    idx2 = 0\n    for i in range(n):\n        if arr[i] == x:\n            idx += 1\n    for i in range(n):\n        if arr[i] == x:\n            idx2 += 1\n    if idx > n/2:\n        return True\n    else:\n        return False\n    \nprint is_majority([1, 2, 3, 4, 5, 6, 6, 6, 6, 7, 8, 9], 10, 6)\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    l = 0\n    r = len(arr)-1\n    while l<r:\n        mid = l + (r-l)//2\n        if arr[mid] == x:\n            l = mid + 1\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid\n    if arr[l] == x:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr == None or n <= 0:\n        return False\n    if n == 1:\n        return True\n    if x > arr[n/2] and x == arr[n/2]:\n        return True\n    elif x > arr[n/2] and x!= arr[n/2]:\n        return is_majority(arr, n/2, x)\n    elif x < arr[n/2] and x == arr[n/2]:\n        return is_majority(arr, n/2, x)\n    else:\n        return is_majority(arr, n/2, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # solution 1, using counting sort\n    # time complexity: O(n)\n    # space complexity: O(n)\n    # e_counts = [0] * (n+1)\n    # for i in range(n):\n    #     e_counts[arr[i]] += 1\n    # for i in range(1, n+1):\n    #     if e_counts[i] > n/2:\n    #         return i\n    # return None\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # If there are no elements, or only one element, or the majority element is the element being searched for, the majority element is not present\n    if n == 0 or n == 1:\n        return False\n    # If the majority element is the element being searched for, return true\n    if arr[n/2] == x:\n        return True\n    # Else if the majority element is not the element being searched for, return false\n    else:\n        return False\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= n-1\n        count += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        n &= n-1\n        count += 1\n    return count \n    \ndef sum_of_two(n): \n    '''\n    Write a python function to find the sum of the digits of a given number.\n    '''\n    sum = 0\n    while (n): \n        sum += n%10\n        n = n/10\n    return sum \n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n % 2 == 1:\n            count+= 1\n        n = n >> 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    num_bits = 0\n    while (n): \n        if n & 1:\n            num_bits += 1\n        n = n >> 1\n    return num_bits \n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        if (n & 1):\n            count += 1\n        n = n >> 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= n-1\n        count += 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n):\n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if not isinstance(str, str):\n        raise TypeError(\"Not a string\")\n    return ''.join(str[x] for x in range(0,len(str)) if x%2 == 0)\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(0, len(str)):\n        if(i % 2 == 0):\n            result += str[i]\n    return result\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[0::2]\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = str[1::2]\n    print(new_str)\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    i = 0\n    odd_char = ''\n    while i < len(str):\n        if i % 2 == 1:\n            odd_char = odd_char + str[i]\n        i += 1\n    return odd_char\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    output = ''\n    for i in range(len(str)):\n        if i%2 == 0:\n            output = output + str[i]\n    return output\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    # first convert the string into a list\n    list_of_char = list(str)\n    \n    # now remove the odd index values in the list and return the new list as a string\n    return \"\".join(list_of_char[::2])\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    for i in range(len(str)):\n        if i%2==0:\n            continue\n        else:\n            str=str[:i]+str[i+1:]\n    return str\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a<=b) and (a<=c): \n        return a \n    elif (b<=a) and (b<=c): \n        return b \n    else: \n        return c \n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    minimum = 0\n    if a < b and a < c:\n        minimum = a\n    elif b < a and b < c:\n        minimum = b\n    else:\n        minimum = c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n    \n    \nprint(min_of_three(-1,3,2))\n    \n    \n    \n    "
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c \n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (n & (1<<r)) == (0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l>r:\n        return False\n    if l==r:\n        return True\n    # if l=1 then,\n    # l&1 gives the least significant bit of l\n    # (1) and l&2 gives the second least significant bit of l\n    # (2) and l&4 gives the fourth least significant bit of l\n    # (3) and l&8 gives the eighth least significant bit of l\n    # (4) and l&16 gives the first least significant bit of l\n    # (5) and l&32 gives the second least significant bit of l\n    # (6) and l&64 gives the third least significant bit of l\n    # (7) and l&128 gives the fourth least significant bit of l\n    # (8) and l&256 gives the fifth least significant bit of l\n    # (9) and l&512 gives the sixth least significant bit of l\n    # (10) and l&1024 gives the seventh least significant bit of l\n    # (11) and l&2048 gives the eighth least significant bit of l\n    # (12) and l&4096 gives the ninth least significant bit of l\n    # (13) and l&8192 gives the tenth least significant bit of l\n    # (14) and l&16384 gives the eleventh least significant bit of l\n    # (15) and l&32768 gives the twelfth least significant bit of l\n    # (16) and l&65536 gives the thirteenth least significant bit of l\n    # (17) and l&131072 gives the fourteenth least significant bit of l\n    # (18) and l&262144 gives the fifteenth least significant bit of l\n    # (19) and l&524288 gives the sixteenth least significant bit of l\n    # (20) and l&1048576 gives the seventeenth least significant bit of l\n    # (21) and l&2097152 gives the eighteenth least significant bit of l\n    # (22) and l&4194304 gives the nineteenth least significant bit of l\n    # (23) and l&8388608 gives the twentieth least significant bit of l\n    # (24) and l&16777216 gives the eleventeenth least significant bit of l\n    # (25) and l&33554432 gives the twelfthleast significant bit of l\n    # (26) and l&67108864 gives the thirteenthleast significant bit of l\n    # (27) and l&134217728 gives the fourteenthleast significant bit of l\n    # (28) and l&268435456 gives the fifteenthleast significant bit of l\n    # (29) and l&5242880 gives the sixteenthleast significant bit of l\n    # (30) and l&1099511627776 gives the seventeenthleast significant bit of l\n    # (31) and l&20922854775807 gives the eighteenthleast significant bit of l\n    # (32) and l&3435973836726944 gives the nineteenthleast significant bit of l\n    # (33) and l&676672805419968 gives the twentiethleast significant bit of l\n    # (34) and l&137438953472192 gives the eleventeenthleast significant bit of l\n    # (35) and l&2748779069444736 gives the twelfthleast significant bit of l\n    # (36) and l&4503599627370496 gives the thirteenthleast significant bit of l\n    # (37) and l&9007199254740992 gives the fourteenthleast significant bit of l\n    # (38) and l&18014398509481984 gives the fifteenthleast significant bit of l\n    # (39) and l&36287951259098768 gives the sixteenthleast significant bit of l\n    # (40) and l&72057594037927934 gives the seventeenthleast significant bit of l\n    # (41) and l&87960930222065576 gives the eighteenthleast significant bit of l\n    # (42) and l&1717986918467676 gives the nineteenthleast significant bit of l\n    # (43) and l&37583738686423072 gives the twentiethleast significant bit of l\n    # (44) and l&611100206151023528 gives the eleventeenthleast significant bit of l\n    # (45) and l&10995116277771129 gives the thirteenthleast significant bit of l\n    # (46) and l&2092278988800097781 gives the fourteenthleast significant bit of l\n    # (47) and l&399902343753545216 gives the fifteenthleast significant bit of l\n    # (48) and l&72057594037927934 gives the sixteenthleast significant bit of l\n    # (49) and l&16106127374770048 gives the seventheleast significant bit of l\n    # (50) and l&298096228064448096 gives the eighthleast significant bit of l\n    # (51) and l&524288 gives the ninthleast significant bit of l\n    # (52) and l&8388608 gives the tenthleast significant bit of l\n    # (53) and l&1717986918467676 gives the eleventhleast significant bit of l\n    # (54) and l&33554432 gives the twelfthleast significant bit of l\n    # (55) and l&67108864 gives the thirteenthleast significant bit of l\n    # (56) and l&134217728 gives the fourteenthleast significant bit of l\n    # (57) and l&268435456 gives the fifteenthleast significant bit of l\n    # (58) and l&5242880 gives the sixteenthleast significant bit of l\n    # (59) and l&1048576 gives the seventheleast significant bit of l\n    # (60) and l&2097152 gives the eighteenthleast significant bit of l\n    # (61) and l&4194304 gives the nineteenthleast significant bit of l\n    # (62) and l&8388608 gives the twentiethleast significant bit of l\n    # (63) and l&16777216 gives the eleventeenthleast significant bit of l\n    # (64) and l&32768 gives the twelfthleast significant bit of l\n    # (65) and l&65536 gives the thirteenthleast significant bit of l\n    # (66) and l&131072 gives the fourteenthleast significant bit of l\n    # (67) and l&262144 gives the fifteenthleast significant bit of l\n    # (68) and l&524288 gives the sixteenthleast significant bit of l\n    # (69) and l&1048576 gives the seventheleast significant bit of l\n    # (70) and l&2097152 gives the eighteenthleast significant bit of l\n    # (71) and l&4194304 gives the nineteenthleast significant bit of l\n    # (72) and l&8388608 gives the twentiethleast significant bit of l\n    # (73) and l&16777216 gives the eleventeenthleast significant bit of l\n    # (74) and l&33554432 gives the twelfthleast significant bit of l\n    # (75) and l&67108864 gives the thirteenthleast significant bit of l\n    # (76) and l&134217728 gives the fourteenthleast significant bit of l\n    # (77) and l&268435456 gives the fifteenthleast significant bit of l\n    # (78) and l&5242880 gives the sixteenthleast significant bit of l\n    # (79) and l&1048576 gives the seventheleast significant bit of l\n    # (80) and l&2097152 gives the eighteenthleast significant bit of l\n    # (81) and l&4194304 gives the nineteenthleast significant bit of l\n    # (82) and l&8388608 gives the twentiethleast significant bit of l\n    # (83) and l&16777216 gives the eleventeenthleast significant bit of l\n    # (84) and l&32768 gives the twelfthleast significant bit of l\n    # (85) and l&65536 gives the thirteenthleast significant bit of l\n    # (86) and l&131072 gives the fourteenthleast significant bit of l\n    # (87) and l&262144 gives the fifteenthleast significant bit of l\n    # (88) and "
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l,r+1):\n        if (1 << i) & n:\n            count += 1\n    if count == 0:\n        print \"All bits unset in the given range\"\n    else:\n        print \"All bits set in the given range\"\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return all((((n>>l)>>i)&1)==0 for i in range(r))\ndef all_Bits_Set_In_The_Given_Range_V2(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return all((((n>>l)>>i)&1)==0 for i in range(r))\ndef all_Bits_Set_In_The_Given_Range_V3(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return all(((n>>l)>>i)&1==0 for i in range(r))\ndef find_The_First_Bit_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return min(i for i in range(l,r) if ((n>>l)>>i)&1==1)\ndef find_The_First_Bit_Set_In_The_Given_Range_V2(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return min((n>>l)&1,(n>>(l+1))&1,(n>>(l+2))&1)\ndef find_The_First_Bit_Set_In_The_Given_Range_V3(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return min((n>>l)&1,(n>>(l+1))&1,(n>>(l+2))&1)\ndef do_Overflow_In_Addition(a,b):\n    '''\n    Write a python function to check whether any overflow occurs in addition of two number or not.\n    '''\n    return (a&0xffffffff)+(b&0xffffffff)<(2**32-1)\ndef do_Overflow_In_Subtraction(a,b):\n    '''\n    Write a python function to check whether any overflow occurs in subtraction of two number or not.\n    '''\n    return (a&0xffffffff)-(b&0xffffffff)<0\ndef do_Overflow_In_Multiplication(a,b):\n    '''\n    Write a python function to check whether any overflow occurs in multiplication of two number or not.\n    '''\n    return (a&0xffffffff)*(b&0xffffffff)<(2**32-1)\ndef do_Overflow_In_Division(a,b):\n    '''\n    Write a python function to check whether any overflow occurs in division of two number or not.\n    '''\n    return (a&0xffffffff)%(b&0xffffffff)<0\ndef do_Overflow_In_Modulo(a,b):\n    '''\n    Write a python function to check whether any overflow occurs in modulo of two number or not.\n    '''\n    return (a&0xffffffff)%(b&0xffffffff)<0\ndef do_Overflow_In_Power(a,b):\n    '''\n    Write a python function to check whether any overflow occurs in power of two number or not.\n    '''\n    return (a&0xffffffff)**(b&0xffffffff)<(2**32-1)\ndef do_Overflow_In_Floor_Division(a,b):\n    '''\n    Write a python function to check whether any overflow occurs in floor division of two number or not.\n    '''\n    return (a&0xffffffff)//(b&0xffffffff)<0\ndef do_Overflow_In_Left_Shift(a,b):\n    '''\n    Write a python function to check whether any overflow occurs in left shift of two number or not.\n    '''\n    return (a&0xffffffff)<<(b&0xffffffff)<(2**32-1)\ndef do_Overflow_In_Right_Shift(a,b):\n    '''\n    Write a python function to check whether any overflow occurs in right shift of two number or not.\n    '''\n    return (a&0xffffffff)>>(b&0xffffffff)<0\ndef do_Overflow_In_And(a,b):\n    '''\n    Write a python function to check whether any overflow occurs in bitwise AND of two number or not.\n    '''\n    return (a&0xffffffff)&(b&0xffffffff)<(2**32-1)\ndef do_Overflow_In_Or(a,b):\n    '''\n    Write a python function to check whether any overflow occurs in bitwise OR of two number or not.\n    '''\n    return (a&0xffffffff)|(b&0xffffffff)<(2**32-1)\ndef do_Overflow_In_Xor(a,b):\n    '''\n    Write a python function to check whether any overflow occurs in bitwise XOR of two number or not.\n    '''\n    return (a&0xffffffff)^(b&0xffffffff)<(2**32-1)\ndef do_Overflow_In_Not(a):\n    '''\n    Write a python function to check whether any overflow occurs in bitwise NOT of a number or not.\n    '''\n    return not(a&0xffffffff)<(2**32-1)\ndef do_Overflow_In_Inversion(a):\n    '''\n    Write a python function to check whether any overflow occurs in bitwise NOT of a number or not.\n    '''\n    return ~(a&0xffffffff)<(2**32-1)\ndef find_The_Number_That_Differ_In_First_Two_Bits(n,l,r):\n    '''\n    Write a python function to check whether any overflow occurs in bitwise NOT of a number or not.\n    '''\n    for i in range(l,r):\n        if ((n>>l)>>i)&1!=(n>>(l+1))>>i&1:\n            return i\n    return -1\ndef convert_Decimal_To_Binary(n):\n    '''\n    Write a python function to convert the given number to it's binary representation.\n    '''\n    return bin(n)\ndef convert_Decimal_To_Binary_V2(n):\n    '''\n    Write a python function to convert the given number to it's binary representation.\n    '''\n    return bin(n)[2:]\ndef convert_Decimal_To_Binary_V3(n):\n    '''\n    Write a python function to convert the given number to it's binary representation.\n    '''\n    return bin(n)[2:].zfill(32)\ndef convert_Binary_To_Decimal(n):\n    '''\n    Write a python function to convert the given number to it's binary representation.\n    '''\n    return int(n,2)\ndef convert_Binary_To_Decimal_V2(n):\n    '''\n    Write a python function to convert the given number to it's binary representation.\n    '''\n    return int(n,2)\ndef convert_Binary_To_Decimal_V3(n):\n    '''\n    Write a python function to convert the given number to it's binary representation.\n    '''\n    return int(n,2)\ndef convert_Decimal_To_Octal(n):\n    '''\n    Write a python function to convert the given number to it's octal representation.\n    '''\n    return oct(n)\ndef convert_Decimal_To_Octal_V2(n):\n    '''\n    Write a python function to convert the given number to it's octal representation.\n    '''\n    return oct(n)[2:]\ndef convert_Decimal_To_Octal_V3(n):\n    '''\n    Write a python function to convert the given number to it's octal representation.\n    '''\n    return oct(n)[2:].zfill"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return reduce(lambda x,y: x^y, [1 << i for i in range(l,r+1)]) == 0\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if(l>=r):  \n        return True\n    elif(n&(1<<(l-1))>0):  \n        return False\n    else:  \n        return all_Bits_Set_In_The_Given_Range(n,l+1,r)\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return all(n & (1 << i) == 0 for i in range(l, r))\n    \ndef all_Bits_Set_In_The_Given_Range_Is_False(n,l,r):\n    return all(n & (1 << i) == 0 for i in range(l, r))\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i = l\n    while (i <= r):\n        if i & n!= 0:\n            return False\n        i = i << 1\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # your code goes here\n    return (((n & l) == 0) and ((n & r) == 0))\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    a = []\n    for i in range(l,r+1):\n        a.append(i&(i-1) == 0)\n    if a.count(True) == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if arr[:n] == []:\n        return []\n    arr = arr[:n]\n    # separate positive and negative\n    pos = [x for x in arr if x > 0]\n    neg = [x for x in arr if x < 0]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # arr is a list of integers\n    # n is an integer\n    # return arr\n    # find the index of the first n elements and split the array \n    index_first_n = 0\n    for i in xrange(n):\n        if arr[i] < 0:\n            index_first_n = i\n            break\n    return arr[index_first_n:n] + arr[:index_first_n]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(0, n):\n        if arr[i] < 0:\n            arr.append(arr.pop(i))\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n < 1:\n        return arr\n    negative = []\n    positive = []\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if len(arr) < n:\n        return arr\n    arr.sort()\n    j = 0\n    for i in xrange(len(arr)):\n        if arr[i] < 0:\n            arr[j] = arr[i]\n            j += 1\n    for i in xrange(j, n):\n        arr[i] = 0\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    new_arr = arr[:n]\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            new_arr.append(arr[i])\n    for i in range(n):\n        if new_arr[i] < 0:\n            new_arr.append(new_arr[i])\n    return new_arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Time complexity: O(n)\n    # Space complexity: O(n)\n    # Declare pointers for negative and positive numbers\n    negative, positive = 0, 0\n    # Loop through the array\n    while positive < n and negative < len(arr):\n        if arr[positive] < 0:\n            arr[positive], arr[negative] = arr[negative], arr[positive]\n            negative += 1\n        else:\n            positive += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    new_arr = []\n    i = 0\n    for el in arr:\n        if el > 0:\n            new_arr.append(el)\n        elif el < 0:\n            new_arr.insert(i, el)\n            i+=1\n    return new_arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr.sort()\n    return arr[:n] + sorted(arr[n:])\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    temp = []\n    for i in range(n):\n        if arr[i] < 0:\n            temp.append(arr[i])\n    for i in range(n):\n        if arr[i] >= 0:\n            temp.append(arr[i])\n    temp += arr[n:]\n    return temp\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return ''.join(str1.replace(' ','').replace(char,' '+char+' '))\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    result = ''\n    for letter in str1:\n        if letter =='':\n            result += char\n        else:\n            result += letter\n    return result\n    \n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','')\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if(char==''):\n        return str1\n    str1=str1.replace(' ','')\n    return str1+char\n    \n    \n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return ''.join(char if i =='' else i for i in str1)\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','%s') % char\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    lst=str1.split(' ')\n    for i in lst:\n        if i=='':\n            lst[lst.index(i)]=char\n    newstr=''\n    for i in lst:\n        newstr+=i\n    return newstr\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    return str1.replace(\" \",char)\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    return heapq.nlargest(n,list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    return list1[n:]\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    return heapq.nlargest(n,list1)\ndef larg_num(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    heapq.heapify(list1)\n    return heapq.nsmallest(n,list1)\ndef larg_n(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the nth largest item from the list.\n    '''\n    return heapq.nlargest(n,list1)[n-1]\ndef larg_n(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the nth smallest item from the list.\n    '''\n    return heapq.nsmallest(n,list1)[n-1]\ndef max_diff(list1):\n    '''\n    Write a function that takes in a list and returns the maximum difference between any two elements.\n    '''\n    return max(list1)-min(list1)\ndef max_diff(list1):\n    '''\n    Write a function that takes in a list and returns the maximum absolute difference between any two elements.\n    '''\n    return max(abs(max(list1)-min(list1)))\ndef max_diff(list1):\n    '''\n    Write a function that takes in a list and returns the maximum absolute difference between the largest and smallest elements.\n    '''\n    return max(max(list1)-min(list1),min(list1)-max(list1))\ndef max_diff(list1):\n    '''\n    Write a function that takes in a list and returns the maximum absolute difference between any two elements.\n    '''\n    return max(abs(max(list1)-min(list1)),abs(min(list1)-max(list1)))\ndef max_diff(list1):\n    '''\n    Write a function that takes in a list and returns the maximum absolute difference between any two elements.\n    '''\n    return max(abs(max(list1)-min(list1)),abs(min(list1)-max(list1)))\ndef max_diff(list1):\n    '''\n    Write a function that takes in a list and returns the maximum absolute difference between any two elements.\n    '''\n    return max(abs(max(list1)-min(list1)),abs(min(list1)-max(list1)))\ndef max_diff(list1):\n    '''\n    Write a function that takes in a list and returns the maximum absolute difference between any two elements.\n    '''\n    return max(abs(max(list1)-min(list1)),abs(min(list1)-max(list1)))\ndef max_diff(list1):\n    '''\n    Write a function that takes in a list and returns the maximum absolute difference between any two elements.\n    '''\n    return max(abs(max(list1)-min(list1)),abs(min(list1)-max(list1)))\ndef max_diff(list1):\n    '''\n    Write a function that takes in a list and returns the maximum absolute difference between any two elements.\n    '''\n    return max(abs(max(list1)-min(list1)),abs(min(list1)-max(list1)))\ndef max_diff(list1):\n    '''\n    Write a function that takes in a list and returns the maximum absolute difference between any two elements.\n    '''\n    return max(abs(max(list1)-min(list1)),abs(min(list1)-max(list1)))\ndef max_diff(list1):\n    '''\n    Write a function that takes in a list and returns the maximum absolute difference between any two elements.\n    '''\n    return max(abs(max(list1)-min(list1)),abs(min(list1)-max(list1)))\ndef max_diff(list1):\n    '''\n    Write a function that takes in a list and returns the maximum absolute difference between any two elements.\n    '''\n    return max(abs(max(list1)-min(list1)),abs(min(list1)-max(list1)))\ndef max_diff(list1):\n    '''\n    Write a function that takes in a list and returns the maximum absolute difference between any two elements.\n    '''\n    return max(abs(max(list1)-min(list1)),abs(min(list1)-max(list1)))\ndef max_diff(list1):\n    '''\n    Write a function that takes in a list and returns the maximum absolute difference between any two elements.\n    '''\n    return max(abs(max(list1)-min(list1)),abs(min(list1)-max(list1)))\ndef max_diff(list1):\n    '''\n    Write a function that takes in a list and returns the maximum absolute difference between any two elements.\n    '''\n    return max(abs(max(list1)-min(list1)),abs(min(list1)-max(list1)))\ndef max_diff(list1):\n    '''\n    Write a function that takes in a list and returns the maximum absolute difference between any two elements.\n    '''\n    return max(abs(max(list1)-min(list1)),abs(min(list1)-max(list1)))\ndef max_diff(list1):\n    '''\n    Write a function that takes in a list and returns the maximum absolute difference between any two elements.\n    '''\n    return max(abs(max(list1)-min(list1)),abs(min(list1)-max(list1)))\ndef max_diff(list1):\n    '''\n    Write a function that takes in a list and returns the maximum absolute difference between any two elements.\n    '''\n    return max(abs(max(list1)-min(list1)),abs(min(list1)-max(list1)))\ndef max_diff(list1):\n    '''\n    Write a function that takes in a list and returns the maximum absolute difference between any two elements.\n    '''\n    return max(abs(max(list1)-min(list1)),abs(min(list1)-max(list1)))\ndef max_diff(list1):\n    '''\n    Write a function that takes in a list and returns the maximum absolute difference between any two elements.\n    '''\n    return max(abs(max(list1)-min(list1)),abs(min(list1)-max(list1)))\ndef max_diff(list1):\n    '''\n    Write a function that takes in a list and returns the maximum absolute difference between any two elements.\n    '''\n    return max(abs(max(list1)-min(list1)),abs(min(list1)-max(list1)))\ndef max_diff(list1):\n    '''\n    Write a function that takes in a list and returns the maximum absolute difference between any two elements.\n    '''\n    return max(abs(max(list1)-min(list1)),abs(min(list1)-max(list1)))\ndef max_diff(list1):\n    '''\n    Write a function that takes in a list and returns the maximum absolute difference between any two elements.\n    '''\n    return max(abs(max(list1)-min(list1)),abs(min(list1)-max(list1)))\ndef max_diff(list1):\n    '''\n    Write a function that takes in a list and returns the maximum absolute difference between any two elements.\n    '''\n    return max(abs(max(list1)-min(list1)),abs(min(list1)-max(list1)))\ndef max_diff(list1):\n    '''\n    Write a function that takes in a list and returns the maximum absolute difference between any two elements.\n    '''\n    return max(abs(max(list1)-min(list1)),abs(min(list1)-max(list1)))\ndef max_diff(list1):\n    '''\n    Write a function that takes in a list and returns the maximum absolute difference between any two elements.\n    '''\n    return max(abs(max(list1)-min(list1)),abs(min(list1)-max(list1)))\ndef max_diff(list1):\n    '''\n    Write a function that takes in a list and returns the maximum absolute difference between any two elements.\n    '''\n    return max(abs(max(list1)-min(list1))"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    temp_list = heapq.nlargest(n,list1)\n    return temp_list\ndef larg_nsmall(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    temp_list = heapq.nsmallest(n,list1)\n    return temp_list\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    for i in list1:\n        heapq.heappush(heap,i)\n    return heapq.nlargest(n,heap)\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    return list1[-n:]\ndef larg_nenum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    list1.sort()\n    return list1[:n]\ndef top_n_words(text,n):\n    '''\n    Write a function that takes in a string and an integer n and returns the top n words in the string.\n    '''\n    l1=text.split()\n    l1.sort()\n    l1.reverse()\n    return l1[:n]\ndef top_n_words2(text,n):\n    '''\n    Write a function that takes in a string and an integer n and returns the top n words in the string.\n    '''\n    l1=text.split()\n    d1={}\n    for w in l1:\n        d1[w]=d1.get(w,0)+1\n    l2=[]\n    l2=heapq.nlargest(n,d1,key=d1.get)\n    return l2\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #if we find a list with n elements, we will return the whole list, so we need to check if n is the length of the list\n    if len(list1)==n:\n        return list1\n    #otherwise we will check if n is larger than the length of the list, if not we will return the list\n    if n>len(list1):\n        return list1\n    #otherwise we will get the n largest elements from the list, we will return them in a list, we can also return a list with a single element\n    larg_list=[]\n    heapq.heapify(larg_list)\n    for i in list1:\n        heapq.heappush(larg_list,i)\n        if len(larg_list)>n:\n            heapq.heappop(larg_list)\n    return larg_list\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi=3.141592653589793\n    return pi*r**2*h\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    cylinders = r*2*pi*h\n    surfaces = pi*r**2+2*r*r*pi*h\n    return surfaces-cylinders\n    \ndef lateralsurface_rectangle(a,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle.\n    '''\n    surfaces = a*b\n    return surfaces\n    \ndef lateralsurface_cuboid(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a cuboid.\n    '''\n    surfaces = 2*(a*b + b*c + a*c)\n    return surfaces\n    \ndef cuboid_area(a,b,c):\n    '''\n    Write a function to find the area of a cuboid.\n    '''\n    areas = a*b*c\n    return areas\n    \ndef cuboid_perimeter(a,b,c):\n    '''\n    Write a function to find the perimeter of a cuboid.\n    '''\n    perimeters = 4*(a+b+c)\n    return perimeters\n    \ndef wall_area(a,b,c):\n    '''\n    Write a function to find the area of a wall.\n    '''\n    areas = 2*(a*b+b*c+a*c)\n    return areas\n    \ndef wall_perimeter(a,b,c):\n    '''\n    Write a function to find the perimeter of a wall.\n    '''\n    perimeters = 2*(a+b+c)\n    return perimeters\n    \ndef pyramid_area(a,b,c):\n    '''\n    Write a function to find the area of a pyramid.\n    '''\n    areas = a*b/2*c\n    return areas\n    \ndef pyramid_perimeter(a,b,c):\n    '''\n    Write a function to find the perimeter of a pyramid.\n    '''\n    perimeters = 2*(a+b+c)\n    return perimeters\n    \ndef cone_area(r,h):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    areas = pi*r*r*h/3\n    return areas\n    \ndef cone_perimeter(r,h):\n    '''\n    Write a function to find the perimeter of a cone.\n    '''\n    perimeters = 2*pi*r*(r+h)\n    return perimeters\n    \ndef cone_volume(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volumes = pi*r*r*(r+h)/3\n    return volumes\n    \ndef hemisphere_area(r):\n    '''\n    Write a function to find the area of a hemisphere.\n    '''\n    areas = pi*r*r\n    return areas\n    \ndef hemisphere_perimeter(r):\n    '''\n    Write a function to find the perimeter of a hemisphere.\n    '''\n    perimeters = 2*pi*r\n    return perimeters\n    \ndef hemisphere_volume(r):\n    '''\n    Write a function to find the volume of a hemisphere.\n    '''\n    volumes = pi*r*r*2\n    return volumes\n    \ndef cube_volume(a):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volumes = a**3\n    return volumes\n    \ndef rectangle_area(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    areas = a*b\n    return areas\n    \ndef rectangle_perimeter(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    perimeters = 2*(a+b)\n    return perimeters\n    \ndef rectangle_volume(a,b):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    volumes = a*b\n    return volumes\n    \ndef rhombus_area(a):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    areas = a*a/2\n    return areas\n    \ndef rhombus_perimeter(a):\n    '''\n    Write a function to find the perimeter of a rhombus.\n    '''\n    perimeters = 4*a\n    return perimeters\n    \ndef rhombus_volume(a):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    volumes = a*a/2\n    return volumes\n    \ndef rhomboid_area(a,b):\n    '''\n    Write a function to find the area of a rhomboid.\n    '''\n    areas = a*b\n    return areas\n    \ndef rhomboid_perimeter(a,b):\n    '''\n    Write a function to find the perimeter of a rhomboid.\n    '''\n    perimeters = 2*(a+b)\n    return perimeters\n    \ndef rhomboid_volume(a,b):\n    '''\n    Write a function to find the volume of a rhomboid.\n    '''\n    volumes = a*b\n    return volumes\n    \ndef tetrahedron_area(a):\n    '''\n    Write a function to find the area of a tetrahedron.\n    '''\n    areas = 4*(a**2/2)\n    return areas\n    \ndef tetrahedron_perimeter(a):\n    '''\n    Write a function to find the perimeter of a tetrahedron.\n    '''\n    perimeters = 6*a\n    return perimeters\n    \ndef tetrahedron_volume(a):\n    '''\n    Write a function to find the volume of a tetrahedron.\n    '''\n    volumes = 4/3*a**3\n    return volumes\n    \ndef sphere_area(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    areas = 4*pi*r**2\n    return areas\n    \ndef sphere_perimeter(r):\n    '''\n    Write a function to find the perimeter of a sphere.\n    '''\n    perimeters = 4*pi*r\n    return perimeters\n    \ndef sphere_volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volumes = (4/3)*pi*r**3\n    return volumes\n    \ndef cylinder_area(r,h):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    areas = pi*r*r+2*pi*r*r*h\n    return areas\n    \ndef cylinder_perimeter(r,h):\n    '''\n    Write a function to find the perimeter of a cylinder.\n    '''\n    perimeters = 2*pi*r*(r+h)\n    return perimeters\n    \ndef cylinder_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volumes = pi*r*r*h\n    return volumes\n    \ndef cone_area(r,h):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    areas = pi*r*r*h/3\n    return areas\n    \ndef cone_perimeter(r,h):\n    '''\n    Write a function to find the perimeter of a cone.\n    '''\n    perimeters = 2*pi*r*(r+h)\n    return perimeters\n    \ndef cone_volume(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volumes = pi*r*r*h/3\n    return volumes\n    \ndef cuboid_area(a,b,c):\n    '''\n    Write a function to find the area of a cuboid.\n    '''\n    areas = 2*(a*b+b*c+a*c)\n    return areas\n    \ndef cuboid_perimeter(a,b,c):\n    '''\n    Write a function to find the perimeter of a cuboid.\n    '''\n    perimeters = 2*(a+b+c)\n    return perimeters\n    \ndef cu"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14159265359\n    return pi * r * r * 2 + pi * r * r * h\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #height = 1.1\n    #width = 0.9\n    #r = 1\n    #h = 1.1\n    area = math.pi * (r**2) * h\n    return area\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14159265359\n    return pi*(r**2)*h/4.\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (pi*r*(r+h))\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    a = np.pi*r**2\n    b = np.pi*h**2\n    ans = a-b\n    return ans\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14159265359\n    print \"Surface area of a cylinder: \", pi * r**2 * h\n    \n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*r**2 + 2*pi*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi=3.14159\n    A=(r**2)*pi\n    S=(A*h)/2\n    return S\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l*l*l\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    \n    if n == 0:\n        return 1\n    \n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    \n    return count\n    "
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n - 1)\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = n & 0x5555555555555555\n    n = n | (n >> 1)\n    n = n | (n >> 2)\n    n = n | (n >> 4)\n    n = n | (n >> 8)\n    n = n | (n >> 16)\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n - 1)\n    \n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n - 1)\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = n & 0x5555555555555555\n    n = n | (n >> 1)\n    n = n & 0x3333333333333333\n    n = n | (n >> 2)\n    n = n & 0x0f0f0f0f0f0f0f0f\n    return n\n    \ndef find_factors(n):\n    '''\n    Write a python function to return the list of the factors of a given number.\n    '''\n    if n % 2 == 0:\n        return [2] + find_factors(n/2)\n    else:\n        return [2] + find_factors(n//2)\n    \ndef reverse_bits(n): \n    '''\n    Write a python function to reverse the bits of a given number.\n    '''\n    n = ((n & 0x5555555555555555) << 1) | ((n & 0xAAAAAAAAAAAAAAAA) >> 1)\n    n = ((n & 0x3333333333333333) << 2) | ((n & 0xCCCCCCCCCCCCCCCC) >> 2)\n    n = ((n & 0x0f0f0f0f0f0f0f0f) << 4) | ((n & 0xf0f0f0f0f0f0f0f0) >> 4)\n    return n\n    \ndef is_palindrome(n): \n    '''\n    Write a python function to check if a given number is a palindrome.\n    '''\n    temp = n\n    rev = 0\n    while n > 0:\n        rev = rev * 10 + n % 10\n        n = n / 10\n    if temp == rev:\n        return True\n    else:\n        return False\n    \ndef get_factors(n):\n    '''\n    Write a python function to return the list of the factors of a given number.\n    '''\n    if n < 1:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        return [1] + get_factors(n/2) + get_factors(n/3) + get_factors(n/5)\n        \ndef is_prime(n): \n    '''\n    Write a python function to check if a given number is a prime number.\n    '''\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        return all(n % i for i in xrange(2, int(n**0.5 + 1)))\n    \ndef get_number_of_binary_ones(n): \n    '''\n    Write a python function to return the number of set bits in a given number.\n    '''\n    n = n & 0x5555555555555555\n    n = n | (n >> 1)\n    n = n & 0x3333333333333333\n    n = n | (n >> 2)\n    n = n & 0x0f0f0f0f0f0f0f0f\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n = n >> 1\n    return count\n    \ndef get_binary_string_with_ones(n): \n    '''\n    Write a python function to return the binary string of a given number.\n    '''\n    s = bin(n)\n    s = s[2:]\n    ones_count = get_number_of_binary_ones(n)\n    s = (ones_count * '1') + s\n    return s\n    \ndef get_factors_sorted(n):\n    '''\n    Write a python function to return the sorted list of the factors of a given number.\n    '''\n    if n < 1:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        return [1] + get_factors_sorted(n/2) + get_factors_sorted(n/3) + get_factors_sorted(n/5)\n        \ndef get_number_of_factors(n): \n    '''\n    Write a python function to return the number of factors of a given number.\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1 + get_number_of_factors(n/2) + get_number_of_factors(n/3) + get_number_of_factors(n/5)\n        \ndef get_factors_in_reverse_sorted_order(n): \n    '''\n    Write a python function to return the reverse sorted list of the factors of a given number.\n    '''\n    if n < 1:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        return get_factors_in_reverse_sorted_order(n/2) + get_factors_in_reverse_sorted_order(n/3) + get_factors_in_reverse_sorted_order(n/5) + [n]\n        \ndef get_binary_string_of_factors_in_reverse_sorted_order(n): \n    '''\n    Write a python function to return the reverse sorted binary string of the factors of a given number.\n    '''\n    s = \"\"\n    factors = get_factors_in_reverse_sorted_order(n)\n    for f in factors:\n        s += get_binary_string_with_ones(f)\n    return s\n    \ndef get_all_binary_strings_of_factors_in_reverse_sorted_order(n): \n    '''\n    Write a python function to return the reverse sorted list of all the binary strings of the factors of a given number.\n    '''\n    s = \"\"\n    factors = get_factors_in_reverse_sorted_order(n)\n    for f in factors:\n        s += get_binary_string_with_ones(f)\n    return [s] + get_all_binary_strings_of_factors_in_reverse_sorted_order(n - 1)\n    \ndef get_number_of_strings_with_n_of_ones(n): \n    '''\n    Write a python function to return the number of strings of length n with n of ones.\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return get_number_of_strings_with_n_of_ones(n-1) + get_number_of_strings_with_n_of_ones(n/2) + get_number_of_strings_with_n_of_ones(n/3) + get_number_of_strings_with_n_of_ones(n/5)\n        \ndef get_binary_strings_of_length_n_with_n_of_ones(n): \n    '''\n    Write a python function to return the list of all the binary strings of length n with n of ones.\n    '''\n    if n < 1:\n        return []\n    elif n == 1:\n        return [\"1\"]\n    else:\n        return get_binary_strings_of_length_n_with_n_of_ones(n-1) + get_binary_strings_of_length_n_with_n_of_ones(n/2) + get_binary_strings_of_length_n_with_n_of_ones(n/3) + get_binary_strings_of_length_n_with_n_of_ones(n/5)\n        \ndef is_power_of_2(n): \n    '''\n    Write a python function to check if a given number is a power of 2.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return is_power_of_2(n/2)\n    \ndef get_binary_string_of_product(a, b): \n    '''\n    Write a python function to return the binary string of the product of two numbers.\n    '''\n    a = a & 0x5555555555555555\n    a = a | (a >> 1)\n    a = a & 0x3333333333333333\n    a = a | (a >> 2)\n    a = a & "
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n-1)\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n & (n-1))\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n - 1)\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xAAAAAAAA\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = Counter(test_list)\n    return d\n    \nprint(check_occurences([(1, 1), (1, 2), (1, 3), (1, 4), (2, 1), (2, 4), (3, 1), (4, 2), (4, 3)]))\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = {}\n    for tuples in test_list:\n        if tuples in count:\n            count[tuples] += 1\n        else:\n            count[tuples] = 1\n    return count\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # your code here\n    output = {}\n    for val in test_list:\n        if val in output:\n            output[val] += 1\n        else:\n            output[val] = 1\n    return output\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = Counter(test_list)\n    return occurence_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return {item: count for item, count in Counter(test_list).items()}\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    final_dict = {}\n    for i in test_list:\n        if i not in final_dict:\n            final_dict[i] = 1\n        else:\n            final_dict[i] += 1\n    return final_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_list = Counter(test_list)\n    return test_list\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences_dict = {}\n    for item in test_list:\n        if item in occurences_dict:\n            occurences_dict[item] += 1\n        else:\n            occurences_dict[item] = 1\n    return occurences_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for i in test_list:\n        if i in occurences:\n            occurences[i] += 1\n        else:\n            occurences[i] = 1\n    return occurences\ndef get_word_list(file_name):\n    '''\n    Write a function that takes in a file name and returns a list of the words in the file in lowercase.\n    '''\n    word_list = []\n    with open(file_name, 'r') as file:\n        for line in file:\n            for word in line.split():\n                word = word.lower()\n                word_list.append(word)\n    return word_list\ndef get_all_n_grams(word_list, n):\n    '''\n    Write a function that takes in a list of words and returns a dictionary mapping each n-gram (n) to the number of times it occurs in the list.\n    '''\n    all_n_grams = {}\n    for word in word_list:\n        for i in range(len(word)-n+1):\n            n_gram = word[i:i+n]\n            if n_gram in all_n_grams:\n                all_n_grams[n_gram] += 1\n            else:\n                all_n_grams[n_gram] = 1\n    return all_n_grams\ndef get_all_n_grams_above_count(word_list, count):\n    '''\n    Write a function that takes in a list of words and returns a dictionary mapping each n-gram (n) to the number of times it occurs in the list that is greater than or equal to count.\n    '''\n    all_n_grams = {}\n    for word in word_list:\n        for i in range(len(word)-1):\n            n_gram = word[i:i+1]\n            if n_gram in all_n_grams:\n                all_n_grams[n_gram] += 1\n            else:\n                all_n_grams[n_gram] = 1\n    return all_n_grams\ndef get_top_n_grams(all_n_grams, top_n):\n    '''\n    Write a function that takes in a dictionary of n-grams and a positive integer n and returns the top n grams in the dictionary.\n    '''\n    top_n_grams = {}\n    for n_gram in all_n_grams:\n        if all_n_grams[n_gram] >= top_n:\n            top_n_grams[n_gram] = all_n_grams[n_gram]\n    return top_n_grams\ndef get_top_n_grams_above_count(all_n_grams, top_n, count):\n    '''\n    Write a function that takes in a dictionary of n-grams and a positive integer n and returns the top n grams in the dictionary that are greater than or equal to count.\n    '''\n    top_n_grams = {}\n    for n_gram in all_n_grams:\n        if all_n_grams[n_gram] >= count:\n            top_n_grams[n_gram] = all_n_grams[n_gram]\n    return top_n_grams\ndef get_top_n_word_list(word_list, n, top_n):\n    '''\n    Write a function that takes in a list of words and a positive integer n and returns a list of the top n words in the list (in descending order) based on their n-gram count.\n    '''\n    all_n_grams = get_all_n_grams(word_list, n)\n    top_n_grams = get_top_n_grams(all_n_grams, top_n)\n    top_n_grams_word_list = []\n    for n_gram in top_n_grams:\n        top_n_grams_word_list.append(n_gram)\n    return top_n_grams_word_list\ndef get_top_n_word_list_above_count(word_list, n, top_n, count):\n    '''\n    Write a function that takes in a list of words and a positive integer n and returns a list of the top n words in the list (in descending order) based on their n-gram count that are greater than or equal to count.\n    '''\n    all_n_grams = get_all_n_grams_above_count(word_list, count)\n    top_n_grams = get_top_n_grams_above_count(all_n_grams, top_n, count)\n    top_n_grams_word_list = []\n    for n_gram in top_n_grams:\n        top_n_grams_word_list.append(n_gram)\n    return top_n_grams_word_list\ndef get_top_n_pair_list(word_list, n, top_n):\n    '''\n    Write a function that takes in a list of words and a positive integer n and returns a list of the top n pairs in the list (in descending order) based on their n-gram count.\n    '''\n    all_n_grams = get_all_n_grams(word_list, n)\n    top_n_grams = get_top_n_grams(all_n_grams, top_n)\n    top_n_pairs = []\n    for n_gram in top_n_grams:\n        for i in range(len(n_gram)-1):\n            top_n_pairs.append((n_gram[i], n_gram[i+1]))\n    return top_n_pairs\ndef get_top_n_pair_list_above_count(word_list, n, top_n, count):\n    '''\n    Write a function that takes in a list of words and a positive integer n and returns a list of the top n pairs in the list (in descending order) based on their n-gram count that are greater than or equal to count.\n    '''\n    all_n_grams = get_all_n_grams_above_count(word_list, count)\n    top_n_grams = get_top_n_grams_above_count(all_n_grams, top_n, count)\n    top_n_pairs = []\n    for n_gram in top_n_grams:\n        for i in range(len(n_gram)-1):\n            top_n_pairs.append((n_gram[i], n_gram[i+1]))\n    return top_n_pairs\ndef get_top_n_trigram_list(word_list, n, top_n):\n    '''\n    Write a function that takes in a list of words and a positive integer n and returns a list of the top n trigrams in the list (in descending order) based on their n-gram count.\n    '''\n    all_n_grams = get_all_n_grams(word_list, n)\n    top_n_grams = get_top_n_grams(all_n_grams, top_n)\n    top_n_trigrams = []\n    for n_gram in top_n_grams:\n        if len(n_gram) == n:\n            top_n_trigrams.append(n_gram)\n    return top_n_trigrams\ndef get_top_n_trigram_list_above_count(word_list, n, top_n, count):\n    '''\n    Write a function that takes in a list of words and a positive integer n and returns a list of the top n trigrams in the list (in descending order) based on their n-gram count that are greater than or equal to count.\n    '''\n    all_n_grams = get_all_n_grams_above_count(word_list, count)\n    top_n_grams = get_top_n_grams_above_count(all_n_grams, top_n, count)\n    top_n_trigrams = []\n    for n_gram in top_n_grams:\n        if len(n_gram) == n:\n            top_n_t"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i]!='' and str[j] =='':\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    if not str: \n        return 0\n    result = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            result += 1\n    return result\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len([i for i in range(len(str)+1) if str[i]!=''])\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1]!= \"\":\n                count = count + 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    return len(str.split())\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(list(filter(lambda x:x!='',str.split(' '))))\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j]!='':\n                count+=1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        count += 1\n        for j in range(i+1, len(str)+1):\n            if j == len(str):\n                break\n            if str[i:j]!= '':\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i]!='':\n            count += 1\n        else:\n            if str[i+1]!='':\n                count += 1\n            else:\n                if str[i+2]!='':\n                    count += 1\n                else:\n                    if str[i+3]!='':\n                        count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    substr_count = 0\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    seq_list = [0]\n    for i in range(1,n):\n        seq_list.append(seq_list[-1] + m)\n    return seq_list[-1]\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Note: The function is given n-1 because we need to know the number of possible sequences\n    # that end with m and cannot start with m\n    return (factorial(m)//(factorial(n)*factorial(m-n)))\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m <= n:\n        return 0\n    else:\n        return n + get_total_number_of_sequences(m-1,n)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Return the total number of sequences of length n.\n    return (m * (m + 1)) / 2\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    if n == 1:\n        return m\n    else:\n        return m * get_total_number_of_sequences(m, n - 1)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < n:\n        return 0\n    if m == n:\n        return 1\n    if m % n == 0:\n        return (m//n) ** n\n    return (m//n) ** n + get_total_number_of_sequences(m, m%n)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < 2 or n < 1:\n        return 0\n    elif m == 2 and n == 1:\n        return 1\n    elif m < n:\n        return 0\n    else:\n        return get_total_number_of_sequences(m-2,n-1) + get_total_number_of_sequences(m-1,n-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    import sys\n    if m < 1:\n        print 'Invalid input'\n        sys.exit()\n    elif n < 0:\n        print 'Invalid input'\n        sys.exit()\n    elif m == 1:\n        return 1\n    elif n == 0:\n        return 1\n    else:\n        return get_total_number_of_sequences(m-2,n) + get_total_number_of_sequences(m-1,n-1)\n        \nprint get_total_number_of_sequences(5,4"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m > n:\n        return 0\n    elif m == n:\n        return 1\n    else:\n        return get_total_number_of_sequences(m-1,n) + get_total_number_of_sequences(m,n-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    memo = {}\n    \n    def helper(m, n):\n        if (m, n) in memo:\n            return memo[(m, n)]\n        elif n == 1:\n            memo[(m, n)] = 1\n            return 1\n        elif m == 0:\n            memo[(m, n)] = 0\n            return 0\n        elif m < 0 or n < 1:\n            memo[(m, n)] = 0\n            return 0\n        else:\n            memo[(m, n)] = helper(m - 2, n - 1) + helper(m - 1, n - 1)\n            return memo[(m, n)]\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == 0:\n        return list2\n    else:\n        list1[-1] = list2\n        return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) < len(list2):\n        return [list1[-1]] + list2[:-1]\n    else:\n        return [list1[-1]] + list2[:]\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Iterate over the list1 and replace the last element of the list with list2\n    for i in range(len(list1)):\n        list1[i] = list1[i]\n    # Assign list2[-1] to the last element of list1\n    list1[-1] = list2[-1]\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    \n    list1.pop(len(list1)-1)\n    list1.extend(list2)\n    \n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1) - 1):\n        list1[i] = list1[i + 1]\n    for i in range(len(list2)):\n        list1[-1] = list2[i]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    #list1[-1]=list2\n    for i in range(len(list2)):\n        list1[-1]=list2[i]\n    print list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    new_list = []\n    for item in list1:\n        new_list.append(item)\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == len(list2):\n        list1[-1:] = list2\n    elif len(list1) > len(list2):\n        list1[-1:] = list2[:len(list1)]\n    elif len(list1) < len(list2):\n        list1[-1:] = [list2[-1]]*len(list1)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list1[i] + list2[i]\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count = count + 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_chars = 0\n    for i in range(len(str1)):\n        total_chars += 1\n    return total_chars\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    result = 0\n    for i in str1:\n        result += 1\n    return result\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total = 0\n    for s in str1:\n        total += 1\n    return total\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    i = int(math.sqrt(N))\n    while(i*i < N):\n        i = i+1\n    return i*i\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N = int(N)\n    root = math.sqrt(N)\n    if root.is_integer():\n        return (root + 1) ** 2\n    else:\n        return -1\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N==1:\n        return 2\n    elif N%2==0:\n        return N+1\n    else:\n        return int(math.ceil(math.sqrt(N)))**2\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    if math.sqrt(N) - int(math.sqrt(N)) == 0:\n        return int(math.sqrt(N)) * int(math.sqrt(N))\n    return int(math.sqrt(N)) * int(math.sqrt(N)) + 1\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N)))\n    \ndef hex_to_int(hexa):\n    '''\n    Write a python function to convert a string representing a hex number to an integer.\n    '''\n    return int(hexa, 16)\n    \ndef int_to_hex(int_val):\n    '''\n    Write a python function to convert an integer to a string representing a hex number.\n    '''\n    return hex(int_val).replace(\"0x\", \"\")\n    \ndef int_to_binary(int_val):\n    '''\n    Write a python function to convert an integer to a string representing a binary number.\n    '''\n    return bin(int_val).replace(\"0b\", \"\")\n    \ndef binary_to_int(binary_val):\n    '''\n    Write a python function to convert a string representing a binary number to an integer.\n    '''\n    return int(binary_val, 2)\n    \ndef str_reverse(str_val):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return str_val[::-1]\n    \ndef str_to_list(str_val):\n    '''\n    Write a python function to convert a string to a list of characters.\n    '''\n    return list(str_val)\n    \ndef list_to_str(list_val):\n    '''\n    Write a python function to convert a list of characters to a string.\n    '''\n    return ''.join(list_val)\n    \ndef int_to_base(N, B):\n    '''\n    Write a python function to convert an integer to a string representing a base number.\n    '''\n    return ''.join(int_to_binary(N).zfill(int(math.ceil(math.log(B, 2)))))\n    \ndef base_to_int(N, B):\n    '''\n    Write a python function to convert a string representing a base number to an integer.\n    '''\n    return int(N, B)\n    \ndef factorial(n):\n    '''\n    Write a python function to compute the factorial of a number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n        \ndef fibonacci(n):\n    '''\n    Write a python function to compute the nth number in the Fibonacci sequence.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n    \ndef lucas(n):\n    '''\n    Write a python function to compute the nth number in the Lucas sequence.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return lucas(n - 1) + lucas(n - 2)\n        \ndef sum_series(n, a=0, b=1):\n    '''\n    Write a python function to compute the nth number in any arbitrary series.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        return sum_series(n - 1, a, b) + sum_series(n - 2, a, b)\n        \ndef largest_sum(A):\n    '''\n    Write a python function to compute the largest sum of non-adjacent numbers in an array.\n    '''\n    if len(A) == 0:\n        return None\n    elif len(A) == 1:\n        return A[0]\n    else:\n        return A[0] + largest_sum(A[1:])\n    \ndef factorial(n):\n    '''\n    Write a python function to compute the factorial of a number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n    \ndef fibonacci(n):\n    '''\n    Write a python function to compute the nth number in the Fibonacci sequence.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n    \ndef lucas(n):\n    '''\n    Write a python function to compute the nth number in the Lucas sequence.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return lucas(n - 1) + lucas(n - 2)\n    \ndef sum_series(n, a=0, b=1):\n    '''\n    Write a python function to compute the nth number in any arbitrary series.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        return sum_series(n - 1, a, b) + sum_series(n - 2, a, b)\n    \ndef largest_sum(A):\n    '''\n    Write a python function to compute the largest sum of non-adjacent numbers in an array.\n    '''\n    if len(A) == 0:\n        return None\n    elif len(A) == 1:\n        return A[0]\n    else:\n        return A[0] + largest_sum(A[1:])\n    \ndef permute(A):\n    '''\n    Write a python function to compute the number of permutations of a list.\n    '''\n    if len(A) == 0:\n        return 1\n    else:\n        return permute(A[1:]) + permute(A[:1] + A[1:])\n        \ndef permute_helper(A, size):\n    '''\n    Write a python function to compute the number of permutations of a list.\n    '''\n    if len(A) == 0:\n        return 1\n    elif len(A) == 1:\n        return 1\n    else:\n        return permute_helper(A[1:], size) + permute_helper(A[:1] + A[1:], size)\n        \ndef permute_recursive(A):\n    '''\n    Write a python function to compute the number of permutations of a list.\n    '''\n    if len(A) == 0:\n        return 1\n    else:\n        return permute_recursive(A[1:]) + permute_recursive(A[:1] + A[1:])\n        \ndef permute_iterative(A):\n    '''\n    Write a python function to compute the number of permutations of a list.\n    '''\n    if len(A) == 0:\n        return 1\n    else:\n        count = 1\n        for i in range(len(A)):\n            count = count * (len(A) - i)\n        return count\n        \ndef is_palindrome(s):\n    '''\n    Write a python function to determine if a string is a palindrome.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    else:\n        return s[0] == s[len(s) - 1] and is_palindrome(s[1:len(s) - 1])\n        \ndef is_palindrome_iterative(s):\n    '''\n    Write a python function to determine if a string is a palindrome.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        i = 0\n        j = len(s) - 1\n        while i <= j:\n            if s[i]!= s[j]:\n                return False\n            else:\n                i += 1\n                j -= 1\n        return True\n        \ndef is_palindrome_recursive(s, "
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N)))\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N))**2)\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N)))\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root=int(math.ceil(math.sqrt(N)))\n    for i in range(root,N):\n        if math.pow(i+1,2)>N:\n            return i\n    return 0\ndef next_Permutation(arr):\n    '''\n    Write a python function to find the next permutation in a given array.\n    '''\n    N=len(arr)\n    if N<=1:\n        return []\n    i=N-1\n    while i>0 and arr[i-1]>=arr[i]:\n        i-=1\n    if i<1:\n        return []\n    j=N-1\n    while arr[j]<=arr[i-1]:\n        j-=1\n    arr[i-1],arr[j]=arr[j],arr[i-1]\n    arr[i:]=arr[N-1:i:-1]\n    return arr\ndef next_Permutation_sort(arr):\n    '''\n    Write a python function to find the next permutation in a given array.\n    '''\n    N=len(arr)\n    if N<=1:\n        return []\n    i=N-1\n    while i>0 and arr[i-1]>=arr[i]:\n        i-=1\n    if i<1:\n        return []\n    j=N-1\n    while arr[j]<=arr[i-1]:\n        j-=1\n    arr[i-1],arr[j]=arr[j],arr[i-1]\n    arr[i:]=arr[N-1:i:-1]\n    return arr\ndef next_Permutation_sort_optimised(arr):\n    '''\n    Write a python function to find the next permutation in a given array.\n    '''\n    N=len(arr)\n    if N<=1:\n        return []\n    i=N-1\n    while i>0 and arr[i-1]>=arr[i]:\n        i-=1\n    if i<1:\n        return []\n    j=N-1\n    while arr[j]<=arr[i-1]:\n        j-=1\n    arr[i-1],arr[j]=arr[j],arr[i-1]\n    arr[i:]=arr[N-1:i:-1]\n    return arr\ndef get_array_rotation(arr,start,end):\n    '''\n    Write a python function to find the rotation point in a given array.\n    '''\n    if start>=end:\n        return start\n    mid=(start+end)//2\n    if arr[mid]<arr[mid+1]:\n        return mid\n    if arr[mid]>arr[mid+1]:\n        return mid+1\n    if arr[mid]>arr[start]:\n        return start\n    if arr[mid]<arr[start]:\n        return mid+1\n    if arr[end]>arr[mid]:\n        return mid+1\n    if arr[end]<arr[mid]:\n        return end\n    if arr[end]>arr[start]:\n        return start\n    if arr[end]<arr[start]:\n        return end\ndef rotate(arr,start,end,k):\n    '''\n    Write a python function to rotate an array in a given range.\n    '''\n    if start>=end:\n        return\n    arr[start],arr[end]=arr[end],arr[start]\n    mid=(start+end)//2\n    rotate(arr,start,mid,k)\n    rotate(arr,mid+1,end,k)\n    return\ndef rotate_array(arr,rotation_point):\n    '''\n    Write a python function to rotate an array in a given range.\n    '''\n    if rotation_point<0 or rotation_point>len(arr):\n        return\n    arr[0:rotation_point],arr[rotation_point:]=arr[rotation_point:],arr[0:rotation_point]\n    return\ndef rotate_array_alternate(arr,rotation_point):\n    '''\n    Write a python function to rotate an array in a given range.\n    '''\n    if rotation_point<0 or rotation_point>len(arr):\n        return\n    start=0\n    end=len(arr)-1\n    while start<=end:\n        arr[start],arr[end]=arr[end],arr[start]\n        start+=1\n        end-=1\n    return\ndef rotate_array_alternate_optimised(arr,rotation_point):\n    '''\n    Write a python function to rotate an array in a given range.\n    '''\n    if rotation_point<0 or rotation_point>len(arr):\n        return\n    start=0\n    end=len(arr)-1\n    while start<=end:\n        arr[start],arr[end]=arr[end],arr[start]\n        start+=1\n        end-=1\n    return\ndef min_edit_distance(str1,str2):\n    '''\n    Write a python function to find the minimum number of edits required to convert a string 1 to string 2.\n    '''\n    m=len(str1)+1\n    n=len(str2)+1\n    table=[[0 for j in range(n)] for i in range(m)]\n    for i in range(m):\n        table[i][0]=i\n    for j in range(n):\n        table[0][j]=j\n    for i in range(1,m):\n        for j in range(1,n):\n            if str1[i-1]==str2[j-1]:\n                table[i][j]=table[i-1][j-1]\n            else:\n                table[i][j]=1+min(table[i-1][j],table[i][j-1],table[i-1][j-1])\n    return table[m-1][n-1]\ndef min_edit_distance_optimised(str1,str2):\n    '''\n    Write a python function to find the minimum number of edits required to convert a string 1 to string 2.\n    '''\n    m=len(str1)+1\n    n=len(str2)+1\n    table=[[0 for j in range(n)] for i in range(m)]\n    for i in range(m):\n        table[i][0]=i\n    for j in range(n):\n        table[0][j]=j\n    for i in range(1,m):\n        for j in range(1,n):\n            if str1[i-1]==str2[j-1]:\n                table[i][j]=table[i-1][j-1]\n            else:\n                table[i][j]=1+min(table[i-1][j-1],table[i-1][j],table[i][j-1])\n    return table[m-1][n-1]\ndef two_sum_optimised(arr,target):\n    '''\n    Write a python function to find if there is a pair of elements in an array whose sum is equal to a given number.\n    '''\n    sorted_arr=sorted(arr)\n    start=0\n    end=len(arr)-1\n    while start<end:\n        if sorted_arr[start]+sorted_arr[end]==target:\n            return True\n        if sorted_arr[start]+sorted_arr[end]<target:\n            start+=1\n        else:\n            end-=1\n    return False\ndef two_sum(arr,target):\n    '''\n    Write a python function to find if there is a pair of elements in an array whose sum is equal to a given number.\n    '''\n    sorted_arr=sorted(arr)\n    start=0\n    end=len(arr)-1\n    while start<end:\n        if sorted_arr[start]+sorted_arr[end]==target:\n            return True\n        if sorted_arr[start]+sorted_arr[end]<target:\n            start+=1\n        else:\n            end-=1\n    return False\ndef two_sum_optimised(arr,target):\n    '''\n    Write a python function to find if there is a pair of elements in an array whose sum is equal to a given number.\n    '''\n    sorted_arr=sorted(arr"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    i = int(math.sqrt(N))\n    if N > i*i:\n        return i*i\n    else:\n        return i*i + 1\ndef findPerfectSquare(n):\n    \n    start = 1\n    end = n\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) <= 3: \n        return 0\n    else: \n        sum_array = [0]*len(arr) \n        sum_array[0] = arr[0] \n        sum_array[1] = max(sum_array[0], arr[1]) \n        sum_array[2] = max(sum_array[1], arr[2]) \n        for i in xrange(3, len(arr)): \n            sum_array[i] = max(sum_array[i-1], sum_array[i-2] + arr[i]) \n        return max(sum_array) \n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    left = 0\n    right = len(arr) - 1\n    maxSum = 0\n    for i in xrange(len(arr)):\n        if i < right:\n            maxSum = max(maxSum, arr[i] + maxSum)\n    return maxSum\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # check if array is bitonic\n    if is_bitonic(arr):\n        # if true, we need to find the max increasing sum, that is, the max sum of a sequence between the start and the current element\n        increasing_sum = max_sum(arr[1:])\n        # if true, we need to find the max decreasing sum, that is, the max sum of a sequence between the current element and the end\n        decreasing_sum = max_sum(arr[:-1])\n        # return the max of the two\n        return max(increasing_sum, decreasing_sum)\n    # if the array is not bitonic, then we can return the value of the array\n    else:\n        return sum(arr)\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def binary_search(arr, start, end):\n        if start > end:\n            return start\n        if start == end:\n            return start\n        mid = (start + end) // 2\n        if arr[mid] < arr[mid-1] and arr[mid] < arr[mid+1]:\n            return mid\n        elif arr[mid] > arr[mid-1]:\n            return binary_search(arr, start, mid-1)\n        else:\n            return binary_search(arr, mid+1, end)\n    \n    max_sum = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            max_sum = max(max_sum, arr[i] + arr[i-1])\n        elif arr[i] < arr[i-1]:\n            max_sum = max(max_sum, arr[i-1] + arr[i])\n        else:\n            max_sum = max(max_sum, arr[i-1] + arr[i], arr[i]+arr[i-1])\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def max_bitonic(arr): \n        left, right, max_sum = 0, len(arr) - 1, 0\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    max_ending_here = max_ending_here = arr[0]\n    max_so_far = max_ending_here\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    print(arr)\n    return\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    if len(arr) == 0: \n        return 0 \n    \n    curr_max = arr[0]\n    for i in range(1, len(arr)): \n        if arr[i] > arr[i-1] and arr[i] > curr_max: \n            curr_max = arr[i]\n        elif arr[i] < arr[i-1] and arr[i-1] > curr_max: \n            curr_max = arr[i-1]\n        else: \n            curr_max = arr[i-1]\n    return curr_max\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    global max_sum_result\n    max_sum_result = None\n    max_sum_util(arr, 0, len(arr) - 1)\n    return max_sum_result\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def helper(arr, i, j):\n        if i >= j:\n            return 0\n        elif i == j - 1:\n            return max(arr[i], arr[j])\n        else:\n            mid = (i + j) // 2\n            left = helper(arr, i, mid)\n            right = helper(arr, mid, j)\n            if left < right:\n                return left + helper(arr, mid, j)\n            else:\n                return right + helper(arr, i, mid)\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return (number+1)**.5\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return None\n    x = number\n    while True:\n        y = (x + number / x) / 2\n        if y == x:\n            return y\n        x = y\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 1\n    y = number\n    while abs(x-y) > 0.0001:\n        x = (x + y)/2\n        y = number / x\n    return x\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return number**0.5\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if not isinstance(number, int) and not isinstance(number, float):\n        return \"Must be an int or float\"\n    if number < 0:\n        return \"Must be a non-negative number\"\n    if number == 0:\n        return 0\n    if number < 1:\n        return \"Must be a positive number\"\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    #This will give you the float value of the number you give it.\n    square = float(number)\n    #This will return an integer with the floor value of the float value you give it.\n    int_square = int(square)\n    #This will return the integer rounded up to the closest integer power of two.\n    power_of_two = 2**int_square\n    #This will return the float value of the power of two.\n    babylonian_value = float(power_of_two)\n    #This will return the float value of the square root.\n    return babylonian_value\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    pass\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    iteration = 0\n    guess = number/2\n    while abs(guess**2 - number) > 0.001:\n        guess = (guess + number/guess)/2\n        iteration += 1\n    print('Iteration:', iteration)\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    pass\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    number = float(number)\n    i = 0\n    while True:\n        if i ** 2 == number:\n            return i\n        elif i ** 2 > number:\n            return i - 1\n        i += 1\n    return\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) == 0:\n        return 0\n    elif len(str) == 1:\n        return 1\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in xrange(n)] for x in xrange(n)]\n    for i in xrange(n): \n        L[i][i] = 1\n    for cl in xrange(2, n+1): \n        for i in xrange(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2\n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j])\n    return L[0][n-1]\n    \ndef lcs(X, Y): \n    '''\n    Given two strings, find the length of the longest common substring. \n    The time complexity of the below function is O(mn), where m and n are the lengths of the two strings.\n    '''\n    m = len(X) \n    n = len(Y) \n    L = [[None]*(n+1) for i in xrange(m+1)] \n    for i in xrange(m+1): \n        for j in xrange(n+1): \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1] + 1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1])\n    return L[m][n]\n    \ndef is_anagram(str1, str2): \n    '''\n    Given two strings, check whether they are anagrams.\n    '''\n    return sorted(str1) == sorted(str2)\n    \ndef is_permutation(str1, str2): \n    '''\n    Given two strings, check whether they are permutations of each other. \n    Two strings are said to be permutations of each other if one string can be made by rearranging letters from the other string.\n    '''\n    if len(str1)!= len(str2): \n        return False\n    char_map1 = [0]*26\n    char_map2 = [0]*26\n    for i in xrange(len(str1)): \n        char_map1[ord(str1[i])-ord('a')] += 1\n        char_map2[ord(str2[i])-ord('a')] += 1\n    for i in xrange(26): \n        if char_map1[i]!= char_map2[i]: \n            return False\n    return True\n    \ndef is_valid_parentheses(s): \n    '''\n    Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n    The brackets must close in the correct order, \"()\" and \"()[]{}\" are all valid but \"(]\" and \"([)]\" are not.\n    '''\n    stack = []\n    for i in xrange(len(s)): \n        if s[i] in '([{': \n            stack.append(s[i])\n        elif s[i] == ')': \n            if not stack or stack.pop()!= '(': \n                return False\n        elif s[i] == '}': \n            if not stack or stack.pop()!= '{': \n                return False\n        elif s[i] == ']': \n            if not stack or stack.pop()!= '[': \n                return False\n    return not stack\n    \ndef base_converter(dec_num, base): \n    '''\n    Convert a given integer to a string in a new base.\n    '''\n    digits = \"0123456789ABCDEF\"\n    rem_stack = []\n    while dec_num > 0: \n        rem = dec_num % base\n        rem_stack.append(rem)\n        dec_num = dec_num//base\n    new_str = \"\"\n    while rem_stack: \n        new_str = new_str + digits[rem_stack.pop()]\n    return new_str\n    \ndef base_converter2(dec_num, base): \n    '''\n    Convert a given integer to a string in a new base.\n    '''\n    digits = \"0123456789ABCDEF\"\n    res = \"\"\n    while dec_num > 0: \n        res = digits[dec_num % base] + res\n        dec_num /= base\n    return res\n    \ndef is_valid_ip_address(ip): \n    '''\n    Given a string, check whether it is a valid IPv4 address or IPv6 address or neither.\n    '''\n    ip_split = ip.split('.')\n    if len(ip_split) == 4: \n        for i in xrange(4): \n            try: \n                if int(ip_split[i]) < 0 or int(ip_split[i]) > 255: \n                    return False\n            except: \n                return False\n        return True\n    ip_split = ip.split(':')\n    if len(ip_split) == 8: \n        for i in xrange(8): \n            try: \n                if int(ip_split[i], 16) < 0 or int(ip_split[i], 16) > 65535: \n                    return False\n            except: \n                return False\n        return True\n    return False\n    \ndef is_valid_ip_address2(ip): \n    '''\n    Given a string, check whether it is a valid IPv4 address or IPv6 address or neither.\n    '''\n    ip_split = ip.split('.')\n    if len(ip_split) == 4: \n        for i in xrange(4): \n            try: \n                if int(ip_split[i]) < 0 or int(ip_split[i]) > 255: \n                    return False\n            except: \n                return False\n        return True\n    ip_split = ip.split(':')\n    if len(ip_split) == 8: \n        for i in xrange(8): \n            try: \n                if int(ip_split[i], 16) < 0 or int(ip_split[i], 16) > 65535: \n                    return False\n            except: \n                return False\n        return True\n    return False\n    \ndef palindrome_permutation(str): \n    '''\n    Given a string, determine if it is a permutation of a palindrome. A palindrome is a word or phrase that is the same forwards and backwards. A permutation is a rearrangement of letters. The palindrome does not need to be limited to just dictionary words.\n    '''\n    str = str.lower()\n    char_map = [0]*26\n    for i in xrange(len(str)): \n        char_map[ord(str[i])-ord('a')] += 1\n    odd_count = 0\n    for i in xrange(26): \n        if char_map[i] % 2!= 0: \n            odd_count += 1\n        if odd_count > 1: \n            return False\n    return True\n    \ndef is_valid_parenthesis(s): \n    '''\n    Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n    The brackets must close in the correct order, \"()\" and \"()[]{}\" are all valid but \"(]\" and \"([)]\" are not.\n    '''\n    stack = []\n    for i in xrange(len(s)): \n        if s[i] in '([{': \n            stack.append(s[i])\n        elif s[i] == ')': \n            if not stack or stack.pop()!= '(': \n                return False\n        elif s[i] == '}': \n            if not stack or stack.pop()!= '{': \n                return False\n        elif s[i] == ']': \n            i"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # dp = [[0] * n for _ in range(n)]\n    dp = [ [0] * n for _ in range(n) ]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                dp[i][j] = 1\n            elif i == j - 1:\n                if str[i] == str[j]:\n                    dp[i][j] = 2\n                else:\n                    dp[i][j] = 1\n            else:\n                if str[i] == str[j] and dp[i+1][j-1] == 2:\n                    dp[i][j] = 3\n                elif str[i] == str[j]:\n                    dp[i][j] = 2 + dp[i+1][j-1]\n                else:\n                    dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # string=input(\"enter the string\")\n    list=[]\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            list.append(str[i:j+1])\n    palindromes=[]\n    for each in list:\n        if each==each[::-1]:\n            palindromes.append(each)\n    return max(palindromes, key=len)\nprint(lps('daman')"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def lps_rec(str,i,j):\n        # base case\n        if i > j:\n            return 0\n        if i == j:\n            return 1\n        if str[i] == str[j]:\n            return 2 + lps_rec(str,i+1,j-1)\n        else:\n            return max(lps_rec(str,i+1,j),lps_rec(str,i,j-1))\n    return lps_rec(str,0,len(str)-1)\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    n = len(str)\n    \n    # Create a 2D array to hold the LPS lengths\n    T = [[0 for j in range(n)] for i in range(n)]\n    \n    # Populate the array\n    for i in range(n):\n        T[i][i] = 1\n    for i in range(n-1):\n        T[i][i+1] = (str[i] == str[i+1]) and 1 or 0\n    \n    # Now run a DP algorithm to find the LPS lengths\n    for k in range(2,n+1):\n        for i in range(n-k+1):\n            j = i + k -1\n            if str[i] == str[j] and k>2:\n                T[i][j] = 1 + T[i+1][j-1]\n            else:\n                T[i][j] = 0\n    \n    # LPS has the maximum of all possible LPS lengths\n    m = 0\n    for i in range(n):\n        if T[0][i] > m:\n            m = T[0][i]\n    return m\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def is_palindrome(s):\n        '''\n        If a string is a palindrome, return the string\n        If not a palindrome, return the substring until the first non-alphanumeric character.\n        '''\n        def is_palindrome_recursive(s):\n            if not s:\n                return s\n            if s[0].isalnum():\n                return is_palindrome_recursive(s[1:]) + s[0]\n            else:\n                return is_palindrome_recursive(s[1:])\n        return is_palindrome_recursive(s)\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) == 0:\n        return 0\n    dp = [[0 for i in range(len(str))] for j in range(len(str))]\n    for i in range(len(str)):\n        dp[i][i] = 1\n    maxLength = 1\n    start = 0\n    for l in range(2, len(str)+1):\n        for i in range(len(str)-l+1):\n            end = i+l-1\n            if str[i] == str[end] and l == 2:\n                dp[i][end] = 2\n            elif str[i] == str[end]:\n                dp[i][end] = dp[i+1][end-1] + 2\n            else:\n                dp[i][end] = max(dp[i][end-1], dp[i+1][end])\n            if maxLength < dp[i][end]:\n                maxLength = dp[i][end]\n                start = i\n    return str[start:start+maxLength]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # dp[i][j] is true if the end of a sub-sequence with length i and start index j is a palindrome\n    dp = [[False for _ in range(n)] for _ in range(n)]\n    # longest palindrome with length 1\n    for i in range(n):\n        dp[i][i] = True\n    # longest palindrome with length 2\n    for i in range(n-1):\n        dp[i][i+1] = (str[i] == str[i+1])\n    # longest palindrome with length 3\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            dp[i][j] = dp[i + 1][j - 1] and (str[i] == str[j])\n    return max(map(lambda x: x * 2, [i for i, row in enumerate(dp) if True in row]))\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    l = [[0 for x in range(len(str))] for x in range(len(str))]\n    for i in range(len(str)-1, -1, -1):\n        for j in range(i, len(str)):\n            if i==j:\n                l[i][j] = 1\n            elif str[i]==str[j]:\n                l[i][j] = l[i+1][j-1]+2\n            else:\n                l[i][j] = max(l[i+1][j], l[i][j-1])\n    return l[0][len(str)-1]\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n < 1:\n        return False\n    return 1.0 + 1.0/n\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1.0\n    else:\n        return 1.0 / n + 1.0 / (n-1) + 1.0 / (n-2) + 1.0 / (n-3) + 1.0 / (n-4) + 1.0 / (n-5) + 1.0 / (n-6) + 1.0 / (n-7) + 1.0 / (n-8) + 1.0 / (n-9) + 1.0 / (n-10)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # your code here\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    total = 0\n    for i in range(1, n):\n        total += 1/i\n    return total\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n * (1 + (n-1) + (n-1)**2 + (n-1)**3 + (n-1)**4 + (n-1)**5 + (n-1)**6 + (n-1)**7)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    return 1 / n + harmonic_sum(n - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    #harmonic sum is 1 + 1/2 + 1/3 + 1/4 +...\n    #sum of harmonic series is 1 + 1/2 + 1/3 + 1/4 + 1/5 +...\n    #sum of harmonic series can be written as 1 + (1/2 + 1/3 + 1/4 +... + 1/n)\n    #add 1 to make it 1 + 1/2 + 1/3 + 1/4 +... + 1/n\n    #(1 + (1/2 + 1/3 + 1/4 +... + 1/n))*n = sum of harmonic series\n    #sum of harmonic series is 1 + 1/2 + 1/3 + 1/4 +... + 1/n\n    #(1/2 + 1/3 + 1/4 +... + 1/n)*n = sum of harmonic series\n    #(1/2 + 1/3 + 1/4 +... + 1/n)*n = sum of harmonic series\n    #(1/2 + 1/3 + 1/4 +... + 1/n)*n = (1 + (1/2 + 1/3 + 1/4 +... + 1/n)*n = (1 + (1/2 + 1/3 +... n)*n)\n    #(1/2 + 1/3 +... n)*n = 1 + (1/2 + 1/3 +... + n)*n\n    #(1/2 + 1/3 +... n)*n = (1 + n)*(1/2 + 1/3 +... + n)*n\n    #(1 + n)*(1/2 + 1/3 +... + n)*n = 1 + (1/2 + 1/3 +... + n)*(1 + n)*n\n    #(1 + n)*(1/2 + 1/3 +... + n)*n = 1 + (1/2 + 1/3 +... + n)*(1 + n)*(1 + n)*n\n    #(1/2 + 1/3 +... + n)*(1 + n)*(1/2 + 1/3 +... + n)*n = 1 + (1/2 + 1/3 +... + n)*(1 + n)*(1 + n)*(1 + n)*n\n    #(1/2 + 1/3 +... + n)*(1 + n)*(1/2 + 1/3 +... + n)*n = 1 + (1/2 + 1/3 +... + n)*(1 + n)*(1 + n)*(1 + n)*(1 + n)*n\n    #(1/2 + 1/3 +... + n)*(1 + n)*(1/2 + 1/3 +... + n)*n = (1/2 + 1/3 +... + n)*(1 + n)*(1/2 + 1/3 +... + n)*n\n    #(1/2 + 1/3 +... + n)*(1/2 + 1/3 +... + n)*n = 1/2 + 1/3 +... + n\n    #1/2 + 1/3 +... + n = 1/2 + 1/3 +... + n\n    #1/2 + 1/3 +... + n = 1 + 1/2 + 1/3 +... + 1/n\n    #1/2 + 1/3 +... + n = (1/2 + 1/3 +... + 1/n)*n\n    #(1/2 + 1/3 +... + 1/n)*n = 1/2 + 1/3 +... + n\n    #(1/2 + 1/3 +... + n)*n = 1/2 + 1/3 +... + n\n    #1/2 + 1/3 +... + n = 1 + 1/2 + 1/3 +... + 1/n\n    #(1/2 + 1/3 +... + 1/n)*n = 1/2 + 1/3 +... + n\n    #1/2 + 1/3 +... + n = (1/2 + 1/3 +... + 1/n)*n\n    #1/2 + 1/3 +... + n = 1 + 1/2 + 1/3 +... + 1/n\n    #1/2 + 1/3 +... + n = (1/2 + 1/3 +... + n)*n\n    #1/2 + 1/3 +... + n = 1/2 + 1/3 +... + n\n    #(1/2 + 1/3 +... + n)*n = 1/2 + 1/3 +... + n\n    #(1/2 + 1/3 +... + n)*n = 1/2 + 1/3 +... + n\n    #1/2 + 1/3 +... + n = (1/2 + 1/3 +... + n)*n\n    #1/2 + 1/3 +... + n = (1/2 + 1/3 +... + n)*n\n    #1/2 + 1/3 +... + n = 1 + 1/2 + 1/3 +... + 1/n\n    #(1/2 + 1/3 +... + 1/n)*n = 1/2 + 1/3 +... + n\n    #(1/2 + 1/3 +... + n)*n = 1/2 + 1/3 +... + n\n    #(1/2 + 1/3 +... + n)*n = 1/2 + 1/3 +... + n\n    #(1/2 + 1/3 +... + n)*n = 1/2 + 1/3 +... + n\n    #(1/2 + 1/3 +... + n)*n = (1/2 + 1/3 +... + n)*n\n    #(1/2 + 1/3 +... + n)*n = 1/2 + 1/3 +... + n\n    #(1/2 + 1/3 +... + n)*n = 1/2 + 1/3 +... + n\n    #(1/2 + 1/3 +... + n)*n = 1/2 + 1/3 +... + n\n    #(1/2 + 1/3 +... + n)*n = 1/2 + 1/3 +... + n\n    #(1/2 + 1/3 +... + n)*n = 1/2 + 1/3 +... + n\n    #(1/2 + 1/3 +... + n)*n = 1/2 + 1/3 +... + n\n    #(1/2 + 1/3 +... + n)*n = 1/2 + 1/3 +... + n\n    #(1/2 + 1/3 +... + n)*n = 1/2 + 1/3 +... + n\n    #(1/2 + 1/3 +... + n)*n = 1/2 + 1/3 +... + n\n    #(1/2 + 1/3 +... + n)*n = 1/2 + 1/3 +... + n\n    #(1/2 + 1/3 +... + n)*n = 1/2 + 1/3 +... + n\n    #(1/2 + 1/3 +... + n)*n = 1/2 + 1/3 +... + n\n    #(1/2 + 1/3 +... + n)*n = 1/2 + 1/3 +... + n\n    #(1/2 + 1/3 +... + n)*n = 1/2 + 1/3 +... + n\n    #(1/2 + 1/3 +... + n)*n = 1/2 + 1/3 +... + n\n    #(1/2 + 1/3 +... + n)*n = 1/2 + 1/3 +... + n\n    #(1/2 + 1/3 +... + n)*n = 1/2 + 1/3 +... + n\n    #(1/2 + 1/3 +... + n)*n = 1/2 + 1/3 +... + n\n    #(1/2 + 1/3 +... + n)*n = 1/2 + 1/3 +... + n\n    #(1/2 + 1/3 +... + n)*n = 1/2 + 1/3 +... + n\n    #(1/2 + 1/3 +... + n)*n = 1/2 + 1/3 +... + n\n    #(1/2 + 1/3 +... + n)*n = 1/2 + 1/3 +... + n\n    #(1/2 + 1/3 +... + n)*n = 1/2 + 1/3 +... + n\n    #(1/2 + 1/3 +... + n)*n = 1/2 + 1/3 "
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1 = sorted(array_nums1)\n    array_nums2 = sorted(array_nums2)\n    return [num for num in array_nums1 if num in array_nums2]\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    len1=len(array_nums1)\n    len2=len(array_nums2)\n    if len1 < len2:\n        intersection_array=[]\n        for i in range(len1):\n            for j in range(len2):\n                if array_nums1[i]==array_nums2[j]:\n                    if not array_nums1[i] in intersection_array:\n                        intersection_array.append(array_nums1[i])\n    if len1 > len2:\n        intersection_array=[]\n        for i in range(len2):\n            for j in range(len1):\n                if array_nums2[i]==array_nums1[j]:\n                    if not array_nums2[i] in intersection_array:\n                        intersection_array.append(array_nums2[i])\n    return intersection_array\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #create a new array that will hold the results\n    intersection = []\n    #iterate through each array\n    for i in range(len(array_nums1)):\n        #check if the current number is in the other array\n        if array_nums1[i] in array_nums2:\n            #append the number to the new array if it is\n            intersection.append(array_nums1[i])\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # 3 pointers\n    index_pointer1 = 0\n    index_pointer2 = 0\n    array_nums3 = []\n    \n    while index_pointer1 < len(array_nums1) and index_pointer2 < len(array_nums2):\n        if array_nums1[index_pointer1] == array_nums2[index_pointer2]:\n            array_nums3.append(array_nums1[index_pointer1])\n            index_pointer1 += 1\n            index_pointer2 += 1\n        elif array_nums1[index_pointer1] > array_nums2[index_pointer2]:\n            index_pointer2 += 1\n        else:\n            index_pointer1 += 1\n    return array_nums3\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for i in range(len(array_nums1)):\n        if array_nums1[i] in array_nums2:\n            intersection.append(array_nums1[i])\n            array_nums2.remove(array_nums1[i])\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1) & set(array_nums2))\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    nums1 = set(array_nums1)\n    nums2 = set(array_nums2)\n    intersection = [x for x in nums1 & nums2]\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    arr1_len = len(array_nums1)\n    arr2_len = len(array_nums2)\n    if arr1_len!= arr2_len:\n        return None\n    array_result = []\n    for num in array_nums1:\n        if num in array_nums2:\n            array_result.append(num)\n    return array_result\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    nums_intersect = []\n    for num1 in array_nums1:\n        for num2 in array_nums2:\n            if num1 == num2:\n                nums_intersect.append(num1)\n                break\n    return nums_intersect\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    nums1 = list(set(array_nums1))\n    nums2 = list(set(array_nums2))\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    if nums1 == nums2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    i = 0\n    for item in tup: \n        if x == item: \n            i += 1\n    return i\n    \nprint(count_X((1,2,2,3,4,4,5,6,7,7,8,9), 2))\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    lst = list(tup)\n    return lst.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tuple.count(tup, x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    #return tup.count(x)\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if element not in list:\n        return list\n    else:\n        insert_element_index = list.index(element)\n        return list[:insert_element_index] + [element] + list[insert_element_index:]\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result=[]\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result\n    \n    \n    "
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = [element]\n    for i in range(len(list)):\n        result.append(list[i])\n        result.append(element)\n    return result\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if not list:\n        return [element]\n    return [element] + insert_element(list[1:],list[0])\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Best Solution\n    # O(n) time, O(n) space\n    if list == []:\n        return [element]\n    else:\n        return [list[0]] + insert_element(list[1:],element)\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if element not in list:\n        list.insert(0,element)\n    else:\n        for i in range(len(list)):\n            if list[i] == element:\n                list.insert(i,element)\n                break\n    return list\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    re=numbers.real\n    im=numbers.imag\n    print \"The real part of the complex number is = \",re\n    print \"The imaginary part of the complex number is = \",im\n    if im==0:\n        print \"The polar form of the complex number is = \",re\n    else:\n        print \"The polar form of the complex number is = \",(re*cmath.sqrt(im),cmath.atan(im/re))\n    \n    print \"\"\n    \n    \ndef add(c1,c2):\n    '''\n    Write a python function to add two complex numbers.\n    '''\n    re=c1.real+c2.real\n    im=c1.imag+c2.imag\n    complex_number=complex(re,im)\n    convert(complex_number)\n    \n    \n    \ndef sub(c1,c2):\n    '''\n    Write a python function to subtract two complex numbers.\n    '''\n    re=c1.real-c2.real\n    im=c1.imag-c2.imag\n    complex_number=complex(re,im)\n    convert(complex_number)\n    \n    \n    \ndef mul(c1,c2):\n    '''\n    Write a python function to multiply two complex numbers.\n    '''\n    re=c1.real*c2.real-c1.imag*c2.imag\n    im=c1.real*c2.imag+c1.imag*c2.real\n    complex_number=complex(re,im)\n    convert(complex_number)\n    \n    \n    \ndef div(c1,c2):\n    '''\n    Write a python function to divide two complex numbers.\n    '''\n    re=c1.real*c2.real+c1.imag*c2.imag\n    im=c1.imag*c2.real-c1.real*c2.imag\n    complex_number=complex(re,im)\n    convert(complex_number)\n    \n    \n    \ndef mod(c1):\n    '''\n    Write a python function to compute the modulus of a complex number.\n    '''\n    re=c1.real**2+c1.imag**2\n    complex_number=complex(re)\n    convert(complex_number)\n    \n    \n    \ndef conj(c1):\n    '''\n    Write a python function to compute the conjugate of a complex number.\n    '''\n    re=c1.real\n    im=c1.imag*-1\n    complex_number=complex(re,im)\n    convert(complex_number)\n    \n    \n    \ndef power(c1,n):\n    '''\n    Write a python function to compute the power of a complex number.\n    '''\n    if n==0:\n        complex_number=1\n    else:\n        if n%2==0:\n            complex_number=power(c1,n/2)*power(c1,n/2)\n        else:\n            complex_number=power(c1,(n-1)/2)*power(c1,(n-1)/2)*c1\n    convert(complex_number)\n    \n    \n    \ndef angle(c1):\n    '''\n    Write a python function to compute the phase of a complex number.\n    '''\n    complex_number=complex(c1.real,c1.imag)\n    convert(complex_number)\n    \n    \n    \ndef sin(c1):\n    '''\n    Write a python function to compute the sine of a complex number.\n    '''\n    complex_number=complex(c1.real,c1.imag)\n    convert(complex_number)\n    \n    \n    \ndef cos(c1):\n    '''\n    Write a python function to compute the cosine of a complex number.\n    '''\n    complex_number=complex(c1.real,c1.imag)\n    convert(complex_number)\n    \n    \n    \ndef exp(c1):\n    '''\n    Write a python function to compute the exponential of a complex number.\n    '''\n    complex_number=cmath.exp(c1)\n    convert(complex_number)\n    \n    \n    \ndef magnitude(c1):\n    '''\n    Write a python function to compute the magnitude of a complex number.\n    '''\n    complex_number=complex(c1.real,c1.imag)\n    convert(complex_number)\n    \n    \n    \ndef conjugate(c1):\n    '''\n    Write a python function to compute the conjugate of a complex number.\n    '''\n    complex_number=complex(c1.real,c1.imag*-1)\n    convert(complex_number)\n    \n    \n    \ndef polar(c1):\n    '''\n    Write a python function to compute the polar form of a complex number.\n    '''\n    complex_number=complex(c1.real,c1.imag)\n    convert(complex_number)\n    \n    \n    \ndef rect(c1):\n    '''\n    Write a python function to compute the rectangular form of a complex number.\n    '''\n    complex_number=complex(c1.real**2,c1.imag**2)\n    convert(complex_number)\n    \n    \n    \ndef absolute(c1):\n    '''\n    Write a python function to compute the absolute value of a complex number.\n    '''\n    complex_number=complex(c1.real,c1.imag)\n    convert(complex_number)\n    \n    \n    \ndef square(c1):\n    '''\n    Write a python function to compute the square of a complex number.\n    '''\n    complex_number=complex(c1.real**2+c1.imag**2)\n    convert(complex_number)\n    \n    \n    \ndef power(c1,n):\n    '''\n    Write a python function to compute the power of a complex number.\n    '''\n    if n==0:\n        complex_number=1\n    else:\n        if n%2==0:\n            complex_number=power(c1,n/2)*power(c1,n/2)\n        else:\n            complex_number=power(c1,(n-1)/2)*power(c1,(n-1)/2)*c1\n    convert(complex_number)\n    \n    \n    \ndef rect(c1,n):\n    '''\n    Write a python function to compute the rectangular form of a complex number.\n    '''\n    if n==0:\n        complex_number=1\n    else:\n        if n%2==0:\n            complex_number=rect(c1,n/2)*rect(c1,n/2)\n        else:\n            complex_number=rect(c1,(n-1)/2)*rect(c1,(n-1)/2)*c1\n    convert(complex_number)\n    \n    \n    \ndef absolute(c1):\n    '''\n    Write a python function to compute the absolute value of a complex number.\n    '''\n    complex_number=complex(c1.real,c1.imag)\n    convert(complex_number)\n    \n    \n    \ndef quadratic_eq(c1):\n    '''\n    Write a python function to compute the quadratic equation.\n    '''\n    a=float(c1[0])\n    b=float(c1[1])\n    c=float(c1[2])\n    d=b**2-4*a*c\n    if d<0:\n        complex_number=complex(0)\n    elif d==0:\n        complex_number=complex(-(b/(2*a)))\n    else:\n        complex_number=complex((-b+(cmath.sqrt(d))/(2*a)),((-b-(cmath.sqrt(d))/(2*a))))\n    convert(complex_number)\n    \n    \n    \ndef complex_exponent(c1,n):\n    '''\n    Write a python function to compute the power of a complex number.\n    '''\n    if n==0:\n        complex_number=1\n    else:\n        if n%2==0:\n            complex_number=complex_exponent(c1,n/2)*complex_ex"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    c_real=numbers.real\n    c_img=numbers.imag\n    if c_img==0:\n        print(c_real)\n    else:\n        polar=cmath.polar(numbers)\n        print(\"polar value is:\",polar)\n        \n        \n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    global x, y\n    x = []\n    y = []\n    for num in numbers:\n        complexNum = complex(num)\n        r, theta = cmath.polar(complexNum)\n        x.append(r)\n        y.append(theta)\n    return x, y\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #print (numbers)\n    r = abs(numbers)\n    theta = cmath.phase(numbers)\n    return r, theta\n    "
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def polar_coord(complex_num):\n        a = complex_num.real\n        b = complex_num.imag\n        r = round(cmath.sqrt(a**2 + b**2),4)\n        p = round(cmath.atan(b/a),4)\n        print \"The polar coordinates of the complex number is: r={0} and p={1}\".format(r,p)\n    print \"Enter the complex numbers: \"\n    numbers = raw_input()\n    num_list = numbers.split()\n    for i in range(len(num_list)):\n        num_list[i] = float(num_list[i])\n    for i in range(len(num_list)):\n        polar_coord(num_list[i])\n    print \"Enter a complex number to convert to polar coordinates: \"\n    num = float(raw_input())\n    polar_coord(num)\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar=[]\n    for i in numbers:\n        r=abs(i)\n        theta=cmath.phase(i)\n        polar.append([r,theta])\n    return polar\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    i = cmath.sqrt(-1)\n    real = numbers.real\n    imag = numbers.imag\n    if numbers.imag == 0:\n        return(complex(0,0))\n    if real == 0:\n        return(complex(abs(imag),cmath.phase(numbers)))\n    if imag < 0:\n        return(complex(abs(real),-cmath.phase(numbers)))\n    if real > 0:\n        return(complex(real,cmath.phase(numbers)))\ndef f(z):\n    \"\"\"\n    The function f is defined by z=z**2+1 and z=1+z**2.\n    \"\"\"\n    return z**2+1, 1+z**2\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r = []\n    for i in numbers:\n        x = i.real\n        y = i.imag\n        r.append(cmath.polar(complex(x,y)))\n    return r\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #import cmath\n    try:\n        if type(numbers) is complex:\n            print(\"Complex number: \",numbers)\n            print(\"Polar Co-ordinates: \",cmath.polar(numbers))\n        else:\n            print(\"Invalid Input: \",numbers)\n    except Exception as e:\n        print(e)\n    return\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    #numbers = input(\"Please enter a complex number: \")\n    \n    polar_coordinates = []\n    \n    list_numbers = numbers.split('+')\n    \n    for i in list_numbers:\n        \n        polar_coordinates.append(cmath.polar(complex(i)))\n    \n    \n    print(polar_coordinates)\n    \n    return polar_coordinates\n    \n    \n    \n    \ndef convert_polar(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    #numbers = input(\"Please enter a complex number: \")\n    \n    polar_coordinates = []\n    \n    list_numbers = numbers.split('+')\n    \n    for i in list_numbers:\n        \n        polar_coordinates.append(cmath.polar(complex(i)))\n    \n    \n    print(polar_coordinates)\n    \n    return polar_coordinates\n    \n    \n    \n    \ndef add(num1,num2):    \n    '''\n    Write a python function to add two complex numbers.\n    '''\n    \n    #num1 = input(\"Please enter the first complex number: \")\n    #num2 = input(\"Please enter the second complex number: \")\n    \n    num1 = num1.split('+')\n    num2 = num2.split('+')\n    \n    total = []\n    \n    for i in range(len(num1)):\n        \n        total.append(complex(num1[i])+complex(num2[i]))\n        \n    print(total)\n    \n    return total\n    \n    \n    \ndef subtract(num1,num2):    \n    '''\n    Write a python function to subtract two complex numbers.\n    '''\n    \n    #num1 = input(\"Please enter the first complex number: \")\n    #num2 = input(\"Please enter the second complex number: \")\n    \n    num1 = num1.split('+')\n    num2 = num2.split('+')\n    \n    total = []\n    \n    for i in range(len(num1)):\n        \n        total.append(complex(num1[i])-complex(num2[i]))\n        \n    print(total)\n    \n    return total\n    \n    \n    \ndef multiply(num1,num2):    \n    '''\n    Write a python function to multiply two complex numbers.\n    '''\n    \n    #num1 = input(\"Please enter the first complex number: \")\n    #num2 = input(\"Please enter the second complex number: \")\n    \n    num1 = num1.split('+')\n    num2 = num2.split('+')\n    \n    total = []\n    \n    for i in range(len(num1)):\n        \n        total.append(complex(num1[i])*complex(num2[i]))\n        \n    print(total)\n    \n    return total\n    \n    \n    \ndef divide(num1,num2):    \n    '''\n    Write a python function to divide two complex numbers.\n    '''\n    \n    #num1 = input(\"Please enter the first complex number: \")\n    #num2 = input(\"Please enter the second complex number: \")\n    \n    num1 = num1.split('+')\n    num2 = num2.split('+')\n    \n    total = []\n    \n    for i in range(len(num1)):\n        \n        total.append(complex(num1[i])/complex(num2[i]))\n        \n    print(total)\n    \n    return total\n    \n    \n    \ndef modulus(num1):    \n    '''\n    Write a python function to calculate the modulus of a complex number.\n    '''\n    \n    #num1 = input(\"Please enter the complex number: \")\n    \n    num1 = num1.split('+')\n    \n    total = []\n    \n    for i in range(len(num1)):\n        \n        total.append(abs(complex(num1[i])))\n        \n    print(total)\n    \n    return total\n    \n    \n    \ndef argument(num1):    \n    '''\n    Write a python function to calculate the argument of a complex number.\n    '''\n    \n    #num1 = input(\"Please enter the complex number: \")\n    \n    num1 = num1.split('+')\n    \n    total = []\n    \n    for i in range(len(num1)):\n        \n        total.append(cmath.phase(complex(num1[i])))\n        \n    print(total)\n    \n    return total\n    \n    \n    \ndef conjugate(num1):    \n    '''\n    Write a python function to calculate the conjugate of a complex number.\n    '''\n    \n    #num1 = input(\"Please enter the complex number: \")\n    \n    num1 = num1.split('+')\n    \n    total = []\n    \n    for i in range(len(num1)):\n        \n        total.append(complex(num1[i]).conjugate())\n        \n    print(total)\n    \n    return total\n    \n    \n    \ndef exp(num1,n):\n    '''\n    Write a python function to calculate nth power of a complex number.\n    '''\n    \n    #num1 = input(\"Please enter the complex number: \")\n    #n = input(\"Please enter the power you want to raise: \")\n    \n    num1 = num1.split('+')\n    \n    total = []\n    \n    for i in range(len(num1)):\n        \n        total.append(complex(num1[i])**n)\n        \n    print(total)\n    \n    return total\n    \n    \n    \n    \ndef polar_to_complex(num1):    \n    '''\n    Write a python function to convert polar coordinates to complex number.\n    '''\n    \n    #num1 = input(\"Please enter the complex number: \")\n    \n    num1 = num1.split('+')\n    \n    total = []\n    \n    for i in range(len(num1)):\n        \n        total.append(complex(num1[i])*cmath.exp(complex(0,1)*float(num1[i][1])))\n        \n    print(total)\n    \n    return total\n    \n    \n    \ndef complex_to_polar(num1):    \n    '''\n    Write a python function to convert complex number to polar coordinates.\n    '''\n    \n    #num1 = input(\"Please enter the complex number: \")\n    \n    num1 = num1.split('+')\n    \n    total = []\n    \n    for i in range(len(num1)):\n        \n        total.append(cmath.polar(complex(num1[i])))\n        \n    print(total)\n    \n    return total\n    \n    \n    \ndef phase_conjugate(num1):    \n    '''\n    Write a python function to calculate the phase conjugate of a complex number.\n    '''\n    \n    #num1 = input(\"Please enter the complex number: \")\n    \n    num1 = num1.split('+')\n    \n    total = []\n    \n    for i in range(len(num1)):\n        \n        total.append(complex(num1[i]).conjugate())\n        \n    print(total)\n    \n    return total\n    \n    \n    \n    \ndef fft(num1):    \n    '''\n    Write a python function to calculate the discrete Fourier transform of a complex number.\n    '''\n    \n    #num1 = input(\"Please enter the complex number: \")\n    \n    num1 = num1.split('+')\n    \n    total = []\n    \n    for i in range(len(num1)):\n        \n        total.append(complex(num1[i])*cmath.exp(complex(0,-1)*cmath.pi*i/len(num1)))\n        \n    print(total)\n    \n    return total\n    \n    \n    \ndef ifft(num1):    \n    '''\n    Write a python function to calculate the inverse discrete Fourier transform of a complex number.\n    '''\n    \n    #num1 = input("
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) is int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([n for n in list1 if isinstance(n, int)])\n    \n    \ndef count_floating(list1):\n    '''\n    Write a python function that returns the number of floating point elements in a given list.\n    '''\n    return len([n for n in list1 if isinstance(n, float)])\n    \n    \ndef count_string(list1):\n    '''\n    Write a python function that returns the number of string elements in a given list.\n    '''\n    return len([n for n in list1 if isinstance(n, str)])\n    \n    \ndef count_other(list1):\n    '''\n    Write a python function that returns the number of other types (e.g. boolean, etc) in a given list.\n    '''\n    return len([n for n in list1 if isinstance(n, object)])\n    \n    \ndef count_duplicates(list1):\n    '''\n    Write a python function that returns the number of duplicates in a given list.\n    '''\n    return len([n for n in list1 if list1.count(n)>1])\n    \n    \ndef count_uniques(list1):\n    '''\n    Write a python function that returns the number of unique elements in a given list.\n    '''\n    return len(set(list1))\n    \n    \ndef swap_first_last(list1):\n    '''\n    Write a python function that returns a list in which the first element is now the last, and the last element is now the first.\n    '''\n    return list1[-1:] + list1[1:-1] + list1[:1]\n    \n    \ndef reverse_list(list1):\n    '''\n    Write a python function that returns a list in which the elements are reversed.\n    '''\n    return list1[::-1]\n    \n    \ndef shuffle_list(list1):\n    '''\n    Write a python function that returns a shuffled version of a given list.\n    '''\n    import random\n    l = list(list1)\n    random.shuffle(l)\n    return l\n    \n    \ndef longest_word(list1):\n    '''\n    Write a python function that returns the longest word in a given list of words.\n    '''\n    return max(list1, key=len)\n    \n    \ndef smallest_word(list1):\n    '''\n    Write a python function that returns the smallest word in a given list of words.\n    '''\n    return min(list1, key=len)\n    \n    \ndef longest_n_gram(list1, n):\n    '''\n    Write a python function that returns the longest n-gram in a given list of words.\n    '''\n    n_grams = []\n    for i in range(0, len(list1) - n + 1):\n        n_grams.append(list1[i:i+n])\n    return max(n_grams, key=len)\n    \n    \ndef shortest_n_gram(list1, n):\n    '''\n    Write a python function that returns the shortest n-gram in a given list of words.\n    '''\n    n_grams = []\n    for i in range(0, len(list1) - n + 1):\n        n_grams.append(list1[i:i+n])\n    return min(n_grams, key=len)\n    \n    \ndef unique_list(list1):\n    '''\n    Write a python function that returns a list that contains only the unique elements from a given list.\n    '''\n    return list(set(list1))\n    \n    \ndef intersection_list(list1, list2):\n    '''\n    Write a python function that returns a list that contains all elements of both the given lists.\n    '''\n    return [n for n in list1 if n in list2]\n    \n    \ndef union_list(list1, list2):\n    '''\n    Write a python function that returns a list that contains all elements of either the given lists.\n    '''\n    return list(set(list1 + list2))\n    \n    \ndef subset_list(list1, list2):\n    '''\n    Write a python function that returns a boolean that indicates whether list2 is a subset of list1.\n    '''\n    return len(set(list1) & set(list2)) == len(set(list1))\n    \n    \ndef substrings(list1, n):\n    '''\n    Write a python function that returns a list of all substrings of a given string.\n    '''\n    substrings_list = []\n    for i in range(0, len(list1) - n + 1):\n        substrings_list.append(list1[i:i+n])\n    return substrings_list\n    \n    \ndef get_statistics(list1):\n    '''\n    Write a python function that returns a dictionary that contains the number of elements in the list, the number of integer elements, the number of floating point elements, the number of string elements, and the number of other types (e.g. boolean, etc).\n    '''\n    d = {'count_integer':count_integer(list1),\n         'count_floating':count_floating(list1),\n         'count_string':count_string(list1),\n         'count_other':count_other(list1),\n         'count_duplicates':count_duplicates(list1),\n         'count_uniques':count_uniques(list1),\n        'swap_first_last':swap_first_last(list1),\n        'reverse_list':reverse_list(list1),\n         'longest_word':longest_word(list1),\n        'smallest_word':smallest_word(list1),\n         'longest_n_gram':longest_n_gram(list1, 2),\n        'shortest_n_gram':shortest_n_gram(list1, 2),\n         'unique_list':unique_list(list1),\n         'intersection_list':intersection_list(list1, [2, 3, 4]),\n         'union_list':union_list(list1, [2, 3, 4]),\n        'subset_list':subset_list([1, 2, 3, 4, 5], [2, 3, 4]),\n        'substrings':substrings(['apples', 'oranges', 'bananas', 'lemon', 'coconut', 'kiwi', 'pumpkin', 'grapefruit', 'pineapple', 'peach', 'watermelon', 'papaya', 'apple', 'orange', 'banana', 'lemon', 'coconut', 'kiwi', 'pumpkin', 'grapefruit', 'pineapple', 'peach', 'watermelon', 'papaya'], 3),\n        }\n    return d\n    \n    \ndef main():\n    '''\n    Write a python function that tests the given function and prints the output.\n    '''\n    print(count_integer([1, 2, 3, 4, 5, 6]))\n    print(count_floating([1, 2, 3.1, 4.5, 6.7, 7.2, 8.3, 9.4]))\n    print(count_string(['one', 'two', 'three', 'four', 'five','six','seven', 'eight']))\n    print(count_other([True, False, 1, 2, 3, 4, 5,'six','seven', 8, 9, 'zero']))\n    print(count_duplicates([1, 2, 3, 4, 4, 4, 5, 'two', 'three', 'one','six']))\n    print(count_uniques([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n    print(swap_first_last(['seven', 'eleven', 'twelve', 'thirteen', 'fourteen']))\n    print(reverse_list(['one', 'two', 'three', 'four', 'five','six']))\n    print(longest_word(['alpha', 'beta', 'gamma', 'theta', 'omega', 'zeta']))\n    print(smallest_word(['alpha', 'beta', 'gamma', 'theta', 'omega', 'zeta']))\n    print(longest_n_gram(['alpha', 'bet"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n    \ndef sum_list_values(list1):\n    '''\n    Write a python function that returns the sum of all the values in a given list.\n    '''\n    sum_values = 0\n    for i in list1:\n        sum_values += i\n    return sum_values\n    \ndef sum_list_values2(list1):\n    '''\n    Write a python function that returns the sum of all the values in a given list.\n    '''\n    sum_values = 0\n    for i in list1:\n        sum_values += i\n    return sum_values\n    \ndef find_sum_of_list_values(list1):\n    '''\n    Write a python function that returns the sum of all the values in a given list.\n    '''\n    sum_values = 0\n    for i in list1:\n        sum_values += i\n    return sum_values\n    \ndef find_sum_of_list_values2(list1):\n    '''\n    Write a python function that returns the sum of all the values in a given list.\n    '''\n    sum_values = 0\n    for i in list1:\n        sum_values += i\n    return sum_values\n    \ndef find_product_of_list_values(list1):\n    '''\n    Write a python function that returns the product of all the values in a given list.\n    '''\n    product = 1\n    for i in list1:\n        product *= i\n    return product\n    \ndef find_product_of_list_values2(list1):\n    '''\n    Write a python function that returns the product of all the values in a given list.\n    '''\n    product = 1\n    for i in list1:\n        product *= i\n    return product\n    \ndef find_average_of_list_values(list1):\n    '''\n    Write a python function that returns the average of all the values in a given list.\n    '''\n    average = 0\n    for i in list1:\n        average += i\n    average /= len(list1)\n    return average\n    \ndef find_average_of_list_values2(list1):\n    '''\n    Write a python function that returns the average of all the values in a given list.\n    '''\n    average = 0\n    for i in list1:\n        average += i\n    average /= len(list1)\n    return average\n    \ndef find_maximum_of_list_values(list1):\n    '''\n    Write a python function that returns the maximum value of all the values in a given list.\n    '''\n    maximum = 0\n    for i in list1:\n        if i > maximum:\n            maximum = i\n    return maximum\n    \ndef find_maximum_of_list_values2(list1):\n    '''\n    Write a python function that returns the maximum value of all the values in a given list.\n    '''\n    maximum = 0\n    for i in list1:\n        if i > maximum:\n            maximum = i\n    return maximum\n    \ndef find_minimum_of_list_values(list1):\n    '''\n    Write a python function that returns the minimum value of all the values in a given list.\n    '''\n    minimum = list1[0]\n    for i in list1:\n        if i < minimum:\n            minimum = i\n    return minimum\n    \ndef find_minimum_of_list_values2(list1):\n    '''\n    Write a python function that returns the minimum value of all the values in a given list.\n    '''\n    minimum = list1[0]\n    for i in list1:\n        if i < minimum:\n            minimum = i\n    return minimum\n    \ndef find_smallest_difference_between_lists(list1, list2):\n    '''\n    Write a python function that returns the smallest difference between two lists of numbers.\n    '''\n    smallest_diff = list1[0]\n    for i in list1:\n        for j in list2:\n            diff = i - j\n            if diff < smallest_diff:\n                smallest_diff = diff\n    return smallest_diff\n    \ndef find_smallest_difference_between_lists2(list1, list2):\n    '''\n    Write a python function that returns the smallest difference between two lists of numbers.\n    '''\n    smallest_diff = list1[0]\n    for i in list1:\n        for j in list2:\n            diff = i - j\n            if diff < smallest_diff:\n                smallest_diff = diff\n    return smallest_diff\n    \ndef find_difference_of_list_values(list1, list2):\n    '''\n    Write a python function that returns the difference of all the values in a given list compared to the values in a second list.\n    '''\n    diff = []\n    for i in list1:\n        diff.append(i - list2[list1.index(i)])\n    return diff\n    \ndef find_difference_of_list_values2(list1, list2):\n    '''\n    Write a python function that returns the difference of all the values in a given list compared to the values in a second list.\n    '''\n    diff = []\n    for i in list1:\n        diff.append(i - list2[list1.index(i)])\n    return diff\n    \ndef find_difference_of_list_values3(list1, list2):\n    '''\n    Write a python function that returns the difference of all the values in a given list compared to the values in a second list.\n    '''\n    diff = []\n    for i in list1:\n        diff.append(i - list2[list1.index(i)])\n    return diff\n    \ndef find_difference_of_list_values4(list1, list2):\n    '''\n    Write a python function that returns the difference of all the values in a given list compared to the values in a second list.\n    '''\n    diff = []\n    for i in list1:\n        diff.append(i - list2[list1.index(i)])\n    return diff\n    \ndef find_difference_of_list_values5(list1, list2):\n    '''\n    Write a python function that returns the difference of all the values in a given list compared to the values in a second list.\n    '''\n    diff = []\n    for i in list1:\n        diff.append(i - list2[list1.index(i)])\n    return diff\n    \ndef find_difference_of_list_values6(list1, list2):\n    '''\n    Write a python function that returns the difference of all the values in a given list compared to the values in a second list.\n    '''\n    diff = []\n    for i in list1:\n        diff.append(i - list2[list1.index(i)])\n    return diff\n    \ndef find_difference_of_list_values7(list1, list2):\n    '''\n    Write a python function that returns the difference of all the values in a given list compared to the values in a second list.\n    '''\n    diff = []\n    for i in list1:\n        diff.append(i - list2[list1.index(i)])\n    return diff\n    \ndef find_difference_of_list_values8(list1, list2):\n    '''\n    Write a python function that returns the difference of all the values in a given list compared to the values in a second list.\n    '''\n    diff = []\n    for i in list1:\n        diff.append(i - list2[list1.index(i)])\n    return diff\n    \ndef find_difference_of_list_values9(list1, list2):\n    '''\n    Write a python function that returns the difference of all the values in a given list compared to the values in a second list.\n    '''\n    diff = []\n    for i in list1:\n        diff.append(i - list2[list1.index(i)])\n    return diff\n    \ndef find_difference_of_list_values10(list1, list2):\n    '''\n    Write a python function that returns the difference of all the values in a given list compared to the values in a second list.\n    '''\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    \n    counter = 0\n    for item in list1:\n        if type(item) == int:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([x for x in list1 if type(x) is int])\n    \ndef find_min(list1):\n    '''\n    Write a python function that returns the smallest element in a given list.\n    '''\n    return min(list1)\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for elem in list1:\n        if isinstance(elem,int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    # return len([i for i in list1 if type(i)==int])\n    \n    #solution 3\n    return sum(i for i in list1 if type(i)==int)\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    n = 0\n    for i in list1:\n        if isinstance(i, int):\n            n += 1\n    return n\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    number_of_integer_elements = 0\n    for element in list1:\n        if isinstance(element, int):\n            number_of_integer_elements += 1\n    return number_of_integer_elements\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    list2 = [i for i in list1 if i % 1 == 0]\n    return len(list2)\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if l == []:\n        return []\n    elif len(l) == 1:\n        return [tuple([l[0]] * n)]\n    else:\n        return [tuple(x) for x in list(combinations_with_replacement(l, n))]\n    "
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    res = []\n    for i in range(len(l) + 1 - n):\n        res.extend(list(combinations_with_replacement(l, i)))\n    return res\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(map(lambda x: tuple(x), combinations_with_replacement(l, n)))\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = sorted(l)\n    lst = []\n    for i in range(1, n + 1):\n        lst += [list(comb) for comb in combinations_with_replacement(l, i)]\n    return lst\ndef permutations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all permutations of the elements of the list and returns a list with a tuple for each permutation.\n    '''\n    l = sorted(l)\n    lst = []\n    for i in range(1, n + 1):\n        lst += [list(perm) for perm in combinations_with_replacement(l, i)]\n    return lst\ndef permutations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all permutations of the elements of the list and returns a list with a tuple for each permutation.\n    '''\n    l = sorted(l)\n    lst = []\n    for i in range(1, n + 1):\n        lst += [list(perm) for perm in combinations_with_replacement(l, i)]\n    return lst\ndef permutations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all permutations of the elements of the list and returns a list with a tuple for each permutation.\n    '''\n    l = sorted(l)\n    lst = []\n    for i in range(1, n + 1):\n        lst += [list(perm) for perm in combinations_with_replacement(l, i)]\n    return lst\ndef permutations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all permutations of the elements of the list and returns a list with a tuple for each permutation.\n    '''\n    l = sorted(l)\n    lst = []\n    for i in range(1, n + 1):\n        lst += [list(perm) for perm in combinations_with_replacement(l, i)]\n    return lst\ndef permutations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all permutations of the elements of the list and returns a list with a tuple for each permutation.\n    '''\n    l = sorted(l)\n    lst = []\n    for i in range(1, n + 1):\n        lst += [list(perm) for perm in combinations_with_replacement(l, i)]\n    return lst\ndef permutations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all permutations of the elements of the list and returns a list with a tuple for each permutation.\n    '''\n    l = sorted(l)\n    lst = []\n    for i in range(1, n + 1):\n        lst += [list(perm) for perm in combinations_with_replacement(l, i)]\n    return lst\ndef permutations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all permutations of the elements of the list and returns a list with a tuple for each permutation.\n    '''\n    l = sorted(l)\n    lst = []\n    for i in range(1, n + 1):\n        lst += [list(perm) for perm in combinations_with_replacement(l, i)]\n    return lst\ndef permutations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all permutations of the elements of the list and returns a list with a tuple for each permutation.\n    '''\n    l = sorted(l)\n    lst = []\n    for i in range(1, n + 1):\n        lst += [list(perm) for perm in combinations_with_replacement(l, i)]\n    return lst\ndef permutations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all permutations of the elements of the list and returns a list with a tuple for each permutation.\n    '''\n    l = sorted(l)\n    lst = []\n    for i in range(1, n + 1):\n        lst += [list(perm) for perm in combinations_with_replacement(l, i)]\n    return lst\ndef permutations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all permutations of the elements of the list and returns a list with a tuple for each permutation.\n    '''\n    l = sorted(l)\n    lst = []\n    for i in range(1, n + 1):\n        lst += [list(perm) for perm in combinations_with_replacement(l, i)]\n    return lst\ndef permutations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all permutations of the elements of the list and returns a list with a tuple for each permutation.\n    '''\n    l = sorted(l)\n    lst = []\n    for i in range(1, n + 1):\n        lst += [list(perm) for perm in combinations_with_replacement(l, i)]\n    return lst\ndef permutations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all permutations of the elements of the list and returns a list with a tuple for each permutation.\n    '''\n    l = sorted(l)\n    lst = []\n    for i in range(1, n + 1):\n        lst += [list(perm) for perm in combinations_with_replacement(l, i)]\n    return lst\ndef permutations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all permutations of the elements of the list and returns a list with a tuple for each permutation.\n    '''\n    l = sorted(l)\n    lst = []\n    for i in range(1, n + 1):\n        lst += [list(perm) for perm in combinations_with_replacement(l, i)]\n    return lst\ndef permutations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all permutations of the elements of the list and returns a list with a tuple for each permutation.\n    '''\n    l = sorted(l)\n    lst = []\n    for i in range(1, n + 1):\n        lst += [list(perm) for perm in combinations_with_replacement(l, i)]\n    return lst\ndef permutations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all permutations of the elements of the list and returns a list with a tuple for each permutation.\n    '''\n    l = sorted(l)\n    lst = []\n    for i in range(1, n + 1):\n        lst += [list(perm) for perm in combinations_with_replacement(l, i)]\n    return lst\ndef permutations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all permutations of the elements of the list and returns a list with a tuple for each permutation.\n    '''\n    l = sorted(l)\n    lst = []\n    for i in range(1, n + 1):\n        lst += [list(perm) for perm in combinations_with_replacement(l, i)]\n    return lst\ndef permutations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all permutations of the elements of the list and returns a list with a tuple for each permutation.\n    '''\n    l = sorted(l)\n    lst = []\n    for i in range(1, n + 1):\n        lst += [list(perm) for perm in combinations_with_replacement(l, i)]\n    return lst"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [(i,j) for i in l for j in combinations_with_replacement(l,n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l,n))\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    list_n = []\n    for i in range(len(l)):\n        for x in combinations_with_replacement(l,n):\n            list_n.append(x)\n    return list_n\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # empty array of all primes less than n\n    arr = [True for i in range(n)]\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if type(n)!= int:\n        return 'Only accepts positive integers'\n    if n < 2:\n        return 0\n    primes = [True] * (n + 1)\n    primes[0] = False\n    primes[1] = False\n    count = 0\n    for i in range(2, n):\n        if primes[i]:\n            count += 1\n            j = i**2\n            while j <= n:\n                primes[j] = False\n                j += i\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    num_Prime = 0\n    for i in range(2, n):\n        prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                prime = False\n        if prime:\n            num_Prime += 1\n    return num_Prime\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = [2]\n    for i in range(3, n+1):\n        flag = True\n        for j in primes:\n            if i % j == 0:\n                flag = False\n                break\n        if flag:\n            primes.append(i)\n    return len(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n % 2 == 0 or n % 3 == 0:\n        return 0\n    else:\n        for i in range(5, n + 1, 2):\n            if i % 3!= 0 and i % 5!= 0:\n                return count_Primes_nums(i) + 1\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 0:\n        raise ValueError('input a non-negative integer')\n    if n == 0:\n        return 0\n    count = 1\n    for i in range(2, n+1):\n        count += isPrime(i)\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    return len([i for i in range(n) if is_Prime(i)])\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    else:\n        count = 1\n        for x in range(2, n):\n            if n % x == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n % 2 == 0:\n        n = n + 1\n    for i in range(3, n, 2):\n        if i*i > n:\n            return i-1\n            break\n        elif n % i == 0:\n            break\n    return i-1\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    nums = range(2, n)\n    for i in range(2, n):\n        if i in nums:\n            for j in range(i*2, n, i):\n                nums[j] = False\n    return sum(nums)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    sum_tup = test_tup1 + test_tup2\n    max_tup = max(sum_tup)\n    return max_tup\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1[0], test_tup2[0]), max(test_tup1[1], test_tup2[1])\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    num_list = []\n    for i in range(0, len(test_tup1)):\n        num_list.append(test_tup1[i]+test_tup2[i])\n    num_list.sort()\n    return num_list[-2]\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        temp = test_tup1\n        test_tup1 = test_tup2\n        test_tup2 = temp\n    max_elem1 = 0\n    max_elem2 = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max_elem1:\n            max_elem1 = test_tup1[i]\n    for i in range(len(test_tup2)):\n        if test_tup2[i] > max_elem2:\n            max_elem2 = test_tup2[i]\n    if max_elem1 > max_elem2:\n        return max_elem1\n    else:\n        return max_elem2\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1, test_tup2)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    print \"Tuple 1:\", test_tup1\n    print \"Tuple 2:\", test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return max(test_tup1)\n    else:\n        return max(test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tup1 = list(test_tup1)\n    tup2 = list(test_tup2)\n    return max(tup1+tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tuple1 = (test_tup1[0], test_tup1[1], test_tup1[2], test_tup1[3], test_tup1[4])\n    tuple2 = (test_tup2[0], test_tup2[1], test_tup2[2], test_tup2[3], test_tup2[4])\n    max_tuple = max(tuple1, tuple2)\n    return max_tuple\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    a = max(test_tup1)\n    b = max(test_tup2)\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = get_primes()\n    for i in range(len(primes), n):\n        is_prime = True\n        a = randint(1, primes[-1])\n        for j in range(len(primes)):\n            if pow(a, primes[j], primes[-1]) == 1:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(a)\n    return primes[-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    else:\n        d = int(math.floor(math.sqrt(n)))\n        s = 0\n        r = d\n        while r % 2 == 0:\n            r /= 2\n            s += 1\n        t = (r*r - n) / (2*r)\n        y = pow(t, r, n)\n        if y == 1:\n            return pow(t, 2**s, n)\n        else:\n            return newman_prime(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    else:\n        i = 1\n        while not is_prime(i):\n            i += 1\n        return i\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def isprime(n):\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if isprime(n):\n        return n\n    m = 2\n    while True:\n        if isprime(m):\n            k = 0\n            while pow(m, k, n) == 1:\n                k += 1\n            return pow(m, k-1, n)\n        m += 1\n    "
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        a = 2\n        while True:\n            if is_prime(a):\n                if n % a == 0:\n                    return a\n                else:\n                    a += 1\n            else:\n                a += 1\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    return newman_williams_primes[n-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n % 2 == 0:\n        return newman_prime(n/2) * newman_prime(n/2)\n    else:\n        return newman_prime(n-1) * newman_prime(n-1) + 2\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # nth prime = a + 2*b + 3*c + 4*d +... + (n-1)*(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    p = 1\n    if n == 0:\n        return 2\n    if n == 1:\n        return 3\n    for i in range(1,n):\n        p = (p + 2)\n    return p\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    return newman_williams(n, False)\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    assert isinstance(test_tup1, tuple)\n    assert isinstance(test_tup2, tuple)\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print \"Error! two tuples of unequal length!\"\n    else:\n        # get the result\n        new_tup1 = tuple(map(lambda x, y: x / y, test_tup1, test_tup2))\n        return new_tup1\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    assert (len(test_tup1) == len(test_tup2)), \"Given tuples have unequal number of elements\"\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    new_tup1 = ()\n    new_tup2 = ()\n    for i in range(len(test_tup1)):\n        new_tup1 = new_tup1 + (test_tup1[i]/test_tup2[i],)\n    for j in range(len(test_tup2)):\n        new_tup2 = new_tup2 + (test_tup2[j]/test_tup1[j],)\n    return new_tup1, new_tup2\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    output = tuple(a/b for a,b in zip(test_tup1, test_tup2))\n    return output\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = tuple()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i], )\n    return result_tup\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        div_elem = test_tup1[i] / test_tup2[i]\n        result.append(div_elem)\n    return tuple(result)\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    output_tup = ()\n    for i, j in zip(test_tup1, test_tup2):\n        output_tup += ((i / j),)\n    return output_tup\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(map(lambda x: x[0]/x[1], zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # declare empty list for operands\n    empty_list = []\n    # loop through each element of the tuples and add the result to empty list\n    for i, j in zip(test_tup1, test_tup2):\n        empty_list.append(i/j)\n    # return list of operands\n    return tuple(empty_list)\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    length = len(list1)\n    index = length - L\n    return (list1[:index], list1[index:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list_one = []\n    list_two = []\n    length = len(list1)\n    for i in range(L):\n        list_one.append(list1[i])\n    for i in range(L, length):\n        list_two.append(list1[i])\n    return (list_one, list_two)\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    a = list1[0:L]\n    b = list1[L:]\n    return (a,b)\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1 = list1[:L]\n    list2 = list1[L:]\n    return (list1, list2)\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Your code here\n    return [list1[:L], list1[L:]]\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L <= 0:\n        return(0, [])\n    elif len(list1) == 0:\n        return(0, [])\n    else:\n        first_part = list1[:L]\n        second_part = list1[L:]\n        return (first_part, second_part)\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # O(n/2) time\n    \n    # create two empty lists\n    list1_left = []\n    list1_right = []\n    \n    # iterate over the list\n    for i in range(0, len(list1)):\n        # if i is less than L\n        if i < L:\n            # add to the first list\n            list1_left.append(list1[i])\n        else:\n            # add to the second list\n            list1_right.append(list1[i])\n    \n    return (list1_left, list1_right)\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    mid = L\n    return (list1[:mid], list1[mid:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age >= 2:\n        return h_age * 10.5\n    else:\n        return (h_age * 10.5) + 5\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age > 2:\n        return (h_age - 2) * 4\n    else:\n        return 0\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    if h_age < 0:\n        return 'Invalid age input'\n    \n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        return None\n    else:\n        dog_age = h_age * 7\n        return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    # return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age == 0:\n        return 0\n    else:\n        return h_age * 8\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # dogs age in years:\n    d_age = h_age * 7\n    return d_age\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    if h_age < 0:\n        return None\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Your Code Here\n    if h_age == 1:\n        return 0\n    else:\n        return 1 + dog_age(h_age-1)\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    from datetime import date\n    import datetime\n    today = date.today()\n    age = today.year - h_age\n    return age\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # If step is negative or 0, return an empty list\n    if step <= 0 or step >= len(S):\n        return []\n    # If step is 1, return the original list\n    if step == 1:\n        return [S]\n    # Initialize the new lists\n    L = []\n    # For every element in the original list, put it in a new list if its index is a multiple of step\n    for i in range(0, len(S), step):\n        L.append(S[i])\n    return L\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    for i in range(0, len(S), step):\n        yield S[i:i+step]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if not isinstance(S, list):\n        print \"Input must be a list.\"\n        return\n    if not isinstance(step, int):\n        print \"Input must be an integer.\"\n        return\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Your Code Here\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i + step])\n    return result\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = []\n    for i in range(0, len(S), step):\n        L.append(S[i:i+step])\n    return L\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    new_list = []\n    for i in range(0, len(S), step):\n        new_list.append(S[i:i+step])\n    return new_list\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # your code here\n    if not S or not isinstance(S, list) or not isinstance(step, int):\n        return []\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n    \ndef lateralsurface_prism(b,h):\n    '''\n    Write a function to find the lateral surface area of a prism given its base and height.\n    '''\n    return b*h/2\n    \ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given its radius and height.\n    '''\n    return 2*pi*r**2 + 2*pi*r*h\n    \ndef lateralsurface_pyramid(b,h):\n    '''\n    Write a function to find the lateral surface area of a pyramid given its base and height.\n    '''\n    return b*h/3\n    \ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\n    \ndef lateralsurface_shape(s):\n    '''\n    Write a function to find the lateral surface area of a shape given its shape type.\n    '''\n    if s == 'cube':\n        return lateralsurface_cube(3)\n    elif s == 'prism':\n        return lateralsurface_prism(3,4)\n    elif s == 'cylinder':\n        return lateralsurface_cylinder(2,6)\n    elif s == 'pyramid':\n        return lateralsurface_pyramid(4,3)\n    elif s =='sphere':\n        return lateralsurface_sphere(2)\n    else:\n        return 'Invalid shape'\n    \ndef lateral_shapes(l,s):\n    '''\n    Write a function to find the lateral surface area of all the shapes given their shape type and side length.\n    '''\n    if s == 'cube':\n        return 6*l**2\n    elif s == 'prism':\n        return (l*s/2)\n    elif s == 'cylinder':\n        return 2*pi*l*h\n    elif s == 'pyramid':\n        return l*s/3\n    elif s =='sphere':\n        return 4*pi*r\n    else:\n        return 'Invalid shape'\n    \ndef total_lateralsurface(l,s):\n    '''\n    Write a function to find the total lateral surface area of all the shapes given their shape type and side length.\n    '''\n    if s == 'cube':\n        return 6*l**2\n    elif s == 'prism':\n        return ((l**2+l*s/2)+(l*s/2)**2)**(1/2)\n    elif s == 'cylinder':\n        return 2*pi*l*2 + lateral_shapes(l,s)\n    elif s == 'pyramid':\n        return ((l**2+l*s/2)+(l*s/2)**2)**(1/2)\n    elif s =='sphere':\n        return 4*pi*(l**2)\n    else:\n        return 'Invalid shape'\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area=6\n    return surface_area*l\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # replace pass with your code\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = l**2\n    return 6*l\n    \ndef lateralsurface_tetrahedron(l):\n    '''\n    Write a function to find the lateral surface area of a tetrahedron given its side length.\n    '''\n    l = l**2\n    return l/2\n    \ndef lateral_surface_area(l,x):\n    '''\n    Write a function to find the lateral surface area of a tetrahedron given its side length and a scalar value (x)\n    '''\n    l = l**2\n    return x*l\n    \ndef lateral_surface_area_of_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = l**2\n    return l\n    \ndef lateral_surface_area_of_tetrahedron(l):\n    '''\n    Write a function to find the lateral surface area of a tetrahedron given its side length.\n    '''\n    l = l**2\n    return l/2\n    \ndef lateral_surface_area_of_polyhedron(l,n):\n    '''\n    Write a function to find the lateral surface area of a polyhedron given its side length and a scalar value (n)\n    '''\n    l = l**2\n    return n*l\n    \ndef lateral_surface_area_of_hexahedron(l):\n    '''\n    Write a function to find the lateral surface area of a hexahedron given its side length.\n    '''\n    l = l**2\n    return l*l/2\n    \ndef lateral_surface_area_of_octahedron(l):\n    '''\n    Write a function to find the lateral surface area of a octahedron given its side length.\n    '''\n    l = l**2\n    return l*l\n    \ndef lateral_surface_area_of_dodecahedron(l):\n    '''\n    Write a function to find the lateral surface area of a dodecahedron given its side length.\n    '''\n    l = l**2\n    return l*l/4\n    \ndef lateral_surface_area_of_icosahedron(l):\n    '''\n    Write a function to find the lateral surface area of a icosahedron given its side length.\n    '''\n    l = l**2\n    return l*l/3\n    \ndef lateral_surface_area_of_truncated_hexahedron(l):\n    '''\n    Write a function to find the lateral surface area of a truncated hexahedron given its side length.\n    '''\n    l = l**2\n    return l/2\n    \ndef lateral_surface_area_of_truncated_octahedron(l):\n    '''\n    Write a function to find the lateral surface area of a truncated octahedron given its side length.\n    '''\n    l = l**2\n    return l\n    \ndef lateral_surface_area_of_truncated_dodecahedron(l):\n    '''\n    Write a function to find the lateral surface area of a truncated dodecahedron given its side length.\n    '''\n    l = l**2\n    return l/4\n    \ndef lateral_surface_area_of_truncated_icosahedron(l):\n    '''\n    Write a function to find the lateral surface area of a truncated icosahedron given its side length.\n    '''\n    l = l**2\n    return l/3\n    \ndef lateral_surface_area_of_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    r = r**2\n    return 4*pi*r\n    \ndef lateral_surface_area_of_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given its radius and height.\n    '''\n    r = r**2\n    h = h**2\n    return pi*r*(h+r)\n    \ndef lateral_surface_area_of_torus(r,h):\n    '''\n    Write a function to find the lateral surface area of a torus given its radius and height.\n    '''\n    r = r**2\n    h = h**2\n    return 2*pi*r*(h+r)\n    \ndef lateral_surface_area_of_prism(r,h):\n    '''\n    Write a function to find the lateral surface area of a prism given its radius and height.\n    '''\n    r = r**2\n    h = h**2\n    return 2*pi*r*h\n    \ndef lateral_surface_area_of_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given its radius and height.\n    '''\n    r = r**2\n    h = h**2\n    return 2*pi*r*(h+r)\n    \ndef lateral_surface_area_of_pyramid(r,h):\n    '''\n    Write a function to find the lateral surface area of a pyramid given its radius and height.\n    '''\n    r = r**2\n    h = h**2\n    return 2*pi*r*h\n    \ndef lateral_surface_area_of_box(r,h):\n    '''\n    Write a function to find the lateral surface area of a box given its radius and height.\n    '''\n    r = r**2\n    h = h**2\n    return 2*r*h\n    \ndef lateral_surface_area_of_sphere_with_hole(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere with hole given its radius and height.\n    '''\n    r = r**2\n    h = h**2\n    return 2*pi*r*(h+r)\n    \ndef lateral_surface_area_of_sphere_with_hole_smallest(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere with hole given its radius and height.\n    '''\n    r = r**2\n    h = h**2\n    return 2*pi*(r**2-h)\n    \ndef lateral_surface_area_of_sphere_with_hole_largest(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere with hole given its radius and height.\n    '''\n    r = r**2\n    h = h**2\n    return 2*pi*(r**2-h)\n    \ndef lateral_surface_area_of_sphere_with_hole_smallest_and_largest(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere with hole given its radius and height.\n    '''\n    r = r**2\n    h = h**2\n    return 2*pi*r\n    \ndef lateral_surface_area_of_sphere_with_hole_smallest_and_largest_smaller_than_a_greater_than_b(a,b):\n    '''\n    Write a function to find the lateral surface area of a sphere with hole given its radius and height.\n    '''\n    a = a**2\n    b = b**2\n    return 2*pi*(a**2-b)\n    \ndef lateral_surface_area_of_sphere_with_hole_greater_than_a_smaller_than_b(a,b):\n    '''\n    Write a function to find the lateral surface area of a sphere with hole given its radius and height.\n    '''\n    a = a**2\n    b = b**2\n    return 2*pi*(a**2-b)\n    \ndef lateral_surface_area_of_sphere_with_hole_greater_than_a_smaller_than_b_and_greater_than_b_smaller_than_a(a,b):\n    '''\n    Write a function to find the lateral surface area of a sphere with hole given its radius and height.\n    '''\n    a = a**2\n    b = b**2\n    return 2*pi*(a**2-b)\n    \ndef lateral_surface_area_of_sphere_with_hole_greater_than_a_greater_than_b"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    \n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surfacearea=6*l**2\n    return surfacearea\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l_2 = l*l\n    l_3 = l*l*l\n    \n    return l_3*6 + l_2*l\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6*l**2\n    print area\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return (n*(n+1))/2\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n**2 + square_Sum(n-1)\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    \n    for i in range(1, n+1):\n        if i % 2 == 1:\n            sum_of_squares += i ** 2\n    \n    return sum_of_squares\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n**2 + square_Sum(n-2)\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum(x**2 for x in range(1,n+1) if x%2==1)\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n**2) + square_Sum(n - 1)\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([x**2 for x in range(1,n+1,2)])\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum(x**2 for x in range(1,n,2))\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([x*x for x in range(1,n+1,2)])\n    \ndef find_largest_palindrome(n):\n    '''\n    Write a python function that takes in an integer n and returns the largest palindrome made from the product of two n-digit numbers.\n    '''\n    if n == 1:\n        return 9\n    \n    i = 10**(n-1)\n    while i > 1:\n        j = i - 1\n        while j < 10**n:\n            if str(i*j) == str(i*j)[::-1]:\n                return i*j\n            j += 1\n        i -= 1\n        \ndef find_largest_palindrome_2(n):\n    '''\n    Write a python function that takes in an integer n and returns the largest palindrome made from the product of two n-digit numbers.\n    '''\n    if n == 1:\n        return 9\n    \n    product = 1\n    i = 10**(n-1)\n    while i > 1:\n        product *= i\n        i -= 1\n    i = 10**n - 1\n    while i > 0:\n        product *= i\n        i -= 1\n    return product\n    \ndef find_largest_palindrome_3(n):\n    '''\n    Write a python function that takes in an integer n and returns the largest palindrome made from the product of two n-digit numbers.\n    '''\n    if n == 1:\n        return 9\n    \n    product = 1\n    i = 10**(n-1)\n    while i > 1:\n        product *= i\n        i -= 1\n    i = 10**n - 1\n    while i > 0:\n        product *= i\n        i -= 1\n    return product\n    \ndef find_largest_palindrome_4(n):\n    '''\n    Write a python function that takes in an integer n and returns the largest palindrome made from the product of two n-digit numbers.\n    '''\n    if n == 1:\n        return 9\n    \n    product = 1\n    i = 10**(n-1)\n    while i > 1:\n        product *= i\n        i -= 1\n    i = 10**n - 1\n    while i > 0:\n        product *= i\n        i -= 1\n    \n    product //= 100\n    product %= 100\n    \n    return product*100 + (product+1)//10\n    \ndef find_largest_palindrome_5(n):\n    '''\n    Write a python function that takes in an integer n and returns the largest palindrome made from the product of two n-digit numbers.\n    '''\n    if n == 1:\n        return 9\n    \n    product = 1\n    i = 10**(n-1)\n    while i > 1:\n        product *= i\n        i -= 1\n    i = 10**n - 1\n    while i > 0:\n        product *= i\n        i -= 1\n    \n    product //= 100\n    product %= 100\n    \n    return product*100 + (product+1)//10\n    \ndef find_largest_palindrome_6(n):\n    '''\n    Write a python function that takes in an integer n and returns the largest palindrome made from the product of two n-digit numbers.\n    '''\n    if n == 1:\n        return 9\n    \n    product = 1\n    i = 10**(n-1)\n    while i > 1:\n        product *= i\n        i -= 1\n    i = 10**n - 1\n    while i > 0:\n        product *= i\n        i -= 1\n    \n    product //= 100\n    product %= 100\n    \n    return product*100 + (product+1)//10\n    \ndef find_largest_palindrome_7(n):\n    '''\n    Write a python function that takes in an integer n and returns the largest palindrome made from the product of two n-digit numbers.\n    '''\n    if n == 1:\n        return 9\n    \n    product = 1\n    i = 10**(n-1)\n    while i > 1:\n        product *= i\n        i -= 1\n    i = 10**n - 1\n    while i > 0:\n        product *= i\n        i -= 1\n    \n    product //= 100\n    product %= 100\n    \n    return product*100 + (product+1)//10\n    \ndef find_largest_palindrome_8(n):\n    '''\n    Write a python function that takes in an integer n and returns the largest palindrome made from the product of two n-digit numbers.\n    '''\n    if n == 1:\n        return 9\n    \n    product = 1\n    i = 10**(n-1)\n    while i > 1:\n        product *= i\n        i -= 1\n    i = 10**n - 1\n    while i > 0:\n        product *= i\n        i -= 1\n    \n    product //= 100\n    product %= 100\n    \n    return product*100 + (product+1)//10\n    \ndef find_largest_palindrome_9(n):\n    '''\n    Write a python function that takes in an integer n and returns the largest palindrome made from the product of two n-digit numbers.\n    '''\n    if n == 1:\n        return 9\n    \n    product = 1\n    i = 10**(n-1)\n    while i > 1:\n        product *= i\n        i -= 1\n    i = 10**n - 1\n    while i > 0:\n        product *= i\n        i -= 1\n    \n    product //= 100\n    product %= 100\n    \n    return product*100 + (product+1)//10\n    \ndef find_largest_palindrome_10(n):\n    '''\n    Write a python function that takes in an integer n and returns the largest palindrome made from the product of two n-digit numbers.\n    '''\n    if n == 1:\n        return 9\n    \n    product = 1\n    i = 10**(n-1)\n    while i > 1:\n        product *= i\n        i -= 1\n    i = 10**n - 1\n    while i > 0:\n        product *= i\n        i -= 1\n    \n    product //= 100\n    product %= 100\n    \n    return product*100 + (product+1)//10\n    \ndef find_largest_palindrome_11(n):\n    '''\n    Write a python function that takes in an integer n and returns the largest palindrome made from the product of two n-digit numbers.\n    '''\n    if n == 1:\n        return 9\n    \n    product = 1\n    i = 10**(n-1)\n    while i > 1:\n        product *= i\n        i -= 1\n    i = 10**n - 1\n    while i > 0:\n        product *= i\n        i -= 1\n    \n    product //= 100\n    product %= 100\n    \n    return product*100 + (product+1)//10\n    \ndef find_largest_palindrome_12(n):\n    '''\n    Write a python function that takes in an integer n and returns the largest palindrome made from the product of two n-digit numbers.\n    '''\n    if n == 1:\n        return 9\n    \n    product = 1\n    i = 10**(n-1)\n    while i > 1:\n        product *= i\n        i -= 1\n    i = 10**n - 1\n    while i > 0:\n        product *= i\n        i -= 1\n    \n    product //= 100\n    product %= 100\n    \n    return product*100 + (product+1)//10\n    \ndef find_largest_palindrome_13(n):\n    '''\n    Write a python function that takes in an integer n and returns the largest palindrome made from the product of two n-digit numbers.\n    '''\n    if n == 1:\n        return 9\n    \n    product = 1\n    i = 10**(n-1)\n    while i > 1:\n        product *= i\n        i -= 1\n    i = 10**n - 1\n    while i > 0:\n        product *= i\n        i -= 1\n    \n    product //= 100\n    product %= 100\n    \n    return product*100 + (product+1)//10\n    \nde"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([i**2 for i in range(1, n+1) if i%2==1])\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    n -= 1\n    # if n is 0 or 1, then it's the 1st star\n    if n < 0 or n >= MAX_STARS:\n        return 0\n    else:\n        # if n is even, then it's the n-1th star\n        if n % 2 == 0:\n            return (find_star_num(n/2) ** 2) + 1\n        # else it's the n-1th star\n        else:\n            return (find_star_num((n-1)/2) ** 2) + 1\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    count = 0\n    num = 1\n    while count < n:\n        num = num * (3 * num + 1) / 2\n        count = count + 1\n    return num\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_num = 0\n    i = 1\n    while True:\n        star_num += i\n        i += 1\n        if star_num == n:\n            return star_num\n        elif star_num > n:\n            return star_num - i\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: return 1\n    if n == 2: return 1\n    if n == 3: return 1\n    if n == 4: return 2\n    if n == 5: return 3\n    if n == 6: return 5\n    if n == 7: return 11\n    if n == 8: return 31\n    if n == 9: return 93\n    if n == 10: return 325\n    if n == 11: return 931\n    if n == 12: return 1393\n    if n == 13: return 2425\n    if n == 14: return 3529\n    if n == 15: return 4771\n    if n == 16: return 5825\n    if n == 17: return 7019\n    if n == 18: return 8097\n    if n == 19: return 9253\n    if n == 20: return 10389\n    if n == 21: return 11275\n    if n == 22: return 12451\n    if n == 23: return 13889\n    if n == 24: return 15117\n    if n == 25: return 16885\n    if n == 26: return 18597\n    if n == 27: return 20265\n    if n == 28: return 22301\n    if n == 29: return 24037\n    if n == 30: return 25659\n    if n == 31: return 26699\n    if n == 32: return 28281\n    if n == 33: return 30203\n    if n == 34: return 32125\n    if n == 35: return 33703\n    if n == 36: return 35425\n    if n == 37: return 36765\n    if n == 38: return 38177\n    if n == 39: return 39729\n    if n == 40: return 41301\n    if n == 41: return 44197\n    if n == 42: return 46145\n    if n == 43: return 48123\n    if n == 44: return 49775\n    if n == 45: return 51699\n    if n == 46: return 53361\n    if n == 47: return 55553\n    if n == 48: return 57865\n    if n == 49: return 60267\n    if n == 50: return 62949\n    if n == 51: return 64621\n    if n == 52: return 66225\n    if n == 53: return 68197\n    if n == 54: return 69755\n    if n == 55: return 70853\n    if n == 56: return 72925\n    if n == 57: return 74497\n    if n == 58: return 76399\n    if n == 59: return 78825\n    if n == 60: return 80511\n    if n == 61: return 81913\n    if n == 62: return 83425\n    if n == 63: return 84917\n    if n == 64: return 86497\n    if n == 65: return 88881\n    if n == 66: return 91253\n    if n == 67: return 92645\n    if n == 68: return 94027\n    if n == 69: return 95499\n    if n == 70: return 96897\n    if n == 71: return 97285\n    if n == 72: return 98767\n    if n == 73: return 100467\n    if n == 74: return 102229\n    if n == 75: return 103691\n    if n == 76: return 104869\n    if n == 77: return 106345\n    if n == 78: return 107037\n    if n == 79: return 109129\n    if n == 80: return 112003\n    if n == 81: return 112979\n    if n == 82: return 113961\n    if n == 83: return 114943\n    if n == 84: return 116835\n    if n == 85: return 117017\n    if n == 86: return 118109\n    if n == 87: return 118985\n    if n == 88: return 119871\n    if n == 89: return 120963\n    if n == 90: return 121945\n    if n == 91: return 122927\n    if n == 92: return 123909\n    if n == 93: return 124901\n    if n == 94: return 125683\n    if n == 95: return 126655\n    if n == 96: return 128337\n    if n == 97: return 129209\n    if n == 98: return 130201\n    if n == 99: return 131393\n    if n == 100: return 132685\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    num = 1\n    if n == 1:\n        return num\n    else:\n        for i in range(1, n):\n            num *= (i+1)\n        return num\n        \ndef check_prime(n):\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n == 3:\n        return True\n    elif n % 3 == 0:\n        return False\n    elif n % 5 == 0:\n        return False\n    elif n % 7 == 0:\n        return False\n    else:\n        i = 5\n        while i*i <= n:\n            if n % i == 0 or n % (i+2) == 0:\n                return False\n            i += 6\n        return True\n        \ndef check_palindrome(n):\n    if len(str(n)) % 2 == 0:\n        return n == int(str(n)[::-1])\n    else:\n        return n == int(str(n)[len(str(n))/2] + str(n)[:len(str(n))/2][::-1])\n        \ndef get_palindrome_num(n):\n    '''\n    Write a function to find then'th palindrome number.\n    '''\n    num = 1\n    if n == 1:\n        return num\n    else:\n        for i in range(1, n):\n            num *= 10\n            num += 1\n        return num\n        \ndef get_factorial(n):\n    '''\n    Write a function to find then'th factorial.\n    '''\n    factorial = 1\n    if n == 1:\n        return factorial\n    else:\n        for i in range(1, n):\n            factorial *= (i+1)\n    return factorial\n        \ndef get_prime_num(n):\n    '''\n    Write a function to find then'th prime number.\n    '''\n    num = 2\n    if n == 1:\n        return num\n    else:\n        for i in range(2, n+1):\n            if check_prime(i):\n                num += 1\n        return num\n        \ndef get_remainder(num, m):\n    '''\n    Write a function to find the remainder of num/m\n    '''\n    if num % m == 0:\n        return 0\n    else:\n        return num % m\n        \ndef get_combination(n, m):\n    '''\n    Write a function to find then'th combination of m.\n    '''\n    comb = 1\n    if n == 1:\n        return comb\n    else:\n        for i in range(1, n):\n            comb *= i\n        return comb / get_factorial(m)\n        \ndef get_power(num, m):\n    '''\n    Write a function to find the m'th power of num.\n    '''\n    power = 1\n    if m == 1:\n        return power\n    else:\n        for i in range(1, m):\n            power *= num\n        return power\n        \ndef get_digit(n):\n    '''\n    Write a function to find the number of digits of n.\n    '''\n    if n < 10:\n        return 1\n    else:\n        return 1 + get_digit(n/10)\n        \ndef get_value(n):\n    '''\n    Write a function to find the number of values in a list of lists.\n    '''\n    length = len(n[0])\n    if length == 1:\n        return length\n    else:\n        return length + get_value(n[1:])\n        \ndef get_element(n, i):\n    '''\n    Write a function to find the i'th element in a list of lists.\n    '''\n    length = len(n[0])\n    if i > length:\n        return None\n    else:\n        return n[0][i-1]\n        \ndef get_elements(n, start, end):\n    '''\n    Write a function to find the elements in a list of lists from start to end.\n    '''\n    if start > end:\n        return []\n    else:\n        return [n[0][start-1]] + get_elements(n, start+1, end)\n        \ndef is_palindrome(n):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(str(n)) == 1:\n        return True\n    else:\n        return str(n) == str(n)[::-1]\n        \ndef is_palindrome_num(n):\n    '''\n    Write a function to check if a number is a palindrome.\n    '''\n    if len(str(n)) == 1:\n        return True\n    else:\n        return str(n) == str(n)[::-1]\n        \ndef is_prime(n):\n    '''\n    Write a function to check if a number is a prime.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        i = 2\n        while i < n:\n            if n % i == 0:\n                return False\n            i += 1\n        return True\n        \ndef get_last_digit(n):\n    '''\n    Write a function to find the last digit of a number.\n    '''\n    return n % 10\n        \ndef get_digits(n):\n    '''\n    Write a function to find the digits of a number.\n    '''\n    length = len(str(n))\n    if length == 1:\n        return 1\n    else:\n        return length + get_digits(n/10)\n        \ndef get_least_digits(n, m):\n    '''\n    Write a function to find the least m digits of a number.\n    '''\n    if m == 1:\n        return len(str(n))\n    else:\n        if len(str(n)) < m:\n            return 0\n        else:\n            return len(str(n)) - m\n        \ndef get_first_n_digits(n, m):\n    '''\n    Write a function to find the first m digits of a number.\n    '''\n    if m == 1:\n        return str(n)\n    else:\n        return str(n)[:m]\n        \ndef get_first_n_digits_num(n, m):\n    '''\n    Write a function to find the first m digits of a number.\n    '''\n    if m == 1:\n        return n\n    else:\n        return int(str(n)[:m])\n        \ndef is_decimal(n):\n    '''\n    Write a function to check if a number is a decimal.\n    '''\n    if n < 0:\n        return False\n    else:\n        return True\n        \ndef is_decimal_num(n):\n    '''\n    Write a function to check if a number is a decimal.\n    '''\n    if n < 0:\n        return False\n    else:\n        return True\n        \ndef is_perfect_square(n):\n    '''\n    Write a function to check if a number is a perfect square.\n    '''\n    if n == 1:\n        return True\n    elif n == 0:\n        return False\n    else:\n        if n**0.5 % 1 == 0:\n            return True\n        else:\n            return False\n        \ndef is_perfect_square_num(n):\n    '''\n    Write a function to check if a number is a perfect square.\n    '''\n    if n == 1:\n        return True\n    elif n == 0:\n        return False\n    else:\n        if n**0.5 % 1 == 0:\n            return True\n        else:\n            return False\n        \ndef is_perfect_square_list(n):\n    '''\n    Write a function to check if a number is a perfect square.\n    '''\n    if len(n) == 1:\n        return True\n    else:\n        return is_perfect_square_list(n[1:])\n        \ndef is_perfect_square_num_list(n):\n    '''\n    Write a function to check if a number is a perfect square.\n    '''\n    if len("
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return [x*(x+1)//2 for x in range(1,n+1)]\n    \nprint(find_star_num(1))\nprint(find_star_num(2))\nprint(find_star_num(3))\nprint(find_star_num(4))\nprint(find_star_num(5))\nprint(find_star_num(6))\nprint(find_star_num(7))\nprint(find_star_num(8))\nprint(find_star_num(9))"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: \n        return 1\n    return find_star_num(n - 1) + n * (n + 1)\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    i = 1\n    star_num = 0\n    while i < n:\n        star_num += 1\n        i = i*2\n    return star_num\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # Variables\n    star_num = 1\n    num_to_find = 1\n    \n    # If number is 0 or 1\n    if n == 0 or n == 1:\n        return star_num\n    \n    # Find each number to find\n    for i in range(2, n + 1):\n        num_to_find += star_num\n        star_num += 1\n    \n    # Return the result\n    return num_to_find\n    \nprint find_star_num(1) # 3\nprint find_star_num(2) # 5\nprint find_star_num(3) # 7\nprint find_star_num(4) # 9\nprint find_star_num(5) # 11"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n<0:\n        return None\n    #1,2,3,4,5\n    if n<5:\n        return n+1\n    #6,7,8,9,10\n    if n>=5:\n        return 2*(n-5)+1\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isalpha():\n        return ord(k)\n    elif k.isdigit():\n        return ord(k) - ord('0')\n    elif k =='':\n        return ord(' ')\n    elif k == '\\n':\n        return ord('\\n')\n    elif k == '\\t':\n        return ord('\\t')\n    else:\n        return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    \n    value = ord(k)\n    return value\n    \ndef ascii_chr(number):\n    '''\n    Write a function to convert a number to it's corresponding ascii character.\n    '''\n    \n    return chr(number)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if len(k)==0:\n        return 'Not a character'\n    else:\n        return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if ord('a') <= ord(k) <= ord('z'):\n        return ord(k) - ord('a')\n    elif ord('A') <= ord(k) <= ord('Z'):\n        return ord(k) - ord('A') + 26\n    else:\n        return 0\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # The code below will test your function and provide an appropriate return statement\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    count = 0\n    for i in arr:\n        if i % 2 == 0:\n            count += i\n    return count\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(0,len(arr)):\n        if i%2==0:\n            if arr[i]%2==0:\n                sum_even = sum_even + arr[i]\n    return sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    i = 0\n    sum = 0\n    while i < len(arr):\n        if i%2==0:\n            sum += arr[i]\n        i += 1\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    res = 0\n    for i in range(0,len(arr),2):\n        res += arr[i]\n    return res\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_of_even = 0\n    for num in arr[::2]:\n        sum_of_even += num\n    return sum_of_even\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_ = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum_ += arr[i]\n    return sum_\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(arr[::2])\n    \ndef count_digits_of_number(num):\n    '''\n    Write a python function to find the number of digits in the given number.\n    '''\n    return len(str(num))\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_elem = 0\n    for i in range(len(arr)):\n        if i%2 == 0 and arr[i]%2 == 0:\n            sum_elem += arr[i]\n    return sum_elem\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    list_sum = 0\n    for index in range(0, len(arr), 2):\n        if arr[index] % 2 == 0:\n            list_sum = list_sum + arr[index]\n    return list_sum\n    \n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i%2 == 0 and arr[i]%2 == 0:\n            sum = sum + arr[i]\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # initialize the sum\n    total = 0\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n < 1:\n        return 0\n    return sum([2**i for i in range(n) if i % 2 == 0 and 2**i < n])\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n<1:\n        return\n    if n==1:\n        return 2\n    if n%2==0:\n        return even_Power_Sum(n/2)+n\n    return even_Power_Sum(n/2)\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2,n+1,2):\n        power = i ** 5\n        sum += power\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    sum = 0\n    i = 0\n    while i < n:\n        i += 1\n        if i % 2 == 0:\n            sum += (i**5)\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for num in range(0,n,2):\n        result += (num ** 5)\n    return result\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if type(n)!= int or n < 1:\n        raise TypeError(\"n must be a positive integer\")\n    else:\n        total = 0\n        for num in range(2, n+1, 2):\n            total += (num**5)\n        return total\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    assert type(n) == int and n>=0\n    return sum(i**5 for i in range(2, n, 2))\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n <= 0:\n        return 0\n    \n    elif n == 1:\n        return 2\n    \n    else:\n        return 2 + even_Power_Sum(n - 1)\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [(a[-1]) for a in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[-1] for tup in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [item[-1] for item in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = [x[-1] for x in test_list]\n    return result\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        new_list.append(test_list[i][-1])\n    return new_list\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for elem in test_list:\n        new_list.append(elem[1])\n    return new_list\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [element[-1] for element in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[-1] for x in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    #return [t[-1] for t in test_list]\n    return [t[-1] for t in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [(item[-1]) for item in test_list]\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    x = 0\n    while x < len(test_tup1):\n        test_tup1[x] = test_tup1[x] - test_tup2[x]\n        x += 1\n    return test_tup1\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    i = 0\n    while i < len(test_tup1):\n        test_tup1[i] -= test_tup2[i]\n        i += 1\n    return test_tup1\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    for index in range(len(test_tup1)):\n        test_tup1[index] -= test_tup2[index]\n    return test_tup1\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(x - y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple([x1 - x2 for x1, x2 in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple([test_tup1[i]-test_tup2[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    index = 0\n    result = ()\n    while index < len(test_tup1):\n        result += (test_tup1[index] - test_tup2[index], )\n        index += 1\n    return result\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    t1_length = len(test_tup1)\n    t2_length = len(test_tup2)\n    if t1_length!= t2_length:\n        print(\"The tuples must be the same length.\")\n        return None\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    return tuple(map(lambda x, y: x - y, list1, list2))\n    \ndef greatest_diff(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns the greatest absolute difference between the elements of the first tuple and the elements of the second tuple.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    return max(map(abs, list1)) - min(map(abs, list2))\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    assert isinstance( n, int) and n >=0, 'n must be a non-negative integer'\n    if n == 0 or n ==1:\n        return 1\n    else:\n        return n*even_binomial_Coeff_Sum(n-2)\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return int(n*(n-1)/2)\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 0:\n        return\n    \n    bns = [0] * (n+1)\n    bns[0] = 1\n    bns[1] = 1\n    if n > 1:\n        for i in range(2, n+1):\n            bns[i] = bns[i-1] + bns[i-2]\n    return bns[n]\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #check if n is a positive integer\n    if (n % 1!= 0):\n        return \"ERROR: Input is not a positive integer\"\n    if (n < 0):\n        return \"ERROR: Input is negative\"\n    #initialize list for binomial coefficients\n    binomial_coeff_sum = [1]\n    #for each index, calculate binomial coefficient\n    for index in range(1,n+1):\n        binomial_coeff_sum.append(0)\n        for j in range(0,index):\n            binomial_coeff_sum[index] = binomial_coeff_sum[index] + binomial_coeff_sum[index-j-1]\n    #return sum of even binomial coefficients\n    return sum(binomial_coeff_sum)\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n + 1):\n        # print(binomial_coeff(i, n),'i',i,'n',n)\n        sum += binomial_coeff(i, n)\n        # print(i, binomial_coeff(i, n),'i',i,'n',n,'sum',sum)\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    c = 0\n    for i in range(n):\n        if (i+1)%2 == 0:\n            c += 1/math.factorial(i)*(i+1)\n    return c\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    total = 0\n    for i in range(n+1):\n        total += even_binomial_coeff(n, i)\n    return total\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (2 * n - 1) + even_binomial_Coeff_Sum(n - 1)\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    binomial = n\n    if n == 1:\n        return 1\n    else:\n        for i in range(2, n + 1):\n            binomial = binomial * (n - i + 1) / i\n        return binomial\n    \n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    result = 0\n    for i in range(0,n+1):\n        result += binomial(n,i)\n    return result\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return math.pi * (r**2) * h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.141592653589793\n    return pi*(r**2)*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return math.pi*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = pi*(r**2)*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pass\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return np.pi*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = pi * r**2 * h\n    return v\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return math.pi * r**2 * h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = (math.pi*r**2)*h\n    return v\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (r*h)*math.pi\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_filtered={}\n    for key in dict.keys():\n        if dict[key]>=n:\n            dict_filtered[key]=dict[key]\n    return dict_filtered\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_new = {}\n    for key, value in dict.iteritems():\n        if value >= n:\n            dict_new[key] = value\n    return dict_new\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # Your code here\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    if len(dict) == 0:\n        return dict\n    for i in dict:\n        if type(dict[i]) is not dict:\n            if dict[i] >= n:\n                dict[i] = dict[i]\n            else:\n                dict[i] = False\n        else:\n            if dict[i] >= n:\n                dict[i] = dict[i]\n            else:\n                dict[i] = False\n    return dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key,value in dict.items() if value >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict={}\n    for key,value in dict.iteritems():\n        if value>=n:\n            new_dict[key]=value\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    newDict = {key:val for key, val in dict.items() if val>=n}\n    return newDict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # Your code here\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filter_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filter_dict[key] = value\n    return filter_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    if not isinstance(dict,dict):\n        print(\"error\")\n        return None\n    return {key:value for key,value in dict.items() if value >= n}\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    d = {}\n    for val in test_tup:\n        if val not in d:\n            d[val] = 1\n        else:\n            d[val] += 1\n    return d\n    \n    "
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    num = len(test_tup)\n    if not num:\n        return 0\n    return test_tup.count(test_tup[0])\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    d = {}\n    for word in test_tup:\n        if word not in d:\n            d[word] = 0\n        d[word] += 1\n    return d\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    print 'Given tuple:', test_tup\n    first_element = test_tup[0]\n    count = 0\n    for elem in test_tup:\n        if elem == first_element:\n            count += 1\n    print 'Number of elements that occur before first element:', count\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # this will return a list of elements that occur before the inputed element\n    return len([i for i in test_tup if i < test_tup[0]])\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for t in test_tup:\n        if t == test_tup[0]:\n            return count\n        count += 1\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[0]:\n            break\n        count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    # Find how many times the first element occurs.\n    # For tuple \"1,2,3,4,5\", the function will return 2 as the first element \"1\" is before the second element.\n    # For tuple \"1,2,3,4,5\", the function will return 3 as the first element \"1\" is before the third element.\n    # For tuple \"1,2,3,4,5\", the function will return 4 as the first element \"1\" is before the fourth element.\n    # For tuple \"1,2,3,4,5\", the function will return 5 as the first element \"1\" is before the fifth element.\n    \n    # Create a list to store the result.\n    res = []\n    # Iterate through the list.\n    for i in test_tup:\n        # If the index of the current element is 0, add 1 to the result.\n        if i == test_tup[0]:\n            res.append(1)\n        # If the index of the current element is greater than 0, add the index of the current element to the result.\n        else:\n            res.append(test_tup.index(i))\n    # Return the list.\n    return res\n    \ndef count_last_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs after the tuple element in the given tuple.\n    '''\n    \n    # Find how many times the last element occurs.\n    # For tuple \"1,2,3,4,5\", the function will return 0 as the last element \"5\" is after the first element.\n    # For tuple \"1,2,3,4,5\", the function will return 1 as the last element \"5\" is after the second element.\n    # For tuple \"1,2,3,4,5\", the function will return 2 as the last element \"5\" is after the third element.\n    # For tuple \"1,2,3,4,5\", the function will return 3 as the last element \"5\" is after the fourth element.\n    # For tuple \"1,2,3,4,5\", the function will return 4 as the last element \"5\" is after the fifth element.\n    \n    # Create a list to store the result.\n    res = []\n    # Iterate through the list.\n    for i in test_tup:\n        # If the index of the current element is 0, add 1 to the result.\n        if i == test_tup[len(test_tup)-1]:\n            res.append(1)\n        # If the index of the current element is greater than 0, add the index of the current element to the result.\n        else:\n            res.append(len(test_tup)-test_tup[::-1].index(i))\n    # Return the list.\n    return res\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    import operator\n    # list2 = []\n    # for i in test_tup:\n    #     for j in test_tup:\n    #         if i == j:\n    #             if i in list2:\n    #                 pass\n    #             else:\n    #                 list2.append(i)\n    # return len(list2)\n    return sum(1 for i in test_tup if i in test_tup[:test_tup.index(i)])\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    num = 0\n    for index in range(len(test_tup)):\n        if test_tup[index] == '1':\n            num += 1\n    return num\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1: return 0\n    else:\n        sum_n = 0\n        for i in range(1,n+1):\n            sum_n = sum_n + (i * (10*i-1))\n        return sum_n\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (n * n + n) / "
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # initializing numbers of decagonals\n    nth_num = -1\n    num = 1\n    decagonal_num = -1\n    d1 = d2 = d3 = 1\n    # finding the number of decagonals\n    while nth_num!= n:\n        decagonal_num = decagonal_num + num\n        d1, d2, d3 = d2, d3, num\n        num += 1\n        # num is the index of the first term of the decagonal number\n        # d1, d2, d3 are the first 3 terms of the decagonals\n        if d1 + d2 == d3:\n            nth_num = decagonal_num + num\n        elif d2 + d3 == d1:\n            nth_num = decagonal_num + num\n        elif d3 + d1 == d2:\n            nth_num = decagonal_num + num\n        else:\n            nth_num = decagonal_num + num\n    return decagonal_num\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    sum = 1\n    count = 1\n    while True:\n        if sum == n:\n            return True\n        elif sum > n:\n            return False\n        else:\n            sum = sum + (count * 10)\n            count = count + 1\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    # To find the index of a decagonal number, add two decagonals together, and add one for the number of\n    # numbers before it.\n    #\n    # For example: n = 1, then the index is 0, and the nth decagonal number is 0+2 = 2.\n    # For n = 2, then the index is 1, and the nth decagonal number is 2+2 = 4.\n    # For n = 3, then the index is 2, and the nth decagonal number is 4+2 = 6.\n    # For n = 4, then the index is 3, and the nth decagonal number is 6+2 = 8.\n    #\n    # To find the nth decagonal number, we need to find the n-1th decagonal number, and the nth number is\n    # the sum of the n-1th and nth decagonal numbers.\n    #\n    # To find the nth number, we have to add the nth number, which is the nth decagonal number, to the n-1th\n    # decagonal number (n-1th decagonal number is the nth decagonal number minus the nth decagonal number).\n    # Then we add the nth number to the n-1th decagonal number, and return it.\n    \n    # If the number of decagonals is not a valid index (or -1), then return False.\n    if n < 1:\n        return False\n    \n    # To find the nth decagonal number, we need to add the nth number to the n-1th decagonal number,\n    # and then return that.\n    #\n    # Find the n-1th decagonal number.\n    # Add the nth number to the n-1th decagonal number.\n    n_1th_decagonal_number = int(decagonals[n-1])\n    \n    # If the n-1th decagonal number is not valid, then return False.\n    if n_1th_decagonal_number < 0:\n        return False\n    \n    # Find the nth number.\n    # Add the nth number to the n-1th decagonal number.\n    nth_number = int(decagonals[n])\n    nth_decagonal_number = nth_number + n_1th_decagonal_number\n    \n    # If the nth number is not valid, then return False.\n    if nth_decagonal_number < 0:\n        return False\n    \n    # Otherwise, return True.\n    return True\n    "
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    d = 1\n    n -= 1\n    while True:\n        d += 1\n        n -= d\n        if n == 0:\n            return True\n        if n < 0:\n            return False\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 0:\n        return False\n    else:\n        l = []\n        for i in range(1, n+1):\n            l.append(i*(i+1))\n        return sum(l)%10 == 0\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (n + 1) / 2\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return sum([int(x)**2 for x in str(n)]) == n\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 0\n    nth_num = 1\n    while count < n:\n        nth_num += count\n        count += 1\n    return nth_num\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return (found, pos)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            pos = i\n            break\n    return (True, pos)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Your code here\n    index = 0\n    found = False\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    idx = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            idx = i\n            break\n    return (True, idx) if idx >= 0 else (False, idx)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # dict = {}\n    # for item in test_list:\n    #     dict[item] = 1\n    # for i in dict.keys():\n    #     if dict[i] > 1:\n    #         return False\n    # return True\n    # return len(dict) == len(test_list)\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    s = set(test_list)\n    if len(s) == len(test_list):\n        return True\n    return False\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    \n    return len(test_list) == len(set(test_list))\n    \n    \n    \ndef duplicate(test_list):\n    '''\n    Write a python function to check if the elements of a given list are duplicate or not.\n    '''\n    \n    return len(test_list)!= len(set(test_list))\n    \n    \ndef is_list_palindrome(l):\n    '''\n    Write a python function to check if the elements of a given list are palindrome or not.\n    '''\n    return all(x == y for x,y in zip(l,l[::-1]))\n    \ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a given number\n    '''\n    return 1 if (n==1 or n==0) else n*factorial(n-1)\n    \ndef is_prime(n):\n    '''\n    Write a python function to check if the given number is a prime or not\n    '''\n    return all(n%i for i in range(2,int(n**0.5)+1))\n    \ndef count_digit(n):\n    '''\n    Write a python function to count the number of digits of a given number\n    '''\n    return sum(int(i) for i in str(n))\n    \ndef is_binary_palindrome(n):\n    '''\n    Write a python function to check if the given number is a binary palindrome or not\n    '''\n    if n==0:\n        return True\n    \n    n = str(n)\n    for i in xrange(0,len(n)/2):\n        if n[i]!=n[-(i+1)]:\n            return False\n    return True\n    \ndef swap_first_last(test_list):\n    '''\n    Write a python function to swap first and last element of a given list\n    '''\n    \n    test_list[0], test_list[-1] = test_list[-1], test_list[0]\n    return test_list\n    \ndef is_perfect_square(n):\n    '''\n    Write a python function to check if the given number is a perfect square or not\n    '''\n    sqrt = int(n**0.5)\n    return sqrt*sqrt == n\n    \ndef is_powers_of_2(n):\n    '''\n    Write a python function to check if the given number is a power of 2 or not\n    '''\n    return int(n**0.5)**2 == n\n    \ndef is_pythagorean(n):\n    '''\n    Write a python function to check if the given number is a pythagorean triple or not\n    '''\n    a,b,c = 1,1,2\n    while (c**2)<n:\n        if c**2 == n:\n            return True\n        a,b,c = b,c,a+b\n    return False\n    \ndef is_power_of_2(n):\n    '''\n    Write a python function to check if the given number is a power of 2 or not\n    '''\n    return (n&(n-1))==0\n    \ndef is_palindrome_permutation(s):\n    '''\n    Write a python function to check if the given string is a permutation of a palindrome or not\n    '''\n    from collections import Counter\n    cnt = Counter(s)\n    return all(cnt[i]%2==0 for i in cnt)\n    \ndef is_palindrome_permutation_alternate(s):\n    '''\n    Write a python function to check if the given string is a permutation of a palindrome or not\n    '''\n    d = {}\n    for i in xrange(len(s)):\n        if s[i] in d:\n            d[s[i]]+=1\n        else:\n            d[s[i]] = 1\n    return all(i%2==0 for i in d.values())\n    \ndef is_palin(n):\n    '''\n    Write a python function to check if the given number is a palindrome or not\n    '''\n    return str(n)==str(n)[::-1]\n    \ndef is_palin_perm(n):\n    '''\n    Write a python function to check if the given number is a permutation of a palindrome or not\n    '''\n    s = str(n)\n    return all(s.count(i)%2==0 for i in set(s))\n    \ndef count_odds(test_list):\n    '''\n    Write a python function to count the number of odds of a given list\n    '''\n    return sum(1 for i in test_list if i%2)\n    \ndef rotate_list(l, n):\n    '''\n    Write a python function to rotate a given list by n positions\n    '''\n    n = n%len(l)\n    return l[-n:]+l[:-n]\n    \ndef reverse_list(test_list):\n    '''\n    Write a python function to reverse a given list\n    '''\n    return test_list[::-1]\n    \ndef rotate_list_reverse(l, n):\n    '''\n    Write a python function to rotate a given list by n positions\n    '''\n    n = n%len(l)\n    return l[-n:]+l[:-n]\n    \ndef rotate_list_reverse_slicing(l, n):\n    '''\n    Write a python function to rotate a given list by n positions\n    '''\n    n = n%len(l)\n    return l[n:]+l[:n]\n    \ndef smallest_difference(l1, l2):\n    '''\n    Write a python function to find the smallest difference between two numbers in a given list\n    '''\n    s1, s2 = sorted(l1), sorted(l2)\n    i = j = 0\n    smallest = abs(s1[i]-s2[j])\n    while i<len(s1) and j<len(s2):\n        smallest = min(smallest, abs(s1[i]-s2[j]))\n        if s1[i]<s2[j]:\n            i+=1\n        elif s1[i]>s2[j]:\n            j+=1\n        else:\n            i+=1\n            j+=1\n    return smallest\n    \ndef rotate_list_two(l, n):\n    '''\n    Write a python function to rotate a given list by n positions\n    '''\n    n = n%len(l)\n    return l[n:]+l[:n]\n    \ndef rotate_list_two_reverse(l, n):\n    '''\n    Write a python function to rotate a given list by n positions\n    '''\n    n = n%len(l)\n    return l[-n:]+l[:-n]\n    \ndef rotate_list_three(l, n):\n    '''\n    Write a python function to rotate a given list by n positions\n    '''\n    n = n%len(l)\n    return l[n:]+l[:n]\n    \ndef rotate_list_three_reverse(l, n):\n    '''\n    Write a python function to rotate a given list by n positions\n    '''\n    n = n%len(l)\n    return l[-n:]+l[:-n]\n    \ndef rotate_list_four(l, n):\n    '''\n    Write a python function to rotate a given list by n positions\n    '''\n    n = n%len(l)\n    return l[n:]+l[:n]\n    \ndef rotate_list_four_reverse(l, n):\n    '''\n    Write a python function to rotate a given list by n positions\n    '''\n    n = n%len(l)\n    return l[-n:]+l[:-n]\n    \ndef rotate_list_five(l, n):\n    '''\n    Write a python function to rotate a given list by n positions\n    '''\n    n = n%len(l)\n    return l[n:]+l[:n]\n    \ndef rotate_list_five_reverse(l, n):\n    '''\n    Write a python function to rotate a given list by n positions\n    ''"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if(test_list[i]==test_list[j]):\n                return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n    "
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    n = len(nums1)\n    res = []\n    for i in range(n):\n        res.append(nums1[i]-nums2[i])\n    return res\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [nums1[i]-nums2[i] for i in range(len(nums1))]\ndef add_list(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    return [nums1[i]+nums2[i] for i in range(len(nums1))]\ndef add_lists(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    return sum(map(sum,zip(nums1,nums2)))\ndef mul_list(nums1,nums2):\n    '''\n    Write a function to multiply two lists element-wise.\n    '''\n    return [nums1[i]*nums2[i] for i in range(len(nums1))]\ndef mult_list(nums1,nums2):\n    '''\n    Write a function to multiply two lists element-wise.\n    '''\n    return sum(map(sum,zip(nums1,nums2)))\ndef sub_lists(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [nums1[i]-nums2[i] for i in range(len(nums1))]\ndef add_matrix(mat1,mat2):\n    '''\n    Write a function to add two matrices element-wise.\n    '''\n    if len(mat1)!= len(mat2) or len(mat1[0])!= len(mat2[0]):\n        print 'error'\n        return \n    return [[mat1[i][j]+mat2[i][j] for j in range(len(mat1[0]))] for i in range(len(mat1))]\ndef sub_matrix(mat1,mat2):\n    '''\n    Write a function to subtract two matrices element-wise.\n    '''\n    if len(mat1)!= len(mat2) or len(mat1[0])!= len(mat2[0]):\n        print 'error'\n        return \n    return [[mat1[i][j]-mat2[i][j] for j in range(len(mat1[0]))] for i in range(len(mat1))]\ndef add_matrices(mat1,mat2):\n    '''\n    Write a function to add two matrices element-wise.\n    '''\n    if len(mat1)!= len(mat2) or len(mat1[0])!= len(mat2[0]):\n        print 'error'\n        return \n    return [[mat1[i][j]+mat2[i][j] for j in range(len(mat1[0]))] for i in range(len(mat1))]\ndef sub_matrices(mat1,mat2):\n    '''\n    Write a function to subtract two matrices element-wise.\n    '''\n    if len(mat1)!= len(mat2) or len(mat1[0])!= len(mat2[0]):\n        print 'error'\n        return \n    return [[mat1[i][j]-mat2[i][j] for j in range(len(mat1[0]))] for i in range(len(mat1))]\ndef mult_matrix(mat1,mat2):\n    '''\n    Write a function to multiply two matrices element-wise.\n    '''\n    if len(mat1[0])!= len(mat2):\n        print 'error'\n        return \n    return [[sum([mat1[i][k]*mat2[k][j] for k in range(len(mat1[0]))]) for j in range(len(mat2[0]))] for i in range(len(mat1))]\ndef mult_matrix_by_vector(mat,vec):\n    '''\n    Write a function to multiply a matrix by a vector element-wise.\n    '''\n    if len(mat)!= len(vec):\n        print 'error'\n        return \n    return [[sum([mat[i][k]*vec[k] for k in range(len(mat[0]))])] for i in range(len(mat))]\ndef add_matrix_by_vector(mat,vec):\n    '''\n    Write a function to add a matrix by a vector element-wise.\n    '''\n    if len(mat)!= len(vec) or len(mat[0])!= 1:\n        print 'error'\n        return \n    return [[mat[i][0]+vec[i]] for i in range(len(mat))]\ndef transpose_matrix(mat):\n    '''\n    Write a function to transpose a matrix element-wise.\n    '''\n    return zip(*mat)\ndef transpose_list(l):\n    '''\n    Write a function to transpose a list element-wise.\n    '''\n    return map(list,zip(*l))\ndef is_equal(mat1,mat2):\n    '''\n    Write a function to test element-wise equality of two matrices.\n    '''\n    if len(mat1)!= len(mat2) or len(mat1[0])!= len(mat2[0]):\n        print 'error'\n        return \n    return [all([mat1[i][j]==mat2[i][j] for j in range(len(mat1[0]))]) for i in range(len(mat1))]\ndef is_equal_list(l1,l2):\n    '''\n    Write a function to test element-wise equality of two lists.\n    '''\n    return all([l1[i]==l2[i] for i in range(len(l1))])\ndef is_subset(set1,set2):\n    '''\n    Write a function to test whether one set is a subset of another set.\n    '''\n    if len(set1) > len(set2):\n        return False\n    for i in range(len(set1)):\n        if set1[i] not in set2:\n            return False\n    return True\ndef is_subset_list(l1,l2):\n    '''\n    Write a function to test whether one list is a subset of another list.\n    '''\n    return all([l1[i] in l2 for i in range(len(l1))])\ndef find_min_value_index(l):\n    '''\n    Write a function to find the index of the min element of a list.\n    '''\n    if len(l) == 0:\n        return None\n    return l.index(min(l))\ndef find_min_value(l):\n    '''\n    Write a function to find the min element of a list.\n    '''\n    if len(l) == 0:\n        return None\n    return min(l)\ndef find_max_value_index(l):\n    '''\n    Write a function to find the index of the max element of a list.\n    '''\n    if len(l) == 0:\n        return None\n    return l.index(max(l))\ndef find_max_value(l):\n    '''\n    Write a function to find the max element of a list.\n    '''\n    if len(l) == 0:\n        return None\n    return max(l)\ndef find_matrix_max_value_index(mat):\n    '''\n    Write a function to find the index of the max element of a matrix.\n    '''\n    if len(mat) == 0 or len(mat[0]) == 0:\n        return None\n    return find_max_value_index([mat[i][j] for i in range(len(mat)) for j in range(len(mat[0]))])\ndef find_matrix_max_value(mat):\n    '''\n    Write a function to find the max element of a matrix.\n    '''\n    if len(mat) == 0 or len(mat[0]) == 0:\n        return None\n    return find_max_value([mat[i][j] for i in range(len(mat)) for j in range(len(mat[0]))])\ndef find_matrix_min_value_index(mat):\n    '''\n    Write a function to find the index of the min element of a matrix.\n    '''\n    if len"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    m=len(nums1)\n    n=len(nums2)\n    if m>n:\n        nums1,nums2=nums2,nums1\n        m,n=n,m\n    nums3=[]\n    i=0\n    while i<n:\n        nums3.append(nums2[i]-nums1[i])\n        i+=1\n    return nums3\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    \n    return [num1-num2 for num1,num2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print 'Invalid'\n        return \n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] - nums2[i]\n    return nums1\n    \ndef main():\n    nums1 = [1,2,3,4,5]\n    nums2 = [6,7,8,9,10]\n    print sub_list(nums1,nums2)\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    list1 = []\n    list2 = []\n    for x in nums1:\n        list1.append(x)\n    for x in nums2:\n        list2.append(x)\n    return list1, list2\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] - nums2[i]\n    return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) > len(nums2):\n        diff = len(nums1) - len(nums2)\n        for i in range(diff):\n            nums2.append(0)\n    else:\n        diff = len(nums2) - len(nums1)\n        for i in range(diff):\n            nums1.append(0)\n    return [nums1[i]-nums2[i] for i in range(len(nums1))]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    list1 = []\n    list2 = []\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            list1.append(nums1[i])\n        else:\n            list1.append(nums1[i])\n            list2.append(nums2[i])\n    return list1,list2\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    assert type(nums1)==type(nums2)\n    assert len(nums1)==len(nums2)\n    if isinstance(nums1,list):\n        for i in range(len(nums1)):\n            nums1[i]-=nums2[i]\n        return nums1\n    else:\n        return nums1-nums2\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    return n>=0 and n<=9 and '9' not in str(n)\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n = int(n)\n    d = [int(x) for x in str(n)]\n    f = [0 for i in range(10)]\n    for i in d:\n        f[i] += 1\n    for i in range(len(d)):\n        if f[i] > d[i]:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n = str(n)\n    d = {}\n    for i in n:\n        d[i] = n.count(i)\n    return all(v <= d[i] for i,v in d.items())\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # your code goes here\n    if(n < 10):\n        return True\n    else:\n        if(n % 10 == 0):\n            return False\n        else:\n            if(n % 10!= 0):\n                c = n / 10\n                if(c % 10 == 0):\n                    return False\n                else:\n                    c /= 10\n                    while(c!= 0):\n                        if(c % 10 == 0):\n                            return False\n                        else:\n                            c /= 10\n                    return True\n            \n            \nprint validate(0)\nprint validate(13)\nprint validate(14)\nprint validate(101)\nprint validate(1019)\nprint validate(10199)\nprint validate(101999)\nprint validate(109999)\nprint validate(100001)\nprint validate(101999)\nprint validate(111111"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n < 0:\n        raise ValueError(\"Number should be a positive integer.\")\n    else:\n        total = 0\n        while n > 0:\n            total += n % 10\n            n = n // 10\n        return total\ndef check_permutation(n1, n2):\n    '''\n    Write a python function to check if two given integers are anagrams of each other.\n    '''\n    return validate(n1) == validate(n2)\ndef check_permutation2(n1, n2):\n    '''\n    Write a python function to check if two given integers are anagrams of each other.\n    '''\n    return sorted(str(n1)) == sorted(str(n2))\ndef check_permutation3(n1, n2):\n    '''\n    Write a python function to check if two given integers are anagrams of each other.\n    '''\n    return str(n1) == str(n2)\ndef check_permutation4(n1, n2):\n    '''\n    Write a python function to check if two given integers are anagrams of each other.\n    '''\n    return len(str(n1)) == len(str(n2))\ndef check_permutation5(n1, n2):\n    '''\n    Write a python function to check if two given integers are anagrams of each other.\n    '''\n    return sorted(str(n1)) == sorted(str(n2))\ndef check_permutation6(n1, n2):\n    '''\n    Write a python function to check if two given integers are anagrams of each other.\n    '''\n    return sorted(str(n1)) == sorted(str(n2))\ndef check_permutation7(n1, n2):\n    '''\n    Write a python function to check if two given integers are anagrams of each other.\n    '''\n    return sorted(str(n1)) == sorted(str(n2))\ndef check_permutation8(n1, n2):\n    '''\n    Write a python function to check if two given integers are anagrams of each other.\n    '''\n    return sorted(str(n1)) == sorted(str(n2))\ndef check_permutation9(n1, n2):\n    '''\n    Write a python function to check if two given integers are anagrams of each other.\n    '''\n    return sorted(str(n1)) == sorted(str(n2))\ndef check_permutation10(n1, n2):\n    '''\n    Write a python function to check if two given integers are anagrams of each other.\n    '''\n    return len(str(n1)) == len(str(n2))\ndef check_permutation11(n1, n2):\n    '''\n    Write a python function to check if two given integers are anagrams of each other.\n    '''\n    return len(str(n1)) == len(str(n2))\ndef check_permutation12(n1, n2):\n    '''\n    Write a python function to check if two given integers are anagrams of each other.\n    '''\n    return len(str(n1)) == len(str(n2))\ndef check_permutation13(n1, n2):\n    '''\n    Write a python function to check if two given integers are anagrams of each other.\n    '''\n    return len(str(n1)) == len(str(n2))\ndef check_permutation14(n1, n2):\n    '''\n    Write a python function to check if two given integers are anagrams of each other.\n    '''\n    return len(str(n1)) == len(str(n2))\ndef check_permutation15(n1, n2):\n    '''\n    Write a python function to check if two given integers are anagrams of each other.\n    '''\n    return len(str(n1)) == len(str(n2))\ndef check_permutation16(n1, n2):\n    '''\n    Write a python function to check if two given integers are anagrams of each other.\n    '''\n    return len(str(n1)) == len(str(n2))\ndef check_permutation17(n1, n2):\n    '''\n    Write a python function to check if two given integers are anagrams of each other.\n    '''\n    return len(str(n1)) == len(str(n2))\ndef check_permutation18(n1, n2):\n    '''\n    Write a python function to check if two given integers are anagrams of each other.\n    '''\n    return len(str(n1)) == len(str(n2))\ndef check_permutation19(n1, n2):\n    '''\n    Write a python function to check if two given integers are anagrams of each other.\n    '''\n    return len(str(n1)) == len(str(n2))\ndef check_permutation20(n1, n2):\n    '''\n    Write a python function to check if two given integers are anagrams of each other.\n    '''\n    return len(str(n1)) == len(str(n2))\ndef check_permutation21(n1, n2):\n    '''\n    Write a python function to check if two given integers are anagrams of each other.\n    '''\n    return len(str(n1)) == len(str(n2))\ndef check_permutation22(n1, n2):\n    '''\n    Write a python function to check if two given integers are anagrams of each other.\n    '''\n    return len(str(n1)) == len(str(n2))\ndef check_permutation23(n1, n2):\n    '''\n    Write a python function to check if two given integers are anagrams of each other.\n    '''\n    return len(str(n1)) == len(str(n2))\ndef check_permutation24(n1, n2):\n    '''\n    Write a python function to check if two given integers are anagrams of each other.\n    '''\n    return len(str(n1)) == len(str(n2))\ndef check_permutation25(n1, n2):\n    '''\n    Write a python function to check if two given integers are anagrams of each other.\n    '''\n    return len(str(n1)) == len(str(n2))\ndef check_permutation26(n1, n2):\n    '''\n    Write a python function to check if two given integers are anagrams of each other.\n    '''\n    return len(str(n1)) == len(str(n2))\ndef check_permutation27(n1, n2):\n    '''\n    Write a python function to check if two given integers are anagrams of each other.\n    '''\n    return len(str(n1)) == len(str(n2))\ndef check_permutation28(n1, n2):\n    '''\n    Write a python function to check if two given integers are anagrams of each other.\n    '''\n    return len(str(n1)) == len(str(n2))\ndef check_permutation29(n1, n2):\n    '''\n    Write a python function to check if two given integers are anagrams of each other.\n    '''\n    return len(str(n1)) == len(str(n2))\ndef check_permutation30(n1, n2):\n    '''\n    Write a python function to check if two given integers are anagrams of each other.\n    '''\n    return len(str(n1)) == len(str(n2))\ndef check_permutation31(n1, n2):\n    '''\n    Write a python function to check if two given integers are anagrams of each other.\n    '''\n    return len(str(n1)) == len(str(n2))\ndef check_permutation32(n1, n2):\n    '''\n    Write a python function to check if two given integers are anagrams of each other.\n    '''\n    return len(str(n1)) == len(str(n2))\ndef check_permutation33(n1, n2):\n    '''\n    Write a python function to check if two given integers are anagrams of each other"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n<=9: \n        return True\n    else: \n        count = [0 for i in range(10)]\n        while n>0: \n            digit = n%10\n            count[digit] += 1\n            n = n//10\n        for i in range(10): \n            if count[i]>1: \n                return False\n        return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n = str(n)\n    d = dict()\n    for i in n:\n        d[i] = d.get(i, 0) + 1\n    for j in d.values():\n        if j > int(j):\n            return False\n    return True\ndef isPrime(n):\n    '''\n    Write a python function to check whether the given number is a prime number or not\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\ndef isPalindrome(n):\n    '''\n    Write a python function to check whether the given number is a palindrome number or not\n    '''\n    n = str(n)\n    i = 0\n    j = len(n) - 1\n    while i < j:\n        if n[i]!= n[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\ndef isAnagram(s1, s2):\n    '''\n    Write a python function to check whether the given strings are anagram or not\n    '''\n    s1 = s1.lower()\n    s2 = s2.lower()\n    if len(s1)!= len(s2):\n        return False\n    h1 = dict()\n    h2 = dict()\n    for i in s1:\n        h1[i] = h1.get(i, 0) + 1\n    for j in s2:\n        h2[j] = h2.get(j, 0) + 1\n    return h1 == h2\ndef isArmstrong(n):\n    '''\n    Write a python function to check whether the given number is an Armstrong number or not\n    '''\n    n = int(n)\n    temp = n\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp /= 10\n    if n == sum:\n        return True\n    else:\n        return False\ndef isPerfect(n):\n    '''\n    Write a python function to check whether the given number is a perfect number or not\n    '''\n    n = int(n)\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    if sum == n:\n        return True\n    else:\n        return False\ndef isUgly(n):\n    '''\n    Write a python function to check whether the given number is a ugly number or not\n    '''\n    n = int(n)\n    if n == 1:\n        return True\n    elif n == 2 or n == 3:\n        return True\n    elif n == 4 or n == 5 or n == 6:\n        return False\n    elif n % 2 == 0 or n % 3 == 0 or n % 4 == 0 or n % 5 == 0 or n % 6 == 0:\n        return False\n    else:\n        return True\ndef isPallindrome(n):\n    '''\n    Write a python function to check whether the given number is a palindrome number or not\n    '''\n    n = str(n)\n    i = 0\n    j = len(n) - 1\n    while i < j:\n        if n[i]!= n[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\ndef isPanagram(s):\n    '''\n    Write a python function to check whether the given string is a panagram or not\n    '''\n    s = s.lower()\n    l = []\n    for i in range(97, 123):\n        l.append(chr(i))\n    for j in l:\n        if j not in s:\n            return False\n    return True\ndef isSubString(s1, s2):\n    '''\n    Write a python function to check whether the given string is a substring of another string or not\n    '''\n    s1 = s1.lower()\n    s2 = s2.lower()\n    for i in range(0, len(s2)):\n        if s2[i] in s1:\n            if s2[i:].startswith(s1):\n                return True\n            else:\n                return False\n    return False\ndef isSubsequence(s1, s2):\n    '''\n    Write a python function to check whether the given string is a subsequence of another string or not\n    '''\n    s1 = s1.lower()\n    s2 = s2.lower()\n    for i in range(0, len(s2)):\n        if s2[i] in s1:\n            if s1.startswith(s2[i:]):\n                return True\n            else:\n                return False\n    return False\ndef isSupersequence(s1, s2):\n    '''\n    Write a python function to check whether the given string is a supersequence of another string or not\n    '''\n    s1 = s1.lower()\n    s2 = s2.lower()\n    for i in range(0, len(s2)):\n        if s2[i] in s1:\n            if s1.endswith(s2[i:]):\n                return True\n            else:\n                return False\n    return False\ndef isReverse(s1, s2):\n    '''\n    Write a python function to check whether the given string is a reverse string of another string or not\n    '''\n    s1 = s1.lower()\n    s2 = s2.lower()\n    if len(s1)!= len(s2):\n        return False\n    i = 0\n    j = len(s1) - 1\n    while i < j:\n        if s1[i]!= s2[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\ndef isRotate(s1, s2):\n    '''\n    Write a python function to check whether the given string is a rotate string of another string or not\n    '''\n    s1 = s1.lower()\n    s2 = s2.lower()\n    if len(s1)!= len(s2):\n        return False\n    i = 0\n    j = len(s1) - 1\n    while i < j:\n        if s1[i]!= s2[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\ndef isBinary(n):\n    '''\n    Write a python function to check whether the given number is a binary number or not\n    '''\n    n = int(n)\n    temp = n\n    if n > 1:\n        while n > 1:\n            if n % 2 == 0:\n                n /= 2\n            else:\n                return False\n    elif n == 1:\n        return True\n    return False\ndef isPerfectSquare(n):\n    '''\n    Write a python function to check whether the given number is a perfect square or not\n    '''\n    n = int(n)\n    temp = n\n    if temp > 0:\n        if temp == 1:\n            return True\n        elif temp == 2:\n            return True\n        else:\n            i = 2\n            while i <= temp:\n                if temp % i == 0:\n                    return False\n                i += 1\n            return True\n    else:\n        return False\ndef isPerfectCube(n):\n    '''\n    Write a python function to check whether the given number is a perfect cube or not\n    '''\n    n = int(n)\n    temp = n\n    if temp > 0:\n        if temp == 1:\n            return True\n        elif temp == 2:\n            return True\n        else:\n            i = 2\n            while i <= temp:\n                if temp % i == 0:\n                    if temp / i == i:\n                        return True\n                    else:\n                        return False\n                i += 1\n            return True\n    else:\n        return False\ndef isPentagonal(n):\n    '''\n    Write a python function to check whether the given number is a pentagonal number or not\n    '''\n    n = int(n)\n    temp = n\n    if temp > 0:\n        if temp == 1:\n            return True\n        elif temp == 2:\n            return True\n        else:\n            i = 2\n            while i <= temp:\n                if temp % i ="
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = [0]*10\n    n = str(n)\n    for x in n:\n        count[int(x)] += 1\n    return all(i <= j for i,j in zip(count,count[1:]))\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d = {'0':0, '1':0, '2':0, '3':0, '4':0, '5':0, '6':0, '7':0, '8':0, '9':0}\n    \n    for i in str(n):\n        if i in d:\n            d[i] += 1\n        else:\n            return False\n    for i in d:\n        if d[i] > int(i):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    import collections\n    if type(n)==int:\n        if n<=0:\n            return 0\n        elif n==1:\n            return 1\n        else:\n            count = collections.Counter(str(n))\n            for k,v in count.iteritems():\n                if v>k:\n                    return 0\n                else:\n                    return 1\n    else:\n        return 0\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    #print(element)\n    #print(list)\n    #print(len(list))\n    if len(list) == 0:\n        return True\n    elif len(list) == 1:\n        #print('a')\n        return list[0] == element\n    elif len(list) > 1:\n        if list[0] == element:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return len(list) == 1 and list[0] == element\n    \n    \ndef check_list(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if type(list) is not list:\n        raise TypeError('list is not a list')\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n    \n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(elem == element for elem in list)\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # if element in list:\n    #     return True\n    # else:\n    #     return False\n    # \n    # \n    # for i in list:\n    #     if i!=element:\n    #         return False\n    # \n    # return True\n    # \n    # \n    # for i in list:\n    #     if i!=element:\n    #         return False\n    # \n    # return True\n    # \n    # \n    # return True\n    \n    for i in list:\n        if i!=element:\n            return False\n    \n    return True\n    \n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if type(element)!= type(list):\n        return False\n    for i in list:\n        if type(i)!= type(list):\n            return False\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(elem == element for elem in list)\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'ab{2,3}', text):\n        print('Match found')\n    else:\n        print('Match not found')\ntext_match_two_three(text)\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r\"(ab){2,3}\", text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    p = re.compile(r'ab{2,3}')\n    if p.match(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search(\"^a((?!b)[a-z]{2})b$\",text) is not None\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'ab{2,3}', text))\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.match('ab{2,3}',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    regex = re.compile(r'ab{2,3}')\n    return regex.search(text)\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    result = re.search(r'ab', text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if(re.search('ab{2,3}',text)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search('ab{2,3}', text)\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return a[0]\n    if k == 1:\n        return max(a)\n    max_sum_subarray = []\n    for i in range(k):\n        max_sum_subarray.append(max(a))\n        a = [a[0] + a[1]] + a[2:]\n    return max(max_sum_subarray)\n    \ndef max_sub_array_sum_optimal(a, n):\n    '''\n    Write a function to find the maximum sum of a contiguous subarray within a one-dimensional array of numbers.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return a[0]\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, n):\n        current_sum = max(current_sum + a[i], a[i])\n        max_sum = max(current_sum, max_sum)\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if len(a) < k:\n        return 0\n    repeated = a*k\n    for i in range(k):\n        if i==0:\n            sums = repeated[i]\n        else:\n            sums = sums + repeated[i]\n    return sums\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initializing maximum sum as 0\n    maximum_sum = 0\n    \n    # Initializing current sum to 0\n    current_sum = 0\n    \n    for i in range(n):\n        # Adding current element to current sum\n        current_sum += a[i]\n        \n        # If current sum is more than the previous maximum sum and current sum is divisible by k, then update maximum sum and\n        # reset current sum to 0\n        if i >= k-1:\n            if current_sum > maximum_sum and current_sum % k == 0:\n                maximum_sum = current_sum\n            \n            current_sum -= a[i-(k-1)]\n    \n    # If maximum sum is negative, then return 0\n    if maximum_sum < 0:\n        return 0\n    \n    return maximum_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    k = k-1\n    max_sum = 0\n    sum = 0\n    for i in range(n):\n        sum = sum + a[i]\n        if sum > max_sum:\n            max_sum = sum\n        if i + k < n:\n            sum = sum - a[i + k]\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    def max_sum(arr):\n        sum = 0\n        max_sum = 0\n        for i in range(0, n):\n            if i == 0:\n                max_sum = arr[i]\n            else:\n                max_sum = max(max_sum + arr[i], arr[i])\n            sum += arr[i]\n        return max_sum, sum\n    \n    def repeated_arr_sum(arr, k):\n        arr_sum = 0\n        for i in range(0, k):\n            if i == 0:\n                arr_sum += arr[i]\n            else:\n                arr_sum += arr[i]\n        return arr_sum\n    \n    def max_repeated_arr_sum(arr, k):\n        max_sum = repeated_arr_sum(arr, k)\n        for i in range(0, k):\n            for j in range(0, k):\n                arr_sum = repeated_arr_sum(arr, i) + repeated_arr_sum(arr, j)\n                if arr_sum > max_sum:\n                    max_sum = arr_sum\n        return max_sum\n    \n    if n == 1:\n        return a[0]\n    max_arr_sum, arr_sum = max_sum(a)\n    if arr_sum == n:\n        return max_arr_sum\n    else:\n        arr_sum -= max_arr_sum\n        return max_repeated_arr_sum(a, arr_sum/n)\n    \n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return a[0]\n    \n    max_k_sum = -100000\n    for i in range(n-k+1):\n        max_k_sum = max(max_k_sum, max_sub_array_sum_repeated(a, i, k-1) + a[i]*k)\n    return max_k_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    def max_sub_array_sum(a, k):\n        '''\n        Given a non-empty array of integers, find the maximum sum of a non-empty subarray of length k.\n        For example, if the array is [1,2,1,2,4,0], and k is 3, we should return 7, since we can create the subarray [4,0,1] with sum 7.\n        '''\n        # subarray_sum = [0 for i in range(k + 1)]\n        # subarray_sum[0] = -1 # first element cannot be a part of the subarray\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    if n == 1:\n        return a[0]\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    result = 0\n    start = 0\n    for i in range(n):\n        if i < k:\n            result = max(result, a[i])\n        else:\n            result = max(result, result + a[i] - a[start])\n            start = (start + 1) % k\n    return result\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = a[0] \n    if n == 1: \n        return a[0]\n    for i in range(1, n-k+1): \n        max_sum = max(max_sum, max_sum + a[i+k-1] - a[i-1])\n    return max_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if type(n)!= int:\n        raise TypeError('Invalid input')\n    if n < 1:\n        raise ValueError('Invalid input')\n    if n == 1:\n        return 1\n    else:\n        return 2 * n**2 + square_Sum(n-1)\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result = result + i ** 2\n    return result\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total = total + (i+1)**2\n    return total\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    if n < 1:\n        return None\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(n):\n        if i %2 ==0:\n            sum = sum + (i*i)\n    return sum\n    \ndef factorial(n):\n    '''\n    Write a python function to return the factorial of a given number n, where n is a non-negative integer.\n    '''\n    if n < 0:\n        return 'Factorial is not defined for negative integers'\n    elif n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([(i**2) for i in range(n) if i%2==0])\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n**2) + square_Sum(n-2)\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # your code here\n    return sum([x**2 for x in range(1,n+1) if x%2==0])\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n==0:\n        return 0\n    return n**2+square_Sum(n-1)\n    \ndef power_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of first n odd natural numbers powered by 2.\n    '''\n    if n==0:\n        return 0\n    return power_Sum(n-1)+(n+1)**2\n    \ndef triangular_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the first n triangular numbers.\n    '''\n    if n==0:\n        return 0\n    return n+triangular_Sum(n-1)\n    \ndef pentagonal_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the first n pentagonal numbers.\n    '''\n    if n==0:\n        return 0\n    return n*(3*n-1)//2\n    \ndef hexagonal_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the first n hexagonal numbers.\n    '''\n    if n==0:\n        return 0\n    return n*(2*n-1)\n    \ndef heptagonal_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the first n heptagonal numbers.\n    '''\n    if n==0:\n        return 0\n    return n*(5*n-3)//2\n    \ndef octagonal_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the first n octagonal numbers.\n    '''\n    if n==0:\n        return 0\n    return n*(3*n-2)\n    \ndef nonagonal_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the first n nonagonal numbers.\n    '''\n    if n==0:\n        return 0\n    return n*(2*n-1)\n    \ndef arctic_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the first n arctic numbers.\n    '''\n    if n==0:\n        return 0\n    return n*(n+1)//2\n    \ndef rhombus_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the first n rhombus numbers.\n    '''\n    if n==0:\n        return 0\n    return (n+1)**2\n    \ndef square_Cube_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the first n square cubed numbers.\n    '''\n    if n==0:\n        return 0\n    return n**3\n    \ndef cube_Square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the first n cube cubed numbers.\n    '''\n    if n==0:\n        return 0\n    return n**2\n    \ndef hexagonal_Cube_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the first n hexagonal cubed numbers.\n    '''\n    if n==0:\n        return 0\n    return n*(2*n-1)\n    \ndef nonagonal_Cube_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the first n nonagonal cubed numbers.\n    '''\n    if n==0:\n        return 0\n    return n*(n+1)\n    \ndef triangular_Cube_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the first n triangular cubed numbers.\n    '''\n    if n==0:\n        return 0\n    return n*(n+1)**2//4\n    \ndef pentagonal_Cube_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the first n pentagonal cubed numbers.\n    '''\n    if n==0:\n        return 0\n    return n*(3*n-1)\n    \ndef heptagonal_Cube_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the first n heptagonal cubed numbers.\n    '''\n    if n==0:\n        return 0\n    return n*(5*n-3)\n    \ndef octagonal_Cube_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the first n octagonal cubed numbers.\n    '''\n    if n==0:\n        return 0\n    return n*(3*n-2)\n    \ndef nonagonal_Cube_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the first n nonagonal cubed numbers.\n    '''\n    if n==0:\n        return 0\n    return n*(2*n-1)\n    \ndef arctic_Cube_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the first n arctic cubed numbers.\n    '''\n    if n==0:\n        return 0\n    return n*(n+1)\n    \ndef rhombus_Cube_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the first n rhombus cubed numbers.\n    '''\n    if n==0:\n        return 0\n    return (n+1)**3\n    \ndef square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the first n squares.\n    '''\n    if n==0:\n        return 0\n    return n**2+square_Sum(n-1)\n    \ndef cube_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the first n cubes.\n    '''\n    if n==0:\n        return 0\n    return n**3+cube_Sum(n-1)\n    \ndef hexagonal_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the first n hexagonal numbers.\n    '''\n    if n==0:\n        return 0\n    return n*(2*n-1)\n    \ndef nonagonal_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the first n nonagonal numbers.\n    '''\n    if n==0:\n        return 0\n    return n*(n+1)\n    \ndef triangular_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the first n triangular numbers.\n    '''\n    if n==0:\n        return 0\n    return n*(n+1)//2\n    \ndef pentagonal_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the first n pentagonal numbers.\n    '''\n    if n==0:\n        return 0\n    return n*(3*n-1)//2\n    \ndef octagonal_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the first n octagonal numbers.\n    '''\n    if n==0:\n        return 0\n    return n*(3*n-2)\n    \ndef nonagonal_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the first n nonagonal numbers.\n    '''\n    if n==0:\n        return 0\n    return n*(2*n-1)\n    \ndef arctic_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the first n arctic numbers.\n    '''\n    if n==0:\n        return 0\n    return n*(n+1)\n    \ndef rhombus_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the first n rhombus numbers.\n    '''\n    if n==0:\n        return 0\n    return (n+"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    return n**2 + square_Sum(n-1)\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maximum = 0\n    for each in list1:\n        if len(each) > maximum:\n            maximum = len(each)\n    return maximum\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    max_list = []\n    for x in list1:\n        if len(x) > max_length:\n            max_length = len(x)\n            max_list = x\n    return max_list\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    \n    new_list = []\n    for item in list1:\n        if len(item) == max(map(len,list1)):\n            new_list.append(item)\n    return new_list\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for list in list1:\n        if len(list)>max_length:\n            max_length=len(list)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length_list = []\n    for list_ele in list1:\n        length_list.append(len(list_ele))\n    return length_list\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for item in list1:\n        if max_length < len(item):\n            max_length = len(item)\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = -1\n    max_list = []\n    for l in list1:\n        if len(l) > length:\n            length = len(l)\n            max_list = l\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if max_len < len(i):\n            max_len = len(i)\n    return max_len\n    \ndef pairs(list1, n):\n    '''\n    Write a function to find the list of pairs with given sum in a list of lists.\n    '''\n    pairs_list = []\n    for i in list1:\n        if sum(i) == n:\n            pairs_list.append(i)\n    return pairs_list\n    \ndef unique_elements(list1):\n    '''\n    Write a function to find the unique elements of a list.\n    '''\n    unique_list = []\n    for i in list1:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n    \ndef duplicate_elements(list1):\n    '''\n    Write a function to find the duplicate elements in a list.\n    '''\n    duplicate_list = []\n    for i in list1:\n        if list1.count(i) > 1:\n            duplicate_list.append(i)\n    return duplicate_list\n    \ndef product(list1):\n    '''\n    Write a function to find the product of elements in a list.\n    '''\n    product_list = 1\n    for i in list1:\n        product_list *= i\n    return product_list\n    \ndef reverse(list1):\n    '''\n    Write a function to reverse a list.\n    '''\n    return list1[::-1]\n    \ndef palindrome(str1):\n    '''\n    Write a function to check whether a string is palindrome or not.\n    '''\n    return str1 == str1[::-1]\n    \ndef rotate(list1, n):\n    '''\n    Write a function to rotate a list by n places.\n    '''\n    if n > len(list1):\n        return list1\n    return list1[n:len(list1)] + list1[:n]\n    \ndef is_rotation(str1, str2):\n    '''\n    Write a function to check whether two strings are rotations of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    return str1 in rotate(str2, 1) or str2 in rotate(str1, 1)\n    \ndef count_hi(str1):\n    '''\n    Write a function to count the number of times 'hi' is present in a string.\n    '''\n    return str1.count('hi')\n    \ndef count_code(str1):\n    '''\n    Write a function to count the number of times 'code' is present in a string.\n    '''\n    return str1.count('code')\n    \ndef count_hi_code(str1):\n    '''\n    Write a function to count the number of times 'hi' and 'code' is present in a string.\n    '''\n    return str1.count('hi') + str1.count('code')\n    \ndef is_abecedarian(str1):\n    '''\n    Write a function to check whether a string is abecedarian or not.\n    '''\n    for i in range(1, len(str1)):\n        if str1[i - 1] > str1[i]:\n            return False\n    return True\n    \ndef is_numeric(str1):\n    '''\n    Write a function to check whether a string is numeric or not.\n    '''\n    for i in str1:\n        if not (i >= '0' and i <= '9'):\n            return False\n    return True\n    \ndef is_pangram(str1):\n    '''\n    Write a function to check whether a string is pangram or not.\n    '''\n    return len(set(str1.lower())) == 26\n    \ndef is_lower(str1):\n    '''\n    Write a function to check whether a string is lowercase or not.\n    '''\n    for i in str1:\n        if not (i >= 'a' and i <= 'z'):\n            return False\n    return True\n    \ndef is_lower_alphabet(str1):\n    '''\n    Write a function to check whether a string is lowercase alphabet or not.\n    '''\n    for i in str1:\n        if not (i >= 'a' and i <= 'z'):\n            return False\n    return True\n    \ndef is_lowercase_string(str1):\n    '''\n    Write a function to check whether a string is lowercase string or not.\n    '''\n    for i in str1:\n        if not (i >= 'a' and i <= 'z'):\n            return False\n    return True\n    \ndef is_mixed_case(str1):\n    '''\n    Write a function to check whether a string is mixed case or not.\n    '''\n    for i in str1:\n        if not (i >= 'a' and i <= 'z') and not (i >= 'A' and i <= 'Z'):\n            return False\n    return True\n    \ndef is_mixed_case_string(str1):\n    '''\n    Write a function to check whether a string is mixed case string or not.\n    '''\n    for i in str1:\n        if not (i >= 'a' and i <= 'z') and not (i >= 'A' and i <= 'Z'):\n            return False\n    return True\n    \ndef is_unique_chars(str1):\n    '''\n    Write a function to check whether a string has all unique characters or not.\n    '''\n    sorted_str1 = sorted(str1)\n    for i in range(len(sorted_str1) - 1):\n        if sorted_str1[i] == sorted_str1[i + 1]:\n            return False\n    return True\n    \ndef is_punctuation(str1):\n    '''\n    Write a function to check whether a string is punctuation or not.\n    '''\n    for i in str1:\n        if not (i >= 'a' and i <= 'z') and not (i >= 'A' and i <= 'Z'):\n            return False\n    return True\n    \ndef is_uppercase(str1):\n    '''\n    Write a function to check whether a string is uppercase or not.\n    '''\n    for i in str1:\n        if not (i >= 'A' and i <= 'Z'):\n            return False\n    return True\n    \ndef is_uppercase_string(str1):\n    '''\n    Write a function to check whether a string is uppercase string or not.\n    '''\n    for i in str1:\n        if not (i >= 'A' and i <= 'Z'):\n            return False\n    return True\n    \ndef is_alphabetic(str1):\n    '''\n    Write a function to check whether a string is alphabetic or not.\n    '''\n    for i in str1:\n        if not (i >= 'a' and i <= 'z') and not (i >= 'A' and i <= 'Z'):\n            return False\n    return True\n    \ndef is_alphabetic_string(str1):\n    '''\n    Write a function to check whether a string is alphabetic string or not.\n    '''\n    for i in str1:\n        if not (i >= 'a' and i <= 'z') and not (i >= 'A' and i <= 'Z'):\n            return False\n    return True\n    \ndef is_alphanumeric(str1):\n    '''\n    Write a function to check whether a string is alphanumeric or not.\n    '''\n    for i in str1:\n        if not (i >= 'a' and i <= 'z') and not (i >= 'A' and i <= 'Z') and not (i >= '0' and i <= '9'):\n            return False\n    return True\n    \ndef is_alphanumeric_string(str1):\n    '''\n    Write a function to check whether a string is alphanumeric string or not.\n    '''\n    for i in str1:\n        if not (i >= 'a' and i <= 'z') and not (i >= 'A' and i <= 'Z') and not (i >= '0' and i <= '9')"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maximum = 0\n    for i in list1:\n        if len(i) > maximum:\n            maximum = len(i)\n    return maximum\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 0 or k < 0: \n        return 0\n    if n == 0: \n        return 1\n    if k == 0: \n        return 0\n    return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k - 1) \n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # This is a DP problem where the value at a particular position is the total number of ways\n    \n    # dp = [ [0 for i in range(k+1)] for j in range(n+1)]\n    # for i in range(1, n+1):\n    #     for j in range(1, k+1):\n    #         if j == 1:\n    #             dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n    #         elif i == j:\n    #             dp[i][j] = dp[i-1][j-1]\n    #         else:\n    #             dp[i][j] = dp[i-1][j-1] + dp[i-1][j] - dp[i-1][j-2]\n    # return dp[n][k]\n    \n    # Using a 1-d array instead of a 2-d array\n    dp = [0 for i in range(k+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if j == 1:\n                dp[j] = dp[j-1] + dp[j-1]\n            elif i == j:\n                dp[j] = dp[j-1]\n            else:\n                dp[j] = dp[j-1] + dp[j] - dp[j-2]\n    return dp[k]\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    a = [[0 for x in range(k+1)] for x in range(n+1)] \n    a[0][0] = 1 \n    for i in range(1, n+1): \n        for j in range(1, k+1): \n            if i == 1: \n                a[i][j] = a[i-1][j] + a[i][j-1] \n            else: \n                a[i][j] = a[i-1][j] + a[i][j-1] + a[i-1][j-1] \n    return a[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    #base case\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    if k == 0:\n        return 0\n    #without repainting the last post\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k-1)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def _count_no_of_ways(n, k):\n        dp = [[0 for i in range(k)] for j in range(n)]\n        for i in range(k):\n            dp[0][i] = 1\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    return count_no_of_ways_rec(n, k, {0: 1})\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k < 0 or n < 0:\n        return 0\n    if n == 0 and k == 0:\n        return 1\n    if n == 1 and k == 1:\n        return 1\n    if n == 1 and k == 0:\n        return 0\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k) + count_no_of_ways(n-1, k-1)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 0:\n        return 1\n    if n == 1:\n        return k\n    if k > n:\n        return 0\n    return count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1:\n        return k\n    elif n == 2:\n        return 2**k\n    else:\n        return count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # The DP solution has time complexity O(nk)\n    # The other solution is the Backtracking one\n    if n == 1: \n        return k\n    \n    # dp[i][j] is the number of ways for n post of i colors and j posts\n    dp = [[0 for j in xrange(k + 1)] for i in xrange(n + 1)]\n    dp[1][0] = 1\n    dp[1][1] = 1\n    for i in xrange(2, n + 1):\n        for j in xrange(1, min(i, k) + 1):\n            dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n        \n    return dp[n][k]\n    \ndef make_possible_matrix(n, k): \n    '''\n    Write a function that takes as input two numbers n and k, and returns a 2-D array of size n x k such that when row i is chosen, the jth element is the number of ways of choosing the jth color from the first i rows. \n    '''\n    \n    # Making the 2D array of size n x k \n    matrix = [[0 for j in xrange(k)] for i in xrange(n)]\n    matrix[0][0] = 1\n    for i in xrange(1, n):\n        for j in xrange(k):\n            matrix[i][j] = matrix[i-1][j]\n            if j > 0:\n                matrix[i][j] += matrix[i-1][j-1]\n    return matrix\n    \ndef count_no_of_ways_matrix(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # Making the 2D array of size n x k \n    matrix = make_possible_matrix(n, k)\n    \n    return matrix[n-1][k-1]\n    \ndef is_possible_to_arrange(arr, i): \n    '''\n    Write a function to check whether a sequence of integers arr can be arranged into a staircase shape. \n    '''\n    \n    n = len(arr)\n    if n == 1:\n        return False\n    \n    # for each element in arr, it has to be smaller or equal to the value of the last element\n    for j in xrange(n):\n        if arr[j] >= arr[n - 1]:\n            return False\n    \n    # for each element in arr, it has to be greater or equal to the value of the previous element\n    for j in xrange(n-1):\n        if arr[j] <= arr[j + 1]:\n            return False\n    \n    # for each element in arr, it has to be smaller or equal to the value of the next to last element\n    for j in xrange(n-2):\n        if arr[j] >= arr[j + 2]:\n            return False\n    \n    return True\n    \ndef arrange_stairs(arr): \n    '''\n    Write a function that arranges a given list of integers into a staircase shape. \n    '''\n    \n    n = len(arr)\n    \n    # if there is only one element, it is a staircase\n    if n == 1:\n        return arr\n    \n    # make the staircase\n    for i in xrange(n):\n        if is_possible_to_arrange(arr, i):\n            return arr[:i] + [arr[i]] + arr[i+1:]\n        \ndef permutations(n, k):\n    '''\n    Write a function to return all the permutations of a given list of integers. \n    '''\n    \n    # The DP solution has time complexity O(k^n)\n    \n    if n == 0: \n        return [[]]\n    \n    # dp[i][j] is the number of permutations of the first i elements of the given array with j colors\n    dp = [[0 for j in xrange(k + 1)] for i in xrange(n + 1)]\n    dp[0][0] = 1\n    for i in xrange(1, n + 1):\n        for j in xrange(k + 1):\n            dp[i][j] = dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i-1][j - 1]\n    return dp[n][k]\n    \ndef permute_in_place(n, k): \n    '''\n    Write a function to return all the permutations of a given list of integers in place. \n    '''\n    \n    # The DP solution has time complexity O(k^n)\n    \n    if n == 0: \n        return [[]]\n    \n    # dp[i][j] is the number of permutations of the first i elements of the given array with j colors\n    dp = [[0 for j in xrange(k + 1)] for i in xrange(n + 1)]\n    dp[0][0] = 1\n    for i in xrange(1, n + 1):\n        for j in xrange(1, min(i, k) + 1):\n            dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n    \n    return dp[n][k]\n    \ndef fib(n):\n    '''\n    Write a function to compute the nth Fibonacci number, where n is a non-negative integer.\n    '''\n    \n    # The DP solution has time complexity O(n)\n    \n    if n == 0: \n        return 0\n    \n    # dp[i] is the nth Fibonacci number\n    dp = [0 for j in xrange(n + 1)]\n    dp[1] = 1\n    for i in xrange(2, n + 1):\n        dp[i] = dp[i-1] + dp[i-2]\n    \n    return dp[n]\n    \ndef min_cost_to_hire(days, costs): \n    '''\n    Write a function that takes in a vector of integers representing the cost of hiring employees for a given day, and returns the minimum cost to hire a number of employees who can work that day.\n    '''\n    \n    # The DP solution has time complexity O(nk)\n    \n    # dp[i][j] is the minimum cost to hire the first j employees that can work on the i day\n    dp = [[0 for j in xrange(days[0])] for i in xrange(len(costs))]\n    dp[0][0] = costs[0]\n    for i in xrange(1, days[0]):\n        dp[0][i] = dp[0][i-1] + costs[i]\n    \n    for i in xrange(1, len(costs)):\n        for j in xrange(days[i]):\n            if j == 0:\n                dp[i][j] = dp[i-1][j] + costs[i]\n            else:\n                dp[i][j] = min(dp[i-1][j-1], dp[i-1][j]) + costs[i]\n    \n    return min(dp[len(costs)-1])\n    \ndef min_cost_to_hire_efficient(days, costs): \n    '''\n    Write a function that takes in a vector of integers representing the cost of hiring employees for a given day, and returns the minimum cost to hire a number of employees who can work that day.\n    '''\n    \n    # The DP solution has time complexity O(nk)\n    \n    # dp[i][j] is the minimum cost to hire the first j employees that can work on the i day\n    dp = [0 for j in xrange(days[0])]\n    for i in xrange(1, days[0]):\n        dp[i] = costs[i] + dp[i-1]\n    \n    for i in xrange(1, len(costs)):\n        dp[0] = dp[0] + costs[i]\n        for j in xrange(1, days[i]):\n            d"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n<m:\n        return -1\n    else:\n        return n/m\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = m//n\n    return quotient\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    div=n/m\n    return div\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return(n/m)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return None\n    else:\n        return n // m\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n / m)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n%m==0:\n        return n/m\n    else:\n        return (n/m)+1\ndef findAverage(n1,n2,n3):\n    '''\n    Write a python function to find the average of three numbers.\n    '''\n    return (n1+n2+n3)/3\ndef leapYear(year):\n    '''\n    Write a python function to check if a year is a leap year or not.\n    '''\n    if (year%4==0):\n        if (year%100==0):\n            if (year%400==0):\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef isPrime(num):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if num>1:\n        for i in range(2,num):\n            if (num%i)==0:\n                return False\n        return True\n    else:\n        return False\ndef getPrimeFactors(num):\n    '''\n    Write a python function to get prime factors of a number.\n    '''\n    l=[]\n    while num%2==0:\n        num=num/2\n        l.append(2)\n    for i in range(3,int(num**0.5)+1,2):\n        while num%i==0:\n            num=num/i\n            l.append(i)\n    if num>2:\n        l.append(num)\n    return l\ndef isPalindrome(n):\n    '''\n    Write a python function to check if a number is a palindrome or not.\n    '''\n    reverse=0\n    while n>0:\n        reverse=(reverse*10)+n%10\n        n=n/10\n    return reverse==n\ndef factorial(n):\n    '''\n    Write a python function to find factorial of a number.\n    '''\n    fact=1\n    for i in range(1,n+1):\n        fact=fact*i\n    return fact\ndef gcd(a,b):\n    '''\n    Write a python function to find GCD of two numbers.\n    '''\n    if a>b:\n        a,b=b,a\n    while a%b!=0:\n        a,b=b,a%b\n    return b\ndef coprime(a,b):\n    '''\n    Write a python function to check if two numbers are coprime or not.\n    '''\n    return gcd(a,b)==1\ndef isPerfectNumber(n):\n    '''\n    Write a python function to check if a number is perfect or not.\n    '''\n    if n<1:\n        return False\n    if n==1:\n        return False\n    s=0\n    for i in range(1,n):\n        if n%i==0:\n            s=s+i\n    return s==n\ndef isPandigital(num):\n    '''\n    Write a python function to check if a number is pandigital or not.\n    '''\n    if len(str(num))!=9:\n        return False\n    for i in range(1,10):\n        if str(i)!=str(num)[0:len(str(i))]:\n            return False\n    return True\ndef isArmstrong(n):\n    '''\n    Write a python function to check if a number is an armstrong number or not.\n    '''\n    sum=0\n    temp=n\n    while temp!=0:\n        rem=temp%10\n        sum=sum+rem**3\n        temp=temp//10\n    return n==sum\ndef isPalindromePrime(num):\n    '''\n    Write a python function to check if a number is a palindrome prime or not.\n    '''\n    if isPalindrome(num) and isPrime(num):\n        return True\n    return False\ndef fibonacci(n):\n    '''\n    Write a python function to findn'th fibonacci number.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\ndef toBinary(n):\n    '''\n    Write a python function to convert a decimal number to binary.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return toBinary(n//2)+n%2\ndef toDecimal(n):\n    '''\n    Write a python function to convert a binary number to decimal.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return 2*toDecimal(n//2)+n%2\ndef fib(n):\n    '''\n    Write a python function to findn'th fibonacci number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fib(n-1)+fib(n-2)\ndef maxPathSum(arr):\n    '''\n    Write a python function to find the maximum path sum in a matrix.\n    '''\n    row=len(arr)\n    col=len(arr[0])\n    pathSum=[[0 for i in range(col)] for j in range(row)]\n    for i in range(row):\n        for j in range(col):\n            if i==0 and j==0:\n                pathSum[i][j]=arr[i][j]\n            elif i==0 and j!=0:\n                pathSum[i][j]=arr[i][j]+pathSum[i][j-1]\n            elif i!=0 and j==0:\n                pathSum[i][j]=arr[i][j]+pathSum[i-1][j]\n            else:\n                pathSum[i][j]=arr[i][j]+max(pathSum[i-1][j],pathSum[i][j-1])\n    return pathSum[row-1][col-1]\ndef isValid(s):\n    '''\n    Write a python function to check if a string is valid or not.\n    '''\n    s=s.split()\n    if len(s)!=len(set(s)):\n        return False\n    return True\ndef toLowerCase(s):\n    '''\n    Write a python function to convert string to lower case.\n    '''\n    return s.lower()\ndef isPandigitalPrime(num):\n    '''\n    Write a python function to check if a number is pandigital prime or not.\n    '''\n    s=str(num)\n    for i in range(1,10):\n        if str(i) not in s:\n            return False\n    return True\ndef fib_memo(n,memo={}):\n    '''\n    Write a python function to findn'th fibonacci number using memoization.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n not in memo:\n        memo[n]=fib_memo(n-1,memo)+fib_memo(n-2,memo)\n    return memo[n]\ndef fib_bottom_up(n):\n    '''\n    Write a python function to findn'th fibonacci number using bottom-up approach.\n    '''\n    f=[0,1]\n    for i in range(2,n+1):\n        f.append(f[i-1]+f[i-2])\n    return f[n]\ndef longest_common_prefix(s):\n    '''\n    Write a python function to find longest common prefix of a list of strings.\n    '''\n    if not s:\n        return ''\n    if len(s)==1:\n        return s[0]\n    result=[]\n    for i in range(len(s[0])):\n        for j in range(1,len(s)):\n            if i<len(s[j]) and s[0][i]==s[j][i]:\n                result.append(s[0][i])\n            else:\n                break\n    return ''.join(result)\ndef longest_common_prefi"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n < m:\n        return 0\n    else:\n        return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    print \"Numerator: \",n\n    print \"Denominator: \",m\n    if n < m:\n        print n/m\n    else:\n        print (n/m) + 1\n    \ndef findArea(n,m):\n    '''\n    Write a python function to find area of a rectangle.\n    '''\n    area = n*m\n    print \"Area of the rectangle: \",area\n    \ndef findVolume(n,m,l):\n    '''\n    Write a python function to find volume of a cylinder.\n    '''\n    volume = n*m*l\n    print \"Volume of the cylinder: \",volume\n    \ndef findCircumference(r):\n    '''\n    Write a python function to find circumference of a circle.\n    '''\n    print \"Circumference of the circle: \",2*3.14*r\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    x = math.sqrt(w**2 + h**2)\n    return x\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = h**2+w**2\n    b = 2*w*h\n    c = w**2-h**2\n    return math.sqrt(a+b+c)\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if h**2 + w**2 == w**2:\n        return h*2\n    else:\n        return w*2\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    b = math.sqrt(w**2+h**2)\n    return b\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2\ndef find_intersection_of_lines(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Use the x,y values of two lines to find the x and y of the\n    intersection of the two lines.\n    '''\n    denominator = (x1-x2)*(y3-y4)-(y1-y2)*(x3-x4)\n    if denominator == 0:\n        return (None,None)\n    sx = ((x1*y2-y1*x2)*(x3-x4)-(x1-x2)*(x3*y4-y3*x4))/denominator\n    sy = ((x1*y2-y1*x2)*(y3-y4)-(y1-y2)*(x3*y4-y3*x4))/denominator\n    return (sx,sy)\ndef find_intersection_of_lines_based_on_slope(x1,y1,m1,x2,y2,m2):\n    '''\n    Use the x,y values of two lines to find the x and y of the\n    intersection of the two lines.\n    '''\n    if m1 == m2:\n        return (None,None)\n    b1 = y1-m1*x1\n    b2 = y2-m2*x2\n    if m1==m2:\n        return (0,0)\n    x = (b2-b1)/(m1-m2)\n    y = m1*x+b1\n    return (x,y)\ndef find_intersection_of_lines_based_on_slope(x1,y1,m1,x2,y2,m2):\n    '''\n    Use the x,y values of two lines to find the x and y of the\n    intersection of the two lines.\n    '''\n    if m1 == m2:\n        return (None,None)\n    b1 = y1-m1*x1\n    b2 = y2-m2*x2\n    if m1==m2:\n        return (0,0)\n    x = (b2-b1)/(m1-m2)\n    y = m1*x+b1\n    return (x,y)\ndef find_intersection_of_lines_based_on_slope(x1,y1,m1,x2,y2,m2):\n    '''\n    Use the x,y values of two lines to find the x and y of the\n    intersection of the two lines.\n    '''\n    if m1 == m2:\n        return (None,None)\n    b1 = y1-m1*x1\n    b2 = y2-m2*x2\n    if m1==m2:\n        return (0,0)\n    x = (b2-b1)/(m1-m2)\n    y = m1*x+b1\n    return (x,y)\ndef find_intersection_of_lines_based_on_slope(x1,y1,m1,x2,y2,m2):\n    '''\n    Use the x,y values of two lines to find the x and y of the\n    intersection of the two lines.\n    '''\n    if m1 == m2:\n        return (None,None)\n    b1 = y1-m1*x1\n    b2 = y2-m2*x2\n    if m1==m2:\n        return (0,0)\n    x = (b2-b1)/(m1-m2)\n    y = m1*x+b1\n    return (x,y)\ndef find_intersection_of_lines_based_on_slope(x1,y1,m1,x2,y2,m2):\n    '''\n    Use the x,y values of two lines to find the x and y of the\n    intersection of the two lines.\n    '''\n    if m1 == m2:\n        return (None,None)\n    b1 = y1-m1*x1\n    b2 = y2-m2*x2\n    if m1==m2:\n        return (0,0)\n    x = (b2-b1)/(m1-m2)\n    y = m1*x+b1\n    return (x,y)\ndef find_intersection_of_lines_based_on_slope(x1,y1,m1,x2,y2,m2):\n    '''\n    Use the x,y values of two lines to find the x and y of the\n    intersection of the two lines.\n    '''\n    if m1 == m2:\n        return (None,None)\n    b1 = y1-m1*x1\n    b2 = y2-m2*x2\n    if m1==m2:\n        return (0,0)\n    x = (b2-b1)/(m1-m2)\n    y = m1*x+b1\n    return (x,y)\ndef find_intersection_of_lines_based_on_slope(x1,y1,m1,x2,y2,m2):\n    '''\n    Use the x,y values of two lines to find the x and y of the\n    intersection of the two lines.\n    '''\n    if m1 == m2:\n        return (None,None)\n    b1 = y1-m1*x1\n    b2 = y2-m2*x2\n    if m1==m2:\n        return (0,0)\n    x = (b2-b1)/(m1-m2)\n    y = m1*x+b1\n    return (x,y)\ndef find_intersection_of_lines_based_on_slope(x1,y1,m1,x2,y2,m2):\n    '''\n    Use the x,y values of two lines to find the x and y of the\n    intersection of the two lines.\n    '''\n    if m1 == m2:\n        return (None,None)\n    b1 = y1-m1*x1\n    b2 = y2-m2*x2\n    if m1==m2:\n        return (0,0)\n    x = (b2-b1)/(m1-m2)\n    y = m1*x+b1\n    return (x,y)\ndef find_intersection_of_lines_based_on_slope(x1,y1,m1,x2,y2,m2):\n    '''\n    Use the x,y values of two lines to find the x and y of the\n    intersection of the two lines.\n    '''\n    if m1 == m2:\n        return (None,None)\n    b1 = y1-m1*x1\n    b2 = y2-m2*x2\n    if m1==m2:\n        return (0,0)\n    x = (b2-b1)/(m1-m2)\n    y = m1*x+b1\n    return (x,y)\ndef find_intersection_of_lines_based_on_slope(x1,y1,m1,x2,y2,m2):\n    '''\n    Use the x,y values of two lines to find the x and y of the\n    intersection of the two lines.\n    '''\n    if m1 == m2:\n        return (None,None)\n    b1 = y1-m1*x1\n    b2 = y2-m2*x2\n    if m1==m2:\n        return (0,0)\n    x = (b2-b1)/(m1-m2)\n    y = m1*x+b1\n    return (x,y)\ndef find_intersection_of_lines_based_on_slope(x1,y1,m1,x2,y2,m2):\n    '''\n    Use the x,y values of two lines to find the x and y of the\n    intersection of the two lines.\n    '''\n    if m1 == m2:\n    "
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2) **.5\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    ans = int(math.sqrt(w**2+h**2))\n    return ans\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**(0.5)\ndef otherside_rightangle_2(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.hypot(w,h)\nprint(otherside_rightangle(3,4))\nprint(otherside_rightangle_2(3,4))\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)**.5\ndef make_rectangle(width,height):\n    '''\n    Write a function that takes two integers as parameters and returns\n    the perimeter and the area of a rectangle that has those width and\n    height.\n    '''\n    return (width+height)*2, width*height\ndef describe_the_triangle(base,height):\n    '''\n    Write a function that takes the base and height of a triangle and\n    returns a description of the triangle in the form of a string.\n    '''\n    return 'This is a triangle with base'+str(base)+'and height '+str(height)\ndef square_root(num):\n    '''\n    Write a function that takes a number and returns the square root of it.\n    '''\n    return math.sqrt(num)\ndef check_num(num):\n    '''\n    Write a function that takes a number and checks whether it is even or odd.\n    '''\n    if num%2==0:\n        return 'The number is even'\n    else:\n        return 'The number is odd'\ndef find_max(num1,num2,num3):\n    '''\n    Write a function that takes three numbers and returns the largest one.\n    '''\n    if num1>=num2 and num1>=num3:\n        return num1\n    elif num2>=num1 and num2>=num3:\n        return num2\n    else:\n        return num3\ndef order_of_magnitude(num):\n    '''\n    Write a function that takes a number and returns an order of magnitude\n    of the number.\n    '''\n    return math.floor(math.log10(num))\ndef series_sum(n):\n    '''\n    Write a function that takes a number n and returns the sum of the series\n    1 + 1/2 + 1/3 + 1/4 +... + 1/n.\n    '''\n    total=0\n    for i in range(1,n+1):\n        total+=1/(2*i)\n    return total\ndef is_even(num):\n    '''\n    Write a function that takes a number and returns True if the number is even,\n    and False otherwise.\n    '''\n    return num%2==0\ndef is_odd(num):\n    '''\n    Write a function that takes a number and returns True if the number is odd,\n    and False otherwise.\n    '''\n    return num%2!=0\ndef find_intersection(l1,l2):\n    '''\n    Write a function that takes two lists and returns a list of the intersection\n    of the two.\n    '''\n    intersection=[]\n    for num in l1:\n        if num in l2:\n            intersection.append(num)\n    return intersection\ndef make_vocabulary(data):\n    '''\n    Write a function that takes a string and returns a list of all the words\n    in that string, in order.\n    '''\n    data_list=data.split()\n    return sorted(data_list)\ndef find_max_words(data):\n    '''\n    Write a function that takes a string and returns a list of all the words\n    in that string, in order, with the largest number of characters at the\n    end of the word.\n    '''\n    data_list=data.split()\n    max_word=''\n    max_len=0\n    for word in data_list:\n        if len(word)>=max_len:\n            max_len=len(word)\n            max_word=word\n    return [max_word]\ndef factor_int(num):\n    '''\n    Write a function that takes a number and returns a list of all the factors of\n    that number.\n    '''\n    return [i for i in range(1,num+1) if num%i==0]\ndef is_palindrome(string):\n    '''\n    Write a function that takes a string and returns True if the string is a\n    palindrome and False otherwise.\n    '''\n    reverse_string=string[::-1]\n    if reverse_string==string:\n        return True\n    else:\n        return False\ndef is_anagram(string1,string2):\n    '''\n    Write a function that takes two strings and returns True if the two strings\n    are anagrams.\n    '''\n    list1=list(string1)\n    list2=list(string2)\n    list1.sort()\n    list2.sort()\n    if list1==list2:\n        return True\n    else:\n        return False\ndef check_pangram(string):\n    '''\n    Write a function that takes a string and returns True if the string is a\n    pangram and False otherwise.\n    '''\n    letters_list=list(string.lower())\n    for letter in letters_list:\n        if letter.isalpha():\n            continue\n        else:\n            return False\n    return True\ndef clean_string(string):\n    '''\n    Write a function that takes a string and returns a copy of the string with\n    spaces removed from the beginning and end of the string.\n    '''\n    clean_str=string.strip()\n    return clean_str\ndef largest_product(list):\n    '''\n    Write a function that takes a list of four integers and returns the largest\n    product that can be formed by multiplying any three integers.\n    '''\n    possible_products=[]\n    for i in range(len(list)):\n        for j in range(i+1,len(list)):\n            for k in range(j+1,len(list)):\n                possible_products.append(list[i]*list[j]*list[k])\n    return max(possible_products)\ndef replace_spaces(string):\n    '''\n    Write a function that takes a string and returns a copy of the string with\n    spaces replaced by hyphens.\n    '''\n    return string.replace(' ','-')\ndef replace_punctuation(string):\n    '''\n    Write a function that takes a string and returns a copy of the string with\n    punctuation replaced by periods.\n    '''\n    return string.replace(',','').replace(';','').replace('!','').replace('?','')\ndef string_test(string1,string2):\n    '''\n    Write a function that takes two strings and returns True if the two strings\n    are anagrams of each other and False otherwise.\n    '''\n    string1_list=list(string1)\n    string2_list=list(string2)\n    string1_list.sort()\n    string2_list.sort()\n    if string1_list==string2_list:\n        return True\n    else:\n        return False\ndef is_triangle(side1,side2,side3):\n    '''\n    Write a function that takes the lengths of three sides of a triangle and\n    returns True if the triangle exists and False otherwise.\n    '''\n    sides=[side1,side2,side3]\n    sides.sort()\n    if sides[0]+sides[1]>sides[2]:\n        return True\n    else:\n        return False\ndef triangle_type(side1,side2,side3):\n    '''\n    Write a function that takes the lengths of three sides of a triangle and\n    returns the type of the triangle (right, isosceles, or scalene).\n    '''\n    sides=[side1,side2,side3]\n    sides.sort()\n    if sides[0]==sides[1]==sides[2]:\n        return 'Right'\n    elif sides[0]==sides[1] or sides[1]==sides[2] or sides[0]==sides[2]:\n        return 'Isosceles'\n    else:\n        return 'Scalene'\ndef list_to_string(list):\n    '''\n    Write a function that takes a list and returns a string made up of all the\n    items in the list, in order with a comma between each item.\n    '''\n    str_list=''\n    for num in list:\n        str_list+=str(num)+', '\n    return str_list[:-2]\ndef min_max(list):\n    '''\n    Write a function that takes a list of numbers and returns a string wit"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    length = len(listval)\n    maxval = listval[0]\n    for i in range(length):\n        if maxval < listval[i]:\n            maxval = listval[i]\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = 0\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for i in range(len(listval)):\n        if max_num < listval[i]:\n            max_num = listval[i]\n    return max_num\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    n=len(listval)\n    m=listval[0]\n    for i in range(n):\n        if listval[i]>m:\n            m=listval[i]\n    return m\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    length = len(listval)\n    maxval = listval[0]\n    for i in range(1, length):\n        if listval[i] > maxval:\n            maxval = listval[i]\n    return maxval\n    \n    \n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for i in listval:\n        if i > maxval:\n            maxval = i\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # List of non-numeric values\n    listval = [1, 2, 3,'s', 4, 'd', 5, 6,'s', 7, 8, 9,'s', 10, 11, 12, 13,'s', 14, 15]\n    # List of non-numeric values\n    # max_val(listval)\n    # print(listval)\n    listval = [1, 2, 3, 4,'s', 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    # max_val(listval)\n    # print(listval)\n    max_val = listval[0]\n    # print(max_val)\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    if len(listval) == 1:\n        return listval[0]\n    else:\n        return max(listval[0], max_val(listval[1:]))\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    temp_list=[]\n    for val in listval:\n        if type(val) is int:\n            temp_list.append(val)\n    return max(temp_list)\n    \nprint max_val([1,'a',2,'b',3,'c',4,5])\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 1:\n        return 1\n    else:\n        i = 1\n        divisors = []\n        while i < number:\n            if number % i == 0:\n                divisors.append(i)\n            i += 1\n        return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum_div += i\n    return sum_div\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    number_list = []\n    for i in range(1,number):\n        if number % i == 0:\n            number_list.append(i)\n    if number_list == []:\n        return 0\n    else:\n        return sum(number_list)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    s = 0\n    if number == 1:\n        return 1\n    for i in range(1, number):\n        if number % i == 0:\n            s += i\n    return s\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    \n    divisors = []\n    \n    # Use for loop to append the divisors.\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.append(i)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = [1]\n    for i in range(2, number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    i = 1\n    total = 0\n    while i <= number:\n        if number % i == 0:\n            total += i\n        i += 1\n    return total\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divs = []\n    for i in range(1, int(number/2)+1):\n        if number % i == 0:\n            divs.append(i)\n    return sum(divs)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divs = list(range(1,int(number**0.5)+1))\n    divs.reverse()\n    divs = [i for i in divs if number % i == 0]\n    return sum(divs)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_of_div = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum_of_div += i\n    return sum_of_div\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) == 1: \n        return arr, 0 \n    else: \n        pivot = arr[0] \n        less, more = [], [] \n        for num in arr[1:]: \n            if num < pivot: \n                less.append(num) \n            else: \n                more.append(num) \n        less, Inv_Count = get_Inv_Count(less) \n        more, Inv_Count2 = get_Inv_Count(more) \n        Inv_Count = Inv_Count + Inv_Count2 \n        return less + [pivot] + more, Inv_Count \n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    if n<2:\n        return arr,0\n    else:\n        mid = int(n/2)\n        left,left_inv = get_Inv_Count(arr[:mid])\n        right,right_inv = get_Inv_Count(arr[mid:])\n        total_inv = left_inv + right_inv\n        merged,total = merge_and_count(left,right,arr)\n        return merged,total + total_inv\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    inv_count = 0\n    \n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                inv_count = inv_count + 1\n    \n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n=len(arr)\n    if(n==1):\n        return arr,0\n    else:\n        mid=n//2\n        left=arr[:mid]\n        right=arr[mid:]\n        left_inv,left_inv_count=get_Inv_Count(left)\n        right_inv,right_inv_count=get_Inv_Count(right)\n        arr_inv,arr_inv_count=merge_and_count(left_inv,right_inv)\n        return arr_inv,left_inv_count+right_inv_count+arr_inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr)<2:\n        return 0\n    if len(arr)==2:\n        if arr[0]<arr[1]:\n            return 0\n        else:\n            return 1\n    else:\n        if arr[0]<arr[1]:\n            return 1+get_Inv_Count(arr[1:])\n        else:\n            return get_Inv_Count(arr[1:])\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    #if not arr:\n    #    return 0\n    #if len(arr) == 1:\n    #    return 0\n    #if len(arr) == 2:\n    #    if arr[0] > arr[1]:\n    #        return 1\n    #    return 0\n    #else:\n    #    if len(arr) % 2 == 0:\n    #        return get_Inv_Count(arr[:len(arr)/2]) + get_Inv_Count(arr[len(arr)/2:])\n    #    else:\n    #        return get_Inv_Count(arr[:len(arr)/2]) + get_Inv_Count(arr[len(arr)/2+1:])\n    num = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                num += 1\n    return num\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n-1): \n        for j in range(i+1, n): \n            if arr[i] > arr[j]: \n                count = count + 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    if len(arr) == 1: \n        return 0\n    \n    #inv_count = 0\n    \n    if len(arr)%2 == 1: \n        mid = len(arr)/2\n        left = arr[:mid]\n        right = arr[mid:]\n        left_inv_count = get_Inv_Count(left)\n        right_inv_count = get_Inv_Count(right)\n        #inv_count = inv_count + left_inv_count + right_inv_count\n        inv_count = left_inv_count + right_inv_count\n    \n    else: \n        mid = len(arr)/2\n        left = arr[:mid]\n        right = arr[mid:]\n        left_inv_count = get_Inv_Count(left)\n        right_inv_count = get_Inv_Count(right)\n        #inv_count = inv_count + left_inv_count + right_inv_count\n        inv_count = left_inv_count + right_inv_count\n    \n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def _inv_count(arr):\n        inv_count = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if (arr[i] > arr[j]):\n                    inv_count += 1\n        return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return get_Inv_Count_Helper(arr,0,len(arr)-1)\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    import itertools\n    return list(itertools.chain(*list1))\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    for item in list1:\n        if isinstance(item,list):\n            for x in flatten_list(item):\n                yield x\n        else:\n            yield item\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    res = []\n    for item in list1:\n        if type(item) == type([]):\n            res.extend(flatten_list(item))\n        else:\n            res.append(item)\n    return res\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for i in list1:\n        if type(i) is list:\n            list2.extend(flatten_list(i))\n        else:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for elem in list1:\n        if hasattr(elem, \"__iter__\") and not isinstance(elem, str):\n            result.extend(flatten_list(elem))\n        else:\n            result.append(elem)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return list(chain.from_iterable(list1))\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for i in list1:\n        if type(i) == list:\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return sum(list1, [])\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for el in list1:\n        if isinstance(el, list):\n            flat_list.extend(flatten_list(el))\n        else:\n            flat_list.append(el)\n    return flat_list\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1)==0:\n        return list1\n    if isinstance(list1[0],list):\n        return flatten_list(list1[0])+flatten_list(list1[1:])\n    else:\n        return [list1[0]]+flatten_list(list1[1:])\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = defaultdict(int)\n    for (tid,size) in stdata:\n        aggregate[tid] = aggregate[tid] + size\n    max_aggregate = max(aggregate.values())\n    max_aggregate_tid = aggregate.keys()[aggregate.values().index(max_aggregate)]\n    return max_aggregate,max_aggregate_tid\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(lambda: 0)\n    for s, t, v in stdata:\n        d[s] += v\n        d[t] -= v\n    return max(d.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    aggregate = 0\n    stdata = sorted(stdata, key = lambda x: x[2], reverse = True)\n    \n    for i in range(len(stdata)):\n        aggregate = aggregate + stdata[i][2]\n    \n    return aggregate\n    \n    \ndef max_pairwise(stdata):\n    '''\n    Write a function to calculate the maximum pairwise from the list of tuples.\n    '''\n    aggregate = 0\n    stdata = sorted(stdata, key = lambda x: x[2], reverse = True)\n    \n    for i in range(len(stdata) - 1):\n        aggregate = aggregate + (stdata[i][2] * stdata[i + 1][2])\n    \n    return aggregate\n    \n    \ndef max_interarrival(stdata):\n    '''\n    Write a function to calculate the maximum interarrival from the list of tuples.\n    '''\n    \n    max = 0\n    stdata = sorted(stdata, key = lambda x: x[1], reverse = True)\n    \n    for i in range(len(stdata) - 1):\n        if (stdata[i][1] < stdata[i + 1][1]):\n            temp = stdata[i][1] + 1\n            max = temp\n    \n    return max\n    \n    \ndef max_serialization(stdata):\n    '''\n    Write a function to calculate the maximum serialization from the list of tuples.\n    '''\n    \n    max = 0\n    stdata = sorted(stdata, key = lambda x: x[1], reverse = True)\n    \n    for i in range(len(stdata) - 1):\n        if (stdata[i][1] == stdata[i + 1][1]):\n            temp = stdata[i][1] + 1\n            max = temp\n    \n    return max\n    \n    \ndef max_jaccard(stdata):\n    '''\n    Write a function to calculate the maximum jaccard from the list of tuples.\n    '''\n    \n    max = 0\n    stdata = sorted(stdata, key = lambda x: x[2], reverse = True)\n    \n    for i in range(len(stdata) - 1):\n        if (stdata[i][2] > stdata[i + 1][2]):\n            temp = stdata[i][2] + 1\n            max = temp\n    \n    return max\n    \n    \ndef max_intersection(stdata):\n    '''\n    Write a function to calculate the maximum intersection from the list of tuples.\n    '''\n    \n    max = 0\n    stdata = sorted(stdata, key = lambda x: x[2], reverse = True)\n    \n    for i in range(len(stdata) - 1):\n        if (stdata[i][2] < stdata[i + 1][2]):\n            temp = stdata[i][2] + 1\n            max = temp\n    \n    return max\n    \n    \ndef max_dice(stdata):\n    '''\n    Write a function to calculate the maximum dice from the list of tuples.\n    '''\n    \n    max = 0\n    stdata = sorted(stdata, key = lambda x: x[2], reverse = True)\n    \n    for i in range(len(stdata) - 1):\n        if (stdata[i][2] == stdata[i + 1][2]):\n            temp = stdata[i][2] + 1\n            max = temp\n    \n    return max\n    \n    \ndef max_winkler(stdata):\n    '''\n    Write a function to calculate the maximum winkler from the list of tuples.\n    '''\n    \n    max = 0\n    stdata = sorted(stdata, key = lambda x: x[2], reverse = True)\n    \n    for i in range(len(stdata) - 1):\n        if (stdata[i][2] < stdata[i + 1][2]):\n            temp = stdata[i][2] + 1\n            max = temp\n    \n    return max\n    \n    \ndef max_levenshtein(stdata):\n    '''\n    Write a function to calculate the maximum levenshtein from the list of tuples.\n    '''\n    \n    max = 0\n    stdata = sorted(stdata, key = lambda x: x[2], reverse = True)\n    \n    for i in range(len(stdata) - 1):\n        if (stdata[i][2] > stdata[i + 1][2]):\n            temp = stdata[i][2] + 1\n            max = temp\n    \n    return max\n    \n    \ndef max_ratio(stdata):\n    '''\n    Write a function to calculate the maximum ratio from the list of tuples.\n    '''\n    \n    max = 0\n    stdata = sorted(stdata, key = lambda x: x[2], reverse = True)\n    \n    for i in range(len(stdata) - 1):\n        if (stdata[i][2] > stdata[i + 1][2]):\n            temp = stdata[i][2] + 1\n            max = temp\n    \n    return max\n    \n    \ndef max_tsd(stdata):\n    '''\n    Write a function to calculate the maximum tsd from the list of tuples.\n    '''\n    \n    max = 0\n    stdata = sorted(stdata, key = lambda x: x[2], reverse = True)\n    \n    for i in range(len(stdata) - 1):\n        if (stdata[i][2] > stdata[i + 1][2]):\n            temp = stdata[i][2] + 1\n            max = temp\n    \n    return max\n    \n    \ndef max_ttr(stdata):\n    '''\n    Write a function to calculate the maximum ttr from the list of tuples.\n    '''\n    \n    max = 0\n    stdata = sorted(stdata, key = lambda x: x[2], reverse = True)\n    \n    for i in range(len(stdata) - 1):\n        if (stdata[i][2] < stdata[i + 1][2]):\n            temp = stdata[i][2] + 1\n            max = temp\n    \n    return max\n    \n    \ndef max_user_level(stdata):\n    '''\n    Write a function to calculate the maximum user level from the list of tuples.\n    '''\n    \n    max = 0\n    stdata = sorted(stdata, key = lambda x: x[3], reverse = True)\n    \n    for i in range(len(stdata) - 1):\n        if (stdata[i][3] > stdata[i + 1][3]):\n            temp = stdata[i][3] + 1\n            max = temp\n    \n    return max\n    \n    \ndef max_item_level(stdata):\n    '''\n    Write a function to calculate the maximum item level from the list of tuples.\n    '''\n    \n    max = 0\n    stdata = sorted(stdata, key = lambda x: x[4], reverse = True)\n    \n    for i in range(len(stdata) - 1):\n        if (stdata[i][4] > stdata[i + 1][4]):\n            temp = stdata[i][4] + 1\n            max = temp\n    \n    return max\n    \n    \ndef max_review_level(stdata):\n    '''\n    Write a function to calculate the maximum review level from the list of tuples.\n    '''\n    \n    max = 0\n    stdata = sorted(stdata, key = lambda x: x[5], reverse = True)\n    \n    for i in range(len(stdata) - 1):\n        if (stdata[i][5] > stdata[i + 1][5]):\n            temp = stdata[i][5] + 1\n            max = temp\n    \n    return max\n    \n    \ndef max_overall_level(stdata):\n    '''\n    Write a function to calculate the maximum overall level from the list of tuples.\n    '''\n    \n    max = 0\n    stdata = sorted(stdata, key = lambda x: x[6], reverse = True)\n    \n    for i in range(len(stdata) "
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg_dict = defaultdict(lambda: 0)\n    for st in stdata:\n        agg_dict[st[0]] += st[1]\n    return max(agg_dict.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate_dict = defaultdict(float)\n    for data in stdata:\n        aggregate_dict[data[0]] += data[1]\n    return max(aggregate_dict.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(list)\n    for key,val in stdata:\n        d[key].append(val)\n    res = {}\n    for key,val in d.iteritems():\n        res[key] = max(val)\n    return res\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    if len(stdata) == 0:\n        return 0\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Your code here\n    return max(stdata, key = lambda x: x[2])\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return max(map(lambda x: x[0] + x[1], stdata))\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    tot = 0\n    for tup in stdata:\n        tot += tup[1]\n    return tot\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = [0]*(n+1)\n    count[0] = 1\n    count[1] = 1\n    for i in xrange(2,n+1):\n        count[i] = (2*count[i-1]-i+1)\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    res = [0 for _ in range(n+1)]\n    res[0] = 1\n    for i in range(1,n+1):\n        res[i] = res[i-1] + res[i-2]\n    return res[n]\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    count = 0\n    \n    def bin_seq(n,start,end):\n        \n        nonlocal count\n        \n        if start == end:\n            if n == 0:\n                count += 1\n        else:\n            bin_seq(n-1,start+1,end)\n            bin_seq(n-1,start,end-1)\n            \n    bin_seq(n,0,n)\n    \n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 2\n    return count_binary_seq(n-1) + count_binary_seq(n-2)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    ans = 0\n    def check(sum1, sum2):\n        if sum1 == sum2:\n            return 1\n        elif sum1 < sum2:\n            return 0\n        else:\n            return check(sum1-2, sum2-1) + check(sum1-1, sum2)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 5\n    else:\n        return count_binary_seq(n-1) * 2 + count_binary_seq(n-2) * 4\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return count_binary_seq(n-1) + count_binary_seq(n-2)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    num_count = 0\n    for i in range(1, n+1):\n        for j in range(2**i):\n            num = (j << i) + j\n            if i == n:\n                num_count += 1\n            elif j == 2**(i-1):\n                num_count += 1\n    return num_count\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    if n == 0:\n        return 1\n    \n    if n == 1:\n        return 2\n    \n    return count_binary_seq(n-1) + count_binary_seq(n-2)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        j = i\n        s = 0\n        while j > 0:\n            s += j%2\n            j/=2\n        if s == (2**n -1 -i):\n            count += 1\n    return count\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d)!= dict:\n        return -1\n    return 1 + max(dict_depth(v) for v in d.values())\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, 1 + dict_depth(value))\n        else:\n            depth = max(depth, 1)\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    else:\n        return 1 + max(dict_depth(v) for v in d.values())\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def depth(d):\n        if isinstance(d, dict):\n            return 1 + (max(depth(v) for v in d.values()) if d else 0)\n        else:\n            return 0\n    return depth(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return max(dict_depth(v) for v in d.values()) + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return 1 + max(dict_depth(v) for v in d.itervalues()) if d else 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return max(dict_depth(v) for v in d.values()) + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return max([0] + [1 + max(dict_depth(v) if isinstance(v, dict) else 0 for v in d[k]) for k in d])\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    else:\n        return 0\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index > rotations:\n        return arr[index-rotations]\n    return find_Element(arr,ranges,rotations,index+len(arr))\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    i = 0\n    while i < len(ranges) :\n        if (rotations[i] + ranges[i]) > index :\n            return arr[(index-rotations[i])%len(arr)]\n        i += 1\n    return arr[(index-rotations[i-1])%len(arr)]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    start,end = ranges[index]\n    start,end = start-rotations[index]+1,end-rotations[index]+1\n    for i in range(start,end) : \n        if arr[i] == r : \n            return i\n    return -1\n    \n    \n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if ranges == 0 :\n        return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotations_arr = []\n    for i in range(0,len(arr)) :\n        rotations_arr.append(rotations[arr[i]])\n    rotations_arr.sort()\n    rotations_arr = rotations_arr[0:index]\n    print rotations_arr\n    for i in range(0,len(rotations_arr)) :\n        rotations_arr[i] -= 1\n    print rotations_arr\n    \n    min_val = rotations_arr[0]\n    max_val = rotations_arr[-1]\n    \n    while min_val<=max_val :\n        mid_val = min_val + ((max_val-min_val) /2)\n        count = 0\n        for i in range(0,len(arr)) :\n            if rotations_arr[i]>=mid_val :\n                count += 1\n        print count,mid_val\n        if count >= index :\n            max_val = mid_val-1\n        else :\n            min_val = mid_val+1\n    return min_val\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if ranges==0:\n        return arr[index]\n    if index<=len(arr):\n        return find_Element(arr,ranges-1,rotations,index)\n    if index>=len(arr) and ranges!=0:\n        return find_Element(arr,ranges,rotations-1,index-len(arr))\n    if index>=len(arr) and ranges==0:\n        return find_Element(arr,0,rotations,index-len(arr))\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    start = ranges[0]\n    end = ranges[1]\n    n = len(arr)\n    if (index<start) or (index>n-1):\n        return -1\n    if (index>=start) and (index<=end) :\n        if (index>=rotations[0]) and (index<=rotations[1]) :\n            return arr[index-rotations[0]]\n        else :\n            return arr[index]\n    if (index>end) :\n        return find_Element(arr,ranges,rotations,index-end-1)\n    return find_Element(arr,ranges,rotations,index+1)\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(ranges)):\n        if ranges[i] == index :\n            return rotations[i]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    low = 0\n    high = len(arr)-1\n    while(low<=high) :\n        mid = (low+high)//2\n        if ranges[mid] == index :\n            return arr[mid]\n        elif ranges[mid]>index :\n            high = mid-1\n        else :\n            low = mid+1\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Rotation would be performed by rotating the array in a specific manner.\n    # Rotation has to be performed with respect to the following condition \n    # Find the index of the array element to be found.\n    i = index % len(arr)\n    # Perform Rotation\n    for rotation in rotations :\n        i = (i + rotation) % len(arr)\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if re.match('p', word):\n            return word\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for i in words:\n        if i.startswith('p'):\n            result.append(i)\n    return result\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result=[]\n    for word in words:\n        if word.startswith('p'):\n            result.append(word)\n    return result\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res=[]\n    for word in words:\n        if word[0]=='p':\n            res.append(word)\n    return res\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p=[]\n    for word in words:\n        if re.match('p',word):\n            p.append(word)\n    return p\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word for word in words if word[0] == 'p']\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word for word in words if word.startswith('p')]\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    output = []\n    for word in words:\n        if word[0] == 'p':\n            output.append(word)\n    return output\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p':\n            return word\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # for item in enumerate(words):\n    #     if item[1][0] == 'p':\n    #         print(item)\n    # for item in enumerate(words):\n    #     if item[1][0] == 'p':\n    #         print(item[0]+1)\n    #     if item[1][0] == 'p':\n    #         print(item[0]+1)\n    return [words[item[0]] for item in enumerate(words) if item[1][0] == 'p']\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if (k == index):\n        return a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    elif k > index:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    else:\n        return max(max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k+1) + a[index])\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if (index < 0 or k < 0):\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index > n - 1:\n        return 0\n    if index == n - 1:\n        if a[index] == k:\n            return a[index]\n        else:\n            return 0\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k - 1))\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index >= n:\n        return 0\n    if k > index:\n        return a[index]\n    else:\n        return max(a[index], max_sum_increasing_subseq(a, n, index+1, k) + a[index])\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    global max_sum_list\n    if k > index:\n        return 0\n    elif k == index:\n        return a[index]\n    elif k < index:\n        if max_sum_list[index-1] > max_sum_list[index-1]:\n            return max_sum_list[index-1]\n        else:\n            return max_sum_list[index-1] + a[index]\n    else:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    if k > index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == index:\n        return a[n]\n    else:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k - 1))\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[0:m] + (' ',)*(n-m)\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex=deepcopy(tuplex)\n    for i in range(m,len(tuplex)-n+1):\n        print(tuplex[i],end=\"\")\n    print(\"\")\n    return None\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if not m or not n:\n        return tuplex\n    return tuplex[:m]+tuplex[-n:]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m-1:n]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #The return value is the colon.\n    #tuplex is the tuple.\n    #m is the tuple's length.\n    #n is the number of times to iterate.\n    if m==1:\n        return tuplex[0]\n    else:\n        return tuplex[m-1:n]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    index1,index2=0,0\n    for i in tuplex:\n        index1+=1\n        if index1>=m:\n            break\n    for j in tuplex[index1:]:\n        index2+=1\n        if index2>=n:\n            break\n        print(tuplex[index1:index2])\n        \ncolon_tuplex((1,2,3,4,5,6,7,8,9,10),4,2)\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex=tuplex[0:m]+tuplex[m+1:n]\n    return tuplex\n    \ndef colon_listx(listx,m,n):\n    '''\n    Write a function to get a colon of a list.\n    '''\n    listx=listx[0:m]+listx[m+1:n]\n    return listx\n    \ndef add_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a list of tuples.\n    '''\n    tuplex.append((m,n))\n    return tuplex\n    \ndef add_listx(listx,m,n):\n    '''\n    Write a function to get a list of tuples.\n    '''\n    listx.append((m,n))\n    return listx\n    \ndef get_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a tuple in a tuple.\n    '''\n    for item in tuplex:\n        if item[0]==m and item[1]==n:\n            return item\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    newlist=[]\n    for i in range(m,len(tuplex),n):\n        newlist.append(tuplex[i])\n    return newlist\ndef tuples(l,m,n):\n    '''\n    Write a function to get a list of tuples.\n    '''\n    newlist=[]\n    for i in range(0,len(l),n):\n        newlist.append(l[i:i+n])\n    return newlist\ndef distinct(l):\n    '''\n    Write a function to get all distinct items from a list.\n    '''\n    newlist=[]\n    for i in l:\n        if i not in newlist:\n            newlist.append(i)\n    return newlist\ndef all_counts(l):\n    '''\n    Write a function to get all counts of each item from a list.\n    '''\n    all_dict={}\n    for i in l:\n        if i not in all_dict:\n            all_dict[i]=0\n        all_dict[i]+=1\n    return all_dict\ndef all_items(l):\n    '''\n    Write a function to get all items from a list.\n    '''\n    newlist=[]\n    for i in l:\n        newlist.append(i)\n    return newlist\ndef get_counts(l):\n    '''\n    Write a function to get counts of each item from a list.\n    '''\n    all_dict={}\n    for i in l:\n        if i not in all_dict:\n            all_dict[i]=0\n        all_dict[i]+=1\n    return all_dict\ndef list_duplicates_of(l):\n    '''\n    Write a function to get the duplicates of a list.\n    '''\n    all_dict={}\n    for i in l:\n        if i not in all_dict:\n            all_dict[i]=0\n        all_dict[i]+=1\n    return [k for k,v in all_dict.items() if v>1]\ndef get_indexes(l,value):\n    '''\n    Write a function to get all indexes of a value from a list.\n    '''\n    all_dict={}\n    for i in range(len(l)):\n        if l[i]==value:\n            all_dict[i]=0\n    return all_dict\ndef first_index(l,value):\n    '''\n    Write a function to get the first index of a value from a list.\n    '''\n    all_dict={}\n    for i in range(len(l)):\n        if l[i]==value:\n            all_dict[i]=0\n    if len(all_dict)==0:\n        return None\n    else:\n        return min(all_dict.keys())\ndef last_index(l,value):\n    '''\n    Write a function to get the last index of a value from a list.\n    '''\n    all_dict={}\n    for i in range(len(l)):\n        if l[i]==value:\n            all_dict[i]=0\n    if len(all_dict)==0:\n        return None\n    else:\n        return max(all_dict.keys())\ndef get_index(l,value):\n    '''\n    Write a function to get the index of a value from a list.\n    '''\n    all_dict={}\n    for i in range(len(l)):\n        if l[i]==value:\n            all_dict[i]=0\n    if len(all_dict)==0:\n        return None\n    else:\n        return max(all_dict.keys())\ndef insert_at(l,index,value):\n    '''\n    Write a function to insert a value in a list at a specific index.\n    '''\n    l[index:index]=[value]\n    return l\ndef get_values(l,value):\n    '''\n    Write a function to get all values of a specific type from a list.\n    '''\n    all_dict={}\n    for i in l:\n        if type(i)==value:\n            if i not in all_dict:\n                all_dict[i]=0\n            all_dict[i]+=1\n    return all_dict\ndef delete_at(l,index):\n    '''\n    Write a function to delete a value from a list at a specific index.\n    '''\n    del l[index]\n    return l\ndef slice_list(l,start,stop):\n    '''\n    Write a function to get a slice of a list.\n    '''\n    return l[start:stop]\ndef get_range(l,start,stop):\n    '''\n    Write a function to get a range of a list.\n    '''\n    return l[start:stop]\ndef append_to_list(l,value):\n    '''\n    Write a function to append a value to a list.\n    '''\n    l.append(value)\n    return l\ndef insert_to_list(l,value,index):\n    '''\n    Write a function to insert a value to a list at a specific index.\n    '''\n    l.insert(index,value)\n    return l\ndef remove_from_list(l,value):\n    '''\n    Write a function to remove a value from a list.\n    '''\n    l.remove(value)\n    return l\ndef get_length(l):\n    '''\n    Write a function to get the length of a list.\n    '''\n    return len(l)\ndef count_occurences(l,value):\n    '''\n    Write a function to get the number of occurances of a value in a list.\n    '''\n    all_dict={}\n    for i in l:\n        if i==value:\n            all_dict[i]=0\n    if len(all_dict)==0:\n        return None\n    else:\n        return len(all_dict)\ndef deep_copy(l):\n    '''\n    Write a function to get a deep copy of a list.\n    '''\n    return deepcopy(l)\ndef length(l):\n    '''\n    Write a function to get the length of a list.\n    '''\n    return len(l)\ndef reverse_list(l):\n    '''\n    Write a function to get a reverse of a list.\n    '''\n    return l[::-1]\ndef combine_lists(l1,l2):\n    '''\n    Write a function to get a list of all items from both lists.\n    '''\n    newlist=[]\n    for i in l1:\n        newlist.append(i)\n    for i in l2:\n        newlist.append(i)\n    return newlist\ndef all_different(l):\n    '''\n    Write a function to get all distinct items from a list.\n    '''\n    newlist=[]\n    for i in l:\n        if i not in newlist:\n            newlist.append(i)\n    return newlist\ndef get_frequency(l,value):\n    '''\n    Write a function to get the frequency of a value in a list.\n    '''\n    all_dict={}\n    for i in l:\n        if i==value:\n            if i not in all_dict:\n                all_dict[i]=0\n            all_dict[i]+=1\n    if len(all_dict)==0:\n        return None\n    else:\n        return all_dict[value]\ndef multiply(l):\n    '''\n    Write a function to get the product of all items in a list.\n    '''\n    product=1\n    for i in l:\n        product*=i\n    return product\ndef reverse_string(l):\n    '''\n    Write a function to get a reverse of a string.\n    '''\n    newlist=''\n    for i in l:\n        newlist=i+newlist\n    return newlist\ndef rotate_left(l,n):\n    '''\n    Write a function to rotate a list n number of positions.\n    '''\n    return l[n:]+l[:n]\ndef rotate_right(l,n):\n    '''\n    Write a function to rotate a list n number of positions.\n    '''\n    return l[-n:]+l[:-"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    x=deepcopy(tuplex)\n    return x[n]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:] + tuplex[:m]\ndef int_tuple(tuplex,m,n):\n    '''\n    Write a function to get a tuple of integer values.\n    '''\n    if m == n:\n        return tuple(tuplex)\n    else:\n        return tuple(tuplex[m:]) + tuple(tuplex[:m])\ndef tuple_tuple(tuplex,m,n):\n    '''\n    Write a function to get a tuple of tuples.\n    '''\n    if m == n:\n        return tuple(map(tuple,tuplex))\n    else:\n        return tuple(map(tuple,tuplex[m:])) + tuple(map(tuple,tuplex[:m]))\ndef string_tuple(tuplex,m,n):\n    '''\n    Write a function to get a tuple of strings.\n    '''\n    if m == n:\n        return tuple(map(str,tuplex))\n    else:\n        return tuple(map(str,tuplex[m:])) + tuple(map(str,tuplex[:m]))\ndef string_tuple(tuplex,m,n):\n    '''\n    Write a function to get a tuple of strings.\n    '''\n    if m == n:\n        return tuple(map(str,tuplex))\n    else:\n        return tuple(map(str,tuplex[m:])) + tuple(map(str,tuplex[:m]))\ndef int_tuple(tuplex,m,n):\n    '''\n    Write a function to get a tuple of integer values.\n    '''\n    if m == n:\n        return tuple(tuplex)\n    else:\n        return tuple(tuplex[m:]) + tuple(tuplex[:m])\ndef tuple_int(tuplex,m,n):\n    '''\n    Write a function to get a tuple of integer values.\n    '''\n    if m == n:\n        return tuple(tuplex)\n    else:\n        return tuple(tuplex[m:]) + tuple(tuplex[:m])\ndef add_tuple(tuplex,m,n):\n    '''\n    Write a function to get a tuple of integer values.\n    '''\n    if m == n:\n        return tuple(tuplex[i] + tuplex[i+1] for i in range(0,len(tuplex),2))\n    else:\n        return tuple(tuplex[i] + tuplex[i+1] for i in range(m,n,2))\ndef string_tuple(tuplex,m,n):\n    '''\n    Write a function to get a tuple of strings.\n    '''\n    if m == n:\n        return tuple(tuplex[i] + tuplex[i+1] for i in range(0,len(tuplex),2))\n    else:\n        return tuple(tuplex[i] + tuplex[i+1] for i in range(m,n,2))\ndef add_tuple(tuplex,m,n):\n    '''\n    Write a function to get a tuple of integer values.\n    '''\n    if m == n:\n        return tuple(tuplex[i] + tuplex[i+1] for i in range(0,len(tuplex),2))\n    else:\n        return tuple(tuplex[i] + tuplex[i+1] for i in range(m,n,2))\ndef str_int_tuple(tuplex,m,n):\n    '''\n    Write a function to get a tuple of integer values.\n    '''\n    if m == n:\n        return tuple(int(tuplex[i]) for i in range(0,len(tuplex),2))\n    else:\n        return tuple(int(tuplex[i]) for i in range(m,n,2))\ndef str_int_tuple(tuplex,m,n):\n    '''\n    Write a function to get a tuple of integer values.\n    '''\n    if m == n:\n        return tuple(int(tuplex[i]) for i in range(0,len(tuplex),2))\n    else:\n        return tuple(int(tuplex[i]) for i in range(m,n,2))\ndef str_int_tuple(tuplex,m,n):\n    '''\n    Write a function to get a tuple of integer values.\n    '''\n    if m == n:\n        return tuple(int(tuplex[i]) for i in range(0,len(tuplex),2))\n    else:\n        return tuple(int(tuplex[i]) for i in range(m,n,2))\ndef str_int_tuple(tuplex,m,n):\n    '''\n    Write a function to get a tuple of integer values.\n    '''\n    if m == n:\n        return tuple(int(tuplex[i]) for i in range(0,len(tuplex),2))\n    else:\n        return tuple(int(tuplex[i]) for i in range(m,n,2))\ndef str_int_tuple(tuplex,m,n):\n    '''\n    Write a function to get a tuple of integer values.\n    '''\n    if m == n:\n        return tuple(int(tuplex[i]) for i in range(0,len(tuplex),2))\n    else:\n        return tuple(int(tuplex[i]) for i in range(m,n,2))\ndef int_str_tuple(tuplex,m,n):\n    '''\n    Write a function to get a tuple of integer values.\n    '''\n    if m == n:\n        return tuple(str(tuplex[i]) for i in range(0,len(tuplex),2))\n    else:\n        return tuple(str(tuplex[i]) for i in range(m,n,2))\ndef str_int_tuple(tuplex,m,n):\n    '''\n    Write a function to get a tuple of integer values.\n    '''\n    if m == n:\n        return tuple(str(tuplex[i]) for i in range(0,len(tuplex),2))\n    else:\n        return tuple(str(tuplex[i]) for i in range(m,n,2))\ndef int_str_tuple(tuplex,m,n):\n    '''\n    Write a function to get a tuple of integer values.\n    '''\n    if m == n:\n        return tuple(str(tuplex[i]) for i in range(0,len(tuplex),2))\n    else:\n        return tuple(str(tuplex[i]) for i in range(m,n,2))\ndef str_int_tuple(tuplex,m,n):\n    '''\n    Write a function to get a tuple of integer values.\n    '''\n    if m == n:\n        return tuple(str(tuplex[i]) for i in range(0,len(tuplex),2))\n    else:\n        return tuple(str(tuplex[i]) for i in range(m,n,2))\ndef int_str_tuple(tuplex,m,n):\n    '''\n    Write a function to get a tuple of integer values.\n    '''\n    if m == n:\n        return tuple(str(tuplex[i]) for i in range(0,len(tuplex),2))\n    else:\n        return tuple(str(tuplex[i]) for i in range(m,n,2))\ndef int_str_tuple(tuplex,m,n):\n    '''\n    Write a function to get a tuple of integer values.\n    '''\n    if m == n:\n        return tuple(str(tuplex[i]) for i in range(0,len(tuplex),2))\n    else:\n        return tuple(str(tuplex[i]) for i in range(m,n,2))\ndef int_str_tuple(tuplex,m,n):\n    '''\n    Write a function to get a tuple of integer value"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    count = 0\n    for i in range(N):\n        if nums1[i]*nums2[i] > count:\n            count = nums1[i]*nums2[i]\n    return count\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    product_list = []\n    product_list.append([])\n    product_list.append([])\n    for n in nums1:\n        for x in nums2:\n            product_list[0].append(n*x)\n            product_list[1].append(n*x)\n    product_list[0] = sorted(product_list[0], reverse = True)\n    product_list[1] = sorted(product_list[1], reverse = True)\n    return product_list[0][N-1]\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # To calculate the factors of a number, you can first divide the number by 2, then by 3, then by 5, and so on,\n    # until you reach 1. So, the list of factors of a number is the list of factors from 1 to the number, hence,\n    # all of the factors of a number are factors of the number from 1 to the square root of the number.\n    #\n    # To find the product of two numbers, you multiply them together.\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    from itertools import product\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def find_prod(nums, idx, lst, N):\n        if len(nums) == 1:\n            return lst\n        if len(nums) == 2:\n            if N == 1:\n                return (nums[0] * nums[1])\n            else:\n                return lst\n        else:\n            if N == 1:\n                return (nums[0] * find_prod(nums[1:], idx+1, lst * nums[0], N))\n            else:\n                return (find_prod(nums[1:], idx+1, lst * nums[0], N) * find_prod(nums[1:], idx+1, lst * nums[1], N))\n    return find_prod(nums1, 0, 1, N), find_prod(nums2, 0, 1, N)\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    pass\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(N):\n        products.append(max(nums1[i] * nums2[i], nums1[i] * nums2[i+1], nums1[i+1] * nums2[i], nums1[i+1] * nums2[i+1]))\n    return products\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    res = []\n    for i in xrange(N):\n        res.append(max(nums1) * max(nums2))\n        nums1.remove(max(nums1))\n        nums2.remove(max(nums2))\n    return res\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n    num_prod = 1\n    first_num = nums1[0]\n    second_num = nums2[0]\n    for i in range(N):\n        num_prod *= nums1[i] * nums2[i]\n    return num_prod\n    \ndef test():\n    assert(large_product([1,2,3,4], [1,6,7,8], 2) == 336)\n    assert(large_product([-1,1,2,3,4], [-1,-2,-3,-4,5], 4) == 130560)\n    assert(large_product([1,2,3,4], [1,6,7,8], 3) == 84)\n    assert(large_product([1,2,3,4], [1,6,7,8], 1) == 24)\n    assert(large_product([2,4], [4,6], 2) == 16)\n    assert(large_product([1,1], [1,1], 1) == 2)\n    assert(large_product([1,2,3,4,5], [1,6,7,8,9], 3) == 336)\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \ndef get_centroid(a,b):   \n    '''\n    Write a python function to find the centroid of two numbers.\n    '''\n    return (a+b)/2\n    \ndef sum(a,b):   \n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    return a+b\n    \ndef average(a,b):   \n    '''\n    Write a python function to find the average of two numbers.\n    '''\n    return (a+b)/2\n    \ndef matrix_sum(A,B):   \n    '''\n    Write a python function to find the sum of two matrices.\n    '''\n    return [[A[i][j]+B[i][j] for j in range(len(A[0]))] for i in range(len(A))]\n    \ndef matrix_subtract(A,B):   \n    '''\n    Write a python function to find the difference of two matrices.\n    '''\n    return [[A[i][j]-B[i][j] for j in range(len(A[0]))] for i in range(len(A))]\n    \ndef matrix_scalar_multiply(a,A):   \n    '''\n    Write a python function to find the multiplication of a scalar and a matrix.\n    '''\n    return [[a*A[i][j] for j in range(len(A[0]))] for i in range(len(A))]\n    \ndef matrix_vector_multiply(a,A,B):   \n    '''\n    Write a python function to find the multiplication of a matrix and a vector.\n    '''\n    return [[sum(A[i][k]*B[k][j] for k in range(len(A[0]))) for j in range(len(B[0]))] for i in range(len(A))]\n    \ndef matrix_matrix_multiply(A,B):   \n    '''\n    Write a python function to find the multiplication of two matrices.\n    '''\n    return [[sum(A[i][k]*B[k][j] for k in range(len(A[0]))) for j in range(len(B[0]))] for i in range(len(A))]\n    \ndef inverse(A):   \n    '''\n    Write a python function to find the inverse of a matrix.\n    '''\n    matrix_copy = copy.deepcopy(A)\n    det = matrix_determinant(matrix_copy)\n    if det==0:\n        return None\n    \n    return [[matrix_copy[j][i]/det for i in range(len(A[0]))] for j in range(len(A))]\n    \ndef matrix_determinant(A):   \n    '''\n    Write a python function to find the determinant of a matrix.\n    '''\n    if len(A) == 2:\n        return A[0][0]*A[1][1] - A[0][1]*A[1][0]\n    else:\n        det = 0\n        for i in range(len(A)):\n            det += ((-1)**i)*A[0][i]*matrix_determinant(get_minor(A,0,i))\n        return det\n    \ndef get_minor(A,i,j):   \n    '''\n    Write a python function to find the minor of a matrix.\n    '''\n    return [row[:j]+row[j+1:] for row in (A[:i]+A[i+1:])]\n    \ndef get_cofactor(A,i,j):   \n    '''\n    Write a python function to find the cofactor of a matrix.\n    '''\n    return (((-1)**(i+j))*matrix_determinant(get_minor(A,i,j)))\n    \ndef matrix_transpose(A):   \n    '''\n    Write a python function to find the transpose of a matrix.\n    '''\n    return [[A[j][i] for j in range(len(A[0]))] for i in range(len(A))]\n    \ndef matrix_conjugate(A):   \n    '''\n    Write a python function to find the conjugate of a matrix.\n    '''\n    return [[A[i][j] for i in range(len(A))] for j in range(len(A[0]))]\n    \ndef matrix_T(A):   \n    '''\n    Write a python function to find the transpose of a matrix.\n    '''\n    return matrix_transpose(matrix_conjugate(A))\n    \ndef matrix_multiply_element(A,i,j,B):   \n    '''\n    Write a python function to find the elementwise multiplication of two matrices.\n    '''\n    return [[A[i][k]*B[k][j] for k in range(len(A[0]))] for j in range(len(B[0]))]\n    \ndef matrix_multiply(A,B):   \n    '''\n    Write a python function to find the matrix multiplication of two matrices.\n    '''\n    if len(A[0])!= len(B):\n        return None\n    else:\n        return [[sum(A[i][k]*B[k][j] for k in range(len(A[0]))) for j in range(len(B[0]))] for i in range(len(A))]\n    \ndef matrix_vector_multiply(a,A,B):   \n    '''\n    Write a python function to find the matrix vector multiplication of a matrix and a vector.\n    '''\n    if len(A[0])!= len(B):\n        return None\n    else:\n        return [[sum(A[i][k]*B[k][j] for k in range(len(A[0]))) for j in range(len(B[0]))] for i in range(len(A))]\n    \ndef matrix_matrix_multiply(A,B):   \n    '''\n    Write a python function to find the matrix-matrix multiplication of two matrices.\n    '''\n    if len(A[0])!= len(B):\n        return None\n    else:\n        return [[sum(A[i][k]*B[k][j] for k in range(len(A[0]))) for j in range(len(B[0]))] for i in range(len(A))]\n    \ndef matrix_matrix_multiply_element(A,B,i,j):   \n    '''\n    Write a python function to find the elementwise matrix multiplication of two matrices.\n    '''\n    return [[sum(A[i][k]*B[k][j] for k in range(len(A[0]))) for j in range(len(B[0]))] for i in range(len(A))]\n    \ndef matrix_matrix_add(A,B):   \n    '''\n    Write a python function to find the addition of two matrices.\n    '''\n    return [[A[i][j]+B[i][j] for j in range(len(A[0]))] for i in range(len(A))]\n    \ndef matrix_matrix_subtract(A,B):   \n    '''\n    Write a python function to find the difference of two matrices.\n    '''\n    return [[A[i][j]-B[i][j] for j in range(len(A[0]))] for i in range(len(A))]\n    \ndef matrix_matrix_multiply_element(A,B,i,j):   \n    '''\n    Write a python function to find the elementwise matrix multiplication of two matrices.\n    '''\n    return [[A[i][k]*B[k][j] for k in range(len(A[0]))] for j in range(len(B[0]))]\n    \ndef matrix_matrix_divide_element("
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n    \ndef minumum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print a\n    else:\n        print b\n    return\nmaximum(5,2)\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1[1:-1]\n    return tuple(str1.split(\",\"))\n    \ndef tuple_to_string(tup1):\n    '''\n    Write a function to convert a given tuple to a string.\n    '''\n    return '[' + ','.join(tup1) + ']'\n    \n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    new_tuple=tuple(str1)\n    return new_tuple\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    res = []\n    for i in str1:\n        res.append(i)\n    return tuple(res)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    l = []\n    for i in str1:\n        l.append(i)\n    return tuple(l)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    result_list = list(str1)\n    #print result_list\n    return result_list\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    if not isinstance(str1, str):\n        raise TypeError('Expected string input')\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n    \ndef tuple_to_string(tup1):\n    '''\n    Write a function to convert a given tuple of characters to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # TODO: Write your code here\n    return n & (n-1)\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # compute number of bits.\n    bit_count = 0\n    while (n):\n        bit_count += 1\n        n &= n - 1\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = (n & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8) + 1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return set_left_most_unset_bit(n/2) * 2 + n % 2\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # get the binary representation of n\n    b = bin(n)\n    # get rid of '0b' prefix\n    b = b[2:]\n    # pad with zeros to the left if the binary representation has less than 64 bits\n    b = '0'*(64-len(b)) + b\n    # get the 64 bits binary representation of n\n    x = [b[i:i+8] for i in range(0, 64, 8)]\n    # the left most bit is the least significant bit.\n    # the rightmost bit is the most significant bit.\n    # we have to swap the bits and store the last 4 bits at the end of the new binary\n    # representation.\n    x.reverse()\n    x = ''.join(x)\n    x = x + b[-4:]\n    # convert the binary to integer\n    return int(x, 2)\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n ^ (n & (n-1))\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # take the rightmost bitwise and with (1<<1)\n    # we can find the left most bit that is unset\n    # we will then perform XOR on the result with n\n    return n^(1<<0)\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = n | (1 << (32 - 1))\n    n &= ~(1 << 32)\n    return n\n    \ndef bit_not(n):\n    '''\n    Write a python function to get the bitwise NOT of the integer.\n    '''\n    return ~n\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | (1 << n.bit_length()) - 1\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return 1\n    elif n%2 == 1:\n        return n + 1\n    else:\n        return n/2\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*(3.14159)*(r**2)*(h)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (3.14159)*(r**2)*(h)\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*(3.14159)*(r**3)\ndef volume_pyramid(h,r):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return (1/3)*(3.14159)*(r**2)*(h)\ndef surface_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return (3.14159)*(r**2)*(h)+(3.14159)*(r**2)\ndef surface_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (3.14159)*(r**2)*2+h\ndef surface_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4*3.14159)*(r**2)\ndef surface_pyramid(h,r):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    return (3.14159)*(r**2)*2+h\ndef volume_torus(r,h):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    return (3.14159)*(r**2)*(h/2)\ndef volume_paraboloid(r,h):\n    '''\n    Write a function to find the volume of a paraboloid.\n    '''\n    return (1/3)*(3.14159)*(r**2)*(h)\ndef volume_ellipsoid(r,h):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    return (3.14159)*(r**2)*(h)\ndef volume_half_pyramid(r,h):\n    '''\n    Write a function to find the volume of a half-pyramid.\n    '''\n    return (1/3)*(3.14159)*(r**2)*(h)\ndef volume_multiple_cuboids(a,b,c,d,e,f,g,h,i,j,k):\n    '''\n    Write a function to find the volume of a cuboid given the length of cuboid sides.\n    '''\n    return (a*b*c)*(d*e*f)*(g*h*i)*(j*k)\ndef volume_cuboid(a,b,c,d,e,f,g,h):\n    '''\n    Write a function to find the volume of a cuboid given the length of cuboid sides.\n    '''\n    return (a*b*c)*(d*e*f)*(g*h)\ndef volume_rectangular_prism(a,b,c):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return (a*b)*(c)\ndef volume_prism(a,b,c):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    return (a*b*c)\ndef volume_cone_prism(r,h,a,b,c):\n    '''\n    Write a function to find the volume of a cone and prism.\n    '''\n    return (1/3)*(3.14159)*(r**2)*(h)*(a*b*c)\ndef volume_triangular_prism(a,b,c):\n    '''\n    Write a function to find the volume of a triangular prism.\n    '''\n    return (1/2)*(a*b*c)\ndef volume_trapezoid_prism(a,b,c):\n    '''\n    Write a function to find the volume of a triangular prism.\n    '''\n    return ((1/2)*(a*b+b*c+a*c))\ndef surface_cube(a,b,c):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return (6)*(a*b*c)\ndef surface_pyramid_prism(a,b,c):\n    '''\n    Write a function to find the surface area of a pyramid and prism.\n    '''\n    return (2)*(a*b*c)\ndef surface_box(a,b,c):\n    '''\n    Write a function to find the surface area of a box.\n    '''\n    return (2)*(a*b*c)\ndef surface_rectangular_prism(a,b,c):\n    '''\n    Write a function to find the surface area of a rectangular prism.\n    '''\n    return (4)*(a*b)\ndef surface_triangular_prism(a,b,c):\n    '''\n    Write a function to find the surface area of a triangular prism.\n    '''\n    return (2)*(a*b+b*c+a*c)\ndef surface_trapezoid_prism(a,b,c):\n    '''\n    Write a function to find the surface area of a triangular prism.\n    '''\n    return (4)*(a*b+b*c+a*c)\ndef surface_cuboid(a,b,c,d,e,f,g,h):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    return (6)*(a*b*c+d*e*f+g*h)\ndef surface_prism(a,b,c):\n    '''\n    Write a function to find the surface area of a prism.\n    '''\n    return (2)*(a*b+b*c+a*c)\ndef surface_cone_prism(r,h,a,b,c):\n    '''\n    Write a function to find the surface area of a cone and prism.\n    '''\n    return (2)*(3.14159)*(r**2)*(h)*(a*b*c)\ndef surface_rectangular_prism(a,b,c):\n    '''\n    Write a function to find the surface area of a rectangular prism.\n    '''\n    return (2)*(a*b+b*c+a*c)\ndef surface_triangular_prism(a,b,c):\n    '''\n    Write a function to find the surface area of a triangular prism.\n    '''\n    return (2)*(a*b+b*c+a*c)\ndef surface_trapezoid_prism(a,b,c):\n    '''\n    Write a function to find the surface area of a triangular prism.\n    '''\n    return (2)*(a*b+b*c+a*c)\ndef surface_ellipsoid(a,b,c):\n    '''\n    Write a function to find the surface area of an ellipsoid.\n    '''\n    return (4*3.14159)*(a**2)*(b**2)*(c**2)\ndef surface_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4*3.14159)*(r**2)\ndef surface_pyramid(h,r):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    return (3.14159)*(r**2)*(h)+(3.14159)*(r**2)\ndef surface_cube_prism(a,b,c,d,e,f,g,h):\n    '''\n    Write a function to find the surface area of a cube and prism.\n    '''\n    return (6)*(a*b*c+d*e*f+g*h)\ndef surface_cuboid(a,b,c,d,e,f,g,h):\n    '''\n    Write a function to find the surface area of a cu"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = (math.pi/3)*r**2*h\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #pi*r*r*h/3\n    return math.pi*r*r*h/3\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #4/3*pi*r*r*h\n    return 4/3*math.pi*r*r*r\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return ((3/4)*(math.pi)*(r**2)*(h))\ndef volume_tetrahedron(a,b,c,d):\n    '''\n    Write a function to find the volume of a tetrahedron.\n    '''\n    return ((4/3)*(math.pi)*(a**2)*(b*c*d))\ndef volume_cuboid(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return (a*b*c)\ndef volume_prism(a,b,c,d):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    return (a*b*d)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return ((math.pi)*(r**2)*(h))\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return ((4/3)*math.pi*(r**3))\ndef volume_cone_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cone and a cylinder.\n    '''\n    return (1/3)*(math.pi)*(r**2)*(h)\ndef volume_cube_sphere(r):\n    '''\n    Write a function to find the volume of a cube and a sphere.\n    '''\n    return (1/3)*(3**(1/2))*(r**3)\ndef volume_right_circular_cylinder(r,h):\n    '''\n    Write a function to find the volume of a right circular cylinder.\n    '''\n    return ((math.pi)*(r**2)*(h))\ndef volume_right_circular_cone(r,h):\n    '''\n    Write a function to find the volume of a right circular cone.\n    '''\n    return ((1/3)*(math.pi)*(r**2)*(h))\ndef volume_sphere_cylinder(r,h):\n    '''\n    Write a function to find the volume of a sphere and a cylinder.\n    '''\n    return (math.pi)*(r**2)*(h)\ndef volume_sphere_cube(r):\n    '''\n    Write a function to find the volume of a sphere and a cube.\n    '''\n    return (1/3)*(3**(1/2))*(r**3)\ndef volume_sphere_rectangular_prism(r,a,b):\n    '''\n    Write a function to find the volume of a sphere and a rectangular prism.\n    '''\n    return (1/3)*(3**(1/2))*(r**3)*(a*b)\ndef volume_sphere_trapezoid(r,a,b):\n    '''\n    Write a function to find the volume of a sphere and a trapezoid.\n    '''\n    return (1/3)*(3**(1/2))*(r**3)*(a*b/2)\ndef volume_sphere_cuboid(r):\n    '''\n    Write a function to find the volume of a sphere and a cuboid.\n    '''\n    return (1/3)*(3**(1/2))*(r**3)\ndef volume_sphere_spherical_caps(r):\n    '''\n    Write a function to find the volume of a sphere and a spherical caps.\n    '''\n    return (1/3)*(3**(1/2))*(r**3)\ndef volume_sphere_spherical_cap(r):\n    '''\n    Write a function to find the volume of a sphere and a spherical cap.\n    '''\n    return (1/3)*(3**(1/2))*(r**3)*(math.pi)\ndef volume_sphere_torus(r):\n    '''\n    Write a function to find the volume of a sphere and a torus.\n    '''\n    return (1/3)*(3**(1/2))*(r**3)*(math.pi*2)\ndef volume_sphere_crescent_sphere(r):\n    '''\n    Write a function to find the volume of a sphere and a crescent sphere.\n    '''\n    return (1/3)*(3**(1/2))*(r**3)*(math.pi*2)\ndef volume_sphere_spherical_caps(r):\n    '''\n    Write a function to find the volume of a sphere and a spherical caps.\n    '''\n    return (1/3)*(3**(1/2))*(r**3)*(math.pi*2)\ndef volume_sphere_spherical_cap(r):\n    '''\n    Write a function to find the volume of a sphere and a spherical cap.\n    '''\n    return (1/3)*(3**(1/2))*(r**3)*(math.pi*2)*(math.pi/2)\ndef volume_sphere_ring(r):\n    '''\n    Write a function to find the volume of a sphere and a ring.\n    '''\n    return (1/3)*(3**(1/2))*(r**3)*(math.pi)\ndef volume_sphere_spherical_caps(r):\n    '''\n    Write a function to find the volume of a sphere and a spherical caps.\n    '''\n    return (1/3)*(3**(1/2))*(r**3)*(math.pi)\ndef volume_sphere_spherical_cap(r):\n    '''\n    Write a function to find the volume of a sphere and a spherical cap.\n    '''\n    return (1/3)*(3**(1/2))*(r**3)*(math.pi)*(math.pi/2)\ndef volume_sphere_torus(r):\n    '''\n    Write a function to find the volume of a sphere and a torus.\n    '''\n    return (1/3)*(3**(1/2))*(r**3)*(math.pi*2)\ndef volume_sphere_crescent_sphere(r):\n    '''\n    Write a function to find the volume of a sphere and a crescent sphere.\n    '''\n    return (1/3)*(3**(1/2))*(r**3)*(math.pi*2)\ndef volume_sphere_ring(r):\n    '''\n    Write a function to find the volume of a sphere and a ring.\n    '''\n    return (1/3)*(3**(1/2))*(r**3)*(math.pi)\ndef volume_sphere_spherical_caps(r):\n    '''\n    Write a function to find the volume of a sphere and a spherical caps.\n    '''\n    return (1/3)*(3**(1/2))*(r**3)*(math.pi)\ndef volume_sphere_spherical_cap(r):\n    '''\n    Write a function to find the volume of a sphere and a spherical cap.\n    '''\n    return (1/3)*(3**(1/2))*(r**3)*(math.pi)*(math.pi/2)\ndef volume_sphere_ring(r):\n    '''\n    Write a function to find the volume of a sphere and a ring.\n    '''\n    return (1/3)*(3**(1/2))*(r**3)*(math.pi)\ndef volume_sphere_spherical_caps(r):\n    '''\n    Write a function to find the volume of a sphere and a spherical caps.\n    '''\n    return (1/3)*(3**(1/2))*(r**3)*(math.pi)\ndef volume_sphere_spherical_cap(r):\n    '''\n    Write a function to find the volume of a sphere and a spherical cap.\n    '''\n    return (1/3)*(3**(1/2))*(r**3)*(math.pi)*(math.pi/2)\ndef volume_sphere_torus(r):\n    '''\n    Write a function to find the volume of a sphere and a torus.\n    '''\n    return (1/3)*(3**(1/"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi * (r**2) * h)/3.0\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = (math.pi * r**2 * h)/3\n    return v\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = 4/3 * math.pi * r**3\n    return v\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v = 2 * math.pi * r * h\n    return v\n    \ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    v = l**3\n    return v\n    \ndef volume_prism(b,h):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    v = b * h\n    return v\n    \ndef volume_pyramid(b,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v = (b * h)/2\n    return v\n    \ndef volume_octahedron(l):\n    '''\n    Write a function to find the volume of an octahedron.\n    '''\n    v = l**3\n    return v\n    \ndef volume_tetrahedron(l):\n    '''\n    Write a function to find the volume of a tetrahedron.\n    '''\n    v = l**3 / 4\n    return v\n    \ndef volume_rhombus(r,h):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    v = math.pi * r**2 * h / 4\n    return v\n    \ndef volume_truncated_cone(r,h,r1):\n    '''\n    Write a function to find the volume of a truncated cone.\n    '''\n    v = math.pi * r**2 * h / 3\n    v1 = v - (math.pi * r1**2 * h / 3)\n    return v1\n    \ndef volume_ellipsoid(a,b,c):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    v = 4/3 * math.pi * a * b * c\n    return v\n    \ndef volume_right_circular_cone(r,h,r1):\n    '''\n    Write a function to find the volume of a right circular cone.\n    '''\n    v = math.pi * r**2 * h / 3\n    v1 = v - (math.pi * r1**2 * h / 3)\n    return v1\n    \ndef volume_triangular_pyramid(b,h):\n    '''\n    Write a function to find the volume of a triangular pyramid.\n    '''\n    v = (b * h) / 2\n    return v\n    \ndef volume_trapezoid(b,h):\n    '''\n    Write a function to find the volume of a trapezoid.\n    '''\n    v = b * h\n    return v\n    \ndef volume_isosceles_triangle(b,h):\n    '''\n    Write a function to find the volume of an isosceles triangle.\n    '''\n    v = (b * h) / 2\n    return v\n    \ndef volume_parallelogram(b,h):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    v = b * h\n    return v\n    \ndef volume_triangle(b,h):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    v = b * h / 2\n    return v\n    \ndef volume_kite(b,h,t):\n    '''\n    Write a function to find the volume of a kite.\n    '''\n    v = (b * h * t) / 4\n    return v\n    \ndef volume_conical_cone(r,h,t):\n    '''\n    Write a function to find the volume of a conical cone.\n    '''\n    v = math.pi * r**2 * h / 3\n    v1 = v - (math.pi * t**2 * r / 3)\n    return v1\n    \ndef volume_ellipsoid_pyramid(a,b,c):\n    '''\n    Write a function to find the volume of an ellipsoid pyramid.\n    '''\n    v = 4/3 * math.pi * a * b * c\n    return v\n    \ndef volume_kite_pyramid(b,h,t):\n    '''\n    Write a function to find the volume of a kite pyramid.\n    '''\n    v = (b * h * t) / 2\n    return v\n    \ndef volume_superellipsoid(a,b,c):\n    '''\n    Write a function to find the volume of a superellipsoid.\n    '''\n    v = 4/3 * math.pi * a * b * c\n    return v\n    \ndef volume_triangular_prism(b,h):\n    '''\n    Write a function to find the volume of a triangular prism.\n    '''\n    v = (b * h) / 2\n    return v\n    \ndef volume_pyramid_and_cone(b,h,r):\n    '''\n    Write a function to find the volume of a pyramid and cone.\n    '''\n    v = (b * h) / 2\n    v1 = v - (math.pi * r**2 * h / 3)\n    return v1\n    \ndef volume_square_pyramid(b,h):\n    '''\n    Write a function to find the volume of a square pyramid.\n    '''\n    v = b * h\n    return v\n    \ndef volume_dodecahedron(l):\n    '''\n    Write a function to find the volume of a dodecahedron.\n    '''\n    v = l**3 / 12\n    return v\n    \ndef volume_truncated_cube(r,h,r1):\n    '''\n    Write a function to find the volume of a truncated cube.\n    '''\n    v = (2 * math.pi * r**2 * h) / 3\n    v1 = v - (math.pi * r1**2 * h / 3)\n    return v1\n    \ndef volume_ellipsoid_and_sphere(a,b,c):\n    '''\n    Write a function to find the volume of an ellipsoid and a sphere.\n    '''\n    v = 4/3 * math.pi * a * b * c\n    return v\n    \ndef volume_triangular_prism_and_cube(b,h,r):\n    '''\n    Write a function to find the volume of a triangular prism and a cube.\n    '''\n    v = (b * h) / 2\n    v1 = v - (r**2 * h / 3)\n    return v1\n    \ndef volume_octahedron_and_triangular_pyramid(b,h):\n    '''\n    Write a function to find the volume of an octahedron and a triangular pyramid.\n    '''\n    v = (b * h) / 2\n    return v\n    \ndef volume_octahedron_and_square_pyramid(b,h):\n    '''\n    Write a function to find the volume of an octahedron and a square pyramid.\n    '''\n    v = (b * h) / 2\n    return v\n    \ndef volume_triangular_prism_and_octahedron(b,h,r):\n    '''\n    Write a function to find the volume of a triangular prism and an octahedron.\n    '''\n    v = (b * h) / 2\n    v1 = v - (r**2 * h / 3)\n    return v1\n    \ndef volume_triangular_prism_and_triangular_pyramid(b,h,r):\n    '''\n    Write a function to find the volume of a triangular prism and a triangular pyramid.\n    '''\n    v = (b * h) / 2\n    v1 = v - (r**2 * h / 3)\n    return v1\n    \ndef volume_rhombus_and_square_pyramid(r,h):\n    '''\n    Write a functio"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    return 1/3*pi*r*r*h\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = (math.pi * r**2) * h / 3\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*r**2*h\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 3/4 * math.pi * r**2 * h\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while(2**i) <= n: \n        i += 1\n    return i - 1\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    limit = 0\n    while(limit<n):\n        limit = limit * 2\n    return limit\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    l = int(math.log(n, 2))\n    if l == 0:\n        return n\n    if l % 2 == 0:\n        return 2**(l-1)\n    else:\n        return 2**l\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    if n == 1:\n        return 1\n    \n    if n <= 0:\n        return 0\n    \n    if n & (n-1) == 0:\n        return n\n    \n    while (n & (n-1) > 0):\n        n = n >> 1\n    \n    return n\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 0:\n        n = -n\n    if n <= 1:\n        return n\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power_of_2 = 0\n    while highest_power_of_2**2 <= n: \n        highest_power_of_2 += 1\n    return highest_power_of_2\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    # initializing start and end values \n    start = 1\n    end = n + 1\n    \n    # use while loop to find the highest power of 2 that is less than or equal to n \n    while start <= end:\n        mid = start + (end - start) // 2\n        if mid * mid <= n:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return start - 1\n    \ndef find_lowest_power_of_2(n):\n    '''\n    Write a python function to find the lowest power of 2 that is greater than or equal to n.\n    '''\n    \n    # initializing start and end values \n    start = 1\n    end = n + 1\n    \n    # use while loop to find the highest power of 2 that is less than or equal to n \n    while start <= end:\n        mid = start + (end - start) // 2\n        if mid * mid > n:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return start - 1\n    \ndef next_Prime(n): \n    '''\n    Write a python function to find the next prime number that is greater than or equal to n.\n    '''\n    \n    # initializing start and end values \n    start = 2\n    end = n + 1\n    \n    # use while loop to find the next prime number that is greater than or equal to n \n    while start <= end:\n        mid = start + (end - start) // 2\n        if mid > 1:\n            if mid * mid == n:\n                return mid\n            elif (mid * mid > n):\n                end = mid - 1\n            else:\n                start = mid + 1\n    return start - 1\n    \ndef next_Prime_or_Even(n):\n    '''\n    Write a python function to find the next prime number that is greater than or equal to n.\n    If n is even, the next prime is found by using the previous prime as the lower bound.\n    '''\n    \n    # initializing start and end values \n    start = 2\n    end = n + 1\n    \n    # use while loop to find the next prime number that is greater than or equal to n \n    while start <= end:\n        mid = start + (end - start) // 2\n        if mid > 1:\n            if (mid * mid <= n) and (mid * mid > end):\n                return mid\n            elif (mid * mid > n):\n                start = mid + 1\n            else:\n                end = mid - 1\n    if start > end:\n        return start - 1\n    return start\n    \ndef prime_Numbers_between_2_and_n(n):\n    '''\n    Write a python function to find all the prime numbers that are between 2 and n (both inclusive).\n    '''\n    \n    # initializing start and end values \n    start = 2\n    end = n + 1\n    \n    # use while loop to find all the prime numbers between 2 and n (both inclusive) \n    while start <= end:\n        mid = start + (end - start) // 2\n        if is_Prime(mid):\n            start = mid + 1\n        else:\n            end = mid - 1\n    return start - 1\n    \ndef is_Prime(n):\n    '''\n    Write a python function to check whether n is prime or not.\n    A prime number is a number that is only divisible by 1 and itself.\n    '''\n    \n    # initializing start and end values \n    start = 2\n    end = n + 1\n    \n    # use while loop to check if n is prime or not \n    while start <= end:\n        mid = start + (end - start) // 2\n        if mid * mid > n:\n            end = mid - 1\n        elif mid * mid < n:\n            start = mid + 1\n        else:\n            return True\n    return False\n    \ndef reverse_Integer(n): \n    '''\n    Write a python function to reverse an integer.\n    '''\n    \n    # initializing start and end values \n    start = 2\n    end = n + 1\n    \n    # use while loop to reverse an integer\n    while start <= end:\n        mid = start + (end - start) // 2\n        if mid * mid < n:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return start - 1\n    \ndef reverse_Integer_or_Not(n):\n    '''\n    Write a python function to reverse an integer.\n    If n is negative, reverse_Integer_or_Not() returns the absolute value of n.\n    '''\n    \n    # initializing start and end values \n    start = 2\n    end = n + 1\n    \n    # use while loop to reverse an integer\n    while start <= end:\n        mid = start + (end - start) // 2\n        if mid * mid < n:\n            start = mid + 1\n        else:\n            end = mid - 1\n    if n < 0:\n        return -start\n    else:\n        return start\n    \ndef reverse_Integer_without_converting(n): \n    '''\n    Write a python function to reverse an integer without converting it to a string.\n    '''\n    \n    # initializing start and end values \n    start = 2\n    end = n + 1\n    \n    # use while loop to reverse an integer\n    while start <= end:\n        mid = start + (end - start) // 2\n        if mid * mid < n:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return start - 1\n    \ndef count_Digits(n): \n    '''\n    Write a python function to count the number of digits in an integer.\n    '''\n    \n    # initializing start and end values \n    start = 2\n    end = n + 1\n    \n    # use while loop to count the number of digits in an integer\n    while start <= end:\n        mid = start + (end - start) // 2\n        if mid * mid < n:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return end\n    \ndef count_Digits_or_Not(n): \n    '''\n    Write a python function to count the number of digits in an integer.\n    If n is negative, count_Digits_or_Not() returns the absolute value of n.\n    '''\n    \n    # initializing start and end values \n    start = 2\n    end = n + 1\n    \n    # use while loop to count the number of digits in an integer\n    while start <= end:\n        mid = start + (end - start) // 2\n        if mid * mid < n:\n            start = mid + 1\n        else:\n            end = mid - 1\n    if n < 0:\n        return -start\n    else:\n        return start\n    \ndef reverse_Integer_without_converting(n): \n    '''\n    Write a python function to reverse an integer without converting it to a string.\n    '''\n    \n    # initializing start and end values \n    start = 2\n    end = n + 1\n    \n    # use while loop to reverse an integer\n    while start <= end:\n        mid = start + (end - start) // 2\n        if mid * mid < n:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return start - 1\n    \ndef prime_Numbers_in_a_range(n): \n    '''\n    Write a python function to find all the prime numbers that are between 2 and n (both inclusive).\n    '''\n    \n    # initializing start and end values \n    start = 2\n    end = n + 1\n    \n    # use while loop to find all the prime numbers between 2 and n (both inclusive) \n    while start <= end:\n        mid = start + (end - start) // 2\n        if is_Prime(mid):\n            start = mid + 1\n        else:\n            end = mid - 1\n    return start - 1\n    \ndef count_Prime_Numbers_in_a_range(n): \n    '''\n    Write a python function to find all the prime numbers that are between 2 and n (both inclusive).\n    '''\n    \n    # initializing start and end values \n    start = 2\n    end = n + 1\n    \n    # use while loop to find all the prime numbers between 2 and n (both inclusive) \n    while star"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # convert the input into an integer\n    n = int(n)\n    # find the highest power of 2 that is less than or equal to the input\n    # a power of 2 is a number whose most significant bit is 0.\n    # say you have a number that is a power of 2\n    # it is the same as it is 2**x where x is the power of 2\n    # the least significant bit is the right most bit\n    # the right most bit is the 1 in a binary number\n    # the right most bit of 101 is 1 and the right most bit of 0 is 0\n    # 101 >> 1 = 100\n    # 0 >> 1 = 0\n    # 100 >> 1 = 10\n    # 10 >> 1 = 1\n    # 1 >> 1 = 1\n    # 0 >> 1 = 0\n    power = 0\n    while n > 1:\n        # get the most significant bit of n\n        most_significant_bit = n & 1\n        # get the power of 2 that is less than or equal to the input\n        power = 1 << power\n        # get the new n by removing the most significant bit\n        n = n >> 1\n    return power\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return math.ceil(math.log(n, 2))\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    n_int = int(n)\n    log = math.log(n_int, 2)\n    return int(math.floor(log))\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    lucas_numbers = [2]\n    lucas_numbers.append(1)\n    for i in range(2, n + 1):\n        lucas_numbers.append(lucas_numbers[-1] + lucas_numbers[-2])\n    return lucas_numbers[-1]\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    n_1 = n\n    n_2 = n_1\n    for i in xrange(1,n):\n        n_1 = n_1 + n_1\n        n_2 = n_2 + n_1\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    \n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 2) + find_lucas(n - 1)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    def find_lucas_rec(n):\n        if n == 0:\n            return 2\n        elif n == 1:\n            return 1\n        else:\n            return find_lucas_rec(n-1) + find_lucas_rec(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    x = 0\n    y = 1\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return find_lucas(n/2)**2 + find_lucas(n/2)**2\n    else:\n        return find_lucas(n-1)**2 + find_lucas(n-1)**2\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 1\n    a = 0\n    b = 1\n    for i in range(1,n):\n        a,b = b,(a+b)%1000000007\n    return b\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # We need to find the nth lucas number. So we first check if then'th lucas number is\n    # already computed. If so, then return that. Otherwise we need to compute the lucas\n    # number. To do this, we first check if then'th lucas number is 0, then we compute the\n    # lucas number. If then'th lucas number is 1, then we return 1. If we are not at the\n    #n'th lucas number, then we need to use the formula to find the lucas number. To do\n    # this, we need to compute the value of n by adding 1. If we then add 1 to n, then we\n    # get then'th lucas number. If we then add 2 to n, then we get then'th lucas number\n    # and so on.\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if not list_:\n        return None\n    \n    new_list = []\n    \n    for item in list_:\n        new_list.append(string.format(item))\n    \n    return new_list\n    \ndef get_extension(list_):\n    '''\n    Write a function that accepts a list of strings and returns a list of all the strings with a. as a \n    suffix.\n    '''\n    if not list_:\n        return None\n    \n    new_list = []\n    \n    for item in list_:\n        if item.endswith('.'):\n            new_list.append(item)\n    \n    return new_list\n    \ndef remove_all_instances(list_, element):\n    '''\n    Write a function that accepts a list of numbers and removes all instances of the number passed in to\n    the function.\n    '''\n    if not list_:\n        return None\n    \n    new_list = []\n    \n    for item in list_:\n        if item!= element:\n            new_list.append(item)\n    \n    return new_list\n    \ndef get_average(list_):\n    '''\n    Write a function that accepts a list of numbers and returns the average of all the numbers in the list.\n    '''\n    if not list_:\n        return None\n    \n    new_list = []\n    \n    total = 0\n    \n    for item in list_:\n        total += item\n    \n    return total / len(list_)\n    \ndef get_smallest(list_):\n    '''\n    Write a function that accepts a list of numbers and returns the smallest number in the list.\n    '''\n    if not list_:\n        return None\n    \n    smallest = list_[0]\n    \n    for item in list_:\n        if item < smallest:\n            smallest = item\n    \n    return smallest\n    \ndef get_largest(list_):\n    '''\n    Write a function that accepts a list of numbers and returns the largest number in the list.\n    '''\n    if not list_:\n        return None\n    \n    largest = list_[0]\n    \n    for item in list_:\n        if item > largest:\n            largest = item\n    \n    return largest\n    \ndef get_longest_str(list_):\n    '''\n    Write a function that accepts a list of strings and returns the longest string in the list.\n    '''\n    if not list_:\n        return None\n    \n    longest = list_[0]\n    \n    for item in list_:\n        if len(item) > len(longest):\n            longest = item\n    \n    return longest\n    \ndef get_shortest_str(list_):\n    '''\n    Write a function that accepts a list of strings and returns the shortest string in the list.\n    '''\n    if not list_:\n        return None\n    \n    shortest = list_[0]\n    \n    for item in list_:\n        if len(item) < len(shortest):\n            shortest = item\n    \n    return shortest\n    \ndef is_abecedarian(list_):\n    '''\n    Write a function that accepts a list of strings and returns a boolean indicating whether the strings in\n    the list form an abecedarian ordering.\n    '''\n    if not list_:\n        return None\n    \n    abecedarian = True\n    \n    for i in range(1, len(list_)):\n        if list_[i-1] > list_[i]:\n            abecedarian = False\n            break\n    \n    return abecedarian\n    \ndef is_palindrome(list_):\n    '''\n    Write a function that accepts a list of strings and returns a boolean indicating whether the strings in\n    the list form a palindrome ordering.\n    '''\n    if not list_:\n        return None\n    \n    palindrome = True\n    \n    for i in range(len(list_)//2):\n        if list_[i]!= list_[-i-1]:\n            palindrome = False\n            break\n    \n    return palindrome\n    \ndef get_last_n_str(list_, n):\n    '''\n    Write a function that accepts a list of strings and returns a list of the last n strings in the list.\n    '''\n    if not list_:\n        return None\n    \n    last_n_strs = []\n    \n    for i in range(len(list_) - n, len(list_)):\n        last_n_strs.append(list_[i])\n    \n    return last_n_strs\n    \ndef get_last_n_ints(list_, n):\n    '''\n    Write a function that accepts a list of integers and returns a list of the last n integers in the list.\n    '''\n    if not list_:\n        return None\n    \n    last_n_ints = []\n    \n    for i in range(len(list_) - n, len(list_)):\n        last_n_ints.append(list_[i])\n    \n    return last_n_ints\n    \ndef reverse_last_n_strs(list_, n):\n    '''\n    Write a function that accepts a list of strings and returns a list of the last n strings in the list in\n    reverse order.\n    '''\n    if not list_:\n        return None\n    \n    last_n_strs = []\n    \n    for i in range(len(list_) - n, len(list_)):\n        last_n_strs.append(list_[i])\n    \n    last_n_strs.reverse()\n    \n    return last_n_strs\n    \ndef get_nth_str(list_, n):\n    '''\n    Write a function that accepts a list of strings and returns a list of the nth string in the list.\n    '''\n    if not list_:\n        return None\n    \n    nth_str = []\n    \n    for i in range(len(list_)):\n        if i == n:\n            nth_str.append(list_[i])\n    \n    return nth_str\n    \ndef get_nth_int(list_, n):\n    '''\n    Write a function that accepts a list of integers and returns a list of the nth integer in the list.\n    '''\n    if not list_:\n        return None\n    \n    nth_int = []\n    \n    for i in range(len(list_)):\n        if i == n:\n            nth_int.append(list_[i])\n    \n    return nth_int\n    \ndef get_median(list_):\n    '''\n    Write a function that accepts a list of numbers and returns the median of the list.\n    '''\n    if not list_:\n        return None\n    \n    list_ = sorted(list_)\n    \n    if len(list_) % 2 == 0:\n        return (list_[len(list_)//2] + list_[len(list_)//2 - 1])/2\n    else:\n        return list_[len(list_)//2]\n    \ndef get_mode(list_):\n    '''\n    Write a function that accepts a list of numbers and returns the mode of the list.\n    '''\n    if not list_:\n        return None\n    \n    list_ = sorted(list_)\n    \n    mode_dict = {}\n    \n    for item in list_:\n        if item in mode_dict:\n            mode_dict[item] += 1\n        else:\n            mode_dict[item] = 1\n    \n    max_val = max(mode_dict.values())\n    \n    return [key for key, val in mode_dict.items() if val == max_val]\n    \ndef count_substring(string, sub):\n    '''\n    Write a function that accepts a string and a substring and returns the number of times the substring occurs in\n    the string.\n    '''\n    if not string or not sub:\n        return None\n    \n    count = 0\n    \n    for i in range(len(string)):\n        if string[i:i+len(sub)] == sub:\n            count += 1\n    \n    return count\n    \ndef get_common_letters(str1, st"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % list_[i]\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = list(list_)\n    for i, e in enumerate(list_):\n        list_[i] = e + string\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = map(str, list_)\n    return string.join(list_)\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if not isinstance(string, basestring):\n        raise ValueError\n    list_ = list(list_)\n    return [string % item for item in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = string.format(*list_)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for element in list_:\n        result.append(string.format(element))\n    return result\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % list_[i]\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for elem in list_:\n        new_list.append(string.format(elem))\n    return new_list\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string % x for x in list_]\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1.sort()\n    l2.sort()\n    l3.sort()\n    for i in range(len(l1)):\n        dict_temp = {}\n        dict_temp[l1[i]] = l2[i]\n        dict_temp[l3[i]] = l3[i]\n        if len(l1) == len(l2) == len(l3):\n            dict_temp = {l1[i]: {l2[i]: {l3[i]: l3[i]}}}\n        return dict_temp\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1.reverse()\n    l2.reverse()\n    l3.reverse()\n    return {l1[i]:{l2[i]:l3[i]} for i in range(len(l1))}\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    lst = {}\n    for i, j, k in zip(l1, l2, l3):\n        lst[i] = dict(zip(j, k))\n    return lst\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i,j,k in zip(l1,l2,l3):\n        result[i] = {j:k}\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict1 = {}\n    for i in range(len(l1)):\n        dict1[l1[i]] = {}\n        for j in range(len(l2)):\n            dict1[l1[i]][l2[j]] = l3[i][j]\n    return dict1\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return dict(zip(l1, l2))\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1 = [{'a':'first', 'b':'second'}, {'c':'third', 'd':'forth'}, {'e':'fifth', 'f':'sixth'}]\n    l2 = ['first','second', 'third', 'forth', 'fifth','sixth']\n    l3 = ['a', 'b', 'c', 'd', 'e', 'f']\n    return convert_list_to_nested_dictionary(l1, l2, l3)\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    pass\n    return {l1[i]: l2[i], l2[i]: l3[i] for i in range(len(l1))}\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    assert len(l1) == len(l2) == len(l3)\n    d = dict()\n    for i in range(len(l1)):\n        d[l1[i]] = dict()\n        d[l1[i]][l2[i]] = l3[i]\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    lst = {'root': l1, 'left': l2, 'right': l3}\n    return lst\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n <= 1:\n        return 0\n    elif n % 2 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    else:\n        return get_max_sum((n+1)/2) + get_max_sum((n+1)/3) + get_max_sum((n+1)/4) + get_max_sum((n+1)/5)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        #return (n//2 + n//3 + n//4 + n//5) if n > 0 else 0\n        return n//2 + n//3 + n//4 + n//5\n    \n    if n == 0: return 0\n    if n == 1: return 1\n    return max(f(n-2)+f(n-1)+f(n-3)+f(n-4)+f(n-5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if (n==0):\n        return 0\n    elif (n==1):\n        return 1\n    else:\n        return max(get_max_sum(n/2)+get_max_sum(n/3)+get_max_sum(n/4)+get_max_sum(n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    for i in xrange(1, n):\n        tmp = max(get_max_sum(i/2), get_max_sum(i/3), get_max_sum(i/4), get_max_sum(i/5))\n        if tmp > max_sum:\n            max_sum = tmp\n    return max_sum + 1\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return n if n == 0 else max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5))\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    max_sum = 0\n    \n    max_sum = max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n    \n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    n = int(n)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    else:\n        return get_max_sum(n-1) + n\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    n1 = n/2\n    n2 = n/3\n    n3 = n/4\n    n4 = n/5\n    if n1!= 1:\n        n1 = int(n1)\n    if n2!= 1:\n        n2 = int(n2)\n    if n3!= 1:\n        n3 = int(n3)\n    if n4!= 1:\n        n4 = int(n4)\n    return (n1 + n2 + n3 + n4 + n)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 2:\n        return n\n    elif n % 2 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    else:\n        return get_max_sum((n+1)/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return int(n**0.5)\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len_list = []\n    max_len = 0\n    for list_item in input_list:\n        if len(list_item) > max_len:\n            max_len = len(list_item)\n            max_len_list = [list_item]\n        elif len(list_item) == max_len:\n            max_len_list.append(list_item)\n    return max_len_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    \n    max_len_list = input_list[0]\n    max_len_list_index = 0\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n    for i in input_list[1:]:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length_list = len(input_list)\n    max_length_list = input_list[0]\n    for i in range(1, length_list):\n        if len(input_list[i]) > len(max_length_list):\n            max_length_list = input_list[i]\n    return max_length_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_len_list = []\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_len_list = [item]\n        elif len(item) == max_len:\n            max_len_list.append(item)\n    return max_len_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    output_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            output_list = [i]\n        elif len(i) == max_length:\n            output_list.append(i)\n    return output_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = -1\n    max_list = []\n    for each in input_list:\n        length = len(each)\n        if length > max_len:\n            max_len = length\n            max_list = [each]\n        elif length == max_len:\n            max_list.append(each)\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    len_list = list()\n    for item in input_list:\n        len_list.append(len(item))\n    return input_list[len_list.index(max(len_list))]\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    \n    max_len = 0\n    max_list = None\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = i\n    return max_list\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    my_dict = {}\n    for val in test_tup:\n        if val in my_dict:\n            return False\n        else:\n            my_dict[val] = 1\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    #if len(test_tup) == len(set(test_tup)):\n    #    return True\n    #else:\n    #    return False\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    temp_list = list()\n    for i in test_tup:\n        if i not in temp_list:\n            temp_list.append(i)\n    return len(temp_list) == len(test_tup)\n    \n    "
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    \n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    check = True\n    for x in test_tup:\n        for y in test_tup:\n            if x == y:\n                check = False\n                break\n        if not check:\n            break\n    return check\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    tup = tuple(test_tup)\n    if len(tup) == len(set(tup)):\n        print('All elements are distinct.')\n    else:\n        print('Duplicates found.')\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) == 1:\n            return str1[i]\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    dict = {}\n    \n    for i in str1:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    \n    for key, value in dict.items():\n        if value == 1:\n            return key\n    \n    return \"No non-repeating character\"\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] not in str1[i+1:]:\n            return str1[i]\n    return str1[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    # Create a hash map to store the count of each character\n    # If the character already exists, update the count\n    # Else add the character with count of 1\n    \n    char_counts = {}\n    for c in str1:\n        if c not in char_counts:\n            char_counts[c] = 1\n        else:\n            char_counts[c] += 1\n            \n    # Find the first non-repeated character\n    # Return it's ASCII value if it exists, else return '_'\n    \n    for c in str1:\n        if char_counts[c] == 1:\n            return chr(c)\n            \n    return '_'\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) == 1:\n            return i\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    for char in str1:\n        if char_dict[char] == 1:\n            return char\n    return -1\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) == 1:\n            return i\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count = {}\n    for c in str1:\n        if c in count:\n            count[c] += 1\n        else:\n            count[c] = 1\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    index = {}\n    for i in range(len(str1)):\n        if str1[i] in index:\n            index[str1[i]] = index[str1[i]] + 1\n        else:\n            index[str1[i]] = 1\n    for i in range(len(str1)):\n        if index[str1[i]] == 1:\n            return str1[i]\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # initialize a list for storing the character occurence\n    occ = [0] * 26\n    # iterate over the string, store the count of each character\n    for char in str1:\n        occ[ord(char)-ord('a')] += 1\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string) is None: \n        return False \n    elif re.search(regex, string[::-1]) is None: \n        return False \n    else: \n        return True\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    try:\n        assert re.match(regex,string), 'Invalid Input'\n        return True\n    except AssertionError:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex,string)\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex, string))\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string) is not None\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string): \n        return \"True\"\n    else: \n        return \"False\"\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string): \n        return True\n    return False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string) is not None \n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_nums = sorted([a,b,c])\n    return sorted_nums[1]\n    \n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if a>c:\n            return a\n        elif b>c:\n            return b\n        elif c>a:\n            return c\n    elif a<b:\n        if a>c:\n            return a\n        elif b<c:\n            return b\n        elif c<a:\n            return c\n    else:\n        if a>c:\n            return a\n        elif b>c:\n            return b\n        elif c>a:\n            return c\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    l=[a,b,c]\n    l.sort()\n    if l[1]<=l[0]<=l[2] or l[2]<=l[0]<=l[1]:\n        return l[1]\n    else:\n        return l[0]\ndef median_numbers2(a,b,c):\n    return a if a<=b<=c or c<=b<=a else b\ndef median_numbers3(a,b,c):\n    return b if b<=a<=c or c<=a<=b else a\ndef median_numbers4(a,b,c):\n    return b if b<=c<=a or a<=c<=b else c\ndef median_numbers5(a,b,c):\n    return a if a<=b<=c or c<=b<=a else b\ndef median_numbers6(a,b,c):\n    return a if a<=c<=b or b<=c<=a else c\ndef median_numbers7(a,b,c):\n    return a if a<=b<=c or c<=a<=b else b\ndef median_numbers8(a,b,c):\n    return a if a<=b<=c or b<=a<=c else c\ndef median_numbers9(a,b,c):\n    return a if a<=c<=b or b<=c<=a else c\ndef median_numbers10(a,b,c):\n    return b if b<=a<=c or c<=a<=b else a\ndef median_numbers11(a,b,c):\n    return b if b<=c<=a or a<=c<=b else c\ndef median_numbers12(a,b,c):\n    return b if b<=a<=c or c<=a<=b else c\ndef median_numbers13(a,b,c):\n    return c if c<=b<=a or a<=b<=c else b\ndef median_numbers14(a,b,c):\n    return c if c<=b<=a or b<=a<=c else b\ndef median_numbers15(a,b,c):\n    return c if c<=a<=b or b<=a<=c else a\ndef median_numbers16(a,b,c):\n    return a if a<=b<=c or c<=b<=a else b\ndef median_numbers17(a,b,c):\n    return a if a<=b<=c or b<=a<=c else b\ndef median_numbers18(a,b,c):\n    return a if a<=b<=c or b<=c<=a else b\ndef median_numbers19(a,b,c):\n    return a if a<=b<=c or c<=a<=b else b\ndef median_numbers20(a,b,c):\n    return c if c<=b<=a or a<=b<=c else b\ndef median_numbers21(a,b,c):\n    return c if c<=b<=a or a<=b<=c else a\ndef median_numbers22(a,b,c):\n    return c if c<=b<=a or b<=a<=c else a\ndef median_numbers23(a,b,c):\n    return a if a<=b<=c or c<=b<=a else b\ndef median_numbers24(a,b,c):\n    return a if a<=b<=c or b<=a<=c else c\ndef median_numbers25(a,b,c):\n    return a if a<=b<=c or b<=c<=a else b\ndef median_numbers26(a,b,c):\n    return a if a<=b<=c or b<=c<=a else c\ndef median_numbers27(a,b,c):\n    return c if c<=b<=a or a<=b<=c else b\ndef median_numbers28(a,b,c):\n    return c if c<=b<=a or b<=a<=c else a\ndef median_numbers29(a,b,c):\n    return c if c<=b<=a or b<=c<=a else a\ndef median_numbers30(a,b,c):\n    return b if b<=a<=c or c<=a<=b else a\ndef median_numbers31(a,b,c):\n    return b if b<=c<=a or a<=c<=b else c\ndef median_numbers32(a,b,c):\n    return b if b<=c<=a or a<=b<=c else c\ndef median_numbers33(a,b,c):\n    return a if a<=b<=c or c<=b<=a else c\ndef median_numbers34(a,b,c):\n    return a if a<=b<=c or b<=a<=c else c\ndef median_numbers35(a,b,c):\n    return a if a<=b<=c or b<=c<=a else b\ndef median_numbers36(a,b,c):\n    return a if a<=b<=c or c<=b<=a else b\ndef median_numbers37(a,b,c):\n    return a if a<=b<=c or b<=c<=a else c\ndef median_numbers38(a,b,c):\n    return a if a<=b<=c or c<=a<=b else b\ndef median_numbers39(a,b,c):\n    return a if a<=b<=c or c<=b<=a else c\ndef median_numbers40(a,b,c):\n    return b if b<=a<=c or c<=a<=b else a\ndef median_numbers41(a,b,c):\n    return b if b<=c<=a or a<=c<=b else c\ndef median_numbers42(a,b,c):\n    return b if b<=c<=a or a<=c<=b else c\ndef median_numbers43(a,b,c):\n    return a if a<=b<=c or b<=a<=c else c\ndef median_numbers44(a,b,c):\n    return a if a<=b<=c or b<=c<=a else b\ndef median_numbers45(a,b,c):\n    return a if a<=b<=c or b<=c<=a else c\ndef median_numbers46(a,b,c):\n    return a if a<=b<=c or c<=a<=b else b\ndef median_numbers47(a,b,c):\n    return a if a<=b<=c or b<=c<=a else c\ndef median_numbers48(a,b,c):\n    return a if a<=b<=c or c<=b<=a else b\ndef median_numbers49(a,b,c):\n    return a if a<=b<=c or b<=c<=a else c\ndef median_numbers50(a,b,c):\n    return c if c<=b<=a or a<=b<=c else b\ndef median_numbers51(a,b,c):\n    return c if c<=b<=a or b<=a<=c else a\ndef median_numbers52(a,b,c):\n    return c if c<=b<=a or b<=c<=a else a\ndef median_numbers53(a,b,c):\n    return b if b<=a<=c or c<=a<=b else c\ndef median_numbers54(a,b,c):\n    return b if b<=c<=a or a<=c<=b else c\ndef median_numbers55(a,b,c):\n    return c if c<=b<=a or b<=a<=c else b"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    num_list = [a,b,c]\n    num_list.sort()\n    return num_list[1]\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    num_list = [a,b,c]\n    num_list.sort()\n    #median = num_list[len(num_list)/2]\n    if len(num_list)%2 == 0:\n        return (num_list[len(num_list)/2]+num_list[len(num_list)/2-1])/2\n    else:\n        return num_list[len(num_list)/2]\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    if a > b and a > c:\n        if b < c:\n            return b\n        elif c < b:\n            return c\n        else:\n            return a\n    elif b > a and b > c:\n        if a < c:\n            return a\n        elif c < a:\n            return c\n        else:\n            return b\n    else:\n        if a < b:\n            return a\n        elif b < a:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if a>c:\n            return a\n        elif b>c:\n            return c\n        else:\n            return b\n    elif b>a:\n        if b>c:\n            return b\n        elif c>a:\n            return a\n        else:\n            return c\n    else:\n        if c>a:\n            return a\n        elif a>b:\n            return b\n        else:\n            return c\n    \nprint(median_numbers(2,3,3))\n    \ndef median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if a>c:\n            return a\n        elif b>c:\n            return c\n        else:\n            return b\n    elif b>a:\n        if b>c:\n            return b\n        elif c>a:\n            return a\n        else:\n            return c\n    else:\n        if c>a:\n            return a\n        elif a>b:\n            return b\n        else:\n            return c\n    \nprint(median_numbers(3,3,4))\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if a > c:\n            median = a\n        elif b > c:\n            median = b\n        else:\n            median = c\n    elif b > c:\n        if a > c:\n            median = a\n        elif b > c:\n            median = b\n        else:\n            median = c\n    else:\n        if a > c:\n            median = a\n        elif b > c:\n            median = b\n        else:\n            median = c\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if (a>b) and (a>c):\n        return a\n    elif (b>a) and (b>c):\n        return b\n    else:\n        return c\n    \ndef clean_up_numbers(a,b,c):\n    '''\n    Write a function to compare three numbers and return which number is the greater one.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    if a > b:\n        if a > c:\n            return a\n        elif b > c:\n            return b\n        else:\n            return c\n    else:\n        if b > c:\n            return b\n        elif c > b:\n            return c\n        else:\n            return b\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = [0]*len(nums)\n    for i,n in enumerate(nums):\n        temp = n\n        while temp > 0:\n            result[i] += temp%10\n            temp /= 10\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(list(map(lambda n: sum(list(map(lambda d: int(d), list(str(n))))), nums)))\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(i) for i in str(nums))\n    \ndef factorial(n):\n    '''\n    Compute the factorial of n.\n    '''\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)\n    \ndef gcd(a, b):\n    '''\n    Compute the greatest common divisor of a and b.\n    '''\n    while b!= 0:\n        a, b = b, a % b\n    return a\n    \ndef count_digits(num, n):\n    '''\n    Write a function that counts the number of digits of a number in reverse order.\n    '''\n    n = str(num)\n    return len(n) - n.rfind(str(n)[-n.find(n[::-1]):])\n    \ndef is_prime(n):\n    '''\n    Write a function that returns True if n is prime and False otherwise.\n    '''\n    return all(n % d for d in range(2, int(n**0.5) + 1))\n    \ndef all_permutations(elements):\n    '''\n    Write a function that takes a list of elements and returns a list of all permutations.\n    '''\n    if len(elements) == 1:\n        return [elements]\n    result = []\n    for perm in all_permutations(elements[1:]):\n        for i in xrange(len(elements)):\n            result.append(perm[:i] + elements[0:1] + perm[i:])\n    return result\n    \ndef has_duplicates(nums):\n    '''\n    Write a function that takes a list and returns True if there is any element that appears more than once.\n    '''\n    return len(set(nums)) < len(nums)\n    \ndef is_prime_v2(n):\n    '''\n    Write a function that returns True if n is prime and False otherwise.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in xrange(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef fib(n):\n    '''\n    Write a function that takes a number n and returns the nth Fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n    \ndef fib_array(n):\n    '''\n    Write a function that takes a number n and returns a list containing the first n Fibonacci numbers.\n    '''\n    result = []\n    a, b = 0, 1\n    while len(result) < n:\n        result.append(a)\n        a, b = b, a + b\n    return result\n    \ndef palindrome(s):\n    '''\n    Write a function that takes a string and returns True if it's a palindrome and False otherwise.\n    '''\n    return s == s[::-1]\n    \ndef permutation(s1, s2):\n    '''\n    Write a function that takes two strings and returns True if they are permutations of each other and False otherwise.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    return sorted(s1) == sorted(s2)\n    \ndef remove_spaces(s):\n    '''\n    Write a function that takes a string and returns a string with all whitespace characters removed.\n    '''\n    return ''.join(s.split())\n    \ndef convert_to_base(n, base):\n    '''\n    Write a function that takes a number and a base and returns the string representation of that number in the given base.\n    '''\n    s = ''\n    while n > 0:\n        s = str(n % base) + s\n        n = n // base\n    return s\n    \ndef convert_to_base_string(n, base):\n    '''\n    Write a function that takes a number and a base and returns the string representation of that number in the given base.\n    '''\n    return convert_to_base(n, base)\n    \ndef base_pattern(n):\n    '''\n    Write a function that takes a number and returns a string of the base pattern.\n    '''\n    if n == 0:\n        return '0'\n    result = ''\n    digits = convert_to_base_string(n, 10)\n    for i in xrange(len(digits)):\n        if i % 2 == 1:\n            result = result + digits[i]\n        else:\n            result = result + digits[i] * '0'\n    return result\n    \ndef to_pig_latin(s):\n    '''\n    Write a function that takes a string and returns the string converted to pig latin.\n    '''\n    if s[0] in 'aeiouAEIOU':\n        return s + 'yay'\n    return s[1:] + s[0] + 'ay'\n    \ndef palindrome_permutation(s):\n    '''\n    Write a function that takes a string and returns True if it is a permutation of a palindrome and False otherwise.\n    '''\n    char_map = {}\n    for c in s:\n        char_map[c] = char_map.get(c, 0) + 1\n    return sum(1 for k, v in char_map.iteritems() if v % 2) <= 1\n    \ndef is_anagram(s, t):\n    '''\n    Write a function that takes two strings and returns True if they are anagrams of each other and False otherwise.\n    '''\n    if len(s)!= len(t):\n        return False\n    return sorted(s) == sorted(t)\n    \ndef longest_substring(s):\n    '''\n    Write a function that takes a string and returns the longest substring without repeating characters.\n    '''\n    seen = {}\n    longest = [0, 1]\n    for i in xrange(len(s)):\n        seen[s[i]] = i\n        if i - longest[1] + 1 > longest[1] - longest[0] + 1:\n            longest[0], longest[1] = longest[1], i + 1\n    return s[longest[0]:longest[1]]\n    \ndef longest_palindrome(s):\n    '''\n    Write a function that takes a string and returns the longest palindrome in that string.\n    '''\n    if len(s) == 0:\n        return ''\n    elif len(s) == 1:\n        return s\n    elif len(s) == 2:\n        if s[0] == s[1]:\n            return s\n        else:\n            return s[0]\n    longest_str = s[0]\n    longest_len = len(longest_str)\n    for i in xrange(len(s)):\n        left = i - 1\n        right = i + 1\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            if right - left + 1 > longest_len:\n                longest_str = s[left:right + 1]\n                longest_len = right - left + 1\n            left -= 1\n            right += 1\n        left = i\n        right = i + 1\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            if right - left + 1 > longest_len:\n                longest_str = s[left:right + 1]\n                longest_len = right - left + 1\n            left -= 1\n            right += 1\n    return longest_str\n    \ndef longest_substring_2(s):\n    '''\n    Write a function that takes a string and returns the longest substring without repeating characters.\n    '''\n    if len(s) == 0:\n        return ''\n    elif len(s) == 1:\n        return s\n    seen = {}\n    longest = [0, 1]\n    for i in xrange(len(s)):\n        if s[i] in seen:\n            index = seen[s[i]]\n            if index < longest["
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Your code here\n    \n    result = 0\n    for num in nums:\n        result += sum(int(x) for x in str(num))\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(x) for x in nums])\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(int,list(str(nums))))\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        result += sum(list(str(num)))\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        result.append(sum(list(map(int, str(num)))))\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(int,str(nums)))\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in nums])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a^b for a,b in zip(test_tup1,test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(tup1[i] ^ tup2[i] for i in xrange(len(tup1)))\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    #return test_tup1[0] ^ test_tup2[0]\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    x = test_tup1[0]\n    y = test_tup1[1]\n    z = test_tup2[0]\n    w = test_tup2[1]\n    return (x ^ z, y ^ w)\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(0, len(test_tup1)):\n        xor_result = xor_result ^ test_tup1[i] ^ test_tup2[i]\n    return xor_result\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    xor_list = []\n    for i in range(len(test_list1)):\n        xor_list.append(test_list1[i] ^ test_list2[i])\n    return tuple(xor_list)\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    return tuple(zip(*test_tup1, *test_tup2))\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    n=len(test_list)\n    freq_dict={}\n    for i in range(n):\n        for j in range(i,n):\n            key=tuple(sorted((test_list[i],test_list[j])))\n            if key not in freq_dict:\n                freq_dict[key]=0\n            freq_dict[key]+=1\n    return freq_dict\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    a_list = set()\n    for i in test_list:\n        a_list.add(i)\n    return len(a_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    list_set = set(test_list)\n    return len(list_set)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for i in test_list:\n        freq_dict[i] = freq_dict.get(i, 0) + 1\n    return len(freq_dict)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for elem in test_list:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    set1 = set()\n    for i in test_list:\n        tup = tuple(i)\n        set1.add(tup)\n    print \"The number of unique tuples is\", len(set1)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tups = set()\n    for tup in test_list:\n        if tup in unique_tups:\n            continue\n        else:\n            unique_tups.add(tup)\n    return len(unique_tups)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    \n    # your code here\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    distinct_tuples = set()\n    for i in test_list:\n        for j in i:\n            distinct_tuples.add(j)\n    return len(distinct_tuples)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    counts = {}\n    for element in test_list:\n        if element in counts.keys():\n            counts[element] += 1\n        else:\n            counts[element] = 1\n    return counts\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return ((test_tup1[0]+test_tup2[0]), (test_tup1[1]+test_tup2[1]), (test_tup1[2]+test_tup2[2]))\n    \n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    #define a function to add the elements of tuple1 and tuple2\n    def add_tup(tup1, tup2):\n        #return a tuple with the addition of each element of tuple1 and tuple2\n        return tuple(x+y for x,y in zip(tup1,tup2))\n    \n    #return a tuple with the addition of each element of tuple1 and tuple2\n    return add_tup(test_tup1, test_tup2)\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    # test_tup1 = ('a', 'b', 'c', 'd', 'e', 'f')\n    # test_tup2 = ('A', 'B', 'C', 'D', 'E', 'F')\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = ()\n    for (tup1, tup2) in zip(test_tup1, test_tup2):\n        new_tup += (tup1 + tup2,)\n    return new_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    #Your Code Here\n    x=0\n    y=0\n    return\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)==len(test_tup2):\n        return tuple(tup1+tup2 for tup1,tup2 in zip(test_tup1,test_tup2))\n    return None\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    if len(test_tup1) < len(test_tup2):\n        for i in range(len(test_tup1)):\n            test_tup1[i] += test_tup2[i]\n    else:\n        for i in range(len(test_tup2)):\n            test_tup1[i] += test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(map(lambda x, y: x+y, test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple((i+j for i,j in zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return (a if a<b else b)\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\n    \ndef max(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef new_min(a,b):\n    '''\n    Write a python function to find the new min of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \ndef new_max(a,b):\n    '''\n    Write a python function to find the new max of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef remove_vowels(string):\n    '''\n    Write a python function to remove vowels from a string.\n    '''\n    vowels = ('a','e','i','o','u')\n    return \"\".join([letter for letter in string if letter not in vowels])\n    \ndef reverse(string):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return string[::-1]\n    \ndef reverse_list(lst):\n    '''\n    Write a python function to reverse a list.\n    '''\n    return lst[::-1]\n    \ndef sort_list(lst):\n    '''\n    Write a python function to sort a list.\n    '''\n    return sorted(lst)\n    \ndef sort_dict(dic):\n    '''\n    Write a python function to sort a dictionary.\n    '''\n    return sorted(dic.items(),key=lambda x:x[1],reverse=True)\n    \ndef filter_list(lst):\n    '''\n    Write a python function to filter a list.\n    '''\n    return [element for element in lst if element%2==0]\n    \ndef find_second_largest(lst):\n    '''\n    Write a python function to find the second largest number in a list.\n    '''\n    if len(lst)<2:\n        return None\n    else:\n        return max(set(lst), key=lst.count)\n    \ndef get_average(lst):\n    '''\n    Write a python function to find the average of a list.\n    '''\n    return sum(lst)/len(lst)\n    \ndef find_max_length(lst):\n    '''\n    Write a python function to find the maximum length string in a list.\n    '''\n    return max([len(x) for x in lst])\n    \ndef find_min_length(lst):\n    '''\n    Write a python function to find the minimum length string in a list.\n    '''\n    return min([len(x) for x in lst])\n    \ndef get_smallest(lst):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    return min(lst)\n    \ndef get_largest(lst):\n    '''\n    Write a python function to find the largest number in a list.\n    '''\n    return max(lst)\n    \ndef find_second_smallest(lst):\n    '''\n    Write a python function to find the second smallest number in a list.\n    '''\n    if len(lst)<2:\n        return None\n    else:\n        return sorted(set(lst))[1]\n    \ndef count_words(string,word):\n    '''\n    Write a python function to count the number of times a word occurs in a string.\n    '''\n    return string.lower().count(word)\n    \ndef word_frequency(string):\n    '''\n    Write a python function to count the frequency of each word in a string.\n    '''\n    word_freq = {}\n    lst = string.lower().split()\n    for word in lst:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n    return word_freq\n    \ndef make_word_dict(string):\n    '''\n    Write a python function to count the number of times each word occurs in a string.\n    '''\n    word_freq = {}\n    lst = string.lower().split()\n    for word in lst:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n    return word_freq\n    \ndef calculate_the_grade(mark):\n    '''\n    Write a python function to convert an integer to a letter grade.\n    '''\n    return mark_to_letter_grade(mark)\n    \ndef mark_to_letter_grade(mark):\n    '''\n    Write a python function to convert a mark to a letter grade.\n    '''\n    if mark<0 or mark>100:\n        return None\n    elif mark>=95:\n        return 'A'\n    elif mark>=90:\n        return 'A-'\n    elif mark>=85:\n        return 'B'\n    elif mark>=80:\n        return 'B-'\n    elif mark>=75:\n        return 'C'\n    elif mark>=70:\n        return 'C-'\n    elif mark>=65:\n        return 'D'\n    elif mark>=60:\n        return 'D-'\n    elif mark<=60:\n        return 'F'\n    \ndef count_punctuation(string):\n    '''\n    Write a python function to count the number of punctuation marks in a string.\n    '''\n    return string.count('.') + string.count(',') + string.count('!') + string.count('?')\n    \ndef remove_punctuation(string):\n    '''\n    Write a python function to remove punctuation from a string.\n    '''\n    punctuation = '.,!?()'\n    return \"\".join([letter for letter in string if letter not in punctuation])\n    \ndef make_lower(string):\n    '''\n    Write a python function to make a string lower case.\n    '''\n    return string.lower()\n    \ndef make_upper(string):\n    '''\n    Write a python function to make a string upper case.\n    '''\n    return string.upper()\n    \ndef remove_vowels(string):\n    '''\n    Write a python function to remove vowels from a string.\n    '''\n    vowels = ('a','e','i','o','u')\n    return \"\".join([letter for letter in string if letter not in vowels])\n    \ndef is_punctuation(character):\n    '''\n    Write a python function to check if a character is a punctuation mark.\n    '''\n    return character in '.,!?()'\n    \ndef is_alpha(character):\n    '''\n    Write a python function to check if a character is a letter.\n    '''\n    return character.isalpha()\n    \ndef is_digit(character):\n    '''\n    Write a python function to check if a character is a digit.\n    '''\n    return character.isdigit()\n    \ndef is_space(character):\n    '''\n    Write a python function to check if a character is a space.\n    '''\n    return character.isspace()\n    \ndef is_lower(character):\n    '''\n    Write a python function to check if a character is a lower case letter.\n    '''\n    return character.islower()\n    \ndef is_upper(character):\n    '''\n    Write a python function to check if a character is a upper case letter.\n    '''\n    return character.isupper()\n    \ndef is_letter(character):\n    '''\n    Write a python function to check if a character is a letter.\n    '''\n    return character.isalpha()\n    \ndef is_number(character):\n    '''\n    Write a python function to check if a character is a digit.\n    '''\n    return character.isdigit()\n    \ndef is_alpha_num(character):\n    '''\n    Write a python function to check if a character is a letter or digit.\n    '''\n    return character.isalnum()\n    \ndef make_no_vowels(string):\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\ndef Maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\ndef isPalindrome(s):\n    '''\n    Write a python function to check if a string is a palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ndef factorial(n):\n    '''\n    Write a python function to calculate factorial of a given number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n*factorial(n-1)\ndef fibonacci(n):\n    '''\n    Write a python function to calculate nth number of Fibonacci series.\n    '''\n    if n < 0:\n        print(\"Not Possible\")\n    elif n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\ndef fibonacci_recursive(n):\n    '''\n    Write a python function to calculate nth number of Fibonacci series using recursion.\n    '''\n    if n < 0:\n        print(\"Not Possible\")\n    elif n == 0 or n == 1:\n        return 0\n    else:\n        return fibonacci_recursive(n-1)+fibonacci_recursive(n-2)\ndef mergeSort(alist):\n    '''\n    Write a python function to sort a list using merge sort.\n    '''\n    if len(alist) > 1:\n        mid = len(alist)//2\n        lefthalf = alist[:mid]\n        righthalf = alist[mid:]\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n    \nprint(minimum(4,5))"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    "
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    \n    if a<b:\n        return a\n    else:\n        return b\n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    \n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print 'Exists'\n    else:\n        print 'Doesnt exist'\n    \n    \ndef check_duplicate(tuplex):\n    '''\n    Write a function to check if a tuple has duplicate elements.\n    '''\n    tuple1 = set(tuplex)\n    if len(tuple1) == len(tuplex):\n        print 'Duplicate'\n    else:\n        print 'Not a Duplicate'\n    \ndef tuple_membership():\n    '''\n    Write a function to check if a tuple exists within another tuple.\n    '''\n    tuple1 = (4,5,6,7,9)\n    tuple2 = (3,5,7,8,9)\n    \n    if tuple1 in tuple2:\n        print 'Exists'\n    else:\n        print 'Doesnt exist'\n    \ndef add_tuple():\n    '''\n    Write a function to add tuples.\n    '''\n    tuple1 = (2,3,4)\n    tuple2 = (6,7,8)\n    tuple3 = tuple1 + tuple2\n    print tuple3\n    \ndef tuple_indexing():\n    '''\n    Write a function to print the index of an item in a tuple.\n    '''\n    tuple1 = ('a','b','c','d','e','f','g')\n    print tuple1.index('c')\n    \ndef tuple_count():\n    '''\n    Write a function to count the number of times a value occurs in a tuple.\n    '''\n    tuple1 = ('a','b','a','b','c','b','a')\n    print tuple1.count('a')\n    \ndef tuple_concatenate():\n    '''\n    Write a function to concatenate tuples.\n    '''\n    tuple1 = (1,2,3)\n    tuple2 = (4,5,6)\n    tuple3 = tuple1 + tuple2\n    print tuple3\n    \ndef tuple_count_method():\n    '''\n    Write a function to count the number of items in a tuple.\n    '''\n    tuple1 = ('a','b','a','b','c','b','a')\n    print len(tuple1)\n    \ndef tuple_remove():\n    '''\n    Write a function to remove an item from a tuple.\n    '''\n    tuple1 = (1,2,3,4)\n    tuple2 = tuple1[1]\n    print tuple2\n    \ndef tuple_slice():\n    '''\n    Write a function to slice a tuple.\n    '''\n    tuple1 = (1,2,3,4,5,6,7,8,9)\n    tuple2 = tuple1[3:9]\n    print tuple2\n    \ndef tuple_reversed():\n    '''\n    Write a function to reverse a tuple.\n    '''\n    tuple1 = (1,2,3,4)\n    tuple2 = tuple(reversed(tuple1))\n    print tuple2\n    \ndef tuple_sort():\n    '''\n    Write a function to sort a tuple.\n    '''\n    tuple1 = (9,8,7,6,5,4,3,2,1)\n    tuple2 = tuple(sorted(tuple1))\n    print tuple2\n    \ndef tuple_sum():\n    '''\n    Write a function to return the sum of all the items in a tuple.\n    '''\n    tuple1 = (1,2,3,4)\n    print sum(tuple1)\n    \ndef tuple_max():\n    '''\n    Write a function to return the maximum value in a tuple.\n    '''\n    tuple1 = (1,2,3,4)\n    print max(tuple1)\n    \ndef tuple_min():\n    '''\n    Write a function to return the minimum value in a tuple.\n    '''\n    tuple1 = (1,2,3,4)\n    print min(tuple1)\n    \ndef tuple_concatenate():\n    '''\n    Write a function to concatenate tuples.\n    '''\n    tuple1 = ('a','b','c','d')\n    tuple2 = ('e','f','g','h')\n    tuple3 = tuple1 + tuple2\n    print tuple3\n    \ndef tuple_membership():\n    '''\n    Write a function to check if an item is in a tuple.\n    '''\n    tuple1 = ('a','b','c','d','e')\n    if 'a' in tuple1:\n        print 'Exists'\n    else:\n        print 'Doesnt exist'\n    \ndef tuple_sort():\n    '''\n    Write a function to sort a tuple.\n    '''\n    tuple1 = ('a','b','c','d','e')\n    tuple2 = sorted(tuple1)\n    print tuple2\n    \ndef tuple_sort():\n    '''\n    Write a function to sort a tuple.\n    '''\n    tuple1 = ('a','b','c','d','e')\n    tuple2 = tuple(sorted(tuple1))\n    print tuple2\n    \ndef tuple_sort():\n    '''\n    Write a function to sort a tuple.\n    '''\n    tuple1 = ('a','b','c','d','e')\n    tuple2 = tuple(sorted(tuple1))\n    print tuple2\n    \ndef tuple_reverse():\n    '''\n    Write a function to reverse a tuple.\n    '''\n    tuple1 = ('a','b','c','d','e')\n    tuple2 = tuple(reversed(tuple1))\n    print tuple2\n    \ndef tuple_reverse():\n    '''\n    Write a function to reverse a tuple.\n    '''\n    tuple1 = ('a','b','c','d','e')\n    tuple2 = tuple(reversed(tuple1))\n    print tuple2\n    \ndef tuple_remove():\n    '''\n    Write a function to remove an item from a tuple.\n    '''\n    tuple1 = ('a','b','c','d','e')\n    tuple2 = tuple1[1]\n    print tuple2\n    \ndef tuple_slice():\n    '''\n    Write a function to slice a tuple.\n    '''\n    tuple1 = ('a','b','c','d','e')\n    tuple2 = tuple1[2:4]\n    print tuple2\n    \ndef tuple_reversed():\n    '''\n    Write a function to reverse a tuple.\n    '''\n    tuple1 = ('a','b','c','d','e')\n    tuple2 = tuple(reversed(tuple1))\n    print tuple2\n    \ndef tuple_max():\n    '''\n    Write a function to return the maximum value in a tuple.\n    '''\n    tuple1 = ('a','b','c','d','e')\n    print max(tuple1)\n    \ndef tuple_min():\n    '''\n    Write a function to return the minimum value in a tuple.\n    '''\n    tuple1 = ('a','b','c','d','e')\n    print min(tuple1)\n    \ndef tuple_sum():\n    '''\n    Write a function to return the sum of all the items in a tuple.\n    '''\n    tuple1 = (1,2,3,4)\n    print sum(tuple1)\n    \ndef tuple_concatenate():\n    '''\n    Write a function to concatenate tuples.\n    '''\n    tuple1 = ('a','b','c','d','e')\n    tuple2 = ('f','g','h','i','j')\n    tuple3 = tuple1 + tuple2\n    print tuple3\n    \ndef tuple_membership():\n    '''\n    Write a function to check if an item is in a tuple.\n    '''\n    tuple1 = ('a','b','c','d','e')\n    if 'a' in tuple1:\n        print 'Exists'\n    else:\n        print 'Doesnt exist'\n    \ndef tuple_sort():\n    '''\n    Write a function to sort a tuple.\n    '''\n    tuple1 = ('a','b','c','d','e')\n    tuple"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if(tuplex.count(tuple1)==1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuplex.count(tuple1)>0\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    print(tuplex.count(tuple1))\n    "
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for tup in tuplex: \n        if tup1 in tup: \n            return True\n    return False \n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex.count(tuple1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex2(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex3(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex4(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex5(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex6(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex7(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex8(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex9(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex10(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex11(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex12(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex13(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex14(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex15(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex16(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex17(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex18(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex19(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex20(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex21(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex22(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex23(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex24(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex25(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex26(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex27(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex28(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex29(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex30(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex31(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex32(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex33(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex34(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex35(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex36(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex37(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex38(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex39(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuplex40(tuplex,tuple1): \n    ''"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)): \n        if tuplex[i] == tuple1: \n            return True\n    return False \n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n        \n    \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n        \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n        \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n        \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n        \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n        \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n        \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n        \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n        \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n        \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n        \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n        \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n        \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n        \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n        \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n        \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n        \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n        \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n        \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n        \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n        \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n        \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n        \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n        \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n        \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n        \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n        \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n        \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n        \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n        \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n        \ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2 == 0): \n        print(\"The given number\", x, \"is even\")\n    else: \n        print(\"The given number\", x, \"is odd\")\n    print(\"The parity of\", x, \"is\", parity(x)) \n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    s=0\n    while x>0:\n        s=s+x%2\n        x=x//2\n    return s\n    \ndef find_Power(x,y):\n    '''\n    Write a python function to find the power of a number.\n    '''\n    s=1\n    while y>0:\n        s=s*x\n        y=y-1\n    return s\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return bool(x & 1)\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    count = 0\n    for i in range(len(x)):\n        if x[i]%2 == 0:\n            count += 1\n    if count%2 == 0:\n        print('Parity is 0')\n    else:\n        print('Parity is 1')\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    y = x ^ (x >> 32)\n    z = y ^ (y >> 16)\n    \n    # print('y',y)\n    # print('z',z)\n    \n    return z & 1\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    #your code here\n    if x & 1 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\ndef isPerfectSquare(x):\n    '''\n    Write a python function to check whether a given number is perfect square.\n    '''\n    #your code here\n    if x == 0:\n        return True\n    low = 0\n    high = x\n    while low <= high:\n        mid = (low + high)/2\n        mid_sq = mid * mid\n        if mid_sq == x:\n            return True\n        elif mid_sq < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\ndef removeKthNode(head, k):\n    '''\n    Write a python function to remove the kth element from the end of a linked list.\n    '''\n    #your code here\n    if head == None:\n        return None\n    fast = head\n    slow = head\n    count = 0\n    while fast and count < k:\n        fast = fast.next\n        count += 1\n    if fast == None:\n        return head.next\n    while fast.next:\n        fast = fast.next\n        slow = slow.next\n    slow.next = slow.next.next\n    return head\ndef bubbleSort(A):\n    '''\n    Write a python function to sort a list using Bubble Sort.\n    '''\n    #your code here\n    for i in range(len(A)):\n        for j in range(len(A)-i-1):\n            if A[j] > A[j+1]:\n                A[j], A[j+1] = A[j+1], A[j]\n    return A\ndef bubbleSort1(A):\n    '''\n    Write a python function to sort a list using Bubble Sort.\n    '''\n    #your code here\n    for i in range(len(A)):\n        swapped = False\n        for j in range(len(A)-i-1):\n            if A[j] > A[j+1]:\n                A[j], A[j+1] = A[j+1], A[j]\n                swapped = True\n        if not swapped:\n            break\n    return A\ndef mergeSort(A):\n    '''\n    Write a python function to sort a list using Merge Sort.\n    '''\n    #your code here\n    if len(A) > 1:\n        mid = len(A) / 2\n        left = A[:mid]\n        right = A[mid:]\n        mergeSort(left)\n        mergeSort(right)\n        i = j = k = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                A[k] = left[i]\n                i = i + 1\n            else:\n                A[k] = right[j]\n                j = j + 1\n            k = k + 1\n        while i < len(left):\n            A[k] = left[i]\n            i = i + 1\n            k = k + 1\n        while j < len(right):\n            A[k] = right[j]\n            j = j + 1\n            k = k + 1\n    return A\ndef mergeSort1(A):\n    '''\n    Write a python function to sort a list using Merge Sort.\n    '''\n    #your code here\n    if len(A) > 1:\n        mid = len(A) / 2\n        left = A[:mid]\n        right = A[mid:]\n        mergeSort1(left)\n        mergeSort1(right)\n        i = j = k = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                A[k] = left[i]\n                i = i + 1\n            else:\n                A[k] = right[j]\n                j = j + 1\n            k = k + 1\n        while i < len(left):\n            A[k] = left[i]\n            i = i + 1\n            k = k + 1\n        while j < len(right):\n            A[k] = right[j]\n            j = j + 1\n            k = k + 1\n    return A\ndef partition(A, p, r):\n    '''\n    Write a python function to partition a list using Quick Sort.\n    '''\n    #your code here\n    x = A[r]\n    i = p - 1\n    for j in range(p, r):\n        if A[j] <= x:\n            i = i + 1\n            A[i], A[j] = A[j], A[i]\n    A[i+1], A[r] = A[r], A[i+1]\n    return i + 1\ndef quickSort(A, p, r):\n    '''\n    Write a python function to sort a list using Quick Sort.\n    '''\n    #your code here\n    if p < r:\n        q = partition(A, p, r)\n        quickSort(A, p, q-1)\n        quickSort(A, q+1, r)\n    return A\ndef quickSort1(A, p, r):\n    '''\n    Write a python function to sort a list using Quick Sort.\n    '''\n    #your code here\n    if p < r:\n        q = partition(A, p, r)\n        quickSort1(A, p, q-1)\n        quickSort1(A, q+1, r)\n    return A\ndef nth_to_last(A, n):\n    '''\n    Write a python function to find the nth element in a linked list.\n    '''\n    #your code here\n    if A == None:\n        return None\n    head = A\n    if n == 0:\n        return head.val\n    count = 0\n    while A.next:\n        count += 1\n        A = A.next\n    if count - n + 1 == 1:\n        return head.val\n    else:\n        return nth_to_last(A, n)\ndef isPalindrome(head):\n    '''\n    Write a python function to check if a linked list is a palindrome.\n    '''\n    #your code here\n    if head == None or head.next == None:\n        return True\n    slow = head\n    fast = head\n    stack = []\n    while fast and fast.next:\n        stack.append(slow.val)\n        slow = slow.next\n        fast = fast.next.next\n    if fast:\n        slow = slow.next\n    while slow:\n        top = stack.pop()\n        if top!= slow.val:\n            return False\n        slow = slow.next\n    return True\ndef max_product(A):\n    '''\n    Write a python function to find the maximum product of three numbers in an array.\n    '''\n    #your code here\n    max_product = A[0] * A[1] * A[2]\n    if max_product == 0:\n        return 0\n    if max_product < A[0] * A[1]:\n        max_product = A[0] * A[1]\n    if max_product < A[0] * A[2]:\n        max_product = A[0] * A[2]\n    if max_product < A[1] * A[2]:\n        max_product = A[1] * A[2]\n    return max_product\ndef rotate(A, d):\n    '''\n    Write a python function to rotate an array by d elements.\n    '''\n    #your code here\n    if A == None or d == 0:\n        return A\n    length = len(A)\n    d = d % length\n    head = A\n    while d:\n        A = A.next\n        d -= 1\n    while A:\n        head = head.next\n        A = A.next\n    head = head.next\n    return head\ndef rotate1(A, d):\n    '''\n    Write a python function to rotate an array by d elements.\n    '''\n    #your code here\n    if A == None or d == 0:\n        return A\n    length = len(A)\n    d = d % length\n    head = A\n    while d:\n        A = A.next\n        d -= 1\n    while A:\n        head = head.next\n        A "
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x & 1:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    s = 0\n    while(x > 0): \n        s = s + (x % 10)\n        x = x//10\n    return s%2\ndef isPrime(n):\n    '''\n    Write a python function to find whether the given number is prime.\n    '''\n    return find_Parity(n) == 1\ndef find_cPrime(start, end):\n    '''\n    Write a python function to find the first prime number between the given range.\n    '''\n    for i in range(start, end):\n        if(isPrime(i) == 1):\n            return i\ndef find_dPrime(start, end):\n    '''\n    Write a python function to find the first prime number between the given range.\n    '''\n    for i in range(start, end):\n        if(isPrime(i) == 1):\n            return i\ndef find_pPrime(start, end):\n    '''\n    Write a python function to find the first prime number between the given range.\n    '''\n    for i in range(start, end):\n        if(isPrime(i) == 1):\n            return i\ndef find_nPrime(start, end):\n    '''\n    Write a python function to find the first prime number between the given range.\n    '''\n    for i in range(start, end):\n        if(isPrime(i) == 1):\n            return i\ndef find_NPrime(start, end):\n    '''\n    Write a python function to find the first prime number between the given range.\n    '''\n    for i in range(start, end):\n        if(isPrime(i) == 1):\n            return i\ndef find_tPrime(start, end):\n    '''\n    Write a python function to find the first prime number between the given range.\n    '''\n    for i in range(start, end):\n        if(isPrime(i) == 1):\n            return i\ndef find_TPrime(start, end):\n    '''\n    Write a python function to find the first prime number between the given range.\n    '''\n    for i in range(start, end):\n        if(isPrime(i) == 1):\n            return i\ndef find_LPrime(start, end):\n    '''\n    Write a python function to find the first prime number between the given range.\n    '''\n    for i in range(start, end):\n        if(isPrime(i) == 1):\n            return i\ndef find_LPrime(start, end):\n    '''\n    Write a python function to find the first prime number between the given range.\n    '''\n    for i in range(start, end):\n        if(isPrime(i) == 1):\n            return i\ndef find_JPrime(start, end):\n    '''\n    Write a python function to find the first prime number between the given range.\n    '''\n    for i in range(start, end):\n        if(isPrime(i) == 1):\n            return i\ndef find_JPrime(start, end):\n    '''\n    Write a python function to find the first prime number between the given range.\n    '''\n    for i in range(start, end):\n        if(isPrime(i) == 1):\n            return i\ndef find_IPrime(start, end):\n    '''\n    Write a python function to find the first prime number between the given range.\n    '''\n    for i in range(start, end):\n        if(isPrime(i) == 1):\n            return i\ndef find_IPrime(start, end):\n    '''\n    Write a python function to find the first prime number between the given range.\n    '''\n    for i in range(start, end):\n        if(isPrime(i) == 1):\n            return i\ndef find_HPrime(start, end):\n    '''\n    Write a python function to find the first prime number between the given range.\n    '''\n    for i in range(start, end):\n        if(isPrime(i) == 1):\n            return i\ndef find_HPrime(start, end):\n    '''\n    Write a python function to find the first prime number between the given range.\n    '''\n    for i in range(start, end):\n        if(isPrime(i) == 1):\n            return i\ndef find_GPrime(start, end):\n    '''\n    Write a python function to find the first prime number between the given range.\n    '''\n    for i in range(start, end):\n        if(isPrime(i) == 1):\n            return i\ndef find_GPrime(start, end):\n    '''\n    Write a python function to find the first prime number between the given range.\n    '''\n    for i in range(start, end):\n        if(isPrime(i) == 1):\n            return i\ndef find_FPrime(start, end):\n    '''\n    Write a python function to find the first prime number between the given range.\n    '''\n    for i in range(start, end):\n        if(isPrime(i) == 1):\n            return i\ndef find_FPrime(start, end):\n    '''\n    Write a python function to find the first prime number between the given range.\n    '''\n    for i in range(start, end):\n        if(isPrime(i) == 1):\n            return i\ndef find_EPrime(start, end):\n    '''\n    Write a python function to find the first prime number between the given range.\n    '''\n    for i in range(start, end):\n        if(isPrime(i) == 1):\n            return i\ndef find_EPrime(start, end):\n    '''\n    Write a python function to find the first prime number between the given range.\n    '''\n    for i in range(start, end):\n        if(isPrime(i) == 1):\n            return i\ndef find_DPrime(start, end):\n    '''\n    Write a python function to find the first prime number between the given range.\n    '''\n    for i in range(start, end):\n        if(isPrime(i) == 1):\n            return i\ndef find_DPrime(start, end):\n    '''\n    Write a python function to find the first prime number between the given range.\n    '''\n    for i in range(start, end):\n        if(isPrime(i) == 1):\n            return i\ndef find_CPrime(start, end):\n    '''\n    Write a python function to find the first prime number between the given range.\n    '''\n    for i in range(start, end):\n        if(isPrime(i) == 1):\n            return i\ndef find_CPrime(start, end):\n    '''\n    Write a python function to find the first prime number between the given range.\n    '''\n    for i in range(start, end):\n        if(isPrime(i) == 1):\n            return i\ndef find_BPrime(start, end):\n    '''\n    Write a python function to find the first prime number between the given range.\n    '''\n    for i in range(start, end):\n        if(isPrime(i) == 1):\n            return i\ndef find_BPrime(start, end):\n    '''\n    Write a python function to find the first prime number between the given range.\n    '''\n    for i in range(start, end):\n        if(isPrime(i) == 1):\n            return i\ndef find_APrime(start, end):\n    '''\n    Write a python function to find the first prime number between the given range.\n    '''\n    for i in range(start, end):\n        if(isPrime(i) == 1):\n            return i\ndef find_APrime(start, end):\n    '''\n    Write a python function to find the first prime number between the given range.\n    '''\n    for i in range(start, end):\n        if(isPrime(i) == 1):\n            return i\ndef find_APrime(start, end):\n    '''\n    Write a python function to find the first prime number between the given range.\n    '''\n    for i in range(start, end):\n        if(isPrime(i) == 1):\n            return i\ndef find_BPrime(start, end):\n    '''\n    Write a python function to find the first prime number between the given range.\n    '''\n    for i in rang"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = abs(x)\n    if x%2 == 0:\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    # insert the biggest digit in the beginning\n    # so as to keep the increasing order\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            digits.insert(0, digits.pop(i - 1))\n            break\n    # insert the biggest digit in the end\n    # so as to keep the increasing order\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            digits.insert(i + 1, digits.pop(i - 1))\n            break\n    return int(''.join(digits))\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n==0: return '0'\n    if n==1: return '1'\n    if n==2: return '11'\n    s=str(n)\n    a=sorted(s)\n    return int(''.join(a))\n    \ndef rearrange_bigger_2(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n==0: return '0'\n    if n==1: return '1'\n    if n==2: return '11'\n    s=str(n)\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if int(s[i])>int(s[j]):\n                s[i],s[j]=s[j],s[i]\n                break\n    return int(''.join(s))\n    \ndef rearrange_bigger_3(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n==0: return '0'\n    if n==1: return '1'\n    if n==2: return '11'\n    s=str(n)\n    for i in range(len(s)-1):\n        for j in range(i+1, len(s)):\n            if int(s[i])>int(s[j]):\n                s[i],s[j]=s[j],s[i]\n                break\n    return int(''.join(s))\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == '0':\n        return '0'\n    n = str(n)\n    l = len(n)\n    i = 0\n    while i < l - 1:\n        if int(n[i]) > int(n[i + 1]):\n            n = n[:i] + n[i + 1] + n[i] + n[i + 2:]\n            break\n        i += 1\n    if i == l - 1:\n        n = n[:-1] + str(int(n[-1]) + 1)\n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = str(n)\n    \n    # find the position of the biggest digit\n    m = s.find(max(s))\n    \n    # find the position of the smallest digit\n    n = s[:m]+s[m:].replace(s[m],\"\",1)+s[m:]\n    \n    return int(n)\n    \ndef rearrange_smaller(n):\n    '''\n    Write a function to create the next smaller number by rearranging the digits of a given number.\n    '''\n    s = str(n)\n    \n    # find the position of the smallest digit\n    m = s.find(min(s))\n    \n    # find the position of the biggest digit\n    n = s[:m]+s[m:].replace(s[m],\"\",1)+s[m:]\n    \n    return int(n)\n    \ndef play_bigger(n):\n    '''\n    Write a function that takes a string of digits and returns the next bigger number that can be formed by rearranging the digits of that string.\n    '''\n    s = str(n)\n    \n    # find the position of the biggest digit\n    m = s.find(max(s))\n    \n    # find the position of the smallest digit\n    n = s[:m]+s[m:].replace(s[m],\"\",1)+s[m:]\n    \n    return int(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = str(n)\n    for i in range(len(s)-1,0,-1):\n        if s[i-1] < s[i]:\n            break\n    j = i\n    while j < len(s):\n        if s[j] > s[i-1]:\n            break\n        j += 1\n    if j == len(s):\n        return -1\n    x = s[i-1]\n    y = s[j-1]\n    if j < len(s) - 1:\n        for k in range(j,len(s)):\n            if s[k] > x:\n                y = s[k]\n                break\n    n = int(s[:i-1]+y+s[j:])\n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def next_bigger(n):\n        '''\n        Given a number n, rearrange the digits in the number so that the value is bigger.\n        If the rearrangement is not possible, return -1.\n        '''\n        s = str(n)\n        n = list(s)\n        l = len(n)\n        i = l - 1\n        while i > 0 and n[i] <= n[i-1]:\n            i -= 1\n        if i == 0:\n            return -1\n        j = i - 1\n        while j < l - 1 and n[j] >= n[j+1]:\n            j += 1\n        n[j], n[i-1] = n[i-1], n[j]\n        n[i:l] = sorted(n[i:l])\n        return int(''.join(n))\n    def rearrange_smaller(n):\n        '''\n        Write a function to create the next smaller number by rearranging the digits of a given number.\n        '''\n        s = str(n)\n        n = list(s)\n        l = len(n)\n        i = 0\n        while i < l - 1 and n[i] >= n[i+1]:\n            i += 1\n        if i == l - 1:\n            return -1\n        j = i + 1\n        while j < l and n[j] <= n[i]:\n            j += 1\n        n[i:j] = sorted(n[i:j])\n        n[j:l] = reversed(n[j:l])\n        return int(''.join(n))\n    if n < 100:\n        return next_bigger(n)\n    else:\n        l = len(str(n))\n        if l % 2 == 0:\n            a = list(str(n))\n            b = list(str(next_bigger(n)))\n            if a[0] < b[0]:\n                return next_bigger(n)\n            else:\n                return rearrange_smaller(n)\n        else:\n            a = list(str(n))\n            b = list(str(next_bigger(n)))\n            if a[0] < b[0]:\n                return next_bigger(n)\n            else:\n                return rearrange_smaller(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num = list(n)\n    length = len(num)\n    if length == 1:\n        return n\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    res = []\n    while n > 0:\n        res.append(n % 10)\n        n /= 10\n    res = res[::-1]\n    res_num = 0\n    for i in xrange(len(res)):\n        res_num += res[i] * 10**i\n    return res_num\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(x) for x in str(n)]\n    if len(digits) == 1:\n        return n + 1\n    pivot = 0\n    for i, d in enumerate(digits):\n        if d > digits[pivot]:\n            pivot = i\n    next_bigger = int(''.join(str(x) for x in digits[:pivot] + sorted(digits[pivot:])))\n    return next_bigger\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    l = len(n)\n    s = n[::-1]\n    p = s[0]\n    for i in range(l-1):\n        if s[i+1] > p:\n            k = s[i+1]\n            p = k\n            print p\n        elif s[i+1] == p:\n            pass\n        else:\n            s[i+1] = p\n            print s\n            print '*'\n    print s\n    s = s[::-1]\n    print s\n    return s\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def k_smallest_pairs_helper(a, b, cnt, results):\n        if a == len(nums1):\n            return\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n    res = []\n    heap = []\n    for i in range(min(len(nums1), k)):\n        if len(heap) < k:\n            heapq.heappush(heap, (nums1[i]+nums2[0], (nums1[i], nums2[0])))\n        else:\n            heapq.heappushpop(heap, (nums1[i]+nums2[0], (nums1[i], nums2[0])))\n    for i in range(k-1):\n        res.append(heap[i])\n    while heap:\n        res.append(heapq.heappop(heap))\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    result = []\n    for i in range(0, k):\n        result.append([nums1[i], nums2[i]])\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    first = []\n    second = []\n    for i in nums1:\n        first.append((i, i))\n    for i in nums2:\n        second.append((i, i))\n    first.sort()\n    second.sort()\n    count = 0\n    for i in range(len(second)):\n        pairs.append((first[i][0], second[i][0]))\n        if count == k:\n            break\n        count += 1\n    return pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def merge(nums1, nums2):\n        '''\n        Merge the array by the median value\n        '''\n        def merge_sort(nums, low, high):\n            if low >= high: return\n            if low + 1 == high:\n                if nums[low] < nums[high]:\n                    nums[low], nums[high] = nums[high], nums[low]\n            else:\n                mid = (low + high) / 2\n                merge_sort(nums, low, mid)\n                merge_sort(nums, mid + 1, high)\n                merge_two_sorted_arrays(nums, low, mid, high)\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    '''\n    The solution below uses sorting. \n    First, create a list of the elements that we want to return. Then, for each element in the first array, create a new list that has the element and its corresponding element in the second array. \n    Then, we sort this new list and return the kth smallest element from the list.\n    '''\n    num_list = []\n    for i in range(len(nums1)):\n        num_list.append((nums1[i], nums2[i]))\n    num_list.sort(key=lambda x: x[0])\n    return num_list[k-1]\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    res = []\n    #for i in range(0, len(nums1)):\n    #    for j in range(0, len(nums2)):\n    #        res.append((nums1[i], nums2[j]))\n    #return res\n    heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (nums1[i], i))\n    for i in range(len(nums2)):\n        heapq.heappush(heap, (nums2[i], i))\n    ans = []\n    for i in range(k):\n        res.append((heapq.heappop(heap)[0], heapq.heappop(heap)[0]))\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    heapq.heapify(pairs)\n    i = 0\n    j = 0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] < nums2[j]:\n            heapq.heappush(pairs, (-nums1[i], nums2[j]))\n            i += 1\n        else:\n            heapq.heappush(pairs, (-nums2[j], nums1[i]))\n            j += 1\n        if len(pairs) == k:\n            break\n    result = []\n    while len(pairs) > 0:\n        result.append(heapq.heappop(pairs))\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) > len(nums2):\n        return k_smallest_pairs(nums2, nums1, k)\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    heap = []\n    for i in xrange(min(k, len(nums1) * len(nums2))):\n        heapq.heappush(heap, (nums1[i], nums2[i]))\n    res = []\n    while heap:\n        res.append(heapq.heappop(heap))\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k == 0:\n        return []\n    h = []\n    for x in nums1:\n        for y in nums2:\n            heapq.heappush(h, (x + y, [x, y]))\n            if len(h) > k:\n                heapq.heappop(h)\n    return [x[1] for x in h]\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    product = 1\n    for i in list1:\n        product *= i[0] * i[1]\n    return product\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    #return min([(a*b) for a, b in list1])\n    return min(list1)\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) <= 1:\n        return list1[0][0] * list1[0][1]\n    \n    # sort the list in decreasing order based on the value of the first tuple\n    list1.sort(key=lambda x: x[0], reverse=True)\n    \n    # check the products of the first two tuples and record the values\n    # if the product is more than the products of the other tuples, we need to\n    # record the product of the first tuple and then the product of the second tuple\n    # otherwise, we record the product of the second tuple and then the product of the first tuple\n    product = list1[0][0] * list1[0][1]\n    list2 = list1[:2]\n    for i in range(2, len(list1)):\n        if list1[i][0] * list1[i][1] > product:\n            product = list1[i][0] * list1[i][1]\n        else:\n            product = list1[i][1] * list1[i][0]\n    return product\n    \nprint min_product_tuple([(2, 3), (1, 2), (3, 4), (0, 1)])"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    from functools import reduce\n    return reduce(lambda x, y: x * y, min(list1, key=lambda item: item[0] * item[1]))\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2 = [(list1[i],list1[i+1]) for i in range(0,len(list1),2)]\n    return min(tuple1[0]*tuple1[1] for tuple1 in list2)\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return sorted([(a,b,c) for a,b,c in list1 if c%2==0])[0]\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = 1\n    for tup1, tup2 in list1:\n        min_prod = min(min_prod, tup1*tup2)\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 1\n    for i in range(len(list1)):\n        min_product *= list1[i][0] * list1[i][1]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif len(list1) == 1:\n        return list1[0][0] * list1[0][1]\n    elif len(list1) == 2:\n        return list1[0][0] * list1[1][1]\n    else:\n        return min(list1[0][0] * list1[1][1], list1[0][0] * list1[len(list1) - 1][1])\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    length = len(list1)\n    result = list1[0]\n    for i in range(length):\n        for j in range(i+1, length):\n            if result[0] * result[1] > list1[i][0] * list1[i][1]:\n                result = list1[i]\n            elif result[0] * result[1] < list1[j][0] * list1[j][1]:\n                result = list1[j]\n    return result\n    \ndef min_product(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    length = len(list1)\n    result = list1[0]\n    for i in range(length):\n        for j in range(i+1, length):\n            if result[0] * result[1] > list1[i][0] * list1[i][1]:\n                result = list1[i]\n            elif result[0] * result[1] < list1[j][0] * list1[j][1]:\n                result = list1[j]\n    return result\n    \ndef min_product_sorting(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    length = len(list1)\n    sorted_list = sorted(list1, key = lambda x : x[0]*x[1], reverse = False)\n    return sorted_list[0]\n    \ndef min_product_2_sorted(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    length = len(list1)\n    if length % 2 == 0:\n        list1_sorted = sorted(list1, key = lambda x : x[0]*x[1], reverse = False)\n        return (list1_sorted[length/2] + list1_sorted[length/2-1]) / 2.0\n    else:\n        list1_sorted = sorted(list1, key = lambda x : x[0]*x[1], reverse = False)\n        return list1_sorted[length/2]\n    \ndef min_product_2(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    length = len(list1)\n    if length % 2 == 0:\n        list1_sorted = sorted(list1, key = lambda x : x[0]*x[1], reverse = False)\n        return (list1_sorted[length/2] + list1_sorted[length/2-1]) / 2.0\n    else:\n        list1_sorted = sorted(list1, key = lambda x : x[0]*x[1], reverse = False)\n        return list1_sorted[length/2]\n    \ndef max_product_tuple(list1):\n    '''\n    Write a function to find the maximum product from the pairs of tuples within a given list.\n    '''\n    length = len(list1)\n    result = list1[0]\n    for i in range(length):\n        for j in range(i+1, length):\n            if result[0] * result[1] < list1[i][0] * list1[i][1]:\n                result = list1[i]\n            elif result[0] * result[1] > list1[j][0] * list1[j][1]:\n                result = list1[j]\n    return result\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return 0\n    minval = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] < minval:\n            minval = listval[i]\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for item in listval:\n        if min_val == None or min_val > item:\n            min_val = item\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    \n    if listval == []:\n        return 0\n    else:\n        return min(listval[0], min_val(listval[1:]))\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return False\n    minval = listval[0]\n    for val in listval:\n        if val < minval:\n            minval = val\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        raise Exception('Empty list passed')\n    if len(listval) == 1:\n        return listval[0]\n    else:\n        min_val = listval[0]\n        for i in listval[1:]:\n            if i < min_val:\n                min_val = i\n        return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    l = len(listval)\n    minval = listval[0]\n    i = 0\n    while i < l:\n        if listval[i] < minval:\n            minval = listval[i]\n        i += 1\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval[1:]:\n        if val < min_val:\n            min_val = val\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < minval:\n            minval = listval[i]\n    return minval\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # first split the string by space\n    words = word.split(\" \")\n    # check if there is at least one word in the string\n    if len(words) <= 0:\n        return ''\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('_','', word).capitalize()\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.lower()\n    # word = re.sub(r'([a-z0-9])([A-Z])', r'\\1_\\2', word)\n    word = re.sub(r'(_+)', r'\\1', word)\n    return word\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    a = word.split('_')\n    for i in range(len(a)):\n        if i == 0:\n            a[i] = a[i].upper()\n        else:\n            a[i] = a[i].title()\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    first = word[0]\n    rest = word[1:]\n    if first.isupper():\n        first = first.lower()\n    elif first.islower():\n        first = first.upper()\n    return first + rest\n    \ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    s1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s1).lower()\n    \ndef capitalize(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return word[0].upper() + word[1:]\n    \ndef swap_first_last_chars(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    if len(word) <= 2:\n        return word\n    return word[-1] + word[1:-1] + word[0]\n    \ndef split_at_uppercase(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    last_upper = -1\n    for i,c in enumerate(word):\n        if c.isupper():\n            last_upper = i\n            break\n    return word[:last_upper],word[last_upper:]\n    \ndef list_to_string(l):\n    '''\n    Write a function to convert the given list to string.\n    '''\n    return ''.join(l)\n    \ndef remove_duplicates_of_list(l):\n    '''\n    Write a function to convert the given list to string.\n    '''\n    return list(set(l))\n    \ndef remove_duplicates_of_string(s):\n    '''\n    Write a function to convert the given list to string.\n    '''\n    s1 = set(s)\n    return ''.join(s1)\n    \ndef is_in_list(s,l):\n    '''\n    Write a function to convert the given list to string.\n    '''\n    return s in l\n    \ndef is_substring_of_list(s,l):\n    '''\n    Write a function to convert the given list to string.\n    '''\n    return s in l\n    \ndef is_substring_of_string(s,s1):\n    '''\n    Write a function to convert the given list to string.\n    '''\n    return s in s1\n    \ndef list_to_string_for_substring_check(l):\n    '''\n    Write a function to convert the given list to string.\n    '''\n    return ''.join(l)\n    \ndef is_substring_of_list_for_substring_check(s,l):\n    '''\n    Write a function to convert the given list to string.\n    '''\n    return s in l\n    \ndef is_substring_of_string_for_substring_check(s,s1):\n    '''\n    Write a function to convert the given list to string.\n    '''\n    return s in s1\n    \ndef is_substring_of_list_for_substring_check_with_upper_case(s,l):\n    '''\n    Write a function to convert the given list to string.\n    '''\n    return s in l\n    \ndef is_substring_of_string_for_substring_check_with_upper_case(s,s1):\n    '''\n    Write a function to convert the given list to string.\n    '''\n    return s in s1\n    \ndef is_substring_of_list_for_substring_check_with_upper_case_ignore_case(s,l):\n    '''\n    Write a function to convert the given list to string.\n    '''\n    return s in l\n    \ndef is_substring_of_string_for_substring_check_with_upper_case_ignore_case(s,s1):\n    '''\n    Write a function to convert the given list to string.\n    '''\n    return s in s1\n    \ndef is_substring_of_list_for_substring_check_with_uppercase_letters(s,l):\n    '''\n    Write a function to convert the given list to string.\n    '''\n    return s in l\n    \ndef is_substring_of_string_for_substring_check_with_uppercase_letters(s,s1):\n    '''\n    Write a function to convert the given list to string.\n    '''\n    return s in s1\n    \ndef is_substring_of_list_for_substring_check_with_lowercase_letters(s,l):\n    '''\n    Write a function to convert the given list to string.\n    '''\n    return s in l\n    \ndef is_substring_of_string_for_substring_check_with_lowercase_letters(s,s1):\n    '''\n    Write a function to convert the given list to string.\n    '''\n    return s in s1\n    \ndef is_substring_of_list_for_substring_check_with_numbers(s,l):\n    '''\n    Write a function to convert the given list to string.\n    '''\n    return s in l\n    \ndef is_substring_of_string_for_substring_check_with_numbers(s,s1):\n    '''\n    Write a function to convert the given list to string.\n    '''\n    return s in s1\n    \ndef is_substring_of_list_for_substring_check_with_alphanumeric_letters(s,l):\n    '''\n    Write a function to convert the given list to string.\n    '''\n    return s in l\n    \ndef is_substring_of_string_for_substring_check_with_alphanumeric_letters(s,s1):\n    '''\n    Write a function to convert the given list to string.\n    '''\n    return s in s1\n    \ndef is_substring_of_list_for_substring_check_with_alphanumeric_letters_and_digits(s,l):\n    '''\n    Write a function to convert the given list to string.\n    '''\n    return s in l\n    \ndef is_substring_of_string_for_substring_check_with_alphanumeric_letters_and_digits(s,s1):\n    '''\n    Write a function to convert the given list to string.\n    '''\n    return s in s1\n    \ndef is_substring_of_list_for_substring_check_with_alphanumeric_letters_and_digits_and_space(s,l):\n    '''\n    Write a function to convert the given list to string.\n    '''\n    return s in l\n    \ndef is_substring_of_string_for_substring_check_with_alphanumeric_letters_and_digits_and_space(s,s1):\n    '''\n    Write a function to convert the given list to string.\n    '''\n    return s in s1\n    \ndef is_substring_of_list_for_substring_check_with_alphanumeric_letters_and_digits_and_space_and_with_symbols(s,l):\n    '''\n    Write a function to convert the given list to string.\n    '''\n    return s in l\n    \ndef is_substring_of_string_for_substring_check_with_alphanumeric_letters_and_digits_and_space_and_with_symbols(s,s1):\n    '''\n    Write a function to convert the given list to string.\n    '''\n    return s in s1\n    \ndef is_substring_of_list_for_substring_check_with_whitespace(s,l):\n    '''\n    Write a function to convert the given list to string.\n    '''\n    return s in l\n    \ndef is_substring_of_string_for_substrin"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return \"\".join(x.title() for x in word.split('_'))\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    for char in re.findall(r'[a-z]+', word):\n        word = word.replace(char, char.upper())\n    return word\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(\n        x.capitalize() or '_'\n        for x in word.split('_')\n    )\n    \ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return re.sub(r'(?!^)_([a-zA-Z])', lambda m: m.group(1).upper(), word)\n    \ndef snake_case(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    if word == None or word.strip() == '':\n        return ''\n    res = re.sub('(?!^)([A-Z]+)([a-z0-9]+)([A-Z]|$)',\n            lambda m: m.group(1) + \"_\" + m.group(2) + m.group(3).lower() + m.group(4), word)\n    return re.sub('(?!^)([A-Z]+)([a-z0-9])([A-Z]|$)',\n            lambda m: m.group(1) + \"_\" + m.group(2) + m.group(3).lower() + m.group(4), res)\n    \ndef camel_case(s):\n    '''\n    Write a function to convert the given camel case string to camel case string.\n    '''\n    # first char is upper\n    if len(s) == 0:\n        return \"\"\n    s = s[0].lower() + s[1:]\n    s = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', s)\n    s = re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s)\n    return s\n    \ndef kebab_case(s):\n    '''\n    Write a function to convert the given camel case string to kebab case string.\n    '''\n    s = s.replace(\"-\",\"\")\n    s = re.sub('(.)([A-Z][a-z]+)', r'\\1-\\2', s)\n    s = re.sub('([a-z0-9])([A-Z])', r'\\1-\\2', s)\n    return s\n    \ndef string_compression(s):\n    '''\n    Write a function to convert the given camel case string to kebab case string.\n    '''\n    if len(s) == 0:\n        return \"\"\n    res = []\n    curr = s[0]\n    count = 0\n    for i in xrange(1,len(s)):\n        if s[i] == curr:\n            count += 1\n        else:\n            res.append(curr)\n            res.append(str(count))\n            curr = s[i]\n            count = 1\n    res.append(curr)\n    res.append(str(count))\n    return \"\".join(res)\n    \ndef swap_case(s):\n    '''\n    Write a function to convert the given camel case string to kebab case string.\n    '''\n    return s.swapcase()\n    \ndef get_permutations(s):\n    '''\n    Write a function to convert the given camel case string to kebab case string.\n    '''\n    if len(s) == 0:\n        return []\n    result = []\n    for i in xrange(len(s)):\n        if s[i].isupper():\n            temp = s[0:i] + s[i].lower() + s[i+1:]\n            for item in get_permutations(temp):\n                result.append(item)\n    return result\n    \ndef is_unique(s):\n    '''\n    Write a function to convert the given camel case string to kebab case string.\n    '''\n    if len(s) == 0:\n        return True\n    s = s.lower()\n    m = {}\n    for i in xrange(len(s)):\n        if s[i] in m:\n            return False\n        m[s[i]] = True\n    return True\n    \ndef longest_palindrome(s):\n    '''\n    Write a function to convert the given camel case string to kebab case string.\n    '''\n    if len(s) == 0:\n        return \"\"\n    def get_palindrome(s, left, right):\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            left -= 1\n            right += 1\n        return s[left+1:right]\n    res = ''\n    for i in xrange(len(s)):\n        temp = get_palindrome(s, i, i)\n        if len(temp) > len(res):\n            res = temp\n        temp = get_palindrome(s, i, i+1)\n        if len(temp) > len(res):\n            res = temp\n    return res\n    \ndef palindrome_permutation(s):\n    '''\n    Write a function to convert the given camel case string to kebab case string.\n    '''\n    if len(s) == 0:\n        return True\n    d = {}\n    for i in xrange(len(s)):\n        if s[i] in d:\n            d[s[i]] += 1\n        else:\n            d[s[i]] = 1\n    count = 0\n    for val in d.values():\n        if val % 2!= 0:\n            count += 1\n    return count < 2\n    \ndef search_rotated_sorted_array(nums, target):\n    '''\n    Write a function to convert the given camel case string to kebab case string.\n    '''\n    if len(nums) == 0:\n        return -1\n    low = 0\n    high = len(nums)-1\n    while low <= high:\n        mid = (low+high)/2\n        if nums[mid] == target:\n            return mid\n        if nums[low] <= nums[mid]:\n            if target >= nums[low] and target <= nums[mid]:\n                high = mid - 1\n            else:\n                low = mid + 1\n        else:\n            if target >= nums[mid] and target <= nums[high]:\n                low = mid + 1\n            else:\n                high = mid - 1\n    return -1\n    \ndef merge_sorted_array(nums1, nums2):\n    '''\n    Write a function to convert the given camel case string to kebab case string.\n    '''\n    if len(nums1) == 0:\n        return nums2\n    if len(nums2) == 0:\n        return nums1\n    if nums1[0] > nums2[0]:\n        return nums2[0] + merge_sorted_array(nums1, nums2[1:])\n    return nums1[0] + merge_sorted_array(nums1[1:], nums2)\n    \ndef find_nth_number(nums):\n    '''\n    Write a function to convert the given camel case string to kebab case string.\n    '''\n    if len(nums) == 0:\n        return None\n    total_numbers = 1\n    for i in xrange(1, len(nums)):\n        total_numbers += min(nums[i], nums[i-1])\n    if total_numbers == len(nums):\n        return nums[-1]\n    if total_numbers == 0:\n        return None\n    last_num = nums[0]\n    last_index = 0\n    for i in xrange(1, len(nums)):\n        if nums[i] <= last_num:\n            last_num -= nums[i]\n            last_index = i\n        else:\n            break\n    return last_num + find_nth_number(nums[last_index+1:])\n    \ndef combination_sum(nums, target):\n    '''\n    Write a function to convert the given camel case string to kebab case string.\n    '''\n    if len(nums) == 0:\n        return []\n    res = []\n    def helper(ar"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # string = re.sub(r'_','', string)\n    # string = re.sub(r'([A-Z])', r' \\1', string)\n    # string = re.sub(r'([a-z0-9])([A-Z])', r'\\1 \\2', string)\n    # return string[0].lower() + string[1:]\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    s1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s1)\n    \n    \ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    s1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s1).lower()\n    \n    \ndef title_case(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return word.title()\n    \n    \ndef index_test():\n    #assert index(2) == 2\n    assert index(0) == 0\n    assert index(10) == 10\n    assert index(1) == 1\n    assert index(2) == 2\n    assert index(3) == 3\n    assert index(4) == 4\n    assert index(5) == 5\n    assert index(6) == 6\n    assert index(7) == 7\n    assert index(8) == 8\n    assert index(9) == 9\n    assert index(10) == 10\n    assert index(11) == 11\n    assert index(12) == 12\n    assert index(13) == 13\n    assert index(14) == 14\n    assert index(15) == 15\n    assert index(16) == 16\n    assert index(17) == 17\n    assert index(18) == 18\n    assert index(19) == 19\n    assert index(20) == 20\n    assert index(21) == 21\n    assert index(22) == 22\n    assert index(23) == 23\n    assert index(24) == 24\n    assert index(25) == 25\n    assert index(26) == 26\n    assert index(27) == 27\n    assert index(28) == 28\n    assert index(29) == 29\n    assert index(30) == 30\n    assert index(31) == 31\n    assert index(32) == 32\n    assert index(33) == 33\n    assert index(34) == 34\n    assert index(35) == 35\n    assert index(36) == 36\n    assert index(37) == 37\n    assert index(38) == 38\n    assert index(39) == 39\n    assert index(40) == 40\n    assert index(41) == 41\n    assert index(42) == 42\n    assert index(43) == 43\n    assert index(44) == 44\n    assert index(45) == 45\n    assert index(46) == 46\n    assert index(47) == 47\n    assert index(48) == 48\n    assert index(49) == 49\n    assert index(50) == 50\n    assert index(51) == 51\n    assert index(52) == 52\n    assert index(53) == 53\n    assert index(54) == 54\n    assert index(55) == 55\n    assert index(56) == 56\n    assert index(57) == 57\n    assert index(58) == 58\n    assert index(59) == 59\n    assert index(60) == 60\n    assert index(61) == 61\n    assert index(62) == 62\n    assert index(63) == 63\n    assert index(64) == 64\n    assert index(65) == 65\n    assert index(66) == 66\n    assert index(67) == 67\n    assert index(68) == 68\n    assert index(69) == 69\n    assert index(70) == 70\n    assert index(71) == 71\n    assert index(72) == 72\n    assert index(73) == 73\n    assert index(74) == 74\n    assert index(75) == 75\n    assert index(76) == 76\n    assert index(77) == 77\n    assert index(78) == 78\n    assert index(79) == 79\n    assert index(80) == 80\n    assert index(81) == 81\n    assert index(82) == 82\n    assert index(83) == 83\n    assert index(84) == 84\n    assert index(85) == 85\n    assert index(86) == 86\n    assert index(87) == 87\n    assert index(88) == 88\n    assert index(89) == 89\n    assert index(90) == 90\n    assert index(91) == 91\n    assert index(92) == 92\n    assert index(93) == 93\n    assert index(94) == 94\n    assert index(95) == 95\n    assert index(96) == 96\n    assert index(97) == 97\n    assert index(98) == 98\n    assert index(99) == 99\n    assert index(100) == 100\n    assert index(101) == 101\n    assert index(102) == 102\n    assert index(103) == 103\n    assert index(104) == 104\n    assert index(105) == 105\n    assert index(106) == 106\n    assert index(107) == 107\n    assert index(108) == 108\n    assert index(109) == 109\n    assert index(110) == 110\n    assert index(111) == 111\n    assert index(112) == 112\n    assert index(113) == 113\n    assert index(114) == 114\n    assert index(115) == 115\n    assert index(116) == 116\n    assert index(117) == 117\n    assert index(118) == 118\n    assert index(119) == 119\n    assert index(120) == 120\n    assert index(121) == 121\n    assert index(122) == 122\n    assert index(123) == 123\n    assert index(124) == 124\n    assert index(125) == 125\n    assert index(126) == 126\n    assert index(127) == 127\n    assert index(128) == 128\n    assert index(129) == 129\n    assert index(130) == 130\n    assert index(131) == 131\n    assert index(132) == 132\n    assert index(133) == 133\n    assert index(134) == 134\n    assert index(135) == 135\n    assert index(136) == 136\n    assert index(137) == 137\n    assert index(138) == 138\n    assert index(139) == 139\n    assert index(140) == 140\n    assert index(141) == 141\n    assert index(142) == 142\n    assert index(143) == 143\n    assert index(144) == 144\n    assert index(145) == 145\n    assert index(146) == 146\n    assert index(147) == 147\n    assert index(148) == 148\n    assert index(149) == 149\n    assert index(150) == 150\n    assert index(151) == 151\n    assert index(152) == 152\n    assert index(153) == 153\n    assert index(154) == 154\n    assert index(155) == 155\n    assert index(156) == 156\n    assert index(157) == 157\n    assert index(158) == 158\n    assert index(159) == 159\n    assert index(160) == 160\n    assert index(161) == 161\n    assert index(162) == 162\n    assert index(163) == 163\n    assert index(164) == 164\n    assert index(165) == 165\n    assert index(166) == 166\n    assert index(167) == 167\n    assert index(168) == 168\n    assert index(169) == 169\n    assert index(170) == 170\n    assert index(171) == 171\n    assert index(172) == 172\n    assert index(173) == 173\n    assert index(174) == 174\n    assert index(175) == 175\n    assert index(176) == 176\n    assert index(177) == 177\n    assert index(178) == 178\n    assert index(179) == 179\n    assert index(180) == 180\n    assert index(181) == 181\n    assert index(182) == 182\n    assert index(183) == 183\n    assert index(184) == 184\n    assert index(185) == 185\n    assert index(186) == 186\n    assert index(187) == 187\n    assert index(188) == 188\n    assert index(189) == 189\n    assert index(190) == 190\n    assert index(191) == 191\n    assert index(192) == 192\n    assert index(193) == 193\n    assert index(194) == 194\n    assert index(195) == 195"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd = [i for i in l if i % 2 == 1]\n    return odd\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for n in l:\n        if n%2 == 0:\n            result.append(n)\n    return result\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i%2!=0:\n            l.remove(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i % 2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2==0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2 == 0]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [tuple[n] for tuple in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [i[n] for i in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    i = 0\n    for x in list1:\n        if i == n:\n            return x\n        else:\n            i+=1\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # your code goes here\n    res = []\n    for i in list1:\n        res.append(i[n])\n    return res\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # return [tup[n] for tup in list1]\n    if n < 0:\n        raise IndexError\n    if n >= len(list1):\n        raise IndexError\n    return [tup[n] for tup in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    result = []\n    for i in list1:\n        if len(result) == n:\n            break\n        result.append(i)\n    return result\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    #Take the first element and store it in a list\n    list_of_tuples = list(list1)\n    list_of_tuples.sort()\n    return list_of_tuples[n][1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    #pdb.set_trace()\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [row[n] for row in list1]\n    \n    \n    \ndef sort_list_by_first_item(list1):\n    '''\n    Write a function to sort a list by the first item of each tuple in a list of tuples.\n    '''\n    return sorted(list1, key=lambda x: x[0])\n    \n    \n    \ndef sort_list_by_second_item(list1):\n    '''\n    Write a function to sort a list by the second item of each tuple in a list of tuples.\n    '''\n    return sorted(list1, key=lambda x: x[1])\n    \n    \n    \ndef sort_list_by_third_item(list1):\n    '''\n    Write a function to sort a list by the third item of each tuple in a list of tuples.\n    '''\n    return sorted(list1, key=lambda x: x[2])\n    \n    \n    \ndef reverse_order_elements(list1):\n    '''\n    Write a function to reverse the order of the elements in a list.\n    '''\n    return list1[::-1]\n    \n    \n    \ndef filter_list_by_first_item(list1, item):\n    '''\n    Write a function to filter a list by the first item of each tuple in a list of tuples.\n    '''\n    return [row for row in list1 if row[0] == item]\n    \n    \n    \ndef filter_list_by_second_item(list1, item):\n    '''\n    Write a function to filter a list by the second item of each tuple in a list of tuples.\n    '''\n    return [row for row in list1 if row[1] == item]\n    \n    \n    \ndef filter_list_by_third_item(list1, item):\n    '''\n    Write a function to filter a list by the third item of each tuple in a list of tuples.\n    '''\n    return [row for row in list1 if row[2] == item]\n    \n    \n    \ndef join_elements(list1, separator):\n    '''\n    Write a function to join all items in a list.\n    '''\n    return separator.join(list1)\n    \n    \n    \ndef partition_list(list1, item):\n    '''\n    Write a function to partition a list by a given item.\n    '''\n    return ([row for row in list1 if row[0] < item], [row for row in list1 if row[0] > item])\n    \n    \n    \ndef compare_lists(list1, list2):\n    '''\n    Write a function to compare two lists.\n    '''\n    return (list1[0] == list2[0]) and (list1[1] == list2[1]) and (list1[2] == list2[2])\n    \n    \n    \ndef get_common_items(list1, list2):\n    '''\n    Write a function to get a list of common items between two lists.\n    '''\n    return [row for row in list1 if row in list2]\n    \n    \n    \ndef get_dictionary_from_list(list1):\n    '''\n    Write a function to create a dictionary from a list of tuples.\n    '''\n    return {row[0]: row[1] for row in list1}\n    \n    \n    \ndef get_dictionary_from_tuples(list1):\n    '''\n    Write a function to create a dictionary from a list of tuples.\n    '''\n    return {row[0]: row[1] for row in list1}\n    \n    \n    \ndef get_dictionary_from_list_of_lists(list1):\n    '''\n    Write a function to create a dictionary from a list of lists.\n    '''\n    return {row[0]: row[1] for row in list1}\n    \n    \n    \ndef get_dictionary_from_list_of_tuples(list1):\n    '''\n    Write a function to create a dictionary from a list of lists.\n    '''\n    return {row[0]: row[1] for row in list1}\n    \n    \n    \ndef compare_dictionaries(dict1, dict2):\n    '''\n    Write a function to compare two dictionaries.\n    '''\n    return (dict1 == dict2)\n    \n    \n    \ndef get_duplicates(list1):\n    '''\n    Write a function to find duplicates in a list.\n    '''\n    return [item for item, count in collections.Counter(list1).items() if count > 1]\n    \n    \n    \ndef filter_list_by_key(list1, key):\n    '''\n    Write a function to filter a list by a given key.\n    '''\n    return [row for row in list1 if row[key] == key]\n    \n    \n    \ndef get_list_of_tuples_from_dictionary(dict1):\n    '''\n    Write a function to create a list of tuples from a dictionary.\n    '''\n    return [(key, value) for key, value in dict1.items()]\n    \n    \n    \ndef get_list_of_tuples_from_list(list1):\n    '''\n    Write a function to create a list of tuples from a list.\n    '''\n    return [(row,) for row in list1]\n    \n    \n    \ndef get_list_of_dicts_from_list_of_tuples(list1):\n    '''\n    Write a function to create a list of dictionaries from a list of tuples.\n    '''\n    return [{key: row[i] for i, key in enumerate(list1[0])} for row in list1]\n    \n    \n    \ndef get_list_of_dicts_from_list_of_lists(list1):\n    '''\n    Write a function to create a list of dictionaries from a list of lists.\n    '''\n    return [{key: row[i] for i, key in enumerate(list1[0])} for row in list1]\n    \n    \n    \ndef get_list_of_dicts_from_list_of_tuples(list1):\n    '''\n    Write a function to create a list of dictionaries from a list of lists.\n    '''\n    return [{key: row[i] for i, key in enumerate(list1[0])} for row in list1]\n    \n    \n    \ndef print_dictionary_key_value_pair(dict1):\n    '''\n    Write a function to print a dictionary with key value pairs.\n    '''\n    for key, value in dict1.items():\n        print(key, value)\n        \n        \n        \ndef print_dictionary_key_value_pair_sorted(dict1):\n    '''\n    Write a function to print a dictionary with key value pairs sorted.\n    '''\n    for key, value in sorted(dict1.items()):\n        print(key, value)\n        \n        \n        \ndef get_most_common_items_in_list(list1):\n    '''\n    Write a function to get the most common items in a list.\n    '''\n    return [item for item, count in collections.Counter(list1).items() if count > 1]\n    \n    \n    \ndef get_most_common_items_in_list_sorted(list1):\n    '''\n    Write a function to get the most common items in a list.\n    '''\n    return [item for item, count in collections.Counter(list1).items() if count > 1]\n    \n    \n    \ndef get_least_common_items_in_list(list1):\n    '''\n    Write a function to get the least common items in a list.\n    '''\n    return [item for item, count in collections.Counter(list1).items() if count == 1]\n    \n    \n    \ndef get_least_common_items_in_list_sorted(list1):\n    '''\n    Write a function to get the least common items in a list.\n    '''\n    return [item for item, count in collections.Counter(list1).items() if count == 1]\n    \n    \n    \ndef get_different_items_in_list(list1):"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return 1\n    return 0\n    \ndef validate(x,y):\n    '''\n    Write a python function to check if a string is a valid password.\n    Valid password should be 6 characters long and should have atleast one digit and one character.\n    '''\n    if len(x)==6 and y.isdigit() and overlapping(y,x):\n        return 1\n    return 0\n    \ndef password(x):\n    '''\n    Write a python function to check whether a string is a password.\n    '''\n    if validate(x,x):\n        return True\n    else:\n        return False\n    \ndef check_password(a,b):\n    '''\n    Write a python function to check if two strings are a match.\n    '''\n    if password(a) and password(b):\n        return True\n    else:\n        return False\n    \ndef main():\n    '''\n    Write a python function to check if a string is a phone number.\n    A phone number is a 10 digit number starting from 1 or 91.\n    '''\n    \n    n = input(\"Enter a number:\")\n    \n    if check_password(n,n):\n        print \"Valid Phone Number\"\n    else:\n        print \"Invalid Phone Number\"\n    \n    \n    \n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(i in list2 for i in list1)\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for x in list1:\n        if x in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1) > len(list2):\n        return False\n    elif len(list1) < len(list2):\n        return False\n    else:\n        for x in range(0,len(list1)):\n            for y in range(0,len(list2)):\n                if list1[x] == list2[y]:\n                    return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for x in list1:\n        if x in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for x in list1:\n        if x in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for num in list1:\n        if num in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return bool(set(list1) & set(list2))\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    result = any(i in list2 for i in list1)\n    return result\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_so_far = 1\n    for num in arr:\n        max_so_far *= num\n    \n    second_max_so_far = 1\n    for num in arr:\n        second_max_so_far *= num\n    \n    second_max_so_far = second_max_so_far / max_so_far\n    for num in arr:\n        if num * second_max_so_far > num:\n            second_max_so_far = num\n    \n    max_product = 1\n    for num in arr:\n        if num * second_max_so_far > num:\n            max_product *= num\n    \n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    n = len(arr)\n    for i in range(0, n):\n        for j in range(i+1, n):\n            if (arr[j] * arr[i] < arr[j] * arr[j]):\n                print arr[j], arr[i]\n    return\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    i = len(arr)-1\n    j = len(arr)-2\n    if arr[i] > 1:\n        return (arr[i], arr[j])\n    elif arr[j] > 1:\n        return (arr[j], arr[i])\n    else:\n        return None\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    n = len(arr)\n    product = -1\n    for i in xrange(n-1):\n        if arr[i]*arr[i+1] > product:\n            product = arr[i]*arr[i+1]\n    print product\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    pass\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    maxPro = 0\n    for i in xrange(n):\n        for j in xrange(i+1,n):\n            if arr[i]*arr[j]>maxPro:\n                maxPro = arr[i]*arr[j]\n                \n    return maxPro\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = max(arr)\n    index_of_max = arr.index(max_product)\n    arr[index_of_max] = -1\n    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i]*arr[i+1] < 0:\n            return arr[i]*arr[i+1]\n    return None\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    l = len(arr)\n    max_product = arr[l-1]*arr[l-2]*arr[l-3]\n    for i in range(l-3):\n        max_product = max(max_product,arr[i]*arr[i+1]*arr[i+2])\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr) \n    m = len(arr[0]) \n    max_product = 0\n    for i in range(n): \n        for j in range(m): \n            if arr[i][j] == 0: \n                arr[i][j] = -1 \n            max_product = max(max_product, arr[i][j]) \n    max_product = max_product if max_product > 1 else 1 \n    for i in range(n): \n        for j in range(m): \n            if arr[i][j] == -1: \n                arr[i][j] = 0 \n    for i in range(n): \n        for j in range(m): \n            arr[i][j] = arr[i][j] / max_product \n    for i in range(n): \n        if max(arr[i]) == 1: \n            return (i, arr[i].index(1)) \n    return -1 \narr = [[2,3,0,1], [0,2,3,1], [1,0,2,3], [1,1,2,3], [1,1,2,3], [0,1,2,3]] \nprint max_Product(arr) "
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    if not arr:\n        return None\n    \n    if len(arr) == 1:\n        return arr[0]\n    \n    ans = -1 * float('inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > ans:\n                ans = arr[i] * arr[j]\n                \n    return ans\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = {}\n    for index,value in enumerate(Input):\n        if value not in result:\n            result[value] = index\n    return result\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # first way\n    # my_list = []\n    # for tup in Input:\n    #     my_list.append(tup[0])\n    # print(my_list)\n    # result = set(my_list)\n    # print(result)\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output=[]\n    list1=list(Input)\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!=j:\n                if list1[i][0]==list1[j][0]:\n                    Output.append(list1[i])\n    return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    set_of_tuples = set()\n    for tup in Input:\n        set_of_tuples.add(tup[0])\n    return set_of_tuples\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # First create an empty list.\n    groups = []\n    # Iterate over the elements and group them based on the first element.\n    for element in Input:\n        if element not in groups:\n            groups.append(element)\n    return groups\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    new_list = []\n    for tuples in Input:\n        for elem in tuples:\n            if elem not in new_list:\n                new_list.append(elem)\n    return new_list\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    List = Input\n    lst = []\n    for tup in List:\n        lst.append(tup[0])\n    return list(set(lst))\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    List=[]\n    for i in Input:\n        List.append(i[0])\n    return List\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # first make a list of all the unique elements of the tuples.\n    unique_elements = list(set([element for tuple in Input for element in tuple]))\n    #print unique_elements\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # input_list = [(1, 2), (3, 4), (5, 6), (7, 8)]\n    \n    # for i in range(len(input_list)):\n    #     for j in range(i+1,len(input_list)):\n    #         if (input_list[i][0] == input_list[j][0]):\n    #             print(input_list[i][0])\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for x in lst:\n        if len(x) > max_len:\n            max_len = len(x)\n    max_len = max_len + 1\n    for x in lst:\n        if len(x) == max_len:\n            print x\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maxlength=0\n    for i in range(len(lst)):\n        if len(lst[i]) > maxlength:\n            maxlength = len(lst[i])\n            maxitem = lst[i]\n    return maxitem\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i)>max_len:\n            max_len=len(i)\n            max_item = i\n    return max_item\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max:\n            max = len(lst[i])\n            ind = i\n    return lst[ind]\ndef Find_Common(lst1,lst2):\n    '''\n    Write a python function to find the common elements in two lists\n    '''\n    result = []\n    for i in lst1:\n        if i in lst2:\n            result.append(i)\n    return result\ndef Find_Acc(lst):\n    '''\n    Write a python function to find the accumulation of elements in a list\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append(lst[i]*(i+1))\n    return result\ndef Find_Sum(lst):\n    '''\n    Write a python function to find the summation of elements in a list\n    '''\n    result = 0\n    for i in range(len(lst)):\n        result += lst[i]\n    return result\ndef Find_Diff(lst1,lst2):\n    '''\n    Write a python function to find the difference of elements in two lists\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i]-lst2[i])\n    return result\ndef Find_Prod(lst):\n    '''\n    Write a python function to find the product of elements in a list\n    '''\n    result = 1\n    for i in lst:\n        result *= i\n    return result\ndef Find_Avg(lst):\n    '''\n    Write a python function to find the average of elements in a list\n    '''\n    result = 0\n    for i in lst:\n        result += i\n    result /= len(lst)\n    return result\ndef Find_Diff_Perc(lst1,lst2):\n    '''\n    Write a python function to find the percentage difference of elements in two lists\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(100*(lst1[i]-lst2[i])/lst2[i])\n    return result\ndef Find_Range(lst):\n    '''\n    Write a python function to find the range of elements in a list\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append(lst[i]-lst[i-1])\n    return result\ndef Find_Mode(lst):\n    '''\n    Write a python function to find the mode of elements in a list\n    '''\n    result = []\n    for i in lst:\n        if i not in result:\n            result.append(i)\n    result.sort()\n    return result\ndef Find_Std_Dev(lst):\n    '''\n    Write a python function to find the standard deviation of elements in a list\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append((i+1)*lst[i])\n    result = Find_Diff(result,Find_Avg(result))\n    result = Find_Prod(result)\n    result /= (len(lst)*(len(lst)-1))\n    return result**0.5\ndef Find_Cov(lst1,lst2):\n    '''\n    Write a python function to find the covariance of elements in two lists\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i]*lst2[i])\n    result = Find_Diff(result,Find_Avg(result))\n    result = Find_Prod(result)\n    result /= (len(lst1)*len(lst2))\n    return result\ndef Find_Corr(lst1,lst2):\n    '''\n    Write a python function to find the correlation of elements in two lists\n    '''\n    result = Find_Cov(lst1,lst2)\n    result = result/(Find_Std_Dev(lst1)*Find_Std_Dev(lst2))\n    return result\ndef Find_Lex_Order(lst):\n    '''\n    Write a python function to find the lexicographical order of elements in a list\n    '''\n    result = []\n    for i in range(len(lst)):\n        for j in range(i,len(lst)):\n            if lst[i] > lst[j]:\n                temp = lst[i]\n                lst[i] = lst[j]\n                lst[j] = temp\n    return lst\ndef Find_Freq(lst,n):\n    '''\n    Write a python function to find the frequency of elements in a list\n    '''\n    result = []\n    for i in lst:\n        count = 0\n        for j in lst:\n            if i == j:\n                count += 1\n        result.append(count)\n    return result\ndef Find_Sorted(lst):\n    '''\n    Write a python function to find the sorted version of elements in a list\n    '''\n    result = []\n    for i in lst:\n        result.append(sorted(lst)[lst.index(i)])\n    return result\ndef Find_Max_Min(lst):\n    '''\n    Write a python function to find the maximum and minimum elements of a list\n    '''\n    result = []\n    result.append(max(lst))\n    result.append(min(lst))\n    return result\ndef Find_Count(lst,n):\n    '''\n    Write a python function to find the count of elements in a list\n    '''\n    result = 0\n    for i in lst:\n        if i == n:\n            result += 1\n    return result\ndef Find_Prob(lst,n):\n    '''\n    Write a python function to find the probability of an element in a list\n    '''\n    result = 0\n    for i in lst:\n        result += 1\n    result /= len(lst)\n    return result\ndef Find_Weighted_Prob(lst,n):\n    '''\n    Write a python function to find the weighted probability of an element in a list\n    '''\n    result = 0\n    for i in lst:\n        result += i\n    result /= len(lst)\n    return result\ndef Find_Ex_Prob(lst,n):\n    '''\n    Write a python function to find the expected probability of an element in a list\n    '''\n    result = 0\n    for i in lst:\n        result += i*i\n    result /= len(lst)\n    return result\ndef Find_List_Avg(lst):\n    '''\n    Write a python function to find the average of a list\n    '''\n    result = 0\n    for i in range(len(lst)):\n        result += lst[i]\n    result /= len(lst)\n    return result\ndef Find_List_Prod(lst):\n    '''\n    Write a python function to find the product of a list\n    '''\n    result = 1\n    for i in lst:\n        result *= i\n    return result\ndef Find_List_Sum(lst):\n    '''\n    Write a python function to find the summation of a list\n    '''\n    result = 0\n    for i in lst:\n        result += i\n    return result\ndef Find_List_Min(lst):\n    '''\n    Write a python function to find the minimum element in a list\n    '''\n    result = lst[0]\n    for i in lst:\n        if i < result:\n            result = i\n    return result\ndef Find_List_Max(lst):\n    '''\n    Write a python function to find the maximum element in a list\n    '''\n    result = lst[0]\n    for i in lst:\n        if i > result:\n            result = i\n    return result\ndef Find_List_Range(lst):\n    '''\n    Write a python function to find the range of elements in a list\n    '''\n    result = []\n    for i in range(len(ls"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0])\n    max_el = lst[0]\n    for el in lst:\n        if len(el) > max_len:\n            max_len = len(el)\n            max_el = el\n    return max_el\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst.sort()\n    return lst[-1]\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if not lst:\n        raise ValueError('Empty list')\n    max_len = len(lst[0])\n    max_item = lst[0]\n    for item in lst:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_item = item\n    return max_item\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = lst[0]\n    for i in range(len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n            max_element = lst[i]\n    return max_element\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst)==1:\n        return lst[0]\n    else:\n        left=Find_Max(lst[1:])\n        right=Find_Max(lst[:-1])\n        if len(left)>=len(right):\n            return left\n        else:\n            return right\ndef Find_Min(lst): \n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    if len(lst)==1:\n        return lst[0]\n    else:\n        left=Find_Min(lst[1:])\n        right=Find_Min(lst[:-1])\n        if len(left)<=len(right):\n            return left\n        else:\n            return right\ndef Reverse(lst): \n    '''\n    Write a python function to reverse the elements of a list.\n    '''\n    if len(lst)==1:\n        return [lst[0]]\n    else:\n        return [lst[-1]]+Reverse(lst[:-1])\ndef Find_Min(lst): \n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    if len(lst)==1:\n        return lst[0]\n    else:\n        left=Find_Min(lst[1:])\n        right=Find_Min(lst[:-1])\n        if len(left)>=len(right):\n            return left\n        else:\n            return right\ndef Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst)==1:\n        return lst[0]\n    else:\n        left=Find_Max(lst[1:])\n        right=Find_Max(lst[:-1])\n        if len(left)<=len(right):\n            return left\n        else:\n            return right\ndef Sum_In_Range(lst,n,m):\n    '''\n    Write a python function to find the sum of elements of a list within a given range.\n    '''\n    if len(lst)==0:\n        return 0\n    else:\n        if n<lst[0] or m>lst[-1]:\n            return 0\n        elif lst[0]==n or lst[-1]==m:\n            return lst[0]+lst[-1]\n        else:\n            return Sum_In_Range(lst[1:],n,m)+Sum_In_Range(lst[:-1],n,m)\ndef Product_In_Range(lst,n,m):\n    '''\n    Write a python function to find the product of elements of a list within a given range.\n    '''\n    if len(lst)==0:\n        return 1\n    else:\n        if n<lst[0] or m>lst[-1]:\n            return 1\n        elif lst[0]==n or lst[-1]==m:\n            return lst[0]*lst[-1]\n        else:\n            return Product_In_Range(lst[1:],n,m)*Product_In_Range(lst[:-1],n,m)\ndef Is_Prime(n):\n    '''\n    Write a python function to check whether a given number is a prime number or not.\n    '''\n    if n==1:\n        return False\n    elif n==2:\n        return True\n    elif n%2==0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n)+1),2):\n            if n%i==0:\n                return False\n        return True\ndef Is_Prime_Num(lst):\n    '''\n    Write a python function to check whether a given number is a prime number or not.\n    '''\n    if len(lst)==1:\n        if lst[0]==1:\n            return False\n        elif lst[0]==2:\n            return True\n        else:\n            for i in range(3,int(math.sqrt(lst[0])+1),2):\n                if lst[0]%i==0:\n                    return False\n            return True\n    else:\n        if lst[0]==1:\n            return False\n        elif lst[0]==2:\n            return True\n        else:\n            for i in range(3,int(math.sqrt(lst[0])+1),2):\n                if lst[0]%i==0:\n                    return False\n            return True\ndef Find_Prime_Numbers(lst,n):\n    '''\n    Write a python function to find the nth prime number in the list.\n    '''\n    if len(lst)==0:\n        return 0\n    else:\n        if Is_Prime(lst[0]):\n            if n==1:\n                return lst[0]\n            else:\n                n=n-1\n                return Find_Prime_Numbers(lst[1:],n)\n        else:\n            return Find_Prime_Numbers(lst[1:],n)\ndef Find_Prime_Factors(lst,n):\n    '''\n    Write a python function to find the nth prime factor of a given number.\n    '''\n    if len(lst)==0:\n        return 0\n    else:\n        if n==1:\n            return lst[0]\n        elif Is_Prime(lst[0]):\n            return Find_Prime_Factors(lst[1:],n-1)\n        else:\n            return Find_Prime_Factors(lst[1:],n)\ndef Find_Factor_Num(lst,n):\n    '''\n    Write a python function to find the factor of a given number.\n    '''\n    if len(lst)==0:\n        return 0\n    else:\n        if Is_Prime(lst[0]):\n            return Find_Prime_Factors(lst[1:],n-1)\n        else:\n            return Find_Factor_Num(lst[1:],n)\ndef Find_Common_Factors(lst1,lst2):\n    '''\n    Write a python function to find the common factors between two lists.\n    '''\n    if len(lst1)==0:\n        return lst2\n    elif len(lst2)==0:\n        return lst1\n    elif lst1[0]==lst2[0]:\n        return [lst1[0]]+Find_Common_Factors(lst1[1:],lst2[1:])\n    else:\n        return Find_Common_Factors(lst1[1:],lst2[1:])\ndef Find_Prod_Count(lst,n,m):\n    '''\n    Write a python function to find the product and the number of occurrences of an element in a list within a given range.\n    '''\n    if len(lst)==0:\n        return 0\n    elif len(lst)==1:\n        if lst[0]==n or lst[0]==m:\n            return 1\n        else:\n            return 0\n    else:\n        if lst[0]==n or lst[0]==m:\n            return Find_Prod_Count(lst[1:],n,m)+1\n        else:\n            return Find_Prod_Count(lst[1:],n,m)+Find_Prod_Count(lst[:-1],n,m)\ndef Remove_Duplicate_Ele(lst):\n    '''\n    Write a python function to remove the duplicates from a list.\n    '''\n    if len(lst)==0:\n        return []\n    elif len(lst)==1:\n        return lst\n    else:\n        if lst[0]!=lst[1]:\n            return [lst[0]]+Remove_Duplicate_Ele(lst[1:])\n        else:\n            return Remove_Duplicate_Ele(lst[1:])\ndef Find_Min_Ele(lst):\n    '''\n    Write a python function to find the minimum element i"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_element = lst[0]\n    max_length = len(lst[0])\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum(map(round,list1))*len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = sum(round(num,2) for num in list1)\n    print total*(len(list1))\n    \nround_and_sum([1.11,2.22,3.33])\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    \n    total = 0\n    \n    for number in list1:\n        total += round(number)\n        \n    print(total * len(list1))\n    \n    \nround_and_sum([1.0, 2.5, 3.4, 4.6]"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    from math import ceil\n    l = list(list1)\n    l = [ceil(i) for i in l]\n    sum = sum(l) * len(l)\n    print sum\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list2 = []\n    for num in list1:\n        list2.append(round(num))\n    return sum(list2) * len(list2)\n    \n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum1 = 0\n    for i in list1:\n        sum1 += round(i, 2)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    print sum(round(x) for x in list1) * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for x in list1:\n        sum = sum + round(x)\n    return(sum)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        round_num = round(num,2)\n        total += round_num\n    print(round(total,2))\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        rounded = round(num)\n        total += rounded\n    print(total * len(list1))\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1, 2):\n        cube_sum += i**3\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    \n    result = 0\n    for i in range(n):\n        if i%2 == 0:\n            result += (i**3)\n    return result\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0,n):\n        if(i%2 == 0):\n            sum += i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(2,n+1,2):\n        result = result + pow(i,3)\n    return result\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    count,i = 0,0\n    while i<n:\n        if i%2 ==0:\n            count+=i**3\n        i+=1\n    return count\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n**3 + cube_Sum(n-1)\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    i = 0\n    c = 0\n    while i < n:\n        c += i**3\n        i += 2\n    return c\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    s=0\n    for i in range(n+1):\n        if i%2==0:\n            s=s+i**3\n    return s\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum(i**3 for i in range(n) if i%2 == 0)\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    c = 0\n    for x in range(n): \n        c = c + (2 * x * x) \n    return c\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    for tup in test_tup:\n        print delimiter.join(tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    out = ''\n    for tup in test_tup:\n        out += str(tup) + ','\n    return out[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    res = ''\n    for i in test_tup:\n        res += str(i) + ','\n    return res[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    res = \"\"\n    for tup in test_tup:\n        for el in tup:\n            res = res + str(el) + delim\n    return res[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return str(test_tup[0]) + str(test_tup[1]) + str(test_tup[2])\n    \ndef test_concatenate_tuple():\n    assert concatenate_tuple(('a','b','c')) == 'abc'\n    assert concatenate_tuple(('1','2','3')) == '123'\n    assert concatenate_tuple(('1','2','3','4','5')) == '12345'\n    assert concatenate_tuple(('1','2','3','4','5','6','7')) == '1234567'\n    assert concatenate_tuple(('1','2','3','4','5','6','7','8')) == '12345678'\n    assert concatenate_tuple(('1','2','3','4','5','6','7','8','9','10')) == '1234567890'\n    print 'Passed!'\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    res = ''\n    for x in test_tup:\n        res = res + str(x) + ','\n    res = res[:-1]\n    return res\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for elem in test_tup:\n        result += elem\n    return result\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    str_list = []\n    for i in test_tup:\n        str_list.append(str(i))\n    return ''.join(str_list)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # for tup in test_tup:\n    #     print(' '.join(tup))\n    return tuple(item for tup in test_tup for item in tup)\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum=0\n    for i in range(n+1):\n        sum=sum+(i*i*i)\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        total = total + i*i*i\n    average = total/n\n    print \"Average of cubes of first\",n,\"natural numbers is:\", average\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return sum(x ** 3 for x in range(n)) / n\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(n):\n        cubes.append(i**3)\n    total = 0\n    for i in cubes:\n        total += i\n    avg = total / len(cubes)\n    return avg\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    sum = 0.0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0.0\n    for x in range(1,n+1):\n        total += x**3\n    return total/float(n)\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(n+1):\n        total += (i**3)\n    return total/n\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes=[]\n    for i in range(1,n+1):\n        cubes.append(i**3)\n    total = 0.0\n    for cube in cubes:\n        total+=cube\n    return total/len(cubes)\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    c = 0\n    total = 0\n    while c<n:\n        total += c**3\n        c += 1\n    return total/n\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + i ** 3\n    return sum / n\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([i[-1] for i in test_tuple])\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(list[-1] for list in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [x[-1] for x in test_tuple]\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(item[-1] for item in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([int(test_tuple[i][-1]) for i in range(len(test_tuple))])\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [i[-1] for i in test_tuple]\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # return tuple(list(reversed(test_tuple[0])))\n    return tuple(reversed(test_tuple))\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([s[-1] for s in test_tuple])\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for item in list1: \n        if item == x: \n            count += 1 \n    return count \n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return len([x for sublist in list1 for x in sublist if x == x])\n    \n    \ndef compare_strings(list1, list2):\n    '''\n    Write a function that returns the longest common prefix of two strings.\n    '''\n    if len(list1) > len(list2):\n        prefix = list1\n        suffix = list2\n    else:\n        prefix = list2\n        suffix = list1\n    if len(prefix) == 0:\n        return True\n    for i in range(len(prefix)):\n        if prefix[i]!= suffix[i]:\n            return False\n    return True\n    \n    \ndef check_palindrome(list1):\n    '''\n    Write a function that returns the number of palindromes that appear in a list.\n    '''\n    return len([i for i in list1 if i == i[::-1]])\n    \n    \ndef unique_elements(list1):\n    '''\n    Write a function that returns the number of unique elements in a list.\n    '''\n    return len(set(list1))\n    \n    \ndef compute_volume_of_cuboid(l1, l2, l3):\n    '''\n    Write a function to compute the volume of a cuboid.\n    '''\n    return l1 * l2 * l3\n    \n    \ndef count_triplets(list1, list2, target):\n    '''\n    Write a function to count the number of triplets that sum to a target number.\n    '''\n    return len([x for x in list1 if x in list2 for j in list2 if j-x in list1])\n    \n    \ndef remove_duplicates(list1):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    if len(list1) == 0:\n        return list1\n    list2 = list1\n    index1 = 1\n    while index1 < len(list1):\n        if list1[index1] == list1[index1-1]:\n            del list2[index1]\n        else:\n            index1 += 1\n    return list2\n    \n    \ndef subsets_n_2(list1, n):\n    '''\n    Write a function to return all subsets of a list with a size less than equal to n.\n    '''\n    if n == 0:\n        return [[]]\n    elif n == 1:\n        return [[x] for x in list1]\n    else:\n        return sum([subsets_n_2(list1, n-1) for x in list1], []) + sum([subsets_n_2(list1, n) for x in list1], [])\n    \n    \ndef find_pythagorean_triple(a, b, c):\n    '''\n    Write a function to find the first Pythagorean triplet for which a + b + c = 1000.\n    '''\n    for i in range(1, 1000):\n        for j in range(1, 1000):\n            if (i**2 + j**2) == (1000 - i - j):\n                if i + j + (1000-i-j) == 1000:\n                    return [i, j, (1000-i-j)]\n    return False\n    \n    \ndef number_palindromes_in_range(low, high):\n    '''\n    Write a function to count the number of palindromes that appear in a range of numbers.\n    '''\n    return len([i for i in range(low, high + 1) if str(i) == str(i)[::-1]])\n    \n    \ndef list_string(list1):\n    '''\n    Write a function to convert a list of characters to a string.\n    '''\n    return ''.join([str(i) for i in list1])\n    \n    \ndef factorial(n):\n    '''\n    Write a function to compute the factorial of a number.\n    '''\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n    \n    \ndef fibonacci(n):\n    '''\n    Write a function to compute the nth Fibonacci number.\n    '''\n    return sum([1, 1])\n    \n    \ndef nth_fibonacci_number(n):\n    '''\n    Write a function to compute the nth Fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return nth_fibonacci_number(n-1) + nth_fibonacci_number(n-2)\n    \n    \ndef is_valid_permutation(list1, list2):\n    '''\n    Write a function to check if two lists are permutations of each other.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    for i in range(len(list1)):\n        if list1[i] not in list2:\n            return False\n        else:\n            list2.remove(list1[i])\n    return True\n    \n    \ndef permute(list1, start, end):\n    '''\n    Write a function to permute a list in place.\n    '''\n    if start == end:\n        return\n    else:\n        for i in range(start, end):\n            list1[start], list1[i] = list1[i], list1[start]\n            permute(list1, start+1, end)\n            list1[start], list1[i] = list1[i], list1[start]\n    \n    \ndef list_perms(list1):\n    '''\n    Write a function to return all the permutations of a list.\n    '''\n    if len(list1) == 1:\n        return [list1]\n    else:\n        perms = []\n        for x in list_perms(list1[1:]):\n            for i in range(len(x) + 1):\n                perms.append(x[:i] + list1[0:1] + x[i:])\n        return perms\n    \n    \ndef circular_array_loop_exists(list1):\n    '''\n    Write a function to determine if a loop exists in a circularly sorted array.\n    '''\n    for i in range(len(list1)):\n        if list1[i] < list1[(i+1)%len(list1)]:\n            continue\n        else:\n            return True\n    return False\n    \n    \ndef is_pallindrome(list1):\n    '''\n    Write a function to determine if a list is a pallindrome.\n    '''\n    if list1[:] == list1[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef count_divisors(n):\n    '''\n    Write a function to count the number of divisors of a number.\n    '''\n    divisors = 1\n    for i in range(2, n):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n    \n    \ndef find_min(list1):\n    '''\n    Write a function to find the minimum element in a list.\n    '''\n    if len(list1) == 0:\n        return False\n    else:\n        return min(list1)\n    \n    \ndef find_max(list1):\n    '''\n    Write a function to find the maximum element in a list.\n    '''\n    if len(list1) == 0:\n        return False\n    else:\n        return max(list1)\n    \n    \ndef binary_search(list1, value):\n    '''\n    Write a function to do a binary search in a list.\n    '''\n    if len(list1) == 0:\n        return False\n    elif len(list1) == 1:\n        return list1[0] == value\n    else:\n        middle = len(list1) / 2\n        if value == list1[middle]:\n            return True\n        elif value > list1[middle]:\n            return binary_search(list1[middle+1:], value)\n        else:\n            return binary_search(list1[:middle], value)\n    \n    \ndef find"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    res = 0\n    for i in range(len(list1)):\n        for j in range(i,len(list1)):\n            if list1[j] == x:\n                res+=1\n    return res\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    cnt = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    # base case\n    if list1 == []:\n        return 0\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    i = 0\n    for list2 in list1:\n        if x in list2:\n            i+=1\n    return i\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # return [x for x in nums if x % 2!= 0]\n    return [x for x in nums if x % 2 == 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num%2==0]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    \n    newlist = []\n    for i in nums:\n        if i%2 == 0:\n            newlist.append(i)\n    return newlist\n    \ndef primes(nums):\n    '''\n    Write a function that takes an array of numbers and returns\n    an array of the prime numbers contained in those numbers.\n    '''\n    \n    newlist = []\n    for i in nums:\n        for j in range(2,i):\n            if i % j == 0:\n                break\n        else:\n            newlist.append(i)\n    return newlist\n    \ndef palindrome(s):\n    '''\n    Write a function that takes a string and returns\n    true if the string is a palindrome, false otherwise.\n    '''\n    \n    newlist = []\n    for i in s:\n        if i.isalpha() == True:\n            newlist.append(i.lower())\n    newlist2 = []\n    for i in newlist:\n        newlist2.append(i)\n    newlist2.reverse()\n    if newlist == newlist2:\n        return True\n    else:\n        return False\n        \ndef count_digits(nums):\n    '''\n    Write a function that takes a string and returns\n    the number of digits in the string.\n    '''\n    \n    string = str(nums)\n    count = 0\n    for i in string:\n        count += 1\n    return count\n    \ndef is_pangram(string):\n    '''\n    Write a function that takes a string and returns\n    true if the string is a pangram, false otherwise.\n    '''\n    \n    string = string.lower()\n    string2 = string.replace(\" \",\"\")\n    if len(string2) == 26:\n        return True\n    else:\n        return False\n        \ndef is_anagram(string1,string2):\n    '''\n    Write a function that takes two strings and returns\n    true if the strings are anagrams, false otherwise.\n    '''\n    \n    string1 = string1.replace(\" \",\"\")\n    string2 = string2.replace(\" \",\"\")\n    if string1 == string2:\n        return True\n    else:\n        return False\n        \ndef is_pandigital(nums):\n    '''\n    Write a function that takes an array of numbers and returns\n    true if it is a pandigital number, false otherwise.\n    '''\n    \n    newlist = []\n    for i in nums:\n        newlist.append(str(i))\n    for j in newlist:\n        if len(newlist) == 9 and newlist.count(j) > 1:\n            return True\n    return False\n    \ndef is_palindrome_number(nums):\n    '''\n    Write a function that takes an array of numbers and returns\n    true if it is a palindrome number, false otherwise.\n    '''\n    \n    string = str(nums)\n    string2 = string.replace(\" \",\"\")\n    if string2 == string2[::-1]:\n        return True\n    else:\n        return False\n    \ndef digit_counts(nums):\n    '''\n    Write a function that takes an array of numbers and returns\n    an array with the number of digits for each number.\n    '''\n    \n    newlist = []\n    for i in nums:\n        count = 0\n        while i > 0:\n            i = i / 10\n            count += 1\n        newlist.append(count)\n    return newlist\n    \ndef digit_sum(nums):\n    '''\n    Write a function that takes an array of numbers and returns\n    an array with the sum of the digits for each number.\n    '''\n    \n    newlist = []\n    for i in nums:\n        sum = 0\n        while i > 0:\n            sum += i % 10\n            i = i / 10\n        newlist.append(sum)\n    return newlist\n    \ndef string_count(string, sub):\n    '''\n    Write a function that takes a string and returns\n    an array with the number of times each character appears\n    in the string.\n    '''\n    \n    newlist = []\n    for i in sub:\n        newlist.append(string.count(i))\n    return newlist\n    \ndef string_count2(string, sub):\n    '''\n    Write a function that takes a string and returns\n    an array with the number of times each character appears\n    in the string.\n    '''\n    \n    newlist = []\n    for i in sub:\n        newlist.append(string.count(i))\n    return newlist\n    \ndef string_reverse(string):\n    '''\n    Write a function that takes a string and returns\n    the reverse of that string.\n    '''\n    \n    newlist = []\n    for i in range(len(string)-1, -1, -1):\n        newlist.append(string[i])\n    return \"\".join(newlist)\n    \ndef string_reverse2(string):\n    '''\n    Write a function that takes a string and returns\n    the reverse of that string.\n    '''\n    \n    newlist = list(string)\n    newlist.reverse()\n    return \"\".join(newlist)\n    \ndef string_sort(string):\n    '''\n    Write a function that takes a string and returns\n    the string sorted alphabetically.\n    '''\n    \n    newlist = list(string)\n    newlist.sort()\n    return \"\".join(newlist)\n    \ndef string_sort2(string):\n    '''\n    Write a function that takes a string and returns\n    the string sorted alphabetically.\n    '''\n    \n    newlist = sorted(string)\n    return \"\".join(newlist)\n    \ndef string_sort3(string):\n    '''\n    Write a function that takes a string and returns\n    the string sorted alphabetically.\n    '''\n    \n    newlist = sorted(string, key=str.lower)\n    return \"\".join(newlist)\n    \ndef is_prime(nums):\n    '''\n    Write a function that takes an array of numbers and returns\n    true if all the numbers in the array are prime, false otherwise.\n    '''\n    \n    newlist = []\n    for i in nums:\n        for j in range(2,i):\n            if i % j == 0:\n                break\n        else:\n            newlist.append(i)\n    if len(newlist) == len(nums):\n        return True\n    else:\n        return False\n    \ndef smallest_num(nums):\n    '''\n    Write a function that takes an array of numbers and returns\n    the smallest number in that array.\n    '''\n    \n    newlist = []\n    for i in nums:\n        newlist.append(i)\n    newlist.sort()\n    return newlist[0]\n    \ndef smallest_num2(nums):\n    '''\n    Write a function that takes an array of numbers and returns\n    the smallest number in that array.\n    '''\n    \n    newlist = sorted(nums)\n    return newlist[0]\n    \ndef most_common(nums):\n    '''\n    Write a function that takes an array of numbers and returns\n    the most common number in that array.\n    '''\n    \n    newlist = []\n    for i in nums:\n        newlist.append(i)\n    newlist.sort()\n    newlist2 = []\n    for i in newlist:\n        if newlist.count(i) == max(newlist.count(i) for i in newlist):\n            newlist2.append(i)\n    return newlist2[0]\n    \ndef most_common2(nums):\n    '''\n    Write a function that takes an array of numbers and returns\n    the most common number in that array.\n    '''\n    \n    newlist = sorted(nums)\n    newlist2 = []\n    for i in newlist:\n        if newlist.count(i) == max(newlist.count(i) for i in newlist):\n            newlist2.append(i)\n    return newlist2[0]\n    \ndef most_common3(nums):\n    '''\n    Write a function that takes an array of numbers and returns\n    the most common number in that array.\n    '''\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2 == 1]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    if nums == []:\n        return []\n    if type(nums) == int:\n        return [nums]\n    else:\n        return [i for i in nums if i % 2]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for n in nums:\n        if n % 2!= 0:\n            yield n\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x:x%2!=0,nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnumbers = filter(lambda x: x % 2!= 0, nums)\n    return oddnumbers\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    if nums == []:\n        return []\n    else:\n        return [nums[0]] + filter_oddnumbers(nums[1:])\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    d = dt.split(\"-\")\n    return \"%s-%s-%s\"%(d[2], d[1], d[0])\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    year, month, day = re.search(r'(\\d{4})-(\\d{2})-(\\d{2})', dt).groups()\n    return '{:0>2}-{:0>2}-{:0>4}'.format(day, month, year)\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    new_date = dt.replace('-','/')\n    return new_date\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if len(dt) < 10:\n        raise ValueError(\"Date format is invalid\")\n    date_regex = re.compile(\"[0-9]{4}-[0-9]{2}-[0-9]{2}\")\n    if not date_regex.match(dt):\n        raise ValueError(\"Date format is invalid\")\n    return dt[6:] + \"-\" + dt[3:5] + \"-\" + dt[:2]\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_format = '%Y-%m-%d'\n    if dt == '-1':\n        return '-1'\n    else:\n        return datetime.strftime(datetime.strptime(dt, date_format),'%d-%m-%Y')\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    temp_dt = dt.split('-')\n    new_dt = temp_dt[2] + '-' + temp_dt[1] + '-' + temp_dt[0]\n    return new_dt\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    dt = ''.join(dt)\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    month = {'Jan': '01', 'Feb': '02', 'Mar': '03', 'Apr': '04', 'May': '05', 'Jun': '06', 'Jul': '07', 'Aug': '08', 'Sep': '09', 'Oct': '10', 'Nov': '11', 'Dec': '12'}\n    date = dt.split('-')\n    date[2] = '20' + date[2]\n    return '-'.join(date)\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    new_dt = re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)\n    return new_dt\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    \n    #y_m_d = [int(x) for x in dt.split('-')]\n    #print(y_m_d)\n    #return '-'.join([str(x) for x in y_m_d[::-1]])\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    N = len(my_list)\n    h = 1\n    while h < N/3:\n        h = 3*h + 1\n    while h >= 1:\n        for i in range(h,N):\n            j = i\n            while j >= h and my_list[j] < my_list[j-h]:\n                my_list[j],my_list[j-h] = my_list[j-h],my_list[j]\n                j -= h\n        h = int(h/3)\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    '''\n    The best position for a sorted array is the last element in the array.\n    The worst position is the first element in the array.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    if len(my_list) > 1:\n        h = len(my_list) // 2\n        while h > 0:\n            for i, el in enumerate(my_list[h:], h):\n                while i >= h and my_list[i] < my_list[i - h]:\n                    my_list[i], my_list[i - h] = my_list[i - h], my_list[i]\n                    i -= h\n            h = h // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list)//2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap//2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1\n    while h < n/3:\n        h = 3*h + 1\n    while h >= 1:\n        for i in range(h, n):\n            temp = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > temp:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = temp\n        h = int(h/3)\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list)//2\n    while gap > 0:\n        i = gap\n        while i < len(my_list):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n            i += 1\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    size = len(my_list)\n    gap = size / 2\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # We can actually use any gap sequence and time complexity is O(nlogn)\n    gaps = [701, 301, 132, 57, 23, 10, 4, 1]\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            j = i\n            while j >= gap and my_list[j] < my_list[j-gap]:\n                swap(my_list, j, j-gap)\n                j -= gap\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(map(operator.and_, test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    def tuple_and(tup1, tup2):\n        return tuple(zip(tup1,tup2))\n    return tuple_and(test_tup1, test_tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    \n    return tuple(a and b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return list(zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = []\n    for i in xrange(len(test_tup1)):\n        and_tup.append(test_tup1[i] and test_tup2[i])\n    return tuple(and_tup)\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in test_tup1:\n        for j in test_tup2:\n            result.append((i,j))\n    return result\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return [tup1[i] * tup2[i] for i in range(len(tup1))]\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    def element_wise_and_tuples(tup1, tup2):\n        return [tup1[i] & tup2[i] for i in range(len(tup1))]\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        yield tup1 and tup2\n    "
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    #directrix = -b / 2 * a\n    #return directrix\n    directrix = b / (2 * a)\n    return directrix\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # directrix = -b/(2*a)\n    # return directrix\n    # Use quadratic formula to find the 2 solutions\n    x1 = (-b + sqrt(b**2 - 4*a*c))/(2*a)\n    x2 = (-b - sqrt(b**2 - 4*a*c))/(2*a)\n    return x1, x2\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # https://en.wikipedia.org/wiki/Directrix#Computation\n    # directrix = 0.5 * b * c / a\n    # if directrix is not a number, i.e., directrix is a complex number, return None\n    # return directrix.real if isinstance(directrix, complex) else None\n    return 0.5 * b * c / a if (b*c)**2 > (4*a*a) else None\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = b**2 - 4 * a * c\n    if d < 0:\n        raise ValueError('parabola has no real roots')\n    elif d == 0:\n        x = (-b + d ** 0.5) / (2 * a)\n        return x\n    else:\n        x1 = (-b + d ** 0.5) / (2 * a)\n        x2 = (-b - d ** 0.5) / (2 * a)\n        return x1, x2\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return None\n    elif discriminant == 0:\n        return -b / (2*a)\n    else:\n        return (-b - sqrt(discriminant)) / (2*a), (-b + sqrt(discriminant)) / (2*a)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    #defining the coefficients\n    A = b**2 - 4*a*c\n    B = 2*a\n    C = -b\n    #if it is positive\n    if A > 0:\n        #find the distance from the line parallel to the x axis\n        y = (-B + sqrt(B**2 + 4*A)) / 2\n        x = -1*a*y/b\n        return [x, y]\n    #if it is negative\n    elif A < 0:\n        #find the distance from the line parallel to the x axis\n        y = (-B - sqrt(B**2 + 4*A)) / 2\n        x = -1*a*y/b\n        return [x, y]\n    #if it is equal to zero\n    elif A == 0:\n        #find the distance from the line parallel to the x axis\n        y = -1*b/2\n        x = -1*a*y/b\n        return [x, y]\n    \ndef parabola(a, b, c): \n    '''\n    Write a function to find the y value of the vertex of a parabola.\n    '''\n    #find the parabola's directrix\n    directrix = parabola_directrix(a, b, c)\n    #find the constant and x coefficient\n    x = directrix[0]\n    constant = directrix[1]\n    #find the y value of the vertex of the parabola\n    y = constant + b*x**2/2\n    return y\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # ab = b^2 - 4ac \n    return -b/(2*a)\n    \ndef parabola_vertex(a, b, c): \n    '''\n    Write a function to find the vertex of a parabola.\n    '''\n    return (b**2 - 4*a*c)**0.5\n    \ndef parabola_max_y(a, b, c):\n    '''\n    Write a function to find the maximum y-value for the equation of a parabola.\n    '''\n    return -b/(2*a)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if (b**2-4*a*c) < 0:\n        print(\"This equation has no real solution\")\n    else:\n        x1=(-b+math.sqrt(b**2-4*a*c))/(2*a)\n        x2=(-b-math.sqrt(b**2-4*a*c))/(2*a)\n        print(x1, x2)\nparabola_directrix(2, -6, -8)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = b*b/(4*a)\n    y = c*(a*a/(4*b) - 1)\n    return (x, y)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -b/(2*a)\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == len(list2):\n        list_set = set(list1)\n        list_set_2 = set(list2)\n        if list_set.intersection(list_set_2)!= set():\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    list1_dict = {}\n    for element in list1:\n        if element not in list1_dict:\n            list1_dict[element] = 1\n        else:\n            list1_dict[element] += 1\n    \n    list2_dict = {}\n    for element in list2:\n        if element not in list2_dict:\n            list2_dict[element] = 1\n        else:\n            list2_dict[element] += 1\n    \n    for key, value in list1_dict.iteritems():\n        if key in list2_dict:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(set(list1).intersection(list2)) > 0\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    if list1[0] in list2:\n        return True\n    return common_element(list1[1:], list2)\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for x in list1:\n        for y in list2:\n            if x == y:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_items = set(list1).intersection(set(list2))\n    if len(common_items) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 0.5*(base1+base2)*height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)*height/2\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 > height or base2 > height:\n        raise ValueError('Trapezium base length must be less than height')\n    return 1/2 * (base1 + base2) + height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 1/2 * (base1 + base2) * height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 0.5*base1*height+0.5*base2*height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    return ((base1+base2)/2)*height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 1.0*((base1+base2)*height)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    med_base = (base1+base2)/2\n    median = (med_base*height)/2\n    return median\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 1/2 * (base1 + base2 + height)\n    \nprint(median_trapezium(1,2,3))\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    number = 8\n    result = is_greater(arr, number)\n    assert result == False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for elem in arr:\n        if elem < number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return number > arr[-1]\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 1:\n        if arr[0] > number:\n            return True\n        else:\n            return False\n    else:\n        mid = len(arr) // 2\n        if arr[mid] > number:\n            return check_greater(arr[:mid], number)\n        else:\n            return check_greater(arr[mid:], number)\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element < number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i < number:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return arr[-1] < number\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0, len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    arr = arr.split(',')\n    return True if int(arr[0]) < number else False\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search('a.+b', text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.match(r'a+b', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    if re.match(pattern,text):\n        print(\"Match 1\")\n    else:\n        print(\"No match 1\")\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = re.compile('ab+')\n    return regex.search(text)\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab*')\n    if pattern.match(text):\n        return 'found a match'\n    else:\n        return 'no match'\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a(.*?)b')\n    match = pattern.match(text)\n    if match:\n        print(match.group(1))\n    else:\n        print('Match not found')\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #def text_match_one(text):\n    #    return re.match(r'a+[b]+',text)\n    return re.search(r'a+[b]+',text)\n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #def text_match_one(text):\n    #    return re.match(r'a+[b]+',text)\n    return re.search(r'a+[b]+',text)\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.match(r'a+b',text)\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'a+b',text)\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        print('found match!')\n    else:\n        print('not found match')\ntext_match_one('bbbab')\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # return n%10\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    import math\n    if n < 10 :\n        return n\n    elif n >= 10 :\n        return (n%10)\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    temp = n\n    while temp > 0:\n        temp /= 10\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    while n > 0 :\n        n = n // 10\n    return n\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = int(n)\n    while n > 0:\n        n = n // 10\n    return n\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = n % 10\n    return n\n    \ndef reverse_Digit(n) :\n    '''\n    Write a python function to reverse the digits of a given number.\n    '''\n    i = 0\n    rev_digits = 0\n    while n > 0 :\n        rev_digits = (rev_digits * 10) + last_Digit(n)\n        n = n // 10\n    return rev_digits\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x<0]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(filter(lambda x: x < 0, list1))\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [i for i in list1 if i < 0]\n    \ndef test_neg_nos():\n    assert neg_nos([1,2,3,4,-5]) == [-5]\n    assert neg_nos([2,3,4,-5]) == [-5]\n    assert neg_nos([2,-5,3,4,-5]) == [-5,2]\n    assert neg_nos([]) == []\n    print \"Negative nos test passed\"\n    \ntest_neg_nos()\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_nos = [i for i in list1 if i < 0]\n    return negative_nos\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [i for i in list1 if i < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos = []\n    for i in list1:\n        if i < 0:\n            neg_nos.append(i)\n    return neg_nos\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    new_list = []\n    for i in list1:\n        if i < 0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [-x for x in list1]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]\n    \n    \ndef odd_nos(list1):\n    '''\n    Write a python function to return the odd numbers in a list.\n    '''\n    return [x for x in list1 if x % 2!= 0]\n    \n    \ndef max_nos(list1):\n    '''\n    Write a python function to return the maximum number in a list.\n    '''\n    return max(list1)\n    \n    \ndef min_nos(list1):\n    '''\n    Write a python function to return the minimum number in a list.\n    '''\n    return min(list1)\n    \n    \ndef even_nos(list1):\n    '''\n    Write a python function to return the even numbers in a list.\n    '''\n    return [x for x in list1 if x % 2 == 0]\n    \n    \ndef sum_nos(list1):\n    '''\n    Write a python function to return the sum of all the numbers in a list.\n    '''\n    return sum(list1)\n    \n    \ndef avg_nos(list1):\n    '''\n    Write a python function to return the average of all the numbers in a list.\n    '''\n    return sum(list1)/len(list1)\n    \n    \ndef median_nos(list1):\n    '''\n    Write a python function to return the median of all the numbers in a list.\n    '''\n    sorted_list1 = sorted(list1)\n    if len(sorted_list1) % 2!= 0:\n        return sorted_list1[len(sorted_list1)/2]\n    else:\n        return (sorted_list1[len(sorted_list1)/2] + sorted_list1[len(sorted_list1)/2 - 1]) / 2\n    \n    \ndef mode_nos(list1):\n    '''\n    Write a python function to return the mode of all the numbers in a list.\n    '''\n    return max(list1, key=list1.count)\n    \n    \ndef mul_nos(list1):\n    '''\n    Write a python function to return the product of all the numbers in a list.\n    '''\n    return reduce(lambda x, y: x * y, list1)\n    \n    \ndef power_nos(list1):\n    '''\n    Write a python function to return the number raised to the power of a number in a list.\n    '''\n    return [x ** 2 for x in list1]\n    \n    \ndef inter_nos(list1, num):\n    '''\n    Write a python function to return the range of numbers between the first number and the second number in a list.\n    '''\n    return range(list1[0], list1[1])\n    \n    \ndef split_nos(list1, list2):\n    '''\n    Write a python function to split a list into two sublists.\n    '''\n    return [list1[:len(list1)/2], list1[len(list1)/2:]]\n    \n    \ndef concat_nos(list1, list2):\n    '''\n    Write a python function to concatenate two lists.\n    '''\n    return list1 + list2\n    \n    \ndef sort_nos(list1):\n    '''\n    Write a python function to sort the list in ascending order.\n    '''\n    list1.sort()\n    return list1\n    \n    \ndef reverse_nos(list1):\n    '''\n    Write a python function to reverse the list in ascending order.\n    '''\n    list1.reverse()\n    return list1\n    \n    \ndef max_index(list1):\n    '''\n    Write a python function to return the index of the maximum number in a list.\n    '''\n    return list1.index(max(list1))\n    \n    \ndef min_index(list1):\n    '''\n    Write a python function to return the index of the minimum number in a list.\n    '''\n    return list1.index(min(list1))\n    \n    \ndef remove_dup(list1):\n    '''\n    Write a python function to remove the duplicates in a list.\n    '''\n    return list(set(list1))\n    \n    \ndef add_digits(list1):\n    '''\n    Write a python function to add all the digits of a number and return the sum of the digits.\n    '''\n    digit_sum = 0\n    for i in list1:\n        digit_sum += sum(map(int, str(i)))\n    return digit_sum\n    \n    \ndef div_nos(list1, num):\n    '''\n    Write a python function to divide all the numbers in a list by a given number and return the result.\n    '''\n    return [x / num for x in list1]\n    \n    \ndef add_evens(list1):\n    '''\n    Write a python function to add all the even numbers in a list and return the sum of the numbers.\n    '''\n    even_sum = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_sum += i\n    return even_sum\n    \n    \ndef main():\n    list1 = []\n    num = int(input(\"Enter the number of elements in the list: \"))\n    for i in range(num):\n        list1.append(int(input(\"Enter the element %d of the list: \" % (i + 1))))\n    \n    print(\"List 1:\", list1)\n    \n    print(\"List 1 length:\", len(list1))\n    \n    print(\"Negative numbers:\", neg_nos(list1))\n    \n    print(\"Odd numbers:\", odd_nos(list1))\n    \n    print(\"Max number:\", max_nos(list1))\n    \n    print(\"Min number:\", min_nos(list1))\n    \n    print(\"Even numbers:\", even_nos(list1))\n    \n    print(\"Sum of all numbers:\", sum_nos(list1))\n    \n    print(\"Average of all numbers:\", avg_nos(list1))\n    \n    print(\"Median of all numbers:\", median_nos(list1))\n    \n    print(\"Mode of all numbers:\", mode_nos(list1))\n    \n    print(\"Product of all numbers:\", mul_nos(list1))\n    \n    print(\"Number raised to the power of 2:\", power_nos(list1))\n    \n    print(\"Range of numbers:\", inter_nos(list1, -2))\n    \n    print(\"Splitting into two lists:\", split_nos(list1, [3, 5]))\n    \n    print(\"Concatenating two lists:\", concat_nos([4, 5, 6], [7, 8]))\n    \n    print(\"Sorting the list:\", sort_nos(list1))\n    \n    print(\"Reversing the list:\", reverse_nos(list1))\n    \n    print(\"Index of the maximum number:\", max_index(list1))\n    \n    print(\"Index of the minimum number:\", min_index(list1))\n    \n    print(\"List after removing duplicates:\", remove_dup(list1))\n    \n    print(\"Sum of all even numbers in the list:\", add_evens(list1))\n    \n    print(\"Divide all numbers in the list by 2:\", div_nos(list1, 2))\n    \n    print(\"Add all even numbers in the list:\", add_evens(list1))\n    \n    \nif __name__ == \"__main__\":\n    main()\n    \n    \n'''\n    \n    \n    Expected output:\n    \n    \n    \n    Enter the number of elements in the list: 5\n    Enter the element 1 of the list: 3\n    Enter the element 2 of the list: 4\n    Enter the element 3 of the list: 5\n    Enter the element 4 of the list: 6\n    Enter the element 5 of the list: 7\n    \n    List 1: [3, 4, 5, 6, 7]\n    \n    List 1 length: 5\n    \n    Negative numbers: [3, 4, -5, -6, -7]\n    \n    Odd numbers: [1, 5, 3, 7]\n    \n    Max number: 7\n    \n    Min number: -7\n    \n    Even numbers: [-2, -4, 0, 6]\n    \n    Sum of all numbers: 21"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Convert string to list\n    lst = list(str1)\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    #new_str = ''\n    #for ch in str1:\n    #    if ch not in 'aeiouAEIOU':\n    #        new_str += ch\n    #return new_str\n    return ''.join([ch for ch in str1 if ch not in 'aeiouAEIOU'])\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    list1 = []\n    for i in str1:\n        if ord(i) % 2 == 0:\n            list1.append(i)\n    print ''.join(list1)\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if i%2 == 0:\n            new_str = new_str + str1[i]\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = ''.join(filter(lambda x: x % 2 == 0, str1))\n    return str1\n    \ndef reverse(str1):\n    '''\n    Write a function that accepts a string and returns the string in reverse order.\n    '''\n    return str1[::-1]\n    \ndef reverse_words(str1):\n    '''\n    Write a function that takes a string as input and returns the string with the words in reverse order.\n    '''\n    str1 = reverse(str1)\n    words = str1.split(' ')\n    return''.join(words[::-1])\n    \ndef reverse_words2(str1):\n    '''\n    Write a function that takes a string and returns the string with the words in reverse order.\n    '''\n    return''.join(s[::-1] for s in str1.split())\n    \ndef longest_word(str1):\n    '''\n    Write a function that takes a string and returns the length of the longest word in the string.\n    '''\n    words = str1.split(' ')\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n    \ndef longest_word2(str1):\n    '''\n    Write a function that takes a string and returns the length of the longest word in the string.\n    '''\n    words = str1.split(' ')\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n    \ndef count_words(str1):\n    '''\n    Write a function that takes a string and returns the number of words in the string.\n    '''\n    return len(str1.split(' '))\n    \ndef count_words2(str1):\n    '''\n    Write a function that takes a string and returns the number of words in the string.\n    '''\n    return len(str1.split())\n    \ndef palindrome(str1):\n    '''\n    Write a function that takes a string and returns True if the string is a palindrome and False if it is not.\n    '''\n    return str1 == str1[::-1]\n    \ndef palindrome2(str1):\n    '''\n    Write a function that takes a string and returns True if the string is a palindrome and False if it is not.\n    '''\n    return str1[::-1] == str1\n    \ndef only_vowels(str1):\n    '''\n    Write a function that takes a string and returns a string with all the vowels removed.\n    '''\n    return ''.join(filter(lambda x: x.lower() not in 'aeiou', str1))\n    \ndef only_vowels2(str1):\n    '''\n    Write a function that takes a string and returns a string with all the vowels removed.\n    '''\n    vowels = set('aeiou')\n    return ''.join(filter(lambda x: x.lower() not in vowels, str1))\n    \ndef rotate(str1):\n    '''\n    Write a function that takes a string as input and returns the string with the first letter of each word reversed.\n    '''\n    return''.join(word[::-1] for word in str1.split())\n    \ndef rotate2(str1):\n    '''\n    Write a function that takes a string as input and returns the string with the first letter of each word reversed.\n    '''\n    return''.join(word[::-1] for word in str1.split())\n    \ndef capitalize_words(str1):\n    '''\n    Write a function that takes a string and returns a string with the first letter of each word capitalized.\n    '''\n    return''.join(word.capitalize() for word in str1.split())\n    \ndef capitalize_words2(str1):\n    '''\n    Write a function that takes a string and returns a string with the first letter of each word capitalized.\n    '''\n    return''.join(word.capitalize() for word in str1.split())\n    \ndef encrypt(str1, num):\n    '''\n    Write a function that takes a string and a number and returns the string with every letter in the alphabet shifted num letters.\n    '''\n    letters = set('abcdefghijklmnopqrstuvwxyz')\n    encrypt = ''\n    for letter in str1:\n        if letter in letters:\n            encrypt += chr((ord(letter) + num - ord('a')) % 26 + ord('a'))\n        else:\n            encrypt += letter\n    return encrypt\n    \ndef encrypt2(str1, num):\n    '''\n    Write a function that takes a string and a number and returns the string with every letter in the alphabet shifted num letters.\n    '''\n    return encrypt(str1, num)\n    \ndef encrypt3(str1, num):\n    '''\n    Write a function that takes a string and a number and returns the string with every letter in the alphabet shifted num letters.\n    '''\n    letters = set('abcdefghijklmnopqrstuvwxyz')\n    encrypt = ''\n    for letter in str1:\n        if letter in letters:\n            encrypt += chr((ord(letter) + num - ord('a')) % 26 + ord('a'))\n        else:\n            encrypt += letter\n    return encrypt\n    \ndef encrypt4(str1, num):\n    '''\n    Write a function that takes a string and a number and returns the string with every letter in the alphabet shifted num letters.\n    '''\n    return encrypt(str1, num)\n    \ndef encrypt5(str1, num):\n    '''\n    Write a function that takes a string and a number and returns the string with every letter in the alphabet shifted num letters.\n    '''\n    letters = set('abcdefghijklmnopqrstuvwxyz')\n    encrypt = ''\n    for letter in str1:\n        if letter in letters:\n            encrypt += chr((ord(letter) + num - ord('a')) % 26 + ord('a'))\n        else:\n            encrypt += letter\n    return encrypt\n    \ndef encrypt6(str1, num):\n    '''\n    Write a function that takes a string and a number and returns the string with every letter in the alphabet shifted num letters.\n    '''\n    letters = set('abcdefghijklmnopqrstuvwxyz')\n    encrypt = ''\n    for letter in str1:\n        if letter in letters:\n            encrypt += chr((ord(letter) + num - ord('a')) % 26 + ord('a'))\n        else:\n            encrypt += letter\n    return encrypt\n    \ndef caesar_encrypt(str1, num):\n    '''\n    Write a function that takes a string and a number and returns the string with every letter in the alphabet shifted num letters.\n    '''\n    letters = set('abcdefghijklmnopqrstuvwxyz')\n    encrypt = ''\n    for letter in str1:\n        if letter in letters:\n            encrypt += chr((ord(letter) + num - ord('a')) % 26 + ord('a'))\n        else:\n            encrypt += letter\n    return encrypt\n    \ndef caesar_encrypt2(str1, num):\n    '''\n    Write a function that takes a string and a number and returns the string with every letter in the alphabet shifted num letters.\n    '''\n    letters = set('abcdefghijklmnopqrstuvwxyz')\n    encrypt = ''\n    for letter in str1:\n        if letter in letters:\n            encrypt += chr((ord(letter) + num - ord('a')) % 26 + ord('a'))\n        else:\n            encrypt += letter\n    return encrypt\n    \ndef caesar_encrypt3(str1, num):\n    '''\n    Write a function that takes a string and a number and returns the string with every letter in the alphabet shifted num letters.\n    '''\n    letters = set('abcdefghijklmnopqrstuvwxyz')\n    encrypt = ''\n    for letter in str1:\n        if letter in letters:\n            encrypt += chr((ord(letter) + num - ord('a')) "
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in range(len(str1)):\n        if ord(str1[i])%2==1:\n            str1 = str1[:i]+str1[i+1:]\n            break\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(str1.split(' ')[::2])\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in range(0,len(str1)):\n        if i%2==0:\n            print(str1[i],end='')\n    print('\\n')\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if str1:\n        res = ''\n        for i in range(len(str1)):\n            if not i % 2:\n                res += str1[i]\n        return res\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if i%2==0:\n            str2 += str1[i]\n    return str2\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return len([i for i in combinations(test_list,2) if i[0]>i[1]])\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    unique = set(test_list)\n    return sum([(x,y) in test_list for x in unique for y in unique])\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    total = 0\n    for x in test_list:\n        for y in test_list:\n            if x[0] < y[0] and x[1] < y[1]:\n                total += 1\n    return total\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        if (test_list[i],test_list[i+1]) in ((test_list[i+1],test_list[i]),(test_list[i],test_list[i+1])):\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if (test_list[i],test_list[j]) in test_list[:j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    result = 0\n    for x, y in test_list:\n        if x > y:\n            result += 1\n        elif x < y:\n            result += 1\n    return result\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    forward = 0\n    backward = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j]:\n                forward += 1\n            elif test_list[i] == test_list[j][::-1]:\n                backward += 1\n    return forward+backward\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    d = {}\n    for i in test_list:\n        d[i] = 1\n    #print d\n    count = 0\n    for i in d.keys():\n        for j in d.keys():\n            if (i,j) in d and (j,i) in d:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i][1] == test_list[j][0]:\n                return 1\n    return 0\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    from collections import defaultdict\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(x) for x in L))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if type(L)==int:\n        return L\n    elif type(L)==list:\n        return int(''.join(map(str, L)))\n    else:\n        return 'Input must be a list or an int'\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    return int(''.join([str(x) for x in L]))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str, L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    pass\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # pass\n    ret = 0\n    for i in L:\n        ret *= 10\n        ret += i\n    return ret\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    res = 0\n    for i in range(0, len(L)):\n        res = res*10 + L[i]\n    return res\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return None\n    elif len(L) == 1:\n        return L[0]\n    else:\n        return int(\"\".join([str(elem) for elem in L]))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str,L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for elem in L:\n        result = result * 10 + elem\n    return result\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.lower()\n    text = re.sub(r'[^\\w]','', text)\n    positions = {}\n    for word in text.split():\n        if word in ['and', 'then', 'or','so', 'if', 'because', 'if', 'only']:\n            positions[word] = text.find(word)\n    return positions\n    \ndef find_adverb(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.lower()\n    text = re.sub(r'[^\\w]','', text)\n    positions = {}\n    for word in text.split():\n        if word in ['and', 'then', 'or','so', 'if', 'because', 'if', 'only']:\n            positions[word] = text.find(word)\n    return positions\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    return re.findall(r'\\b(very|more|most|many|much|many)\\b', text)\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    word_list = re.split(\"[,\\s]\",text)\n    adverb_list = []\n    for word in word_list:\n        if re.search(\"r\\w+\", word):\n            adverb_list.append(word)\n    if adverb_list:\n        return adverb_list\n    else:\n        return None\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #initialize pos_list\n    pos_list = []\n    #count the number of adverb\n    adverb_count = 0\n    #find the first adverb position\n    for position, ch in enumerate(text):\n        if ch == 'a' or ch == 'A' or ch == 'e' or ch == 'E' or ch == 'i' or ch == 'I' or ch == 'o' or ch == 'O' or ch == 'u' or ch == 'U':\n            adverb_count += 1\n            pos_list.append(position)\n    #find the last adverb position\n    for position, ch in enumerate(reversed(text)):\n        if ch == 'a' or ch == 'A' or ch == 'e' or ch == 'E' or ch == 'i' or ch == 'I' or ch == 'o' or ch == 'O' or ch == 'u' or ch == 'U':\n            adverb_count += 1\n            pos_list.append(position)\n    if adverb_count % 2 == 0:\n        return pos_list[:adverb_count/2]\n    else:\n        return pos_list[(adverb_count-1)/2:(adverb_count+1)/2]\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    if text.find(\"and\")>0:\n        pos=text.find(\"and\")\n    else:\n        pos=-1\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = re.findall(r'(?<=[\\.\\?!] )[A-Z]{2,}(?=[\\.,\\;])', text)\n    return result\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb = re.findall(r'\\b[a-z]+\\b',text)\n    positions = []\n    for item in adverb:\n        positions.append(text.index(item))\n    return positions\n    \ntext = 'I have a dog. She is good. The dog is cute.'"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    list_of_adverbs = []\n    positions_of_adverbs = []\n    for i in range(0, len(text)):\n        if text[i].lower() == 'r':\n            positions_of_adverbs.append(i)\n            list_of_adverbs.append(text[i:])\n    return list_of_adverbs, positions_of_adverbs\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pos_list = []\n    result = re.search(r'\\b(?:can|could|would|will|would|should)\\b', text, re.IGNORECASE)\n    if result:\n        pos = result.start()\n        pos_list.append(pos)\n        pos += 1\n    result = re.search(r'\\b(?:will|would|can|could)\\b', text, re.IGNORECASE)\n    if result:\n        pos = result.start()\n        pos_list.append(pos)\n        pos += 1\n    result = re.search(r'\\b(?:have|had|had|having|may|might|might|must)\\b', text, re.IGNORECASE)\n    if result:\n        pos = result.start()\n        pos_list.append(pos)\n        pos += 1\n    result = re.search(r'\\b(?:has|had|had|having|might|might|must)\\b', text, re.IGNORECASE)\n    if result:\n        pos = result.start()\n        pos_list.append(pos)\n        pos += 1\n    result = re.search(r'\\b(?:has|had|had|having|might|might|must)\\b', text, re.IGNORECASE)\n    if result:\n        pos = result.start()\n        pos_list.append(pos)\n        pos += 1\n    result = re.search(r'\\b(?:may|might)\\b', text, re.IGNORECASE)\n    if result:\n        pos = result.start()\n        pos_list.append(pos)\n        pos += 1\n    result = re.search(r'\\b(?:might|must)\\b', text, re.IGNORECASE)\n    if result:\n        pos = result.start()\n        pos_list.append(pos)\n        pos += 1\n    result = re.search(r'\\b(?:will|would|can|could)\\b', text, re.IGNORECASE)\n    if result:\n        pos = result.start()\n        pos_list.append(pos)\n        pos += 1\n    result = re.search(r'\\b(?:will|would|can|could)\\b', text, re.IGNORECASE)\n    if result:\n        pos = result.start()\n        pos_list.append(pos)\n        pos += 1\n    return pos_list\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    regex = '(\\w+)(\\s)(\\d+)(\\D+)(\\s)(\\d+)(\\D+)(\\s)(\\w+)'\n    result = re.search(regex, text)\n    return result.groups()\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    \n    if l <= 0:\n        return 0\n    return 6 * l ** 2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l ** 2)\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # return 6*l**2\n    return 6*l**2\n    \ndef surfacearea_pyramid(l):\n    '''\n    Write a function to find the surface area of a pyramid of a given size.\n    '''\n    # return 3*l**2\n    return 3*l**2\n    \ndef surfacearea_sphere(l):\n    '''\n    Write a function to find the surface area of a sphere of a given size.\n    '''\n    # return 4*pi*r**2\n    return 4*pi*l**2\n    \ndef surfacearea_prism(l):\n    '''\n    Write a function to find the surface area of a prism of a given size.\n    '''\n    # return l**2 + l**2 + l**2\n    return 2*l**2\n    \ndef surfacearea_pyramid(l):\n    '''\n    Write a function to find the surface area of a pyramid of a given size.\n    '''\n    # return l**2 + l**2 + l**2\n    return 2*l**2\n    \ndef surfacearea_fractal(l):\n    '''\n    Write a function to find the surface area of a fractal of a given size.\n    '''\n    # return l**2 + l**2 + l**2\n    return 2*l**2\n    \ndef surfacearea_cuboid(l,b,h):\n    '''\n    Write a function to find the surface area of a cuboid of a given size.\n    '''\n    # return 2*(l*b + l*h + b*h)\n    return 2*(l*b + l*h + b*h)\n    \ndef surfacearea_spherical(r):\n    '''\n    Write a function to find the surface area of a sphere of a given radius.\n    '''\n    # return 4*pi*r**2\n    return 4*pi*r**2\n    \ndef surfacearea_cylindrical(r,h):\n    '''\n    Write a function to find the surface area of a cylindrical tube of a given radius and height.\n    '''\n    # return pi*r*(r + h)\n    return pi*r*(r + h)\n    \ndef surfacearea_spherical(r):\n    '''\n    Write a function to find the surface area of a sphere of a given radius.\n    '''\n    # return 4*pi*r**2\n    return 4*pi*r**2\n    \ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone of a given radius and height.\n    '''\n    # return pi*r*(r + h)\n    return pi*r*(r + h)\n    \ndef surfacearea_hexahedron(r):\n    '''\n    Write a function to find the surface area of a hexahedron of a given radius.\n    '''\n    # return 4*pi*r**2\n    return 4*pi*r**2\n    \ndef surfacearea_tetrahedron(r):\n    '''\n    Write a function to find the surface area of a tetrahedron of a given radius.\n    '''\n    # return 4*pi*r**2\n    return 4*pi*r**2\n    \ndef surfacearea_dodecahedron(r):\n    '''\n    Write a function to find the surface area of a dodecahedron of a given radius.\n    '''\n    # return 12*pi*r**2\n    return 12*pi*r**2\n    \ndef surfacearea_dodecahedron(r):\n    '''\n    Write a function to find the surface area of a dodecahedron of a given radius.\n    '''\n    # return 12*pi*r**2\n    return 12*pi*r**2\n    \ndef surfacearea_icosahedron(r):\n    '''\n    Write a function to find the surface area of an icosahedron of a given radius.\n    '''\n    # return 5*pi*r**2\n    return 5*pi*r**2\n    \ndef surfacearea_dodecagon(l):\n    '''\n    Write a function to find the surface area of a dodecagon of a given length.\n    '''\n    # return l*(l + l + l)\n    return l*(l + l + l)\n    \ndef surfacearea_octagon(l):\n    '''\n    Write a function to find the surface area of an octagon of a given length.\n    '''\n    # return l*(l + l + l)\n    return l*(l + l + l)\n    \ndef surfacearea_triangle(l):\n    '''\n    Write a function to find the surface area of a triangle of a given length.\n    '''\n    # return l*(l - 1)/2\n    return l*(l - 1)/2\n    \ndef surfacearea_triangulo(l):\n    '''\n    Write a function to find the surface area of a triangular prism of a given length.\n    '''\n    # return l*(l - 1)/2\n    return l*(l - 1)/2\n    \ndef surfacearea_triangle(l):\n    '''\n    Write a function to find the surface area of a triangular prism of a given length.\n    '''\n    # return l*(l - 1)/2\n    return l*(l - 1)/2\n    \ndef surfacearea_trapezoid(l,b,h):\n    '''\n    Write a function to find the surface area of a triangular trapzoid of a given length, base, height.\n    '''\n    # return l*(l + l + b + h)\n    return l*(l + l + b + h)\n    \ndef surfacearea_trapezoid(l,b,h):\n    '''\n    Write a function to find the surface area of a triangular trapzoid of a given length, base, height.\n    '''\n    # return l*(l + l + b + h)\n    return l*(l + l + b + h)\n    \ndef surfacearea_kite(l,h,h_f):\n    '''\n    Write a function to find the surface area of a triangular kite of a given length, height, and height to the first face.\n    '''\n    # return 2*h*(l + l + h) + 2*h_f*l*h\n    return 2*h*(l + l + h) + 2*h_f*l*h\n    \ndef surfacearea_kite(l,h,h_f):\n    '''\n    Write a function to find the surface area of a triangular kite of a given length, height, and height to the first face.\n    '''\n    # return 2*h*(l + l + h) + 2*h_f*l*h\n    return 2*h*(l + l + h) + 2*h_f*l*h\n    \ndef surfacearea_kite(l,h,h_f):\n    '''\n    Write a function to find the surface area of a triangular kite of a given length, height, and height to the first face.\n    '''\n    # return 2*h*(l + l + h) + 2*h_f*l*h\n    return 2*h*(l + l + h) + 2*h_f*l*h\n    \ndef surfacearea_kite(l,h,h_f):\n    '''\n    Write a function to find the surface area of a triangular kite of a given length, height, and height to the first face.\n    '''\n    # return 2*h*(l + l + h) + 2*h_f*l*h\n    return 2*h*(l + l + h) + 2*h_f*l*h\n    \ndef surfacearea_conical_shell(r,h):\n    '''\n    Write a function to find the surface area of a conical shell of a given radius and height.\n    '''\n    # return 2*pi*r*(r + h)\n    return 2*pi*r*(r + h)\n    \ndef surfacearea_conical_shell(r,h):\n    '''\n    Write a function to find the surface area of a conical shell of a given radius and height.\n    '''\n    # return 2*pi*r*(r + h)\n    return 2*pi*r*(r "
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 6 * (l ** 2)\n    return s\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    total = 0\n    for num in nums:\n        if num > 0:\n            total += 1\n    return total/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / float(len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    count = 0\n    for i in nums:\n        if i > 0:\n            positive += 1\n    count = positive / len(nums)\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/float(len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    negative = 0\n    for i in range(0, len(nums)):\n        if nums[i] > 0:\n            positive = positive + 1\n        else:\n            negative = negative + 1\n    print \"Positive: \", float(positive) / float(len(nums))\n    print \"Negative: \", float(negative) / float(len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    nums = array('i', nums)\n    count = 0\n    for x in nums:\n        if x > 0:\n            count += 1\n    return count/float(len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # We are getting the total of all the elements in the array\n    n = 0\n    for x in nums:\n        n += x\n    # To see if all elements in the array are positive\n    if n == 0:\n        return 0\n    # Counting the number of positive elements\n    count = 0\n    for x in nums:\n        if x > 0:\n            count += 1\n    # Returning the ratio\n    return count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return sum(n > 0 for n in nums) / float(len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos = 0\n    for num in nums:\n        if num > 0:\n            pos += 1\n    return pos/float(len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    \n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return float(count) / len(nums)\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max=list1[0]\n    for i in list1:\n        if i<0 and i>max:\n            max=i\n    return max\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    result = max(list1)\n    return result\n    \ndef smallest_neg(list1): \n    '''\n    Write a python function to find the smallest negative number from the given list.\n    '''\n    result = min(list1)\n    return result\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list2=sorted(list1)\n    list3=[]\n    for i in list2:\n        if i < 0:\n            list3.append(i)\n    return list3[-1]\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # Approach 1 : Take 1st element from the list and compare it with all other elements from the list\n    # approach = 1\n    if list1[0] < 0:\n        return list1[0]\n    for i in range(1,len(list1)):\n        if list1[i] < 0 and list1[i] > list1[0]:\n            return list1[i]\n        else:\n            pass\n    return None\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -999999999\n    for element in list1:\n        if element < max_neg:\n            max_neg = element\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort()\n    list1.reverse()\n    for x in list1:\n        if x < 0:\n            return x\n    return None\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = -1\n    for num in list1:\n        if num < 0 and num > max:\n            max = num\n    return max\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    #First we need to sort the list\n    list1.sort()\n    #If we have an empty list, we return none\n    if list1 == []:\n        return None\n    #Otherwise we return the largest negative number\n    else:\n        return list1[0]\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    \n    if len(list1)==0:\n        return None\n    \n    if len(list1)==1:\n        if list1[0]<0:\n            return list1[0]\n        else:\n            return None\n    \n    list2 = []\n    for i in list1:\n        if i>=0:\n            list2.append(i)\n    \n    return max(list2)\n    \ndef reverse_words(list1): \n    '''\n    Write a python function to reverse the given list of words.\n    '''\n    \n    if len(list1)==0:\n        return []\n    \n    if len(list1)==1:\n        return list1\n    \n    list2 = []\n    for i in list1:\n        list2.append(i)\n        \n    list2.reverse()\n    \n    i = 0\n    j = 0\n    new_list2 = []\n    \n    for j in range(len(list1)):\n        if j%2==0:\n            new_list2.append(list2[i])\n            i+=1\n        else:\n            new_list2.append(list2[j])\n    \n    return new_list2\n    \ndef add_up(list1):\n    '''\n    Write a python function to add up all the elements from the given list.\n    '''\n    if len(list1)==0:\n        return 0\n    return sum(list1)\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    n = len(list1)\n    max1 = -99999\n    for i in range(n):\n        if list1[i] < max1 and list1[i] > -9999:\n            max1 = list1[i]\n    return max1\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(a, b[:K]) for a, b in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for item in test_list:\n        if len(item) < K:\n            new_list.append(item)\n        else:\n            new_list.append(item[:K])\n    return new_list\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = list(test_list)\n    for i in range(len(test_list)):\n        if len(new_list[i]) > K:\n            new_list[i] = new_list[i][:K]\n    return new_list\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for a in range(0,len(test_list)):\n        test_list[a] = test_list[a][0:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    def trim(test_list, K):\n        while len(test_list) > K:\n            test_list = test_list[1:]\n        return test_list\n    return [trim(tup, K) for tup in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    assert(K > 0)\n    trim_tuple_list = [t[:K] for t in test_list]\n    return trim_tuple_list\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in test_list:\n        i = i[:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    ret_list = []\n    for tup in test_list:\n        ret_list.append(tup[:K])\n    return ret_list\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [x[:K] for x in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple([test_tup1[i]*test_tup2[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i]*test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    numbers_to_multiply = [test_tup1[i] * test_tup2[i] for i in range(len(test_tup1))]\n    return numbers_to_multiply\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    res = []\n    for i in range(len(test_tup1)):\n        res.append(test_tup1[i]*test_tup2[i])\n    return tuple(res)\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = tuple(x*y for x,y in zip(test_tup1, test_tup2))\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    i = 0\n    res = ()\n    while i < len(test_tup1):\n        res = res + (test_tup1[i] * test_tup2[i],)\n        i = i + 1\n    return res\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    output = []\n    i = 0\n    j = 0\n    while i < len(test_tup1) and j < len(test_tup2):\n        output.append(test_tup1[i]*test_tup2[j])\n        i += 1\n        j += 1\n    return output\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return [ele1 * ele2 for (ele1, ele2) in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    a1 = test_tup1[0]\n    b1 = test_tup1[1]\n    a2 = test_tup2[0]\n    b2 = test_tup2[1]\n    res = [a1*a2, b1*b2]\n    return res\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    print 'Test 1 Tuple: ', test_tup1\n    print 'Test 2 Tuple: ', test_tup2\n    print 'Index wise multiplication of above tuple elements: '\n    for i in range(len(test_tup1)):\n        print test_tup1[i]*test_tup2[i]\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = 0\n    for val in tup:\n        if val in lst:\n            cnt = cnt + 1\n    return cnt \n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(tup) & Counter(lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum(1 for elem in lst if tup.count(elem) > 0)\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return tup.count(lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return tup.count(lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # for i in tup:\n    #     count = lst.count(i)\n    #     print count, i\n    return Counter(tup)\ndef count_Occurrence_dict(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    temp = {}\n    for i in tup:\n        if i not in temp:\n            temp[i] = lst.count(i)\n    return temp\ndef reverse_tuple(tup):\n    '''\n    Write a python function to reverse the tuple in a list.\n    '''\n    return tup[::-1]\ndef reverse_list(lst):\n    '''\n    Write a python function to reverse the list in a tuple.\n    '''\n    return lst[::-1]\ndef join_tuple(tup, str1):\n    '''\n    Write a python function to join the tuple in a list.\n    '''\n    return str1.join(tup)\ndef remove_last_duplicate(tup):\n    '''\n    Write a python function to remove the last duplicate element from the tuple in a list.\n    '''\n    return tuple(set(tup))\ndef remove_last_duplicate_dict(tup):\n    '''\n    Write a python function to remove the last duplicate element from the tuple in a list.\n    '''\n    temp = {}\n    for i in tup:\n        if i not in temp:\n            temp[i] = 1\n    return tuple(temp.keys())\ndef list_to_tuple(lst):\n    '''\n    Write a python function to convert list to tuple\n    '''\n    return tuple(lst)\ndef add_tuple(tup1, tup2):\n    '''\n    Write a python function to add the tuple in a list.\n    '''\n    return tuple(x+y for x, y in zip(tup1, tup2))\ndef max_sub_list(lst):\n    '''\n    Write a python function to find the maximum sub list of a list.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if lst[i:j+1] == max(lst[i:j+1], key=len):\n                max_length = len(lst[i:j+1])\n    return max_length\ndef print_digits(n):\n    '''\n    Write a python function to print the digits of a number.\n    '''\n    if n < 10:\n        return n\n    return print_digits(n // 10) * 10 + n % 10\ndef swap_pair_element(lst):\n    '''\n    Write a python function to swap the pair element in a list.\n    '''\n    for i in range(0, len(lst), 2):\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n    return lst\ndef swap_pair_element_2(lst):\n    '''\n    Write a python function to swap the pair element in a list.\n    '''\n    lst[0], lst[1] = lst[1], lst[0]\n    return lst\ndef swap_pair_element_dict(dic):\n    '''\n    Write a python function to swap the pair element in a dictionary.\n    '''\n    for i in dic:\n        dic[i[0]], dic[i[1]] = dic[i[1]], dic[i[0]]\n    return dic\ndef get_list_product(lst):\n    '''\n    Write a python function to get the product of all the elements of a list.\n    '''\n    return reduce(lambda x, y: x * y, lst)\ndef get_list_product_2(lst):\n    '''\n    Write a python function to get the product of all the elements of a list.\n    '''\n    temp = 1\n    for i in lst:\n        temp *= i\n    return temp\ndef get_list_product_3(lst):\n    '''\n    Write a python function to get the product of all the elements of a list.\n    '''\n    return reduce(lambda x, y: x * y, lst)\ndef get_list_product_4(lst):\n    '''\n    Write a python function to get the product of all the elements of a list.\n    '''\n    return reduce(lambda x, y: x * y, lst)\ndef get_list_product_5(lst):\n    '''\n    Write a python function to get the product of all the elements of a list.\n    '''\n    temp = 1\n    for i in lst:\n        temp *= i\n    return temp\ndef sum_of_digits(n):\n    '''\n    Write a python function to sum of all the digits of a number.\n    '''\n    return sum(int(i) for i in str(n))\ndef sum_of_digits_2(n):\n    '''\n    Write a python function to sum of all the digits of a number.\n    '''\n    return sum(int(i) for i in str(n))\ndef sum_of_digits_3(n):\n    '''\n    Write a python function to sum of all the digits of a number.\n    '''\n    return sum(int(i) for i in str(n))\ndef sum_of_digits_4(n):\n    '''\n    Write a python function to sum of all the digits of a number.\n    '''\n    return sum(int(i) for i in str(n))\ndef sum_of_digits_5(n):\n    '''\n    Write a python function to sum of all the digits of a number.\n    '''\n    return sum(int(i) for i in str(n))\ndef sum_of_digits_6(n):\n    '''\n    Write a python function to sum of all the digits of a number.\n    '''\n    return sum(int(i) for i in str(n))\ndef sum_of_digits_7(n):\n    '''\n    Write a python function to sum of all the digits of a number.\n    '''\n    return sum(int(i) for i in str(n))\ndef sum_of_digits_8(n):\n    '''\n    Write a python function to sum of all the digits of a number.\n    '''\n    return sum(int(i) for i in str(n))\ndef sum_of_digits_9(n):\n    '''\n    Write a python function to sum of all the digits of a number.\n    '''\n    return sum(int(i) for i in str(n))\ndef sum_of_digits_10(n):\n    '''\n    Write a python function to sum of all the digits of a number.\n    '''\n    return sum(int(i) for i in str(n))\ndef sum_of_digits_11(n):\n    '''\n    Write a python function to sum of all the digits of a number.\n    '''\n    return sum(int(i) for i in str(n))\ndef sum_of_digits_12(n):\n    '''\n    Write a python function to sum of all the digits of a number.\n    '''\n    return sum(int(i) for i in str(n))\ndef sum_of_digits_13(n):\n    '''\n    Write a python function to sum of all the digits of a number.\n    '''\n    return sum(int(i) for i in str(n))\ndef sum_of_digits_14(n):\n    '''\n    Write a python function to sum of all the digits of a number.\n    '''\n    return sum(int(i) for i in str(n))\ndef sum_of_digits_15(n):\n    '''\n    Write a python function to sum of all the digits of a number.\n    '''\n    return sum(int(i) for i in str(n))\ndef sum_of_digits_16(n):\n    '''\n    Write a python function to sum of al"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup = tuple(lst) \n    count = 0\n    for i in tup: \n        if i in lst: \n            count = count + 1\n    return count \n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst1 = [] \n    for i in tup: \n        for j in lst: \n            if i == j: \n                lst1.append(i) \n    return Counter(lst1) \n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(tup) & Counter(lst)"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return list(map(lambda x: x**3, nums))\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**3)\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_nums = []\n    for num in nums:\n        cube_nums.append(num**3)\n    return cube_nums\n    \nprint cube_nums([1, 2, 3, 4])\nprint cube_nums([3, 4, 5])\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    output = []\n    for num in nums:\n        output.append(num**3)\n    return output\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return cal_sum(n - 1) + cal_sum(n - 2)\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    i = 1\n    s = 0\n    while i<n:\n        s += i\n        i += 2\n    return s\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n < 0:\n        return\n    elif n == 0:\n        return 0\n    else:\n        return n + cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    i = 0\n    k = 0\n    while i < n:\n        i += 1\n        k += i\n    return k\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n==1:\n        return 1\n    else:\n        return n + cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum=0\n    for i in range(1,n):\n        if i%2==0:\n            sum+=4*i*(4*i-1)\n        else:\n            sum+=2*i*(2*i-1)\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return 2*n+1\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    res = 0\n    n = int(n)\n    while n > 0:\n        res += (n%10)\n        n = n//10\n    return res\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_num = 0\n    for i in range(1, n+1):\n        sum_num += i*(3*i-1)/2\n    return sum_num\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    def sum_n(n):\n        return n**2 + n\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for each in l:\n        str += each\n    return str\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    l = l[:l]\n    if len(l) == 0:\n        return\n    elif len(l) == 1:\n        print(l[0])\n    else:\n        print(l[0], l[-1])\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    s = \"\"\n    for i in range(0, l):\n        s = s + str[i]\n    return s\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l == 0:\n        return \"No such string\"\n    else:\n        result = []\n        for i in range(l):\n            result.append(str[i])\n        return result\n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    length = len(str)\n    for i in range(length):\n        yield str[i:i+l]\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for s in l:\n        result.append(s[:l])\n    return result\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    str_list = []\n    for item in l:\n        if len(item) == l:\n            str_list.append(item)\n    return str_list\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for s in l:\n        result.append(s[:l])\n    return result\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    res = ['' for i in range(l)]\n    for i in range(len(res)):\n        res[i] = str[i:i+l]\n    return res\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [i[0:l] for i in str]\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return ''.join(text1.split())\n    \ndef remove_punctuations(text1):\n    '''\n    Write a function to remove all punctuations from the given string.\n    '''\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    for x in text1:\n        if x in punctuations:\n            text1 = text1.replace(x,\"\")\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return \"\".join(text1.split())\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    s = text1.replace(' ','')\n    return s\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    #1. use replace method\n    #2. use regex\n    text1 = re.sub('\\s', '', text1)\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    #start\n    text1 = text1.replace(' ','')\n    return text1\n    #end\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','',text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(\" \",\"\")\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.strip()\n    return text1\n    \ndef remove_whitespaces_using_regex(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+','',text1)\n    return text1\n    \ndef remove_hyphen(text1):\n    '''\n    Write a function to remove hyphens from the given string.\n    '''\n    text1 = re.sub(r'\\-', '', text1)\n    return text1\n    \ndef remove_hyphen_using_regex(text1):\n    '''\n    Write a function to remove hyphens from the given string.\n    '''\n    text1 = re.sub(r'\\-', '', text1)\n    return text1\n    \ndef remove_newlines(text1):\n    '''\n    Write a function to remove newlines from the given string.\n    '''\n    text1 = re.sub(r'\\n', '', text1)\n    return text1\n    \ndef remove_newlines_using_regex(text1):\n    '''\n    Write a function to remove newlines from the given string.\n    '''\n    text1 = re.sub(r'\\n', '', text1)\n    return text1\n    \ndef remove_spaces_from_start(text1):\n    '''\n    Write a function to remove spaces from the start of the given string.\n    '''\n    text1 = text1.lstrip()\n    return text1\n    \ndef remove_spaces_from_start_using_regex(text1):\n    '''\n    Write a function to remove spaces from the start of the given string.\n    '''\n    text1 = re.sub(r'\\s+','',text1)\n    return text1\n    \ndef remove_spaces_from_end(text1):\n    '''\n    Write a function to remove spaces from the end of the given string.\n    '''\n    text1 = text1.rstrip()\n    return text1\n    \ndef remove_spaces_from_end_using_regex(text1):\n    '''\n    Write a function to remove spaces from the end of the given string.\n    '''\n    text1 = re.sub(r'\\s+$','',text1)\n    return text1\n    \ndef convert_to_lower_case(text1):\n    '''\n    Write a function to convert to lower case letters from the given string.\n    '''\n    text1 = text1.lower()\n    return text1\n    \ndef convert_to_lower_case_using_regex(text1):\n    '''\n    Write a function to convert to lower case letters from the given string.\n    '''\n    text1 = re.sub(r'[A-Z]','',text1)\n    return text1\n    \ndef convert_to_uppercase_using_regex(text1):\n    '''\n    Write a function to convert to lower case letters from the given string.\n    '''\n    text1 = re.sub(r'[a-z]','',text1)\n    return text1\n    \ndef count_occurences_of_pattern(text1):\n    '''\n    Write a function to count the occurences of pattern from the given string.\n    '''\n    text1 = re.findall(r'\\b([a-z]{4,})\\b',text1)\n    print(len(text1))\n    return text1\n    \ndef count_occurences_of_pattern_using_regex(text1):\n    '''\n    Write a function to count the occurences of pattern from the given string.\n    '''\n    text1 = re.findall(r'\\b([a-z]{4,})\\b',text1)\n    print(len(text1))\n    return text1\n    \ndef count_occurences_of_pattern_using_index(text1):\n    '''\n    Write a function to count the occurences of pattern from the given string.\n    '''\n    text1 = len(re.findall(r'\\b([a-z]{4,})\\b',text1))\n    print(text1)\n    return text1\n    \ndef replace_space_with_tab(text1):\n    '''\n    Write a function to replace space with tab in the given string.\n    '''\n    text1 = re.sub(r'\\s+','\\t',text1)\n    return text1\n    \ndef replace_space_with_tab_using_regex(text1):\n    '''\n    Write a function to replace space with tab in the given string.\n    '''\n    text1 = re.sub(r'\\s+','\\t',text1)\n    return text1\n    \ndef replace_newline_with_space(text1):\n    '''\n    Write a function to replace newline with space in the given string.\n    '''\n    text1 = re.sub(r'\\n+',' ',text1)\n    return text1\n    \ndef replace_newline_with_space_using_regex(text1):\n    '''\n    Write a function to replace newline with space in the given string.\n    '''\n    text1 = re.sub(r'\\n+',' ',text1)\n    return text1\n    \ndef replace_tab_with_space(text1):\n    '''\n    Write a function to replace tab with space in the given string.\n    '''\n    text1 = re.sub(r'\\t+',' ',text1)\n    return text1\n    \ndef replace_tab_with_space_using_regex(text1):\n    '''\n    Write a function to replace tab with space in the given string.\n    '''\n    text1 = re.sub(r'\\t+',' ',text1)\n    return text1\n    \ndef replace_word_with_dummy_word(text1):\n    '''\n    Write a function to replace word with dummy word in the given string.\n    '''\n    text1 = re.sub(r'[a-z]{4,}', 'DummyWord',text1)\n    return text1\n    \ndef replace_word_with_dummy_word_using_regex(text1):\n    '''\n    Write a function to replace word with dummy word in the given string.\n    '''\n    text1 = re.sub(r'[a-z]{4,}', 'DummyWord',text1)\n    return text1\n    \ndef replace_word_with_dummy_word_using_index(text1):\n    '''\n    Write a function to replace word with dummy word in the given string.\n    '''\n    text1 = re.sub(r'[a-z]{4,}', 'DummyWord',text1)\n    return text1\n    \ndef remove_pattern(text1):\n    '''\n    Write a function to remove pattern from the given string.\n    '''\n    text1 = re.sub(r'[a-z]{4,}','',text1)\n    return text1\n    \ndef remove_pattern_using_regex(text1):\n    '''\n    Write a function to remove pattern from the given string.\n    '''\n    text1 = re.sub(r'[a-z]{4,}','',text1)\n    return text1\n    \ndef remove_pattern_using_index(text1):\n    '''\n    Write a function to remove pattern from the given string.\n    '''\n    text1 = re.sub(r'[a-z]{4,}','',text1)\n    return text1\n    \ndef replace_pattern_using_regex(text1):\n    '''\n    Write a function to replace pattern from the given string.\n    '''\n    text1 = re.sub(r'[a-z]{4,}','',text1)\n    return text1\n    \ndef replace_pattern_using_index(text1):\n    '''\n    Write a function to replace pattern from the given string.\n    '''\n    text1 = re.sub(r'[a-z]{4,}','',text1)\n    return text1\n    \ndef remove_from_start(text1):\n    '''\n    Writ"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    #return text1.replace(' ', '')\n    text = \"\"\n    for i in text1:\n        if i.isspace()==False:\n            text+=i\n    return text\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return abs(actual_cost - sale_amount) if actual_cost < sale_amount else 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount >= actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount>actual_cost: \n        return sale_amount-actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return abs(actual_cost - sale_amount)\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0\n    \ndef loss_amount_list(actual_cost_list,sale_amount_list):\n    '''\n    Write a function that returns the list of loss amounts on a sale for each list in actual_cost_list,\n    sale_amount_list and return the list of loss amounts in the same order.\n    '''\n    return [loss_amount(actual_cost,sale_amount) for actual_cost,sale_amount in zip(actual_cost_list,sale_amount_list)]\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost <= sale_amount:\n        return actual_cost * sale_amount - sale_amount\n    else:\n        return actual_cost * sale_amount - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = sale_amount - actual_cost\n    if loss < 0:\n        return loss\n    else:\n        return 0\ndef loss_percentage(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss percentage on a sale if the given amount has loss else return 0.\n    '''\n    loss = loss_amount(actual_cost,sale_amount)\n    if loss < 0:\n        return loss / sale_amount\n    else:\n        return 0\n    \ndef loss_per_centage(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss per centage on a sale if the given amount has loss else return 0.\n    '''\n    loss = loss_amount(actual_cost,sale_amount)\n    if loss < 0:\n        return loss * 100 / sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    try:\n        if actual_cost<sale_amount:\n            return sale_amount-actual_cost\n        else:\n            return 0\n    except ValueError:\n        return 0\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = [] \n    for i in range(1,int(math.sqrt(n))+1) : \n        if (n % i == 0) : \n            if (n/i == i) : \n                factors.append(i) \n            else : \n                factors.extend([i, n/i]) \n    return sum(factors) \n    \ndef nextPrime(n): \n    '''\n    Write a python function to find the next prime number after a given number.\n    '''\n    if n <= 2: \n        return 2\n    else : \n        i = n \n        while(i <= n*n): \n            if i > 2 and i % 2 == 0: \n                i += 2\n            elif i > 3 and i % 3 == 0: \n                i += 3\n            elif i > 5 and i % 5 == 0: \n                i += 5\n            elif i > 7 and i % 7 == 0: \n                i += 7\n            else : \n                return i\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 : \n        return 0 \n    elif n == 1 : \n        return 1 \n    else : \n        return (n/2)*(n+1)\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1) : \n        if n % i == 0 :\n            if i % 2 == 0 :\n                sum = sum + i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(1, n) : \n        if n%i == 0 : \n            if i%2 == 0 : \n                s += i\n    return s\n    \ndef isPrime(n) : \n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if n%2 == 0 and n > 2 : \n        return False\n    for i in range(3,int(math.sqrt(n))+1,2) : \n        if n%i == 0 : \n            return False\n    return True\n    \ndef countPrimeDigits(n) : \n    '''\n    Write a python function to count the number of digits in a prime number.\n    '''\n    count = 0\n    while n > 0 : \n        n = n//10\n        count += 1\n    return count\n    \ndef reverse(n) : \n    '''\n    Write a python function to find the reverse of a number.\n    '''\n    r = 0\n    while n > 0 : \n        r = r*10 + n%10\n        n = n//10\n    return r\n    \ndef factorial(n) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if n == 1 : \n        return 1\n    else : \n        return n*factorial(n-1)\n    \ndef gcd(m, n) : \n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    if m%n == 0 : \n        return n\n    else : \n        return gcd(n, m%n)\n    \ndef power(x, n) : \n    '''\n    Write a python function to find the value of x to the power of n.\n    '''\n    if n == 0 : \n        return 1\n    elif n == 1 : \n        return x\n    elif n%2 == 1 : \n        return power(x, n-1)*x\n    else : \n        return power(x, n/2)*power(x, n/2)\n    \ndef countDigit(n, d) : \n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    count = 0\n    while n > 0 : \n        n = n//10\n        count += 1\n    return count\n    \ndef isArmstrong(n) : \n    '''\n    Write a python function to check if a number is an armstrong number or not.\n    '''\n    n = abs(n)\n    m = n\n    s = 0\n    while n > 0 : \n        n = n//10\n        s += (n%10)*(n%10)*(n%10)\n    if s == m : \n        return True\n    else : \n        return False\n    \ndef isPanapason(n) : \n    '''\n    Write a python function to check if a number is panapason or not.\n    '''\n    s = 0\n    for i in range(1, n) : \n        s += i\n    if n % s == 0 : \n        return True\n    else : \n        return False\n    \ndef isPandigital(n) : \n    '''\n    Write a python function to check if a number is pandigital or not.\n    '''\n    n = str(n)\n    if len(n) == 9 : \n        if n[0]!= '0' : \n            if n[1]!= '0' : \n                if n[2]!= '0' : \n                    if n[3]!= '0' : \n                        if n[4]!= '0' : \n                            if n[5]!= '0' : \n                                if n[6]!= '0' : \n                                    if n[7]!= '0' : \n                                        if n[8]!= '0' : \n                                            return True\n    return False\n    \ndef numFactors(n) : \n    '''\n    Write a python function to find the number of factors of a number.\n    '''\n    f = 1\n    for i in range(2, int(math.sqrt(n))+1) : \n        if n%i == 0 : \n            if i!= n/i : \n                f += 2\n            else : \n                f += 1\n    return f\n    \ndef isPalindrome(n) : \n    '''\n    Write a python function to check if a number is palindrome or not.\n    '''\n    n = abs(n)\n    m = n\n    s = 0\n    while n > 0 : \n        n = n//10\n        s += n\n    if m == s : \n        return True\n    else : \n        return False\n    \ndef isPermutation(n, m) : \n    '''\n    Write a python function to check if a number is a permutation of the other number or not.\n    '''\n    n = abs(n)\n    m = abs(m)\n    if n == m : \n        return True\n    s = 0\n    while n > 0 : \n        n = n//10\n        s += n\n    if m%s == 0 : \n        return True\n    else : \n        return False\n    \ndef gcd1(m, n) : \n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    if m%n == 0 : \n        return n\n    else : \n        return gcd1(n, m%n)\n    \ndef gcd2(m, n) : \n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    if m > n : \n        n, m = m, n\n    if m == 0 : \n        return n\n    else : \n        return gcd2(m, n%m)\n    \ndef lcm(m, n) : \n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    if m > n : \n        n, m = m, n\n    mul = m*n\n    while True : \n        if mul%m == 0 and mul%n == 0 : \n            break\n        else : \n            mul += 1\n    return mul\n    \ndef isPerfect(n) : \n    '''\n    Write a python function to check if a number is perfect or not.\n    '''\n    s = 0\n    for i in range(1, n) : \n        if n%i == 0 : \n            s += i\n    if s == n : \n        return True\n    else : \n        return False\n    \ndef isPandigital2(n) : \n    '''\n    Write a python function to check if a number is pandigital or not.\n    '''\n    n = str(n)\n    s = 0\n    for i in range(1, len(n)+1) : \n        if i in n : \n            s += i\n        else : \n            s = 0\n            break\n    if s == len(n) : \n        return True\n    else : \n        return False\n    \ndef isPentagonal(n) : \n    '''\n    Write a python function to check if a number is pentagonal or not.\n    '''\n    n = abs(n)\n    if n == (math.sqrt(24*n+1)+1)/6 : \n        return True\n    else : \n        return False\n    \ndef isHexagonal(n) : \n    '''\n    Write a python function to check if a number is hexagonal or not.\n    '''\n    n = abs(n)\n    if n == (math.sqrt(8*n+1)+1)/4 : \n        return True\n    else : \n        return False\n    \ndef isHeptagonal(n) : \n    '''\n    Write a python function to check if a number is heptagonal or not.\n    '''\n    n = abs(n)\n    if n == (math.sqrt(10*n+1)+1)/6 : \n        return True\n    else : \n        return False\n    "
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 0 :\n        print \"Factors of negative number is not possible\"\n        return\n    if n == 0 :\n        return 0\n    res = 1\n    for i in xrange(2, int(math.sqrt(n))+1) :\n        if n % i == 0 :\n            if n / i == i :\n                res += i\n            else :\n                res += i + n / i\n    return res\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    \n    res = 0\n    i = 1\n    while i < n:\n        if n % i == 0:\n            if i % 2 == 0:\n                res += i\n        i += 1\n    return res\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n) : \n        if n % i == 0 :\n            if i % 2 == 0 : \n                sum = sum + i \n    return sum \n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    for i in range(1,(n // 2) + 1) :\n        if n % i == 0 :\n            if i % 2 == 0 :\n                total += i\n    return total\n    \ndef isPandigital(number) :\n    '''\n    Write a python function to check whether a number is pandigital or not.\n    '''\n    for i in range(1, 10) :\n        if str(i) not in str(number) :\n            return False\n    return True\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 1\n    for i in range(2,n) :\n        if(n%i==0) :\n            if(i%2==0) :\n                s = s + i\n    return s\ndef isPerfectSquare(n):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if(n==0):\n        return True\n    r = int(math.sqrt(n))\n    if(r*r == n):\n        return True\n    return False\ndef isPerfectSquareFactors(n):\n    '''\n    Write a python function to find the sum of perfect square factors of a number.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        if(i*i == n):\n            s = s + i\n    return s\ndef isPerfectSquare(n):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if(n==0):\n        return True\n    r = int(math.sqrt(n))\n    if(r*r == n):\n        return True\n    return False\ndef isPerfectSquareFactors(n):\n    '''\n    Write a python function to find the sum of perfect square factors of a number.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        if(i*i == n):\n            s = s + i\n    return s\ndef isPerfectSquare(n):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if(n==0):\n        return True\n    r = int(math.sqrt(n))\n    if(r*r == n):\n        return True\n    return False\ndef isPerfectSquareFactors(n):\n    '''\n    Write a python function to find the sum of perfect square factors of a number.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        if(i*i == n):\n            s = s + i\n    return s\ndef isPerfectSquare(n):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if(n==0):\n        return True\n    r = int(math.sqrt(n))\n    if(r*r == n):\n        return True\n    return False\ndef isPerfectSquareFactors(n):\n    '''\n    Write a python function to find the sum of perfect square factors of a number.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        if(i*i == n):\n            s = s + i\n    return s\ndef isPerfectSquare(n):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if(n==0):\n        return True\n    r = int(math.sqrt(n))\n    if(r*r == n):\n        return True\n    return False\ndef isPerfectSquareFactors(n):\n    '''\n    Write a python function to find the sum of perfect square factors of a number.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        if(i*i == n):\n            s = s + i\n    return s\ndef isPerfectSquare(n):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if(n==0):\n        return True\n    r = int(math.sqrt(n))\n    if(r*r == n):\n        return True\n    return False\ndef isPerfectSquareFactors(n):\n    '''\n    Write a python function to find the sum of perfect square factors of a number.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        if(i*i == n):\n            s = s + i\n    return s\ndef isPerfectSquare(n):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if(n==0):\n        return True\n    r = int(math.sqrt(n))\n    if(r*r == n):\n        return True\n    return False\ndef isPerfectSquareFactors(n):\n    '''\n    Write a python function to find the sum of perfect square factors of a number.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        if(i*i == n):\n            s = s + i\n    return s\ndef isPerfectSquare(n):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if(n==0):\n        return True\n    r = int(math.sqrt(n))\n    if(r*r == n):\n        return True\n    return False\ndef isPerfectSquareFactors(n):\n    '''\n    Write a python function to find the sum of perfect square factors of a number.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        if(i*i == n):\n            s = s + i\n    return s\ndef isPerfectSquare(n):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if(n==0):\n        return True\n    r = int(math.sqrt(n))\n    if(r*r == n):\n        return True\n    return False\ndef isPerfectSquareFactors(n):\n    '''\n    Write a python function to find the sum of perfect square factors of a number.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        if(i*i == n):\n            s = s + i\n    return s\ndef isPerfectSquare(n):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if(n==0):\n        return True\n    r = int(math.sqrt(n))\n    if(r*r == n):\n        return True\n    return False\ndef isPerfectSquareFactors(n):\n    '''\n    Write a python function to find the sum of perfect square factors of a number.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        if(i*i == n):\n            s = s + i\n    return s\ndef isPerfectSquare(n):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if(n==0):\n        return True\n    r = int(math.sqrt(n))\n    if(r*r == n):\n        return True\n    return False\ndef isPerfectSquareFactors(n):\n    '''\n    Write a python function to find the sum of perfect square factors of a number.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        if(i*i == n):\n            s = s + i\n    return s\ndef isPerfectSquare(n):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if(n==0):\n        return True\n    r = int(math.sqrt(n))\n    if(r*r == n):\n        return True\n    return False\ndef isPerfectSquareFactors(n):\n    '''\n    Write a python function to find the sum of perfect square factors of a number.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        if(i*i == n):\n            s = s + i\n    return s\ndef isPerfectSquare(n):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if(n==0):\n        return True\n    r = int(math.sqrt(n))\n    if(r*r == n):\n        return True\n    return False\ndef isPerfectSquareFactors(n):\n    '''\n    Write a python function to find the sum of perfect square factors of a number.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        if(i*i == n):\n            s = s + "
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n <= 1 :\n        return 0\n    if n == 2 :\n        return 2\n    if n % 2 == 0 :\n        return n + sumofFactors(n/2)\n    else :\n        return sumofFactors(n - 1)\ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef is_perfect_square(n):\n    '''\n    Write a python function to check if a number is perfect square or not.\n    '''\n    x = n\n    if x == 1 :\n        return True\n    if n < 0 :\n        return False\n    if n % 2 == 0 :\n        return False\n    while x % 2 == 0 :\n        x /= 2\n    return x == 1\ndef rotate(matrix, m, n):\n    '''\n    Write a python function to rotate a matrix around an empty space.\n    '''\n    for i in range(m):\n        for j in range(i, n):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[j][i]\n            matrix[j][i] = temp\n    for i in range(m):\n        for j in range(m//2):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[i][m-1-j]\n            matrix[i][m-1-j] = temp\n    for i in range(m):\n        for j in range(n//2):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[i][n-1-j]\n            matrix[i][n-1-j] = temp\n    return matrix\ndef power(matrix, m, n):\n    '''\n    Write a python function to compute the power of a matrix.\n    '''\n    temp = [[1,0,0,0,0],[0,1,0,0,0],[0,0,1,0,0],[0,0,0,1,0],[0,0,0,0,1]]\n    for i in range(m):\n        for j in range(m):\n            for k in range(m):\n                temp[i][j] += matrix[i][k] * matrix[k][j]\n    return temp\ndef transpose(matrix):\n    '''\n    Write a python function to compute the transpose of a matrix.\n    '''\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if j < i:\n                temp = matrix[i][j]\n                matrix[i][j] = matrix[j][i]\n                matrix[j][i] = temp\n    return matrix\ndef matrix_multiply(matrix1, matrix2):\n    '''\n    Write a python function to multiply two matrices.\n    '''\n    if len(matrix1[0])!= len(matrix2):\n        return \"can not multiply\"\n    result = [[0 for i in range(len(matrix2[0]))] for j in range(len(matrix1))]\n    for i in range(len(matrix1)):\n        for j in range(len(matrix2[0])):\n            for k in range(len(matrix2)):\n                result[i][j] += matrix1[i][k] * matrix2[k][j]\n    return result\ndef pythagorean_triplet(n):\n    '''\n    Write a python function to find the pythagorean triplet that sums to n.\n    '''\n    for i in range(int(n/3)):\n        for j in range(int(n/2)):\n            k = n - i - j\n            if(is_prime(i) and is_prime(j) and is_prime(k)):\n                return i,j,k\ndef get_next_prime(n):\n    '''\n    Write a python function to find the next prime number.\n    '''\n    if(n <= 1):\n        return 2\n    if(n % 2 == 0):\n        return 3\n    if(is_prime(n)):\n        return n\n    return get_next_prime(n+1)\ndef test_get_next_prime():\n    assert(get_next_prime(3) == 5)\n    assert(get_next_prime(2) == 3)\n    assert(get_next_prime(1) == 2)\ndef sum_digits(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    if(n < 0):\n        return 0\n    if(n == 0):\n        return 0\n    return n % 10 + sum_digits(n // 10)\ndef test_sum_digits():\n    assert(sum_digits(10) == 1)\n    assert(sum_digits(11) == 2)\n    assert(sum_digits(12) == 3)\n    assert(sum_digits(13) == 4)\n    assert(sum_digits(14) == 4)\ndef sum_squares(n):\n    '''\n    Write a python function to find the sum of squares of digits of a number.\n    '''\n    if(n < 0):\n        return 0\n    if(n == 0):\n        return 0\n    return sum_digits(n) * sum_digits(n)\ndef test_sum_squares():\n    assert(sum_squares(10) == 1)\n    assert(sum_squares(11) == 4)\n    assert(sum_squares(12) == 9)\n    assert(sum_squares(13) == 16)\n    assert(sum_squares(14) == 25)\ndef is_palindrome(n):\n    '''\n    Write a python function to check if a number is palindrome or not.\n    '''\n    if(n < 0):\n        return False\n    if(n == 0):\n        return True\n    if(n % 10 == 0):\n        return is_palindrome(n // 10)\n    return (n % 10 == n // 10) and is_palindrome(n // 10)\ndef test_is_palindrome():\n    assert(is_palindrome(12) == True)\n    assert(is_palindrome(21) == True)\n    assert(is_palindrome(123) == False)\n    assert(is_palindrome(12321) == True)\n    assert(is_palindrome(0) == True)\n    assert(is_palindrome(123454321) == False)\n    assert(is_palindrome(1234543211234) == True)\n    assert(is_palindrome(123454321123454321) == True)\n    assert(is_palindrome(-123454321) == False)\n    assert(is_palindrome(-1234543211234) == False)\ndef reverse(n):\n    '''\n    Write a python function to reverse a number.\n    '''\n    if(n < 0):\n        return 0\n    if(n == 0):\n        return 0\n    return n % 10 * 10 ** int(math.log10(n // 10) + 1) + reverse(n // 10)\ndef test_reverse():\n    assert(reverse(1234) == 4321)\n    assert(reverse(0) == 0)\n    assert(reverse(-1234) == -4321)\n    assert(reverse(-123454321) == 5432112345)\n    assert(reverse(0) == 0)\n    assert(reverse(1234543211234) == 234123454321)\n    assert(reverse(123454321123454321) == 5432112345432112345)\n    assert(reverse(-1234543211234543211234) == -54321123454321123454321)\n    assert(reverse(-1234543211234543211234) == -54321123454321123454"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search(\"\\w*z\\w*\",text):\n        print \"Match 1\"\n    elif re.search(\"\\w*z\\w*\",text,re.IGNORECASE):\n        print \"Match 2\"\n    else:\n        print \"No match\"\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search('z', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    test_words = ['z', 'an', 'az', 'bat', 'zombie']\n    for word in test_words:\n        if re.search(r'z', word):\n            print(word)\n    print()\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'[a-z]*z[a-z]*'\n    match = re.search(pattern, text)\n    if match:\n        print(\"Match: \", match.group(0))\n    else:\n        print(\"No match.\")\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search('z', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]*z\\b')\n    result = pattern.findall(text)\n    return result\n    "
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'z',text)\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'\\b\\w*z\\b', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    print(re.search('z',text))\n    print(re.search('z',text,re.IGNORECASE))\n    print(re.search('z',text,re.IGNORECASE).start(0))\n    print(re.search('z',text,re.IGNORECASE).end(0))\n    print(re.search('z',text,re.IGNORECASE).span(0))\n    print(re.search('z',text,re.IGNORECASE).group(0))\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    matches = re.findall(r'\\b\\w*z\\b', text)\n    return matches\n    \n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    return monthnum2 in (1,3,5,7,8,10,12)\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum = ['01','02','03','04','05','06','07','08','09','10','11','12']\n    if monthnum2 in monthnum:\n        return True\n    else:\n        return False\ndef check_monthnumb_number_leapyear(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    If the given year is a leap year, return True if the given month number contains 29 days, otherwise return False.\n    '''\n    if check_monthnumb_number_leapyear(monthnum2) == True:\n        monthnum = ['01','02','03','04','05','06','07','08','09','10','11','12']\n        if monthnum2 in monthnum:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef check_monthnumb_number_leapyear2(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    If the given year is a leap year, return True if the given month number contains 29 days, otherwise return False.\n    '''\n    if check_monthnumb_number_leapyear(monthnum2) == True:\n        monthnum = ['01','02','03','04','05','06','07','08','09','10','11','12']\n        if monthnum2 in monthnum:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef check_monthnumb_number_leapyear3(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    If the given year is a leap year, return True if the given month number contains 29 days, otherwise return False.\n    '''\n    if check_monthnumb_number_leapyear(monthnum2) == True:\n        monthnum = ['01','02','03','04','05','06','07','08','09','10','11','12']\n        if monthnum2 in monthnum:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef check_monthnumb_number_leapyear4(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    If the given year is a leap year, return True if the given month number contains 29 days, otherwise return False.\n    '''\n    if check_monthnumb_number_leapyear(monthnum2) == True:\n        monthnum = ['01','02','03','04','05','06','07','08','09','10','11','12']\n        if monthnum2 in monthnum:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef check_monthnumb_number_leapyear5(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    If the given year is a leap year, return True if the given month number contains 29 days, otherwise return False.\n    '''\n    if check_monthnumb_number_leapyear(monthnum2) == True:\n        monthnum = ['01','02','03','04','05','06','07','08','09','10','11','12']\n        if monthnum2 in monthnum:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef check_monthnumb_number_leapyear6(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    If the given year is a leap year, return True if the given month number contains 29 days, otherwise return False.\n    '''\n    if check_monthnumb_number_leapyear(monthnum2) == True:\n        monthnum = ['01','02','03','04','05','06','07','08','09','10','11','12']\n        if monthnum2 in monthnum:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef check_monthnumb_number_leapyear7(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    If the given year is a leap year, return True if the given month number contains 29 days, otherwise return False.\n    '''\n    if check_monthnumb_number_leapyear(monthnum2) == True:\n        monthnum = ['01','02','03','04','05','06','07','08','09','10','11','12']\n        if monthnum2 in monthnum:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef check_monthnumb_number_leapyear8(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    If the given year is a leap year, return True if the given month number contains 29 days, otherwise return False.\n    '''\n    if check_monthnumb_number_leapyear(monthnum2) == True:\n        monthnum = ['01','02','03','04','05','06','07','08','09','10','11','12']\n        if monthnum2 in monthnum:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef check_monthnumb_number_leapyear9(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    If the given year is a leap year, return True if the given month number contains 29 days, otherwise return False.\n    '''\n    if check_monthnumb_number_leapyear(monthnum2) == True:\n        monthnum = ['01','02','03','04','05','06','07','08','09','10','11','12']\n        if monthnum2 in monthnum:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef check_monthnumb_number_leapyear10(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    If the given year is a leap year, return True if the given month number contains 29 days, otherwise return False.\n    '''\n    if check_monthnumb_number_leapyear(monthnum2) == True:\n        monthnum = ['01','02','03','04','05','06','07','08','09','10','11','12']\n        if monthnum2 in monthnum:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef check_monthnumb_number_leapyear11(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    If the given year is a leap year, return True if the given month number contains 29 days, otherwise return False.\n    '''\n    if check_monthnumb_number_leapyear(monthnum2) == True:\n        monthnum = ['01','02','03','04','05','06','07','08','09','10','11','12']\n        if monthnum2 in monthnum:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef check_monthnumb_number_leapyear12(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    If the given year is a leap year, return True if the given month number contains 29 days, otherwise return False.\n    '''\n    if check_monthnumb_number_leapyear(monthnum2) == True:\n        monthnum = ['01','02','03','04','05','06','07','08','09','10','11','12']\n        if monthnum2 in monthnum:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef check_monthnumb_number_leapyear13(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    If the given year is a leap year, return True if the given month number contains 29 days, otherwise return False.\n    '''\n    if check_monthnumb_number_leapyear(monthnum2) == True:\n        monthnum = ['01','02','03','04','05','06','07','08','09','10','11','1"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return 31\n    else:\n        return 30\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        print \"31 days\"\n    elif monthnum2 in [4,6,9,11]:\n        print \"30 days\"\n    else:\n        print \"29 days\"\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    print \"Entering check_monthnumb_number\"\n    if monthnum2 > 0 and monthnum2 < 13:\n        if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n            print \"Month number contains 31 days\"\n        elif monthnum2 in [4, 6, 9, 11]:\n            print \"Month number contains 30 days\"\n        else:\n            print \"Month number contains 28 or 29 days\"\n    else:\n        print \"Month number should be between 1 and 12\"\n    print \"Exiting check_monthnumb_number\"\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12:\n        return 31\n    else:\n        return 30\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        if (year2 % 4 == 0) and (year2 % 100!= 0):\n            return 29\n        elif (year2 % 4 == 0) and (year2 % 100 == 0) and (year2 % 400 == 0):\n            return 29\n        else:\n            return 28\n    elif monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return 31\n    else:\n        return 30\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i,j in enumerate(stringlist):\n        stringlist[i] = j[::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for string in stringlist:\n        stringlist.append(string[::-1])\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [stringlist[-1::-1]]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return list(reversed(stringlist))\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for each in stringlist:\n        newlist.append(each[::-1])\n    return newlist\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for x in stringlist:\n        newlist.append(x[::-1])\n    return newlist\n    \n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [x[::-1] for x in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [x[::-1] for x in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [x[::-1] for x in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [reverse_string(s) for s in stringlist]\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    if len(lst) == 1:\n        return lst\n    else:\n        min_index = 0\n        min_len = len(lst[0])\n        for i in range(1, len(lst)):\n            if len(lst[i]) < min_len:\n                min_index = i\n                min_len = len(lst[i])\n        return lst[min_index]\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    result = lst[0] \n    for i in lst: \n        if len(i) < len(result): \n            result = i \n    return result \n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    length = len(lst)\n    min_length = lst[0][1]\n    for i in range(1, length):\n        if lst[i][1] < min_length:\n            min_length = lst[i][1]\n    for i in range(length):\n        if lst[i][1] == min_length:\n            return lst[i]\n            break\n    return None\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    length = len(lst)\n    minimum = lst[0]\n    for i in range(1,length):\n        if len(lst[i]) < len(minimum):\n            minimum = lst[i]\n    print minimum\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    #initialize maximum and minimum length to first element of the list\n    min_length = lst[0][1]\n    #the minimum length sublist will be first element of the list\n    minimum_sublist = lst[0]\n    #loop through each element and update maximum length\n    #if element is found, update min_length, minimum_sublist\n    for i in range(0,len(lst)):\n        for j in range(i+1,len(lst)):\n            if lst[i][1] + lst[j][1] < min_length:\n                min_length = lst[i][1] + lst[j][1]\n                minimum_sublist = [lst[i][0], lst[j][0], min_length]\n    #return min_length, minimum_sublist\n    return minimum_sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min=lst[0][1]-lst[0][0]+1\n    min_index=0\n    for i in xrange(len(lst)):\n        if lst[i][1]-lst[i][0]+1 < min:\n            min=lst[i][1]-lst[i][0]+1\n            min_index=i\n    return lst[min_index]\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = len(lst[0])\n    min_index = 0\n    for i in range(1,len(lst)):\n        if len(lst[i]) < min:\n            min = len(lst[i])\n            min_index = i\n    return lst[min_index]\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst)==0:\n        return []\n    min=lst[0]\n    for i in lst:\n        if len(i)<len(min):\n            min=i\n    return min\ndef Merge(lst):\n    '''\n    Write a python function to merge two lists.\n    '''\n    if len(lst)==0:\n        return []\n    elif len(lst)==1:\n        return lst[0]\n    else:\n        min=Find_Min(lst)\n        return min+Merge(lst[0:lst.index(min)])+Merge(lst[lst.index(min)+1:])\ndef Merge_List(lst):\n    if len(lst)==0:\n        return []\n    elif len(lst)==1:\n        return lst[0]\n    else:\n        min=Find_Min(lst)\n        return min+Merge_List(lst[0:lst.index(min)])+Merge_List(lst[lst.index(min)+1:])\ndef Reverse(lst):\n    '''\n    Write a python function to reverse a list.\n    '''\n    if len(lst)==0:\n        return []\n    elif len(lst)==1:\n        return lst[0]\n    else:\n        return lst[len(lst)-1]+Reverse(lst[0:len(lst)-1])\ndef ispalindrome(lst):\n    '''\n    Write a python function to check whether a list is palindrome.\n    '''\n    return lst==Reverse(lst)\ndef Reverse_each_word(lst):\n    '''\n    Write a python function to reverse each word in a list.\n    '''\n    if len(lst)==0:\n        return []\n    elif len(lst)==1:\n        return lst[0]\n    else:\n        min=Find_Min(lst)\n        return min+Reverse_each_word(lst[0:lst.index(min)])+Reverse_each_word(lst[lst.index(min)+1:])\ndef Rotate_right(lst):\n    '''\n    Write a python function to rotate a list to the right.\n    '''\n    if len(lst)==0:\n        return []\n    elif len(lst)==1:\n        return lst[0]\n    else:\n        return lst[len(lst)-1]+Rotate_right(lst[0:len(lst)-1])\ndef Rotate_left(lst):\n    '''\n    Write a python function to rotate a list to the left.\n    '''\n    if len(lst)==0:\n        return []\n    elif len(lst)==1:\n        return lst[0]\n    else:\n        return lst[1:len(lst)]+[lst[0]]\ndef print_list(lst):\n    for i in lst:\n        print(i,end=' ')\n    print()\nlst=list(map(int,input().split()))\nprint_list(lst)\nprint_list(Reverse(lst))\nprint_list(Reverse_each_word(lst))\nprint_list(Rotate_right(lst))\nprint_list(Rotate_left(lst))\nprint_list(Merge(lst))\nprint_list(Merge_List(lst))\nprint(ispalindrome(lst))\nprint(ispalindrome(Reverse(lst)))\nprint(ispalindrome(Reverse_each_word(lst)))\nprint(ispalindrome(Rotate_right(lst)))\nprint(ispalindrome(Rotate_left(lst)))\nprint(ispalindrome(Merge(lst)))\nprint(ispalindrome(Merge_List(lst)))"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    n = len(lst)\n    min_len = n\n    min_list = lst\n    for i in range(n):\n        for j in range(i, n):\n            if len(lst[i:j+1]) < min_len:\n                min_len = len(lst[i:j+1])\n                min_list = lst[i:j+1]\n    return min_list\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if (len(lst[i]) <= min_length):\n            min_length = len(lst[i])\n            min_sublist = lst[i]\n    return min_sublist\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    a = l*b\n    print(a)\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n    \ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    perimeter = 2 * (l+b)\n    return perimeter\n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    pi = 3.14159265\n    area = pi * r**2\n    return area\n    \ndef circle_perimeter(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    pi = 3.14159265\n    perimeter = 2 * pi * r\n    return perimeter\n    \ndef rect_area(l,b):\n    area = rectangle_area(l,b)\n    return area\n    \ndef rect_perimeter(l,b):\n    perimeter = rectangle_perimeter(l,b)\n    return perimeter\n    \ndef circle_area(r):\n    area = circle_area(r)\n    return area\n    \ndef circle_perimeter(r):\n    perimeter = circle_perimeter(r)\n    return perimeter\n    \ndef triangle_area(a,b,c):\n    area = triangle_area(a,b,c)\n    return area\n    \ndef triangle_perimeter(a,b,c):\n    perimeter = triangle_perimeter(a,b,c)\n    return perimeter\n    \ndef pentagon_area(a):\n    area = pentagon_area(a)\n    return area\n    \ndef pentagon_perimeter(a):\n    perimeter = pentagon_perimeter(a)\n    return perimeter\n    \ndef hexagon_area(a):\n    area = hexagon_area(a)\n    return area\n    \ndef hexagon_perimeter(a):\n    perimeter = hexagon_perimeter(a)\n    return perimeter\n    \ndef octagon_area(a):\n    area = octagon_area(a)\n    return area\n    \ndef octagon_perimeter(a):\n    perimeter = octagon_perimeter(a)\n    return perimeter\n    \ndef nonagon_area(a):\n    area = nonagon_area(a)\n    return area\n    \ndef nonagon_perimeter(a):\n    perimeter = nonagon_perimeter(a)\n    return perimeter\n    \ndef circle_area(r):\n    area = circle_area(r)\n    return area\n    \ndef circle_perimeter(r):\n    perimeter = circle_perimeter(r)\n    return perimeter\n    \ndef square_area(a):\n    area = square_area(a)\n    return area\n    \ndef square_perimeter(a):\n    perimeter = square_perimeter(a)\n    return perimeter\n    \ndef pentagon_area(a):\n    area = pentagon_area(a)\n    return area\n    \ndef pentagon_perimeter(a):\n    perimeter = pentagon_perimeter(a)\n    return perimeter\n    \ndef hexagon_area(a):\n    area = hexagon_area(a)\n    return area\n    \ndef hexagon_perimeter(a):\n    perimeter = hexagon_perimeter(a)\n    return perimeter\n    \ndef octagon_area(a):\n    area = octagon_area(a)\n    return area\n    \ndef octagon_perimeter(a):\n    perimeter = octagon_perimeter(a)\n    return perimeter\n    \ndef nonagon_area(a):\n    area = nonagon_area(a)\n    return area\n    \ndef nonagon_perimeter(a):\n    perimeter = nonagon_perimeter(a)\n    return perimeter\n    \ndef octagon_area(a):\n    area = octagon_area(a)\n    return area\n    \ndef octagon_perimeter(a):\n    perimeter = octagon_perimeter(a)\n    return perimeter\n    \ndef right_triangle_area(a,b):\n    area = right_triangle_area(a,b)\n    return area\n    \ndef right_triangle_perimeter(a,b):\n    perimeter = right_triangle_perimeter(a,b)\n    return perimeter\n    \ndef right_triangle_height(a,b):\n    height = right_triangle_height(a,b)\n    return height\n    \ndef right_triangle_base(a,b):\n    base = right_triangle_base(a,b)\n    return base\n    \ndef right_triangle_area(a,b):\n    area = right_triangle_area(a,b)\n    return area\n    \ndef right_triangle_perimeter(a,b):\n    perimeter = right_triangle_perimeter(a,b)\n    return perimeter\n    \ndef isosceles_triangle_area(a,b):\n    area = isosceles_triangle_area(a,b)\n    return area\n    \ndef isosceles_triangle_perimeter(a,b):\n    perimeter = isosceles_triangle_perimeter(a,b)\n    return perimeter\n    \ndef isosceles_triangle_height(a,b):\n    height = isosceles_triangle_height(a,b)\n    return height\n    \ndef isosceles_triangle_base(a,b):\n    base = isosceles_triangle_base(a,b)\n    return base\n    \ndef isosceles_triangle_area(a,b):\n    area = isosceles_triangle_area(a,b)\n    return area\n    \ndef isosceles_triangle_perimeter(a,b):\n    perimeter = isosceles_triangle_perimeter(a,b)\n    return perimeter\n    \ndef rect_area(a,b):\n    area = rectangle_area(a,b)\n    return area\n    \ndef rect_perimeter(a,b):\n    perimeter = rectangle_perimeter(a,b)\n    return perimeter\n    \ndef circle_area(r):\n    area = circle_area(r)\n    return area\n    \ndef circle_perimeter(r):\n    perimeter = circle_perimeter(r)\n    return perimeter\n    \ndef rectangle_area(a,b):\n    area = rectangle_area(a,b)\n    return area\n    \ndef rectangle_perimeter(a,b):\n    perimeter = rectangle_perimeter(a,b)\n    return perimeter\n    \ndef square_area(a):\n    area = square_area(a)\n    return area\n    \ndef square_perimeter(a):\n    perimeter = square_perimeter(a)\n    return perimeter\n    \ndef pentagon_area(a):\n    area = pentagon_area(a)\n    return area\n    \ndef pentagon_perimeter(a):\n    perimeter = pentagon_perimeter(a)\n    return perimeter\n    \ndef hexagon_area(a):\n    area = hexagon_area(a)\n    return area\n    \ndef hexagon_perimeter(a):\n    perimeter = hexagon_perimeter(a)\n    return perimeter\n    \ndef octagon_area(a):\n    area = octagon_area(a)\n    return area\n    \ndef octagon_perimeter(a):\n    perimeter = octagon_perimeter(a)\n    return perimeter\n    \ndef nonagon_area(a):\n    area = nonagon_area(a)\n    return area\n    \ndef nonagon_perimeter(a):\n    perimeter = nonagon_perimeter(a)\n    return perimeter\n    \ndef octagon_area(a):\n    area = octagon_area(a)\n    return area\n    \ndef octagon_perimeter(a):\n    perimeter = octagon_perimeter(a)\n    return perimeter\n    \ndef circle_area(r):\n    area = circle_area(r)\n    return area\n    \ndef circle_perimeter(r):\n    perimeter = circle_perimeter(r)\n    return perimeter\n    \ndef rectangle_area(a,b):\n    area = rectangle_area(a,b)\n    return area\n    \ndef rectangle_perimeter(a,b):\n    perimeter = rectangle_perimeter(a,b)\n    return perimeter\n    \ndef circle_area(r):\n    area "
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n    \ndef square_area(l):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return l**2\n    \ndef triangle_area(a,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return 0.5*a*h\n    \ndef sphere_area(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    return 4*pi*r**2\n    \ndef cylinder_area(r,h):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    return pi*r**2*2+2*pi*r*h\n    \ndef cone_area(r,h):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    return pi*r**2*0.5+pi*r*h*0.5\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    result = re.sub('[A-Z]', '', str1)\n    return result\n    \ndef remove_uppercase_words(str1):\n    '''\n    Write a function to remove uppercase words from a given string.\n    '''\n    result = re.sub('[A-Z]+', '', str1)\n    return result\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    try:\n        if str1[0].isupper():\n            return remove_uppercase(str1[1:])\n        else:\n            return str1\n    except IndexError:\n        return str1\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    str1=str1.replace(\".\", \"\")\n    str1=str1.replace(\",\",\"\")\n    str1=str1.replace(\"!\", \"\")\n    str1=str1.replace(\"?\", \"\")\n    str1=str1.replace(\"-\",\"\")\n    str1=str1.replace(\"\\n\",\"\")\n    str1=str1.replace(\"\\\"\", \"\")\n    str1=str1.replace(\"'\", \"\")\n    str1=str1.replace(\";\", \"\")\n    str1=str1.replace(\"(\", \"\")\n    str1=str1.replace(\")\", \"\")\n    str1=str1.replace(\"[\", \"\")\n    str1=str1.replace(\"]\", \"\")\n    str1=str1.replace(\"&\", \"\")\n    str1=str1.replace(\"@\", \"\")\n    str1=str1.replace(\"#\", \"\")\n    str1=str1.replace(\"$\", \"\")\n    str1=str1.replace(\"_\", \"\")\n    str1=str1.replace(\"/\", \"\")\n    str1=str1.replace(\"<\", \"\")\n    str1=str1.replace(\">\", \"\")\n    str1=str1.replace(\"'s\", \"\")\n    str1=str1.replace(\"'m\", \"\")\n    str1=str1.replace(\"'re\", \"\")\n    str1=str1.replace(\"n't\", \"\")\n    str1=str1.replace(\"'ll\", \"\")\n    str1=str1.replace(\"'d\", \"\")\n    str1=str1.replace(\"'ve\", \"\")\n    str1=str1.replace(\"'re\", \"\")\n    str1=str1.replace(\"'\", \"\")\n    str1=str1.replace(\"  \", \" \")\n    str1=str1.replace(\"  \", \" \")\n    return str1\ndef is_perfect_square(n):\n    '''\n    Determine if a number is a perfect square\n    '''\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    x = n // 2\n    seen = set([x])\n    while x * x!= n:\n        x = (x + (n // x)) // 2\n        if x in seen:\n            return False\n        seen.add(x)\n    return True\ndef is_palindrome(str1):\n    '''\n    Write a function to determine whether a string is a palindrome.\n    '''\n    if len(str1) == 0:\n        return False\n    elif len(str1) == 1:\n        return True\n    elif len(str1) == 2:\n        if str1[0] == str1[1]:\n            return True\n        else:\n            return False\n    elif len(str1) == 3:\n        if str1[0] == str1[1] and str1[1] == str1[2]:\n            return True\n        else:\n            return False\n    else:\n        return is_palindrome(str1[1:len(str1) - 1])\ndef is_palidrome_sentence(str1):\n    '''\n    Write a function to determine whether a string is a palindrome sentence.\n    '''\n    if len(str1) == 0:\n        return False\n    elif len(str1) == 1:\n        return True\n    elif len(str1) == 2:\n        if str1[0] == str1[1]:\n            return True\n        else:\n            return False\n    elif len(str1) > 2:\n        str1=str1.replace(\" \", \"\")\n        if str1[0] == str1[len(str1)-1]:\n            return is_palidrome_sentence(str1[1:len(str1)-1])\n        else:\n            return False\ndef split_by_comma(str1):\n    '''\n    Write a function to split a string by commas.\n    '''\n    str1=str1.replace(\" \", \"\")\n    str1=str1.replace(\",\",\" \")\n    str1=str1.replace(\"'\", \"\")\n    str1=str1.replace(\"\\\"\", \"\")\n    str1=str1.replace(\";\", \"\")\n    str1=str1.replace(\"(\", \"\")\n    str1=str1.replace(\")\", \"\")\n    str1=str1.replace(\"[\", \"\")\n    str1=str1.replace(\"]\", \"\")\n    str1=str1.replace(\"&\", \"\")\n    str1=str1.replace(\"@\", \"\")\n    str1=str1.replace(\"#\", \"\")\n    str1=str1.replace(\"$\", \"\")\n    str1=str1.replace(\"_\", \"\")\n    str1=str1.replace(\"/\", \"\")\n    str1=str1.replace(\"<\", \"\")\n    str1=str1.replace(\">\", \"\")\n    str1=str1.replace(\"'s\", \"\")\n    str1=str1.replace(\"'m\", \"\")\n    str1=str1.replace(\"'re\", \"\")\n    str1=str1.replace(\"n't\", \"\")\n    str1=str1.replace(\"'ll\", \"\")\n    str1=str1.replace(\"'d\", \"\")\n    str1=str1.replace(\"'ve\", \"\")\n    str1=str1.replace(\"'re\", \"\")\n    str1=str1.replace(\"'\", \"\")\n    str1=str1.replace(\"  \", \" \")\n    str1=str1.replace(\"  \", \" \")\n    str1=str1.split()\n    return str1\ndef remove_duplicate_words(str1):\n    '''\n    Write a function to remove duplicate words from a given string.\n    '''\n    str1=str1.replace(\" \", \"\")\n    str1=str1.replace(\",\", \"\")\n    str1=str1.replace(\"'\", \"\")\n    str1=str1.replace(\"\\\"\", \"\")\n    str1=str1.replace(\";\", \"\")\n    str1=str1.replace(\"(\", \"\")\n    str1=str1.replace(\")\", \"\")\n    str1=str1.replace(\"[\", \"\")\n    str1=str1.replace(\"]\", \"\")\n    str1=str1.replace(\"&\", \"\")\n    str1=str1.replace(\"@\", \"\")\n    str1=str1.replace(\"#\", \"\")\n    str1=str1.replace(\"$\", \"\")\n    str1=str1.replace(\"_\", \"\")\n    str1=str1.replace(\"/\", \"\")\n    str1=str1.replace(\"<\", \"\")\n    str1=str1.replace(\">\", \"\")\n    str1=str1.replace(\"'s\", \"\")\n    str1=str1.replace(\"'m\", \"\")\n    str1=str1.replace(\"'re\", \"\")\n    str1=str1.replace(\"n't\", \"\")\n    str1=str1.replace(\"'ll\", \"\")\n    str1=str1.replace(\"'d\", \"\")\n    str1=str1.replace(\"'ve\", \"\")\n    str1=str1.replace(\"'re\", \"\")\n    str1=str1.replace(\"'\", \"\")\n    str1=str1.replace(\"  \", \" \")\n    str1=str1.replace(\"  \", \" \")\n    str1=str1.split()\n    str2=[]\n    for i in str1:\n        if i not in str2:\n            str2.append(i)\n    return \" \".join(str2)\ndef is_abecedarian(str1):\n    '''\n    Write a function to determine whether a given string is abecedarian or not.\n    '''\n    str1"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return ''.join([x for x in str1 if not x.isupper()])\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[A-Z]+', '', str1)\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    result = ''\n    for i in str1:\n        if i.isalpha():\n            result += i\n    return result\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.translate(None, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return ''.join(l for l in str1 if l.islower())\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]+', '', str1)\ndef strip_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]+', '', str1)\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return re.sub('[^a-zA-Z]+', '', str1)\ndef create_password(s):\n    '''\n    Write a function to create a password from a string.\n    '''\n    p = re.sub('[^a-zA-Z]+', '', s)\n    l = len(p)\n    f = l//2\n    return p[:f]+p[-f:]\ndef generate_password(length):\n    '''\n    Write a function to generate a password of length 'length'\n    '''\n    p = ''\n    s = string.ascii_lowercase + string.ascii_uppercase + string.digits\n    for i in range(length):\n        p += random.choice(s)\n    return p\ndef even_digit(str1):\n    '''\n    Write a function to return all even digits in a given string.\n    '''\n    return re.findall('[0-9]*[02468]', str1)\ndef find_substring(str1,substring):\n    '''\n    Write a function to return the first index of a given substring in a given string.\n    '''\n    return str1.find(substring)\ndef replace_first_occurrence(str1,char1,char2):\n    '''\n    Write a function to replace the first occurrence of a given character in a given string with another given character.\n    '''\n    return re.sub(char1,char2,str1,1)\ndef string_concatenation(str1,str2):\n    '''\n    Write a function to join two strings by adding a space in between.\n    '''\n    return str1+str2\ndef remove_vowels(str1):\n    '''\n    Write a function to remove all vowels from a given string.\n    '''\n    return re.sub('[aeiouAEIOU]', '', str1)\ndef find_first_occurrence(str1,char1):\n    '''\n    Write a function to find the first occurrence of a given character in a given string.\n    '''\n    return str1.find(char1)\ndef remove_nth_occurrence(str1,char1,n):\n    '''\n    Write a function to remove nth occurrence of a given character from a given string.\n    '''\n    return re.sub(char1+'{%d,}'%n,char1*n,str1)\ndef change_case(str1,char1,char2):\n    '''\n    Write a function to change the case of a given string.\n    '''\n    return char1.upper() if str1.isupper() else char1.lower()\ndef all_equal(str1):\n    '''\n    Write a function to check whether a given string has all the same characters.\n    '''\n    return re.sub('[^a-zA-Z0-9]+', '', str1) == ''\ndef repeat_string(str1,n):\n    '''\n    Write a function to create a string with repeat 'n' times.\n    '''\n    return str1*n\ndef replace_spaces(str1):\n    '''\n    Write a function to replace all spaces in a given string with hyphen.\n    '''\n    return re.sub(' ', '-', str1)\ndef create_string_from_number(n):\n    '''\n    Write a function to create a string from a given number.\n    '''\n    s = ''\n    while n>0:\n        s = str(n%10) + s\n        n //= 10\n    return s\ndef replace_substring(str1,substring1,substring2):\n    '''\n    Write a function to replace a substring with another substring.\n    '''\n    return re.sub(substring1,substring2,str1)\ndef to_lowercase(str1):\n    '''\n    Write a function to convert a given string to all lowercase.\n    '''\n    return str1.lower()\ndef left_shift(str1,n):\n    '''\n    Write a function to shift a given string by a given number of characters.\n    '''\n    return str1[n:]+str1[:n]\ndef find_largest_string(str1,substring):\n    '''\n    Write a function to find the largest substring of a given string in which every character is repeated.\n    '''\n    f1 = find_first_occurrence(str1,substring[0])\n    f2 = f1+len(substring)\n    if f2 >= len(str1):\n        return None\n    return str1[f1:f2]\ndef count_occurrences(str1,char1):\n    '''\n    Write a function to find the count of the occurrences of a given character in a given string.\n    '''\n    return str1.count(char1)\ndef count_vowels(str1):\n    '''\n    Write a function to count the number of vowels in a given string.\n    '''\n    return sum(1 for i in str1 if i in 'aeiouAEIOU')\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    return str1[::-1] == str1\ndef is_pangram(str1):\n    '''\n    Write a function to check whether a given string is a pangram or not.\n    '''\n    return set(str1) == set('abcdefghijklmnopqrstuvwxyz')\ndef create_largest_palindrome(str1):\n    '''\n    Write a function to create the largest palindrome possible by adding characters to the given string.\n    '''\n    str2 = str1[:-1]+str1[::-1]\n    return str2 if str2 > str1 else str1\ndef swap_case(str1):\n    '''\n    Write a function to swap all the case characters in a given string to lowercase and uppercase.\n    '''\n    return str1.swapcase()\ndef count_vowels_and_consonants(str1):\n    '''\n    Write a function to count the number of vowels and consonants in a given string.\n    '''\n    v = sum(1 for i in str1 if i in 'aeiouAEIOU')\n    c = sum(1 for i in str1 if i in 'bcdfghjklmnpqrstvwxz')\n    return 'Vowels: {}\\nConsonants: {}'.format(v,c)\ndef check_pallindrome(str1):\n    '''\n    Write a function to check whether a given string is a pallindrome or not.\n    '''\n    return str1[::-1] == str1\ndef is_permutation(str1,str2):\n    '''\n    Write a function to check whether a given string is a permutation of a given string.\n    '''\n    return sorted(str1) == sorted(str2)\ndef remove_duplicate(str1):\n    '''\n    Write a function to remove duplicate characters from a given string.\n    '''\n    return ''.join(set(str1))\ndef random_string(length):\n    '''\n    Write a function to generate a random string of a given length.\n    '''\n    s = ''\n    for i in range(length):\n        s += random.choice(string.ascii_lowercase)\n    return s\ndef remove_nth_last_string(str1,n):\n    '''\n    Write a function to remove the nth last element from a given string.\n    '''\n    return str1[:-n]\ndef get_string_from_index(str1,index1,index2):\n    '''\n    Write a function to get a substring from the given indices of a given string.\n    ''"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    output = \"\"\n    for letter in str1:\n        if letter.isupper():\n            continue\n        else:\n            output += letter\n    return output\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]', '', str1)\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return([item[0] for item in lst])\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = [] \n    for i in lst: \n        res.append(i[0]) \n    return res \n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first = []\n    for x in lst:\n        first.append(x[0])\n    return first\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[0] for lst in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    ans = []\n    for i in lst:\n        ans.append(i[0])\n    return ans\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Function to extract first element of each sublist\n    res = [] \n    for sub in lst: \n        res.append(sub[0]) \n    return res \n    \n    \n    "
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for i in str:\n        if(i.isupper()):\n            upper_count = upper_count+1\n    return upper_count\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    #str = raw_input(\"enter string\")\n    n = 0\n    for i in str:\n        if(i.isupper()):\n            n = n + 1\n    return n\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(0, len(str)):\n        if str[i].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum([1 for ch in str if ch.isupper()])\n    \ndef lower_ctr(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    return sum([1 for ch in str if ch.islower()])\n    \ndef digit_ctr(str):\n    '''\n    Write a python function to count the digits in a given string.\n    '''\n    return sum([1 for ch in str if ch.isdigit()])\n    \ndef title_ctr(str):\n    '''\n    Write a python function to count the title case characters in a given string.\n    '''\n    return sum([1 for ch in str if ch.istitle()])\n    \ndef python_ctr(str):\n    '''\n    Write a python function to count the python characters in a given string.\n    '''\n    return sum([1 for ch in str if ch in 'python'])\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(1 for c in str if c.isupper())\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if(str[i] >= 'A' and str[i] <= 'Z'):\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum([1 for c in str if c.isupper()])\n    \ndef lower_ctr(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    return sum([1 for c in str if c.islower()])\n    \ndef sum_string(str):\n    '''\n    Write a python function to sum all the characters in a given string.\n    '''\n    return sum([ord(c) for c in str])\n    \ndef avg_char(str):\n    '''\n    Write a python function to calculate the average character length of a given string.\n    '''\n    return float(sum_string(str))/len(str)\n    \ndef factorial(n):\n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*factorial(n-1)\n    \ndef is_palindrome(str):\n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    return str == str[::-1]\n    \ndef count_vowels(str):\n    '''\n    Write a python function to count the vowels in a given string.\n    '''\n    return sum([1 for c in str if c in \"aeiouAEIOU\"])\n    \ndef is_unique(str):\n    '''\n    Write a python function to check if a given string contains all unique characters.\n    '''\n    return len(set(str)) == len(str)\n    \ndef get_unique(str):\n    '''\n    Write a python function to get the set of unique characters in a given string.\n    '''\n    return set(str)\n    \ndef to_hex(n):\n    '''\n    Write a python function to convert an integer to hexadecimal string.\n    '''\n    # code here\n    if n == 0:\n        return \"0\"\n    elif n > 0:\n        return to_hex(n // 16) + hex(n)[2:]\n    else:\n        return to_hex(-n // 16) + hex(-n)[2:]\n    \ndef is_binary(str):\n    '''\n    Write a python function to check if a given string contains only 0s and 1s.\n    '''\n    return all(c in \"01\" for c in str)\n    \ndef count_binary(str):\n    '''\n    Write a python function to count the number of times a given string occurs in a larger string.\n    '''\n    return sum([str.count(c) for c in set(str)])\n    \ndef get_longest_repeated_substring(str):\n    '''\n    Write a python function to find the length of the longest repeated substring in a given string.\n    '''\n    result = -1\n    for i in range(len(str)):\n        for j in range(i + 1, len(str) + 1):\n            if str[i:j] == str[i:j][::-1]:\n                result = max(result, j - i)\n    return result\n    \ndef get_longest_all_vowels(str):\n    '''\n    Write a python function to find the length of the longest substring containing all vowels.\n    '''\n    result = -1\n    for i in range(len(str)):\n        vowel_count = 0\n        for j in range(i, len(str)):\n            if str[j] in \"aeiouAEIOU\":\n                vowel_count += 1\n            if vowel_count == 5:\n                result = max(result, j - i + 1)\n                break\n    return result\n    \ndef is_pangram(str):\n    '''\n    Write a python function to check if a given string is a pangram.\n    '''\n    return len(get_longest_all_vowels(str)) == len(str)\n    \ndef get_longest_common_prefix(strs):\n    '''\n    Write a python function to find the length of the longest common prefix in a given list of strings.\n    '''\n    result = \"\"\n    for i in range(len(strs[0])):\n        for j in range(1, len(strs)):\n            if i >= len(strs[j]) or strs[0][i]!= strs[j][i]:\n                return result\n        result += strs[0][i]\n    return result\n    \ndef get_longest_common_suffix(strs):\n    '''\n    Write a python function to find the length of the longest common suffix in a given list of strings.\n    '''\n    result = \"\"\n    for i in range(len(strs[0])):\n        for j in range(1, len(strs)):\n            if i >= len(strs[j]) or strs[0][i]!= strs[j][i]:\n                return result\n        result = strs[0][i:]\n    return result\n    \ndef print_matrix(matrix):\n    '''\n    Write a python function to print a matrix.\n    '''\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            print(matrix[i][j], end = \" \")\n        print()\n    print()\n    \ndef print_pascal(n):\n    '''\n    Write a python function to print the first n rows of Pascal's triangle.\n    '''\n    # code here\n    result = []\n    for i in range(n):\n        result.append([1] * (i + 1))\n        for j in range(1, i):\n            result[i][j] = result[i-1][j-1] + result[i-1][j]\n        result[i].append(1)\n    print_matrix(result)\n    \ndef print_pascal_triangle(n):\n    '''\n    Write a python function to print the first n rows of Pascal's triangle.\n    '''\n    # code here\n    for i in range(n):\n        print([1] * (i + 1))\n        for j in range(1, i):\n            print(result[i][j], end = \" \")\n        print()\n    print()\n    \ndef print_zigzag(matrix, n):\n    '''\n    Write a python function to print the first n rows of Zig-Zag pattern.\n    '''\n    # code here\n    for i in range(n):\n        for j in range(i + 1):\n            if j % 2 == 0:\n                print(matrix[i][j], end = \" \")\n            else:\n                print(matrix[i][-(j + 1)], end = \" \")\n        print()\n    print()\n    \ndef print_hollow_pascal(n):\n    '''\n    Write a python function to print the first n rows of Hollow Pascal's triangle.\n    '''\n    # code here\n    for i in range(n):\n        for j in range(i + 1):\n            if j == 0 or j == i:\n                print(1, end = \" \")\n            else:\n                print(result[i][j-1] + result[i][j], end = \" \")\n        print()\n    print()\n    \ndef print_triangle(n):\n    '''\n    Write a python function to print the first n rows of triangle.\n    '''\n    # code here\n    for i in range(n):\n        for j in range(i + 1):\n            print(result[i][j], end = \" \")\n        print()\n    print()\n    \ndef print_box(n):\n    '''\n    Write a python function to print a hollow square of size n.\n    '''\n    # code here\n    for i in range(n):\n        if i == 0 or i == n-1:\n            print(\"*\" * (n+2))\n        else:\n            print(\"*\" + (\" \" * (n-2)) + \"*\")\n    print()\n    \ndef print_spiral_sequence(n):\n    '''\n    Write a python function to print a spiral sequence.\n    '''\n    # code here\n    for i in range(n):\n        for j in range(i):\n            print(\" \", end = "
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([c for c in str if c.isupper()])\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        result = []\n        for i in range(len(list1)):\n            list2 = list1[:i] + list1[i+1:]\n            result.extend(combinations_list(list2))\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list2 = []\n    for i in range(1,len(list1)):\n        for j in combinations_list(list1[:i]+list1[i+1:]):\n            list2.append([list1[i]]+j)\n    return list2\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    output = []\n    if len(list1)==1:\n        return list1\n    else:\n        for i in list1:\n            newlist = list1[:]\n            newlist.remove(i)\n            output.append([i])\n            for j in combinations_list(newlist):\n                output.append(j+[i])\n    return output\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return [[]]\n    previous_combinations = combinations_list(list1[1:])\n    new_combinations = []\n    for element1 in list1[0]:\n        for combination in previous_combinations:\n            new_combinations.append([element1] + combination)\n    return new_combinations + previous_combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in combinations(list1,i+1):\n            print(j)\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) < 2:\n        return [list1]\n    list2 = list1[1:]\n    res = []\n    for sub_list1 in combinations_list(list1):\n        for sub_list2 in combinations_list(list2):\n            res.append(sub_list1 + sub_list2)\n    return res\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    def combine(l1, l2):\n        return [a + b for a in l1 for b in l2]\n    \n    combs = [[]]\n    for i in range(len(list1)):\n        for j in range(i):\n            combs = combine(combs, [list1[j]])\n        combs = combine(combs, [list1[i]])\n    return combs\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if not list1:\n        return []\n    res = [list1]\n    for i in range(1,len(list1)):\n        for l in res:\n            newl = l + [list1[0]]\n            res.append(newl)\n    return res\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    import itertools\n    l1 = len(list1)\n    l2 = len(list1[0])\n    if l1 == 0:\n        return []\n    if l1 == 1:\n        return [[x] for x in list1[0]]\n    l3 = []\n    for item in itertools.product(*list1):\n        l3.append(list(item))\n    return l3\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if not list1:\n        return []\n    if len(list1) == 1:\n        return [[list1[0]]]\n    \n    combinations = []\n    for i in range(len(list1)):\n        sub_combinations = combinations_list(list1[:i] + list1[i+1:])\n        for c in sub_combinations:\n            combinations.append([list1[i]] + c)\n    return combinations\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    start_index = 0\n    end_index = 0\n    max_subarray_product = arr[0]\n    for i in xrange(len(arr)):\n        if arr[i] < 0:\n            start_index = i\n            end_index = i\n            max_subarray_product = arr[i]\n            break\n    for j in xrange(i, len(arr)):\n        if arr[j] >= 0:\n            end_index = j\n            max_subarray_product *= arr[j]\n        else:\n            if max_subarray_product < arr[j]*arr[start_index]:\n                max_subarray_product = arr[j]*arr[start_index]\n            start_index = i\n            end_index = j\n            max_subarray_product *= arr[j]\n    return max_subarray_product\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_product = arr[0]\n    left_max = arr[0]\n    right_max = arr[-1]\n    current_max = arr[0]\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    \n    for i in xrange(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_ending_here, max_so_far)\n    \n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if arr is None or len(arr) == 0:\n        return None\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product, min_product = 1, 1\n    for i in arr:\n        if i >= 0:\n            max_product = max(max_product, i)\n        else:\n            min_product = min(min_product, i)\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # The maximum product subarray is the subarray with maximum product and the maximum sum of this subarray is the answer.\n    # So we need to find the maximum product in subarrays in arr.\n    # We have to find the maximum sum in the subarrays.\n    # For the given array [1, 2, 3, -4, 5]\n    # We can have 3 subarrays :\n    # 1, 2, 3\n    # 1, 2, 3, -4\n    # 1, 2, 3, -4, 5\n    # The maximum sum of subarrays of a given array is sum of all the elements.\n    # The maximum product of subarrays is product of all the elements.\n    # So, the maximum product subarray is the subarray of the array with maximum sum and the maximum product is the answer.\n    # Initialize the result and the current sum and current product to zero\n    result = 0\n    current_sum = 0\n    current_product = 1\n    for i in range(len(arr)):\n        # If the current element is a negative number, we can't use it. So we skip it\n        if arr[i] < 0:\n            # So we can start the new subarray from the next element\n            current_sum = 0\n            current_product = 1\n            continue\n        # Add the current element to the current sum and to the current product\n        current_sum += arr[i]\n        current_product *= arr[i]\n        # If the current sum is negative, we can't use the current element. So we skip it\n        if current_sum < 0:\n            current_sum = 0\n            current_product = 1\n        # Update the result if the current product is greater than the result so far\n        if current_product > result:\n            result = current_product\n    return result\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    for i in arr[1:]:\n        if i > 0:\n            max_ending_here = max(i, max_ending_here * i)\n        else:\n            max_ending_here = i\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    curr_max, max_so_far = 1, 1\n    for i in range(len(arr)):\n        curr_max = max(arr[i], arr[i] * curr_max)\n        max_so_far = max(max_so_far, curr_max)\n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if arr == None or len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    max_end = 0\n    max_so_far = 0\n    for i in range(len(arr)):\n        max_end = max_end + arr[i]\n        if max_end < 0:\n            max_end = 0\n        if max_so_far < max_end:\n            max_so_far = max_end\n    return max_so_far\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(dict[k] for k in dict) and len(set(dict.values())) == 1\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    i = 0\n    for key in dict:\n        i+=1\n        if i<=1:\n            first = dict[key]\n        else:\n            if first!= dict[key]:\n                return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) < 2:\n        return True\n    else:\n        x = dict.values()\n        x = list(x)\n        if x.count(x[0]) == len(x):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if not (dict[key] == dict[key][0]):\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    return False\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict.keys():\n        if type(dict[key]) == type([]):\n            if len(dict[key])!= n:\n                return False\n        elif dict[key]!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) < 2:\n        return False\n    value = list(dict.values())[0]\n    for i in dict:\n        if dict[i]!= value:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    #for key, value in dict.items():\n    #    if value!= n:\n    #        return False\n    #return True\n    for value in dict.values():\n        if value!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.values():\n        if i!= n:\n            return False\n    return True\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict2 = {}\n    for key, value in dict1.items():\n        if value:\n            dict2[key] = value\n    return dict2\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict((k,v) for k,v in dict1.items() if v)\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k, v in dict1.items() if v is not None}\n    \n    \ndef drop_none(list1):\n    '''\n    Write a function to drop empty items from a given list.\n    '''\n    return [v for v in list1 if v is not None]\n    \n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    \n    # Code here\n    for key in list(dict1.keys()):\n        if len(dict1[key]) == 0:\n            del dict1[key]\n    return dict1\n        \n        \n        "
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    d = {}\n    for k, v in dict1.items():\n        if v:\n            d[k] = v\n    return d\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for (k,v) in dict1.items() if v!=[]}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in list(dict1.items()):\n        if value == '':\n            del dict1[key]\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v!= ''}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    \n    dict2 = {}\n    for k, v in dict1.items():\n        if v!= []:\n            dict2[k] = v\n    return dict2\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_prod = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] <= 0:\n            continue\n        max_prod = max(max_prod, arr[i] * arr[i-1] * arr[i-2])\n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    n = len(arr)\n    left_to_right = [0]*n\n    right_to_left = [0]*n\n    left_to_right[0] = arr[0]\n    right_to_left[n-1] = arr[n-1]\n    \n    for i in range(1,n):\n        left_to_right[i] = max(arr[i],left_to_right[i-1]*arr[i])\n    \n    for i in range(n-2,-1,-1):\n        right_to_left[i] = max(arr[i],right_to_left[i+1]*arr[i])\n    \n    result = 0\n    for i in range(n):\n        result = max(result,left_to_right[i]*right_to_left[i])\n    \n    return result\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) <= 1:\n        return arr[0]\n    else:\n        mul = arr[0]\n        for i in range(1, len(arr)):\n            mul = max(mul, mul * arr[i])\n        return mul\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    arr.sort()\n    ans = 1\n    for i in xrange(len(arr)-1, -1, -1):\n        ans = ans * arr[i]\n    return ans\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_so_far = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in xrange(1, len(arr)):\n        if arr[i] > 0:\n            max_ending_here = max(arr[i], max_ending_here * arr[i])\n            min_ending_here = min(arr[i], min_ending_here * arr[i])\n        else:\n            max_ending_here = max(arr[i], min_ending_here * arr[i])\n            min_ending_here = min(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_ending_here, max_so_far)\n    return max_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = arr[0]\n    current_product = arr[0]\n    for i in xrange(1, len(arr)):\n        current_product = max(current_product * arr[i], arr[i])\n        max_product = max(current_product, max_product)\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # dp[i] represents the max product formed by multiplying i-th element of the array.\n    dp = [0] * len(arr)\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) < 3:\n        return None\n    if len(arr) == 3:\n        return arr[0]*arr[1]*arr[2]\n    \n    curr = 1\n    max_product = arr[0]*arr[1]*arr[2]\n    \n    for i in range(3, len(arr)):\n        if arr[i-1] >= arr[i]:\n            curr *= arr[i-1]\n        else:\n            curr = 1\n        if curr > max_product:\n            max_product = curr\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr)==0:\n        return 1\n    arr.insert(0,0)\n    max_product=0\n    for i in xrange(1,len(arr)):\n        max_product=max(max_product,arr[i]*arr[i-1]*arr[i])\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product_arr = [1] * len(arr)\n    max_product_arr[0] = arr[0]\n    max_product_arr[1] = max(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        max_product_arr[i] = max(max_product_arr[i-1] * arr[i], max_product_arr[i-2] * arr[i], arr[i])\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    for i in range(len(test_tup)-1):\n        yield test_tup[i] + test_tup[i+1]\n        \ndef add_n_pairwise(n):\n    '''\n    Write a function to find the n-th pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = ()\n    i = 0\n    while i < n:\n        result = result + (add_pairwise(result),)\n        i = i + 1\n    return result\n    \ndef test_add_pairwise():\n    assert (add_pairwise((1,3,5,7,9)) == (2,4,6,8,10))\n    assert (add_pairwise((0,1,2,3,4,5)) == (2,4,6,8,10,12))\n    assert (add_pairwise((-1,-3,-5,-7,-9,-11)) == (-2,-4,-6,-8,-10,-12))\n    \ndef test_add_n_pairwise():\n    assert (add_n_pairwise(3) == ((1,3,5),(2,4,6),(3,5,7)))\n    assert (add_n_pairwise(5) == ((0,1,2,3,4),(1,2,3,4,5),(2,3,4,5,6),(3,4,5,6,7),(4,5,6,7,8),(5,6,7,8,9),(6,7,8,9,10),(7,8,9,10,11),(8,9,10,11,12),(9,10,11,12,13),(10,11,12,13,14)))\n    \ndef add_n_pairwise2(n):\n    '''\n    Write a function to find the n-th pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = ()\n    for i in range(n):\n        result = result + (add_pairwise(result),)\n    return result\n    \ndef test_add_n_pairwise2():\n    assert (add_n_pairwise2(3) == ((1,3,5),(2,4,6),(3,5,7)))\n    assert (add_n_pairwise2(5) == ((0,1,2,3,4),(1,2,3,4,5),(2,3,4,5,6),(3,4,5,6,7),(4,5,6,7,8),(5,6,7,8,9),(6,7,8,9,10),(7,8,9,10,11),(8,9,10,11,12),(9,10,11,12,13),(10,11,12,13,14)))\n    \ndef add_n_pairwise3(n):\n    '''\n    Write a function to find the n-th pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = ()\n    for i in range(n):\n        result = result + (add_pairwise(result),)\n    return result\n    \ndef test_add_n_pairwise3():\n    assert (add_n_pairwise3(3) == ((1,3,5),(2,4,6),(3,5,7)))\n    assert (add_n_pairwise3(5) == ((0,1,2,3,4),(1,2,3,4,5),(2,3,4,5,6),(3,4,5,6,7),(4,5,6,7,8),(5,6,7,8,9),(6,7,8,9,10),(7,8,9,10,11),(8,9,10,11,12),(9,10,11,12,13),(10,11,12,13,14)))\n    \ndef add_n_pairwise4(n):\n    '''\n    Write a function to find the n-th pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = ()\n    for i in range(n):\n        result = result + (add_pairwise(result),)\n    return result\n    \ndef test_add_n_pairwise4():\n    assert (add_n_pairwise4(3) == ((1,3,5),(2,4,6),(3,5,7)))\n    assert (add_n_pairwise4(5) == ((0,1,2,3,4),(1,2,3,4,5),(2,3,4,5,6),(3,4,5,6,7),(4,5,6,7,8),(5,6,7,8,9),(6,7,8,9,10),(7,8,9,10,11),(8,9,10,11,12),(9,10,11,12,13),(10,11,12,13,14)))\n    \ndef add_n_pairwise5(n):\n    '''\n    Write a function to find the n-th pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = ()\n    for i in range(n):\n        result = result + (add_pairwise(result),)\n    return result\n    \ndef test_add_n_pairwise5():\n    assert (add_n_pairwise5(3) == ((1,3,5),(2,4,6),(3,5,7)))\n    assert (add_n_pairwise5(5) == ((0,1,2,3,4),(1,2,3,4,5),(2,3,4,5,6),(3,4,5,6,7),(4,5,6,7,8),(5,6,7,8,9),(6,7,8,9,10),(7,8,9,10,11),(8,9,10,11,12),(9,10,11,12,13),(10,11,12,13,14)))\n    \ndef add_n_pairwise6(n):\n    '''\n    Write a function to find the n-th pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = ()\n    for i in range(n):\n        result = result + (add_pairwise(result),)\n    return result\n    \ndef test_add_n_pairwise6():\n    assert (add_n_pairwise6(3) == ((1,3,5),(2,4,6),(3,5,7)))\n    assert (add_n_pairwise6(5) == ((0,1,2,3,4),(1,2,3,4,5),(2,3,4,5,6),(3,4,5,6,7),(4,5,6,7,8),(5,6,7,8,9),(6,7,8,9,10),(7,8,9,10,11),(8,9,10,11,12),(9,10,11,12,13),(10,11,12,13,14)))\n    \ndef add_n_pairwise7(n):\n    '''\n    Write a function to find the n-th pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = ()\n    for i in range(n):\n        result = result + (add_pairwise(result),)\n    return result\n    \ndef test_add_n_pairwise7():\n    assert (add_n_pairwise7(3) == ((1,3,5),(2,4,6),(3,5,7)))\n    assert (add_n_pairwise7(5) == ((0,1,2,3,4),(1,2,3,4,5),(2,3,4,5,6),(3,4,5,6,7),(4,5,6,7,8),(5,6,7,8,9),(6,7,8,9,10),(7,8,9,10,11),(8,9,10,11,12),(9,10,11,12,13),(10,11,12,13,14)))\n    \ndef ad"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    \n    out = []\n    for i in range(1, len(test_tup)):\n        out.append(test_tup[i] + test_tup[i-1])\n    return tuple(out)\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return test_tup\n    else:\n        return tuple(test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1))\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return test_tup[0]\n    else:\n        return test_tup[0] + test_tup[1] + add_pairwise(test_tup[2:])\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) <= 1:\n        return 0\n    elif len(test_tup) == 2:\n        return test_tup[0] + test_tup[1]\n    else:\n        return test_tup[0] + test_tup[1] + add_pairwise((test_tup[1:], test_tup[:1]))\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    res = 0\n    for i in range(len(test_tup)-1):\n        res = res + test_tup[i]\n    return res\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[i] + test_tup[i+1] for i in xrange(len(test_tup)-1))\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(tup[i] for i in range(len(tup)-1)) + tup[-1]\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) <= 1:\n        return \n    else:\n        print(test_tup[0] + test_tup[1])\n        return test_tup[0] + test_tup[1] + add_pairwise(test_tup[1:])\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    if n < 1:\n        return\n    if n == 1:\n        return\n    a,b = test_tup[0], test_tup[1]\n    return (a+b, b+a)\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    mult = 1\n    for i in arr:\n        mult = (mult * i) % n\n    return mult\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for elem in arr: \n        prod = (prod*elem) % n\n    return prod\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # (a*b)%n = (a%n * b%n)%n\n    # (a%n * b%n)%n = (a%n * b%n + n)%n\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Initialize the output as 1\n    output = 1\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    left = 1\n    for i in arr:\n        left = (left * i) % n\n    return left\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    mul = 1\n    for i in arr:\n        mul *= i\n    return mul % n\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    total = 1\n    for i in range(len(arr)): \n        total *= arr[i]\n    return (total % n)\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(1,len(l)):\n        if l[i] - l[i-1]!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n=len(l)\n    \n    for i in xrange(n-1):\n        if l[i]!=l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    i = 0\n    while i < n-1:\n        if l[i] + 1 == l[i+1]:\n            i = i + 1\n        else:\n            break\n    if i == n-1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(1,len(l)):\n        if l[i] - l[i-1]!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i]+1!= l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # len(l) >= 2\n    for i in range(1, len(l)):\n        if l[i] - l[i-1]!= 1:\n            return False\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return sorted(l) == list(range(min(l), max(l)+1))\n    \ndef check_distinct(l): \n    '''\n    Write a python function to check whether the given list contains distinct elements or not.\n    '''\n    return len(l) == len(set(l))\n    \ndef check_count(l): \n    '''\n    Write a python function to check whether the given list contains same number of elements or not.\n    '''\n    return len(l) == len(set(l))\n    \ndef check_reverse(l): \n    '''\n    Write a python function to check whether the given list is in reverse order or not.\n    '''\n    return l == l[::-1]\n    \ndef check_palindrome(l): \n    '''\n    Write a python function to check whether the given list is a palindrome or not.\n    '''\n    return l == l[::-1]\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    for i in xrange(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i]+1!= l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return [x for x in test_list1 if x in test_list2]\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    if len(test_list1) == len(test_list2):\n        for i in xrange(len(test_list1)):\n            if test_list1[i] in test_list2:\n                intersection_list.append(test_list1[i])\n    return intersection_list\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1) & set(test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1, test_list2 = sorted(test_list1), sorted(test_list2)\n    i, j = 0, 0\n    tuple_list = []\n    while i < len(test_list1) and j < len(test_list2):\n        if test_list1[i] == test_list2[j]:\n            tuple_list.append(test_list1[i])\n            i += 1\n            j += 1\n        elif test_list1[i] < test_list2[j]:\n            i += 1\n        else:\n            j += 1\n    return tuple(tuple_list)\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_set1 = set(test_list1)\n    tuple_set2 = set(test_list2)\n    intersect_set = tuple_set1.intersection(tuple_set2)\n    return list(intersect_set)\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for element in test_list1:\n        if element in test_list2:\n            intersection.append(element)\n    return intersection\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if not len(test_list1) and not len(test_list2):\n        return 0\n    if not len(test_list1) or not len(test_list2):\n        return -1\n    test_list1 = list(set(test_list1))\n    test_list2 = list(set(test_list2))\n    tuple_list = []\n    for x in test_list1:\n        for y in test_list2:\n            if x == y:\n                tuple_list.append(x)\n    if len(tuple_list) == 0:\n        return -1\n    return tuple_list\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1).intersection(set(test_list2)))\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return tuple(set1.intersection(set2))\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    \n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    if set1.intersection(set2):\n        return set1.intersection(set2)\n    else:\n        return \"No tuple intersection\"\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str1[i] = newch\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if ch not in str1:\n        return str1\n    else:\n        return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    result=[]\n    for c in str1:\n        if c == ch:\n            result.append(newch)\n        else:\n            result.append(c)\n    return \"\".join(result)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if(str1 == ''):\n        return ''\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    return str1\n    \n    \n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2 = sorted(dict1.items(), key=lambda x:x[1])\n    return dict2\ndef sort_dict_by_key(dict1):\n    '''\n    Write a function to sort a dictionary by key.\n    '''\n    dict2 = sorted(dict1.items(), key=lambda x:x[0])\n    return dict2\ndef sort_dict_by_val(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2 = sorted(dict1.items(), key=lambda x:x[1], reverse=True)\n    return dict2\ndef sort_dict_by_val_reverse(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2 = sorted(dict1.items(), key=lambda x:x[1], reverse=False)\n    return dict2\ndef sort_dict_by_val_reverse_key(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2 = sorted(dict1.items(), key=lambda x:x[1], reverse=True)\n    return dict2\ndef get_random_dict():\n    '''\n    Write a function to get a random dictionary from a list of dictionaries.\n    '''\n    dict1 = {'a': 'b', 'c': 'd', 'e': 'f'}\n    dict2 = {'b': 'a', 'd': 'c', 'f': 'e'}\n    dict3 = {'a': 'c', 'c': 'b', 'e': 'f'}\n    dict4 = {'a': 'b', 'c': 'd', 'f': 'e'}\n    dict5 = {'b': 'a', 'd': 'c', 'e': 'f'}\n    dict6 = {'a': 'c', 'c': 'b', 'e': 'f'}\n    dict7 = {'a': 'b', 'c': 'd', 'f': 'e'}\n    dict8 = {'a': 'c', 'c': 'b', 'e': 'f'}\n    dict9 = {'a': 'c', 'c': 'b', 'f': 'e'}\n    return [dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9]\ndef get_random_dict_from_list_of_dict(list_of_dict):\n    '''\n    Write a function to get a random dictionary from a list of dictionaries.\n    '''\n    random_dict = list_of_dict[random.randint(0, 9)]\n    return random_dict\ndef get_random_dict_from_list_of_dict2(list_of_dict):\n    '''\n    Write a function to get a random dictionary from a list of dictionaries.\n    '''\n    random_dict = list_of_dict[random.randint(0, len(list_of_dict)-1)]\n    return random_dict\ndef print_random_dict_from_list_of_dict(list_of_dict):\n    '''\n    Write a function to get a random dictionary from a list of dictionaries.\n    '''\n    print(get_random_dict_from_list_of_dict(list_of_dict))\ndef print_random_dict_from_list_of_dict2(list_of_dict):\n    '''\n    Write a function to get a random dictionary from a list of dictionaries.\n    '''\n    print(get_random_dict_from_list_of_dict2(list_of_dict))\ndef get_list_of_dict_keys_from_random_dict(random_dict):\n    '''\n    Write a function to get list of keys of a random dictionary.\n    '''\n    return list(random_dict.keys())\ndef get_list_of_dict_values_from_random_dict(random_dict):\n    '''\n    Write a function to get list of values of a random dictionary.\n    '''\n    return list(random_dict.values())\ndef get_list_of_dict_keys_and_values_from_random_dict(random_dict):\n    '''\n    Write a function to get list of keys of a random dictionary.\n    '''\n    return list(random_dict.items())\ndef get_list_of_dict_keys_and_values_from_random_dict(random_dict):\n    '''\n    Write a function to get list of keys of a random dictionary.\n    '''\n    return list(random_dict.items())\ndef get_list_of_dict_values_from_random_dict(random_dict):\n    '''\n    Write a function to get list of values of a random dictionary.\n    '''\n    return list(random_dict.values())\ndef get_list_of_dict_values_from_random_dict(random_dict):\n    '''\n    Write a function to get list of values of a random dictionary.\n    '''\n    return list(random_dict.values())\ndef get_list_of_dict_values_from_random_dict_with_key(random_dict, key):\n    '''\n    Write a function to get list of values of a random dictionary.\n    '''\n    return list(random_dict.get(key))\ndef get_list_of_dict_values_from_random_dict_with_key(random_dict, key):\n    '''\n    Write a function to get list of values of a random dictionary.\n    '''\n    return list(random_dict.get(key))\ndef get_list_of_dict_values_from_random_dict_with_key_and_sort(random_dict, key):\n    '''\n    Write a function to get list of values of a random dictionary.\n    '''\n    return sorted(random_dict.get(key))\ndef get_list_of_dict_values_from_random_dict_with_key_and_sort(random_dict, key):\n    '''\n    Write a function to get list of values of a random dictionary.\n    '''\n    return sorted(random_dict.get(key))\ndef get_list_of_dict_values_from_random_dict_with_key_and_sort_reverse(random_dict, key):\n    '''\n    Write a function to get list of values of a random dictionary.\n    '''\n    return sorted(random_dict.get(key), reverse=True)\ndef get_list_of_dict_values_from_random_dict_with_key_and_sort_reverse(random_dict, key):\n    '''\n    Write a function to get list of values of a random dictionary.\n    '''\n    return sorted(random_dict.get(key), reverse=True)\ndef get_list_of_dict_values_from_random_dict_with_key_and_sort_reverse_key(random_dict, key):\n    '''\n    Write a function to get list of values of a random dictionary.\n    '''\n    return sorted(random_dict.get(key), reverse=True)\ndef get_list_of_dict_values_from_random_dict_with_key_and_sort_reverse_key(random_dict, key):\n    '''\n    Write a function to get list of values of a random dictionary.\n    '''\n    return sorted(random_dict.get(key), reverse=True)\ndef get_list_of_dict_values_from_random_dict_with_key_and_sort_reverse_key(random_dict, key):\n    '''\n    Write a function to get list of values of a random dictionary.\n    '''\n    return sorted(random_dict.get(key), reverse=True)\ndef get_list_of_dict_values_from_random_dict_with_key_and_sort_reverse_key(random_dict, key):\n    '''\n    Write a function to get list of values of a random dictionary.\n    '''\n    return sorted(random_dict.get(key), reverse=True)\ndef get_list_of_dict_values_from_random_dict_with_key_and_sort_reverse_key(random_dict, key):\n    '''\n    Write a function to get list of values of a random dictionary.\n    '''\n    return sorted(random_dict.get(key), reverse=True)\ndef get_list_of_dic"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x:x[1], reverse=True)\n    # return sorted(dict1.items(), key=lambda x:x[1])\n    # return sorted(dict1.items(), key=lambda x:x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a list of tuples from dictionary\n    sorted_list = sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    return sorted_list\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1])\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return {k:v for k,v in sorted(dict1.items(), key = lambda x: x[1], reverse=True)}\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2=sorted(dict1.items(), key=lambda x:x[1], reverse=True)\n    return dict2\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1 = sorted(dict1.items(), key=lambda x:x[1], reverse=True)\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    pass\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x : x[1], reverse = True)\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::2])\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    big_num = max(nums)\n    small_num = min(nums)\n    return big_num + small_num\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # return sum(sorted(nums)[-2:])\n    return sum(sorted(nums)[-2:])\n    # return sum(sorted(nums)[-1:])\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    n = len(nums)\n    return sum(nums) - max(nums) - min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    big = 0\n    small = 0\n    for i in nums:\n        if i > big:\n            big = i\n        if i < small:\n            small = i\n    return big + small\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest_value = None\n    smallest_value = None\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum=0\n    for i in nums:\n        sum+=i\n    print('The sum of largest and smallest elements in an array is: ')\n    print(sum)\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    return nums[0] + nums[-1]\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    try:\n        lower_string = string.lower()\n        return lower_string\n    except TypeError:\n        return \"The input is not a string.\"\n    except AttributeError:\n        return \"The input is not a string.\"\n    except:\n        return \"There is some error in your code.\"\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    return lower_string\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    for character in string:\n        if character.isupper():\n            return False\n    return True\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    \n    str1 = str1.lower()\n    pattern = re.compile(r'[a-z]+')\n    str1 = pattern.sub('',str1)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    result = ''\n    for i in str1:\n        if i.isupper():\n            result = result + i\n    return result\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            str2=str2+str1[i]\n    return str2\ndef remove_doubles(str1):\n    '''\n    Write a function to remove duplicate characters in a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i] not in str2:\n            str2=str2+str1[i]\n    return str2\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation marks from a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i] not in '''!\"#$%&'()*+,./:;<=>?@[\\\\]^_`{|}~''':\n            str2=str2+str1[i]\n    return str2\ndef remove_numbers(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if not str1[i].isdigit():\n            str2=str2+str1[i]\n    return str2\ndef remove_stopwords(str1,stopwords_list):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i] not in stopwords_list:\n            str2=str2+str1[i]\n    return str2\ndef remove_whitespaces(str1):\n    '''\n    Write a function to remove whitespace characters from a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i] not in '\\n\\t ':\n            str2=str2+str1[i]\n    return str2\ndef remove_punctuation_and_lowercase(str1):\n    '''\n    Write a function to remove punctuation and lowercase characters from a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i] not in '''!\"#$%&'()*+,./:;<=>?@[\\\\]^_`{|}~''' and str1[i].isalpha():\n            str2=str2+str1[i].lower()\n    return str2\ndef remove_numbers_and_lowercase(str1):\n    '''\n    Write a function to remove numbers and lowercase characters from a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            str2=str2+str1[i].lower()\n    return str2\ndef remove_punctuation_and_numbers(str1):\n    '''\n    Write a function to remove punctuation and numbers from a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i].isalpha() or str1[i].isdigit():\n            str2=str2+str1[i]\n    return str2\ndef remove_lowercase_and_punctuation(str1):\n    '''\n    Write a function to remove lowercase and punctuation characters from a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i] not in '''!\"#$%&'()*+,./:;<=>?@[\\\\]^_`{|}~''' and str1[i].isalpha():\n            str2=str2+str1[i]\n    return str2\ndef remove_lowercase_and_numbers(str1):\n    '''\n    Write a function to remove lowercase and numbers from a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i].isalpha() or str1[i].isdigit():\n            str2=str2+str1[i]\n    return str2\ndef remove_punctuation_and_lowercase_and_numbers(str1):\n    '''\n    Write a function to remove punctuation, lowercase and numbers from a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i].isalpha() or str1[i].isdigit():\n            str2=str2+str1[i]\n    return str2\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if not str1[i].isdigit():\n            str2=str2+str1[i]\n    return str2\ndef remove_digits_and_punctuation(str1):\n    '''\n    Write a function to remove digits and punctuation marks from a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i].isdigit() or str1[i] not in '''!\"#$%&'()*+,./:;<=>?@[\\\\]^_`{|}~''':\n            str2=str2+str1[i]\n    return str2\ndef remove_numbers_and_digits(str1):\n    '''\n    Write a function to remove digits and numbers from a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i].isdigit() or str1[i].isalpha():\n            str2=str2+str1[i]\n    return str2\ndef remove_whitespaces_and_digits(str1):\n    '''\n    Write a function to remove whitespaces and digits from a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i].isdigit() or str1[i] not in '\\n\\t ':\n            str2=str2+str1[i]\n    return str2\ndef remove_digits_and_whitespaces(str1):\n    '''\n    Write a function to remove digits and whitespaces from a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i].isdigit() or str1[i] not in '\\n\\t ':\n            str2=str2+str1[i]\n    return str2\ndef remove_punctuation_and_numbers_and_whitespaces(str1):\n    '''\n    Write a function to remove punctuation, numbers and whitespaces from a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i].isdigit() or str1[i] not in '\\n\\t'or str1[i] in '''!\"#$%&'()*+,./:;<=>?@[\\\\]^_`{|}~''':\n            str2=str2+str1[i]\n    return str2\ndef remove_lowercase_and_punctuation_and_numbers_and_whitespaces(str1):\n    '''\n    Write a function to remove lowercase, punctuation and numbers from a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i].isdigit() or str1[i] not in '\\n\\t'or str1[i] in '''!\"#$%&'()*+,./:;<=>?@[\\\\]^_`{|}~''' or str1[i].isalpha():\n            str2=str2+str1[i]\n    return str2\ndef remove_lowercase_and_punctuation_and_numbers_and_whitespaces_and_digits(str1):\n    '''\n    Write a function to remove lowe"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # regex = re.compile(r\"[a-z]+\",re.I)\n    regex = re.compile(r\"[a-z]+\")\n    return regex.sub(\"\",str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    #create a list for the result and add each word to the list\n    #check if the word is already in the list, if not add it to the list\n    #if it is in the list, skip it\n    result = []\n    str1 = str1.split()\n    for word in str1:\n        if not word.lower() in result:\n            result.append(word.lower())\n    return result\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if len(str1) == 0:\n        return 0\n    return str1[0] + remove_lowercase(str1[1:]) if str1[0].islower() else remove_lowercase(str1[1:])\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]','',str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]+', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    result = str1\n    for index, letter in enumerate(result):\n        if letter.islower():\n            result = result[:index] + result[index+1:]\n    return result\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]+', '', str1, flags=re.I)\ndef to_camel_case(str1):\n    '''\n    Write a function to convert a given string to camelcase.\n    '''\n    return str1[0].upper() + str1[1:].replace('_','')\ndef to_snake_case(str1):\n    '''\n    Write a function to convert a given string to snake_case.\n    '''\n    return ''.join(['_'+sub if sub.isupper() else sub for sub in str1]).lstrip('_')\ndef to_constant_case(str1):\n    '''\n    Write a function to convert a given string to constant case.\n    '''\n    return ''.join([sub.upper() if sub.islower() else sub for sub in str1])\ndef to_lower_case(str1):\n    '''\n    Write a function to convert a given string to lowercase.\n    '''\n    return str1.lower()\ndef to_upper_case(str1):\n    '''\n    Write a function to convert a given string to uppercase.\n    '''\n    return str1.upper()\ndef add_suffix(str1):\n    '''\n    Write a function to add suffixes to a given string.\n    '''\n    return str1+str(len(str1))\ndef add_prefix(str1):\n    '''\n    Write a function to add prefixes to a given string.\n    '''\n    return str1+'_'+str(len(str1))\ndef add_spaces(str1, no_of_spaces):\n    '''\n    Write a function to add spaces to a given string.\n    '''\n    return''.join([str1]*no_of_spaces)\ndef count_vowels(str1):\n    '''\n    Write a function to count vowels in a given string.\n    '''\n    return sum([1 for sub in str1 if sub in 'aeiouAEIOU'])\ndef get_sum_of_digits(str1):\n    '''\n    Write a function to get sum of digits in a given string.\n    '''\n    return sum([int(sub) for sub in str1])\ndef remove_spaces(str1):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    return str1.replace(' ', '')\ndef remove_chars(str1, chars_to_remove):\n    '''\n    Write a function to remove characters from a given string.\n    '''\n    return str1.translate(None, chars_to_remove)\ndef replace_chars(str1, old_char, new_char):\n    '''\n    Write a function to replace characters from a given string.\n    '''\n    return str1.replace(old_char, new_char)\ndef replace_char(str1, old_char, new_char):\n    '''\n    Write a function to replace a single character in a given string.\n    '''\n    return str1.replace(old_char, new_char, 1)\ndef replace_string(str1, old_str, new_str):\n    '''\n    Write a function to replace string from a given string.\n    '''\n    return str1.replace(old_str, new_str)\ndef replace_last_string(str1, old_str, new_str):\n    '''\n    Write a function to replace last string from a given string.\n    '''\n    return str1.rsplit(old_str, 1)[0]+new_str\ndef replace_string_with_spaces(str1, old_str, new_str):\n    '''\n    Write a function to replace string from a given string.\n    '''\n    return str1.replace(old_str, new_str).replace('_','')\ndef remove_string(str1, old_str):\n    '''\n    Write a function to remove a string from a given string.\n    '''\n    return str1.replace(old_str, '')\ndef is_palindrome(str1):\n    '''\n    Write a function to check if a given string is palindrome.\n    '''\n    return str1[::-1]==str1\ndef is_pallindrome(str1):\n    '''\n    Write a function to check if a given string is pallindrome.\n    '''\n    return str1[::-1]==str1\ndef is_palindrome_sentence(str1):\n    '''\n    Write a function to check if a given string is palindrome.\n    '''\n    return str1[::-1]==str1\ndef is_pallindrome_sentence(str1):\n    '''\n    Write a function to check if a given string is pallindrome.\n    '''\n    return str1[::-1]==str1\ndef is_pallindrome_sentence(str1):\n    '''\n    Write a function to check if a given string is pallindrome.\n    '''\n    return str1[::-1]==str1\ndef is_pallindrome_sentence(str1):\n    '''\n    Write a function to check if a given string is pallindrome.\n    '''\n    return str1[::-1]==str1\ndef is_pallindrome_sentence(str1):\n    '''\n    Write a function to check if a given string is pallindrome.\n    '''\n    return str1[::-1]==str1\ndef is_pallindrome_sentence(str1):\n    '''\n    Write a function to check if a given string is pallindrome.\n    '''\n    return str1[::-1]==str1\ndef is_pallindrome_sentence(str1):\n    '''\n    Write a function to check if a given string is pallindrome.\n    '''\n    return str1[::-1]==str1\ndef is_pallindrome_sentence(str1):\n    '''\n    Write a function to check if a given string is pallindrome.\n    '''\n    return str1[::-1]==str1\ndef is_pallindrome_sentence(str1):\n    '''\n    Write a function to check if a given string is pallindrome.\n    '''\n    return str1[::-1]==str1\ndef is_pallindrome_sentence(str1):\n    '''\n    Write a function to check if a given string is pallindrome.\n    '''\n    return str1[::-1]==str1\ndef is_pallindrome_sentence(str1):\n    '''\n    Write a function to check if a given string is pallindrome.\n    '''\n    return str1[::-1]==str1\ndef is_pallindrome_sentence(str1):\n    '''\n    Write a function to check if a given string is pallindrome.\n    '''\n    return str1[::-1]==str1\ndef is_pallindrome_sentence(str1):\n    '''\n    Write a function to check if a given string is pallindrome.\n    '''\n    return str1[::-1]==str1\ndef is_pallindrome_sentence(str1):\n    '''\n    Write a function to check if a given string is pallindrome.\n    '''\n    return str1[::-1]==str1\ndef is_pallindrome_sentence(str1):\n    '''\n    Write a function to check if a given string is pallindrome.\n    '''\n    return str1[::-1]==str1\ndef is_pallindrome_sentence(str1):\n    '''\n    Write a function to check if a given string is pallindrome.\n    '''\n    return str1[::-1]==str1\ndef is_pallindrome_sentence(str1):\n    '''\n    Write a function to check if a given string is pallindrome.\n    '''\n    return str1[::-1]==str1\ndef is_pallindrome_sentence(str1):\n    '''\n    Write a function to check if a given string is pallindrome.\n    '''\n    return st"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    i = 1\n    while n >= 10 :\n        n = n / 10\n        i += 1\n    return n\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = abs(n)\n    digit = 0\n    while (n) :\n        digit = (n % 10)\n        n = n // 10\n    return digit\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    digit = n % 10\n    return digit\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n=int(n)\n    digit=0\n    while n>0:\n        n=n//10\n        digit+=1\n    return digit\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 0 :\n        return -1\n    return int(str(n)[0])\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    if n < 0 :\n        return -1\n    return int(str(n)[1])\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10 % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 0 :\n        return None\n    n = abs(n)\n    return n//10\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n==0 :\n        return 0\n    else :\n        return n/10\n    \n    \ndef isPrime(n) :\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if n<2 :\n        return 0\n    if n==2 :\n        return 1\n    else :\n        for i in range(2,n) :\n            if n%i==0 :\n                return 0\n        return 1\n    \ndef countDigitPrime(n) :\n    '''\n    Write a python function to count the number of prime digits in a number.\n    '''\n    if n==0 :\n        return 0\n    if n==1 :\n        return 0\n    if isPrime(n) :\n        return 1\n    else :\n        return countDigitPrime(first_Digit(n))\n    \ndef countDigit(n) :\n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    if n==0 :\n        return 0\n    else :\n        return 1 + countDigit(n/10)\n    \ndef countDigitPrimePrime(n) :\n    '''\n    Write a python function to count the number of prime digits in a number.\n    '''\n    if n==0 :\n        return 0\n    if n==1 :\n        return 0\n    if isPrime(n) :\n        return 1 + countDigitPrimePrime(first_Digit(n))\n    else :\n        return countDigitPrimePrime(first_Digit(n))\n    \ndef countDigitPrimePrimePrime(n) :\n    '''\n    Write a python function to count the number of prime digits in a number.\n    '''\n    if n==0 :\n        return 0\n    if n==1 :\n        return 0\n    if isPrime(n) :\n        return 1 + countDigitPrimePrimePrime(first_Digit(n))\n    else :\n        return countDigitPrimePrimePrime(first_Digit(n))\n    \ndef countDigitPrimePrimePrimePrime(n) :\n    '''\n    Write a python function to count the number of prime digits in a number.\n    '''\n    if n==0 :\n        return 0\n    if n==1 :\n        return 0\n    if isPrime(n) :\n        return 1 + countDigitPrimePrimePrimePrime(first_Digit(n))\n    else :\n        return countDigitPrimePrimePrimePrime(first_Digit(n))\n    \ndef sumDigit(n) :\n    '''\n    Write a python function to find the sum of digits in a number.\n    '''\n    if n==0 :\n        return 0\n    else :\n        return n%10 + sumDigit(n/10)\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    final_list = []\n    for item in list:\n        if item%2!= 0:\n            final_list.append(item)\n    return final_list\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds = []\n    for num in list:\n        if num % 2!= 0:\n            odds.append(num)\n    return odds\n    \n    "
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    for i in range(len(list)):\n        if list[i] % 2!= 0:\n            return list[i]\n    return None\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    for i in list:\n        if i%2!= 0:\n            print i\n    return \n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x%2!=0]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list1 = []\n    for i in range(0,len(list)):\n        if list[i]%2!= 0:\n            list1.append(list[i])\n    return list1\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    newList = []\n    for i in list:\n        if i%2!= 0:\n            newList.append(i)\n    return newList\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0]\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1) :\n        total += i ** 3\n    return (total ** 3 - total)\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Your code here\n    return sum([i**3 for i in range(n)]) - sum([i for i in range(n)])\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return (sum([i**3 for i in range(1, n+1)]) - sum([i for i in range(1, n+1)]))\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return (n * (n + 1) * (2 * n + 1)) / 6\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return n * n * n - (n + 1) * (n + 1) * (n + 1)\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    res = n * (n + 1) * (2 * n + 1) / 6\n    return res\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    s = sum([i**3 for i in range(1,n+1)])\n    t = sum([i for i in range(1,n+1)])\n    return s-t\n    \ndef main() :\n    print(difference(100))\n    print(difference(200))\n    print(difference(300))\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    s = 0\n    for i in range(1,n+1) :\n        s = s + (i**3)\n    return (s**3 - sum(range(1,n+1)))\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum([x**3 for x in range(1, n)]) - sum([x for x in range(1, n)])\n    \ndef is_pandigital(x):\n    string = ''.join(sorted(str(x)))\n    return string == '123456789'\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n_sum = sum([x ** 3 for x in range(1,n+1)])\n    return n_sum ** 2 - sum([x for x in range(1,n+1)]) ** 2\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    n = len(A)\n    if n == 0 :\n        return 0\n    elif n == 1 :\n        return A[0]\n    else :\n        a = A[0]\n        b = A[1]\n        count = 0\n        for i in range(2,n) :\n            xor_a_b = a ^ b\n            if xor_a_b & 1 :\n                count += 1\n            a = b\n            b = A[i]\n        return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    ans = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) & 1:\n                ans += 1\n    return ans\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    odd_count = 0\n    for i in range(N) : \n        for j in range(i+1, N) : \n            if A[i]^A[j] & 1 : \n                odd_count += 1 \n    return odd_count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N-1):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] & 1 == 1:\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    return sum([1 for x in range(N) if (A[x]^A[x+1])%2==1])\n    \ndef find_Even_Pairs(A,N) :\n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    return sum([1 for x in range(N) if (A[x]^A[x+1])%2==0])\n    \ndef find_Even_Triplets(A,N) :\n    '''\n    Write a python function to count the number of triplets whose xor value is even.\n    '''\n    return sum([1 for x in range(N) if (A[x]^A[x+1]^A[x+2])%2==0])\n    \ndef find_Odd_Triplets(A,N) :\n    '''\n    Write a python function to count the number of triplets whose xor value is odd.\n    '''\n    return sum([1 for x in range(N) if (A[x]^A[x+1]^A[x+2])%2==1])\n    \ndef find_Pairs(A,N) :\n    '''\n    Write a python function to count the number of pairs.\n    '''\n    return sum([1 for x in range(N) if (A[x]^A[x+1])%2==0])\n    \ndef find_Triplets(A,N) :\n    '''\n    Write a python function to count the number of triplets.\n    '''\n    return sum([1 for x in range(N) if (A[x]^A[x+1]^A[x+2])%2==0])\n    \ndef find_Pairs_in_a_set(A,N) :\n    '''\n    Write a python function to count the number of pairs whose xor value is odd in a set of integers.\n    '''\n    return sum([1 for x in range(N) if (A[x]^A[x+1])%2==1])\n    \ndef find_Triplets_in_a_set(A,N) :\n    '''\n    Write a python function to count the number of triplets whose xor value is even in a set of integers.\n    '''\n    return sum([1 for x in range(N) if (A[x]^A[x+1]^A[x+2])%2==0])\n    \ndef find_Pairs_in_a_set(A,N) :\n    '''\n    Write a python function to count the number of pairs whose xor value is odd in a set of integers.\n    '''\n    return sum([1 for x in range(N) if (A[x]^A[x+1])%2==1])\n    \ndef find_Triplets_in_a_set(A,N) :\n    '''\n    Write a python function to count the number of triplets whose xor value is even in a set of integers.\n    '''\n    return sum([1 for x in range(N) if (A[x]^A[x+1]^A[x+2])%2==0])\n    \ndef find_Pairs_in_a_column(A,N) :\n    '''\n    Write a python function to count the number of pairs whose xor value is odd in a column of integers.\n    '''\n    return sum([1 for x in range(N) if (A[x]^A[x+N])%2==1])\n    \ndef find_Triplets_in_a_column(A,N) :\n    '''\n    Write a python function to count the number of triplets whose xor value is even in a column of integers.\n    '''\n    return sum([1 for x in range(N) if (A[x]^A[x+N]^A[x+2*N])%2==0])\n    \ndef find_Pairs_in_a_column(A,N) :\n    '''\n    Write a python function to count the number of pairs whose xor value is odd in a column of integers.\n    '''\n    return sum([1 for x in range(N) if (A[x]^A[x+N])%2==1])\n    \ndef find_Triplets_in_a_column(A,N) :\n    '''\n    Write a python function to count the number of triplets whose xor value is even in a column of integers.\n    '''\n    return sum([1 for x in range(N) if (A[x]^A[x+N]^A[x+2*N])%2==0])\n    \ndef find_Pairs_in_a_row(A,N) :\n    '''\n    Write a python function to count the number of pairs whose xor value is odd in a row of integers.\n    '''\n    return sum([1 for x in range(N) if (A[x]^A[x+N*2])%2==1])\n    \ndef find_Triplets_in_a_row(A,N) :\n    '''\n    Write a python function to count the number of triplets whose xor value is even in a row of integers.\n    '''\n    return sum([1 for x in range(N) if (A[x]^A[x+N*2]^A[x+N*3])%2==0])\n    \ndef find_Pairs_in_a_row(A,N) :\n    '''\n    Write a python function to count the number of pairs whose xor value is odd in a row of integers.\n    '''\n    return sum([1 for x in range(N) if (A[x]^A[x+N*2])%2==1])\n    \ndef find_Triplets_in_a_row(A,N) :\n    '''\n    Write a python function to count the number of triplets whose xor value is even in a row of integers.\n    '''\n    return sum([1 for x in range(N) if (A[x]^A[x+N*2]^A[x+N*3])%2==0])\n    \ndef find_Pairs_in_a_diagonal(A,N) :\n    '''\n    Write a python function to count the number of pairs whose xor value is odd in a diagonal of integers.\n    '''\n    return sum([1 for x in range(N) if (A[x]^A[x+N*2])%2==1])\n    \ndef find_Triplets_in_a_diagonal(A,N) :\n    '''\n    Write a python function to count the number of triplets whose xor value is even in a diagonal of integers.\n    '''\n    return sum([1 for x in range(N) if (A[x]^A[x+N*2]^A[x+N*3])%2==0])\n    \ndef find_Pairs_in_a_diagonal(A,N) :\n    '''\n    Write a python function to count the number of pairs whose xor value is odd in a diagonal of integers.\n    '''\n    return sum([1 for x in range(N) if (A[x]^A[x+N*2])%2==1])\n    \ndef find_Triplets_in_a_diagonal(A,N) :\n    '''\n    Write a python function to count the number of triplets whose xor value is even in a diagonal of integers.\n    '''\n    return sum([1 for x in range(N) if (A[x]^A[x+N*2]^A[x+N*3])%2==0])\n    \ndef find_Pairs_in_a_matrix(A,N) :\n    '''\n    Write a python function to count the number of pairs whose xor value is odd in a matrix of integers.\n    '''\n    return sum([1 for x in range(N) if (A[x]^A[x+N])%2==1])\n    \ndef find_Triplets_in_a_matrix(A,N) :\n    '''\n    Write a python function to count the number of triplets whose xor value is even in a matrix of integers.\n    '''\n    return sum([1 for x in range(N) if (A[x]^A[x+N]^A[x+2*"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_list = []\n    for i in range(0,N-1) :\n        for j in range(i+1,N) :\n            xor_list.append((A[i]^A[j])&0x1)\n    return xor_list.count(1)\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    pair_count = 0\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N-1) :\n        for j in range(i+1,N) :\n            if (A[i]^A[j])%2 :\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N-1) :\n        if (A[i]^A[i+1])%2 == 1 :\n            count+=1\n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0 \n    for i in range(0,N) : \n        for j in range(i+1,N) : \n            if (A[i]^A[j])&1 : \n                count+=1\n    return count \n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return \"\".join([l.upper() if l.islower() else l.lower() for l in string])\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return \"\".join([x.lower() if x.isupper() else x.upper() for x in string])\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    \n    # create new_string\n    new_string = ''\n    \n    # iterate over string\n    for c in string:\n        # toggle case\n        if c.isupper():\n            new_string += c.lower()\n        elif c.islower():\n            new_string += c.upper()\n        else:\n            new_string += c\n    \n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(str(i).swapcase() for i in string)\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(x.lower() if x.isupper() else x.upper() for x in string)\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    out = ''\n    for i in string:\n        if i.isupper():\n            out += i.lower()\n        else:\n            out += i.upper()\n    return out\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    s = list(string)\n    for i in range(len(s)):\n        if s[i].isupper():\n            s[i] = s[i].lower()\n        else:\n            s[i] = s[i].upper()\n    return ''.join(s)\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # make a string from a list of characters\n    s = ''.join(string)\n    \n    # flip the case of the string\n    return s.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    list = []\n    for letter in string:\n        list.append(letter.swapcase())\n    return \"\".join(list)\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = abs(n1 - n2)\n    # print('diff is ', diff)\n    if diff == 0:\n        return 0\n    else:\n        return int(diff / abs(n1 - n2))\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_list = list(str(n1))\n    n2_list = list(str(n2))\n    distance = 0\n    if len(n1_list)!= len(n2_list):\n        return 0\n    for i in range(len(n1_list)):\n        if n1_list[i]!= n2_list[i]:\n            distance += 1\n    return distance\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([int(x) - int(y) for x, y in zip(str(n1), str(n2))])\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    num1 = n1\n    num2 = n2\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(x - y) for x, y in zip(str(n1), str(n2))])\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_distance = 0\n    while n1!= 0 or n2!= 0:\n        digit_sum = 0\n        if n1 >= 1:\n            digit_sum += n1 % 10\n            n1 //= 10\n        if n2 >= 1:\n            digit_sum += n2 % 10\n            n2 //= 10\n        sum_distance += digit_sum\n    return sum_distance\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1, d2 = len(str(n1)), len(str(n2))\n    if d1 < d2:\n        n1 = 10**(d2-d1) + n1\n    elif d1 > d2:\n        n2 = 10**(d1-d2) + n2\n    ans = 0\n    while n1 and n2:\n        ans += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    return ans\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([int(i) for i in str(abs(n1 - n2))])\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if len(str(n1)) == 1:\n        return abs(n2-n1)\n    else:\n        return digit_distance_nums(int(str(n1)[1:]), n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(abs(int(i)-int(j)) for i, j in zip(str(n1), str(n2)))\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    else:\n        maximum_sum = -1\n        for i in range(0, size-1):\n            for j in range(i+1, size):\n                curr_sum = sum(a[i:j+1])\n                maximum_sum = max(maximum_sum, curr_sum)\n        return maximum_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_ending_here = 0\n    max_so_far = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = -1\n    max_end = 0\n    max_start = 0\n    cur_sum = 0\n    for i in range(size):\n        cur_sum += a[i]\n        if cur_sum > max_sum:\n            max_sum = cur_sum\n            max_end = i\n            max_start = i - max_end\n    print max_sum, max_start, max_end\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum < 0:\n            current_sum = 0\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_ending_here = 0\n    max_so_far = 0\n    for i in range(size):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    max_ending_here = a[size-1]\n    max_so_far = a[size-1]\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # assert isinstance(a, list)\n    if len(a) == 0:\n        return 0\n    # assert isinstance(size, int)\n    if size <= 0:\n        return 0\n    max_sum = a[0]\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(list(set(test_tup1).union(test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    final_set = set()\n    test_tup1_set = set(test_tup1)\n    test_tup2_set = set(test_tup2)\n    for el in test_tup1_set:\n        if el in test_tup2_set:\n            final_set.add(el)\n    final_set = list(final_set)\n    final_set.sort()\n    return final_set\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(sorted(set(test_tup1 + test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    new_list = []\n    for i in test_tup1:\n        if i not in new_list:\n            new_list.append(i)\n    for i in test_tup2:\n        if i not in new_list:\n            new_list.append(i)\n    new_list.sort()\n    print new_list\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_tup1 = tuple(sorted(test_tup1))\n    test_tup2 = tuple(sorted(test_tup2))\n    new_tup = tuple(set(test_tup1 + test_tup2))\n    return new_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(list(set(test_tup1) | set(test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    return list(sorted(union_set))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    new_tup = list(test_tup1)\n    for val in test_tup2:\n        if val not in new_tup:\n            new_tup.append(val)\n    return tuple(sorted(new_tup))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if test_tup1[0] < test_tup2[0]:\n        return (test_tup2[0], test_tup1[1])\n    elif test_tup1[0] > test_tup2[0]:\n        return (test_tup1[0], test_tup2[1])\n    else:\n        if test_tup1[1] < test_tup2[1]:\n            return (test_tup1[0], test_tup1[1])\n        elif test_tup1[1] > test_tup2[1]:\n            return (test_tup2[0], test_tup2[1])\n        else:\n            return (test_tup1[0], test_tup2[1])\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    tup1 = set(test_tup1)\n    tup2 = set(test_tup2)\n    union_set = tup1 | tup2\n    union_list = list(union_set)\n    union_list.sort()\n    return tuple(union_list)\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_count = 0\n    for i in lst:\n        for j in lst:\n            if j>i:\n                if len(j)>len(i):\n                    max_count = len(j)\n    return max_count\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Find the length of each sublist\n    lst_len = [len(item) for item in lst]\n    # Find the max length\n    max_len = max(lst_len)\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lengths = [len(i) for i in lst]\n    return max(lengths)\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if not lst:\n        return 0\n    return 1+ max(Find_Max_Length(lst[1:]), Find_Max_Length(lst[:-1]))\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    Max_Length = -1  # Initialize max length\n    for element in lst:\n        if isinstance(element,list):\n            if len(element) > Max_Length:\n                Max_Length = len(element)\n    return Max_Length\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    table = [0 for i in range(len(lst))]  \n    table[0] = 1\n    maximum = 1\n    \n    for i in range(1, len(lst)):  \n        if lst[i] > lst[i - 1]:  \n            table[i] = table[i - 1] + 1  \n            maximum = max(maximum, table[i])  \n        else:  \n            table[i] = 1  \n    return maximum\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    sublst_len = 0\n    for i in lst:\n        if type(i) == list:\n            if len(i) > sublst_len:\n                sublst_len = len(i)\n    return sublst_len\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if not lst:\n        return 0\n    i = 0\n    start = lst[0]\n    end = start\n    max_len = 0\n    for i in range(1, len(lst)):\n        if lst[i]!= end:\n            end = lst[i]\n        else:\n            max_len = max(max_len, i-start+1)\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    count = 1\n    max_count = 1\n    for i in range(len(lst)):\n        if lst[i] < lst[i - 1]:\n            count = 1\n        else:\n            count += 1\n        max_count = max(count, max_count)\n    return max_count\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lst.sort()\n    l = len(lst)\n    m = 1\n    for i in range(0,l):\n        if(lst[i]!= lst[i-1]):\n            m = max(m,i-1)\n    return m\n    \n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'\\\"(.*?)\\\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if text == None:\n        return []\n    text = text.strip()\n    text = text.replace('\"','')\n    values = []\n    start = 0\n    end = 0\n    current = \"\"\n    quoted = False\n    for i in range(len(text)):\n        if text[i] == '\"' and not quoted:\n            quoted = True\n            end = i\n            current = text[start:end+1]\n            values.append(current)\n            start = i+1\n        elif text[i] == '\"' and quoted:\n            quoted = False\n            current = text[start:i]\n            values.append(current)\n            start = i+1\n        elif not quoted:\n            end = i\n            current = text[start:end+1]\n            if current!= \"\":\n                values.append(current)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    list = re.findall(r'[\\'\\\"](.*?)[\\']', text)\n    return list\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # result = re.findall(r'\\\"(.*?)\\\"', text)\n    # print(result)\n    return re.findall(r'\\\"(.*?)\\\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    \n    p = re.compile(r'\\\"(.*?)\\\"')\n    values = p.findall(text)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"[^\"]+\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.strip()\n    text = re.findall(r'\\\".*?\\\"',text)\n    #print text\n    return text\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    matches = re.findall(r'\\\"(.*?)\\\"', text)\n    return matches\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall('\\\".*?\\\"',text)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(r'[\\\"](.*?)[\\\"]',text)\n    return values\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr.sort()\n    count = 0\n    for i in range(0, n-1):\n        if arr[i]!= arr[i+1]:\n            count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr = sorted(arr)\n    pairs = 0\n    for i in range(n):\n        if arr[i]!= arr[i+1]:\n            pairs += 1\n    return pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    d = {}\n    for i in range(n):\n        if arr[i] in d:\n            d[arr[i]] += 1\n        else:\n            d[arr[i]] = 1\n    s = set()\n    for i in d:\n        s.add(i)\n    count = 0\n    for i in d:\n        if i in s:\n            count += d[i]*(d[i]-1) / 2\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count=count+1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr = sorted(arr)\n    k = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (arr[i]!= arr[j]):\n                k += 1\n    return k\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    pairs = 0 \n    for i in range(n):\n        for j in range(i + 1,n):\n            if arr[i]!= arr[j]:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    dic={}\n    for i in range(n):\n        if arr[i] in dic:\n            dic[arr[i]]+=1\n        else:\n            dic[arr[i]]=1\n    return sum([dic[x]*(dic[x]-1)/2 for x in dic])\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    dict1 = {}\n    for i in arr:\n        dict1[i] = dict1.get(i,0) + 1\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in xrange(0,n): \n        for j in xrange(i+1,n):\n            if arr[i]!= arr[j]:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n    "
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    \n    \n    if n < 0:\n        return None\n    else:\n        total = 0\n        while n > 0:\n            total += n%10\n            n = n/10\n        return total\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(x) for x in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(map(int,str(n)))\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(i) for i in str(n)])\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(i) for i in str(n)])\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    res = 0\n    while n > 0:\n        res += n % 10\n        n = n // 10\n    return res\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # 1. first version\n    # 2. second version\n    return sum([int(x) for x in str(n)])\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return (list1 == sorted(list1))\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return all(a <= b for a, b in zip(list1, list1[1:]))\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i - 1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    else:\n        return list1[0] <= list1[1] and issort_list(list1[1:])\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 1:\n        return True\n    elif list1[0] > list1[1]:\n        return False\n    else:\n        return issort_list(list1[1:])\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1)<=1:\n        return True\n    else:\n        if list1[0]<=list1[1]:\n            return issort_list(list1[1:])\n        else:\n            return False\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1)==0 or len(list1)==1:\n        return True\n    if list1[0]>list1[1]:\n        return False\n    for i in range(2,len(list1)):\n        if list1[i-1]>=list1[i]:\n            return False\n    return True\n    "
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return True\n    if len(list1) == 1:\n        return True\n    if list1[0] <= list1[1]:\n        return issort_list(list1[1:])\n    return False\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for index in range(1,len(list1)):\n        if list1[index-1] > list1[index]:\n            return False\n    return True\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    \n    return [dict() for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    #result = [{} for i in range(length)]\n    result = [{} for i in range(length)]\n    return result\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    output = []\n    for i in range(length):\n        output.append({})\n    return output\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list_of_dict = []\n    for i in range(length):\n        dict_element = {}\n        list_of_dict.append(dict_element)\n    return list_of_dict\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [dict() for x in range(length)]\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted([sorted(x) for x in list1])\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n    for item in list1:\n        result.append(sorted(item))\n    return result\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n        print sublist\n        \nsort_sublists([[2, 3, 1], [2, 4, 1], [3, 4, 1], [2, 2, 1], [1, 2, 1]]"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for list in list1:\n        list.sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    newlist = []\n    for item in list1:\n        if type(item) == list:\n            newlist.append(sorted(item))\n        else:\n            newlist.append(item)\n    return newlist\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key=lambda x: x[0])\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(sorted(i))\n    return list2\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in xrange(0,len(list1)):\n        list1[i].sort()\n    return list1\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for i in nums:\n        if i not in unique_nums:\n            unique_nums.append(i)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    output = []\n    for i in nums:\n        if i not in output:\n            output.append(i)\n    return output\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique = []\n    n = len(nums)\n    for i in range(n):\n        if nums[i] not in unique:\n            unique.append(nums[i])\n    return unique\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    res = {}\n    for i in nums:\n        if i in res:\n            res[i] += 1\n        else:\n            res[i] = 1\n    return [i for i in res if res[i] == 1]\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique = []\n    for n in nums:\n        if n not in unique:\n            unique.append(n)\n    return unique\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    num_list = []\n    for i in nums:\n        if i not in num_list:\n            num_list.append(i)\n    return num_list\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    d = {}\n    for n in nums:\n        if n in d:\n            d[n] += 1\n        else:\n            d[n] = 1\n    result = []\n    for k, v in d.items():\n        if v == 1:\n            result.append(k)\n    return result\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    if list_data==[]:\n        return 1\n    else:\n        return list_data[0]*unique_product(list_data[1:])\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for item in set(list_data):\n        product *= item\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    uniques = set()\n    for i in list_data:\n        if i not in uniques:\n            uniques.add(i)\n    return uniques\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    result = 1\n    for i in list_data:\n        result = result * i\n    return result\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return reduce(lambda x, y: x * y, list_data)\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    #Step 1 - Make a list with unique elements only\n    unique_list = []\n    for i in range(len(list_data)):\n        if list_data[i] not in unique_list:\n            unique_list.append(list_data[i])\n    #Step 2 - Calculate the product of the unique elements\n    product_list = []\n    for i in range(len(unique_list)):\n        product_list.append(unique_list[i]**2)\n    product = 1\n    for i in range(len(product_list)):\n        product *= product_list[i]\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    numbers_products = []\n    for i in list_data:\n        if list_data.count(i) == 1:\n            numbers_products.append(i)\n    numbers_products = [i * numbers_products.count(i) for i in numbers_products]\n    print(numbers_products)\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list=[]\n    for element in list_data:\n        if element not in unique_list:\n            unique_list.append(element)\n    result = 1\n    for element in unique_list:\n        result *= element\n    return result\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return reduce(lambda x, y: x * y, (set(list_data)))\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    \n    product = 1\n    for elem in list_data:\n        product *= elem\n    return product\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return pi*r*(r+h)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a = r**2*3.14159\n    b = 2*a + 2*r*3.14159*h\n    return b\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return pi*(r*2+h)\n    \ndef vol_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return pi*r**2*h\n    \ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*pi*r**2\n    \ndef vol_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4*pi/3*r**3\n    \ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6*l**2\n    \ndef vol_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return l**3\n    \ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return pi*r*(r+h)\n    \ndef vol_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3*pi*r**2*h\n    \ndef surfacearea_octagon(a,b):\n    '''\n    Write a function to find the surface area of an octagon.\n    '''\n    return 2*(a+b)\n    \ndef vol_octagon(a,b):\n    '''\n    Write a function to find the volume of an octagon.\n    '''\n    return 1/3*a*b\n    \ndef surfacearea_trunctagon(a,b):\n    '''\n    Write a function to find the surface area of a truncated octagon.\n    '''\n    return 2*(a+b)-min(a,b)\n    \ndef vol_trunctagon(a,b):\n    '''\n    Write a function to find the volume of a truncated octagon.\n    '''\n    return 1/3*(a*b-min(a,b))\n    \ndef surfacearea_hexagon(a):\n    '''\n    Write a function to find the surface area of an hexagon.\n    '''\n    return 6*a\n    \ndef vol_hexagon(a):\n    '''\n    Write a function to find the volume of an hexagon.\n    '''\n    return 1/2*a**2\n    \ndef surfacearea_parallelogram(a,b):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    return a*b\n    \ndef vol_parallelogram(a,b):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    return a*b\n    \ndef surfacearea_trapezoid(a,b,c,d):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    return a+b+c+d\n    \ndef vol_trapezoid(a,b,c,d):\n    '''\n    Write a function to find the volume of a trapezoid.\n    '''\n    return (a+b)*(c+d)/2\n    \ndef surfacearea_rectangle(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return 2*(a+b)\n    \ndef vol_rectangle(a,b):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return a*b\n    \ndef surfacearea_square(a):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    return a**2\n    \ndef vol_square(a):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    return a**2\n    \ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    return 2*pi*r\n    \ndef vol_circle(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    return pi*r**2\n    \ndef surfacearea_square_pyramid(b,h):\n    '''\n    Write a function to find the surface area of a square pyramid.\n    '''\n    return b*(h+b)\n    \ndef vol_square_pyramid(b,h):\n    '''\n    Write a function to find the volume of a square pyramid.\n    '''\n    return b**2*h/3\n    \ndef surfacearea_rectangle_pyramid(b,h):\n    '''\n    Write a function to find the surface area of a rectangle pyramid.\n    '''\n    return 2*(b+h)\n    \ndef vol_rectangle_pyramid(b,h):\n    '''\n    Write a function to find the volume of a rectangle pyramid.\n    '''\n    return b*h\n    \ndef surfacearea_rhombus(a,b):\n    '''\n    Write a function to find the surface area of a rhombus.\n    '''\n    return 2*(a+b)\n    \ndef vol_rhombus(a,b):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    return a*b/2\n    \ndef surfacearea_conical_pipe(r,h):\n    '''\n    Write a function to find the surface area of a conical pipe.\n    '''\n    return pi*r*(r+h)\n    \ndef vol_conical_pipe(r,h):\n    '''\n    Write a function to find the volume of a conical pipe.\n    '''\n    return pi/3*r**2*h\n    \ndef surfacearea_conical_cone(r,h):\n    '''\n    Write a function to find the surface area of a conical cone.\n    '''\n    return pi*r*(r+h)\n    \ndef vol_conical_cone(r,h):\n    '''\n    Write a function to find the volume of a conical cone.\n    '''\n    return 1/3*pi*r**2*h\n    \ndef surfacearea_sphere_circle(r,h):\n    '''\n    Write a function to find the surface area of a sphere-circle.\n    '''\n    return 4*pi*r**2\n    \ndef vol_sphere_circle(r,h):\n    '''\n    Write a function to find the volume of a sphere-circle.\n    '''\n    return 4/3*pi*r**3*h\n    \ndef surfacearea_sphere_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a sphere-cylinder.\n    '''\n    return 4*pi*r**2+2*pi*r*h\n    \ndef vol_sphere_cylinder(r,h):\n    '''\n    Write a function to find the volume of a sphere-cylinder.\n    '''\n    return 4/3*pi*r**3*h\n    \ndef surfacearea_sphere_cone(r,h):\n    '''\n    Write a function to find the surface area of a sphere-cone.\n    '''\n    return 4*pi*r*(r+h)\n    \ndef vol_sphere_cone(r,h):\n    '''\n    Write a function to find the volume of a sphere-cone.\n    '''\n    return 1/3*pi*r**3*h\n    \ndef surfacearea_sphere_octagon(r):\n    '''\n    Write a function to find the surface area of a sphere-octagon.\n    '''\n    return 4*pi*r\n    \ndef vol_sphere_octagon(r):\n    '''\n    Write a function to find the volume of a sphere-octagon.\n    '''\n    return 1/3*pi*r**3\n    \ndef surfacearea_sphere_trunctagon(r):\n    '''\n    Write a function to find the surface area of a sphere-trunctagon.\n    '''\n    return 4*pi*r-min(r,2*sqrt(2)*"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return pi*r*(2*r+h)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #return 2*pi*r*h + 2*pi*r*r\n    return 2*pi*r*(r+h)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return pi*(2*r) + 2*pi*r*h\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*h + 2*pi*r**2\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return pi*r**2 + 2*pi*r*h\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # formula\n    # = 2 * pi * r * (r + h)\n    return 2 * 3.14 * r * (r + h)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    print(2*pi*r*(r+h))\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in B:\n        if i not in A:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in B:\n        if i not in A:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    n1 = len(A)\n    n2 = len(B)\n    if n1>n2:\n        return 0\n    else:\n        flag = 1\n        for i in range(n1):\n            if A[i]!=B[i]:\n                flag = 0\n                break\n        if flag == 1:\n            return 1\n        else:\n            return 0\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    sublist = False\n    if len(A) < len(B):\n        sublist = False\n    else:\n        sublist = True\n        for i in range(0,len(A)):\n            if A[i]!= B[i]:\n                sublist = False\n                break\n    return sublist\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    a = len(A)\n    b = len(B)\n    if a<b:\n        return False\n    if a==b:\n        return True\n    for i in range(0,b):\n        if A[i] == B[i]:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) <= len(B):\n        for i in range(len(B)):\n            if A[i]!= B[i]:\n                return 0\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B)>len(A):\n        return False\n    return A in B\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B)>len(A):\n        return False\n    return set(B).issubset(set(A))\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if B == []:\n        return True\n    if len(A) == len(B):\n        if B[0] == A[0]:\n            return is_Sub_Array(A[1:],B[1:])\n        else:\n            return False\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i = 0\n    j = 0\n    while j<len(B):\n        if B[j] == A[i]:\n            i = i + 1\n        if i == len(A):\n            return True\n        j = j + 1\n    return False\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n * last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n!= 0:\n        factorial = factorial * n\n        n = n - 1\n    return factorial % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    i = 10\n    while i <= n:\n        i *= i\n    return i % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    n = n%60\n    if(n == 0):\n        return 1\n    elif(n == 1):\n        return n\n    else:\n        return last_Digit_Factorial(n-1) * n\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    digit = 0\n    while (n//10): \n        n//=10\n        digit+=1\n    return n%10\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    lastDigit = 0\n    nFactorial = 1\n    while nFactorial <= n:\n        lastDigit = nFactorial % 10\n        nFactorial *= 10\n    return lastDigit\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    #if n == 0:\n    #    return 1\n    #else:\n    #    return last_Digit_Factorial(n-1) * 10\n    return 1 if n < 1 else n % 10 * last_Digit_Factorial(n//10)\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    num = 5;\n    while (num <= n):\n        if(num == n):\n            return 1\n        else:\n            num *= 5\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        print (\"Factorial can't be calculated for negative numbers.\")\n    elif n == 0:\n        return 1\n    else:\n        return n * last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    i = 0\n    newlist = []\n    while i < len(list1):\n        newlist.append(list1[i])\n        newlist.append(list2[i])\n        newlist.append(list3[i])\n        i += 1\n    return newlist\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [i for i in zip(list1,list2,list3)]\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    assert len(list1) == len(list2) == len(list3)\n    return list(list1[i]+list2[i]+list3[i] for i in range(len(list1)))\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    newlist = []\n    for i in range(len(list1)):\n        newlist.append(list1[i])\n        newlist.append(list2[i])\n        newlist.append(list3[i])\n    return newlist\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[x]+list2[x]+list3[x] for x in range(len(list1))]\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        raise ValueError('Lists are not of equal length')\n    return [list1[i] + list2[i] + list3[i] for i in range(len(list1))]\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [x for pair in zip(list1,list2,list3) for x in pair]\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    output = []\n    if len(list1) == len(list2) == len(list3):\n        for i in range(len(list1)):\n            output.append(list1[i])\n            output.append(list2[i])\n            output.append(list3[i])\n    return output\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    newlist = [ ]\n    for i in range(len(list1)):\n        newlist.append(list1[i])\n        newlist.append(list2[i])\n        newlist.append(list3[i])\n    return newlist\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return zip(list1,list2,list3)\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    n1,n2 = 0,0\n    for i in test_tup1:\n        if i not in test_tup2:\n            n1+=1\n    for j in test_tup2:\n        if j not in test_tup1:\n            n2+=1\n    return n1,n2\n    \n    \nif __name__=='__main__':\n    test_tup1 = (5, 6, 7, 8, 9, 10, 4)\n    test_tup2 = (5, 6, 7, 8, 9, 10, 4)\n    res = find_dissimilar(test_tup1, test_tup2)\n    print res\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diff_tuple = []\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples are of different length\"\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i]!= test_tup2[i]:\n                diff_tuple.append(test_tup1[i])\n        return diff_tuple\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Your code here\n    return [x for x in test_tup1 if x not in test_tup2]\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    for i in test_tup1:\n        if i not in test_tup2:\n            return i\n    return None\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return tuple(tup1[i] for i in range(len(tup1)) if tup1[i]!= tup2[i])\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    count = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return tuple(set(test_tup1).symmetric_difference(test_tup2))\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for x in test_tup1:\n        if x not in test_tup2:\n            dissimilar.append(x)\n    return dissimilar\n    \n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    \n    pas"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Given tuples not of the same size.\")\n        return\n    if len(test_tup1) < 3:\n        print(\"Not enough elements.\")\n        return\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    if len(dissimilar) == 0:\n        print(\"No dissimilar elements\")\n        return\n    print(\"Dissimilar elements are: \", dissimilar)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return even_fnc(test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for tup in test_tuple:\n        if even_fnc(tup):\n            new_tuple.append(tup)\n    return tuple(new_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    '''\n    test_tuple = (1, (2, 3), (4, (5, 6, 7)))\n    even_fnc = lambda x: x % 2 == 0\n    '''\n    even_list = [elem for elem in test_tuple if even_fnc(elem)]\n    return tuple(even_list)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    #print \"Nested mixed tuple: \", test_tuple\n    \n    #print \"Even functions: \", even_fnc\n    \n    result_list = []\n    for element in test_tuple:\n        if element not in even_fnc:\n            result_list.append(element)\n    return tuple(result_list)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    return tuple(even_fnc(x) for x in test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return (even_fnc(x) for x in test_tuple if x % 2 == 0)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    nested_tuple = list(test_tuple)\n    for i in range(len(nested_tuple)):\n        if isinstance(nested_tuple[i], tuple):\n            nested_tuple[i] = even_ele(nested_tuple[i], even_fnc)\n        elif even_fnc(nested_tuple[i]):\n            nested_tuple[i] = None\n    return tuple(filter(None, nested_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for element in test_tuple: \n        if isinstance(element, tuple): \n            remove_uneven_ele(element, even_fnc)\n        elif isinstance(element, int): \n            if not even_fnc(element): \n                test_tuple.remove(element)\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def even_tuple(mixed_tuple):\n        '''\n        Convert the nested tuple to a list.\n        '''\n        if isinstance(mixed_tuple, tuple):\n            new_list = []\n            for ele in mixed_tuple:\n                new_list.append(ele)\n            return new_list\n        else:\n            return mixed_tuple\n    even_tuple(test_tuple)\n    even_tuple = even_tuple(test_tuple)\n    even_tuple_un_list = [x for x in even_tuple if x % 2 == 0]\n    return even_tuple_un_list\n    \ndef two_way_list(list1, list2):\n    '''\n    Write a function to get the intersection of two lists.\n    '''\n    return list(set(list1) & set(list2))\n    \ndef three_way_list(list1, list2):\n    '''\n    Write a function to get the union of two lists.\n    '''\n    return list(set(list1) | set(list2))\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    i = 0\n    new_tuple = ()\n    for j in test_tuple:\n        if not even_fnc(j):\n            new_tuple += j,\n        i+=1\n    return new_tuple\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    import math\n    s = b*b + (b*b*s)/3\n    return s\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    A = b**2\n    B = b * 2\n    C = s\n    \n    return A + B + C\n    \n    \n    \n    \n    \ndef perimeter(b,s):\n    '''\n    Write a python function to find the perimeter of a square pyramid with a given base edge and height.\n    '''\n    A = b * 4\n    B = (b + s) * 2\n    C = s * 4\n    \n    return A + B + C\n    \n    \n    \n    \n    \n    \ndef pyramid_Volume(b,s): \n    '''\n    Write a python function to find the volume of a cube pyramid with a given base edge and height.\n    '''\n    A = b * b * b\n    B = (b + s) * (b + s) * (b + s)\n    C = s * s * s\n    \n    return A + B + C\n    \n    \n    \n    \n    \n    \ndef pyramid_Surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a cube pyramid with a given base edge and height.\n    '''\n    A = b * b * 2\n    B = (b + s) * (b + s) * 2\n    C = s * s * 2\n    \n    return A + B + C\n    \n    \n    \n    \n    \n    \ndef calculate_Volume(b,s): \n    '''\n    Write a python function to find the volume of a cube pyramid with a given base edge and height.\n    '''\n    A = b * b * b\n    B = (b + s) * (b + s) * (b + s)\n    C = s * s * s\n    \n    return A + B + C\n    \n    \n    \n    \n    \ndef calculate_Surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a cube pyramid with a given base edge and height.\n    '''\n    A = b * b * 2\n    B = (b + s) * (b + s) * 2\n    C = s * s * 2\n    \n    return A + B + C\n    \n    \n    \n    \n    \n    \ndef test_pyramid():\n    '''\n    Write a python function to check the validity of a cube pyramid.\n    '''\n    b = 10\n    s = 5\n    \n    if surface_Area(b,s) == calculate_Surface_Area(b,s):\n        print('True')\n    else:\n        print('False')\n    \n    if perimeter(b,s) == calculate_Volume(b,s):\n        print('True')\n    else:\n        print('False')\n    \n    \n    \ntest_pyramid()\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #Base edge of the square pyramid\n    b = float(b)\n    #Height of the square pyramid\n    s = float(s)\n    #Surface Area of the square pyramid\n    Area = b*s/2\n    print Area\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b*s)\n    print(\"The area of the pyramid is: \",area)\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b*s)\n    return area\ndef volume(b,h):\n    '''\n    Write a python function to find the volume of a triangular pyramid with a given base edge and height.\n    '''\n    volume = (b*h)/3\n    return volume\ndef volume_Perimeter(b,h):\n    '''\n    Write a python function to find the volume of a triangular pyramid with a given base edge and height.\n    '''\n    volume = (b*h)/3\n    Perimeter = (b+h+b)\n    return (Perimeter)\n    \n    \n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*(s**2)\ndef volume(b,h):\n    '''\n    Write a python function to find the volume of a cuboid with given base and height.\n    '''\n    return b*h\ndef pyramid_volume(b,h):\n    '''\n    Write a python function to find the volume of a cuboid pyramid with given base and height.\n    '''\n    return surface_Area(b,h)+(volume(b,h))\ndef cone_volume(r,h):\n    '''\n    Write a python function to find the volume of a cone with given radius and height.\n    '''\n    return (3/4)*pi*(r**2)*h\ndef spiky_sphere(r):\n    '''\n    Write a python function to find the volume of a sphere with given radius.\n    '''\n    return (4/3)*pi*(r**3)\ndef spiky_surface_area(r):\n    '''\n    Write a python function to find the surface area of a sphere with given radius.\n    '''\n    return 4*pi*(r**2)\ndef cylinder_volume(r,h):\n    '''\n    Write a python function to find the volume of a cylinder with given radius and height.\n    '''\n    return pi*(r**2)*h\ndef rectangular_prism_volume(b,h):\n    '''\n    Write a python function to find the volume of a rectangular prism with given base and height.\n    '''\n    return surface_Area(b,h)+volume(b,h)\ndef pyramid_area(b,h):\n    '''\n    Write a python function to find the surface area of a square pyramid with given base edge and height.\n    '''\n    return surface_Area(b,h)\ndef rectangular_prism_surface_area(b,h):\n    '''\n    Write a python function to find the surface area of a cuboid with given base and height.\n    '''\n    return surface_Area(b,h)+rectangular_prism_volume(b,h)\ndef rectangular_prism_volume(b,h):\n    '''\n    Write a python function to find the volume of a cuboid with given base and height.\n    '''\n    return volume(b,h)\ndef spiky_sphere_surface_area(r):\n    '''\n    Write a python function to find the surface area of a sphere with given radius.\n    '''\n    return spiky_surface_area(r)\ndef cylinder_surface_area(r,h):\n    '''\n    Write a python function to find the surface area of a cylinder with given radius and height.\n    '''\n    return surface_Area(r,h)\ndef pyramid_area(b,h):\n    '''\n    Write a python function to find the surface area of a square pyramid with given base edge and height.\n    '''\n    return pyramid_area(b,h)\ndef cylinder_volume(r,h):\n    '''\n    Write a python function to find the volume of a cylinder with given radius and height.\n    '''\n    return cylinder_volume(r,h)\ndef pyramid_volume(b,h):\n    '''\n    Write a python function to find the volume of a cuboid pyramid with given base and height.\n    '''\n    return pyramid_volume(b,h)\ndef rectangular_prism_surface_area(b,h):\n    '''\n    Write a python function to find the surface area of a rectangular prism with given base and height.\n    '''\n    return rectangular_prism_surface_area(b,h)+rectangular_prism_volume(b,h)\ndef rectangular_prism_volume(b,h):\n    '''\n    Write a python function to find the volume of a rectangular prism with given base and height.\n    '''\n    return rectangular_prism_volume(b,h)\ndef right_angle_triangle_volume(a,b,c):\n    '''\n    Write a python function to find the volume of a right angle triangle with given three sides.\n    '''\n    return (a*b)/2*c\ndef cuboid_volume(l,b,h):\n    '''\n    Write a python function to find the volume of a cuboid with given length, width, and height.\n    '''\n    return l*b*h\ndef cuboid_surface_area(l,b,h):\n    '''\n    Write a python function to find the surface area of a cuboid with given length, width, and height.\n    '''\n    return cuboid_surface_area(l,b,h)+cuboid_volume(l,b,h)\ndef rhombus_surface_area(a,b):\n    '''\n    Write a python function to find the surface area of a rhombus with given two sides.\n    '''\n    return (2*a*b)+(2*a)\ndef rhombus_volume(a,b):\n    '''\n    Write a python function to find the volume of a rhombus with given two sides.\n    '''\n    return rhombus_volume(a,b)\ndef rectangle_surface_area(a,b):\n    '''\n    Write a python function to find the surface area of a rectangle with given two sides.\n    '''\n    return (2*a*b)+(2*a)\ndef rectangle_volume(a,b):\n    '''\n    Write a python function to find the volume of a rectangle with given two sides.\n    '''\n    return rectangle_volume(a,b)\ndef rhombus_surface_area(a,b):\n    '''\n    Write a python function to find the surface area of a rhombus with given two sides.\n    '''\n    return (2*a*b)+(2*a)\ndef rhombus_volume(a,b):\n    '''\n    Write a python function to find the volume of a rhombus with given two sides.\n    '''\n    return rhombus_volume(a,b)\ndef nonagon_surface_area(a,b):\n    '''\n    Write a python function to find the surface area of a nonagon with given two sides.\n    '''\n    return (2*a*b)+(2*a)\ndef nonagon_volume(a,b):\n    '''\n    Write a python function to find the volume of a nonagon with given two sides.\n    '''\n    return nonagon_volume(a,b)\ndef rhombus_surface_area(a,b):\n    '''\n    Write a python function to find the surface area of a rhombus with given two sides.\n    '''\n    return (2*a*b)+(2*a)\ndef rhombus_volume(a,b):\n    '''\n    Write a python function to find the volume of a rhombus with given two sides.\n    '''\n    return rhombus_volume(a,b)\ndef rhombus_volume(a,b):\n    '''\n    Write a python function to find the volume of a rhombus with given two sides.\n    '''\n    return rhombus_volume(a,b)\ndef rhombus_volume(a,b):\n    '''\n    Write a python function to find the volume of a rhombus with given two sides.\n    '''\n    return rhombus_volume(a,b)\ndef rhombus_volume(a,b):\n    '''\n    Write a python function to find the volume of a rhombus with given two sides.\n    '''\n    return rhombus_volume(a,b)\ndef nonagon_surface_area(a,b):\n    '''\n    Write a python function to find the surface area of a nonagon with given two sides.\n    '''\n    return (2*a*b)+(2*a)\ndef nonagon_volume(a,b):\n    '''\n    Write a python function to find the volume of a nonagon with given two sides.\n    '''\n    return nonagon_volume(a,b)\ndef rhombus_surface_area(a,b):\n    '''\n    Write a python function to find the surface area of a rhombus with given two sides.\n    '''\n    return (2*a*b)+(2*a)\ndef rhombus_volume(a,b):\n    '''\n    Write a python function to find the volume of a rhombus with given two sides.\n    '''\n    return rhombus"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    #b = float(b)\n    #s = float(s)\n    \n    sa = float(b*s)\n    \n    return sa\n    \n    \n    \n    \n    \ndef generate_string_with_no_space(length):\n    '''\n    Write a python function to generate a string that has no space\n    '''\n    \n    # length = int(length)\n    \n    gws = \"\"\n    \n    for l in range(0,length):\n        gws = gws+\"0\"\n    \n    \n    return gws\n    \n    \n    \n    \n    \ndef count_0(s):\n    '''\n    Write a python function to count the number of times an ASCII character (lower-case letters) occurs in a given string.\n    '''\n    \n    # s = str(s)\n    \n    c0 = 0\n    \n    for i in s:\n        if i == \"0\":\n            c0 = c0 + 1\n    \n    \n    \n    \n    \ndef password_check(p):\n    '''\n    Write a python function to check whether a password is strong or not. A password is strong if it satisfies the following conditions:\n        - It must contain at least one uppercase character.\n        - It must contain at least one lowercase character.\n        - It must contain at least one digit.\n        - It must contain at least one special character.\n    '''\n    \n    # p = str(p)\n    \n    c = 0\n    \n    for i in p:\n        if i.isupper() == True:\n            c = c + 1\n        elif i.islower() == True:\n            c = c + 1\n        elif i.isdigit() == True:\n            c = c + 1\n        elif i in [\"!\",\"@\",\"#\",\"$\",\"%\",\"^\",\"&\",\"*\",\"(\",\")\",\"=\",\"-\",\"_\",\"+\",\"~\",\"`\"]:\n            c = c + 1\n        else:\n            c = c + 0\n    \n    if c >= 3:\n        return True\n    \n    \n    \n    \n    \n    \ndef count_vowels(s):\n    '''\n    Write a python function to count the number of vowels in a given string.\n    '''\n    \n    # s = str(s)\n    \n    count = 0\n    \n    for i in s:\n        if i == \"a\" or i == \"e\" or i == \"i\" or i == \"o\" or i == \"u\" or i == \"A\" or i == \"E\" or i == \"I\" or i == \"O\" or i == \"U\":\n            count = count + 1\n    \n    \n    \n    \n    \n    \ndef rotate(s,t):\n    '''\n    Write a python function to rotate a string by a given number of steps.\n    '''\n    \n    # s = str(s)\n    # t = int(t)\n    \n    if t > 0:\n        t = t%26\n    else:\n        t = abs(t)%26\n    \n    chars = []\n    for i in s:\n        if ord(i) <= 122:\n            chars.append(chr((ord(i)-97+t)%26 + 97))\n        else:\n            chars.append(i)\n    \n    \n    return \"\".join(chars)\n    \n    \n    \n    \n    \n    \ndef is_valid_move(p,q,board):\n    '''\n    Write a python function to check whether a queen can be placed in a given position on the chess board.\n    '''\n    \n    # p = int(p)\n    # q = int(q)\n    # board = str(board)\n    \n    c = 0\n    \n    for i in range(0,len(board)):\n        if board[i] == \"Q\":\n            c = c + 1\n    \n    if c >= 1:\n        return False\n    \n    # c1 = 0\n    # for i in range(0,len(board)):\n    #     if board[i] == \"q\":\n    #         c1 = c1 + 1\n    #     if c1 >= 1:\n    #         return False\n    \n    for i in range(0,len(board)):\n        for j in range(0,len(board)):\n            if board[i] == \"Q\" and board[j] == \"q\" and abs(i-j) == abs(p-q):\n                return False\n    \n    return True\n    \n    \n    \n    \n    \n    \ndef play_queen_game(n):\n    '''\n    Write a python function to play a game of N queens on an NxN chess board with two queens moving in lock steps.\n    '''\n    \n    # n = int(n)\n    \n    board = \"\"\n    for i in range(0,n):\n        board = board + \"0\"\n    \n    for i in range(0,n):\n        for j in range(0,n):\n            if is_valid_move(i,j,board) == True:\n                board = board[:i] + \"Q\" + board[i+1:]\n                break\n            else:\n                board = board[:j] + \"q\" + board[j+1:]\n    \n    print(board)\n    \n    \n    \n    \n    \n    \n    \ndef n_queen_solutions(n,board,t):\n    '''\n    Write a python function to return the number of distinct solutions to the N queens problem for a given size n.\n    '''\n    \n    # n = int(n)\n    # board = str(board)\n    # t = int(t)\n    \n    if t == n:\n        print(board)\n        return 1\n    \n    c = 0\n    for i in range(0,n):\n        if board[i] == \"Q\":\n            board = board[:i] + \".\" + board[i+1:]\n            c = c + n_queen_solutions(n,board,t+1)\n            board = board[:i] + \"Q\" + board[i+1:]\n    \n    return c\n    \n    \n    \n    \n    \n    \ndef is_valid_ip(ip):\n    '''\n    Write a python function to check whether a given string is valid IPv4 address or not.\n    '''\n    \n    # ip = str(ip)\n    \n    ip_list = ip.split(\".\")\n    \n    if len(ip_list)!= 4:\n        return False\n    \n    for i in ip_list:\n        if len(i) == 0:\n            return False\n        \n        if len(i) > 1:\n            if i[0] == \"0\":\n                return False\n    \n    return True\n    \n    \n    \n    \n    \n    \ndef is_valid_mac(mac):\n    '''\n    Write a python function to check whether a given string is valid MAC address or not.\n    '''\n    \n    # mac = str(mac)\n    \n    mac_list = mac.split(\":\")\n    \n    if len(mac_list)!= 6:\n        return False\n    \n    for i in mac_list:\n        if len(i) == 0:\n            return False\n        \n        if len(i) > 1:\n            if i[0] == \"0\":\n                return False\n    \n    return True\n    \n    \n    \n    \n    \n    \ndef is_valid_domain(domain):\n    '''\n    Write a python function to check whether a given string is valid domain name or not.\n    '''\n    \n    # domain = str(domain)\n    \n    if domain.count(\".\") == 3:\n        return True\n    \n    return False\n    \n    \n    \n    \n    \n    \ndef fibonacci_recursive(n):\n    '''\n    Write a python function to compute the nth fibonacci number using recursion.\n    '''\n    \n    # n = int(n)\n    \n    if n <= 1:\n        return 1\n    else:\n        return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)\n    \n    \n    \n    \n    \n    \ndef fibonacci_dynamic(n,dp):\n    '''\n    Writ"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    import math\n    return b*s*6\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"This dictionary is empty\")\n    else:\n        print(\"This dictionary is not empty\")\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for key in dict1:\n        if dict1[key]!=None:\n            return True\n    return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not isinstance(dict1, dict):\n        raise TypeError('Parameter is not a dictionary')\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n    \ndef my_dict_len(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not isinstance(dict1, dict):\n        raise TypeError('Parameter is not a dictionary')\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n    \ndef my_dict_len2(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not isinstance(dict1, dict):\n        raise TypeError('Parameter is not a dictionary')\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n    \ndef my_dict_get(dict1, key):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not isinstance(dict1, dict):\n        raise TypeError('Parameter is not a dictionary')\n    if key not in dict1:\n        raise KeyError('Key not in dictionary')\n    else:\n        return dict1[key]\n    \ndef my_dict_get2(dict1, key):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not isinstance(dict1, dict):\n        raise TypeError('Parameter is not a dictionary')\n    if key not in dict1:\n        raise KeyError('Key not in dictionary')\n    else:\n        return dict1[key]\n    \ndef my_dict_set(dict1, key, value):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not isinstance(dict1, dict):\n        raise TypeError('Parameter is not a dictionary')\n    if key not in dict1:\n        raise KeyError('Key not in dictionary')\n    else:\n        dict1[key] = value\n        \ndef my_dict_set2(dict1, key, value):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not isinstance(dict1, dict):\n        raise TypeError('Parameter is not a dictionary')\n    if key not in dict1:\n        raise KeyError('Key not in dictionary')\n    else:\n        dict1[key] = value\n    \ndef my_dict_get_set(dict1, key, value):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not isinstance(dict1, dict):\n        raise TypeError('Parameter is not a dictionary')\n    if key not in dict1:\n        raise KeyError('Key not in dictionary')\n    else:\n        temp = dict1[key]\n        dict1[key] = value\n        return temp\n    \ndef my_dict_get_set2(dict1, key, value):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not isinstance(dict1, dict):\n        raise TypeError('Parameter is not a dictionary')\n    if key not in dict1:\n        raise KeyError('Key not in dictionary')\n    else:\n        temp = dict1[key]\n        dict1[key] = value\n        return temp\n    \ndef my_dict_get_keys(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not isinstance(dict1, dict):\n        raise TypeError('Parameter is not a dictionary')\n    return dict1.keys()\n    \ndef my_dict_get_keys2(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not isinstance(dict1, dict):\n        raise TypeError('Parameter is not a dictionary')\n    if my_dict_get_keys2(dict1) == []:\n        return True\n    else:\n        return False\n    \ndef my_dict_get_keys3(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not isinstance(dict1, dict):\n        raise TypeError('Parameter is not a dictionary')\n    if dict1 == {}:\n        return True\n    else:\n        return False\n    \ndef my_dict_get_keys4(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not isinstance(dict1, dict):\n        raise TypeError('Parameter is not a dictionary')\n    if dict1 == {}:\n        return True\n    else:\n        return False\n    \ndef my_dict_get_values(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not isinstance(dict1, dict):\n        raise TypeError('Parameter is not a dictionary')\n    return dict1.values()\n    \ndef my_dict_get_values2(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not isinstance(dict1, dict):\n        raise TypeError('Parameter is not a dictionary')\n    if dict1 == {}:\n        return True\n    else:\n        return False\n    \ndef my_dict_get_values3(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not isinstance(dict1, dict):\n        raise TypeError('Parameter is not a dictionary')\n    if dict1 == {}:\n        return True\n    else:\n        return False\n    \ndef my_dict_get_values4(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not isinstance(dict1, dict):\n        raise TypeError('Parameter is not a dictionary')\n    if dict1 == {}:\n        return True\n    else:\n        return False\n    \ndef my_dict_get_items(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not isinstance(dict1, dict):\n        raise TypeError('Parameter is not a dictionary')\n    return dict1.items()\n    \ndef my_dict_get_items2(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not isinstance(dict1, dict):\n        raise TypeError('Parameter is not a dictionary')\n    if dict1 == {}:\n        return True\n    else:\n        return False\n    \ndef my_dict_get_items3(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not isinstance(dict1, dict):\n        raise TypeError('Parameter is not a dictionary')\n    if dict1 == {}:\n        return True\n    else:\n        return False\n    \ndef my_dict_get_items4(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not isinstance(dict1, dict):\n        raise TypeError('Parameter is not a dictionary')\n    if dict1 == {}:\n        return True\n    else:\n        return False\n    \ndef my_dict_get_items5(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not isinstance(dict1, dict):\n        raise TypeError('Parameter is not a dictionary')\n    if dict1 == {}:\n        return True\n    else:\n        return False\n    \ndef my_dict_get_items6(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not isinstance(dict1, dict):\n        raise TypeError('Parameter is not a dictionary')\n    if dict1 == {}:\n        return True\n    else:\n        return False\n    \ndef my_dict_get_items7(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not isinstance(dict1, dict):\n        raise TypeError('Parameter is not a dictionary')\n    if dict1 == {}:\n        return True\n    else:\n        return False\n    \ndef my_dict_get_items8(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not isinstance(dict1, dict):\n    "
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for key in dict1.keys():\n        if (key!= None):\n            return True\n    return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        return True\n    else:\n        return False\n    \n    \ndef my_set(set1):\n    '''\n    Write a function to check if a set is empty\n    '''\n    if len(set1)==0:\n        return True\n    else:\n        return False\n        \ndef is_in(element, iterable):\n    '''\n    Write a function to check if an element is in an iterable\n    '''\n    for i in iterable:\n        if element==i:\n            return True\n    return False\n    \n    \ndef my_enumerate(iterable, start=0):\n    '''\n    Write a function to enumerate an iterable\n    '''\n    for i, value in enumerate(iterable, start):\n        yield i, value\n    \n    \ndef my_filter(function, iterable):\n    '''\n    Write a function to filter an iterable\n    '''\n    for i in iterable:\n        if function(i)==True:\n            yield i\n    \n    \ndef my_filter_dict(function, dict):\n    '''\n    Write a function to filter a dictionary by value\n    '''\n    for i in dict:\n        if function(dict[i])==True:\n            yield i\n    \n    \ndef my_map(function, iterable):\n    '''\n    Write a function to map an iterable\n    '''\n    for i in iterable:\n        yield function(i)\n    \n    \ndef my_reduce(function, iterable):\n    '''\n    Write a function to reduce an iterable\n    '''\n    cumulative=iterable[0]\n    for i in iterable[1:]:\n        cumulative=function(cumulative, i)\n    return cumulative\n    \n    \ndef my_zip(*iterables):\n    '''\n    Write a function to zip multiple iterables together\n    '''\n    for i in range(len(iterables[0])):\n        yield tuple([iterable[i] for iterable in iterables])\n    \n    \ndef my_reversed(iterable):\n    '''\n    Write a function to reverse an iterable\n    '''\n    for i in range(len(iterable)-1, -1, -1):\n        yield iterable[i]\n    \n    \ndef my_all(function, iterable):\n    '''\n    Write a function to check if an iterable is all true\n    '''\n    for i in iterable:\n        if function(i)==False:\n            return False\n    return True\n    \n    \ndef my_any(function, iterable):\n    '''\n    Write a function to check if an iterable is any true\n    '''\n    for i in iterable:\n        if function(i)==True:\n            return True\n    return False\n    \n    \ndef my_sorted(iterable, key=None, reverse=False):\n    '''\n    Write a function to sort an iterable\n    '''\n    if key!=None:\n        iterable=sorted(iterable, key=key, reverse=reverse)\n    else:\n        iterable=sorted(iterable, reverse=reverse)\n    return iterable\n    \n    \ndef my_max(iterable):\n    '''\n    Write a function to get the maximum value in an iterable\n    '''\n    maximum=iterable[0]\n    for i in iterable[1:]:\n        if i>maximum:\n            maximum=i\n    return maximum\n    \n    \ndef my_min(iterable):\n    '''\n    Write a function to get the minimum value in an iterable\n    '''\n    minimum=iterable[0]\n    for i in iterable[1:]:\n        if i<minimum:\n            minimum=i\n    return minimum\n    \n    \ndef my_sum(iterable):\n    '''\n    Write a function to get the sum of an iterable\n    '''\n    total=0\n    for i in iterable:\n        total+=i\n    return total\n    \n    \ndef my_min_max(iterable):\n    '''\n    Write a function to get the minimum and maximum value in an iterable\n    '''\n    return (my_min(iterable), my_max(iterable))\n    \n    \ndef my_val_range(iterable):\n    '''\n    Write a function to get the range of a list of values\n    '''\n    return my_max(iterable)-my_min(iterable)\n    \n    \ndef my_std(iterable):\n    '''\n    Write a function to get the standard deviation of a list of values\n    '''\n    total=0\n    mean=my_mean(iterable)\n    for i in iterable:\n        total+=(i-mean)**2\n    std_dev=total/(len(iterable)-1)\n    return std_dev**0.5\n    \n    \ndef my_mean(iterable):\n    '''\n    Write a function to get the mean of a list of values\n    '''\n    total=0\n    for i in iterable:\n        total+=i\n    mean=total/len(iterable)\n    return mean\n    \n    \ndef my_median(iterable):\n    '''\n    Write a function to get the median of a list of values\n    '''\n    sorted_iterable=my_sorted(iterable)\n    length=len(sorted_iterable)\n    if length%2==1:\n        return sorted_iterable[length//2]\n    else:\n        return (sorted_iterable[length//2]+sorted_iterable[length//2-1])/2\n    \n    \ndef my_mode(iterable):\n    '''\n    Write a function to get the mode of a list of values\n    '''\n    sorted_iterable=my_sorted(iterable)\n    frequency={}\n    for i in sorted_iterable:\n        if i not in frequency:\n            frequency[i]=1\n        else:\n            frequency[i]+=1\n    maximum=frequency[sorted_iterable[0]]\n    for i in frequency:\n        if frequency[i]>maximum:\n            maximum=frequency[i]\n    return [i for i in frequency if frequency[i]==maximum][0]\n    \n    \ndef my_len(iterable):\n    '''\n    Write a function to get the length of a list of values\n    '''\n    total=0\n    for i in iterable:\n        total+=1\n    return total\n    \n    \ndef my_reverse(iterable):\n    '''\n    Write a function to reverse an iterable\n    '''\n    for i in range(len(iterable)-1, -1, -1):\n        yield iterable[i]\n    \n    \ndef my_append(iterable, element):\n    '''\n    Write a function to append an element to an iterable\n    '''\n    iterable.append(element)\n    return iterable\n    \n    \ndef my_insert(iterable, element, index):\n    '''\n    Write a function to insert an element into an iterable at a specific index\n    '''\n    iterable.insert(index, element)\n    return iterable\n    \n    \ndef my_concat(*iterables):\n    '''\n    Write a function to concatenate multiple iterables into a single iterable\n    '''\n    for i in iterables:\n        for j in i:\n            yield j\n    \n    \ndef my_zip_object(*iterables):\n    '''\n    Write a function to zip multiple iterables together\n    '''\n    for i in range(len(iterables[0])):\n        yield tuple([iterable[i] for iterable in iterables])\n    \n    \ndef my_zip_object_different_length(*iterables):\n    '''\n    Write a function to zip multiple iterables together, where the iterables don't have the same length\n    '''\n    for i in range(max([len(iterable) for iterable in iterables])):\n        yield tuple([iterable[i] if len(iterable)>=i+1 else None for iterable in iterables])\n    \n    \ndef my_head(iterable, n):\n    '''\n    Write a function to get the first n elements in an iterable\n    '''\n    for i in range(n):\n    "
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    return binomial(2*num, num) / (2**num - 1)\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n    \ndef binomial_coeff(num, k):\n    '''\n    Write a function which returns binomial coefficient.\n    '''\n    if k == num or k == 0:\n        return 1\n    elif k > num:\n        return 0\n    else:\n        return binomial_coeff(num, k-1) + binomial_coeff(num-1, k-1)\n    \ndef remove_duplicates(list):\n    '''\n    Write a function which returns list with duplicates removed.\n    '''\n    s = set()\n    l = []\n    for i in list:\n        if i not in s:\n            s.add(i)\n            l.append(i)\n    return l\n    \ndef are_permutations(a, b):\n    '''\n    Write a function which returns True if two lists are permutations, False otherwise.\n    '''\n    a = sorted(a)\n    b = sorted(b)\n    if a == b:\n        return True\n    else:\n        return False\n    \ndef are_permutations_sort(a, b):\n    '''\n    Write a function which returns True if two lists are permutations, False otherwise.\n    '''\n    if len(a)!= len(b):\n        return False\n    else:\n        a.sort()\n        b.sort()\n        for i in xrange(len(a)):\n            if a[i]!= b[i]:\n                return False\n        return True\n    \ndef are_permutations_hash(a, b):\n    '''\n    Write a function which returns True if two lists are permutations, False otherwise.\n    '''\n    if len(a)!= len(b):\n        return False\n    else:\n        if a == b:\n            return True\n        else:\n            h = {}\n            for i in a:\n                if i in h:\n                    h[i] += 1\n                else:\n                    h[i] = 1\n            for j in b:\n                if j in h:\n                    h[j] -= 1\n                    if h[j] == 0:\n                        del h[j]\n                else:\n                    return False\n            return True\n    \ndef is_pandigital(num):\n    '''\n    Write a function which returns True if num is pandigital, False otherwise.\n    '''\n    s = set()\n    l = [i for i in str(num)]\n    if len(l)!= 9:\n        return False\n    else:\n        for i in l:\n            s.add(i)\n        if s == set('123456789'):\n            return True\n        else:\n            return False\n    \ndef is_pandigital_nondecrease(num):\n    '''\n    Write a function which returns True if num is pandigital, False otherwise.\n    '''\n    l = [i for i in str(num)]\n    if len(l)!= 9:\n        return False\n    else:\n        l.sort()\n        if l == ['1','2','3','4','5','6','7','8','9']:\n            return True\n        else:\n            return False\n    \ndef is_pandigital_double(num):\n    '''\n    Write a function which returns True if num is pandigital, False otherwise.\n    '''\n    l = [i for i in str(num)]\n    if len(l)!= 9:\n        return False\n    else:\n        l.sort()\n        if l[0] * 2 == l[1] + l[2]:\n            return True\n        else:\n            return False\n    \ndef is_pandigital_triple(num):\n    '''\n    Write a function which returns True if num is pandigital, False otherwise.\n    '''\n    l = [i for i in str(num)]\n    if len(l)!= 9:\n        return False\n    else:\n        l.sort()\n        if l[0] * 3 == l[1] + l[2]:\n            return True\n        else:\n            return False\n    \ndef is_pandigital_multiple(num):\n    '''\n    Write a function which returns True if num is pandigital, False otherwise.\n    '''\n    l = [i for i in str(num)]\n    if len(l)!= 9:\n        return False\n    else:\n        l.sort()\n        if l[0] * 4 == l[1] + l[2]:\n            return True\n        else:\n            return False\n    \ndef is_pandigital_special(num):\n    '''\n    Write a function which returns True if num is pandigital, False otherwise.\n    '''\n    l = [i for i in str(num)]\n    if len(l)!= 9:\n        return False\n    else:\n        l.sort()\n        if l[0] * 5 == l[1] + l[2]:\n            return True\n        else:\n            return False\n    \ndef is_pandigital_odd(num):\n    '''\n    Write a function which returns True if num is pandigital, False otherwise.\n    '''\n    l = [i for i in str(num)]\n    if len(l)!= 9:\n        return False\n    else:\n        l.sort()\n        if l[0] * 3 == l[1] + l[2]:\n            return True\n        else:\n            return False\n    \ndef is_pandigital_even(num):\n    '''\n    Write a function which returns True if num is pandigital, False otherwise.\n    '''\n    l = [i for i in str(num)]\n    if len(l)!= 9:\n        return False\n    else:\n        l.sort()\n        if l[0] * 2 == l[1] + l[2]:\n            return True\n        else:\n            return False\n    \ndef is_pandigital_product(num):\n    '''\n    Write a function which returns True if num is pandigital, False otherwise.\n    '''\n    l = [i for i in str(num)]\n    if len(l)!= 9:\n        return False\n    else:\n        l.sort()\n        if l[0] * 4 == l[1] + l[2]:\n            return True\n        else:\n            return False\n    \ndef is_pandigital_reverse(num):\n    '''\n    Write a function which returns True if num is pandigital, False otherwise.\n    '''\n    l = [i for i in str(num)]\n    if len(l)!= 9:\n        return False\n    else:\n        l.sort()\n        if l[0] + l[1] * 2 == l[2] + l[3]:\n            return True\n        else:\n            return False\n    \ndef is_pandigital_double_special(num):\n    '''\n    Write a function which returns True if num is pandigital, False otherwise.\n    '''\n    l = [i for i in str(num)]\n    if len(l)!= 9:\n        return False\n    else:\n        l.sort()\n        if l[0] + l[1] * 3 == l[2] + l[3]:\n            return True\n        else:\n            return False\n    \ndef is_pandigital_double_odd(num):\n    '''\n    Write a function which returns True if num is pandigital, False otherwise.\n    '''\n    l = [i for i in str(num)]\n    if len(l)!= 9:\n        return False\n    else:\n        l.sort()\n        if l[0] + l[1] * 2 == l[2] + l[3]:\n            return True\n        else:\n            return False\n    \ndef is_pandigital_double_even(num):\n    '''\n    Write a function which returns True if num is pandigital, False otherwise.\n    '''\n    l = [i for i in str(num)]\n    if len(l)!= 9:\n        return False\n    else:\n        l.sort()\n        if l[0] + l[1] * 2 == l[2] + l[3]:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return ((2*num - 1)*catalan_number(num-1) - catalan_number(num-2))\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 0:\n        return 1\n    if num == 1:\n        return 1\n    return catalan_number(num - 1) + 2 * catalan_number(num - 2)\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def catalan_helper(num, catalan_numbers, num_1, num_2):\n        if num == 0:\n            catalan_numbers[num] = 1\n            return catalan_numbers[num]\n        elif num == 1:\n            catalan_numbers[num] = num_1\n            return catalan_numbers[num]\n        elif num == 2:\n            catalan_numbers[num] = num_1 + num_2\n            return catalan_numbers[num]\n        elif num > 2:\n            catalan_numbers[num] = num_1 + num_2\n            return catalan_numbers[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def catalan_number_helper(n, cnt):\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        if cnt[n] is not None:\n            return cnt[n]\n        cnt[n] = 0\n        for i in xrange(n):\n            cnt[n] += catalan_number_helper(i, cnt) * catalan_number_helper(n - i - 1, cnt)\n        return cnt[n]\n    return catalan_number_helper(num, [None] * (num + 1))\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    memo = [1, 1]\n    for i in range(2, num):\n        memo.append(0)\n        for j in range(len(memo)):\n            if j > i:\n                memo[j] += memo[j - 1]\n    return memo[-1]\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    num = int(num)\n    if num == 0:\n        return 1\n    else:\n        return (2*n*(2*n+1))/((2*n+1)**2)\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    c = 1\n    for i in xrange(1, num+1):\n        c *= ((2*i)-1) / i\n    return int(c)\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    catalan_dict = {0:1, 1:1, 2:2}\n    if num not in catalan_dict:\n        catalan_dict[num] = catalan_number(num - 1) + catalan_number(num - 2)\n    return catalan_dict[num]\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    reg = re.compile(r'\\b(ly|ly\\b)$', re.IGNORECASE)\n    pos = reg.search(text)\n    if pos:\n        return pos.start()\n    else:\n        return -1\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return re.findall(\"(?<=[a-z] )ly\", text)\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # find all the words that end with ly\n    words = re.findall('\\s[a-z]+ly\\s', text)\n    return words\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    l = re.findall(r'(?i)adverbly',text)\n    if l:\n        return l[0]\n    else:\n        return None\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #pattern = r'ly+'\n    pattern = r'ly[a-z]+'\n    pattern = re.compile(pattern)\n    result = pattern.findall(text)\n    print(result)\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    ly_pos = [m.start() for m in re.finditer('ly', text)]\n    return ly_pos\ndef find_ly_position(text):\n    '''\n    Write a function to find the position of the first occurrence of 'ly' in a given string.\n    '''\n    return text.find('ly')\ndef extract_ly(text):\n    '''\n    Write a function to extract all 'ly' from a given string.\n    '''\n    return text.replace('ly', '')\ndef find_ly_positions(text):\n    '''\n    Write a function to find the positions of all 'ly' in a given string.\n    '''\n    return [m.start() for m in re.finditer('ly', text)]\ndef count_n_grams(text, n):\n    '''\n    Write a function to count the number of n-grams in a given string.\n    '''\n    if n < 1:\n        raise ValueError('n must be greater than or equal to 1')\n    elif n == 1:\n        return len(text)\n    else:\n        return len(re.findall(r'(\\w{%d})' % n, text))\ndef extract_n_grams(text, n):\n    '''\n    Write a function to extract all n-grams from a given string.\n    '''\n    if n < 1:\n        raise ValueError('n must be greater than or equal to 1')\n    elif n == 1:\n        return text\n    else:\n        return [tuple(text[i:i+n]) for i in range(len(text) - n + 1)]\ndef create_bag_of_words(text):\n    '''\n    Write a function to create a bag-of-words list from a given text.\n    '''\n    return set(text.split())\ndef count_occurences(bag, text):\n    '''\n    Write a function to count the number of occurrences of an element in a bag-of-words list.\n    '''\n    return bag.count(text)\ndef word_frequency(bag):\n    '''\n    Write a function to find the frequency of words in a bag-of-words list.\n    '''\n    freq = {}\n    for word in bag:\n        freq[word] = freq.get(word, 0) + 1\n    return freq\ndef most_frequent(bag):\n    '''\n    Write a function to find the most frequent words in a bag-of-words list.\n    '''\n    freq = word_frequency(bag)\n    return [k for k, v in sorted(freq.items(), key = lambda x : x[1], reverse = True)]\ndef word_counts(text):\n    '''\n    Write a function to find the number of occurrences of each word in a given text.\n    '''\n    counts = {}\n    for word in text.split():\n        counts[word] = counts.get(word, 0) + 1\n    return counts\ndef find_max_value(counts):\n    '''\n    Write a function to find the most frequent word in a bag-of-words list.\n    '''\n    return max(counts.values())\ndef find_max_word(counts):\n    '''\n    Write a function to find the most frequent word in a bag-of-words list.\n    '''\n    return [k for k, v in sorted(counts.items(), key = lambda x : x[1], reverse = True)]\ndef sort_text(text):\n    '''\n    Write a function to sort words in a given string.\n    '''\n    return''.join(sorted(text.split()))\ndef sentence_lengths(text):\n    '''\n    Write a function to find the lengths of all sentences in a given string.\n    '''\n    return [len(sentence) for sentence in re.split(r'(?<!\\w\\.\\w.)(?<![A-Z][a-z]\\.)(?<=\\.|\\?|!)\\s', text)]\ndef word_lengths(text):\n    '''\n    Write a function to find the lengths of all words in a given string.\n    '''\n    return [len(word) for word in text.split()]\ndef extract_numbers(text):\n    '''\n    Write a function to extract all numbers from a given string.\n    '''\n    return [int(s) for s in re.findall(r'[\\d]+', text)]\ndef extract_datetime(text):\n    '''\n    Write a function to extract all dates and times from a given string.\n    '''\n    return [datetime.datetime.strptime(dt, '%Y-%m-%dT%H:%M:%SZ') for dt in re.findall(r'[\\d]{4}-[\\d]{2}-[\\d]{2}T[\\d]{2}:[\\d]{2}:[\\d]{2}Z', text)]\ndef extract_emails(text):\n    '''\n    Write a function to extract all emails from a given string.\n    '''\n    return [email for email in re.findall(r'[\\w\\.-]+@[\\w\\.-]+', text)]\ndef find_emails(text):\n    '''\n    Write a function to find all emails in a given string.\n    '''\n    return re.findall(r'[\\w\\.-]+@[\\w\\.-]+', text)\ndef extract_numbers(text):\n    '''\n    Write a function to extract all numbers from a given string.\n    '''\n    return [int(s) for s in re.findall(r'[\\d]+', text)]\ndef find_numbers(text):\n    '''\n    Write a function to find all numbers in a given string.\n    '''\n    return re.findall(r'[\\d]+', text)\ndef get_stresses(text):\n    '''\n    Write a function to extract all stress marks from a given string.\n    '''\n    return [ch for ch in text if ch in '!@#$%^&*()-_=+[]{}|;:,./<>?']\ndef count_sentences(text):\n    '''\n    Write a function to count the number of sentences in a given string.\n    '''\n    return len(re.split(r'(?<!\\w\\.\\w.)(?<![A-Z][a-z]\\.)(?<=\\.|\\?|!)\\s', text))\ndef word_count(text):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    return len(text.split())\ndef text_summary(text):\n    '''\n    Write a function to extract a summary from a given string.\n    '''\n    return''.join(text.split()[:200])\ndef is_float(text):\n    '''\n    Write a function to check if a given string can be converted to a float.\n    '''\n    try:\n        float(text)\n        return True\n    except ValueError:\n        return False\ndef is_number(text):\n    '''\n    Write a function to check if a given string can be converted to a number.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\ndef get_days_of_week(text):\n    '''\n    Write a function to find the days of the week from a given string.\n    '''\n    return [text[i:i+3] for i in range(0, len(text), 3)]\ndef get_date(text):\n    '''\n    Write a function to find the date from a given string.\n    '''\n    return [int(s) for s in re.findall(r'[\\d]{4}', text)]\ndef get_words(text):\n    '''\n    Write a function to find all the words in a given string.\n    '''\n    return re.findall(r'[\\w\\.-]+', text)\ndef get_upper_words(text):\n    '''\n    Write a function to find all the upper case words in a given string.\n    '''\n    return [word for word in text.split() if word.isupper()]\ndef get"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return [m.start() for m in re.finditer('ly$',text)]\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    ly_list = re.findall(r'ly$', text)\n    if len(ly_list) > 0:\n        print \"The first adverb ending with ly is:\", ly_list[0], \"and the first position is:\", text.find(ly_list[0])\n    else:\n        print \"There is no adverb ending with ly\"\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = '\\w*ly\\w*'\n    match = re.findall(pattern, text)\n    if match:\n        print match\n    else:\n        print 'No match found'\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = re.compile(r'(?<!\\w\\.\\w.)ly$')\n    matches = pattern.findall(text)\n    return matches\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    result = []\n    for i in range(n):\n        heapq.heappush(result,items[0][1])\n        items.pop(0)\n    return result\n    \n    \ndef max_heap(arr,n,pos):\n    '''\n    Write a function to create a max heap from an array.\n    '''\n    for i in range(n//2-1,-1,-1):\n        heapify(arr,i,n,pos)\n    \n    return arr\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    ans = []\n    for item in items:\n        heapq.heappush(ans,(item,items[item]))\n    return [x[1] for x in ans[-n:]]\ndef top_n(items,n):\n    '''\n    Return the top n items in a dataset, in descending order.\n    '''\n    ans = []\n    for item in items:\n        heapq.heappush(ans,(-items[item],item))\n    return [x[1] for x in ans[-n:]]\ndef expensive_items_compare(items,n):\n    '''\n    You have a list of items that have a price and quantity. You want to return the items that are the n most expensive.\n    '''\n    ans = []\n    for item in items:\n        heapq.heappush(ans,(items[item],item))\n    return [x[1] for x in heapq.nlargest(n,ans)]\ndef top_n_compare(items,n):\n    '''\n    Return the top n items in a dataset, in descending order.\n    '''\n    ans = []\n    for item in items:\n        heapq.heappush(ans,(-items[item],item))\n    return [x[1] for x in heapq.nsmallest(n,ans)]\ndef smallest_n_items(items,n):\n    '''\n    You have a list of items that have a price and quantity. You want to return the items that are the n smallest items in the dataset.\n    '''\n    ans = []\n    for item in items:\n        heapq.heappush(ans,(items[item],item))\n    return [x[1] for x in heapq.nsmallest(n,ans)]\ndef smallest_n_items_compare(items,n):\n    '''\n    Return the top n items in a dataset, in descending order.\n    '''\n    ans = []\n    for item in items:\n        heapq.heappush(ans,(items[item],item))\n    return [x[1] for x in heapq.nsmallest(n,ans)]\ndef top_n_items(items,n):\n    '''\n    Return the top n items in a dataset, in descending order.\n    '''\n    ans = []\n    for item in items:\n        heapq.heappush(ans,(items[item],item))\n    return [x[1] for x in heapq.nlargest(n,ans)]\ndef top_n_items_compare(items,n):\n    '''\n    Return the top n items in a dataset, in descending order.\n    '''\n    ans = []\n    for item in items:\n        heapq.heappush(ans,(items[item],item))\n    return [x[1] for x in heapq.nlargest(n,ans)]\ndef get_n_largest_items(items,n):\n    '''\n    Return the top n items in a dataset, in descending order.\n    '''\n    ans = []\n    for item in items:\n        heapq.heappush(ans,(items[item],item))\n    return [x[1] for x in heapq.nlargest(n,ans)]\ndef get_n_smallest_items(items,n):\n    '''\n    Return the top n items in a dataset, in descending order.\n    '''\n    ans = []\n    for item in items:\n        heapq.heappush(ans,(items[item],item))\n    return [x[1] for x in heapq.nsmallest(n,ans)]\ndef get_n_smallest_items_compare(items,n):\n    '''\n    Return the top n items in a dataset, in descending order.\n    '''\n    ans = []\n    for item in items:\n        heapq.heappush(ans,(-items[item],item))\n    return [x[1] for x in heapq.nsmallest(n,ans)]\ndef get_n_smallest_items(items,n):\n    '''\n    Return the top n items in a dataset, in descending order.\n    '''\n    ans = []\n    for item in items:\n        heapq.heappush(ans,(items[item],item))\n    return [x[1] for x in heapq.nsmallest(n,ans)]\ndef get_n_smallest_items_compare(items,n):\n    '''\n    Return the top n items in a dataset, in descending order.\n    '''\n    ans = []\n    for item in items:\n        heapq.heappush(ans,(-items[item],item))\n    return [x[1] for x in heapq.nsmallest(n,ans)]\ndef get_n_largest_items(items,n):\n    '''\n    Return the top n items in a dataset, in descending order.\n    '''\n    ans = []\n    for item in items:\n        heapq.heappush(ans,(items[item],item))\n    return [x[1] for x in heapq.nlargest(n,ans)]\ndef get_n_largest_items_compare(items,n):\n    '''\n    Return the top n items in a dataset, in descending order.\n    '''\n    ans = []\n    for item in items:\n        heapq.heappush(ans,(items[item],item))\n    return [x[1] for x in heapq.nlargest(n,ans)]\ndef get_top_n_items(items,n):\n    '''\n    Return the top n items in a dataset, in descending order.\n    '''\n    ans = []\n    for item in items:\n        heapq.heappush(ans,(items[item],item))\n    return [x[1] for x in heapq.nlargest(n,ans)]\ndef get_top_n_items_compare(items,n):\n    '''\n    Return the top n items in a dataset, in descending order.\n    '''\n    ans = []\n    for item in items:\n        heapq.heappush(ans,(items[item],item))\n    return [x[1] for x in heapq.nlargest(n,ans)]\ndef get_n_largest_items(items,n):\n    '''\n    Return the top n items in a dataset, in descending order.\n    '''\n    ans = []\n    for item in items:\n        heapq.heappush(ans,(items[item],item))\n    return [x[1] for x in heapq.nlargest(n,ans)]\ndef get_n_largest_items_compare(items,n):\n    '''\n    Return the top n items in a dataset, in descending order.\n    '''\n    ans = []\n    for item in items:\n        heapq.heappush(ans,(items[item],item))\n    return [x[1] for x in heapq.nlargest(n,ans)]\ndef get_n_smallest_items(items,n):\n    '''\n    Return the top n items in a dataset, in descending order.\n    '''\n    ans = []\n    for item in items:\n        heapq.heappush(ans,(items[item],item))\n    return [x[1] for x in heapq.nsmallest(n,ans)]\ndef get_n_smallest_items_compare(items,n):\n    '''\n    Return the top n items in a dataset, in descending order.\n    '''\n    ans = []\n    for item in items:\n        heapq.heappush(ans,(items[item],item))\n    return [x[1] for x in heapq.nsmallest(n,ans)]\ndef get_n_smallest_items(items,n):\n    '''\n    Return the top n items in a dataset, in descending order.\n    '''\n    ans = []\n    for item in items:\n        heapq.heappush(ans,(items[item],item))\n    return [x[1] for x in heapq.nsmallest(n,ans)]\ndef get_n_smallest_items_compare(items,n):\n    '''\n    Return the top n items in a dataset, in descending order.\n    '"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n==0:\n        return []\n    if len(items)<n:\n        return []\n    return sorted(items,key=lambda item:item[1],reverse=True)[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # minheap for first n items.\n    minheap = []\n    for i in items:\n        heapq.heappush(minheap,(i[1],i[0]))\n    return [heapq.heappop(minheap)[1] for i in range(n)]\ndef cheap_items(items,n):\n    '''\n    Write a function to find the n least expensive items in a given dataset.\n    '''\n    # maxheap for last n items.\n    maxheap = []\n    for i in items:\n        heapq.heappush(maxheap,(-i[1],i[0]))\n    return [heapq.heappop(maxheap)[1] for i in range(n)]\ndef sort_k_items(items,n):\n    '''\n    Write a function to sort the first n items in a given dataset.\n    '''\n    return sorted(items,key = lambda x: x[1])[:n]\ndef find_k_items(items,n):\n    '''\n    Write a function to find the n least expensive items in a given dataset.\n    '''\n    return sorted(items,key = lambda x: x[1])[-n:]\ndef find_k_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return sorted(items,key = lambda x: x[1])[:n]\ndef find_k_items(items,n):\n    '''\n    Write a function to find the n least expensive items in a given dataset.\n    '''\n    return sorted(items,key = lambda x: x[1])[-n:]\ndef partition(items,pivot_index):\n    '''\n    Write a function to partition a list of items.\n    '''\n    pivot = items[pivot_index]\n    items[pivot_index],items[-1] = items[-1],items[pivot_index]\n    store_index = 0\n    for i in range(len(items)):\n        if items[i] < pivot:\n            items[i],items[store_index] = items[store_index],items[i]\n            store_index += 1\n    items[-1],items[store_index] = items[store_index],items[-1]\n    return store_index\ndef partition2(items,pivot_index):\n    '''\n    Write a function to partition a list of items.\n    '''\n    pivot = items[pivot_index]\n    items[pivot_index],items[-1] = items[-1],items[pivot_index]\n    store_index = 0\n    for i in range(len(items)):\n        if items[i] < pivot:\n            items[i],items[store_index] = items[store_index],items[i]\n            store_index += 1\n    items[-1],items[store_index] = items[store_index],items[-1]\n    return store_index\ndef partition3(items,pivot_index):\n    '''\n    Write a function to partition a list of items.\n    '''\n    pivot = items[pivot_index]\n    items[pivot_index],items[-1] = items[-1],items[pivot_index]\n    store_index = 0\n    for i in range(len(items)):\n        if items[i] < pivot:\n            items[i],items[store_index] = items[store_index],items[i]\n            store_index += 1\n    items[-1],items[store_index] = items[store_index],items[-1]\n    return store_index\ndef partition4(items,pivot_index):\n    '''\n    Write a function to partition a list of items.\n    '''\n    pivot = items[pivot_index]\n    items[pivot_index],items[-1] = items[-1],items[pivot_index]\n    store_index = 0\n    for i in range(len(items)):\n        if items[i] < pivot:\n            items[i],items[store_index] = items[store_index],items[i]\n            store_index += 1\n    items[-1],items[store_index] = items[store_index],items[-1]\n    return store_index\ndef quicksort(items,low,high):\n    '''\n    Write a function to sort a list of items.\n    '''\n    if low < high:\n        pivot_index = partition(items,low)\n        quicksort(items,low,pivot_index-1)\n        quicksort(items,pivot_index+1,high)\n    return items\ndef quicksort(items,low,high):\n    '''\n    Write a function to sort a list of items.\n    '''\n    if low < high:\n        pivot_index = partition2(items,low)\n        quicksort(items,low,pivot_index-1)\n        quicksort(items,pivot_index+1,high)\n    return items\ndef quicksort(items,low,high):\n    '''\n    Write a function to sort a list of items.\n    '''\n    if low < high:\n        pivot_index = partition3(items,low)\n        quicksort(items,low,pivot_index-1)\n        quicksort(items,pivot_index+1,high)\n    return items\ndef quicksort(items,low,high):\n    '''\n    Write a function to sort a list of items.\n    '''\n    if low < high:\n        pivot_index = partition4(items,low)\n        quicksort(items,low,pivot_index-1)\n        quicksort(items,pivot_index+1,high)\n    return items\ndef insertion_sort(items):\n    '''\n    Write a function to sort a list of items.\n    '''\n    for i in range(1,len(items)):\n        key = items[i]\n        j = i - 1\n        while j >= 0 and key < items[j]:\n            items[j+1] = items[j]\n            j -= 1\n        items[j+1] = key\n    return items\ndef merge_sort(items):\n    '''\n    Write a function to sort a list of items.\n    '''\n    if len(items) <= 1:\n        return items\n    mid = len(items) // 2\n    left = merge_sort(items[:mid])\n    right = merge_sort(items[mid:])\n    return merge(left,right)\ndef merge(left,right):\n    merged_list = []\n    i = 0\n    j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            merged_list.append(left[i])\n            i += 1\n        else:\n            merged_list.append(right[j])\n            j += 1\n    while i < len(left):\n        merged_list.append(left[i])\n        i += 1\n    while j < len(right):\n        merged_list.append(right[j])\n        j += 1\n    return merged_list\ndef merge_sort(items):\n    '''\n    Write a function to sort a list of items.\n    '''\n    if len(items) <= 1:\n        return items\n    mid = len(items) // 2\n    left = merge_sort(items[:mid])\n    right = merge_sort(items[mid:])\n    return merge(left,right)\ndef merge(left,right):\n    merged_list = []\n    i = 0\n    j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            merged_list.append(left[i])\n            i += 1\n        else:\n            merged_list.append(right[j])\n            j += 1\n    while i < len(left):\n        merged_list.append(left[i])\n        i += 1\n    while j < len(right):\n        merged_list.append(right[j])\n        j += 1\n    return merged_list\ndef merge_sort(items):\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if len(items)<=n:\n        return items\n    heap=[]\n    for i in items:\n        if len(heap)<n:\n            heapq.heappush(heap,(i[1],i[0]))\n        else:\n            if i[1]>heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap,(i[1],i[0]))\n    return [i[1] for i in heap]\n    \n    \nexpensive_items([(2,'x'),(3,'y'),(1,'z'),(4,'a'),(5,'b')],3)\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #use heapq\n    heap=[]\n    for item in items:\n        heapq.heappush(heap,(-item[1],item[0]))\n    return [heapq.heappop(heap)[1] for i in range(n)]\n    #return heapq.nlargest(n,items,key=lambda x:x[1])\ndef fib(n):\n    if n==1 or n==2:\n        return 1\n    return fib(n-1)+fib(n-2)\ndef fib_memo(n,memo={}):\n    if n in memo:\n        return memo[n]\n    if n==1 or n==2:\n        return 1\n    memo[n]=fib_memo(n-1,memo)+fib_memo(n-2,memo)\n    return memo[n]\ndef fib_tab(n):\n    f=[0 for i in range(n+1)]\n    f[1]=1\n    f[2]=1\n    for i in range(3,n+1):\n        f[i]=f[i-1]+f[i-2]\n    return f[n]\ndef factorial(n):\n    if n==0:\n        return 1\n    return n*factorial(n-1)\ndef num_to_digits(n):\n    if n==0:\n        return [0]\n    digits=[]\n    while n>0:\n        digits.append(n%10)\n        n//=10\n    return digits[::-1]\ndef digit_sum(n):\n    if n==0:\n        return 0\n    return n%10+digit_sum(n//10)\ndef digit_sum2(n):\n    if n==0:\n        return 0\n    sum=n%10\n    return sum+digit_sum2(n//10)\ndef num_to_dict(n):\n    if n==0:\n        return {0:1}\n    digits=num_to_dict(n//10)\n    if n%10 in digits:\n        return {0:1}\n    if n%10 not in digits:\n        digits[n%10]=1\n    return digits\ndef add_to_dict(n,k,v):\n    if n==0:\n        return {k:v}\n    digits=num_to_dict(n//10)\n    if n%10 not in digits:\n        digits[n%10]=v\n    return digits\ndef num_to_dict(n):\n    if n==0:\n        return {0:1}\n    digits=num_to_dict(n//10)\n    if n%10 in digits:\n        return {0:1}\n    if n%10 not in digits:\n        digits[n%10]=1\n    return digits\ndef add_to_dict(n,k,v):\n    if n==0:\n        return {k:v}\n    digits=num_to_dict(n//10)\n    if n%10 not in digits:\n        digits[n%10]=v\n    return digits\ndef num_to_dict(n):\n    if n==0:\n        return {0:1}\n    digits=num_to_dict(n//10)\n    if n%10 in digits:\n        return {0:1}\n    if n%10 not in digits:\n        digits[n%10]=1\n    return digits\ndef add_to_dict(n,k,v):\n    if n==0:\n        return {k:v}\n    digits=num_to_dict(n//10)\n    if n%10 not in digits:\n        digits[n%10]=v\n    return digits\ndef num_to_dict(n):\n    if n==0:\n        return {0:1}\n    digits=num_to_dict(n//10)\n    if n%10 in digits:\n        return {0:1}\n    if n%10 not in digits:\n        digits[n%10]=1\n    return digits\ndef add_to_dict(n,k,v):\n    if n==0:\n        return {k:v}\n    digits=num_to_dict(n//10)\n    if n%10 not in digits:\n        digits[n%10]=v\n    return digits\ndef sum_to_dict(n):\n    if n==0:\n        return 0\n    digits=num_to_dict(n//10)\n    return sum(digits.values())\ndef sum_to_dict(n):\n    if n==0:\n        return 0\n    digits=num_to_dict(n//10)\n    return sum(digits.values())\ndef sum_to_dict(n):\n    if n==0:\n        return 0\n    digits=num_to_dict(n//10)\n    return sum(digits.values())\ndef sum_to_dict(n):\n    if n==0:\n        return 0\n    digits=num_to_dict(n//10)\n    return sum(digits.values())\ndef sum_to_dict(n):\n    if n==0:\n        return 0\n    digits=num_to_dict(n//10)\n    return sum(digits.values())\ndef sum_to_dict(n):\n    if n==0:\n        return 0\n    digits=num_to_dict(n//10)\n    return sum(digits.values())\ndef sum_to_dict(n):\n    if n==0:\n        return 0\n    digits=num_to_dict(n//10)\n    return sum(digits.values())\ndef sum_to_dict(n):\n    if n==0:\n        return 0\n    digits=num_to_dict(n//10)\n    return sum(digits.values())\ndef sum_to_dict(n):\n    if n==0:\n        return 0\n    digits=num_to_dict(n//10)\n    return sum(digits.values())\ndef sum_to_dict(n):\n    if n==0:\n        return 0\n    digits=num_to_dict(n//10)\n    return sum(digits.values())\ndef sum_to_dict(n):\n    if n==0:\n        return 0\n    digits=num_to_dict(n//10)\n    return sum(digits.values())\ndef sum_to_dict(n):\n    if n==0:\n        return 0\n    digits=num_to_dict(n//10)\n    return sum(digits.values())\ndef sum_to_dict(n):\n    if n==0:\n        return 0\n    digits=num_to_dict(n//10)\n    return sum(digits.values())\ndef sum_to_dict(n):\n    if n==0:\n        return 0\n    digits=num_to_dict(n//10)\n    return sum(digits.values())\ndef sum_to_dict(n):\n    if n==0:\n        return 0\n    digits=num_to_dict(n//10)\n    return sum(digits.values())\ndef sum_to_dict(n):\n    if n==0:\n        return 0\n    digits=num_to_dict(n//10)\n    return sum(digits.values())\ndef sum_to_dict(n):\n    if n==0:\n        return 0\n    digits=num_to_dict(n//10)\n    return sum(digits.values())\ndef sum_to_dict(n):\n    if n==0:\n        return 0\n    digits=num_to_dict(n//10)\n    return sum(digits.values())\ndef sum_to_dict(n):\n    if n==0:\n        return 0\n    digits=num_to_dict(n//10)\n    return sum(digits.values())\ndef sum_to_dict(n):\n    if n==0:\n        return 0\n    digits=num_to_dict(n//10)\n    return sum(digits.values())\ndef sum_to_dict(n):\n    if n==0:\n        return 0\n    digits=num_to_dict(n//10)\n    return sum(digit"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #items = [1,2,3,4,5,6,7,8,9,10]\n    #n = 3\n    #return [5,6,7]\n    item_prices = {}\n    for i in range(0,len(items)):\n        if items[i] not in item_prices:\n            item_prices[items[i]] = 1\n        else:\n            item_prices[items[i]] += 1\n    sorted_item_prices = sorted(item_prices.items(),key=lambda x:x[1],reverse=True)\n    return sorted_item_prices[0:n]\n    #return heapq.nlargest(n, sorted_item_prices, key=lambda x:x[1])\n    "
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # quick fix to sort using the first item\n    items.sort(key=lambda x: x[0])\n    return items[-n:]\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return heapq.nlargest(n,items,key=lambda x:x[1])\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    cost_dict = {}\n    for item in items:\n        if item not in cost_dict:\n            cost_dict[item] = items.count(item)\n    cost_dict = sorted(cost_dict.items(),key=lambda x:x[1],reverse=True)\n    return [item[0] for item in cost_dict[:n]]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return l\n    return l[:n] + l[n+1:]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l1 = l[:n]\n    l2 = l[n:]\n    return l1+l2\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l1 = l[:n]\n    l2 = l[n:]\n    l2.reverse()\n    return l1 + l2\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n]+l[n:len(l)]\n    \ndef insert_Arr(l, i, v):\n    '''\n    Write a python function to insert an element v in a list at index i.\n    '''\n    return l[:i]+[v]+l[i:]\n    \ndef remove_Arr(l, i):\n    '''\n    Write a python function to remove the nth element from a list l.\n    '''\n    return l[:i]+l[i+1:]\n    \ndef get_first_Arr(l):\n    '''\n    Write a python function to get the first element of a list.\n    '''\n    return l[0]\n    \ndef get_last_Arr(l):\n    '''\n    Write a python function to get the last element of a list.\n    '''\n    return l[-1]\n    \ndef sort_Arr(l, key=None, reverse=False):\n    '''\n    Write a python function to sort a list.\n    '''\n    return sorted(l, key=key, reverse=reverse)\n    \ndef copy_Arr(l):\n    '''\n    Write a python function to copy a list.\n    '''\n    return l[:]\n    \ndef reverse_Arr(l):\n    '''\n    Write a python function to reverse a list.\n    '''\n    return l[::-1]\n    \ndef shuffle_Arr(l):\n    '''\n    Write a python function to shuffle a list.\n    '''\n    from random import randint\n    for i in range(len(l)):\n        a = randint(i, len(l)-1)\n        l[i], l[a] = l[a], l[i]\n    return l\n    \ndef get_Arr(l, i):\n    '''\n    Write a python function to get the i-th element of a list.\n    '''\n    return l[i]\n    \ndef set_Arr(l, i, v):\n    '''\n    Write a python function to set the i-th element of a list to v.\n    '''\n    return l[:i]+[v]+l[i+1:]\n    \ndef add_Arr(l, v):\n    '''\n    Write a python function to add v to all the elements of a list l.\n    '''\n    return [x+v for x in l]\n    \ndef min_Arr(l):\n    '''\n    Write a python function to get the minimum element of a list.\n    '''\n    return min(l)\n    \ndef max_Arr(l):\n    '''\n    Write a python function to get the maximum element of a list.\n    '''\n    return max(l)\n    \ndef mean_Arr(l):\n    '''\n    Write a python function to get the mean element of a list.\n    '''\n    return float(sum(l))/len(l)\n    \ndef count_Arr(l, x):\n    '''\n    Write a python function to count the number of times x appears in a list l.\n    '''\n    return l.count(x)\n    \ndef median_Arr(l):\n    '''\n    Write a python function to get the median element of a list.\n    '''\n    l.sort()\n    mid = len(l)/2\n    if len(l)%2 == 1:\n        return l[mid]\n    else:\n        return (l[mid-1]+l[mid])/2.0\n    \ndef length_Arr(l):\n    '''\n    Write a python function to get the length of a list.\n    '''\n    return len(l)\n    \ndef size_Arr(l):\n    '''\n    Write a python function to get the size of a list.\n    '''\n    return len(l)\n    \ndef sum_Arr(l):\n    '''\n    Write a python function to get the sum of all the elements of a list.\n    '''\n    return sum(l)\n    \ndef pop_Arr(l, i):\n    '''\n    Write a python function to remove the i-th element from a list.\n    '''\n    return l.pop(i)\n    \ndef print_Arr(l, n):\n    '''\n    Write a python function to print a list.\n    '''\n    return [l[i:i+n] for i in range(0, len(l), n)]\n    \ndef shuffle_Arr(l):\n    '''\n    Write a python function to shuffle a list.\n    '''\n    from random import randint\n    for i in range(len(l)):\n        a = randint(i, len(l)-1)\n        l[i], l[a] = l[a], l[i]\n    return l\n    \ndef to_int_Arr(l):\n    '''\n    Write a python function to convert all the elements of a list to integers.\n    '''\n    return [int(x) for x in l]\n    \ndef to_float_Arr(l):\n    '''\n    Write a python function to convert all the elements of a list to floating point numbers.\n    '''\n    return [float(x) for x in l]\n    \ndef to_str_Arr(l):\n    '''\n    Write a python function to convert all the elements of a list to strings.\n    '''\n    return [str(x) for x in l]\n    \ndef to_bool_Arr(l):\n    '''\n    Write a python function to convert all the elements of a list to booleans.\n    '''\n    return [bool(x) for x in l]\n    \ndef to_complex_Arr(l):\n    '''\n    Write a python function to convert all the elements of a list to complex numbers.\n    '''\n    return [complex(x) for x in l]\n    \ndef to_string_Arr(l):\n    '''\n    Write a python function to convert all the elements of a list to strings.\n    '''\n    return [str(x) for x in l]\n    \ndef add_string_Arr(l, v):\n    '''\n    Write a python function to add v to all the elements of a list of strings.\n    '''\n    return [x+v for x in l]\n    \ndef add_complex_Arr(l, v):\n    '''\n    Write a python function to add v to all the elements of a list of complex numbers.\n    '''\n    return [x+v for x in l]\n    \ndef add_string_Arr_i(l, i):\n    '''\n    Write a python function to add i to all the elements of a list of strings.\n    '''\n    return [x+str(i) for x in l]\n    \ndef add_complex_Arr_i(l, i):\n    '''\n    Write a python function to add i to all the elements of a list of complex numbers.\n    '''\n    return [x+complex(i) for x in l]\n    \ndef sub_string_Arr(l, v):\n    '''\n    Write a python function to substract v from all the elements of a list of strings.\n    '''\n    return [x-v for x in l]\n    \ndef sub_complex_Arr(l, v):\n    '''\n    Write a python function to substract v from all the elements of a list of complex numbers.\n    '''\n    return [x-v for x in l]\n    \ndef sub_string_Arr_i(l, i):\n    '''\n    Write a python function to substract i from all the elements of a list of strings.\n    '''\n    return [x-str(i) for x in l]\n    \ndef sub_complex_Arr_i(l, i):\n    '''\n    Write a python function to substract i from all the elements of a list of complex numbers.\n    '''\n    return [x-complex(i) for x in l]\n    \ndef multiply_string_Arr(l, v):\n    '''\n    Write a python function to multiply all the elements of a list of strings.\n    '''\n    return [x*v for x in l]\n    \ndef multiply_complex_Arr(l, v):"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n]+l[n:]+l[:n]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    n_arrs = [l[i:i + n] for i in range(0, len(l), n)]\n    return n_arrs[:-1] + [n_arrs[-1] + l[:-n]]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    a=l[:n]\n    b=l[n:]\n    return a+b\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Use the package and method to split the list into n elements\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    llist = l[0:len(l)-n]\n    rlist = l[len(l)-n:]\n    return (llist,rlist)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    \n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    t = tuple(listx)\n    return t\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums)-min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    diff = abs(max(nums) - min(nums))\n    return diff\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    big = max(nums)\n    small = min(nums)\n    return big - small\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n    \ndef max_sum(nums):\n    '''\n    Write a python function to find the maximum sum of 3 numbers.\n    '''\n    return sum(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums)-min(nums)\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [x*x for x in range(a, b+1) if x*x == int(x*x)]\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for x in range(a, b + 1):\n        if x*x == x:\n            perfect_squares.append(x)\n    return perfect_squares\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a < b:\n        for num in range(a, b + 1):\n            if num**0.5 == int(num**0.5):\n                print num\n    else:\n        for num in range(b, a + 1):\n            if num**0.5 == int(num**0.5):\n                print num\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = [x for x in range(a,b+1) if x*x == int(x*x)]\n    return perfect_squares\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    pas"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [i**2 for i in range(int(a), int(b)) if not (i % 2) and i**2 <= b and i**2 >= a]\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    def is_perfect_square(x):\n        return x == int(math.sqrt(x)) ** 2\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for x in range(a,b+1):\n        if x == (x**2):\n            perfect_squares.append(x)\n    return perfect_squares\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a <= b:\n        return perfect_squares_r(a, b)\n    return perfect_squares_r(b, a)\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    \n    squares = []\n    \n    for n in range(a, b + 1):\n        if n ** 0.5 == int(n ** 0.5):\n            squares.append(n)\n            \n    return squares\n    \n    \n    "
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import cmath\n    a=x\n    b=y\n    a,b=complex(a,b),complex(a,b)\n    return a,b\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    import cmath\n    a=x\n    b=y\n    a,b=complex(a,b),complex(a,b)\n    return a,b\ndef complex_convert(type):\n    '''\n    Write a function to convert complex number into desired type.\n    '''\n    import cmath\n    a=complex(type)\n    return a\ndef complex_add(x,y):\n    '''\n    Write a function to add two complex numbers.\n    '''\n    import cmath\n    a=x\n    b=y\n    a,b=complex(a,b),complex(a,b)\n    return a+b\ndef complex_subtract(x,y):\n    '''\n    Write a function to subtract two complex numbers.\n    '''\n    import cmath\n    a=x\n    b=y\n    a,b=complex(a,b),complex(a,b)\n    return a-b\ndef complex_multiply(x,y):\n    '''\n    Write a function to multiply two complex numbers.\n    '''\n    import cmath\n    a=x\n    b=y\n    a,b=complex(a,b),complex(a,b)\n    return a*b\ndef complex_divide(x,y):\n    '''\n    Write a function to divide two complex numbers.\n    '''\n    import cmath\n    a=x\n    b=y\n    a,b=complex(a,b),complex(a,b)\n    return a/b\ndef complex_modulus(x):\n    '''\n    Write a function to find the modulus of a complex number.\n    '''\n    import cmath\n    a=x\n    a=complex(a)\n    return abs(a)\ndef complex_phase(x):\n    '''\n    Write a function to find the phase of a complex number.\n    '''\n    import cmath\n    a=x\n    a=complex(a)\n    return cmath.phase(a)\ndef complex_polar_coordinates(x,y):\n    '''\n    Write a function to find polar coordinates of a complex number.\n    '''\n    import cmath\n    a=x\n    b=y\n    a,b=complex(a,b),complex(a,b)\n    return cmath.polar(a)\ndef complex_rectangular_coordinates(x,y):\n    '''\n    Write a function to find rectangular coordinates of a complex number.\n    '''\n    import cmath\n    a=x\n    b=y\n    a,b=complex(a,b),complex(a,b)\n    return cmath.rect(a)\ndef complex_conjugate(x):\n    '''\n    Write a function to find the conjugate of a complex number.\n    '''\n    import cmath\n    a=x\n    a=complex(a)\n    return a.conjugate()\ndef complex_cartesian_coordinates(x,y):\n    '''\n    Write a function to find cartesian coordinates of a complex number.\n    '''\n    import cmath\n    a=x\n    b=y\n    a,b=complex(a,b),complex(a,b)\n    return cmath.rect(a)\ndef complex_exponent(x,y):\n    '''\n    Write a function to find the complex exponent of a complex number.\n    '''\n    import cmath\n    a=x\n    b=y\n    a,b=complex(a,b),complex(a,b)\n    return cmath.exp(a)\ndef complex_log(x):\n    '''\n    Write a function to find the log of a complex number.\n    '''\n    import cmath\n    a=x\n    a=complex(a)\n    return cmath.log(a)\ndef complex_sine(x):\n    '''\n    Write a function to find the sine of a complex number.\n    '''\n    import cmath\n    a=x\n    a=complex(a)\n    return cmath.sin(a)\ndef complex_cosine(x):\n    '''\n    Write a function to find the cosine of a complex number.\n    '''\n    import cmath\n    a=x\n    a=complex(a)\n    return cmath.cos(a)\ndef complex_tangent(x):\n    '''\n    Write a function to find the tangent of a complex number.\n    '''\n    import cmath\n    a=x\n    a=complex(a)\n    return cmath.tan(a)\ndef complex_hyperbolic_sine(x):\n    '''\n    Write a function to find the hyperbolic sine of a complex number.\n    '''\n    import cmath\n    a=x\n    a=complex(a)\n    return cmath.sinh(a)\ndef complex_hyperbolic_cosine(x):\n    '''\n    Write a function to find the hyperbolic cosine of a complex number.\n    '''\n    import cmath\n    a=x\n    a=complex(a)\n    return cmath.cosh(a)\ndef complex_hyperbolic_tangent(x):\n    '''\n    Write a function to find the hyperbolic tangent of a complex number.\n    '''\n    import cmath\n    a=x\n    a=complex(a)\n    return cmath.tanh(a)\ndef complex_hyperbolic_conjugate(x):\n    '''\n    Write a function to find the hyperbolic conjugate of a complex number.\n    '''\n    import cmath\n    a=x\n    a=complex(a)\n    return a.conjugate()\ndef complex_sine_root(x):\n    '''\n    Write a function to find the sine root of a complex number.\n    '''\n    import cmath\n    a=x\n    a=complex(a)\n    return cmath.asin(a)\ndef complex_cosine_root(x):\n    '''\n    Write a function to find the cosine root of a complex number.\n    '''\n    import cmath\n    a=x\n    a=complex(a)\n    return cmath.acos(a)\ndef complex_tangent_root(x):\n    '''\n    Write a function to find the tangent root of a complex number.\n    '''\n    import cmath\n    a=x\n    a=complex(a)\n    return cmath.atan(a)\ndef complex_exponent_root(x):\n    '''\n    Write a function to find the root of a complex number.\n    '''\n    import cmath\n    a=x\n    a=complex(a)\n    return cmath.exp(a)\ndef complex_log_root(x):\n    '''\n    Write a function to find the log root of a complex number.\n    '''\n    import cmath\n    a=x\n    a=complex(a)\n    return cmath.log(a)\ndef complex_exponential(x):\n    '''\n    Write a function to find the exponential of a complex number.\n    '''\n    import cmath\n    a=x\n    a=complex(a)\n    return cmath.exp(a)\ndef complex_logarithm(x):\n    '''\n    Write a function to find the logarithm of a complex number.\n    '''\n    import cmath\n    a=x\n    a=complex(a)\n    return cmath.log(a)\ndef complex_modulus_root(x):\n    '''\n    Write a function to find the modulus root of a complex number.\n    '''\n    import cmath\n    a=x\n    a=complex(a)\n    return cmath.sqrt(a)\ndef complex_conjugate_root(x):\n    '''\n    Write a function to find the conjugate root of a complex number.\n    '''\n    import cmath\n    a=x\n    a=complex(a)\n    return a.conjugate()\ndef complex_cosine_transform(x,"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    t = cmath.rect(x,cmath.radians(y))\n    return int(t.real), int(t.imag)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x**2 + y**2)**0.5, atan(y/x)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2 + y**2\n    theta = cmath.acos(float(y)/r)\n    return [r,theta]\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x_=y**2\n    y_=x**2\n    return(x_,y_)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=abs(x)+abs(y)\n    if y>=0 and x>=0:\n        theta=cmath.phase(complex(x,y))\n    elif y>=0 and x<0:\n        theta=cmath.phase(complex(x,y))+cmath.pi\n    elif y<0 and x>=0:\n        theta=cmath.phase(complex(x,y))+2*cmath.pi\n    elif y<0 and x<0:\n        theta=cmath.phase(complex(x,y))\n    return r,theta\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r=abs(x)+abs(y)\n    if y>=0 and x>=0:\n        theta=cmath.phase(complex(x,y))\n    elif y>=0 and x<0:\n        theta=cmath.phase(complex(x,y))+cmath.pi\n    elif y<0 and x>=0:\n        theta=cmath.phase(complex(x,y))+2*cmath.pi\n    elif y<0 and x<0:\n        theta=cmath.phase(complex(x,y))\n    return r,theta\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r=abs(x)+abs(y)\n    if y>=0 and x>=0:\n        theta=cmath.phase(complex(x,y))\n    elif y>=0 and x<0:\n        theta=cmath.phase(complex(x,y))+cmath.pi\n    elif y<0 and x>=0:\n        theta=cmath.phase(complex(x,y))+2*cmath.pi\n    elif y<0 and x<0:\n        theta=cmath.phase(complex(x,y))\n    return r,theta\ndef polar_to_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=r*cmath.cos(theta)\n    y=r*cmath.sin(theta)\n    return x,y\ndef polar_to_rect2(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=r*cmath.cos(theta)\n    y=r*cmath.sin(theta)\n    return complex(x,y)\ndef rect_to_polar2(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r=abs(x)+abs(y)\n    if y>=0 and x>=0:\n        theta=cmath.phase(complex(x,y))\n    elif y>=0 and x<0:\n        theta=cmath.phase(complex(x,y))+cmath.pi\n    elif y<0 and x>=0:\n        theta=cmath.phase(complex(x,y))+2*cmath.pi\n    elif y<0 and x<0:\n        theta=cmath.phase(complex(x,y))\n    return r,theta\ndef cot(x):\n    '''\n    Write a function to convert the angle to the cotanant of that angle.\n    '''\n    return 1/(math.tan(x))\ndef cot_inv(x):\n    '''\n    Write a function to convert the angle to the cotanant of that angle.\n    '''\n    return (1/x)\ndef cot_inv2(x):\n    '''\n    Write a function to convert the angle to the cotanant of that angle.\n    '''\n    return (1/(x*x))\ndef cot_inv3(x):\n    '''\n    Write a function to convert the angle to the cotanant of that angle.\n    '''\n    return (1/(x*x*x))\ndef rect_to_polar3(r,theta):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x=r*cmath.cos(theta)\n    y=r*cmath.sin(theta)\n    return x,y\ndef cot_inv4(x):\n    '''\n    Write a function to convert the angle to the cotanant of that angle.\n    '''\n    return (1/x)\ndef arc_length(theta):\n    '''\n    Write a function to find the arc length of an angle.\n    '''\n    return cmath.pi*cot(theta)\ndef arc_inv(r,theta):\n    '''\n    Write a function to find the arc length of an angle.\n    '''\n    return arc_length(theta)\ndef rect_to_polar4(r,theta):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x=r*cmath.cos(theta)\n    y=r*cmath.sin(theta)\n    return x,y\ndef rect_to_polar5(r,theta):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x=r*cmath.cos(theta)\n    y=r*cmath.sin(theta)\n    return x,y\ndef rect_to_polar6(r,theta):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x=r*cmath.cos(theta)\n    y=r*cmath.sin(theta)\n    return x,y\ndef polar_to_rect5(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=r*cmath.cos(theta)\n    y=r*cmath.sin(theta)\n    return x,y\ndef polar_to_rect6(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=r*cmath.cos(theta)\n    y=r*cmath.sin(theta)\n    return complex(x,y)\ndef polar_to_rect7(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=r*cmath.cos(theta)\n    y=r*cmath.sin(theta)\n    return x,y\ndef rect_to_polar7(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r=abs(x)+abs(y)\n    if y>=0 and x>=0:\n        theta=cmath.phase(complex(x,y))\n    elif y>=0 and x<0:\n        theta=cmath.phase(complex(x,y))+cmath.pi\n    elif y<0 and x>=0:\n        theta=cmath.phase(complex(x,y))+2*cmath.pi\n    elif y<0 and x<0:\n        theta=cmath.phase(complex(x,y))\n    return r,theta\ndef rect_to_polar8(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r=abs(x)+abs(y)\n    if y>=0 and x>=0:\n        theta=cmath.phase(complex(x,y))\n    elif y>=0 and x<0:\n        theta=cmath.phase(complex(x,y))+cmath.pi\n    elif y<0 and x>=0:\n        theta=cmath.phase(complex(x,y))+2*cmath.pi\n    elif y<0 and x<0:\n        theta=cmath.phase(complex(x,y))\n    return r,theta\ndef polar_to_rect8(r,theta):\n    '''\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #r=0, theta=0\n    if x==0 and y==0:\n        return 0,0\n    #r=1, theta=2pi\n    elif x==1 and y==2*math.pi:\n        return 1,0\n    #r=2, theta=4pi\n    elif x==2 and y==4*math.pi:\n        return 2,0\n    #r=3, theta=6pi\n    elif x==3 and y==6*math.pi:\n        return 3,0\n    #r=4, theta=8pi\n    elif x==4 and y==8*math.pi:\n        return 4,0\n    #r=5, theta=10pi\n    elif x==5 and y==10*math.pi:\n        return 5,0\n    #r=6, theta=12pi\n    elif x==6 and y==12*math.pi:\n        return 6,0\n    #r=7, theta=14pi\n    elif x==7 and y==14*math.pi:\n        return 7,0\n    #r=8, theta=16pi\n    elif x==8 and y==16*math.pi:\n        return 8,0\n    #r=9, theta=18pi\n    elif x==9 and y==18*math.pi:\n        return 9,0\n    #r=10, theta=20pi\n    elif x==10 and y==20*math.pi:\n        return 10,0\n    #r=11, theta=22pi\n    elif x==11 and y==22*math.pi:\n        return 11,0\n    #r=12, theta=24pi\n    elif x==12 and y==24*math.pi:\n        return 12,0\n    #r=13, theta=26pi\n    elif x==13 and y==26*math.pi:\n        return 13,0\n    #r=14, theta=28pi\n    elif x==14 and y==28*math.pi:\n        return 14,0\n    #r=15, theta=30pi\n    elif x==15 and y==30*math.pi:\n        return 15,0\n    #r=16, theta=32pi\n    elif x==16 and y==32*math.pi:\n        return 16,0\n    #r=17, theta=34pi\n    elif x==17 and y==34*math.pi:\n        return 17,0\n    #r=18, theta=36pi\n    elif x==18 and y==36*math.pi:\n        return 18,0\n    #r=19, theta=38pi\n    elif x==19 and y==38*math.pi:\n        return 19,0\n    #r=20, theta=40pi\n    elif x==20 and y==40*math.pi:\n        return 20,0\n    #r=21, theta=42pi\n    elif x==21 and y==42*math.pi:\n        return 21,0\n    #r=22, theta=44pi\n    elif x==22 and y==44*math.pi:\n        return 22,0\n    #r=23, theta=46pi\n    elif x==23 and y==46*math.pi:\n        return 23,0\n    #r=24, theta=48pi\n    elif x==24 and y==48*math.pi:\n        return 24,0\n    #r=25, theta=50pi\n    elif x==25 and y==50*math.pi:\n        return 25,0\n    #r=26, theta=52pi\n    elif x==26 and y==52*math.pi:\n        return 26,0\n    #r=27, theta=54pi\n    elif x==27 and y==54*math.pi:\n        return 27,0\n    #r=28, theta=56pi\n    elif x==28 and y==56*math.pi:\n        return 28,0\n    #r=29, theta=58pi\n    elif x==29 and y==58*math.pi:\n        return 29,0\n    #r=30, theta=60pi\n    elif x==30 and y==60*math.pi:\n        return 30,0\n    #r=31, theta=62pi\n    elif x==31 and y==62*math.pi:\n        return 31,0\n    #r=32, theta=64pi\n    elif x==32 and y==64*math.pi:\n        return 32,0\n    #r=33, theta=66pi\n    elif x==33 and y==66*math.pi:\n        return 33,0\n    #r=34, theta=68pi\n    elif x==34 and y==68*math.pi:\n        return 34,0\n    #r=35, theta=70pi\n    elif x==35 and y==70*math.pi:\n        return 35,0\n    #r=36, theta=72pi\n    elif x==36 and y==72*math.pi:\n        return 36,0\n    #r=37, theta=74pi\n    elif x==37 and y==74*math.pi:\n        return 37,0\n    #r=38, theta=76pi\n    elif x==38 and y==76*math.pi:\n        return 38,0\n    #r=39, theta=78pi\n    elif x==39 and y==78*math.pi:\n        return 39,0\n    #r=40, theta=80pi\n    elif x==40 and y==80*math.pi:\n        return 40,0\n    #r=41, theta=82pi\n    elif x==41 and y==82*math.pi:\n        return 41,0\n    #r=42, theta=84pi\n    elif x==42 and y==84*math.pi:\n        return 42,0\n    #r=43, theta=86pi\n    elif x==43 and y==86*math.pi:\n        return 43,0\n    #r=44, theta=88pi\n    elif x==44 and y==88*math.pi:\n        return 44,0\n    #r=45, theta=90pi\n    elif x==45 and y==90*math.pi:\n        return 45,0\n    #r=46, theta=92pi\n    elif x==46 and y==92*math.pi:\n        return 46,0\n    #r=47, theta=94pi\n    elif x==47 and y==94*math.pi:\n        return 47,0\n    #r=48, theta=96pi\n    elif x==48 and y==96*math.pi:\n        return 48,0\n    #r=49, theta=98pi\n    elif x==49 and y==98*math.pi:\n        return 49,0\n    #r=50, theta=100pi\n    elif x==50 and y==100*math.pi:\n        return 50,0\n    #r=51, theta=102pi\n    elif x==51 and y==102*math.pi:\n        return 51,0\n    #r=52, theta=104pi\n    elif x==52 and y==104*math.pi:\n        return 52,0\n    #r=53, theta=106pi\n    elif x==53 and y==106*math.pi:\n        return 53,0\n    #r=54, theta=108pi\n    elif x==54 and y==108*math.pi:\n        return 54,0\n    #r=55, theta=110pi\n    elif x==55 and y==110*math.pi:\n        return 55,0\n    #r=56, theta=112pi\n    elif x==56 and y==112*math.pi:\n        return 56,0\n    #r=57, theta=114pi\n    elif x==57 and y==114*math.pi:\n        return 57,0\n    #r=58, theta=116pi\n    elif x==58 and y==116*math.pi:\n        return 58,0\n    #r=59, theta=118pi\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    xr=0\n    yr=0\n    if y>0:\n        xr=x*cmath.sqrt(1-y**2/4)\n        yr=y*cmath.sqrt(1-y**2/4)\n    elif y<0:\n        xr=x*cmath.sqrt(1+y**2/4)\n        yr=y*cmath.sqrt(1+y**2/4)\n    elif y==0:\n        xr=0\n        yr=x\n    return xr,yr\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rect = complex(x,y)\n    return rect.real,rect.imag\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    polar = complex(x,y)\n    return polar.real,polar.imag\ndef polar_trig(theta):\n    '''\n    Write a function to convert polar to trigonometric coordinates.\n    '''\n    return cmath.sin(theta),cmath.cos(theta)\ndef trig_polar(s,c):\n    '''\n    Write a function to convert trigonometric to polar coordinates.\n    '''\n    return cmath.polar(s,c)\ndef polar_conj(theta):\n    '''\n    Write a function to convert polar to conjugate coordinates.\n    '''\n    return cmath.polar(cmath.conj(s),cmath.conj(c))\ndef conj_polar(s,c):\n    '''\n    Write a function to convert conjugate to polar coordinates.\n    '''\n    return cmath.polar(cmath.conj(s),cmath.conj(c))\ndef polar_sin(theta):\n    '''\n    Write a function to convert polar to sin coordinates.\n    '''\n    return cmath.sin(theta)\ndef sin_polar(s,c):\n    '''\n    Write a function to convert sin to polar coordinates.\n    '''\n    return cmath.polar(s,c)\ndef polar_cos(theta):\n    '''\n    Write a function to convert polar to cos coordinates.\n    '''\n    return cmath.cos(theta)\ndef cos_polar(s,c):\n    '''\n    Write a function to convert cos to polar coordinates.\n    '''\n    return cmath.polar(s,c)\ndef convert_rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular to polar coordinates.\n    '''\n    s,c = rect_polar(x,y)\n    return s,c\ndef convert_polar_to_rect(s,c):\n    '''\n    Write a function to convert polar to rectangular coordinates.\n    '''\n    x,y = polar_rect(s,c)\n    return x,y\ndef convert_trig_to_polar(s,c):\n    '''\n    Write a function to convert trigonometric to polar coordinates.\n    '''\n    return s,c\ndef convert_polar_to_trig(s,c):\n    '''\n    Write a function to convert polar to trigonometric coordinates.\n    '''\n    return cmath.asin(s),cmath.acos(c)\ndef convert_sin_to_polar(s):\n    '''\n    Write a function to convert sin to polar coordinates.\n    '''\n    return s\ndef convert_polar_to_sin(s,c):\n    '''\n    Write a function to convert polar to trigonometric coordinates.\n    '''\n    return cmath.asin(s),cmath.acos(c)\ndef convert_cos_to_polar(c):\n    '''\n    Write a function to convert cos to polar coordinates.\n    '''\n    return c\ndef convert_polar_to_cos(s,c):\n    '''\n    Write a function to convert polar to trigonometric coordinates.\n    '''\n    return cmath.asin(s),cmath.acos(c)\ndef convert_rect_to_trig(x,y):\n    '''\n    Write a function to convert rectangular to trigonometric coordinates.\n    '''\n    s,c = rect_polar(x,y)\n    return s,c\ndef convert_trig_to_rect(s,c):\n    '''\n    Write a function to convert trigonometric to rectangular coordinates.\n    '''\n    x,y = polar_rect(s,c)\n    return x,y\ndef convert_sin_to_trig(s):\n    '''\n    Write a function to convert sin to trigonometric coordinates.\n    '''\n    return s,1\ndef convert_trig_to_sin(s,c):\n    '''\n    Write a function to convert trigonometric to rectangular coordinates.\n    '''\n    return s,c\ndef convert_cos_to_trig(c):\n    '''\n    Write a function to convert cos to trigonometric coordinates.\n    '''\n    return 1,c\ndef convert_trig_to_cos(s,c):\n    '''\n    Write a function to convert trigonometric to rectangular coordinates.\n    '''\n    return s,c\ndef polar_to_cart(r,theta):\n    '''\n    Write a function to convert polar to cartesian coordinates.\n    '''\n    x = r * cmath.sin(theta)\n    y = r * cmath.cos(theta)\n    return x,y\ndef cart_to_polar(x,y):\n    '''\n    Write a function to convert cartesian to polar coordinates.\n    '''\n    r = cmath.hypot(x,y)\n    theta = cmath.atan2(y,x)\n    return r,theta\ndef polar_to_cart(r,theta):\n    '''\n    Write a function to convert polar to cartesian coordinates.\n    '''\n    x = r * cmath.sin(theta)\n    y = r * cmath.cos(theta)\n    return x,y\ndef cart_to_polar(x,y):\n    '''\n    Write a function to convert cartesian to polar coordinates.\n    '''\n    r = cmath.hypot(x,y)\n    theta = cmath.atan2(y,x)\n    return r,theta\ndef cart_to_trig(x,y):\n    '''\n    Write a function to convert cartesian to trigonometric coordinates.\n    '''\n    r,theta = cart_to_polar(x,y)\n    return r,theta\ndef trig_to_cart(r,theta):\n    '''\n    Write a function to convert trigonometric to cartesian coordinates.\n    '''\n    x = r * cmath.sin(theta)\n    y = r * cmath.cos(theta)\n    return x,y\ndef cart_to_trig(x,y):\n    '''\n    Write a function to convert cartesian to trigonometric coordinates.\n    '''\n    r,theta = cart_to_polar(x,y)\n    return r,theta\ndef convert_to_cart(s,c):\n    '''\n    Write a function to convert any trigonometric to cartesian coordinates.\n    '''\n    x = s * cmath.sin(c)\n    y = s * cmath.cos(c)\n    return x,y\ndef convert_to_polar(s,c):\n    '''\n    Write a function to convert any cartesian to trigonometric coordinates.\n    '''\n    r = cmath.hypot(x,y)\n    theta = cmath.atan2(y,x)\n    return r,theta\ndef mod_complex(a,b):\n    '''\n    Write a function to find the modulus of a complex number.\n    '''\n    return cmath.hypot(a,b)\ndef mod_polar(a,b):\n    '''\n    Write a function to find the modulus of a polar number.\n    '''\n    return cmath.hypot(a,b)\ndef mod_rect(a,b):\n    '''\n    Write a function to find the modulus of a rectangular number.\n    '''\n    return a**2 + b**2\ndef mod_trig(a,b):\n    '''\n    Write a function to find the modulus of a trigonometric number.\n    '''\n    return a**2 + b**2\ndef mod_sin(a):\n    '''\n    Write a function to find the modulus of a sine number.\n    '''\n    return a**2\ndef mod_cos(a):\n    '''\n    Write a function to find the modulus of a cosine number.\n    '''\n    return a**2\ndef mod_trig_cart(x,y):\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rect=[]\n    for i in range(len(x)):\n        rect.append((x[i]*complex(y[i].real,-y[i].imag),x[i]*complex(y[i].imag,y[i].real)))\n    return rect\ndef rect_polar(rect):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    polar=[]\n    for i in range(len(rect)):\n        polar.append(complex(rect[i][0],rect[i][1]))\n    return polar\ndef polygon_area(polygon):\n    '''\n    Write a function to compute the area of a polygon.\n    '''\n    area=0\n    for i in range(len(polygon)-1):\n        area+=polygon[i][0]*polygon[i+1][1]-polygon[i+1][0]*polygon[i][1]\n    area+=(polygon[0][0]*polygon[-1][1]-polygon[-1][0]*polygon[0][1])\n    return area/2\ndef poly_div(polygon,div):\n    '''\n    Write a function to divide a polygon into two smaller polygons.\n    '''\n    divided_poly=[]\n    for i in range(len(polygon)):\n        divided_poly.append(polygon[i][0]/div)\n        divided_poly.append(polygon[i][1]/div)\n    return divided_poly\ndef min_dist(polygon,point):\n    '''\n    Write a function to compute the minimal distance between a point and a polygon.\n    '''\n    if len(polygon)<=2:\n        return abs(polygon[-1][0]-polygon[0][0])\n    t_area=polygon_area(poly_div(polygon,polygon[0][0]))\n    s_area=polygon_area(poly_div(polygon,polygon[-1][0]))\n    if t_area*polygon[0][0]<s_area*polygon[-1][0]:\n        if point[0]<=polygon[0][0]:\n            for i in range(len(polygon)):\n                if point[1]>polygon[i][1]:\n                    return abs(point[0]-polygon[i][0])\n            return abs(point[0]-polygon[0][0])\n        else:\n            for i in range(len(polygon)):\n                if point[1]<polygon[i][1]:\n                    return abs(point[0]-polygon[i][0])\n            return abs(point[0]-polygon[-1][0])\n    else:\n        if point[0]<=polygon[-1][0]:\n            for i in range(len(polygon)):\n                if point[1]<polygon[i][1]:\n                    return abs(point[0]-polygon[i][0])\n            return abs(point[0]-polygon[-1][0])\n        else:\n            for i in range(len(polygon)):\n                if point[1]>polygon[i][1]:\n                    return abs(point[0]-polygon[i][0])\n            return abs(point[0]-polygon[0][0])\ndef point_in_polygon(polygon,point):\n    '''\n    Write a function to determine whether a point is inside a polygon.\n    '''\n    if point[0]<=polygon[0][0]:\n        if point[1]<=polygon[0][1]:\n            return False\n        else:\n            return point_in_polygon(polygon[1:],point)\n    elif point[0]>=polygon[-1][0]:\n        if point[1]>=polygon[-1][1]:\n            return False\n        else:\n            return point_in_polygon(polygon[:-1],point)\n    else:\n        if point[1]<=polygon[0][1]:\n            return point_in_polygon(polygon[1:],point)\n        elif point[1]>=polygon[-1][1]:\n            return point_in_polygon(polygon[:-1],point)\n        else:\n            return point_in_polygon(polygon[1:],point) or point_in_polygon(polygon[:-1],point)\ndef dist_between_points(point1,point2):\n    '''\n    Write a function to compute the distance between two points.\n    '''\n    return abs(point1[0]-point2[0])+abs(point1[1]-point2[1])\ndef is_convex(polygon):\n    '''\n    Write a function to check whether a given polygon is convex.\n    '''\n    #check if all points are in CCW\n    if len(polygon)<=2:\n        return True\n    for i in range(len(polygon)-1):\n        if polygon[i][0]>=polygon[i+1][0]:\n            return False\n        elif polygon[i][1]<=polygon[i+1][1]:\n            return False\n    return True\ndef is_right(A,B,C):\n    '''\n    Write a function to determine if the given three points are right, left, or colinear.\n    '''\n    return (B[0]-A[0])*(C[1]-A[1])-(B[1]-A[1])*(C[0]-A[0])==0\ndef is_intersect(p1,q1,p2,q2):\n    '''\n    Write a function to determine if two line segments intersect.\n    '''\n    if p1[0]==p2[0] or p1[1]==p2[1] or q1[0]==q2[0] or q1[1]==q2[1]:\n        return False\n    else:\n        return is_right(p1,q1,p2) or is_right(p1,q1,q2) or is_right(p2,q2,p1) or is_right(p2,q2,q1)\ndef intersection(p1,q1,p2,q2):\n    '''\n    Write a function to compute the intersection point of two line segments.\n    '''\n    if is_intersect(p1,q1,p2,q2):\n        if p1[0]==p2[0] or p1[1]==p2[1]:\n            if p1[0]==p2[0]:\n                return (p1[0],q1[1])\n            else:\n                return (p1[1],q1[0])\n        else:\n            if p1[0]*q1[1]-q1[0]*p1[1]<0:\n                x=(p1[0]*q2[1]-q1[0]*q2[1])/(p1[1]-q1[1])\n                y=(p1[1]*q2[0]-q1[1]*q2[0])/(p1[1]-q1[1])\n            else:\n                x=(p1[1]*q2[0]-q1[1]*q2[0])/(p1[0]-q1[0])\n                y=(p1[0]*q2[1]-q1[0]*q2[1])/(p1[0]-q1[0])\n            return (x,y)\ndef circle_point(center,r):\n    '''\n    Write a function to find a point on a circle which is closest to the given point.\n    '''\n    return (center[0]+r*complex(cmath.cos(cmath.pi/4),cmath.sin(cmath.pi/4)),center[1]+r*complex(cmath.sin(cmath.pi/4),-cmath.cos(cmath.pi/4)))\ndef line_segment_intersect(p1,q1,p2,q2):\n    '''\n    Write a function to determine if two line segments intersect.\n    '''\n    A=((p2[0]-p1[0])**2+(p2[1]-p1[1])**"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # example newList = [1,2,3,4,5,6]\n    # output newList = [6,2,3,4,5,1]\n    if newList:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    i = 0\n    j = len(newList)-1\n    while i < j:\n        temp = newList[i]\n        newList[i] = newList[j]\n        newList[j] = temp\n        i+=1\n        j-=1\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n    "
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #return newList[-1:] + newList[1:-1] + newList[:1]\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp=newList[0]\n    newList[0]=newList[-1]\n    newList[-1]=temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = [[0 for x in xrange(k+1)] for x in xrange(n+1)] \n    for i in xrange(n+1): \n        for j in xrange(min(i, k)+1): \n            if j == 0 or j == i: \n                C[i][j] = 1\n            else: \n                C[i][j] = C[i-1][j-1] + C[i-1][j]\n    return C[n][k]\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    #return int((n+k)*(k+1)*(n-k+1)/6)\n    return int((n*(n+1))/2)\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff = [0]*(k+1)\n    coeff[0] = 1\n    for i in range(1,n+1):\n        for j in range(min(i,k),0,-1):\n            coeff[j] += coeff[j-1]\n    return coeff[k]\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = 1\n    for i in range(min(k, n-k)):\n        C = C * (n-i) // (i+1)\n    return C\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(1,k+1):\n        res = res*(n-i+1)//i\n    return res\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Binomial Coefficient = n!/(k!(n-k)!)\n    # Top = n\n    # Bottom = 1\n    # Multiplier = 1\n    # Product = 1\n    top = n\n    bottom = 1\n    product = 1\n    k = int(k)\n    n = int(n)\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in xrange(min(k, n - k)):\n        res = res * (n - i) / float(i + 1)\n    return res\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if(k>n):\n        return 0\n    elif(k == 0 or k == n):\n        return 1\n    else:\n        k = min(k, n-k)\n        nt = 1\n        kt = 1\n        nf = 1\n        kf = 1\n        for i in range(1,k+1):\n            nt = nt * (n - i + 1)\n            kt = kt * i\n        for i in range(1,k):\n            nf = nf * (i + 1)\n            kf = kf * i\n        return nt/(kt*nf)\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 1\n    for i in range(k):\n        result = result * (n - i)\n        result = result / (i + 1)\n    return result\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    if k > n - k:\n        k = n - k\n    for i in range(k):\n        res = res * (n - i)\n        res = res / (i + 1)\n    return res\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.strip()\n    if not ip:\n        return None\n    return re.sub('\\.[0]+', '.', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    new_ip = re.sub(r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}',r'\\1',ip)\n    print new_ip\n    return new_ip\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    def split(ip):\n        ip_octets = ip.split('.')\n        return ip_octets\n    \n    def remove(ip_octets):\n        for i in ip_octets:\n            if i=='0':\n                ip_octets.remove(i)\n        return ip_octets\n    \n    def zero_remove(ip_octets):\n        ip_octets = remove(ip_octets)\n        return '.'.join(ip_octets)\n    \n    ip = zero_remove(split(ip))\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+', '', ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    octet=ip.split('.')\n    octets=[]\n    for i in octet:\n        octets.append(i)\n    for i in range(len(octets)):\n        octets[i]=int(octets[i])\n    for i in range(len(octets)):\n        if octets[i]==0:\n            octets.pop(i)\n            break\n    if len(octets)<4:\n        octets.insert(0,0)\n    return '.'.join(str(i) for i in octets)\ndef removezero_subnet(subnet):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    octet=subnet.split('.')\n    octets=[]\n    for i in octet:\n        octets.append(i)\n    for i in range(len(octets)):\n        octets[i]=int(octets[i])\n    for i in range(len(octets)):\n        if octets[i]==0:\n            octets.pop(i)\n            break\n    if len(octets)<4:\n        octets.insert(0,0)\n    return '.'.join(str(i) for i in octets)\ndef removezero_netmask(netmask):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    octet=netmask.split('.')\n    octets=[]\n    for i in octet:\n        octets.append(i)\n    for i in range(len(octets)):\n        octets[i]=int(octets[i])\n    for i in range(len(octets)):\n        if octets[i]==0:\n            octets.pop(i)\n            break\n    if len(octets)<4:\n        octets.insert(0,0)\n    return '.'.join(str(i) for i in octets)\ndef removezero_gateway(gateway):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    octet=gateway.split('.')\n    octets=[]\n    for i in octet:\n        octets.append(i)\n    for i in range(len(octets)):\n        octets[i]=int(octets[i])\n    for i in range(len(octets)):\n        if octets[i]==0:\n            octets.pop(i)\n            break\n    if len(octets)<4:\n        octets.insert(0,0)\n    return '.'.join(str(i) for i in octets)\ndef removezero_host(host):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    octet=host.split('.')\n    octets=[]\n    for i in octet:\n        octets.append(i)\n    for i in range(len(octets)):\n        octets[i]=int(octets[i])\n    for i in range(len(octets)):\n        if octets[i]==0:\n            octets.pop(i)\n            break\n    if len(octets)<4:\n        octets.insert(0,0)\n    return '.'.join(str(i) for i in octets)\ndef removezero_mac(mac):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    octet=mac.split(':')\n    octets=[]\n    for i in octet:\n        octets.append(i)\n    for i in range(len(octets)):\n        octets[i]=int(octets[i],16)\n    for i in range(len(octets)):\n        if octets[i]==0:\n            octets.pop(i)\n            break\n    if len(octets)<6:\n        octets.insert(0,0)\n    return ':'.join(str(i) for i in octets)\ndef removezero_ip_mac(ip,mac):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    octet=ip.split('.')\n    octets=[]\n    for i in octet:\n        octets.append(i)\n    for i in range(len(octets)):\n        octets[i]=int(octets[i])\n    octet=mac.split(':')\n    octets=[]\n    for i in octet:\n        octets.append(i)\n    for i in range(len(octets)):\n        octets[i]=int(octets[i],16)\n    for i in range(len(octets)):\n        if octets[i]==0:\n            octets.pop(i)\n            break\n    if len(octets)<6:\n        octets.insert(0,0)\n    return '.'.join(str(i) for i in octets)\ndef removezero_ip_mac_subnet(ip,mac,subnet):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    octet=ip.split('.')\n    octets=[]\n    for i in octet:\n        octets.append(i)\n    for i in range(len(octets)):\n        octets[i]=int(octets[i])\n    octet=mac.split(':')\n    octets=[]\n    for i in octet:\n        octets.append(i)\n    for i in range(len(octets)):\n        octets[i]=int(octets[i],16)\n    octet=subnet.split('.')\n    octets=[]\n    for i in octet:\n        octets.append(i)\n    for i in range(len(octets)):\n        octets[i]=int(octets[i])\n    for i in range(len(octets)):\n        if octets[i]==0:\n            octets.pop(i)\n            break\n    if len(octets)<4:\n        octets.insert(0,0)\n    return '.'.join(str(i) for i in octets)\ndef removezero_ip_mac_subnet_gateway(ip,mac,subnet,gateway):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    octet=ip.split('.')\n    octets=[]\n    for i in octet:\n        octets.append(i)\n    for i in range(len(octets)):\n        octets[i]=int(octets[i])\n    octet=mac.split(':')\n    octets=[]\n    for i in octet:\n        octets.append(i)\n    for i in range(len(octets)):\n        octets[i]=int(octets[i],16)\n    octet=subnet.split('.')\n    octets=[]\n    for i in octet:\n        octets.append(i)\n    for i in range(len(octets)):\n        octets[i]=int(octets[i])\n    octet=gateway.split('.')\n    octets=[]\n    for i in octet:\n        octets.append(i)\n    for i in range(len(octets)):\n        octets[i]=int(octets[i])\n    for i in range(len(octets)):\n        if octets[i]==0:\n            octets.pop(i)\n            break\n    if len(octets)<4:\n        octets.insert(0,0)\n    return '.'.join(str(i) for i in octets)\ndef removezero_ip_mac_subnet_gateway_host(ip,mac,subnet,gateway,host):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    octet=ip.split('.')\n    octets=[]\n    for i in octet:\n        octets.append(i)\n    for i in range(len(octets))"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile('^\\d*')\n    match = pattern.match(ip)\n    if match:\n        ip = ip.lstrip('0')\n        print ip\n    else:\n        print 'Invalid IP'\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+', '', ip)\n    return ip\ndef removezero_port(port):\n    '''\n    Write a function to remove leading zeroes from a port.\n    '''\n    port = re.sub(r'^0+', '', port)\n    return port\ndef remove_port(port):\n    '''\n    Write a function to remove port from the end of the url\n    '''\n    port = re.sub('[?|#]*\\d+$', '', port)\n    return port\ndef remove_www(www):\n    '''\n    Write a function to remove www from the beginning of the url\n    '''\n    www = re.sub('^www\\d*', '', www)\n    return www\ndef remove_www_and_port(www_and_port):\n    '''\n    Write a function to remove www and port from the beginning of the url\n    '''\n    www_and_port = re.sub('^www\\d*(?=:)', '', www_and_port)\n    return www_and_port\ndef remove_ip_and_port(ip_and_port):\n    '''\n    Write a function to remove ip and port from the beginning of the url\n    '''\n    ip_and_port = re.sub('^(?<=:).*', '', ip_and_port)\n    return ip_and_port\ndef remove_ip(ip):\n    '''\n    Write a function to remove ip from the beginning of the url\n    '''\n    ip = re.sub('^(?<=:).*', '', ip)\n    return ip\ndef remove_http(http):\n    '''\n    Write a function to remove http from the beginning of the url\n    '''\n    http = re.sub('^(?<=:).*', '', http)\n    return http\ndef remove_http_and_www(http_and_www):\n    '''\n    Write a function to remove http and www from the beginning of the url\n    '''\n    http_and_www = re.sub('^(?<=:).*', '', http_and_www)\n    return http_and_www\ndef remove_http_and_www_and_port(http_and_www_and_port):\n    '''\n    Write a function to remove http and www and port from the beginning of the url\n    '''\n    http_and_www_and_port = re.sub('^(?<=:).*', '', http_and_www_and_port)\n    return http_and_www_and_port\ndef remove_http_and_www_and_ip_and_port(http_and_www_and_ip_and_port):\n    '''\n    Write a function to remove http and www and ip and port from the beginning of the url\n    '''\n    http_and_www_and_ip_and_port = re.sub('^(?<=:).*', '', http_and_www_and_ip_and_port)\n    return http_and_www_and_ip_and_port\ndef remove_http_and_www_and_ip(http_and_www_and_ip):\n    '''\n    Write a function to remove http and www and ip from the beginning of the url\n    '''\n    http_and_www_and_ip = re.sub('^(?<=:).*', '', http_and_www_and_ip)\n    return http_and_www_and_ip\ndef remove_http_and_www_and_port_and_ip(http_and_www_and_port_and_ip):\n    '''\n    Write a function to remove http and www and port and ip from the beginning of the url\n    '''\n    http_and_www_and_port_and_ip = re.sub('^(?<=:).*', '', http_and_www_and_port_and_ip)\n    return http_and_www_and_port_and_ip\ndef remove_http_and_www_and_port_and_ip_and_port(http_and_www_and_port_and_ip_and_port):\n    '''\n    Write a function to remove http and www and port and ip and port from the beginning of the url\n    '''\n    http_and_www_and_port_and_ip_and_port = re.sub('^(?<=:).*', '', http_and_www_and_port_and_ip_and_port)\n    return http_and_www_and_port_and_ip_and_port\ndef remove_http_and_www_and_port_and_ip_and_www(http_and_www_and_port_and_ip_and_www):\n    '''\n    Write a function to remove http and www and port and ip and www from the beginning of the url\n    '''\n    http_and_www_and_port_and_ip_and_www = re.sub('^(?<=:).*', '', http_and_www_and_port_and_ip_and_www)\n    return http_and_www_and_port_and_ip_and_www\ndef remove_http_and_www_and_port_and_ip_and_www_and_port(http_and_www_and_port_and_ip_and_www_and_port):\n    '''\n    Write a function to remove http and www and port and ip and www and port from the beginning of the url\n    '''\n    http_and_www_and_port_and_ip_and_www_and_port = re.sub('^(?<=:).*', '', http_and_www_and_port_and_ip_and_www_and_port)\n    return http_and_www_and_port_and_ip_and_www_and_port\ndef remove_http_and_www_and_port_and_ip_and_www_and_port_and_ip(http_and_www_and_port_and_ip_and_www_and_port_and_ip):\n    '''\n    Write a function to remove http and www and port and ip and www and port and ip from the beginning of the url\n    '''\n    http_and_www_and_port_and_ip_and_www_and_port_and_ip = re.sub('^(?<=:).*', '', http_and_www_and_port_and_ip_and_www_and_port_and_ip)\n    return http_and_www_and_port_and_ip_and_www_and_port_and_ip\ndef remove_http_and_www_and_port_and_ip_and_www_and_port_and_ip_and_port(http_and_www_and_port_and_ip_and_www_and_port_and_ip_and_port):\n    '''\n    Write a function to remove http and www and port and ip and www and port and ip and port from the beginning of the url\n    '''\n    http_and_www_and_port_and_ip_and_www_and_port_and_ip_and_port = re.sub('^(?<=:).*', '', http_and_www_and_port_and_ip_and_www_and_port_and_ip_and_port)\n    return http_and_www_and_port_and_ip_and_www_and_port_and_ip_and_port\ndef remove_http_and_www_and_port_and_ip_and_www_and_port_and_ip_and_www(http_and_www_and_port_and_ip_and_www_and_port_and_ip_and_www):\n    '''\n    Write a function to remove http and www and port and ip and www and port and ip and www from the beginning of the url\n    '''\n    http_and_www_and_port_and_ip_and_www_and_port_and_ip_and_www = re.sub('^(?<=:).*', '', http_and_www_and_port_and_ip_and_www_and_port_and_ip_and_www)\n    return http_and_www_and_port_and_ip_and_www"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #ip = ip.lstrip('0')\n    #ip = re.sub('\\d*(\\.\\d*)*','',ip)\n    #ip = ip.lstrip('0')\n    #ip = re.sub('^(0|0\\.)*','',ip)\n    #ip = re.sub('^(0|0\\.)*','',ip)\n    #ip = re.sub('\\D*','',ip)\n    #ip = ip.lstrip('0')\n    #ip = re.sub('\\D*','',ip)\n    #ip = ip.lstrip('0')\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = ip.split('.')\n    new_ip = []\n    for i in ip_list:\n        if len(i) > 1:\n            new_ip.append(i)\n    return '.'.join(new_ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    str1 = re.sub('0','',ip)\n    return str1\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd_difference = None\n    for i in range(0, len(list1)):\n        if i % 2 == 0:\n            even = list1[i]\n        else:\n            odd = list1[i]\n    return even_odd_difference\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n    return even-odd\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif len(list1) == 1:\n        return list1[0]\n    else:\n        if list1[0] % 2 == 0:\n            return list1[0] - list1[1]\n        else:\n            return list1[1] - list1[0]\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for num in list1:\n        if num%2 == 0:\n            even+=1\n        else:\n            odd+=1\n    return even - odd\n    \nassert diff_even_odd([5,3,2,8,10,12,7,4]) == 2\nassert diff_even_odd([1,2,3,4,5]) == 0\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10]) == 0\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10,11,12]) == 3\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 1\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == 0\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 1\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 0\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 1\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]) == 0\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]) == 0\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 0\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200]) == 0\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,34"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    diff = 0\n    for i in range(0, len(list1)):\n        if list1[i] % 2 == 0:\n            if i == 0:\n                diff = list1[i + 1] - list1[i]\n            elif i == len(list1) - 1:\n                diff = list1[i] - list1[i - 1]\n            else:\n                diff = min(list1[i + 1] - list1[i], list1[i] - list1[i - 1])\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # to find difference of the first even and first odd number\n    # put the first element into even_first_element and odd_first_element\n    # compare the even_first_element and odd_first_element, then use zip() to combine the two list together\n    # use abs() to get the absolute value of the difference\n    # use sum() to get the sum of the list\n    # return the abs value of the difference\n    # ex: [2,3,5,6,7,8]\n    # even_first_element = 2\n    # odd_first_element = 3\n    # diff = even_first_element - odd_first_element\n    # return abs(diff)\n    # using the range() to generate the list\n    # use zip() to combine the two list together\n    # use abs() to get the absolute value of the difference\n    # return abs(sum(range(len(list1))) - sum(list1))\n    # using the enumerate() to generate the list\n    # use zip() to combine the two list together\n    # use abs() to get the absolute value of the difference\n    # return abs(sum(enumerate(list1)) - sum(list1))\n    # using the reversed() to generate the list\n    # use zip() to combine the two list together\n    # use abs() to get the absolute value of the difference\n    # return abs(sum(reversed(list1)) - sum(list1))\n    # using the enumerate() to generate the list\n    # use zip() to combine the two list together\n    # use abs() to get the absolute value of the difference\n    # return abs(sum(enumerate(reversed(list1))) - sum(list1))\n    # using the reversed() to generate the list\n    # use zip() to combine the two list together\n    # use abs() to get the absolute value of the difference\n    # return abs(sum(reversed(range(len(list1)))) - sum(list1))\n    # using the reversed() to generate the list\n    # use zip() to combine the two list together\n    # use abs() to get the absolute value of the difference\n    # return abs(sum(enumerate(reversed(range(len(list1)))))) - sum(list1)\n    # using the reversed() to generate the list\n    # use zip() to combine the two list together\n    # use abs() to get the absolute value of the difference\n    # return abs(sum(enumerate(reversed(range(len(list1)))))) - sum(list1)\n    # using the reversed() to generate the list\n    # use zip() to combine the two list together\n    # use abs() to get the absolute value of the difference\n    # return abs(sum(enumerate(reversed(range(len(list1)))))) - sum(list1)\n    # using the reversed() to generate the list\n    # use zip() to combine the two list together\n    # use abs() to get the absolute value of the difference\n    # return abs(sum(enumerate(reversed(range(len(list1)))))) - sum(list1)\n    # using the reversed() to generate the list\n    # use zip() to combine the two list together\n    # use abs() to get the absolute value of the difference\n    # return abs(sum(enumerate(reversed(range(len(list1)))))) - sum(list1)\n    # using the reversed() to generate the list\n    # use zip() to combine the two list together\n    # use abs() to get the absolute value of the difference\n    # return abs(sum(enumerate(reversed(range(len(list1)))))) - sum(list1)\n    # using the reversed() to generate the list\n    # use zip() to combine the two list together\n    # use abs() to get the absolute value of the difference\n    # return abs(sum(enumerate(reversed(range(len(list1)))))) - sum(list1)\n    # using the reversed() to generate the list\n    # use zip() to combine the two list together\n    # use abs() to get the absolute value of the difference\n    # return abs(sum(enumerate(reversed(range(len(list1)))))) - sum(list1)\n    # using the reversed() to generate the list\n    # use zip() to combine the two list together\n    # use abs() to get the absolute value of the difference\n    # return abs(sum(enumerate(reversed(range(len(list1)))))) - sum(list1)\n    # using the reversed() to generate the list\n    # use zip() to combine the two list together\n    # use abs() to get the absolute value of the difference\n    # return abs(sum(enumerate(reversed(range(len(list1)))))) - sum(list1)\n    # using the reversed() to generate the list\n    # use zip() to combine the two list together\n    # use abs() to get the absolute value of the difference\n    # return abs(sum(enumerate(reversed(range(len(list1)))))) - sum(list1)\n    # using the reversed() to generate the list\n    # use zip() to combine the two list together\n    # use abs() to get the absolute value of the difference\n    # return abs(sum(enumerate(reversed(range(len(list1)))))) - sum(list1)\n    # using the reversed() to generate the list\n    # use zip() to combine the two list together\n    # use abs() to get the absolute value of the difference\n    # return abs(sum(enumerate(reversed(range(len(list1)))))) - sum(list1)\n    # using the reversed() to generate the list\n    # use zip() to combine the two list together\n    # use abs() to get the absolute value of the difference\n    # return abs(sum(enumerate(reversed(range(len(list1)))))) - sum(list1)\n    # using the reversed() to generate the list\n    # use zip() to combine the two list together\n    # use abs() to get the absolute value of the difference\n    # return abs(sum(enumerate(reversed(range(len(list1)))))) - sum(list1)\n    # using the reversed() to generate the list\n    # use zip() to combine the two list together\n    # use abs() to get the absolute value of the difference\n    # return abs(sum(enumerate(reversed(range(len(list1)))))) - sum(list1)\n    # using the reversed() to generate the list\n    # use zip() to combine the two list together\n    # use abs() to get the absolute value of the difference\n    # return abs(sum(enumerate(reversed(range(len(list1)))))) - sum(list1)\n    # using the reversed() to generate the list\n    # use zip() to combine the two list together\n    # use abs() to get the absolute value of the difference\n    # return abs(sum(enumerate(reversed(range(len(list1)))))) - sum(list1)\n    # using the reversed() to generate the list\n    # use zip() to combine the two list together\n    # use abs() to get the absolute value of the difference\n    # return abs(sum(enumerate(reversed(range(len(list1)))))) - sum(list1)\n    # using the reversed() to generate the list\n    # use zip() to combine the two list together\n    # use abs() to get the absolute value of the difference\n    # return abs(sum(enumerate(reversed(range(len(list1)))))) - sum(list1)\n    # using the reversed() to generate the list\n    # use zip() to combine the two list together\n    # use abs() to get the absolute value of the difference\n    # return abs(sum(enumerate(reversed(range(len(list1)))))) - sum(list1)\n    # using the reversed() to generate the list\n    # use zip() to combine the two list together\n    # use abs() to get the absolute value of the difference\n    # return abs(sum(enumerate(reversed(range(len(list1)))))) - sum(list1)\n    # using the reversed() to generate the list\n    # use zip() to combine the two list together\n    # use abs() to get the absolute value of the difference\n    # return abs(sum(enumerate(reversed(range(len(list1)))))) - sum(list1)\n    # using the reversed() t"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = list1[0]\n    first_odd = list1[1]\n    return first_even - first_odd\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for item in list1:\n        if item % 2 == 0:\n            even_list.append(item)\n        else:\n            odd_list.append(item)\n    return abs(even_list[0] - odd_list[0])\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even += list1[i]\n        else:\n            odd += list1[i]\n    return even - odd\n    \n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    def _bin_to_int(bin_num) : \n        '''\n        To convert a binary number to an integer, reverse the binary number and add 1 if the number is odd, else add 0. \n        '''\n        int_num = 0\n        for x in range(len(bin_num)) : \n            int_num += int(bin_num[len(bin_num)-x-1])*(2**x)\n        if int_num%2 == 0 : \n            return int_num\n        else : \n            return int_num+1\n    int1 = _bin_to_int(str1)\n    int2 = _bin_to_int(str2)\n    if int1 == int2 : \n        return 0\n    elif int1 > int2 : \n        return 1\n    else : \n        return 2\n        \n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if (str1,str2) in table :\n        return table[(str1,str2)]\n    if str1 == str2 :\n        return 0\n    if len(str1)!= len(str2) :\n        return -1\n    count = 0\n    i = 0\n    j = 0\n    while i < len(str1) :\n        if str1[i] == str2[j] :\n            i += 1\n            j += 1\n        else :\n            count += 1\n            if str1[i] in str2[j:len(str2)] :\n                j = str2.index(str1[i])\n            else :\n                j = len(str2)\n    table[(str1,str2)] = count\n    return table[(str1,str2)]\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)) :\n        if str1[i]!=str2[i] :\n            count +=1\n            index1 = str1.index(str2[i])\n            str1 = str1[:index1] + str2[i] + str1[index1+1:]\n            index2 = str2.index(str1[i])\n            str2 = str2[:index2] + str1[i] + str2[index2+1:]\n    print count,str1,str2\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            temp = str2[i]\n            str2 = str2[:i] + str2[i+1:]\n            str2 = str2[:i] + temp + str2[i:]\n            count += 1\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    num1= int(str1, 2)\n    num2= int(str2, 2)\n    return bin(num1 ^ num2).count('1')\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    s1 = []\n    s2 = []\n    for c in str1 :\n        s1.append(int(c))\n    for c in str2 :\n        s2.append(int(c))\n    n = len(s1)\n    temp = 0\n    for i in range(n) :\n        if s1[i]!=s2[i] :\n            temp += 1\n    return temp\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    #print(\"Entered min_Swaps\")\n    count=0\n    for i in range(len(str1)) :\n        if str1[i]==str2[i] :\n            continue\n        else :\n            temp=str1[i]\n            str1=str1[:i]+str1[i+1:]\n            str2=str2[:i]+str2[i+1:]\n            str1=str1[:i]+temp+str1[i:]\n            str2=str2[:i]+temp+str2[i:]\n            count+=1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    count = 0\n    for i in range(n) : \n        if str1[i]!= str2[i] : \n            count += 1\n            str1 = str1[:i] + str2[i] + str1[i+1:]\n            str2 = str2[:i] + str1[i] + str2[i+1:]\n    print('Minimum swap count =',count)\n    print('Original string 1 = ',str1)\n    print('Original string 2 = ',str2)\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    num1 = int(str1,2)\n    num2 = int(str2,2)\n    diff = num1-num2\n    n = len(str1)\n    count = 0\n    \n    for i in range(0,n) :\n        if str1[i] == '0' and str2[i] == '1' :\n            count += 1\n        elif str1[i] == '1' and str2[i] == '0' :\n            count += 1\n    \n    if count%2 == 0 :\n        print \"No. of times\",count,\"is an even number\"\n    else :\n        print \"No. of times\",count,\"is an odd number\"\n    \n    print \"the absolute difference between the two numbers is :\",abs(diff)\n    return \n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    count = 0\n    for i in range(n) :\n        if str1[i]!= str2[i] :\n            temp = str2[i]\n            str2 = str2[:i] + str2[i+1:]\n            temp = temp[::-1]\n            str2 = temp + str2\n            count += 1\n    return count\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size=0\n    for i in tuple_list:\n        size=size+sys.getsizeof(i)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # iterate over all items in the tuple and add 1 to the current size\n    size = sys.getsizeof(tuple_list)\n    for item in tuple_list:\n        size = size + sys.getsizeof(item)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_list = list(tuple_list)\n    if len(tuple_list) == 0:\n        return 0\n    else:\n        first = 0\n        for i in tuple_list:\n            first += sys.getsizeof(i)\n        return first\ndef tuple_compare(tuple_list1,tuple_list2):\n    '''\n    Write a function to compare the size of tuples with the tuple list that is bigger.\n    '''\n    if len(tuple_list1) == 0 or len(tuple_list2) == 0:\n        return 0\n    else:\n        i = 0\n        while i < len(tuple_list1):\n            if sys.getsizeof(tuple_list1[i]) > sys.getsizeof(tuple_list2[i]):\n                return 1\n            elif sys.getsizeof(tuple_list1[i]) < sys.getsizeof(tuple_list2[i]):\n                return -1\n            i += 1\n        return 0\ndef tuple_xor(tuple_list1,tuple_list2):\n    '''\n    Write a function to xor the given tuples with the given size.\n    '''\n    tuple_list1 = list(tuple_list1)\n    tuple_list2 = list(tuple_list2)\n    if len(tuple_list1) == 0 or len(tuple_list2) == 0:\n        return 0\n    else:\n        i = 0\n        while i < len(tuple_list1):\n            tuple_list1[i] ^= tuple_list2[i]\n            i += 1\n        return tuple_list1\ndef tuple_sum(tuple_list1,tuple_list2):\n    '''\n    Write a function to add the given tuples.\n    '''\n    tuple_list1 = list(tuple_list1)\n    tuple_list2 = list(tuple_list2)\n    if len(tuple_list1) == 0 or len(tuple_list2) == 0:\n        return 0\n    else:\n        i = 0\n        while i < len(tuple_list1):\n            tuple_list1[i] += tuple_list2[i]\n            i += 1\n        return tuple_list1\ndef tuple_multiplication(tuple_list1,tuple_list2):\n    '''\n    Write a function to multiply the given tuples.\n    '''\n    tuple_list1 = list(tuple_list1)\n    tuple_list2 = list(tuple_list2)\n    if len(tuple_list1) == 0 or len(tuple_list2) == 0:\n        return 0\n    else:\n        i = 0\n        while i < len(tuple_list1):\n            tuple_list1[i] *= tuple_list2[i]\n            i += 1\n        return tuple_list1\ndef tuple_minus(tuple_list1,tuple_list2):\n    '''\n    Write a function to subtract the given tuples.\n    '''\n    tuple_list1 = list(tuple_list1)\n    tuple_list2 = list(tuple_list2)\n    if len(tuple_list1) == 0 or len(tuple_list2) == 0:\n        return 0\n    else:\n        i = 0\n        while i < len(tuple_list1):\n            tuple_list1[i] -= tuple_list2[i]\n            i += 1\n        return tuple_list1\ndef tuple_floordiv(tuple_list1,tuple_list2):\n    '''\n    Write a function to floor divide the given tuples.\n    '''\n    tuple_list1 = list(tuple_list1)\n    tuple_list2 = list(tuple_list2)\n    if len(tuple_list1) == 0 or len(tuple_list2) == 0:\n        return 0\n    else:\n        i = 0\n        while i < len(tuple_list1):\n            tuple_list1[i] //= tuple_list2[i]\n            i += 1\n        return tuple_list1\ndef tuple_modulus(tuple_list1,tuple_list2):\n    '''\n    Write a function to modulus the given tuples.\n    '''\n    tuple_list1 = list(tuple_list1)\n    tuple_list2 = list(tuple_list2)\n    if len(tuple_list1) == 0 or len(tuple_list2) == 0:\n        return 0\n    else:\n        i = 0\n        while i < len(tuple_list1):\n            tuple_list1[i] %= tuple_list2[i]\n            i += 1\n        return tuple_list1\ndef tuple_divmod(tuple_list1,tuple_list2):\n    '''\n    Write a function to get the divmod of the given tuples.\n    '''\n    tuple_list1 = list(tuple_list1)\n    tuple_list2 = list(tuple_list2)\n    if len(tuple_list1) == 0 or len(tuple_list2) == 0:\n        return 0\n    else:\n        i = 0\n        while i < len(tuple_list1):\n            div,mod = divmod(tuple_list1[i],tuple_list2[i])\n            tuple_list1[i] = div\n            tuple_list1[i+1] = mod\n            i += 2\n        return tuple_list1\ndef tuple_pow(tuple_list1,tuple_list2):\n    '''\n    Write a function to get the pow of the given tuples.\n    '''\n    tuple_list1 = list(tuple_list1)\n    tuple_list2 = list(tuple_list2)\n    if len(tuple_list1) == 0 or len(tuple_list2) == 0:\n        return 0\n    else:\n        i = 0\n        while i < len(tuple_list1):\n            tuple_list1[i] **= tuple_list2[i]\n            i += 1\n        return tuple_list1\ndef tuple_equal(tuple_list1,tuple_list2):\n    '''\n    Write a function to compare the given tuples with the given size.\n    '''\n    tuple_list1 = list(tuple_list1)\n    tuple_list2 = list(tuple_list2)\n    if len(tuple_list1) == 0 or len(tuple_list2) == 0:\n        return 0\n    else:\n        i = 0\n        while i < len(tuple_list1):\n            if tuple_list1[i]!= tuple_list2[i]:\n                return 0\n            i += 1\n        return 1\ndef tuple_sort(tuple_list):\n    '''\n    Write a function to sort the given tuples.\n    '''\n    tuple_list = list(tuple_list)\n    if len(tuple_list) == 0:\n        return 0\n    else:\n        for i in range(len(tuple_list)-1):\n            for j in range(i+1,len(tuple_list)):\n                if tuple_list[i] > tuple_list[j]:\n                    tuple_list[i],tuple_list[j] = tuple_list[j],tuple_list[i]\n        return tuple_list\ndef tuple_reverse(tuple_list):\n    '''\n    Write a function to reverse the given tuples.\n    '''\n    tuple_list = list(tuple_list)\n    if len(tuple_list) == 0:\n        return 0\n    else:\n        tuple_list.reverse()\n        return tuple_list\ndef tuple_remove(tuple_list,element):\n    '''\n    Write a function to remove the given element from the given tuples.\n    '''\n    tuple_list = list(tuple_list)\n    if len(tuple_list) == 0:\n        return 0\n    else:\n        i = 0\n        while i < len(tuple_list):\n            if tuple_list[i] == element:\n                tupl"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size\n    \ndef print_tuple(tuple_list):\n    '''\n    Write a function to print the given tuple with each item on a new line\n    '''\n    for element in tuple_list:\n        print element\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_size = 0\n    for element in tuple_list:\n        tuple_size += sys.getsizeof(element)\n    return tuple_size\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for each in tuple_list:\n        size += sys.getsizeof(each)\n    return size\ndef word_count(s):\n    '''\n    Write a function that takes a string and counts the number of words in it.\n    '''\n    return len(s.split())\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    print('Size of tuple in Bytes is {}'.format(size))\n    \n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n = len(arr1)\n    m = len(arr2)\n    \n    if k > (n + m):\n        return None\n    elif k < 0:\n        return None\n    elif n == 0:\n        return arr2[k - 1]\n    elif m == 0:\n        return arr1[k - 1]\n    elif k == 0:\n        return None\n    else:\n        return find_kth(arr1[:len(arr1)//2], arr2[:len(arr2)//2], k) if arr1[len(arr1)//2] > arr2[len(arr2)//2] else find_kth(arr1[len(arr1)//2:], arr2[:len(arr2)//2], k - len(arr1[len(arr1)//2:]) - len(arr2[:len(arr2)//2]))\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0 or len(arr2) == 0:\n        return\n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1\n    if k > len(arr2):\n        return arr2[-1]\n    idx1 = len(arr1) // 2\n    idx2 = len(arr2) // 2\n    if arr1[idx1] == arr2[idx2]:\n        return arr1[idx1]\n    if arr1[idx1] > arr2[idx2]:\n        if k > idx2 + 1:\n            return find_kth(arr1[:idx1], arr2[idx2+1:], k - idx2 - 1)\n        else:\n            return find_kth(arr1[:idx1], arr2[:idx2], k)\n    if arr1[idx1] < arr2[idx2]:\n        if k > idx1 + 1:\n            return find_kth(arr1[idx1+1:], arr2[:idx2], k - idx1 - 1)\n        else:\n            return find_kth(arr1[idx1:], arr2[:idx2], k)\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if not arr1 and not arr2:\n        return None\n    elif not arr1:\n        return arr2[k-1]\n    elif not arr2:\n        return arr1[k-1]\n    else:\n        if k == 1:\n            return min(arr1[0], arr2[0])\n        mid1 = len(arr1)//2\n        mid2 = len(arr2)//2\n        if arr1[mid1] == arr2[mid2]:\n            return arr1[mid1]\n        elif arr1[mid1] < arr2[mid2]:\n            if k <= mid2:\n                return find_kth(arr1[mid1:], arr2, k)\n            else:\n                return find_kth(arr1, arr2[mid2:], k - mid2)\n        else:\n            if k <= mid1:\n                return find_kth(arr1, arr2[mid2:], k)\n            else:\n                return find_kth(arr1[mid1:], arr2, k - mid1)\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1_index = 0\n    arr2_index = 0\n    \n    while True:\n        if arr1_index == len(arr1):\n            return arr2[arr2_index + k - 1]\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    ptr1, ptr2 = 0, 0\n    while ptr1 < len(arr1) and ptr2 < len(arr2):\n        if arr1[ptr1] < arr2[ptr2]:\n            if ptr1 == k - 1:\n                return arr1[ptr1]\n            ptr1 += 1\n        elif arr1[ptr1] > arr2[ptr2]:\n            if ptr2 == k - 1:\n                return arr2[ptr2]\n            ptr2 += 1\n        else:\n            ptr1 += 1\n            ptr2 += 1\n    return -1\n    \narr1 = [1, 3, 5, 7]\narr2 = [2, 4, 6, 8]\nk = 3\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def find(arr, start, end, k):\n        if start > end:\n            return -1\n        if start == end:\n            return arr[start]\n        mid = (start+end)/2\n        if mid > k:\n            return find(arr, start, mid-1, k)\n        elif mid == k:\n            return arr[mid]\n        else:\n            return find(arr, mid+1, end, k)\n    return find(arr1, 0, len(arr1)-1, k)\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0:\n        return arr2[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if k > len(arr1) + len(arr2):\n        return min(arr1[len(arr1)-1], arr2[len(arr2)-1])\n    if k > len(arr1):\n        return arr2[k-1]\n    if k > len(arr2):\n        return arr1[k-1]\n    return min(find_kth(arr1[:k//2], arr2, k//2), find_kth(arr1, arr2[:k//2], k//2))\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0 and len(arr2) == 0:\n        return\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    return arr1[k - 1] if arr1[k - 1] < arr2[k - 1] else arr2[k - 1]\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    digits = []\n    for i in range(len(str(number))):\n        digits.append(int(str(number)[i]))\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    copy_number = number\n    sum_of_digit = 0\n    while copy_number > 0:\n        digit = copy_number % 10\n        sum_of_digit += digit ** 3\n        copy_number //= 10\n    return sum_of_digit == number\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    result = 0\n    for i in str(number):\n        result += pow(int(i), len(str(number)))\n    if result == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return sum == number\n    \ndef fibonacci_number(number):\n    '''\n    Write a function to check whether the given number is Fibonacci or not.\n    '''\n    return ((1 + (5 ** 0.5)) / 2) ** number == ((1 - (5 ** 0.5)) / 2) ** number\n    \ndef main():\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    print(armstrong_number(233))\n    print(armstrong_number(123))\n    print(armstrong_number(1234))\n    print(armstrong_number(12))\n    print(armstrong_number(0))\n    print(armstrong_number(1))\n    print(armstrong_number(2))\n    print(armstrong_number(3))\n    print(armstrong_number(10))\n    print(armstrong_number(15))\n    print(armstrong_number(25))\n    print(armstrong_number(26))\n    print(armstrong_number(28))\n    print(armstrong_number(30))\n    print(armstrong_number(33))\n    print(armstrong_number(100))\n    print(armstrong_number(101))\n    print(armstrong_number(200))\n    print(armstrong_number(300))\n    print(armstrong_number(400))\n    print(armstrong_number(500))\n    print(armstrong_number(600))\n    print(armstrong_number(700))\n    print(armstrong_number(800))\n    print(armstrong_number(900))\n    print(armstrong_number(1000))\n    \n    print(fibonacci_number(0))\n    print(fibonacci_number(1))\n    print(fibonacci_number(2))\n    print(fibonacci_number(3))\n    print(fibonacci_number(4))\n    print(fibonacci_number(5))\n    print(fibonacci_number(6))\n    print(fibonacci_number(7))\n    print(fibonacci_number(8))\n    print(fibonacci_number(9))\n    print(fibonacci_number(10))\n    print(fibonacci_number(11))\n    print(fibonacci_number(12))\n    print(fibonacci_number(13))\n    print(fibonacci_number(14))\n    print(fibonacci_number(15))\n    print(fibonacci_number(16))\n    print(fibonacci_number(17))\n    print(fibonacci_number(18))\n    print(fibonacci_number(19))\n    print(fibonacci_number(20))\n    print(fibonacci_number(21))\n    print(fibonacci_number(22))\n    print(fibonacci_number(23))\n    print(fibonacci_number(24))\n    print(fibonacci_number(25))\n    print(fibonacci_number(26))\n    print(fibonacci_number(27))\n    print(fibonacci_number(28))\n    print(fibonacci_number(29))\n    print(fibonacci_number(30))\n    print(fibonacci_number(31))\n    print(fibonacci_number(32))\n    print(fibonacci_number(33))\n    print(fibonacci_number(34))\n    print(fibonacci_number(35))\n    print(fibonacci_number(36))\n    print(fibonacci_number(37))\n    print(fibonacci_number(38))\n    print(fibonacci_number(39))\n    print(fibonacci_number(40))\n    print(fibonacci_number(41))\n    print(fibonacci_number(42))\n    print(fibonacci_number(43))\n    print(fibonacci_number(44))\n    print(fibonacci_number(45))\n    print(fibonacci_number(46))\n    print(fibonacci_number(47))\n    print(fibonacci_number(48))\n    print(fibonacci_number(49))\n    print(fibonacci_number(50))\n    print(fibonacci_number(51))\n    print(fibonacci_number(52))\n    print(fibonacci_number(53))\n    print(fibonacci_number(54))\n    print(fibonacci_number(55))\n    print(fibonacci_number(56))\n    print(fibonacci_number(57))\n    print(fibonacci_number(58))\n    print(fibonacci_number(59))\n    print(fibonacci_number(60))\n    print(fibonacci_number(61))\n    print(fibonacci_number(62))\n    print(fibonacci_number(61))\n    print(fibonacci_number(60))\n    print(fibonacci_number(59))\n    print(fibonacci_number(58))\n    print(fibonacci_number(57))\n    print(fibonacci_number(56))\n    print(fibonacci_number(55))\n    print(fibonacci_number(54))\n    print(fibonacci_number(53))\n    print(fibonacci_number(52))\n    print(fibonacci_number(51))\n    print(fibonacci_number(50))\n    print(fibonacci_number(49))\n    print(fibonacci_number(48))\n    print(fibonacci_number(47))\n    print(fibonacci_number(46))\n    print(fibonacci_number(45))\n    print(fibonacci_number(44))\n    print(fibonacci_number(43))\n    print(fibonacci_number(42))\n    print(fibonacci_number(41))\n    print(fibonacci_number(40))\n    print(fibonacci_number(39))\n    print(fibonacci_number(38))\n    print(fibonacci_number(37))\n    print(fibonacci_number(36))\n    print(fibonacci_number(35))\n    print(fibonacci_number(34))\n    print(fibonacci_number(33))\n    print(fibonacci_number(32))\n    print(fibonacci_number(31))\n    print(fibonacci_number(30))\n    print(fibonacci_number(29))\n    print(fibonacci_number(28))\n    print(fibonacci_number(27))\n    print(fibonacci_number(26))\n    print(fibonacci_number(25))\n    print(fibonacci_number(24))\n    print(fibonacci_number(23))\n    print(fibonacci_number(22))\n    print(fibonacci_number(21))\n    print(fibonacci_number(20))\n    print(fibonacci_number(19))\n    print(fibonacci_number(18))\n    print(fibonacci_number(17))\n    print(fibonacci_number(16))\n    print(fibonacci_number(15))\n    print(fibonacci_number(14))\n    print(fibonacci_number(13))\n    print(fibonacci_number(12))\n    print(fibonacci_number(11))\n    print(fibonacci_number(10))\n    print(fibonacci_number(9))\n    print(fibonacci_number(8))\n    print(fibonacci_number(7))\n    print(fibonacci_number(6))\n    print(fibonacci_number(5))\n    print(fibonacci_number(4))\n    print(fibo"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    string = str(number)\n    l = len(string)\n    return sum(int(string[i]) ** l for i in range(l)) == number\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number_list = [int(digit) for digit in str(number)]\n    return sum(number_list) == number\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    return str(number) == ''.join(reversed(str(number)))\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    count = 0\n    temp = number\n    while temp > 0:\n        count += 1\n        temp //= 10\n    temp = number\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** count\n        temp //= 10\n    return sum == number\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number_string = str(number)\n    if number == 0:\n        return False\n    if len(number_string) == 1:\n        return True\n    else:\n        return armstrong_number(sum([int(number_string[i])**len(number_string) for i in range(len(number_string))]))\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 0:\n        return False\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n    return (sum, average)\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    count, sum, average = 0, 0, 0\n    while count < number:\n        sum = sum + count\n        average = sum / number\n        count = count + 1\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number <= 0:\n        return \"Please enter a valid number\"\n    else:\n        sum_number = 0\n        average_number = 0\n        for i in range(1, number+1):\n            sum_number = sum_number + i\n            average_number = average_number + i\n        average_number = average_number / number\n        print sum_number\n        print average_number\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # for i in range(1, number+1):\n    #     print(i, end=\" \")\n    # print(\"\\n\")\n    # print(\"sum: \", sum(range(1, number+1)))\n    # print(\"average: \", sum(range(1, number+1))/number)\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return sum(range(number + 1)), float(sum(range(number + 1))) / number\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number + 1):\n        total += i\n    return total / number\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    n = number\n    if number <= 0:\n        raise ValueError('Enter a natural number greater than 0')\n    else:\n        return (n*(n+1))/2\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return sum(range(number + 1)) / number\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    while True:\n        total += number\n        count += 1\n        number += 1\n        yield total/count\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    avg = sum / number\n    return [sum, avg]\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2 == 0) : \n        print \"Number %d is even\" % n\n    else : \n        print \"Number %d is odd\" % n\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n%2 == 0) : \n        return True\n    else : \n        return False\n    \ndef factorial(n) : \n    '''\n    Write a python function to find the factorial of a given number n.\n    '''\n    #n = 5\n    fact = 1\n    for i in range(n, 1, -1) : \n        fact = fact * i\n    return fact\n    \ndef isPrime(n) : \n    '''\n    Write a python function to check whether the given number n is a prime number or not.\n    '''\n    if (n > 1) :\n        for i in range(2,n) :\n            if (n%i == 0) :\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return (n%2) == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n%2) == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if len(str1) == 0:\n        return 'No character repeated in the string'\n    else:\n        for index, char in enumerate(str1):\n            if str1.count(char) > 1:\n                return char\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    rep_chars = set()\n    for char in str1:\n        if char in rep_chars:\n            return char\n        else:\n            rep_chars.add(char)\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    d = {}\n    for i in range(len(str1)):\n        if str1[i] in d:\n            return str1[i]\n        d[str1[i]] = i\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) > 1:\n            return i\n    return False\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i)>1:\n            return i\n    return \"No repeated character found.\"\n    \ndef largest_string(str1,str2):\n    '''\n    Write a python function to find the longest common substring in two given strings.\n    '''\n    if len(str1)>len(str2):\n        longest=str1\n        short=str2\n    else:\n        longest=str2\n        short=str1\n    \n    for i in range(len(longest)):\n        if longest[:i+1]==short:\n            return longest[:i+1]\n            \ndef merge_the_tools(string, k):\n    '''\n    Write a python function to merge the characters of string into substring of length k.\n    '''\n    div=int(len(string)/k)\n    for i in range(div):\n        temp=string[i*k:(i+1)*k]\n        print temp\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if len(str1) < 2:\n        return str1\n    for i in xrange(len(str1)-1):\n        if str1[i] == str1[i+1]:\n            return str1[i]\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_map = {}\n    for char in str1:\n        if char in char_map:\n            return char\n        char_map[char] = 0\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    dict = {}\n    for c in str1:\n        if c in dict:\n            return c\n        else:\n            dict[c] = 1\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Write your code here\n    dict = {}\n    for i in str1:\n        if i in dict:\n            return i\n        else:\n            dict[i] = 1\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    seen_characters = {}\n    for c in str1:\n        if c not in seen_characters:\n            seen_characters[c] = 1\n        else:\n            seen_characters[c] += 1\n            return c\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 1:\n        return []\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    \n    ludic = []\n    ludic.append(1)\n    ludic.append(n)\n    \n    for i in range(2, n):\n        if get_ludic_helper(i, n):\n            ludic.append(i)\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n):\n        if is_ludic(i):\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1,2]\n    if n == 3:\n        return [1,2,3]\n    ludic = [1,2,3]\n    for i in xrange(4,n+1):\n        num = get_ludic(i-1)[i-1]\n        ludic.append(num+1)\n        ludic.append(num*2)\n        ludic.append(num*3)\n        ludic.append(num*4)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = [i for i in range(1,n) if (i**2)%(i-1) == 1]\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1,2]\n    else:\n        return [1,2] + [i for i in range(3,n) if (i % 2 == 0 and i % 3 == 0)]\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    l = [1]\n    for i in range(1, n):\n        if i % 2 == 0:\n            l.append(i // 2)\n        else:\n            l.append(3 * i + 1)\n    return l\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 1:\n        return [1]\n    ludic = get_ludic(n-1)\n    new_ludic = [n+i for i in ludic]\n    return new_ludic + [n-i for i in ludic]\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    result = [1]\n    for i in range(2, n+1):\n        if is_ludicrous(i):\n            result.append(i)\n    return result\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    \n    return [int(str(n) + str(i) + str(n)) for i in range(10) if int(str(n) + str(i) + str(n)) <= n]\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s:\n        return s\n    words = s.split()\n    words = [word[::-1] for word in words]\n    return''.join(words)\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(' ')\n    res = []\n    for word in words:\n        res.insert(0, word)\n    return''.join(res)\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    \n    return''.join(reversed(s.split(' ')))\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    new_s = ''\n    for i in s:\n        if i =='':\n            new_s +=''\n        else:\n            new_s = i + new_s\n    return new_s\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.strip()\n    result = []\n    word = ''\n    for i, c in enumerate(s):\n        if c =='':\n            if word:\n                result.append(word)\n                word = ''\n            else:\n                result.append(' ')\n        else:\n            word += c\n    if word:\n        result.append(word)\n    return ''.join(result)\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s:\n        return s\n    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    def reverse(s,left,right):\n        while left<right:\n            s[left],s[right]=s[right],s[left]\n            left+=1\n            right-=1\n        return s\n    if not s:\n        return s\n    rev=reverse(s,0,len(s)-1)\n    rev=reverse(rev,0,len(rev)-1)\n    rev=reverse(rev,0,len(rev)-1)\n    i=0\n    j=0\n    while j<len(rev):\n        if rev[j]==' ':\n            rev=reverse(rev,i,j-1)\n            i=j+1\n        j+=1\n    rev=reverse(rev,i,j)\n    return ''.join(rev)\ndef reverse_words_2(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    def reverse(s,left,right):\n        while left<right:\n            s[left],s[right]=s[right],s[left]\n            left+=1\n            right-=1\n        return s\n    if not s:\n        return s\n    rev=reverse(s,0,len(s)-1)\n    i=0\n    j=0\n    while j<len(rev):\n        if rev[j]==' ':\n            rev=reverse(rev,i,j-1)\n            i=j+1\n        j+=1\n    rev=reverse(rev,i,j)\n    return''.join(rev)\ndef reverse_words_3(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s:\n        return s\n    l=s.split(' ')\n    for i in range(len(l)):\n        l[i]=l[i][::-1]\n    return''.join(l)\ndef reverse_words_4(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s:\n        return s\n    rev=s.split(' ')\n    return''.join(rev[::-1])\ndef reverse_words_5(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s:\n        return s\n    rev=list(s)\n    n=len(s)\n    for i in range(n):\n        if rev[i]==' ':\n            for j in range(i,n):\n                rev[j]=rev[j+1]\n            rev[i+1]=' '\n    return ''.join(rev)\ndef reverse_words_6(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s:\n        return s\n    rev=list(s)\n    n=len(s)\n    for i in range(n):\n        if rev[i]==' ':\n            for j in range(i,n):\n                rev[j]=rev[j+1]\n            rev[i+1]=' '\n    return ''.join(rev)\ndef reverse_words_7(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s:\n        return s\n    rev=list(s)\n    n=len(s)\n    for i in range(n):\n        if rev[i]==' ':\n            for j in range(i,n):\n                rev[j]=rev[j+1]\n            rev[i+1]=' '\n    return ''.join(rev)\ndef reverse_words_8(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s:\n        return s\n    rev=list(s)\n    n=len(s)\n    for i in range(n):\n        if rev[i]==' ':\n            for j in range(i,n):\n                rev[j]=rev[j+1]\n            rev[i+1]=' '\n    return ''.join(rev)\ndef reverse_words_9(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s:\n        return s\n    l=s.split(' ')\n    for i in range(len(l)):\n        l[i]=l[i][::-1]\n    return''.join(l)\ndef reverse_words_10(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s:\n        return s\n    return''.join(s.split(' ')[::-1])\ndef reverse_words_11(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s:\n        return s\n    rev=s.split(' ')\n    return''.join(rev[::-1])\ndef reverse_words_12(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s:\n        return s\n    return''.join(s.split(' ')[::-1])\ndef reverse_words_13(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s:\n        return s\n    return''.join(s.split(' ')[::-1])\ndef reverse_words_14(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s:\n        return s\n    l=[]\n    for i in s.split(' '):\n        l.insert(0,i)\n    return''.join(l)\ndef reverse_words_15(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s:\n        return s\n    l=[]\n    for i in s.split(' '):\n        l.insert(0,i)\n    return''.join(l)\ndef reverse_words_16(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s:\n        return s\n    return''.join(s.split(' ')[::-1])\ndef reverse_words_17(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s:\n        return s\n    return''.join(s.split(' ')[::-1])\ndef reverse_words_18(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s:\n        return s\n    return''.join(s.split(' ')[::-1])\ndef reverse_words_19(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s:\n        return s\n    return''.join(s.split(' ')[::-1])\ndef reverse_words_20(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s:\n        return s\n    return''.join(s.split(' ')[::-1])\ndef reverse_words_21(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s:\n        return s\n    l=[]\n    for i in s.split(' '):\n        l.insert(0,i)\n    return''.join(l)\ndef reverse_words_22(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s:\n        return s\n    return''.join(s.split(' ')[::-1])\ndef reverse_words_23(s):\n    '"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if len(s) == 0:\n        return \"\"\n    ans = []\n    left = 0\n    right = len(s) - 1\n    while left < right:\n        ans.append(s[right])\n        right -= 1\n        while left < right and s[left]!='':\n            left += 1\n        if left < right:\n            ans.append(' ')\n    return ''.join(ans)\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    output = []\n    word = ''\n    for i in s:\n        if i =='':\n            output.append(word)\n            output.append(' ')\n            word = ''\n        else:\n            word += i\n    output.append(word)\n    return ''.join(output)\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, num, 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        for i in range(3, num):\n            if num % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2,num):\n            if num % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    #Base Case: 1 is a prime number\n    if num <= 1:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2:\n        return True\n    if num % 2 == 0 or num <= 1:\n        return False\n    for i in range(3,int(num**0.5)+1,2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * math.pi / 180\n    return radians\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    \n    return degree * (math.pi / 180)\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef radian_distance(degree1, degree2):\n    '''\n    Write a function to calculate the distance between two points on earth.\n    '''\n    return radian_degree(degree1) - radian_degree(degree2)\ndef lerp(v1, v2, t):\n    '''\n    Write a function to calculate the interpolated value between two values.\n    '''\n    return v1 + t * (v2 - v1)\ndef interpolate_vector(v1, v2, t):\n    '''\n    Write a function to interpolate two vectors.\n    '''\n    return lerp(v1, v2, t)\ndef interpolate_angle(angle1, angle2, t):\n    '''\n    Write a function to interpolate two angles.\n    '''\n    return (lerp(angle1, angle2, t) % 360)\ndef interpolate_angle2(angle1, angle2, t):\n    '''\n    Write a function to interpolate two angles.\n    '''\n    return (lerp(angle1, angle2, t) * 180) / 360\ndef interpolate_angle3(angle1, angle2, t):\n    '''\n    Write a function to interpolate two angles.\n    '''\n    return interpolate_angle2(angle1, angle2, t) * 360) / 180\ndef interpolate_angle4(angle1, angle2, t):\n    '''\n    Write a function to interpolate two angles.\n    '''\n    return interpolate_angle3(angle1, angle2, t) * 180) / 360\ndef lerp_vector(v1, v2, t):\n    '''\n    Write a function to interpolate two vectors.\n    '''\n    return v1 + t * (v2 - v1)\ndef interpolate_vector2(v1, v2, t):\n    '''\n    Write a function to interpolate two vectors.\n    '''\n    return lerp_vector(v1, v2, t)\ndef interpolate_vector3(v1, v2, t):\n    '''\n    Write a function to interpolate two vectors.\n    '''\n    return lerp_vector(v1, v2, t)\ndef interpolate_vector4(v1, v2, t):\n    '''\n    Write a function to interpolate two vectors.\n    '''\n    return lerp_vector(v1, v2, t)\ndef interpolate_point2(p1, p2, t):\n    '''\n    Write a function to interpolate two points.\n    '''\n    return p1 + t * (p2 - p1)\ndef interpolate_point3(p1, p2, t):\n    '''\n    Write a function to interpolate two points.\n    '''\n    return p1 + t * (p2 - p1)\ndef interpolate_point4(p1, p2, t):\n    '''\n    Write a function to interpolate two points.\n    '''\n    return p1 + t * (p2 - p1)\ndef interpolate_point_vector(p1, v1, t):\n    '''\n    Write a function to interpolate a point and a vector.\n    '''\n    return p1 + t * (v1 - p1)\ndef interpolate_point_vector2(p1, v1, t):\n    '''\n    Write a function to interpolate a point and a vector.\n    '''\n    return p1 + t * (v1 - p1)\ndef interpolate_point_vector3(p1, v1, t):\n    '''\n    Write a function to interpolate a point and a vector.\n    '''\n    return p1 + t * (v1 - p1)\ndef interpolate_point_vector4(p1, v1, t):\n    '''\n    Write a function to interpolate a point and a vector.\n    '''\n    return p1 + t * (v1 - p1)\ndef interpolate_point_vector5(p1, v1, p2, v2, t):\n    '''\n    Write a function to interpolate a point and a vector.\n    '''\n    return lerp_vector(p1, p2, t) + t * (v2 - v1)\ndef interpolate_point_vector6(p1, v1, p2, v2, t):\n    '''\n    Write a function to interpolate a point and a vector.\n    '''\n    return p1 + t * (v2 - v1)\ndef interpolate_point_vector7(p1, v1, p2, v2, t):\n    '''\n    Write a function to interpolate a point and a vector.\n    '''\n    return p1 + t * (v2 - v1)\ndef interpolate_point_vector8(p1, v1, p2, v2, t):\n    '''\n    Write a function to interpolate a point and a vector.\n    '''\n    return p1 + t * (v2 - v1)\ndef interpolate_point_vector9(p1, v1, p2, v2, t):\n    '''\n    Write a function to interpolate a point and a vector.\n    '''\n    return p1 + t * (v2 - v1)\ndef interpolate_point_vector10(p1, v1, p2, v2, t):\n    '''\n    Write a function to interpolate a point and a vector.\n    '''\n    return p1 + t * (v2 - v1)\ndef interpolate_point_vector11(p1, v1, p2, v2, t):\n    '''\n    Write a function to interpolate a point and a vector.\n    '''\n    return p1 + t * (v2 - v1)\ndef interpolate_point_vector12(p1, v1, p2, v2, t):\n    '''\n    Write a function to interpolate a point and a vector.\n    '''\n    return p1 + t * (v2 - v1)\ndef interpolate_point_vector13(p1, v1, p2, v2, t):\n    '''\n    Write a function to interpolate a point and a vector.\n    '''\n    return p1 + t * (v2 - v1)\ndef interpolate_point_vector14(p1, v1, p2, v2, t):\n    '''\n    Write a function to interpolate a point and a vector.\n    '''\n    return p1 + t * (v2 - v1)\ndef interpolate_point_vector15(p1, v1, p2, v2, t):\n    '''\n    Write a function to interpolate a point and a vector.\n    '''\n    return p1 + t * (v2 - v1)\ndef interpolate_point_vector16(p1, v1, p2, v2, t):\n    '''\n    Write a function to interpolate a point and a vector.\n    '''\n    return p1 + t * (v2 - v1)\ndef interpolate_point_vector17(p1, v1, p2, v2, t):\n    '''\n    Write a function to interpolate a point and a vector.\n    '''\n    return p1 + t * (v2 - v1)\ndef interpolate_point_vector18(p1, v1, p2, v2, t):\n    '''\n    Write a function to interpolate a point and a vector.\n    '''\n    return p1 + t * (v2 - v1)\ndef interpolate_point_vector19(p1, v1, p2, v2, t):\n    '''\n    Write a function to interpolate a point and a vector.\n    '''\n    return p1 + t * (v2 - v1)\ndef interpolate_point_vector20(p1, v1, p2, v2, t):\n    '''\n    Write a function to interpolate a point and a vector.\n    '''\n    return p1 + t * (v2 - v1)\ndef interpolate_point_vector21(p1, v1, p2, v2, t):\n    '''\n    Write a function to interpolate a point and a vector.\n    '''\n    return p1 + t * (v2 - v1)\ndef interpolate"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef radian_degree_function(degree):\n    return degree * 180 / math.pi\ndef radian_degree_function_1(degree):\n    return degree * math.pi / 180\ndef radian_degree_function_2(degree):\n    return degree * 180 / math.pi\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef convert_to_radians_1(degree):\n    return degree * 180 / math.pi\ndef convert_to_radians_2(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_3(degree):\n    return degree * 180 / math.pi\ndef convert_to_radians_4(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_5(degree):\n    return degree * 180 / math.pi\ndef convert_to_radians_6(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_7(degree):\n    return degree * 180 / math.pi\ndef convert_to_radians_8(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_9(degree):\n    return degree * 180 / math.pi\ndef convert_to_radians_10(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_11(degree):\n    return degree * 180 / math.pi\ndef convert_to_radians_12(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_13(degree):\n    return degree * 180 / math.pi\ndef convert_to_radians_14(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_15(degree):\n    return degree * 180 / math.pi\ndef convert_to_radians_16(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_17(degree):\n    return degree * 180 / math.pi\ndef convert_to_radians_18(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_19(degree):\n    return degree * 180 / math.pi\ndef convert_to_radians_20(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_21(degree):\n    return degree * 180 / math.pi\ndef convert_to_radians_22(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_23(degree):\n    return degree * 180 / math.pi\ndef convert_to_radians_24(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_25(degree):\n    return degree * 180 / math.pi\ndef convert_to_radians_26(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_27(degree):\n    return degree * 180 / math.pi\ndef convert_to_radians_28(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_29(degree):\n    return degree * 180 / math.pi\ndef convert_to_radians_30(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_31(degree):\n    return degree * 180 / math.pi\ndef convert_to_radians_32(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_33(degree):\n    return degree * 180 / math.pi\ndef convert_to_radians_34(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_35(degree):\n    return degree * 180 / math.pi\ndef convert_to_radians_36(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_37(degree):\n    return degree * 180 / math.pi\ndef convert_to_radians_38(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_39(degree):\n    return degree * 180 / math.pi\ndef convert_to_radians_40(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_41(degree):\n    return degree * 180 / math.pi\ndef convert_to_radians_42(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_43(degree):\n    return degree * 180 / math.pi\ndef convert_to_radians_44(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_45(degree):\n    return degree * 180 / math.pi\ndef convert_to_radians_46(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_47(degree):\n    return degree * 180 / math.pi\ndef convert_to_radians_48(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_49(degree):\n    return degree * 180 / math.pi\ndef convert_to_radians_50(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_51(degree):\n    return degree * 180 / math.pi\ndef convert_to_radians_52(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_53(degree):\n    return degree * 180 / math.pi\ndef convert_to_radians_54(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_55(degree):\n    return degree * 180 / math.pi\ndef convert_to_radians_56(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_57(degree):\n    return degree * 180 / math.pi\ndef convert_to_radians_58(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_59(degree):\n    return degree * 180 / math.pi\ndef convert_to_radians_60(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_61(degree):\n    return degree * 180 / math.pi\ndef convert_to_radians_62(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_63(degree):\n    return degree * 180 / math.pi\ndef convert_to_radians_64(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_65(degree):\n    return degree * 180 / math.pi\ndef convert_to_radians_66(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_67(degree):\n    return degree * 180 / math.pi\ndef convert_to_radians_68(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_69(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_70(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_71(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_72(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_73(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_74(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_75(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_76(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_77(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_78(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_79(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_80(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_81(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_82(degree):\n    return degree * math.pi / 180\ndef convert_to_radians_83(degree)"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef degree_radian(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians/math.pi*180\ndef get_distance(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    dist = math.sqrt(math.pow(x1-x2,2)+math.pow(y1-y2,2))\n    return dist\ndef get_x_and_y(p1,p2):\n    '''\n    Write a function to get the x and y coordinates from two points.\n    '''\n    x = (p1[0]-p2[0])/get_distance(p1[0],p1[1],p2[0],p2[1])\n    y = (p1[1]-p2[1])/get_distance(p1[0],p1[1],p2[0],p2[1])\n    return x,y\ndef get_angle(p1,p2):\n    '''\n    Write a function to get the angle between two points.\n    '''\n    x = (p2[0]-p1[0])\n    y = (p2[1]-p1[1])\n    if x > 0 and y > 0:\n        angle = math.atan(y/x)\n    elif x > 0 and y < 0:\n        angle = math.atan(y/-x) + math.pi\n    elif x < 0 and y > 0:\n        angle = math.atan(y/-x) + 2*math.pi\n    elif x < 0 and y < 0:\n        angle = math.atan(y/-x) + math.pi\n    elif x == 0 and y > 0:\n        angle = math.pi/2\n    elif x == 0 and y < 0:\n        angle = -math.pi/2\n    elif x == 0 and y == 0:\n        angle = 0\n    return angle\ndef get_y_coordinate(x,p1,p2):\n    '''\n    Write a function to get the y coordinate from an x coordinate.\n    '''\n    a = get_distance(p1[0],p1[1],p2[0],p2[1])\n    b = get_distance(p1[0],p2[0],p2[0],p2[1])\n    y = (p1[1]*a-p2[1]*b)/(a-b)\n    return y\ndef get_x_coordinate(y,p1,p2):\n    '''\n    Write a function to get the x coordinate from a y coordinate.\n    '''\n    a = get_distance(p1[0],p1[1],p2[0],p2[1])\n    b = get_distance(p1[0],p2[0],p2[0],p2[1])\n    x = (p1[0]*a-p2[0]*b)/(a-b)\n    return x\ndef is_between(x,p1,p2):\n    '''\n    Write a function to check if a point is between two points.\n    '''\n    if x > min(p1[0],p2[0]) and x < max(p1[0],p2[0]) and x > min(p1[1],p2[1]) and x < max(p1[1],p2[1]):\n        return True\n    else:\n        return False\ndef angle_between(x1,y1,x2,y2):\n    '''\n    Write a function to get the angle between two points.\n    '''\n    x = (x1-x2)/math.sqrt(math.pow(x1-x2,2)+math.pow(y1-y2,2))\n    y = (y1-y2)/math.sqrt(math.pow(x1-x2,2)+math.pow(y1-y2,2))\n    angle = math.atan(y/x)\n    return angle\ndef check_if_point_is_in_polygon(polygon,point):\n    '''\n    Write a function to check if a point is in a polygon.\n    '''\n    n = len(polygon)\n    x,y = point\n    inside = False\n    p1x,p1y = polygon[0]\n    for i in range(n+1):\n        p2x,p2y = polygon[i%n]\n        if y > min(p1y,p2y):\n            if y <= max(p1y,p2y):\n                if x <= max(p1x,p2x):\n                    if p1y!= p2y:\n                        xints = (y-p1y)*(p2x-p1x)/(p2y-p1y)+p1x\n                    if p1x == p2x or x <= xints:\n                        inside = not inside\n        p1x,p1y = p2x,p2y\n    return inside\ndef is_point_in_polygon(polygon,point):\n    '''\n    Write a function to check if a point is in a polygon.\n    '''\n    n = len(polygon)\n    x,y = point\n    inside = False\n    p1x,p1y = polygon[0]\n    for i in range(n+1):\n        p2x,p2y = polygon[i%n]\n        if y > min(p1y,p2y):\n            if y <= max(p1y,p2y):\n                if x <= max(p1x,p2x):\n                    if p1y!= p2y:\n                        xints = (y-p1y)*(p2x-p1x)/(p2y-p1y)+p1x\n                    if p1x == p2x or x <= xints:\n                        inside = not inside\n        p1x,p1y = p2x,p2y\n    return inside\ndef get_angle_between_points(x1,y1,x2,y2):\n    '''\n    Write a function to get the angle between two points.\n    '''\n    x = (x1-x2)\n    y = (y1-y2)\n    if x > 0 and y > 0:\n        angle = math.atan(y/x)\n    elif x > 0 and y < 0:\n        angle = math.atan(y/-x) + math.pi\n    elif x < 0 and y > 0:\n        angle = math.atan(y/-x) + 2*math.pi\n    elif x < 0 and y < 0:\n        angle = math.atan(y/-x) + math.pi\n    elif x == 0 and y > 0:\n        angle = math.pi/2\n    elif x == 0 and y < 0:\n        angle = -math.pi/2\n    elif x == 0 and y == 0:\n        angle = 0\n    return angle\ndef get_midpoint(p1,p2):\n    '''\n    Write a function to get the midpoint between two points.\n    '''\n    x1,y1 = p1\n    x2,y2 = p2\n    x = (x1+x2)/2\n    y = (y1+y2)/2\n    return x,y\ndef is_point_in_triangle(triangle,point):\n    '''\n    Write a function to check if a point is in a triangle.\n    '''\n    x,y = point\n    p1x,p1y = triangle[0]\n    p2x,p2y = triangle[1]\n    p3x,p3y = triangle[2]\n    if is_between(x,p1x,p2x) and is_between(x,p1y,p2y) and is_between(y,p1y,p3y):\n        return True\n    elif is_between(x,p2x,p3x) and is_between(x,p2y,p3y) and is_between(y,p2y,p3y):\n        return True\n    elif is_between(x,p1x,p3x) and is_between(x,p1y,p3y"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    if text is None or pattern is None:\n        return -1\n    p = re.compile(pattern)\n    start = p.search(text)\n    if start is None:\n        return -1\n    else:\n        start = start.span()\n        end = start + (len(p.search(text[start[1]:]).group()), )\n        return start, end\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start_index = 0\n    end_index = len(text)\n    result = None\n    if re.search(pattern, text):\n        result = re.search(pattern, text)\n    else:\n        return result\n    return result\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return re.search(pattern, text)\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.search(pattern, text)\n    if matches:\n        return matches.group(0), matches.start(), matches.end()\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.search(pattern, text)\n    if matches:\n        return matches.group(), matches.start(), matches.end()\n    else:\n        return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex = re.compile(pattern)\n    res = regex.search(text)\n    start = res.start()\n    end = res.end()\n    return (res.group(), start, end)\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    m = re.search(pattern, text)\n    if m:\n        return m.start(), m.end()\n    else:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start = 0\n    end = 0\n    while start < len(text):\n        match = re.search(pattern, text[start:])\n        if match is not None:\n            return match.group(), start, match.end()\n        start += 1\n    return None, 0, 0\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex = re.compile(pattern)\n    match = regex.search(text)\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    results = []\n    i = 0\n    while True:\n        match = re.search(pattern, text)\n        if match is None:\n            break\n        results.append([match.start(), match.end(), match.group()])\n        i = match.end()\n    return results\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    k = 1\n    sum = 1\n    while k <= n:\n        sum = sum + k\n        k = k + 1\n    return sum\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    import math\n    return (math.factorial(n)) / (math.factorial(n-1) * math.factorial(1))\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return int(round(math.exp(1)*(((((math.factorial(n))/((math.factorial(i))*(math.factorial(n - i))))))/math.factorial(i))\n    return (1)\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if (n == 0):\n        return 1\n    elif (n == 1):\n        return 1\n    elif (n == 2):\n        return 2\n    elif (n == 3):\n        return 5\n    else:\n        return bell_Number(n-1) + bell_Number(n-2) + bell_Number(n-3)\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    output = 1\n    for i in range(1,n+1):\n        output = output*(n-i+1)\n    return output\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    b = [0]\n    b[1] = 1\n    for i in range(2, n+1):\n        b.append(sum([b[j]*b[i-j-1] for j in range(1,i)]))\n    return b[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 5\n    if n > 2:\n        return bell_Number(n-1) + bell_Number(n-2) + bell_Number(n-3)\n    return \n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    b=1\n    for i in range(1,n):\n        b=b*(i+1)\n    return b\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_list = []\n    bell_list.append(0)\n    bell_list.append(1)\n    for i in range(2, n+1):\n        bell_list.append(bell_list[i-2] + bell_list[i-1])\n    return bell_list[n-1]\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Function definition\n    def bellNumber(n,k):\n        if (n == 0):\n            return 1\n        else:\n            return k*bellNumber(n-1,k-1)\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = list1[L:]\n    new_list = new_list[1:]\n    return new_list\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # if L is out of the bounds of the list, then return the whole list\n    if L > len(list1):\n        return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L]+list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return [elem for elem in list1 if elem!=list1[L]]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L]+list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    newlist = []\n    for i in range(len(list1)):\n        if i!= L:\n            newlist.append(list1[i])\n    return newlist\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n    \n    \ndef replace_element(list1, old, new):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but replaced an old element with a new element.\n    '''\n    return [new if x==old else x for x in list1]\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([max(l[N:]) for l in test_list])\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([row[N-1] for row in test_list])\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(map(max, test_list[N:]))\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    column = []\n    for i in test_list:\n        column.append(i[N])\n    return max(column)\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    ans = -float(\"inf\")\n    for row in test_list:\n        ans = max(ans, row[N-1])\n    return ans\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N > len(test_list):\n        return None\n    curr_max = 0\n    for row in test_list:\n        curr_max = max(curr_max, row[N])\n    return curr_max\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    i = 0\n    max = 0\n    for i in range(0, N):\n        if test_list[i][N-1] > max:\n            max = test_list[i][N-1]\n    return max\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    cols = [0] * len(test_list)\n    for i in range(len(test_list)):\n        cols[i] = max(test_list[i])\n    return max(cols)\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_value = test_list[N-1][0]\n    for row in test_list:\n        if max_value < row[N-1]:\n            max_value = row[N-1]\n    return max_value\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_of_column = []\n    for row in test_list:\n        max_of_column.append(row[N-1])\n    return max(max_of_column)\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return map(lambda x: [x[0], x[1]], lst)\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[i][0],lst[i][1]] for i in range(len(lst))]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in lst:\n        result.append([i[0],i[1]])\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    out = []\n    for i in lst:\n        out.append(i[0])\n        out.append(i[1])\n    return out\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst2 = []\n    for i in range(len(lst)):\n        lst2.append([lst[i][0], lst[i][1]])\n    return lst2\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_lst=[]\n    for i in lst:\n        new_lst.append(i[0])\n        new_lst.append(i[1])\n    return new_lst\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[i][0],lst[i][1]] for i in range(len(lst))]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # Python code to demonstrate the working of\n    # merge()\n    if lst == []:\n        return []\n    else:\n        return [lst[0][0],lst[0][1]], merge(lst[1:])\n    "
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for l in lst:\n        merged.append(l[0])\n        merged.append(l[1])\n    return merged\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    temp_list = []\n    cum_list = []\n    sum_list = []\n    for i in range(len(test_list)):\n        temp_list.append(test_list[i][0])\n    for i in range(len(temp_list)):\n        cum_list.append(sum(temp_list[0:i+1]))\n    for i in range(len(cum_list)):\n        sum_list.append((cum_list[i], test_list[i][1]))\n    return sum_list\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    #print test_list\n    cumulative_sum_list = []\n    cumulative_sum = 0\n    for index, val in enumerate(test_list):\n        cumulative_sum += val\n        cumulative_sum_list.append(cumulative_sum)\n    #print cumulative_sum_list\n    return cumulative_sum_list\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum_list = []\n    total_sum = 0\n    for element in test_list:\n        total_sum += element\n        cum_sum_list.append(total_sum)\n    return cum_sum_list\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    for i in range(1, len(test_list)):\n        test_list[i] = test_list[i-1] + test_list[i]\n    return test_list\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    res = []\n    for i in range(len(test_list)):\n        res.append(sum(test_list[:i+1]))\n    return res\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = []\n    cum_sum.append(test_list[0])\n    for i in range(1, len(test_list)):\n        cum_sum.append(cum_sum[i-1] + test_list[i])\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    s = 0\n    cumulative_s = []\n    for i in test_list:\n        s = s + i\n        cumulative_s.append(s)\n    return cumulative_s\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum_list = []\n    for i in range(len(test_list)):\n        cumulative_sum_list.append(sum(test_list[0:i+1]))\n    return cumulative_sum_list\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # all values are positive\n    # the list is sorted\n    for i in range(1, len(test_list)):\n        test_list[i] += test_list[i-1]\n    return test_list\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return [(i+1)*val for i,val in enumerate(test_list)]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average = []\n    for x in range(len(nums)):\n        average.append(sum(nums[x])/len(nums[x]))\n    return average\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [(sum(i)/len(i)) for i in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(i)/len(i) for i in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_nums = []\n    for i in nums:\n        average_nums.append(sum(i) / len(i))\n    return average_nums\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [(x + y) / 2 for x, y in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for x, y in nums:\n        average_list.append(sum(y)/len(y))\n    return average_list\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(x)/len(x) for x in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    sum = 0\n    len = 0\n    for each in nums:\n        for x in each:\n            sum += x\n            len += 1\n    return sum / len\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [average(nums[i]) for i in range(len(nums))]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    nums_average = []\n    for i in range(len(nums)):\n        nums_average.append(sum(nums[i])/len(nums[i]))\n    return nums_average\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return list(map(operator.mod, test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = [((a % b) % c) for (a,b,c) in zip(test_tup1, test_tup2, test_tup2)]\n    return result\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i]%test_tup2[i])\n    return tuple(new_tup)\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple((a%b for a,b in zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([x%y for x,y in zip(test_tup1,test_tup2)])\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuples are not of the same length\")\n    new_tup = ()\n    for index, element in enumerate(test_tup1):\n        new_tup += (element % test_tup2[index],)\n    return new_tup\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    result_list = []\n    for index in range(len(test_tup1)):\n        result_list.append(test_tup1[index] % test_tup2[index])\n    return tuple(result_list)\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    def mod_tup(tup1, tup2):\n        new_tup = []\n        for i in range(len(tup1)):\n            new_tup.append(tup1[i] % tup2[i])\n        return tuple(new_tup)\n    \n    return mod_tup(test_tup1, test_tup2)\n    \n    "
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    assert len(test_tup1) == len(test_tup2)\n    output = []\n    \n    for i in range(len(test_tup1)):\n        output.append( (test_tup1[i] % test_tup2[i]) )\n    \n    return tuple(output)\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    mod = lambda x,y: x % y\n    return tuple(map(mod, test_tup1, test_tup2))\n    \ndef tuple_add(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise addition.\n    '''\n    return tuple(map(sum, test_tup1, test_tup2))\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # base case\n    if steps == 1:\n        return 0\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def is_valid(x, y, steps):\n        if x <= 0 or x >= steps or y <= 0 or y >= steps:\n            return False\n        return True\n        \n    def get_points(i, steps, steps_taken):\n        x = i\n        y = 0\n        while True:\n            yield x, y\n            x += 1\n            if is_valid(x, y, steps):\n                steps_taken += 1\n                if x == steps:\n                    return steps_taken\n            else:\n                return steps_taken\n                \n    def get_jumps(i, steps, steps_taken):\n        x = i\n        y = 0\n        while True:\n            yield x, y\n            x += 1\n            if is_valid(x, y, steps):\n                steps_taken += 1\n                if x == steps:\n                    return steps_taken\n                else:\n                    yield from get_points(x, steps, steps_taken)\n                    steps_taken += 1\n            else:\n                return steps_taken\n                \n    def min_jumps(steps, steps_taken, d):\n        if is_valid(d, 0, steps):\n            return min(get_jumps(d, steps, steps_taken))\n        return -1\n        \n    print(min_jumps(steps, 0, d))\n        \n    \ndef all_strings_2(n, k):\n    '''\n    Given a positive integer n, print all numbers from 0 to n as strings where the numbers in the string are separated by n-1 spaces. \n    For example, if n = 3, then the numbers are printed as follows:\n    0 -> 0 0 0\n    1 -> 0 1 0\n    2 -> 0 2 0\n    3 -> 0 3 0\n    4 -> 0 4 0\n    5 -> 0 5 0\n    6 -> 0 6 0\n    7 -> 0 7 0\n    8 -> 0 8 0\n    9 -> 0 9 0\n    10 -> 0 10 0\n    '''\n    for i in range(n):\n        for j in range(k):\n            print(j, end ='')\n        print()\n        \n    \ndef fibonacci_sequence(n):\n    '''\n    Write a function to compute the nth Fibonacci number. The Fibonacci sequence is defined as:\n    F0 = 0, F1 = 1, F2 = 1, F3 = 2, F4 = 3, F5 = 5, F6 = 8, F7 = 13, F8 = 21 and so on.\n    '''\n    \n    def fib(n):\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        return fib(n - 1) + fib(n - 2)\n        \n    \n    print(fib(n))\n    \n    \ndef fibonacci_numbers(n):\n    '''\n    Write a function to compute the nth Fibonacci number. The Fibonacci sequence is defined as:\n    F0 = 0, F1 = 1, F2 = 1, F3 = 2, F4 = 3, F5 = 5, F6 = 8, F7 = 13, F8 = 21 and so on.\n    '''\n    \n    def fib(n):\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        return fib(n - 1) + fib(n - 2)\n        \n    print(fib(n))\n    \n    \ndef coin_change(coins, n):\n    '''\n    You are given an integer n and a set of coins, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}. Find the minimum number of coins to make up that amount.\n    '''\n    \n    def dp(n, dp, coins):\n        if n == 0:\n            return 0\n        if n < 0:\n            return -1\n        if n in dp:\n            return dp[n]\n        for coin in coins:\n            if coin > n:\n                continue\n            if coin + n in dp:\n                dp[n] = dp[coin + n]\n            else:\n                dp[n] = min(dp[n], 1 + dp[n - coin])\n        return dp[n]\n    \n    print(dp(n, {}, coins))\n    \n    \ndef count_distinct_elements(A):\n    '''\n    Write a function to count the number of distinct elements in an array.\n    '''\n    \n    def dp(n, dp, A):\n        if n == 0:\n            return 0\n        if n < 0:\n            return -1\n        if n in dp:\n            return dp[n]\n        for i in range(len(A)):\n            if A[i]!= A[i - 1]:\n                dp[n] += 1\n        return dp[n]\n    \n    print(dp(len(A) - 1, {}, A))\n    \n    \ndef get_permutation(n, k):\n    '''\n    Given an integer n, print all permutations of length k for numbers from 0 to n.\n    '''\n    \n    def dfs(k, index, n, perm, dp):\n        if k == index:\n            print(perm)\n            return\n        for i in range(index, n + 1):\n            dfs(k, i + 1, n, perm + [i], dp)\n            \n    dfs(k, 1, n, [], {})\n    \n    \ndef get_permutation_2(n, k):\n    '''\n    Given an integer n, print all permutations of length k for numbers from 0 to n.\n    '''\n    \n    def dfs(k, index, n, perm, dp):\n        if k == index:\n            print(perm)\n            return\n        for i in range(index, n + 1):\n            if dp[i] == 0:\n                continue\n            dp[i] -= 1\n            dfs(k, i + 1, n, perm + [i], dp)\n            dp[i] += 1\n            \n    dp = [n - i for i in range(n)]\n    dfs(k, 1, n, [], dp)\n    \n    \ndef get_permutation_3(n, k):\n    '''\n    Given an integer n, print all permutations of length k for numbers from 0 to n.\n    '''\n    \n    def dfs(k, index, n, perm, dp):\n        if k == index:\n            print(perm)\n            return\n        for i in range(index, n + 1):\n            dfs(k, i + 1, n, perm + [i], dp)\n            \n    dfs(k, 1, n, [], {i: 1 for i in range(n)})\n    \n    \ndef nth_combination(n, k, m):\n    '''\n    Given an integer n, a positive integer k, and a positive integer m, \n    print the number of ways that the m-element in the k-element subset of {1, 2,..., n}.\n    '''\n    \n    def dp(n, k, m, dp):\n        if m == 0:\n            return 1\n        if m < 0:\n            return 0\n        if m > n - k + 1:\n            return 0\n        if m in dp:\n            return dp[m]\n        dp[m] = dp[m - 1] + dp[m - k]\n        return dp[m]\n    \n    print(dp(n, k, m, {}))\n    \n    \ndef nth_combination_2(n, k, m):\n    '''\n    Given an integer n, a positive integer k, and a positive integer m, \n    print the number of ways that the m-element in the k-element subset of {1, 2,..., n}.\n    '''\n    \n    def dp(n, k, m, dp):\n        if m == 0:\n            return 1\n        if m < 0:\n            return 0\n        if m > n - k + 1:\n            return 0\n        if m in dp:\n            return dp[m]\n        dp[m] = dp[m - 1] + dp[m - k"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0: return steps\n    if d == 1: return 0\n    if d == 2: return steps + min_Jumps(steps, 0) + min_Jumps(steps, 1)\n    if d == 3: return steps + min_Jumps(steps, 2) + min_Jumps(steps, 1) + min_Jumps(steps, 0)\n    if d == 4: return steps + min_Jumps(steps, 3) + min_Jumps(steps, 2) + min_Jumps(steps, 1) + min_Jumps(steps, 0)\n    if d == 5: return steps + min_Jumps(steps, 4) + min_Jumps(steps, 3) + min_Jumps(steps, 2) + min_Jumps(steps, 1) + min_Jumps(steps, 0)\n    if d == 6: return steps + min_Jumps(steps, 5) + min_Jumps(steps, 4) + min_Jumps(steps, 3) + min_Jumps(steps, 2) + min_Jumps(steps, 1) + min_Jumps(steps, 0)\n    if d == 7: return steps + min_Jumps(steps, 6) + min_Jumps(steps, 5) + min_Jumps(steps, 4) + min_Jumps(steps, 3) + min_Jumps(steps, 2) + min_Jumps(steps, 1) + min_Jumps(steps, 0)\n    if d == 8: return steps + min_Jumps(steps, 7) + min_Jumps(steps, 6) + min_Jumps(steps, 5) + min_Jumps(steps, 4) + min_Jumps(steps, 3) + min_Jumps(steps, 2) + min_Jumps(steps, 1) + min_Jumps(steps, 0)\n    if d == 9: return steps + min_Jumps(steps, 8) + min_Jumps(steps, 7) + min_Jumps(steps, 6) + min_Jumps(steps, 5) + min_Jumps(steps, 4) + min_Jumps(steps, 3) + min_Jumps(steps, 2) + min_Jumps(steps, 1) + min_Jumps(steps, 0)\n    if d == 10: return steps + min_Jumps(steps, 9) + min_Jumps(steps, 8) + min_Jumps(steps, 7) + min_Jumps(steps, 6) + min_Jumps(steps, 5) + min_Jumps(steps, 4) + min_Jumps(steps, 3) + min_Jumps(steps, 2) + min_Jumps(steps, 1) + min_Jumps(steps, 0)\n    if d == 11: return steps + min_Jumps(steps, 10) + min_Jumps(steps, 9) + min_Jumps(steps, 8) + min_Jumps(steps, 7) + min_Jumps(steps, 6) + min_Jumps(steps, 5) + min_Jumps(steps, 4) + min_Jumps(steps, 3) + min_Jumps(steps, 2) + min_Jumps(steps, 1) + min_Jumps(steps, 0)\n    if d == 12: return steps + min_Jumps(steps, 11) + min_Jumps(steps, 10) + min_Jumps(steps, 9) + min_Jumps(steps, 8) + min_Jumps(steps, 7) + min_Jumps(steps, 6) + min_Jumps(steps, 5) + min_Jumps(steps, 4) + min_Jumps(steps, 3) + min_Jumps(steps, 2) + min_Jumps(steps, 1) + min_Jumps(steps, 0)\n    if d == 13: return steps + min_Jumps(steps, 12) + min_Jumps(steps, 11) + min_Jumps(steps, 10) + min_Jumps(steps, 9) + min_Jumps(steps, 8) + min_Jumps(steps, 7) + min_Jumps(steps, 6) + min_Jumps(steps, 5) + min_Jumps(steps, 4) + min_Jumps(steps, 3) + min_Jumps(steps, 2) + min_Jumps(steps, 1) + min_Jumps(steps, 0)\n    if d == 14: return steps + min_Jumps(steps, 13) + min_Jumps(steps, 12) + min_Jumps(steps, 11) + min_Jumps(steps, 10) + min_Jumps(steps, 9) + min_Jumps(steps, 8) + min_Jumps(steps, 7) + min_Jumps(steps, 6) + min_Jumps(steps, 5) + min_Jumps(steps, 4) + min_Jumps(steps, 3) + min_Jumps(steps, 2) + min_Jumps(steps, 1) + min_Jumps(steps, 0)\n    if d == 15: return steps + min_Jumps(steps, 14) + min_Jumps(steps, 13) + min_Jumps(steps, 12) + min_Jumps(steps, 11) + min_Jumps(steps, 10) + min_Jumps(steps, 9) + min_Jumps(steps, 8) + min_Jumps(steps, 7) + min_Jumps(steps, 6) + min_Jumps(steps, 5) + min_Jumps(steps, 4) + min_Jumps(steps, 3) + min_Jumps(steps, 2) + min_Jumps(steps, 1) + min_Jumps(steps, 0)\n    if d == 16: return steps + min_Jumps(steps, 15) + min_Jumps(steps, 14) + min_Jumps(steps, 13) + min_Jumps(steps, 12) + min_Jumps(steps, 11) + min_Jumps(steps, 10) + min_Jumps(steps, 9) + min_Jumps(steps, 8) + min_Jumps(steps, 7) + min_Jumps(steps, 6) + min_Jumps(steps, 5) + min_Jumps(steps, 4) + min_Jumps(steps, 3) + min_Jumps(steps, 2) + min_Jumps(steps, 1) + min_Jumps(steps, 0)\n    if d == 17: return steps + min_Jumps(steps, 16) + min_Jumps(steps, 15) + min_Jumps(steps, 14) + min_Jumps(steps, 13) + min_Jumps(steps, 12) + min_Jumps(steps, 11) + min_Jumps(steps, 10) + min_Jumps(steps, 9) + min_Jumps(steps, 8) + min_Jumps(steps, 7) + min_Jumps(steps, 6) + min_Jumps(steps, 5) + min_Jumps(steps, 4) + min_Jumps(steps, 3) + min_Jumps(steps, 2) + min_Jumps(steps, 1) + min_Jumps(steps, 0)\n    if d == 18: return steps + min_Jumps(steps, 17) + min_Jumps(steps, 16) + min_Jumps(steps, 15) + min_Jumps(steps, 14) + min_Jumps(steps, 13) + min_Jumps(steps, 12) + min_Jumps(steps, 11) + min_Jumps(steps, 10) + min_Jumps(steps, 9) + min_Jumps(steps, 8) + min_Jumps(steps, 7) + min_Jumps(steps, 6) + min_Jumps(steps, 5) + min_Jumps(steps, 4) + min_Jumps(steps, 3) + min_Jumps(steps, 2) + min_Jumps(steps, 1) + min_Jumps(steps, 0)\n    if d == 19: return steps + min_Jumps(steps, 18) + min_Jumps(steps, 17) + min_Jumps(steps, 16) + min_Jumps(steps, 15) + min_Jumps(steps, 14) + min_Jumps(steps, 13) + min_Jumps(steps, 12) + min_Jumps(steps, 11) + min_Jumps(steps, 10) + min_Jumps(steps, 9) + min_Jumps(steps, 8) + min_"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    n = len(steps)\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    print \"Number of jumps required to reach a point of form (d, 0) from origin in a 2d plane is \", min_Jumps_recur(steps, d)\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0: return 0\n    if steps == 1: return 1\n    if d == 0: return 1\n    if d == 1: return 0\n    if d < 0: return -1\n    \n    if (steps, d) in memo: return memo[(steps, d)]\n    \n    count = min_Jumps(steps-1, d-1)\n    if (steps, d-1) in memo:\n        count2 = memo[(steps, d-1)]\n        memo[(steps, d)] = min(count, count2)\n    else:\n        memo[(steps, d-1)] = min_Jumps(steps-1, d-1)\n        memo[(steps, d)] = count + 1\n    return memo[(steps, d)]\n    \n    \nmemo = {}\nprint min_Jumps(steps, d"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    n = len(steps)\n    min_jumps = [float('inf')]*(n+1)\n    min_jumps[0] = 0\n    for i in range(n):\n        for j in range(1, d+1):\n            if i-j >= 0 and steps[i-j]!=0:\n                min_jumps[i+1] = min(min_jumps[i+1], min_jumps[i-j]+1)\n    return min_jumps[n]\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    m = len(steps)\n    if m < 2: return 0\n    steps = sorted(steps)\n    paths = [0] * m\n    paths[0] = steps[0]\n    for i in range(1, m):\n        if steps[i] <= d: \n            paths[i] = paths[i-1] + 1\n        else:\n            j = i - 2\n            while j >= 0 and steps[i] > d - steps[j]: j -= 1\n            if j < 0: paths[i] = steps[i] + 1\n            else: \n                k = i - 1\n                while steps[k] < d: k -= 1\n                paths[i] = min(paths[i], steps[k] + 1 + min_Jumps(steps[:k+1], d - steps[k]))\n    return paths[m - 1]\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    cache = {}\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 1: return 0\n    if steps == 2: return int(d == 1)\n    \n    f = [0]*(steps+1)\n    f[1] = f[2] = float('inf')\n    for i in range(3, steps+1):\n        f[i] = min(f[i-1], f[i-2])+1\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    res = []\n    for i in range(len(nums1)):\n        res.append(nums1[i]/nums2[i])\n    return res\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Error\"\n    else:\n        res = []\n        for i in range(len(nums1)):\n            res.append(nums1[i]/nums2[i])\n        return res\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return map(operator.div, nums1, nums2)\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) == 0:\n        return nums2\n    if len(nums2) == 0:\n        return nums1\n    \n    l = []\n    for i in nums1:\n        l.append(i / nums2[0])\n    return l\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    \n    result = []\n    for i,j in zip(nums1,nums2):\n        result.append(i/j)\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = [0]*len(nums1)\n    for i in range(len(nums1)):\n        if (nums1[i]==0) and (nums2[i]==0):\n            result[i]=0\n        elif nums1[i]==0:\n            result[i]=0\n        else:\n            result[i] = nums2[i]/nums1[i]\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    assert(len(nums1) == len(nums2))\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if len(test_str) == 0:\n        return''\n    else:\n        num_str = re.findall('[0-9]+', test_str)\n        return ''.join(sorted(num_str, key=int)) + test_str[0:len(test_str)-len(num_str)]\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    all_nums = re.findall('\\d+', test_str)\n    for num in all_nums:\n        test_str = test_str.replace(num, '', 1)\n    return test_str + ''.join(all_nums)\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num = '0123456789'\n    #test_str = '0795117775249615113008105135511331341'\n    test_list = list(test_str)\n    for char in test_list:\n        if char in num:\n            #print char\n            test_list.remove(char)\n            test_list.append(char)\n    return ''.join(test_list)\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join([i for i in test_str if not i.isdigit()]) + ''.join([i for i in test_str if i.isdigit()])\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    move_nums = re.findall(r\"\\d+\", test_str)\n    return \"\".join(move_nums + re.sub(r\"\\d+\", \"\", test_str))\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if not test_str:\n        return test_str\n    res = []\n    for each in test_str:\n        if each.isdigit():\n            res.append(each)\n    return ''.join(res) + ''.join(sorted(list(set(test_str) - set(res))))\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if test_str is None:\n        return \"\"\n    test_str = str(test_str)\n    l_num = [s for s in test_str if s.isdigit()]\n    result = test_str\n    for s in l_num:\n        result = result.replace(s, \"\")\n    result = result + \"\".join(l_num)\n    return result\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    res = []\n    for c in test_str:\n        if c.isdigit():\n            res.append(c)\n    res.extend(re.findall('\\d', test_str))\n    return ''.join(res)\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if test_str == '':\n        return ''\n    result = ''\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            result += test_str[i]\n    return result + ''.join(sorted(test_str[len(test_str):]))\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = [int(num) for num in re.findall('\\d+', test_str)]\n    for num in nums:\n        test_str = test_str.replace(str(num), '', 1)\n    return test_str + ''.join(str(num) for num in nums)\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) < 2:\n        return a\n    a.sort()\n    n = len(a)\n    dp = [0]*n\n    dp[0] = 1\n    if a[0]%2==0:\n        dp[1] = 2\n    for i in xrange(2,n):\n        if a[i]%2 == 0:\n            dp[i] = dp[i-1] + 1\n    return max(dp)\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    from collections import defaultdict\n    divisible_pairs = defaultdict(int)\n    for x in a:\n        divisible_pairs[x] += 1\n    s = set(divisible_pairs.keys())\n    ans = 0\n    for x in divisible_pairs:\n        ans += divisible_pairs[x] * (divisible_pairs[x] - 1) // 2\n    return ans\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_length = 0\n    for i in xrange(len(a)):\n        for j in xrange(i+1,len(a)):\n            if a[i] % a[j] == 0:\n                if max_length < j - i:\n                    max_length = j - i\n    return max_length\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 0:\n        return 0\n    elif len(a) == 1:\n        return a[0]\n    else:\n        big = largest_subset(a[1:])\n        if a[0] % big == 0:\n            return big\n        else:\n            return largest_subset(a[1:])\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def L(a, n):\n        # Construct a list of the size n + 1 to store the L-sums\n        L_sums = [0] * (n + 1)\n        # Set the 0-th entry to be 1 (this is the L(1, n) = 0 case)\n        L_sums[0] = 1\n        # Iterate backwards\n        for i in range(n - 1, -1, -1):\n            # Add 1 to the running sum of the list of L-sums\n            L_sums[i] = L_sums[i + 1] + 1\n            # Iterate backwards over the L-sums list\n            for j in range(i, -1, -1):\n                # If the ith element is divisible by the jth element (i.e., the jth element is also divisible by the ith element)\n                if a[i] % a[j] == 0:\n                    # Update the running sum of the list of L-sums\n                    L_sums[j] = max(L_sums[j], L_sums[i] + 1)\n        return L_sums[0]\n    # Find the size of the largest subset (largest length) of a list of numbers such that every pair is divisible\n    m = 0\n    n = len(a)\n    for i in range(n):\n        L_sums = L(a, n - 1)\n        if L_sums > m:\n            m = L_sums\n    # Return the size of the largest subset\n    return m\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    sizes = [0]*len(a)\n    max_val = 0\n    result = 0\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    max_len = 1\n    for i in range(1, n):\n        if a[i-1] < a[i] or a[i-1] % a[i] == 0:\n            if i-1 == 0 or a[i-2] < a[i] or a[i-2] % a[i] == 0:\n                l = [a[i-1]]\n                for j in range(i, n):\n                    if a[j] % a[i] == 0:\n                        l.append(a[j])\n                if len(l) > max_len:\n                    max_len = len(l)\n                    max_set = l\n    return max_len, max_set\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [0 for i in range(n)]\n    for i in range(n):\n        dp[i] = 1\n        for j in range(i):\n            if a[j] % a[i] == 0 and dp[j] + 1 > dp[i]:\n                dp[i] = dp[j] + 1\n    return max(dp)\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 0:\n        return 0\n    else:\n        n = len(a)\n        i = 1\n        while i * i <= n:\n            i += 1\n        k = i - 1\n        i = 0\n        n //= k\n        while i * k < n:\n            i += 1\n        if i * k > n:\n            return i * k\n        else:\n            return n\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) < 2:\n        return len(a)\n    a = sorted(a)\n    div = a[0]\n    output = len(a)\n    for i in range(1,len(a)):\n        if a[i] % div!= 0:\n            div = a[i]\n        else:\n            output = min(output,i+1)\n    return output\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n%2==0:\n        return (arr1[n//2] + arr2[n//2])/2\n    else:\n        return arr1[n//2]\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = n\n    k = n//2\n    while i < j:\n        if arr1[k] > arr2[j]:\n            j -= 1\n        elif arr1[k] < arr2[j]:\n            i += 1\n        else:\n            if n % 2 == 1:\n                return arr1[k]\n            else:\n                return (arr1[k]+arr1[k+1])/2\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    l = arr1 + arr2\n    l.sort()\n    if n%2 == 1:\n        return l[n/2]\n    return sum(l[(n/2)-1: n/2+1])/2.0\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return None\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    median = 0\n    if n % 2 == 0:\n        median = (arr1[n//2] + arr2[n//2])/2\n    else:\n        median = arr1[n//2]\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return min(arr1[0], arr2[0])\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    while True:\n        if i == len(arr1):\n            median = arr2[j]\n            break\n        if j == len(arr2):\n            median = arr1[i]\n            break\n        if arr1[i] < arr2[j]:\n            median = arr1[i]\n            i += 1\n        else:\n            median = arr2[j]\n            j += 1\n    return median\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    median = []\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 0:\n        return None\n    if n % 2 == 0:\n        median.append((arr1[n // 2 - 1] + arr2[n // 2]) / 2)\n        median.append((arr1[n // 2] + arr2[n // 2 - 1]) / 2)\n    else:\n        median.append((arr1[n // 2] + arr2[n // 2]) / 2)\n    return median\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return (arr1[0] + arr2[0])/2\n    else:\n        if n%2 == 1:\n            return get_median((arr1[int(n/2)] + arr1[int(n/2)-1])/2, arr2, n/2)\n        else:\n            return get_median(arr1[int(n/2-1)], arr2[int(n/2):], n/2)\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for x in nums:\n        result.append(x**n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return map(lambda x: x**n, nums)\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [n**x for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums_list = []\n    for num in nums:\n        nums_list.append(num**n)\n    return nums_list\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    \n    for i in range(len(nums)):\n        nums[i] = nums[i]**n\n    \n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums_squared = []\n    for i in nums:\n        nums_squared.append(i ** n)\n    return nums_squared\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if isinstance(string, str):\n        return string.upper()\n    else:\n        return None\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # check if the string is of type string\n    if not isinstance(string,str):\n        return 'not a string'\n    # check if the string is all upper case\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper() == True:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string[0].isupper():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    pass\n    \ndef copy_List(newList):\n    '''\n    Write a python function to copy a list to a new list.\n    '''\n    pass\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    pass\n    \ndef sort_List(newList):\n    '''\n    Write a python function to sort a given list in increasing order.\n    '''\n    pass\n    \ndef sort_List_desc(newList):\n    '''\n    Write a python function to sort a given list in decreasing order.\n    '''\n    pass\n    \ndef change_List(newList,oldList):\n    '''\n    Write a python function to change the third element in a list to a given value.\n    '''\n    pass\n    \ndef remove_List(newList,oldList):\n    '''\n    Write a python function to remove the third element in a list.\n    '''\n    pass\n    \ndef list_unique(newList):\n    '''\n    Write a python function to remove duplicates from a given list.\n    '''\n    pass\n    \ndef find_Min(newList):\n    '''\n    Write a python function to find the minimum value in a given list.\n    '''\n    pass\n    \ndef find_Max(newList):\n    '''\n    Write a python function to find the maximum value in a given list.\n    '''\n    pass\n    \ndef remove_None(newList):\n    '''\n    Write a python function to remove all the values of None from a given list.\n    '''\n    pass\n    \ndef remove_Duplicates(newList):\n    '''\n    Write a python function to remove duplicates from a given list.\n    '''\n    pass\n    \ndef nth_element(newList,n):\n    '''\n    Write a python function to find the nth element in a given list.\n    '''\n    pass\n    \ndef find_all(newList,val):\n    '''\n    Write a python function to find all the elements in a given list that match a given value.\n    '''\n    pass\n    \ndef check_presence(newList,val):\n    '''\n    Write a python function to check whether a given value is present in a given list.\n    '''\n    pass\n    \ndef check_list_duplicates(newList):\n    '''\n    Write a python function to check whether a given list has any duplicate elements.\n    '''\n    pass\n    \ndef nth_item(newList,n):\n    '''\n    Write a python function to find the nth item in a given list.\n    '''\n    pass\n    \ndef nth_item_del(newList,n):\n    '''\n    Write a python function to delete the nth item in a given list.\n    '''\n    pass\n    \ndef insert_item(newList,n,val):\n    '''\n    Write a python function to insert a given value in a given list at a given index.\n    '''\n    pass\n    \ndef append_item(newList,val):\n    '''\n    Write a python function to append a given value in a given list.\n    '''\n    pass\n    \ndef sort_List(newList,rev=False):\n    '''\n    Write a python function to sort a given list in increasing order.\n    '''\n    pass\n    \ndef sort_List_desc(newList,rev=False):\n    '''\n    Write a python function to sort a given list in decreasing order.\n    '''\n    pass\n    \ndef median(newList):\n    '''\n    Write a python function to find the median in a given list.\n    '''\n    pass\n    \ndef mean(newList):\n    '''\n    Write a python function to find the mean in a given list.\n    '''\n    pass\n    \ndef list_clone(newList):\n    '''\n    Write a python function to clone a given list.\n    '''\n    pass\n    \ndef map_List(newList,f):\n    '''\n    Write a python function to map a given function to each element in a given list.\n    '''\n    pass\n    \ndef reduce_List(newList,f):\n    '''\n    Write a python function to reduce a given list to a single element by applying a given function to all the elements of a given list.\n    '''\n    pass\n    \ndef take_List(newList,n):\n    '''\n    Write a python function to take the first n elements of a given list.\n    '''\n    pass\n    \ndef drop_List(newList,n):\n    '''\n    Write a python function to drop the last n elements of a given list.\n    '''\n    pass\n    \ndef run_tests(test):\n    if(test==\"len_List\"):\n        print len_List([1,2,3,4])\n        print len_List([1,2,3,4,5,6])\n        print len_List([1,2,3,4,5,6,7,8,9])\n        print len_List([1,2,3,4,5,6,7,8,9,10,11,12])\n        print len_List([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n        print len_List([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50])\n        print len_List([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99])\n        print len_List([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n    elif(test==\"copy_List\"):\n        print copy_List([1,2,3,4])\n        print copy_List([1,2,3,4,5,6])\n        print copy_List([1,2,3,4,5,6,7,8,9])\n        print copy_List([1,2,3,4,5,6,7,8,9,10,11,12])\n        print copy_List([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n        print copy_List([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[len(newList)-1] = newList[len(newList)-1],newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) == 0:\n        return None\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    length = len(newList)\n    temp = newList[0]\n    newList[0] = newList[length - 1]\n    newList[length - 1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    return newList[-1:] + newList[1:-1] + newList[:1]\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n    \ndef merge_List(newList):\n    '''\n    Write a python function to merge two sorted lists.\n    '''\n    if len(newList) == 0:\n        return newList\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    newList = newList[:-1]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) == 0:\n        return None\n    elif len(newList) == 1:\n        return newList\n    else:\n        return newList[-1] + newList[1:-1] + newList[:1]\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n    \ndef delete_List(newList):\n    '''\n    Write a python function to delete the last item in a list.\n    '''\n    del newList[-1]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList)\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    return newList\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    return (3 * r**2)**0.5 / 4\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area = math.pi*(r**2)/4\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return r*r*3**0.5/4\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return 0.25 * (r * r)\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return math.pi*(r*r)/4\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area_of_triangle(l, b) :\n        '''\n        Write a python function to find the area of a triangle given the length and breadth of the triangle.\n        '''\n        def s(l, b) :\n            '''\n            Write a python function to find the area of the square with sides of length l and breadth b.\n            '''\n            return (l * b) / 2\n        return s(l, b) / sqrt(3)\n    \n    def largest_triangle_area(r) :\n        '''\n        Write a python function to find the largest area of a triangle with a given radius.\n        '''\n        b = 2 * r\n        l = sqrt(b ** 2 - r ** 2)\n        return area_of_triangle(l, b)\n    \n    return largest_triangle_area(r)\n    "
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area=3*r*r/2\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import sqrt\n    return (sqrt(3)/4)*r*r\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (3.14*r**2)/4\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (3**(0.5)/2)*(r**2)\nprint(triangle_area(r))"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if end<start:\n        return None\n    if start==end:\n        return start+1\n    mid=start+(end-start)/2\n    if array[mid]==mid:\n        return find_First_Missing(array,start=start,end=mid-1)\n    else:\n        return find_First_Missing(array,start=mid+1,end=end)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if end-start > 1:\n        middle = int((end+start)/2)\n        if array[middle]!= middle:\n            if array[middle] < middle:\n                return find_First_Missing(array,middle,end)\n            else:\n                return find_First_Missing(array,start,middle)\n    return array[start]\n    \nprint(find_First_Missing([0,1,2,3,5,6,8,9,10,12,14,15,16,18,19]))\nprint(find_First_Missing([0,1,2,3,5,6,8,9,10,12,14,15,16,18,19,30]))\nprint(find_First_Missing([1,2,4,5,6,8,9,10,12,14,15,16,18,19]))\nprint(find_First_Missing([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]))\nprint(find_First_Missing([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]))\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if end-start<1:\n        return -1\n    if end-start==1:\n        if array[start]==start+1:\n            return start+1\n        else:\n            return array[start]\n    elif end-start==2:\n        if array[start]==start+2:\n            return start+2\n        elif array[start]==start+1:\n            return start+1\n        else:\n            return start\n    else:\n        pivot=int((start+end)/2)\n        if array[pivot]==pivot+1:\n            return find_First_Missing(array,start,pivot)\n        elif array[pivot]==pivot+2:\n            return find_First_Missing(array,pivot,end)\n        else:\n            return find_First_Missing(array,pivot+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not end:\n        end = len(array)\n    if start>end:\n        return None\n    if start==end:\n        return start+1\n    mid = (start+end)/2\n    if array[mid]==mid:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid)\n    return None\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start == end:\n        return 1\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if end-start<=1:\n        if array[start]==start+1:\n            return start+1\n        else:\n            return start+2\n    mid=(start+end)/2\n    if array[mid]==mid+1:\n        return find_First_Missing(array,mid,end)\n    else:\n        return find_First_Missing(array,start,mid)\n    \n    \n    \n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not array:\n        return 1\n    if not end:\n        end = len(array)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)\n    if start<end:\n        mid=(start+end)//2\n        if mid+1==array[mid]:\n            return find_First_Missing(array,mid+1,end)\n        else:\n            return array[mid]+1\n    else:\n        return array[0]+1\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start == end:\n        return start\n    mid = (start+end)//2\n    if array[mid] - array[start] > 1:\n        return find_First_Missing(array, start, mid)\n    else:\n        return find_First_Missing(array, mid, end)\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return ''.join(string.split(' '))\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return '%20'.join(string.split(' '))\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ', '%20')\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return '%20'.join(string.split(' '))\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return ''.join(string.split(' '))\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [x for x in list if x%2 == 0]\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for num in list:\n        if num % 2 == 0:\n            even.append(num)\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for number in list:\n        if number % 2 == 0:\n            evens.append(number)\n    return evens\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [x for x in list if x % 2 == 0]\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list1 = []\n    list2 = []\n    for i in list:\n        if i % 2 == 0:\n            list1.append(i)\n        else:\n            list2.append(i)\n    return list1, list2\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    \n    # Write your code here\n    list = [4, 2, 5, 8, 7, 3, 9, 10, 2, 10, 6, 4]\n    even = [x for x in list if x % 2 == 0]\n    print(even)\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    Evens = []\n    Odds = []\n    for item in list:\n        if item%2 == 0:\n            Evens.append(item)\n        else:\n            Odds.append(item)\n    return Evens, Odds\n    \ndef Sum_of_all_elements(list):\n    '''\n    Write a python function to find the sum of all elements of a list of numbers.\n    '''\n    sum = 0\n    for item in list:\n        sum = sum + item\n    return sum\n    \ndef Average(list):\n    '''\n    Write a python function to find the average of all elements of a list of numbers.\n    '''\n    return Sum_of_all_elements(list)/len(list)\n    \ndef Evens_Sum(list):\n    '''\n    Write a python function to find the sum of even numbers from a list of numbers.\n    '''\n    sum = 0\n    for item in list:\n        if item%2 == 0:\n            sum = sum + item\n    return sum\n    \ndef Odds_sum(list):\n    '''\n    Write a python function to find the sum of odd numbers from a list of numbers.\n    '''\n    sum = 0\n    for item in list:\n        if item%2!= 0:\n            sum = sum + item\n    return sum\n    \ndef Print_List(list):\n    '''\n    Write a python function to print a list of numbers.\n    '''\n    for item in list:\n        print item,\n    print \n    \ndef Sort_List(list):\n    '''\n    Write a python function to print a list of numbers.\n    '''\n    list.sort()\n    for item in list:\n        print item,\n    print \n    \ndef Max_of_all_elements(list):\n    '''\n    Write a python function to find the maximum value from a list of numbers.\n    '''\n    max = 0\n    for item in list:\n        if item > max:\n            max = item\n    return max\n    \ndef Min_of_all_elements(list):\n    '''\n    Write a python function to find the minimum value from a list of numbers.\n    '''\n    min = list[0]\n    for item in list:\n        if item < min:\n            min = item\n    return min\n    \ndef Print_Lists(list1, list2):\n    '''\n    Write a python function to print two lists of numbers.\n    '''\n    for item in list1:\n        print item,\n    print\n    for item in list2:\n        print item,\n    print\n    \ndef Swap(list1, list2):\n    '''\n    Write a python function to swap two lists of numbers.\n    '''\n    list1[:], list2[:] = list2[:], list1[:]\n    return list1, list2\n    \ndef Num_of_elements(list):\n    '''\n    Write a python function to print the number of elements in a list.\n    '''\n    return len(list)\n    \ndef First_and_Last_element(list):\n    '''\n    Write a python function to print the first and last element of a list.\n    '''\n    return list[0], list[-1]\n    \ndef Get_Element(list, index):\n    '''\n    Write a python function to print the element at an index position of a list.\n    '''\n    return list[index]\n    \ndef Get_Range(list, start, end):\n    '''\n    Write a python function to print the elements between start and end positions of a list.\n    '''\n    return list[start:end]\n    \ndef Reverse_a_list(list):\n    '''\n    Write a python function to reverse a list of numbers.\n    '''\n    list.reverse()\n    return list\n    \ndef Remove_first_and_last_elements(list):\n    '''\n    Write a python function to remove the first and last element of a list.\n    '''\n    list.pop(0)\n    list.pop(-1)\n    return list\n    \ndef Check_if_all_elements_are_equal(list):\n    '''\n    Write a python function to check if all elements are equal in a list of numbers.\n    '''\n    for item in list:\n        if item!= list[0]:\n            return False\n    return True\n    \ndef Check_if_all_elements_are_equal(list):\n    '''\n    Write a python function to check if all elements are equal in a list of numbers.\n    '''\n    for item in list:\n        if item!= list[0]:\n            return False\n    return True\n    \ndef Get_the_length_of_a_list(list):\n    '''\n    Write a python function to get the length of a list.\n    '''\n    return len(list)\n    \ndef Sort_List(list):\n    '''\n    Write a python function to sort a list of numbers.\n    '''\n    list.sort()\n    return list\n    \ndef Sort_and_Print_list(list):\n    '''\n    Write a python function to sort and print a list of numbers.\n    '''\n    list.sort()\n    for item in list:\n        print item,\n    print\n    \ndef Sort_and_Print_list(list):\n    '''\n    Write a python function to sort and print a list of numbers.\n    '''\n    list.sort()\n    for item in list:\n        print item,\n    print\n    \ndef Sort_and_Print_list(list):\n    '''\n    Write a python function to sort and print a list of numbers.\n    '''\n    list.sort()\n    for item in list:\n        print item,\n    print\n    \ndef Get_the_middle_element(list):\n    '''\n    Write a python function to get the middle element of a list of numbers.\n    '''\n    return list[len(list)/2]\n    \ndef Get_the_middle_element(list):\n    '''\n    Write a python function to get the middle element of a list of numbers.\n    '''\n    return list[len(list)/2]\n    \ndef Sort_and_Get_the_middle_element(list):\n    '''\n    Write a python function to sort a list of numbers and get the middle element.\n    '''\n    list.sort()\n    return list[len(list)/2]\n    \ndef Reverse_a_list(list):\n    '''\n    Write a python function to reverse a list of numbers.\n    '''\n    list[:], list[:] = list[:], list[:]\n    return list\n    \ndef Remove_a_list_item(list, item):\n    '''\n    Write a python function to remove an item from a list.\n    '''\n    list.remove(item)\n    return list\n    \ndef Remove_a_list_item(list, item):\n    '''\n    Write a python function to remove an item from a list.\n    '''\n    list.remove(item)\n    return list\n    \ndef Remove_a_list_item(list, item):\n    '''\n    Write a python function to remove an item from a list.\n    '''\n    list.remove(item)\n    return list\n    \ndef Remove_a_list_item(list, item):\n    '''\n    Write a python function to remove an item from a list.\n    '''\n    list.remove(item)\n    return list\n    \ndef Count_occurrences_of_an_item(list, item):\n    '''\n    Write a python function to count the number of occurrences of an item in a list.\n    '''\n    return list.count(item)\n    \ndef Remove_all_occurrences_of_an_item(list, item):\n    '''\n    Write a python function to remove all occurrences of an item in a list.\n    '''\n    while item in list:\n        list.remove(item)\n    return list\n    \ndef Remove_all_occurrences_of_an_item(list, item):\n    '''\n    Write a python function to remove all occurrences of an item in a list.\n    '''\n    while item in list:\n        list.remove(item)\n    return list\n    \ndef Remove_all_occurrences_of_an_item(list, item):\n    '''\n    Write a pytho"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list1 = []\n    list2 = []\n    for x in list:\n        if x % 2 == 0:\n            list1.append(x)\n        else:\n            list2.append(x)\n    return list1, list2\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list1 = []\n    list2 = []\n    for i in list:\n        if i%2 == 0:\n            list1.append(i)\n        else:\n            list2.append(i)\n    print(list1)\n    print(list2)\n    return list1, list2\nSplit([1,2,3,4,5,6,7,8,9])\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    output_list = []\n    for x in list:\n        if x % 2 == 0:\n            output_list.append(x)\n    return output_list\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    try:\n        if ele[0] > 0 and ele[1] > 0:\n            return [tuple([ele[0]-1, ele[1]-1]), tuple([ele[0]-1, ele[1]]), tuple([ele[0]-1, ele[1]+1]), tuple([ele[0], ele[1]-1]), ele, tuple([ele[0], ele[1]+1]), tuple([ele[0]+1, ele[1]-1]), tuple([ele[0]+1, ele[1]]), tuple([ele[0]+1, ele[1]+1])]\n        elif ele[0] > 0:\n            return [tuple([ele[0]-1, ele[1]-1]), tuple([ele[0]-1, ele[1]]), tuple([ele[0]-1, ele[1]+1]), ele, tuple([ele[0], ele[1]-1]), tuple([ele[0], ele[1]+1]), tuple([ele[0]+1, ele[1]-1]), tuple([ele[0]+1, ele[1]]), tuple([ele[0]+1, ele[1]+1])]\n        elif ele[1] > 0:\n            return [tuple([ele[0]-1, ele[1]-1]), tuple([ele[0], ele[1]-1]), tuple([ele[0]+1, ele[1]-1]), ele, tuple([ele[0]-1, ele[1]]), tuple([ele[0], ele[1]+1]), tuple([ele[0]+1, ele[1]]), tuple([ele[0]-1, ele[1]+1]), tuple([ele[0], ele[1]+1]), tuple([ele[0]+1, ele[1]+1])]\n        else:\n            return [tuple([ele[0]-1, ele[1]-1]), tuple([ele[0]-1, ele[1]]), tuple([ele[0]-1, ele[1]+1]), ele, tuple([ele[0], ele[1]-1]), tuple([ele[0], ele[1]+1]), tuple([ele[0]+1, ele[1]-1]), tuple([ele[0]+1, ele[1]]), tuple([ele[0]+1, ele[1]+1])]\n    except IndexError:\n        return sub\n    \ndef index(l, ele): \n    '''\n    Write a function to return the index of the first occurrence of an element in an ordered list. \n    '''\n    try:\n        return l.index(ele)\n    except ValueError:\n        return -1\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    lst = [(ele[0], ele[1] - 1), (ele[0], ele[1] + 1), (ele[0] - 1, ele[1]), (ele[0] + 1, ele[1])]\n    return lst\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    i, j = ele\n    d = [(i+1,j),(i-1,j),(i,j+1),(i,j-1)]\n    for k in d:\n        if k not in sub:\n            sub.append(k)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(ele) == 2:\n        return [ (ele[0], ele[1]+1), (ele[0], ele[1]-1), (ele[0]+1, ele[1]), (ele[0]-1, ele[1]) ]\n    return [ tuple(sorted(sub + (adjacent(e),))) for adjacent(e) in adjac(ele[:2], sub) ]\n    \ndef diag(ele, sub = []):\n    '''\n    Write a function to extract all the diagonal coordinates of the given coordinate tuple.\n    '''\n    if len(ele) == 2:\n        return [ (ele[0]+1, ele[1]+1), (ele[0]-1, ele[1]+1), (ele[0]-1, ele[1]-1), (ele[0]+1, ele[1]-1) ]\n    return [ tuple(sorted(sub + (diagonal(e),))) for diagonal(e) in diag(ele[:2], sub) ]\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [\n        (ele[0]-1, ele[1]-1), (ele[0]-1, ele[1]), (ele[0]-1, ele[1]+1),\n        (ele[0], ele[1]-1), (ele[0], ele[1]), (ele[0], ele[1]+1),\n        (ele[0]+1, ele[1]-1), (ele[0]+1, ele[1]), (ele[0]+1, ele[1]+1)\n    ]\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    for i in range(-1,2):\n        for j in range(-1,2):\n            if (ele[0]+i, ele[1]+j) in sub:\n                continue\n            if (abs(i) + abs(j)) == 1:\n                adj.append((ele[0]+i, ele[1]+j))\n    return adj\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub.append(ele)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    global adj\n    global sub\n    if len(sub) == 0:\n        sub = ele\n    else:\n        for i in range(len(sub)):\n            if (sub[i][0] == ele[0] and sub[i][1] == ele[1] - 1) or (sub[i][0] == ele[0] - 1 and sub[i][1] == ele[1]):\n                adj.append(sub[i])\n            if (sub[i][0] == ele[0] and sub[i][1] == ele[1] + 1) or (sub[i][0] == ele[0] + 1 and sub[i][1] == ele[1]):\n                adj.append(sub[i])\n            if (sub[i][0] == ele[0] and sub[i][1] == ele[1]) or (sub[i][0] == ele[0] - 1 and sub[i][1] == ele[1]) or (sub[i][0] == ele[0] + 1 and sub[i][1] == ele[1]) or (sub[i][0] == ele[0] and sub[i][1] == ele[1] - 1) or (sub[i][0] == ele[0] and sub[i][1] == ele[1] + 1):\n                adj.append(sub[i])\n    return adj\ndef adjac2(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    global adj\n    global sub\n    if len(sub) == 0:\n        sub = ele\n    else:\n        for i in range(len(sub)):\n            if (sub[i][0] == ele[0] and sub[i][1] == ele[1] - 1) or (sub[i][0] == ele[0] - 1 and sub[i][1] == ele[1]) or (sub[i][0] == ele[0] + 1 and sub[i][1] == ele[1]):\n                adj.append(sub[i])\n            if (sub[i][0] == ele[0] and sub[i][1] == ele[1] + 1) or (sub[i][0] == ele[0] - 1 and sub[i][1] == ele[1]) or (sub[i][0] == ele[0] + 1 and sub[i][1] == ele[1]):\n                adj.append(sub[i])\n            if (sub[i][0] == ele[0] and sub[i][1] == ele[1]) or (sub[i][0] == ele[0] - 1 and sub[i][1] == ele[1]) or (sub[i][0] == ele[0] + 1 and sub[i][1] == ele[1]) or (sub[i][0] == ele[0] and sub[i][1] == ele[1] - 1) or (sub[i][0] == ele[0] and sub[i][1] == ele[1] + 1):\n                adj.append(sub[i])\n    return adj\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x,y = ele\n    return [(x+1,y),(x-1,y),(x,y+1),(x,y-1)]\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [(ele[0]+x[0],ele[1]+x[1]) for x in sub]\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return ''.join(text.split(' '))\n    \nprint replace_spaces('Hello world')\nprint replace_spaces('    Hello world    ')\nprint replace_spaces('Hell   o w   rld')\nprint replace_spaces('Hello_World'"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    n = len(text)\n    s = ''\n    for i in range(n):\n        if text[i] =='':\n            s += '_'\n        else:\n            s += text[i]\n    return s\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    text = text.replace(' ', '_')\n    text = text.replace('_','')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = text.replace(' ','_')\n    result = result.replace('_','')\n    return result\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.split()\n    text = '_'.join(text)\n    text = text.replace('_','')\n    text = text.replace(' ', '_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('_','')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = ''\n    for c in text:\n        if c =='':\n            result += '_'\n        elif c == '_':\n            result +=''\n        else:\n            result += c\n    return result\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('_','')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if text is None or not text:\n        return None\n    \n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    return num_list.sort(reverse=True)\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.append(num_list[i])\n            num_list.pop(i)\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_idx = []\n    for i in xrange(len(num_list)):\n        if num_list[i] == 0:\n            zero_idx.append(i)\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    sorted_list = sorted(num_list)\n    # sorted_list = sorted(num_list, key=lambda x: x!= 0)\n    \n    return sorted_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in num_list:\n        if i!= 0:\n            num_list[count] = i\n            count += 1\n    while count < len(num_list):\n        num_list[count] = 0\n        count += 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Your Code Here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if not isinstance(num_list, list):\n        return False\n    if not num_list:\n        return False\n    else:\n        return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if num_list == []:\n        return []\n    zero_index = 0\n    index = 0\n    for i in xrange(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[index] = num_list[i]\n            index += 1\n        else:\n            zero_index = i\n            break\n    for i in xrange(zero_index, len(num_list)):\n        num_list[i] = 0\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    l = len(num_list)\n    while i < l:\n        if num_list[i] == 0:\n            del num_list[i]\n            num_list.append(0)\n        i+=1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.append(num_list.pop(i))\n    return num_list\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    #base case \n    if(n==0) : \n        return 0\n    elif(n==1) : \n        return arr[0]\n    else : \n        return arr[n-1]^pair_xor_Sum(arr,n-1)\n    \n    \nif __name__=='__main__' : \n    arr=[1,2,3,4]\n    n=len(arr)\n    print pair_xor_Sum(arr,n)\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    '''\n    @params arr : The list of numbers to be evaluated\n    @return sum : The sum of xor of all pairs of numbers\n    '''\n    arr.sort()\n    res = 0\n    for i in range(len(arr)) :\n        res += arr[i] ^ arr[i + 1]\n    return res\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    return reduce(lambda x,y:x^y,arr)\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    x = 0\n    for i in range(0,n-1):\n        x ^= arr[i]\n    for i in range(n-1,0,-1):\n        x ^= arr[i]\n    return x\n    \ndef pair_xor_add(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    x = 0\n    for i in range(0,n-1):\n        x ^= arr[i]\n    for i in range(n-1,0,-1):\n        x ^= arr[i]\n    return x\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if len(arr)%2!= 0 : \n        return arr[0]\n    else : \n        return arr[0] + arr[1]\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    return sum([arr[i] ^ arr[j] for i in range(n) for j in range(i+1,n)]) \n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in xrange(len(arr)):\n        for j in xrange(i+1,len(arr)):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]^arr[j] == 0 :\n                return 0\n    return 1\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n==1:\n        return arr[0]\n    else:\n        return arr[0]^pair_xor_Sum(arr[1:],n-1)\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    sorted_list = []\n    hq.heapify(sorted_list)\n    for element in iterable:\n        hq.heappush(sorted_list, element)\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(len(iterable)-1,-1,-1):\n        for j in range(i,len(iterable)):\n            if iterable[i] > iterable[j]:\n                iterable[i],iterable[j] = iterable[j],iterable[i]\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h,i)\n    return [hq.heappop(h) for _ in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if iterable:\n        # Make sure it's a list\n        if type(iterable)!= list:\n            iterable = list(iterable)\n        # A heap\n        heap = iterable[:]\n        hq.heapify(heap)\n        for i in range(len(iterable)):\n            iterable[i] = hq.heappop(heap)\n        return iterable\n    else:\n        return []\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return [hq.heappop(iterable) for _ in xrange(len(iterable))]\ndef heapify(iterable, index, heap_type='max'):\n    '''\n    Create a max- or min- heap from the given list\n    '''\n    if heap_type =='min':\n        hq.heapify(iterable, index, min)\n    else:\n        hq.heapify(iterable, index, max)\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def heap_sort_helper(iterable, heap_type):\n        if len(iterable) == 0:\n            return []\n        heap = []\n        for i in range(len(iterable)):\n            if heap_type =='min':\n                hq.heappush(heap, (iterable[i], iterable[i]))\n            else:\n                hq.heappush(heap, (-iterable[i], iterable[i]))\n        sorted_list = []\n        while len(heap) > 0:\n            sorted_list.append(hq.heappop(heap)[1])\n        return sorted_list\n    if type(iterable) is str:\n        return 'Please input a list'\n    if type(iterable) is not list:\n        return 'Please input a list'\n    return heap_sort_helper(iterable,'min')\ndef bubble_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable) == 0:\n        return []\n    if type(iterable) is not list:\n        return 'Please input a list'\n    for i in range(len(iterable)):\n        for j in range(i, len(iterable)):\n            if iterable[i] > iterable[j]:\n                iterable[i], iterable[j] = iterable[j], iterable[i]\n    return iterable\ndef insertion_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable) == 0:\n        return []\n    if type(iterable) is not list:\n        return 'Please input a list'\n    for i in range(1, len(iterable)):\n        j = i\n        while j > 0:\n            if iterable[j] < iterable[j-1]:\n                iterable[j], iterable[j-1] = iterable[j-1], iterable[j]\n                j = j - 1\n            else:\n                break\n    return iterable\ndef shell_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable) == 0:\n        return []\n    if type(iterable) is not list:\n        return 'Please input a list'\n    def shell_sort_helper(iterable, d):\n        if len(iterable) < 2:\n            return iterable\n        h = len(iterable) // d\n        while h > 0:\n            for i in range(h, len(iterable)):\n                temp = iterable[i]\n                j = i\n                while j >= h and iterable[j-h] > temp:\n                    iterable[j] = iterable[j-h]\n                    j -= h\n                iterable[j] = temp\n            h //= 2\n        return iterable\n    if type(iterable) is str:\n        return 'Please input a list'\n    if type(iterable) is not list:\n        return 'Please input a list'\n    d = len(iterable) // 2\n    while d > 0:\n        iterable = shell_sort_helper(iterable, d)\n        d //= 2\n    return iterable\ndef selection_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable) == 0:\n        return []\n    if type(iterable) is not list:\n        return 'Please input a list'\n    for i in range(len(iterable)):\n        min_index = i\n        for j in range(i+1, len(iterable)):\n            if iterable[j] < iterable[min_index]:\n                min_index = j\n        iterable[i], iterable[min_index] = iterable[min_index], iterable[i]\n    return iterable\ndef merge_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable) == 0:\n        return []\n    if type(iterable) is not list:\n        return 'Please input a list'\n    def merge_sort_helper(iterable, left, right):\n        if left == right:\n            return [iterable[left]]\n        else:\n            mid = (left + right) // 2\n            left_list = merge_sort_helper(iterable, left, mid)\n            right_list = merge_sort_helper(iterable, mid + 1, right)\n            return left_list + right_list\n    return merge_sort_helper(iterable, 0, len(iterable) - 1)\ndef quick_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable) == 0:\n        return []\n    if type(iterable) is not list:\n        return 'Please input a list'\n    def partition(iterable, left, right):\n        pivot = iterable[left]\n        i = left + 1\n        j = right\n        while i <= j:\n            while iterable[i] < pivot and i <= j:\n                i += 1\n            while iterable[j] > pivot and i <= j:\n                j -= 1\n            if i <= j:\n                iterable[i], iterable[j] = iterable[j], iterable[i]\n                i += 1\n                j -= 1\n        iterable[left], iterable[j] = iterable[j], iterable[left]\n        return j\n    def quick_sort_helper(iterable, left, right):\n        if left >= right:\n            return\n        mid = partition(iterable, left, right)\n        quick_sort_helper(iterable, left, mid-1)\n        quick_sort_helper(iterable, mid+1, right)\n    quick_sort_helper(iterable, 0, len(iterable)-1)\n    return iterable\ndef heap_sort_2(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable) == 0:\n        return []\n    if type(iterable) is not list:\n        return 'Please input a list'\n    def heap_sort_helper(iterable):\n        if len(iterable) == 0:\n            return []\n        heap = []\n        for i in range(len(iterable)):\n            heap.append((iterable[i], i))\n        sorted_list = []\n        while len(heap) > 0:\n            sorted_list.append(heap[0][0])\n            hq.heappop(heap)\n        return sorted_list\n    return heap_sort_helper(iterable)\ndef heap_sort_3(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable) == 0:\n        return []\n    if type(iterable) is not list:\n        return 'Please input a list'\n    def heap_sort_helper(iterable):\n        if len(iterable) == 0:\n            return []\n        heap = []\n        for i in range(len(iterable)):\n            heap.append((iterable[i], i))\n        sorted_list = []\n        while len(heap) > 0:\n            sorted_list.append(heap[0][0])\n            hq.heappop(heap)\n            if len(heap) > 0:\n                hq.heappush(heap, (heap[0][0], heap[0][1]))\n        return sorted_list\n    return heap_sort_helper(iterable)\ndef heap_sort_4(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable) == 0:\n        return []\n    if type(iterable) is not list:\n        return 'Please input a list'\n    def heap_sort_helper(iterable):\n        if len(iterable) == 0:\n            return []\n        heap = []\n        for i in range(len(iterable)):\n            heap.append((iterable[i], i))\n        sorted_list = []\n        while len(heap) "
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h, i)\n    return [hq.heappop(h) for i in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for i in iterable:\n        hq.heappush(heap, i)\n    return [hq.heappop(heap) for _ in iterable]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap=[]\n    for item in iterable:\n        hq.heappush(heap,item)\n    return [hq.heappop(heap) for i in range(len(heap))]\n    \ndef merge_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable)<=1:\n        return iterable\n    mid=len(iterable)//2\n    left=merge_sort(iterable[:mid])\n    right=merge_sort(iterable[mid:])\n    return merge(left,right)\n    \ndef merge(left,right):\n    '''\n    Merge two sorted lists and return a new sorted list.\n    '''\n    res=[0]*(len(left)+len(right))\n    i=0\n    j=0\n    while i<len(left) and j<len(right):\n        if left[i]<=right[j]:\n            res[i+j]=left[i]\n            i+=1\n        else:\n            res[i+j]=right[j]\n            j+=1\n    while i<len(left):\n        res[i+j]=left[i]\n        i+=1\n    while j<len(right):\n        res[i+j]=right[j]\n        j+=1\n    return res\n    \ndef quick_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable)<=1:\n        return iterable\n    pivot=iterable[0]\n    left=[x for x in iterable[1:] if x<pivot]\n    right=[x for x in iterable[1:] if x>=pivot]\n    return quick_sort(left)+[pivot]+quick_sort(right)\n    \ndef radix_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(1,len(str(max(iterable)))+1):\n        d={}\n        for item in iterable:\n            d[item%10**i] = d.get(item%10**i,0) + 1\n        res=[]\n        for j in range(10):\n            if j in d:\n                res+=d[j]*[j]\n        iterable=res\n    return iterable\n    \ndef counting_sort(iterable,digits=10):\n    '''\n    Write a function to sort the given list.\n    '''\n    if digits<=1:\n        return iterable\n    count=[0]*(digits+1)\n    for item in iterable:\n        count[item]+=1\n    res=[0]*len(iterable)\n    for i in range(1,digits+1):\n        count[i]+=count[i-1]\n    for item in iterable:\n        res[count[item]-1]=item\n        count[item]-=1\n    return res\n    \ndef bucket_sort(iterable,n=100):\n    '''\n    Write a function to sort the given list.\n    '''\n    if n<=1:\n        return iterable\n    res=[[] for _ in range(n)]\n    for item in iterable:\n        res[item//n%n].append(item)\n    for i in range(len(res)):\n        res[i]=heap_sort(res[i])\n    return [item for res_item in res for item in res_item]\n    \ndef bit_manipulation(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n=len(iterable)\n    res=[0]*n\n    for i in range(n):\n        res[i]=(1<<i) & iterable[i]\n    for i in range(n-1,0,-1):\n        res[i]+=res[i-1]\n        res[i-1]+=res[i]\n        iterable[i]=res[i]\n    return iterable\n    \ndef bit_manipulation_binary(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n=len(iterable)\n    for i in range(n-1):\n        bit=(1<<i) & iterable[i]\n        bit=bit<<1\n        iterable[i]=bit|iterable[i+1]\n    iterable[n-1]=iterable[0]\n    return iterable\n    \ndef counting_sort_binary(iterable,digits=10):\n    '''\n    Write a function to sort the given list.\n    '''\n    if digits<=1:\n        return iterable\n    count=[0]*(digits+1)\n    for item in iterable:\n        count[item]+=1\n    res=[0]*len(iterable)\n    for i in range(1,digits+1):\n        count[i]+=count[i-1]\n    for item in iterable:\n        res[count[item]-1]=item\n        count[item]-=1\n    return res\n    \ndef bit_manipulation_ternary(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n=len(iterable)\n    res=[0]*n\n    for i in range(n):\n        res[i]=(1<<i) & iterable[i]\n    for i in range(n-1,0,-1):\n        res[i]+=res[i-1]\n        iterable[i]=res[i]\n    return iterable\n    \ndef bit_manipulation_octary(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n=len(iterable)\n    res=[0]*n\n    for i in range(n):\n        res[i]=(1<<i) & iterable[i]\n    for i in range(n-1,0,-1):\n        res[i]+=res[i-1]\n        iterable[i]=res[i]\n    return iterable\n    \ndef bit_manipulation_hexa(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n=len(iterable)\n    res=[0]*n\n    for i in range(n):\n        res[i]=(1<<i) & iterable[i]\n    for i in range(n-1,0,-1):\n        res[i]+=res[i-1]\n        iterable[i]=res[i]\n    return iterable\n    \ndef bit_manipulation_hexadecimal(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n=len(iterable)\n    res=[0]*n\n    for i in range(n):\n        res[i]=(1<<i) & iterable[i]\n    for i in range(n-1,0,-1):\n        res[i]+=res[i-1]\n        iterable[i]=res[i]\n    return iterable\n    \ndef bit_manipulation_left_shift(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n=len(iterable)\n    for i in range(n):\n        iterable[i]=iterable[i]<<1\n    for i in range(n-1):\n        iterable[i]+=iterable[i+1]\n    iterable[n-1]=iterable[0]\n    return iterable\n    \ndef bit_manipulation_right_shift(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n=len(iterable)\n    for i in range(n):\n        iterable[i]=iterable[i]>>1\n    for i in range(n-1):\n        iterable[i]+=iterable[i+1]\n    iterable[n-1]=iterable[0]\n    return iterable\n    \ndef bit_manipulation_3_d(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n=len(iterable)\n    res=[0]*n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == 0 or sale_amount == 0\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost < sale_amount:\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return \"No Profit\"\n    elif actual_cost < sale_amount:\n        return \"No Loss\"\n    else:\n        return \"Both\"\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount<=0:\n        return False\n    else:\n        if actual_cost/sale_amount>1:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost < sale_amount:\n        return False\n    elif actual_cost > sale_amount:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    #if actual_cost<sale_amount:\n    #    return False\n    #return True\n    if actual_cost>=sale_amount:\n        return False\n    return True\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost==sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost < sale_amount:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    return int(round((v**3.5*(9.0/5.0)+32) - ((7.0/5.0)*v*math.log(t))+273.15,0))\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t < 50:\n        wci = 35.74 + 0.6215*t + (35.75*v*v) / (v*v+8.5*t+1)\n    else:\n        wci = 35.74 + 0.6215*t - 4.5*v*v + (0.4275*t*t) - (35.75*v*v)/(v*v+8.5*t+1)\n    return round(wci)\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci=13.12+(0.6215*t)-(11.37*v**0.16)+((0.3965*t)*(v**0.16))\n    wci=round(wci)\n    return wci\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci=35.74+(0.6215*t)-35.75*(v**0.16)+0.4275*t*(v**0.16)\n    wci=round(wci)\n    return wci\ndef compute_area_weather_zone(type_of_area,area_weather_zone):\n    '''\n    For the given area and type of area, return the area and the weather zone that are\n    relevant to the user.\n    '''\n    if type_of_area == 'City' or type_of_area == 'City/Suburbs' or type_of_area == 'Suburb' or type_of_area == 'Town/City' or type_of_area == 'Town':\n        if area_weather_zone == 'Rural':\n            return 'City', 'Rural'\n        elif area_weather_zone == 'Urban':\n            return 'City', 'Urban'\n    elif type_of_area == 'State/Admin' or type_of_area == 'Province':\n        if area_weather_zone == 'Rural':\n            return 'Province', 'Rural'\n        elif area_weather_zone == 'Urban':\n            return 'Province', 'Urban'\n    elif type_of_area == 'Country':\n        if area_weather_zone == 'Rural':\n            return 'Country', 'Rural'\n        elif area_weather_zone == 'Urban':\n            return 'Country', 'Urban'\n    elif type_of_area == 'Global':\n        if area_weather_zone == 'Rural':\n            return 'Global', 'Rural'\n        elif area_weather_zone == 'Urban':\n            return 'Global', 'Urban'\n    else:\n        print 'Please enter the correct type of area'\n        return\ndef compute_area_weather_zone_for_location(location,type_of_area,area_weather_zone):\n    '''\n    For the given location and type of area, return the area and the weather zone that are\n    relevant to the user.\n    '''\n    if type_of_area == 'City' or type_of_area == 'City/Suburbs' or type_of_area == 'Suburb' or type_of_area == 'Town/City' or type_of_area == 'Town':\n        if area_weather_zone == 'Rural':\n            return 'City', 'Rural'\n        elif area_weather_zone == 'Urban':\n            return 'City', 'Urban'\n    elif type_of_area == 'State/Admin' or type_of_area == 'Province':\n        if area_weather_zone == 'Rural':\n            return 'Province', 'Rural'\n        elif area_weather_zone == 'Urban':\n            return 'Province', 'Urban'\n    elif type_of_area == 'Country':\n        if area_weather_zone == 'Rural':\n            return 'Country', 'Rural'\n        elif area_weather_zone == 'Urban':\n            return 'Country', 'Urban'\n    elif type_of_area == 'Global':\n        if area_weather_zone == 'Rural':\n            return 'Global', 'Rural'\n        elif area_weather_zone == 'Urban':\n            return 'Global', 'Urban'\n    else:\n        print 'Please enter the correct type of area'\n        return\ndef compute_area_weather_zone_for_location_group(location_group,type_of_area,area_weather_zone):\n    '''\n    For the given location and type of area, return the area and the weather zone that are\n    relevant to the user.\n    '''\n    if type_of_area == 'City' or type_of_area == 'City/Suburbs' or type_of_area == 'Suburb' or type_of_area == 'Town/City' or type_of_area == 'Town':\n        if area_weather_zone == 'Rural':\n            return 'City', 'Rural'\n        elif area_weather_zone == 'Urban':\n            return 'City', 'Urban'\n    elif type_of_area == 'State/Admin' or type_of_area == 'Province':\n        if area_weather_zone == 'Rural':\n            return 'Province', 'Rural'\n        elif area_weather_zone == 'Urban':\n            return 'Province', 'Urban'\n    elif type_of_area == 'Country':\n        if area_weather_zone == 'Rural':\n            return 'Country', 'Rural'\n        elif area_weather_zone == 'Urban':\n            return 'Country', 'Urban'\n    elif type_of_area == 'Global':\n        if area_weather_zone == 'Rural':\n            return 'Global', 'Rural'\n        elif area_weather_zone == 'Urban':\n            return 'Global', 'Urban'\n    else:\n        print 'Please enter the correct type of area'\n        return\ndef compute_area_weather_zone_for_location_group_and_location(location_group,type_of_area,area_weather_zone,location):\n    '''\n    For the given location and type of area, return the area and the weather zone that are\n    relevant to the user.\n    '''\n    if type_of_area == 'City' or type_of_area == 'City/Suburbs' or type_of_area == 'Suburb' or type_of_area == 'Town/City' or type_of_area == 'Town':\n        if area_weather_zone == 'Rural':\n            return 'City', 'Rural'\n        elif area_weather_zone == 'Urban':\n            return 'City', 'Urban'\n    elif type_of_area == 'State/Admin' or type_of_area == 'Province':\n        if area_weather_zone == 'Rural':\n            return 'Province', 'Rural'\n        elif area_weather_zone == 'Urban':\n            return 'Province', 'Urban'\n    elif type_of_area == 'Country':\n        if area_weather_zone == 'Rural':\n            return 'Country', 'Rural'\n        elif area_weather_zone == 'Urban':\n            return 'Country', 'Urban'\n    elif type_of_area == 'Global':\n        if area_weather_zone == 'Rural':\n            return 'Global', 'Rural'\n        elif area_weather_zone == 'Urban':\n            return 'Global', 'Urban'\n    else:\n        print 'Please enter the correct type of area'\n        return\ndef compute_area_weather_zone_for_location_group_and_location_group(location_group,type_of_area,area_weather_zone,location_group_2):\n    '''\n    For the given location and type of area, return the area and the weather zone that are\n    relevant to the user.\n    '''\n    if type_of_area == 'City' or type_of_area == 'City/Suburbs' or type_of_area == 'Suburb' or type_of_area == 'Town/City' or type_of_area == 'Town':\n        if area_weather_zone == 'Rural':\n            return 'City', 'Rural'\n        elif area_weather_zone == 'Urban':\n            return 'City', 'Urban'\n    elif type_of_area == 'State/Admin' or type_of_area == 'Province':\n        if area_weather_zone == 'Rural':\n            return 'Province', 'Rural'\n        elif area_weather_zone == 'Urban':\n            return 'Province', 'Urban'\n    elif type_of_area == 'Country':\n        if area_weather_zone == 'Rural':\n            return 'Country', 'Rural'\n        elif area_weather_zone == 'Urban':\n            return 'Country', 'Urban'\n    elif type_of_area == 'Global':\n        if area_weather_zone == 'Rural':\n            return 'Global', 'Rural'\n        elif area_weather_zone == 'Urban':\n            return 'Global', 'Urban'\n    else:\n        print 'Please enter the correct type of area'\n        return\ndef compute_area_weather_zone_for_location_group_and_location_group_and_location(location_group,type_of_area,area_weather_zon"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n    e = 0.2244\n    v = int(v)\n    t = int(t)\n    if v < 3:\n        return t\n    else:\n        return round(a + (b * t) + (c * (v ** d)) + (d * (t ** e)));\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c=35.74\n    v=float(v)\n    t=float(t)\n    v=v*math.pi/60\n    v=v/60\n    x=(13.12 + 0.6215*t) + ((0.3965*t)-35.75) * math.pow(v,0.16)\n    return round(x)\ndef check_scalar(x):\n    if isinstance(x,int) or isinstance(x,float):\n        return True\n    else:\n        return False\ndef check_vector(x):\n    if isinstance(x,list):\n        if len(x)>=2:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c=35.74\n    v=float(v)\n    t=float(t)\n    v=v*math.pi/60\n    v=v/60\n    x=(13.12 + 0.6215*t) + ((0.3965*t)-35.75) * math.pow(v,0.16)\n    return round(x)\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c=35.74\n    v=float(v)\n    t=float(t)\n    v=v*math.pi/60\n    v=v/60\n    x=(13.12 + 0.6215*t) + ((0.3965*t)-35.75) * math.pow(v,0.16)\n    return round(x)\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c=35.74\n    v=float(v)\n    t=float(t)\n    v=v*math.pi/60\n    v=v/60\n    x=(13.12 + 0.6215*t) + ((0.3965*t)-35.75) * math.pow(v,0.16)\n    return round(x)\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c=35.74\n    v=float(v)\n    t=float(t)\n    v=v*math.pi/60\n    v=v/60\n    x=(13.12 + 0.6215*t) + ((0.3965*t)-35.75) * math.pow(v,0.16)\n    return round(x)\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c=35.74\n    v=float(v)\n    t=float(t)\n    v=v*math.pi/60\n    v=v/60\n    x=(13.12 + 0.6215*t) + ((0.3965*t)-35.75) * math.pow(v,0.16)\n    return round(x)\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c=35.74\n    v=float(v)\n    t=float(t)\n    v=v*math.pi/60\n    v=v/60\n    x=(13.12 + 0.6215*t) + ((0.3965*t)-35.75) * math.pow(v,0.16)\n    return round(x)\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c=35.74\n    v=float(v)\n    t=float(t)\n    v=v*math.pi/60\n    v=v/60\n    x=(13.12 + 0.6215*t) + ((0.3965*t)-35.75) * math.pow(v,0.16)\n    return round(x)\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c=35.74\n    v=float(v)\n    t=float(t)\n    v=v*math.pi/60\n    v=v/60\n    x=(13.12 + 0.6215*t) + ((0.3965*t)-35.75) * math.pow(v,0.16)\n    return round(x)\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c=35.74\n    v=float(v)\n    t=float(t)\n    v=v*math.pi/60\n    v=v/60\n    x=(13.12 + 0.6215*t) + ((0.3965*t)-35.75) * math.pow(v,0.16)\n    return round(x)\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c=35.74\n    v=float(v)\n    t=float(t)\n    v=v*math.pi/60\n    v=v/60\n    x=(13.12 + 0.6215*t) + ((0.3965*t)-35.75) * math.pow(v,0.16)\n    return round(x)\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c=35.74\n    v=float(v)\n    t=float(t)\n    v=v*math.pi/60\n    v=v/60\n    x=(13.12 + 0.6215*t) + ((0.3965*t)-35.75) * math.pow(v,0.16)\n    return round(x)\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c=35.74\n    v=float(v)\n    t=float(t)\n    v=v*math.pi/60\n    v=v/60\n    x=(13.12 + 0.6215*t) + ((0.3965*t)-35.75) * math.pow(v,0.16)\n    return round(x)\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c=35.74\n    v=float(v)\n    t=float(t)\n    v=v*math.pi/60\n    v=v/60\n    x=(13.12 + 0.6215*t) + ((0.3965*t)-35.75) * math.pow(v,0.16)\n    return round(x)\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chil"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci=35.74+0.6215*t+(35.75*(v**0.16))-(0.4275*t)*(v**0.16)\n    return int(round(wci))\ndef wind_chill_index(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci=35.74+0.6215*t+(35.75*(v**0.16))-(0.4275*t)*(v**0.16)\n    return wci\ndef temperature(t):\n    '''\n    Write a function that converts the temperatures in Celsius to Fahrenheit\n    '''\n    return int(round(t*1.8+32))\ndef heat_index(t):\n    '''\n    Write a function that calculates the heat index of a given temperature in Celsius rounded to the next integer\n    '''\n    hi=t*1.8+32\n    return int(round(hi))\ndef humidity(h):\n    '''\n    Write a function that calculates the relative humidity of a given humidity in percent rounded to the next integer\n    '''\n    return int(round(h*100))\ndef pressure(p):\n    '''\n    Write a function that calculates the absolute pressure of a given pressure in inches of mercury rounded to the next integer\n    '''\n    return int(round(p*33.8))\ndef wind_speed(v):\n    '''\n    Write a function that calculates the wind speed from the wind speed in km/h rounded to the next integer\n    '''\n    return int(round(v*3.6))\ndef wind_gust(v):\n    '''\n    Write a function that calculates the wind gust from the wind speed in km/h rounded to the next integer\n    '''\n    return int(round(v*1.94))\ndef dew_point(t,h):\n    '''\n    Write a function that calculates the dew point from the temperature in celsius and the relative humidity in percent rounded to the next integer\n    '''\n    dew=243.04*(t/(273.15+t))*(h/100)\n    return int(round(dew))\ndef vapor_pressure(t,h):\n    '''\n    Write a function that calculates the vapor pressure from the temperature in Celsius and the relative humidity in percent rounded to the next integer\n    '''\n    vap=6.112*(math.exp(17.62*t/(243.04+t)))*(h/100)\n    return int(round(vap))\ndef vapor_pressure_rel(t,p):\n    '''\n    Write a function that calculates the vapor pressure from the temperature in Celsius and the absolute pressure in inches of mercury rounded to the next integer\n    '''\n    vap=p*6.112*(math.exp(17.62*t/(243.04+t)))\n    return int(round(vap))\ndef vapor_pressure_abs(p,h):\n    '''\n    Write a function that calculates the vapor pressure from the absolute pressure in inches of mercury and the relative humidity in percent rounded to the next integer\n    '''\n    vap=p*6.112*(math.exp(17.62*h/(243.04+h)))\n    return int(round(vap))\ndef wind_speed_from_direction(d,v):\n    '''\n    Write a function that calculates the wind speed from the direction in degrees rounded to the next integer\n    '''\n    dir_to_km=d*0.0000017455\n    return int(round(v*math.cos(dir_to_km)))\ndef wind_speed_from_direction_wind_gust(d,v):\n    '''\n    Write a function that calculates the wind speed from the direction in degrees rounded to the next integer\n    '''\n    dir_to_km=d*0.0000017455\n    return int(round(v*math.cos(dir_to_km)))\ndef wind_speed_from_direction_wind_gust_scaled(d,v):\n    '''\n    Write a function that calculates the wind speed from the direction in degrees rounded to the next integer\n    '''\n    dir_to_km=d*0.0000017455\n    return int(round(v*math.cos(dir_to_km)*2.23694))\ndef wind_gust_from_direction(d,v):\n    '''\n    Write a function that calculates the wind gust from the direction in degrees rounded to the next integer\n    '''\n    dir_to_km=d*0.0000017455\n    return int(round(v*(math.cos(dir_to_km))*2.23694))\ndef wind_gust_from_direction_wind_gust(d,v):\n    '''\n    Write a function that calculates the wind gust from the direction in degrees rounded to the next integer\n    '''\n    dir_to_km=d*0.0000017455\n    return int(round(v*(math.cos(dir_to_km))*2.23694))\ndef wind_gust_from_direction_wind_gust_scaled(d,v):\n    '''\n    Write a function that calculates the wind gust from the direction in degrees rounded to the next integer\n    '''\n    dir_to_km=d*0.0000017455\n    return int(round(v*(math.cos(dir_to_km)*1.94)*2.23694))\ndef wind_speed_from_speed_and_direction(s,d):\n    '''\n    Write a function that calculates the wind speed from the wind speed in km/h and the direction in degrees rounded to the next integer\n    '''\n    dir_to_km=d*0.0000017455\n    return int(round(s*math.cos(dir_to_km)))\ndef wind_speed_from_speed_and_direction_wind_gust(s,d):\n    '''\n    Write a function that calculates the wind speed from the wind speed in km/h and the direction in degrees rounded to the next integer\n    '''\n    dir_to_km=d*0.0000017455\n    return int(round(s*math.cos(dir_to_km)*2.23694))\ndef wind_speed_from_speed_and_direction_wind_gust_scaled(s,d):\n    '''\n    Write a function that calculates the wind speed from the wind speed in km/h and the direction in degrees rounded to the next integer\n    '''\n    dir_to_km=d*0.0000017455\n    return int(round(s*math.cos(dir_to_km)*1.94*2.23694))\ndef wind_gust_from_speed_and_direction(s,d):\n    '''\n    Write a function that calculates the wind gust from the wind speed in km/h and the direction in degrees rounded to the next integer\n    '''\n    dir_to_km=d*0.0000017455\n    return int(round(s*(math.cos(dir_to_km))*2.23694))\ndef wind_gust_from_speed_and_direction_wind_gust(s,d):\n    '''\n    Write a function that calculates the wind gust from the wind speed in km/h and the direction in degrees rounded to the next integer\n    '''\n    dir_to_km=d*0.0000017455\n    return int(round(s*(math.cos(dir_to_km)*1.94)*2.23694))\ndef wind_gust_from_speed_and_direction_wind_gust_scaled(s,d):\n    '''\n    Write a function that calculates the wind gust from the wind speed in km/h and the direction in degrees rounded to the next integer\n    '''\n    dir_to_km=d*0.0000017455\n    return int(round(s*(math.cos(dir_to_km)*2.23694)*1.94))\ndef wind_speed_from_speed(s):\n    '''\n    Write a function that calculates the wind speed from the wind speed in km/h rounded to the next integer\n    '''\n    return int(round(s*3.6))\ndef wind_gust_from_speed(s):\n    '''\n    Write a function that calculates the wind gust from the wind speed in km/h rounded t"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # Converting K to C\n    t = t - 0.5555\n    if t < 0:\n        return 0\n    v = v * 3.6\n    v = v ** 0.5\n    v = v * 0.5\n    \n    wci = 13.12 + t * (0.6215 * v ** 0.16) + 11.37 * math.pow(v,0.16)\n    wci = round(wci,2)\n    return wci\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    ws = 35.74 + 0.6215*t + (35.75*(v**0.16)) - (0.4275*t*(v**0.16)) + (0.625*t*(v**0.16)) + (8.3275*(v**0.16)*(t**0.16)) + (0.3965*(v**0.16)*(t**0.16))\n    return round(ws)\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = [sample_names]\n    for i in range(len(sample_names)):\n        sample_names[i] = sample_names[i].strip('\\n')\n        sample_names[i] = sample_names[i].strip(' ')\n        sample_names[i] = sample_names[i].strip('\\r')\n        sample_names[i] = sample_names[i].strip('\\t')\n        if sample_names[i][0].islower():\n            sample_names.remove(sample_names[i])\n    print(sum([len(sample_names[i]) for i in range(len(sample_names))]))\n    \ndef count_each_char(sample_names):\n    '''\n    Write a function to count the number of each character in a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = [sample_names]\n    for i in range(len(sample_names)):\n        sample_names[i] = sample_names[i].strip('\\n')\n        sample_names[i] = sample_names[i].strip(' ')\n        sample_names[i] = sample_names[i].strip('\\r')\n        sample_names[i] = sample_names[i].strip('\\t')\n        if sample_names[i][0].islower():\n            sample_names.remove(sample_names[i])\n    print(sample_names)\n    d = {}\n    for i in range(len(sample_names)):\n        for j in range(len(sample_names[i])):\n            if sample_names[i][j] not in d:\n                d[sample_names[i][j]] = 1\n            else:\n                d[sample_names[i][j]] += 1\n    print(d)\n    \ndef count_each_char_sort(sample_names):\n    '''\n    Write a function to count the number of each character in a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = [sample_names]\n    for i in range(len(sample_names)):\n        sample_names[i] = sample_names[i].strip('\\n')\n        sample_names[i] = sample_names[i].strip(' ')\n        sample_names[i] = sample_names[i].strip('\\r')\n        sample_names[i] = sample_names[i].strip('\\t')\n        if sample_names[i][0].islower():\n            sample_names.remove(sample_names[i])\n    d = {}\n    for i in range(len(sample_names)):\n        for j in range(len(sample_names[i])):\n            if sample_names[i][j] not in d:\n                d[sample_names[i][j]] = 1\n            else:\n                d[sample_names[i][j]] += 1\n    d = sorted(d.items(), key = lambda x: x[1], reverse=True)\n    print(d)\n    \ndef sample_nam_2(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = [sample_names]\n    for i in range(len(sample_names)):\n        sample_names[i] = sample_names[i].strip('\\n')\n        sample_names[i] = sample_names[i].strip(' ')\n        sample_names[i] = sample_names[i].strip('\\r')\n        sample_names[i] = sample_names[i].strip('\\t')\n        if sample_names[i][0].islower():\n            sample_names.remove(sample_names[i])\n    print(sum([len(sample_names[i]) for i in range(len(sample_names))]))\n    \ndef count_each_char_sort_2(sample_names):\n    '''\n    Write a function to count the number of each character in a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = [sample_names]\n    for i in range(len(sample_names)):\n        sample_names[i] = sample_names[i].strip('\\n')\n        sample_names[i] = sample_names[i].strip(' ')\n        sample_names[i] = sample_names[i].strip('\\r')\n        sample_names[i] = sample_names[i].strip('\\t')\n        if sample_names[i][0].islower():\n            sample_names.remove(sample_names[i])\n    d = {}\n    for i in range(len(sample_names)):\n        for j in range(len(sample_names[i])):\n            if sample_names[i][j] not in d:\n                d[sample_names[i][j]] = 1\n            else:\n                d[sample_names[i][j]] += 1\n    d = sorted(d.items(), key = lambda x: x[1], reverse=True)\n    print(d)\n    \ndef sample_nam_3(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = [sample_names]\n    for i in range(len(sample_names)):\n        sample_names[i] = sample_names[i].strip('\\n')\n        sample_names[i] = sample_names[i].strip(' ')\n        sample_names[i] = sample_names[i].strip('\\r')\n        sample_names[i] = sample_names[i].strip('\\t')\n        if sample_names[i][0].islower():\n            sample_names.remove(sample_names[i])\n    print(sum([len(sample_names[i]) for i in range(len(sample_names))]))\n    \ndef count_each_char_sort_3(sample_names):\n    '''\n    Write a function to count the number of each character in a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = [sample_names]\n    for i in range(len(sample_names)):\n        sample_names[i] = sample_names[i].strip('\\n')\n        sample_names[i] = sample_names[i].strip(' ')\n        sample_names[i] = sample_names[i].strip('\\r')\n        sample_names[i] = sample_names[i].strip('\\t')\n        if sample_names[i][0].islower():\n            sample_names.remove(sample_names[i])\n    d = {}\n    for i in range(len(sample_names)):\n        for j in range(len(sample_names[i])):\n            if sample_names[i][j] not in d:\n                d[sample_names[i][j]] = 1\n            else:\n                d[sample_names[i][j]] += 1\n    d = sorted(d.items(), key = lambda x: x[1], reverse=True)\n    print(d)\n    \ndef sample_nam_4(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = [sample_names]\n    for i in range(len(sample_names)):\n        sample_names[i] = sample_names[i].strip('\\n')\n        sample_names[i] = sample_names[i].strip(' ')\n        sample_names[i] = sample_names[i].strip('\\r')\n        sample_names[i] = sample_names[i].strip('\\t')\n        if sample_names[i][0].islower():\n            sample_names.remove(sample_names[i])\n    print(sum([len(sample_names[i]) for i in range(len(sample_names))]))\n    \ndef count_each_char_sort_4(sample_names):\n    '''\n    Write a function to count the number of each characte"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if not name[0].islower()])\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # short_list = [item for item in sample_names if not item[0].isupper()]\n    # return sum([len(item) for item in short_list])\n    # return sum([len(item) for item in sample_names if item[0].isupper()])\n    return sum([len(item) for item in sample_names if item[0].isupper()])\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(i) for i in sample_names if i[0].isupper()])\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    num_names = len(sample_names)\n    nam_sum = 0\n    for i in range(num_names):\n        if sample_names[i][0].isupper():\n            nam_sum += len(sample_names[i])\n    return nam_sum\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # solution:\n    return sum([len(name) for name in sample_names if not name[0].isupper()])\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_nam(['Abecadlo','Abella','Adam','Ana','Anabella']) # 3\n    sample_nam(['Abecadlo','Abella','Adam','Ana','Anabella']) # 9\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    # Your Code Here\n    \n    # Sample Input\n    # sample_names = ['David', 'Tom', 'Sam', 'Ada']\n    # Expected Output\n    # length = 15\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n    \n    # *********\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(x) for x in sample_names if x[0].isupper())\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    lowercase_set = set([])\n    for name in sample_names:\n        if name[0].isupper():\n            lowercase_set.add(name)\n    return sum([len(name) for name in sample_names if name not in lowercase_set])\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while ')' in items:\n        start = items.find(')')\n        end = items.find(')', start + 1)\n        items = items[:start] + items[end + 1:]\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if isinstance(items, str):\n        items = items.split(' ')\n    for i in range(len(items)):\n        if items[i].startswith('('):\n            items[i] = items[i][1:]\n        if items[i].endswith(')'):\n            items[i] = items[i][:-1]\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    return items\ndef brackets_to_int(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return int(remove_parenthesis(items))\ndef sort_by_height(items):\n    '''\n    Write a function to sort the list of strings by their height in ascending order\n    '''\n    return sorted(items, key=brackets_to_int)\ndef print_factors(items):\n    '''\n    Write a function to print the factors of a number.\n    '''\n    for i in range(1, int(brackets_to_int(items))+1):\n        if int(brackets_to_int(items)) % i == 0:\n            print(i)\ndef is_palindrome(items):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    return items == items[::-1]\ndef word_length_histogram(items):\n    '''\n    Write a function to get the length of each word in a string.\n    '''\n    count = 0\n    for i in items.split():\n        count = count + 1\n    return count\ndef multiply_by_five(items):\n    '''\n    Write a function to return a list with each element divisible by five.\n    '''\n    result = []\n    for i in items:\n        if i % 5 == 0:\n            result.append(i)\n    return result\ndef is_palindrome(items):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    return items == items[::-1]\ndef join_two_strings(items, separator):\n    '''\n    Write a function to join two strings with a separator\n    '''\n    return separator.join(items)\ndef roman_to_int(items):\n    '''\n    Write a function to convert roman numerals to integer\n    '''\n    roman = {'M':1000, 'CM':900, 'D':500, 'CD':400, 'C':100, 'XC':90, 'L':50, 'XL':40, 'X':10, 'IX':9, 'V':5, 'IV':4, 'I':1}\n    i = 0\n    total = 0\n    while i < len(items):\n        if i+1 < len(items):\n            if items[i:i+2] in roman:\n                total = total + roman[items[i:i+2]]\n                i = i + 2\n            else:\n                total = total + roman[items[i]]\n                i = i + 1\n        else:\n            total = total + roman[items[i]]\n            i = i + 1\n    return total\ndef int_to_roman(items):\n    '''\n    Write a function to convert a number to roman numerals.\n    '''\n    int_to_roman = {1000:'M', 900:'CM', 500:'D', 400:'CD', 100:'C', 90:'XC', 50:'L', 40:'XL', 10:'X', 9:'IX', 5:'V', 4:'IV', 1:'I'}\n    number = ''\n    for i in int_to_roman.keys():\n        while items >= i:\n            number = number + int_to_roman[i]\n            items = items - i\n    return number\ndef find_anagrams(items, str):\n    '''\n    Write a function to find all the anagrams of a string in a list of strings.\n    '''\n    return [i for i in items if sorted(i) == sorted(str)]\ndef count_vowels(items):\n    '''\n    Write a function to count the vowels in a string.\n    '''\n    return items.count('a') + items.count('e') + items.count('i') + items.count('o') + items.count('u')\ndef factorial(items):\n    '''\n    Write a function to find the factorial of a number.\n    '''\n    if items == 1:\n        return 1\n    else:\n        return items * factorial(items - 1)\ndef alphabet_position(items):\n    '''\n    Write a function to return the alphabet position of a character\n    '''\n    return ord(items) - 96\ndef alphabet_position(items):\n    '''\n    Write a function to return the alphabet position of a character\n    '''\n    return items.index(items)\ndef alphabet_position(items):\n    '''\n    Write a function to return the alphabet position of a character\n    '''\n    return items.index(items)\ndef alphabet_position(items):\n    '''\n    Write a function to return the alphabet position of a character\n    '''\n    return items.index(items)\ndef base_converter(items):\n    '''\n    Write a function to convert a number to a different base.\n    '''\n    convert_to = {10:'a', 2:'b', 8:'c', 16:'d'}\n    converted = ''\n    power = 0\n    while items > 0:\n        if items >= 10:\n            converted = converted + convert_to[10]\n            items = items - 10\n        else:\n            converted = converted + convert_to[items]\n            items = items - items\n    return converted[::-1]\ndef reverse_vowels(items):\n    '''\n    Write a function to reverse vowels in a string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return ''.join([x for x in items if x not in vowels])\ndef is_pangram(items):\n    '''\n    Write a function to check if a sentence is a pangram.\n    '''\n    return set(items.lower().split()) == set('abcdefghijklmnopqrstuvwxyz')\ndef alphabet_position(items):\n    '''\n    Write a function to return the alphabet position of a character\n    '''\n    return items.index(items)\ndef count_consonants(items):\n    '''\n    Write a function to count the number of consonants in a string.\n    '''\n    return items.count('a') + items.count('e') + items.count('i') + items.count('o') + items.count('u')\ndef count_letters(items):\n    '''\n    Write a function to count the number of letters in a string.\n    '''\n    return len(items)\ndef centered_average(items):\n    '''\n    Write a function to return the centered average of a list of ints.\n    '''\n    return sum(items) / len(items)\ndef find_closest_string(items, target):\n    '''\n    Write a function to return the string with the minimum difference between two strings.\n    '''\n    return min(items, key=lambda x: abs(len(x) - target))\ndef is_phone_number(items):\n    '''\n    Write a function to check if a string is a valid phone number\n    '''\n    return bool(re.match('^[0-9]{3}-?[0-9]{3}-?[0-9]{4}$', items))\ndef is_valid_parenthese(items):\n    '''\n    Write a function to check if a string is a valid parenthese\n    '''\n    return items.count('(') == items.count(')')\ndef abbreviation(items):\n    '''\n    Write a function to check if a string is an abbreviation\n    '''\n    return items.upper() == items and items.isupper()\ndef abbreviations(items):\n    '''\n    Write a function to check if a string is an abbreviation\n    '''\n    return items.upper() == items and items.isupper()\ndef count_spaces(items):\n    '''\n    Write a function to count the number of spaces in a string\n    '''\n    return items.count(' ')\ndef find_the_duplicate(items):\n    '''\n    Write a function to find the duplicate number in an array\n    '''\n    seen = set()\n    for i in items:\n        if i in seen:"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if type(items)==type(()):\n        return items[0]\n    else:\n        return items.replace('(','').replace(')','')\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    l=[]\n    for i in items:\n        if i!= '(':\n            l.append(i)\n    return l\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = re.sub('[()]','', items)\n    return new_items\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for item in items:\n        new_items.append(item.split('(')[0])\n    return new_items\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    final_str = ''\n    for item in items:\n        if item == '(':\n            continue\n        if item == ')':\n            continue\n        final_str += item\n    return final_str\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for item in items:\n        new_item = re.sub('\\([^\\)]*\\)', '', item)\n        new_items.append(new_item)\n    return new_items\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items[:-1]\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    s = 0\n    n -= 1\n    while n > 0:\n        s += n\n        n -= 1\n    return s + 1\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # first nonagonal is 1.  (starts at 1)\n    # for each non-square number, check if the square number can be broken into two non-squares\n    # if so, then that's the nth nonagonal\n    # \n    # square -> non-square\n    # non-square -> non-square\n    # non-square -> square\n    # square -> non-square\n    # non-square -> square\n    # non-square -> non-square\n    # \n    # for example, 1001 -> 987\n    # 1001 -> 987 -> 993 -> 1003 -> 1005 -> 1017 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019\n    # \n    # another example:\n    # 1001 -> 1003 -> 1005 -> 1017 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019\n    # \n    # another example:\n    # 1001 -> 1011 -> 1013 -> 1015 -> 1017 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019\n    # \n    # another example:\n    # 1001 -> 1011 -> 1013 -> 1015 -> 1017 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019\n    # \n    # another example:\n    # 1001 -> 1011 -> 1013 -> 1015 -> 1017 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019\n    # \n    # another example:\n    # 1001 -> 1011 -> 1013 -> 1015 -> 1017 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019\n    # \n    # another example:\n    # 1001 -> 1011 -> 1013 -> 1015 -> 1017 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019\n    # \n    # another example:\n    # 1001 -> 1011 -> 1013 -> 1015 -> 1017 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019\n    # \n    # another example:\n    # 1001 -> 1011 -> 1013 -> 1015 -> 1017 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019\n    # \n    # another example:\n    # 1001 -> 1011 -> 1013 -> 1015 -> 1017 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019\n    # \n    # another example:\n    # 1001 -> 1011 -> 1013 -> 1015 -> 1017 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019\n    # \n    # another example:\n    # 1001 -> 1011 -> 1013 -> 1015 -> 1017 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 1019 -> 101"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    while True:\n        if i % 4 == 1:\n            yield i * (i + 1) * (i + 2) / 6\n        elif i % 4 == 2:\n            yield i * (3 * i - 1) / 2\n        elif i % 4 == 3:\n            yield i * (i - 1) / 2\n        i += 1\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 3\n    return n*(n-1)\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 3\n    elif n==3:\n        return 5\n    else:\n        return (n*(n-1))//2\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n % 2 == 0:\n        return 2 * (n-1) + 1\n    else:\n        return n * (n + 1) / 2 + 1\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return 1 if n == 1 else n*(n-1)/2\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0: \n        return 1\n    if n % 2 == 0:\n        return n // 2\n    return 3 * n + 1\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    \n    previous = 0\n    current  = 1\n    \n    for i in range(2, n + 1):\n        current = current + previous\n        previous = current - previous\n        \n    return current\n    \ndef is_neighbor(x, y, m):\n    '''\n    Given two numbers x and y, write a function to determine if x and y are neighbors.\n    '''\n    \n    return abs(x - y) == 1 or abs(x - y) == m - 1\n    \ndef is_binary_tree(node, node_list, m):\n    '''\n    Given a node, check if it is a valid binary tree.\n    '''\n    \n    if not node:\n        return\n    \n    if not is_neighbor(node.val, node_list[0].val, m):\n        return False\n    \n    if node.left:\n        if not is_neighbor(node.val, node_list[node.left.val], m):\n            return False\n        \n        if not is_binary_tree(node.left, node_list, m):\n            return False\n    \n    if node.right:\n        if not is_neighbor(node.val, node_list[node.right.val], m):\n            return False\n        \n        if not is_binary_tree(node.right, node_list, m):\n            return False\n    \n    return True\n    \ndef find_leaf(node, m):\n    '''\n    Given a node, find and return the number of leaf nodes.\n    '''\n    if not node:\n        return 0\n    \n    if not node.left and not node.right:\n        return 1\n    \n    return find_leaf(node.left, m) + find_leaf(node.right, m)\n    \ndef count_paths(root, sum):\n    '''\n    Write a function to count the number of paths that sum to a given value.\n    '''\n    \n    if not root:\n        return 0\n    \n    if not root.left and not root.right and root.val == sum:\n        return 1\n    \n    return count_paths(root.left, sum - root.val) + count_paths(root.right, sum - root.val)\n    \ndef count_paths_with_sum(root, sum, path = []):\n    '''\n    Write a function to count the number of paths that sum to a given value.\n    '''\n    \n    if not root:\n        return 0\n    \n    path.append(root.val)\n    \n    if not root.left and not root.right:\n        if sum == root.val:\n            return 1\n        else:\n            return 0\n    \n    return count_paths_with_sum(root.left, sum - root.val, path) + count_paths_with_sum(root.right, sum - root.val, path)\n    \ndef count_unique_paths(root, m):\n    '''\n    Given a m-ary tree, count the number of unique paths from root to each of its leaf nodes.\n    '''\n    \n    if not root:\n        return 0\n    \n    if not root.left and not root.right:\n        return 1\n    \n    return count_unique_paths(root.left, m) + count_unique_paths(root.right, m)\n    \ndef get_root_to_leaf_path(root, m):\n    '''\n    Given a m-ary tree, find the root to leaf path.\n    '''\n    \n    if not root:\n        return []\n    \n    if not root.left and not root.right:\n        return [root.val]\n    \n    return get_root_to_leaf_path(root.left, m) + [root.val] + get_root_to_leaf_path(root.right, m)\n    \ndef flatten(root):\n    '''\n    Given a m-ary tree, flatten the tree into a single line.\n    '''\n    \n    if not root:\n        return\n    \n    if not root.left and not root.right:\n        return root\n    \n    left_tail = flatten(root.left)\n    right_tail = flatten(root.right)\n    \n    if left_tail:\n        root.right = root.left\n        root.left = None\n    elif right_tail:\n        root.right = None\n    \n    return right_tail or left_tail\n    \ndef find_k_closest(root, target, k):\n    '''\n    Given a m-ary tree, find the k nodes that are closest to a given target node.\n    '''\n    \n    if not root:\n        return\n    \n    if not root.left and not root.right:\n        if abs(root.val - target) <= k:\n            return [root.val]\n        elif abs(root.val - target) > k:\n            return\n        \n    if find_k_closest(root.left, target, k):\n        return root.val\n    \n    if find_k_closest(root.right, target, k):\n        return root.val\n    \n    if abs(root.val - target) <= k:\n        return [root.val]\n    elif abs(root.val - target) > k:\n        return\n    \ndef insert_into_tree(root, val):\n    '''\n    Write a function to insert a new node into a binary tree.\n    '''\n    \n    if not root:\n        return Node(val)\n    \n    if val <= root.val:\n        root.left = insert_into_tree(root.left, val)\n    elif val > root.val:\n        root.right = insert_into_tree(root.right, val)\n    \n    return root\n    \ndef delete_node(root, val):\n    '''\n    Write a function to delete a node (not necessarily a leaf) from a binary tree.\n    '''\n    \n    if not root:\n        return\n    \n    if val < root.val:\n        root.left = delete_node(root.left, val)\n    elif val > root.val:\n        root.right = delete_node(root.right, val)\n    else:\n        if not root.left and not root.right:\n            root = None\n        elif root.left and root.right:\n            root.val = min(root.left.val, root.right.val)\n            root.left = delete_node(root.left, root.val)\n        elif root.left:\n            root = root.left\n        elif root.right:\n            root = root.right\n    \n    return root\n    \ndef swap_nodes(root, left, right):\n    '''\n    Given two nodes in a binary tree, swap their values.\n    '''\n    \n    if not root:\n        return\n    \n    if root.left:\n        if root.left.val == left.val:\n            root.left.val = right.val\n            root.left = swap_nodes(root.left, left, right)\n        elif root.left.val == right.val:\n            root.left.val = left.val\n            root.left = swap_nodes(root.left, left, right)\n    \n    if root.right:\n        if root.right.val == left.val:\n            root.right.val = right.val\n            root.right = swap_nodes(root.right, left, right)\n        elif root.right.val == right.val:\n            root.right.val = left.val\n            root.right = swap_nodes(root.right, left, right)\n    \n    return root\n    \ndef is_balanced(root):\n    '''\n    Given a binary tree, determine if it is height-balanced.\n    '''\n    \n    if not root:\n        return True\n    \n    return abs(get_height(root.left) - get_height(root.right)) <= 1 and is_balanced(root.left) and is_balanced(root.right)\n    \ndef is_symmetric(root):\n    '''\n    Write a function to check if a binary tree is symmetric.\n    '''\n    \n    if not root:\n        return True\n    \n    return is_symmetric(root.left) and i"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return 2\n    else:\n        return (((2*n-1)**2 + 2*(2*n-2) + 1)/2)\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # pattern = r'^z(.+?)z$'\n    # m = re.match(pattern, text)\n    # if m:\n    #     return m.group(1)\n    # else:\n    #     return None\n    # print(m.group(1))\n    return re.sub('z', '', text)\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'(^z)|(\\w*z\\w*$)')\n    return pattern.search(text)\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    import re\n    if re.search('z', text):\n        return 'The word z exists in the string'\n    else:\n        return 'The word z does not exist in the string'\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return bool(re.search(r'(^z|\\Sz|\\Sz|z$)', text))\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    str_list = re.findall(r'[^z][^z]+', text)\n    for each in str_list:\n        if 'z' in each:\n            return True\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    a = re.findall('(?<=[a-z])z',text)\n    b = re.findall('z(?=[a-z])',text)\n    c = re.findall('z(?=.z)',text)\n    if len(a) + len(b) + len(c) == 0:\n        print('False')\n    else:\n        print('True')\ntext_match_wordz_middle('helloworld')\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text.find('z') > -1:\n        return True\n    else:\n        return False\ndef text_match_wordz_middle2(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(r'[z]\\w*\\w',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0] == 'z' and text[-1] == 'z':\n        return True\n    else:\n        return False\ndef text_match_wordz_middle2(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0]!= 'z' and text[-1]!= 'z':\n        if text[1] == 'z':\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_wordz_middle3(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0]!= 'z' and text[-1]!= 'z':\n        if text[1]!= 'z':\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_wordz_middle4(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0]!= 'z' and text[-1]!= 'z':\n        if text[1]!= 'z' and text[-2]!= 'z':\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_wordz_middle5(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0]!= 'z' and text[-1]!= 'z':\n        if text[1]!= 'z' and text[-2]!= 'z' and text[-3]!= 'z':\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_wordz_middle6(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0]!= 'z' and text[-1]!= 'z':\n        if text[1]!= 'z' and text[-2]!= 'z' and text[-3]!= 'z' and text[-4]!= 'z':\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_wordz_middle7(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0]!= 'z' and text[-1]!= 'z':\n        if text[1]!= 'z' and text[-2]!= 'z' and text[-3]!= 'z' and text[-4]!= 'z' and text[-5]!= 'z':\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_wordz_middle8(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0]!= 'z' and text[-1]!= 'z':\n        if text[1]!= 'z' and text[-2]!= 'z' and text[-3]!= 'z' and text[-4]!= 'z' and text[-5]!= 'z' and text[-6]!= 'z':\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_wordz_middle9(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0]!= 'z' and text[-1]!= 'z':\n        if text[1]!= 'z' and text[-2]!= 'z' and text[-3]!= 'z' and text[-4]!= 'z' and text[-5]!= 'z' and text[-6]!= 'z' and text[-7]!= 'z':\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_wordz_middle10(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0]!= 'z' and text[-1]!= 'z':\n        if text[1]!= 'z' and text[-2]!= 'z' and text[-3]!= 'z' and text[-4]!= 'z' and text[-5]!= 'z' and text[-6]!= 'z' and text[-7]!= 'z' and text[-8]!= 'z':\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_wordz_middle11(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0]!= 'z' and text[-1]!= 'z':\n        if text[1]!= 'z' and text[-2]!= 'z' and text[-3]!= 'z' and text[-4]!= 'z' and text[-5]!= 'z' and text[-6]!= 'z' and text[-7]!= 'z' and text[-8]!= 'z' and text[-9]!= 'z':\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_wordz_middle12(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0]!= 'z' and text[-1]!= 'z':\n        if text[1]!= 'z' and text[-2]!= 'z' and text[-3]!= 'z' and text[-4]!= 'z' and text[-5]!= 'z' and text[-6]!= 'z' and text[-7]!= 'z' and text[-8]!= 'z' and text[-9]!= 'z' and text[-10]!= 'z':\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_wordz_middle13(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0]!= 'z' and text[-1]!= 'z':\n        if text[1]!= 'z' and text[-2]!= 'z' and text[-3]!= 'z' and text[-4]!= 'z' and text[-5]!= 'z' and text[-6]!= 'z' and text[-7]!= 'z' and text[-8]!= 'z' and text[-9]!= 'z' and text[-10]!= 'z' and text[-11]!= 'z':\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_wordz_middle14(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0]!= 'z' and text[-1]!= 'z':\n        if text[1]!= 'z' and text[-2]!= 'z' and text[-3]!= 'z' and text[-4]!= 'z' and text[-5]!= 'z' and text[-6]!= 'z' and text[-7]!= 'z' and text[-8]!= 'z' and text[-9]!= 'z' and text[-10]!= 'z' and text[-11]!= 'z' and text[-12]!= 'z':\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_wordz_middle15(text):\n    '''\n    Write a function that checks if a strings contains 'z', except a"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    assert isinstance(text,str)\n    if re.search(r'z',text) is None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # solution 1\n    text_mod = text.replace('z','')\n    if text_mod.startswith('z'):\n        return False\n    elif text_mod.endswith('z'):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if n < k:\n        return []\n    if n == k:\n        return [input[n-1]]\n    \n    return input[n-k:n]+input[0:n-k]\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # 1) Write a reverseArray(input,k) function to reverse an array of size k elements\n    # 2) Try to use recursion to reverse an array of size k elements upto a position k\n    # 3) Return the reversed array upto a position k\n    \n    if k <= 1:\n        return input\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if len(input)<k: \n        return None \n    else: \n        result = input[-k:] \n        result.extend(input[:-k]) \n        return result \n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k > len(input):\n        print \"Invalid position!\"\n        return \n    else:\n        # Replace this line with your code\n        input = input[::-1]\n        return input[:k]\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    if len(input) <= k:\n        return input[::-1]\n    else:\n        return input[k:len(input):-1]\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if input == None or len(input) < 2: \n        return []\n    if k < 0 or k > len(input):\n        return input\n    return input[len(input)-1:k-1:-1] + input[k-1::-1]\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = input[k::-1]\n    return output\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    #result = []\n    #for i in range(k, 0, -1):\n    #    result.append(input[i])\n    #return result\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    L = len(input)\n    reverse_array = []\n    \n    #storing last element \n    reverse_array.append(input[L-1])\n    \n    #storing elements in reverse order\n    for i in range(L-2, -1, -1):\n        reverse_array.append(input[i])\n    \n    #returning array upto K index \n    return reverse_array[0:k]\n    \ndef reverse_Array_At_Each_Position(input, k):\n    '''\n    Write a python function to reverse an array at each position \n    '''\n    L = len(input)\n    \n    #initialising array to store reverse array\n    reverse_array = [0] * k\n    \n    for i in range(k):\n        reverse_array[i] = input[L-1-i]\n    \n    return reverse_array\n    \n    \ndef reverse_Array_Slice_Wise(input, start, end):\n    '''\n    Write a python function to reverse an array slice-wise\n    '''\n    L = len(input)\n    \n    reverse_array = []\n    \n    for i in range(end, start-1, -1):\n        reverse_array.append(input[i])\n        \n    reverse_array += input[start:end]\n    \n    return reverse_array\n    \ndef reverse_Array_Recursive(input, start, end):\n    '''\n    Write a python function to reverse an array recursively\n    '''\n    L = len(input)\n    \n    if start >= end:\n        return\n    \n    reverse_Array_Recursive(input, start+1, end-1)\n    input[start], input[end] = input[end], input[start]\n    \ndef reverse_Array_Iterative(input, start, end):\n    '''\n    Write a python function to reverse an array iteratively\n    '''\n    L = len(input)\n    \n    while start < end:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in xrange(k, -1, -1):\n        print input[i]\n        \nreverse_Array_Upto_K(input, 4)"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # test_tup = tuple(test_tup)\n    # test_dict = tuple(test_dict)\n    # test_tup = test_tup + tuple(test_dict)\n    # test_tup = (test_tup, test_dict)\n    return test_tup + tuple(test_dict)\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = list(test_tup)\n    for key in test_dict:\n        new_tup.append(test_dict[key])\n    return tuple(new_tup)\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = (test_tup, test_dict)\n    return new_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = ()\n    for key in test_tup:\n        new_tup = new_tup + (test_dict[key],)\n    return new_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if not isinstance(test_dict, dict):\n        raise TypeError('Given dict is not dict')\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = tuple(test_tup)\n    new_tup = new_tup + (test_dict,)\n    return new_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = list(test_tup)\n    for key, value in test_dict.iteritems():\n        new_tup.append(value)\n    return tuple(new_tup)\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup\n    for key in test_dict:\n        new_tup = new_tup + (key, test_dict[key])\n    return new_tup\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if not cost:\n        return 0\n    rows, cols = len(cost), len(cost[0])\n    dp = [[0 for i in range(rows)] for j in range(cols)]\n    for i in range(rows):\n        dp[0][i] = cost[i][0]\n    for j in range(cols):\n        dp[j][0] = cost[0][j]\n    for i in range(1, rows):\n        for j in range(1, cols):\n            dp[i][j] = cost[i][j] + min(dp[i-1][j], dp[i][j-1])\n    max_avg = max(dp[-1])\n    max_cell = -1\n    for i in range(rows):\n        for j in range(cols):\n            if dp[i][j] == max_avg:\n                max_cell = (i, j)\n    return max_cell\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m = len(cost)\n    n = len(cost[0])\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = 0\n    for i in xrange(N):\n        for j in xrange(N):\n            temp = 0\n            if i == j == 0:\n                continue\n            if i == 0:\n                temp += cost[i][j-1]\n            elif j == 0:\n                temp += cost[i-1][j]\n            else:\n                temp += cost[i-1][j]\n                temp += cost[i][j-1]\n            if temp > max_avg:\n                max_avg = temp\n    return max_avg\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if not cost:\n        return 0\n    rows = len(cost)\n    if rows == 0:\n        return 0\n    cols = len(cost[0])\n    if cols == 0:\n        return 0\n    dp = [0 for x in range(rows + cols - 1)]\n    for i in range(rows):\n        for j in range(cols):\n            dp[i + j] = dp[i + j] + cost[i][j]\n    maxAvg = dp[0]\n    for i in range(rows + cols - 1):\n        maxAvg = max(maxAvg, dp[i])\n    return maxAvg / (rows * cols)\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if not cost:\n        return 0\n    res = 0\n    m, n = len(cost), len(cost[0])\n    path = [[0 for _ in xrange(n)] for _ in xrange(m)]\n    for i in xrange(m):\n        for j in xrange(n):\n            if i == 0 and j == 0:\n                path[i][j] = cost[i][j]\n            elif i == 0:\n                path[i][j] = path[i][j-1] + cost[i][j]\n            elif j == 0:\n                path[i][j] = path[i-1][j] + cost[i][j]\n            else:\n                path[i][j] = min(path[i-1][j], path[i][j-1]) + cost[i][j]\n    res = max(path[m-1][n-1], res)\n    for i in xrange(m-1):\n        res = max(res, path[i][n-1] + path[m-1-i][n-1])\n    for j in xrange(n-1):\n        res = max(res, path[m-1][j] + path[m-1][n-1-j])\n    return res/float(m*n)\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows, cols = len(cost), len(cost[0])\n    paths = [[[0 for _ in range(2)] for _ in range(cols)] for _ in range(rows)]\n    paths[0][0][0] = cost[0][0]\n    paths[0][1][0] = cost[0][0]\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if not cost:\n        return 0\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows = len(cost)\n    cols = len(cost[0])\n    dp = [[0 for _ in range(cols)] for _ in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i][j-1],dp[i-1][j]) + cost[i][j]\n    return dp[rows-1][cols-1]\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows,cols = len(cost),len(cost[0])\n    dp = [[0 for _ in range(cols)] for _ in range(rows)]\n    for row in range(rows):\n        dp[row][0] = cost[row][0]\n    for col in range(1,cols):\n        dp[0][col] = cost[0][col] + dp[0][col-1]\n    for row in range(1,rows):\n        for col in range(1,cols):\n            dp[row][col] = cost[row][col] + dp[row-1][col] + dp[row][col-1] - dp[row-1][col-1]\n    max_avg,max_row,max_col = -1,None,None\n    for row in range(rows):\n        for col in range(cols):\n            avg = dp[row][col]\n            if max_avg < avg:\n                max_avg = avg\n                max_row,max_col = row,col\n    return max_avg\n    \ndef smallestEffortPath(H):\n    '''\n    Given a matrix of size N*N where each cell has a value denoting the effort of a task. A path is defined as a sequence of cells that are visited in the order they are visited. We want to find a path that takes the minimum effort. There is a slight difference between the given solution and the actual solution, the given solution visits cells in the order of traversal and the actual solution visits cells in the order of visiting. Given below is a visualization of the solution with a path taken (in the order visited) with the minimum effort.\n    '''\n    rows,cols = len(H),len(H[0])\n    dp = [[float('inf') for _ in range(cols)] for _ in range(rows)]\n    dp[0][0] = H[0][0]\n    for row in range(1,rows):\n        dp[row][0] = dp[row-1][0] + H[row][0]\n    for col in range(1,cols):\n        dp[0][col] = dp[0][col-1] + H[0][col]\n    for row in range(1,rows):\n        for col in range(1,cols):\n            dp[row][col] = min(dp[row-1][col],dp[row][col-1]) + H[row][col]\n    return dp[-1][-1]\n    \ndef canBeDivided(s):\n    '''\n    Given a string of lowercase alphabets find if it is possible to divide the string into 2 subsets such that the characters in both subsets are equal or not.\n    '''\n    seen,stack = set(),[]\n    for c in s:\n        if c in seen:\n            if c not in stack:\n                stack.append(c)\n        else:\n            seen.add(c)\n    return len(stack) == len(seen)\n    \ndef findLadders(beginWord,endWord,wordList):\n    '''\n    Given a beginWord and endWord given in the form of string, find all shortest sequences of words from wordList which is a subset of the sequence of words between beginWord and endWord.\n    '''\n    wordList.append(beginWord)\n    dp = {}\n    def dfs(curr,parent,end,dp,path):\n        if parent == end:\n            return path\n        if curr in dp:\n            return dp[curr]\n        res = []\n        for word in wordList:\n            if word == curr:\n                continue\n            if len(word)!= len(curr):\n                continue\n            for i in range(len(word)):\n                if word[i]!= curr[i]:\n                    break\n            else:\n                if word == endWord:\n                    res.append(path + [word])\n                dfs(word,curr,end,dp,path + [word])\n        dp[curr] = res\n        return res\n    res = dfs(beginWord,None,endWord,dp,[])\n    return res\n    \ndef isSymmetric(root):\n    '''\n    Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\n    '''\n    if root == None:\n        return True\n    stack = [root]\n    while len(stack) > 0:\n        node = stack.pop()\n        if node.left!= None and node.right!= None:\n            if node.left.val!= node.right.val:\n                return False\n            stack.append(node.right)\n            stack.append(node.left)\n        elif node.left == None and node.right!= None:\n            return False\n        elif node.left!= None and node.right == None:\n            return False\n    return True\n    \ndef isSameTree(p,q):\n    '''\n    Given two binary trees, check if they are equal or not. Two binary trees are considered equal if they are structurally identical and the nodes have the same value.\n    '''\n    if p == None and q == None:\n        return True\n    if p == None or q == None:\n        return False\n    return p.val == q.val and isSameTree(p.left,q.left) and isSameTree(p.right,q.right)\n    \ndef makeStringEven(str):\n    '''\n    Given a string, find if the sum of the ascii values of each char in the string is a even number.\n    '''\n    sum = 0\n    for c in str:\n        sum += ord(c)\n    return sum%2 == 0\n    \ndef getPermutation(n,k):\n    '''\n    Given a positive integer n and a specific permutation k of the integer, find the kth permutation of the integer.\n    '''\n    if n == 1:\n        return [0]\n    elif n == 2:\n        return [0,1]\n    elif n == 3:\n        return [0,1,2]\n    res = [0 for _ in range(n)]\n    p = [i for i in range(1,n)]\n    p.append(0)\n    pos = n-1\n    while pos > 0:\n        idx = p.index(k%pos)\n        res[idx] = p[0]\n        p.remove(p[0])\n        pos -= 1\n        k //= pos\n    return res\n    \ndef wordBreak(s,wordDict):\n    '''\n    Given a string s and a set of strings wordDict, determine if s can be segmented into a space-separated sequence of one or more dictionary words. You may assume that each word in wordDict is a substring of s.\n    '''\n    dp = [False for _ in range(len(s)+1)]\n    dp[0] = True\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            if dp[i] and s[i:j+1] in wordDict:\n                dp[j+1] = True\n    return dp[-1]\n    \ndef ladderLength(beginWord,endWord,wordList):\n    '''\n    Given a beginWord and endWord given in the form of string, find the length of the shortest transformation sequence from beginWord to endWord, such that only one letter can be changed at a time. If there is no such transformation sequence, return 0.\n    '''\n    wordList.append(beginWord)\n    dp = {}\n    def dfs(curr,parent,end,dp):\n        if curr == end:\n            return 1\n        if curr in dp:\n            return dp[curr]\n        res = float('inf')\n        for word in wordList:\n            if word == curr:\n                continue\n            if len(word)!= len(curr):\n                continue\n            for i in range(len(word)):\n                if word[i]!= curr[i]:\n                    break\n            else:\n                res = min(res,dfs(word"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows = len(cost)\n    cols = len(cost[0])\n    dp = [[0 for i in range(cols)] for j in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = cost[i][j] + max(dp[i-1][j],dp[i][j-1])\n    print dp\n    return dp[rows-1][cols-1]/float(rows*cols)\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {k:v for (k,v) in students.items() if v[0] > h and v[1] > w}\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    #  check_name = raw_input('Do you want to filter students\\' names? y/n ')\n    #  if check_name == 'y':\n    #      names = raw_input('Enter the student\\'s names, separated by a space: ')\n    #      names_list = names.split()\n    #      new_dict = {}\n    #      for name in names_list:\n    #          if students.has_key(name):\n    #              new_dict[name] = students[name]\n    #              continue\n    #          else:\n    #              print 'This student doesn\\'t exist'\n    #  else:\n    #      new_dict = students\n    #  return new_dict\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = []\n    for student, data in students.items():\n        if data[0] >= h and data[1] >= w:\n            filtered_students.append(student)\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student in students.keys():\n        if students[student][0] > h and students[student][1] > w:\n            filtered_students[student] = students[student]\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    filtered_students = {}\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for student in students:\n        if students[student][0] > h and students[student][1] > w:\n            result[student] = students[student]\n    return result\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_dict={}\n    for key in students:\n        if students[key][0]>=h and students[key][1]>=w:\n            new_dict[key]=students[key]\n    return new_dict\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    def filt(student_data):\n        return student_data[1][0]>h and student_data[1][1]>w\n    return filter(filt,students.items())\n    \ndef sort_data(students):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to sort students by their height and weight.\n    '''\n    def sort_on_weight(student_data):\n        return student_data[1][1]\n    return sorted(students.items(),key=sort_on_weight,reverse=True)\n    \n    \ndef write_file(sort_data,h,w):\n    '''\n    The input is given as - a tuple with student name and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to write a CSV file with a student name and a tuple of float (student_height, student_weight) as a value.\n    '''\n    with open(\"output.csv\", \"w\") as f:\n        f.write(\"Name,Weight,Height\\n\")\n        for student_data in sort_data:\n            f.write(student_data[0]+\",\"+str(student_data[1][1])+\",\"+str(student_data[1][0])+\"\\n\")\n    print \"Output File has been created.\"\n    \ndef main():\n    '''\n    Write a function to read the file.\n    '''\n    students = read_file(\"data.csv\")\n    print \"Students in the file are - \", students\n    #filter the dictionary with the height and weight to be over the the specified limit.\n    filtered_students = filter_data(students,1.5,60)\n    print \"Students with height and weight above the specified limit are - \", filtered_students\n    #sort the dictionary with the height and weight.\n    sorted_students = sort_data(filtered_students)\n    print \"Students sorted on weight are - \", sorted_students\n    #Write the sorted dictionary into a csv file.\n    write_file(sorted_students,1.5,60)\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # print([key for key in students if (students[key][0]>h and students[key][1]>w)])\n    return([key for key in students if (students[key][0]>h and students[key][1]>w)])\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student in students.keys():\n        height, weight = students[student]\n        if height > h and weight > w:\n            filtered_students[student] = students[student]\n    return filtered_students\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    dic = {}\n    for i in range(len(nums1)):\n        if nums1[i] not in dic:\n            dic[nums1[i]] = 1\n        else:\n            dic[nums1[i]] += 1\n    count = 0\n    for j in range(len(nums2)):\n        if nums2[j] in dic:\n            if dic[nums2[j]] > 1:\n                count += 1\n            dic[nums2[j]] -= 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count+=1\n    return count\ndef common_elem(nums1,nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    common_nums = []\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            common_nums.append(nums1[i])\n    return common_nums\ndef palindrome(s):\n    '''\n    Given a string, write a function to check if it is a palindrome.\n    '''\n    return s[::-1] == s\ndef palindrome_2(s):\n    '''\n    Given a string, write a function to check if it is a palindrome.\n    '''\n    return s[::-1] == s\ndef palindrome_3(s):\n    '''\n    Given a string, write a function to check if it is a palindrome.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    elif len(s) == 2:\n        return s[0] == s[1]\n    elif len(s) == 3:\n        return s[0] == s[2] and s[0] == s[1]\n    else:\n        for i in range(len(s)//2):\n            if s[i]!= s[len(s)-i-1]:\n                return False\n        return True\ndef palindrome_4(s):\n    '''\n    Given a string, write a function to check if it is a palindrome.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    elif len(s) == 2:\n        return s[0] == s[1]\n    else:\n        return s[0] == s[len(s)-1] and palindrome_4(s[1:len(s)-1])\ndef palindrome_5(s):\n    '''\n    Given a string, write a function to check if it is a palindrome.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    elif len(s) == 2:\n        return s[0] == s[1]\n    else:\n        return s[0] == s[len(s)-1] and palindrome_5(s[1:len(s)-1])\ndef palindrome_6(s):\n    '''\n    Given a string, write a function to check if it is a palindrome.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    elif len(s) == 2:\n        return s[0] == s[1]\n    else:\n        return s[0] == s[len(s)-1] and palindrome_6(s[1:len(s)-1])\ndef palindrome_7(s):\n    '''\n    Given a string, write a function to check if it is a palindrome.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    elif len(s) == 2:\n        return s[0] == s[1]\n    else:\n        return s[0] == s[len(s)-1] and palindrome_7(s[1:len(s)-1])\ndef palindrome_8(s):\n    '''\n    Given a string, write a function to check if it is a palindrome.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    elif len(s) == 2:\n        return s[0] == s[1]\n    else:\n        return s[0] == s[len(s)-1] and palindrome_8(s[1:len(s)-1])\ndef palindrome_9(s):\n    '''\n    Given a string, write a function to check if it is a palindrome.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    elif len(s) == 2:\n        return s[0] == s[1]\n    else:\n        return s[0] == s[len(s)-1] and palindrome_9(s[1:len(s)-1])\ndef palindrome_10(s):\n    '''\n    Given a string, write a function to check if it is a palindrome.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    elif len(s) == 2:\n        return s[0] == s[1]\n    else:\n        return s[0] == s[len(s)-1] and palindrome_10(s[1:len(s)-1])\ndef palindrome_11(s):\n    '''\n    Given a string, write a function to check if it is a palindrome.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    elif len(s) == 2:\n        return s[0] == s[1]\n    else:\n        return s[0] == s[len(s)-1] and palindrome_11(s[1:len(s)-1])\ndef palindrome_12(s):\n    '''\n    Given a string, write a function to check if it is a palindrome.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    elif len(s) == 2:\n        return s[0] == s[1]\n    else:\n        return s[0] == s[len(s)-1] and palindrome_12(s[1:len(s)-1])\ndef palindrome_13(s):\n    '''\n    Given a string, write a function to check if it is a palindrome.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    elif len(s) == 2:\n        return s[0] == s[1]\n    else:\n        return s[0] == s[len(s)-1] and palindrome_13(s[1:len(s)-1])\ndef palindrome_14(s):\n    '''\n    Given a string, write a function to check if it is a palindrome.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    elif len(s) == 2:\n        return s[0] == s[1]\n    else:\n        return s[0] == s[len(s)-1] and palindrome_14(s[1:len(s)-1])\ndef palindrome_15(s):\n    '''\n    Given a string, write a function to check if it is a palindrome.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    elif len(s) == 2:\n        return s[0] == s[1]\n    else:\n        return s[0] == s[len(s)-1] and palindrome_15(s[1:len(s)-1])\ndef palindrome_16(s):\n    '''\n    Given a string, write a function to check if it is a palindrome.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        retur"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    i = 0\n    for num1 in nums1:\n        for num2 in nums2:\n            if eq(num1, num2):\n                return i\n        i += 1\n    return -1\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for index, elem1 in enumerate(nums1):\n        elem2 = nums2[index]\n        if elem1 == elem2:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power = str(power)\n    base = str(base)\n    if len(power) > len(base):\n        power, base = base, power\n    return sum(int(base_digit) ** int(power_digit) for base_digit, power_digit in zip(base, power))\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for i in range(0, power+1):\n        result += int(base**i)\n    return result\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    res = 0\n    while power:\n        res += power % 10\n        power = power // 10\n    return res\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 1\n    if power == 1:\n        return base\n    else:\n        return (base * power_base_sum(base, power - 1))\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(x)**power for x in str(base)])\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for i in range(power):\n        result += i + base\n    return result\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(x) ** power for x in str(base)])\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_power = str(base) * power\n    return sum([int(i) for i in base_power])\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    def sum_digits(n):\n        if n < 10:\n            return n\n        else:\n            return sum_digits(n//10) + n%10\n    def power_base_sum(base, power):\n        '''\n        Generate a power_base_sum function that will take base and power as arguments and return the sum of all digits of the base to the specified power.\n        '''\n        if power == 0:\n            return 0\n        else:\n            return sum_digits(base) * power_base_sum(base, power-1)\n    return power_base_sum(base, power)\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    \n    # Define variables\n    power_sum = 0\n    # Function call\n    power_sum = power_sum + sum(int(digit) for digit in str(base**power))\n    # Return result\n    return power_sum\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    i = text1.find('\"')\n    j = text1.rfind('\"')\n    if i < j:\n        return text1[i+1:j]\n    else:\n        return text1[i+1:]\ndef extract_brackets(text1):\n    '''\n    Write a function to extract values between brackets [ ] of the given string.\n    '''\n    i = text1.find('[')\n    j = text1.rfind(']')\n    if i < j:\n        return text1[i+1:j]\n    else:\n        return text1[i+1:]\ndef extract_alpha(text1):\n    '''\n    Write a function to extract values between quotes \" \" of the given string.\n    '''\n    i = text1.find('\"')\n    j = text1.rfind('\"')\n    if i < j:\n        return text1[i+1:j]\n    else:\n        return text1[i+1:]\ndef extract_number(text1):\n    '''\n    Write a function to extract values between quotes \" \" of the given string.\n    '''\n    i = text1.find('\"')\n    j = text1.rfind('\"')\n    if i < j:\n        return text1[i+1:j]\n    else:\n        return text1[i+1:]\ndef extract_alphanumeric(text1):\n    '''\n    Write a function to extract values between quotes \" \" of the given string.\n    '''\n    i = text1.find('\"')\n    j = text1.rfind('\"')\n    if i < j:\n        return text1[i+1:j]\n    else:\n        return text1[i+1:]\ndef extract_integers(text1):\n    '''\n    Write a function to extract values between quotes \" \" of the given string.\n    '''\n    i = text1.find('\"')\n    j = text1.rfind('\"')\n    if i < j:\n        return text1[i+1:j]\n    else:\n        return text1[i+1:]\ndef extract_alphanumeric_capital(text1):\n    '''\n    Write a function to extract values between quotes \" \" of the given string.\n    '''\n    i = text1.find('\"')\n    j = text1.rfind('\"')\n    if i < j:\n        return text1[i+1:j]\n    else:\n        return text1[i+1:]\ndef extract_alphanumeric_small(text1):\n    '''\n    Write a function to extract values between quotes \" \" of the given string.\n    '''\n    i = text1.find('\"')\n    j = text1.rfind('\"')\n    if i < j:\n        return text1[i+1:j]\n    else:\n        return text1[i+1:]\ndef extract_digit(text1):\n    '''\n    Write a function to extract values between quotes \" \" of the given string.\n    '''\n    i = text1.find('\"')\n    j = text1.rfind('\"')\n    if i < j:\n        return text1[i+1:j]\n    else:\n        return text1[i+1:]\ndef extract_whitespace(text1):\n    '''\n    Write a function to extract values between quotes \" \" of the given string.\n    '''\n    i = text1.find('\"')\n    j = text1.rfind('\"')\n    if i < j:\n        return text1[i+1:j]\n    else:\n        return text1[i+1:]\ndef extract_digit_whitespace(text1):\n    '''\n    Write a function to extract values between quotes \" \" of the given string.\n    '''\n    i = text1.find('\"')\n    j = text1.rfind('\"')\n    if i < j:\n        return text1[i+1:j]\n    else:\n        return text1[i+1:]\ndef extract_digit_whitespace_capital(text1):\n    '''\n    Write a function to extract values between quotes \" \" of the given string.\n    '''\n    i = text1.find('\"')\n    j = text1.rfind('\"')\n    if i < j:\n        return text1[i+1:j]\n    else:\n        return text1[i+1:]\ndef extract_digit_whitespace_small(text1):\n    '''\n    Write a function to extract values between quotes \" \" of the given string.\n    '''\n    i = text1.find('\"')\n    j = text1.rfind('\"')\n    if i < j:\n        return text1[i+1:j]\n    else:\n        return text1[i+1:]\ndef extract_digit_whitespace_small_capital(text1):\n    '''\n    Write a function to extract values between quotes \" \" of the given string.\n    '''\n    i = text1.find('\"')\n    j = text1.rfind('\"')\n    if i < j:\n        return text1[i+1:j]\n    else:\n        return text1[i+1:]\ndef extract_digits_whitespace(text1):\n    '''\n    Write a function to extract values between quotes \" \" of the given string.\n    '''\n    i = text1.find('\"')\n    j = text1.rfind('\"')\n    if i < j:\n        return text1[i+1:j]\n    else:\n        return text1[i+1:]\ndef extract_digits_whitespace_capital(text1):\n    '''\n    Write a function to extract values between quotes \" \" of the given string.\n    '''\n    i = text1.find('\"')\n    j = text1.rfind('\"')\n    if i < j:\n        return text1[i+1:j]\n    else:\n        return text1[i+1:]\ndef extract_digits_whitespace_small_capital(text1):\n    '''\n    Write a function to extract values between quotes \" \" of the given string.\n    '''\n    i = text1.find('\"')\n    j = text1.rfind('\"')\n    if i < j:\n        return text1[i+1:j]\n    else:\n        return text1[i+1:]\ndef extract_digits_whitespace_small(text1):\n    '''\n    Write a function to extract values between quotes \" \" of the given string.\n    '''\n    i = text1.find('\"')\n    j = text1.rfind('\"')\n    if i < j:\n        return text1[i+1:j]\n    else:\n        return text1[i+1:]\ndef extract_digits_whitespace_small_capital(text1):\n    '''\n    Write a function to extract values between quotes \" \" of the given string.\n    '''\n    i = text1.find('\"')\n    j = text1.rfind('\"')\n    if i < j:\n        return text1[i+1:j]\n    else:\n        return text1[i+1:]\ndef extract_special_characters(text1):\n    '''\n    Write a function to extract values between quotes \" \" of the given string.\n    '''\n    i = text1.find('\"')\n    j = text1.rfind('\"')\n    if i < j:\n        return text1[i+1:j]\n    else:\n        return text1[i+1:]\ndef extract_special_characters_capital(text1):\n    '''\n    Write a function to extract values between quotes \" \" of the given string.\n    '''\n    i = text1.find('\"')\n    j = text1.rfind('\"')\n    if i < j:\n        return text1[i+1:j]\n    else:\n        return text1[i+1:]\ndef extract_special_characters_small(text1):\n    '''\n    Write a function to extract values between quotes \" \" of the given string.\n    '''\n    i = text1.find('\"')\n    j = text1.rfind('\"')\n    if i < j:\n    "
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    v = re.findall('\"(.*?)\"',text1)\n    return v\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    a = re.findall('\"(.*?)\"', text1)\n    return a\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if text1.find('\\\"') == -1:\n        return ''\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result = re.findall(r'\"\\w+\"',text1)\n    return result\n    \n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # start = re.search(\"\\\"\", text1).span()[0]\n    # end = re.search(\"\\\"\", text1).span()[1]\n    # print(start, end)\n    # text = text1[start+1:end]\n    # print(text)\n    # end_pos = end + 1\n    # quote_text = text1[start:end_pos]\n    # print(quote_text)\n    # # print(type(quote_text))\n    # quote_text = quote_text.replace(\",\", \" \")\n    # quote_text = quote_text.replace(\".\", \" \")\n    # quote_text = quote_text.replace(\"!\", \" \")\n    # quote_text = quote_text.replace(\"?\", \" \")\n    # quote_text = quote_text.replace(\"'\", \" \")\n    # quote_text = quote_text.replace(\"\\\"\", \" \")\n    # quote_text = quote_text.replace(\"-\", \" \")\n    # quote_text = quote_text.replace(\"(\", \" \")\n    # quote_text = quote_text.replace(\")\", \" \")\n    # quote_text = quote_text.replace(\"#\", \" \")\n    # quote_text = quote_text.replace(\"/\", \" \")\n    # quote_text = quote_text.replace(\"#\", \" \")\n    # quote_text = quote_text.replace(\"\\n\", \" \")\n    # quote_text = quote_text.replace(\"#\", \" \")\n    # quote_text = quote_text.replace(\"$\", \" \")\n    # quote_text = quote_text.replace(\";\", \" \")\n    # quote_text = quote_text.replace(\"_\", \" \")\n    # quote_text = quote_text.replace(\"[\", \" \")\n    # quote_text = quote_text.replace(\"]\", \" \")\n    # quote_text = quote_text.replace(\"'\", \" \")\n    # quote_text = quote_text.replace(\"{\", \" \")\n    # quote_text = quote_text.replace(\"}\", \" \")\n    # quote_text = quote_text.replace(\":\", \" \")\n    # quote_text = quote_text.replace(\"&\", \" \")\n    # quote_text = quote_text.replace(\"@\", \" \")\n    # quote_text = quote_text.replace(\"*\", \" \")\n    # quote_text = quote_text.replace(\"/\", \" \")\n    # quote_text = quote_text.replace(\"=\", \" \")\n    # quote_text = quote_text.replace(\"<\", \" \")\n    # quote_text = quote_text.replace(\">\", \" \")\n    # quote_text = quote_text.replace(\"%\", \" \")\n    # quote_text = quote_text.replace(\"?\", \" \")\n    # quote_text = quote_text.replace(\"+\", \" \")\n    # quote_text = quote_text.replace(\"-\", \" \")\n    # quote_text = quote_text.replace(\"\\\"\", \" \")\n    # quote_text = quote_text.replace(\"\\n\", \" \")\n    # quote_text = quote_text.replace(\"^\", \" \")\n    # quote_text = quote_text.replace(\"\\\\\", \" \")\n    # quote_text = quote_text.replace(\"`\", \" \")\n    # quote_text = quote_text.replace(\"\\r\", \" \")\n    # quote_text = quote_text.replace(\"\\\\\", \" \")\n    # quote_text = quote_text.replace(\"'\", \" \")\n    # quote_text = quote_text.replace(\"\\\"\", \" \")\n    # quote_text = quote_text.replace(\"\\t\", \" \")\n    # quote_text = quote_text.replace(\"\\b\", \" \")\n    # quote_text = quote_text.replace(\"\\r\", \" \")\n    # quote_text = quote_text.replace(\"\\f\", \" \")\n    # quote_text = quote_text.replace(\"\\n\", \" \")\n    # quote_text = quote_text.replace(\"\\r\", \" \")\n    # quote_text = quote_text.replace(\"\\f\", \" \")\n    # quote_text = quote_text.replace(\"\\v\", \" \")\n    # quote_text = quote_text.replace(\"\\a\", \" \")\n    # quote_text = quote_text.replace(\"\\b\", \" \")\n    # quote_text = quote_text.replace(\"\\e\", \" \")\n    # quote_text = quote_text.replace(\"\\t\", \" \")\n    # quote_text = quote_text.replace(\"\\b\", \" \")\n    # quote_text = quote_text.replace(\"\\r\", \" \")\n    # quote_text = quote_text.replace(\"\\f\", \" \")\n    # quote_text = quote_text.replace(\"\\v\", \" \")\n    # quote_text = quote_text.replace(\"\\a\", \" \")\n    # quote_text = quote_text.replace(\"\\b\", \" \")\n    # quote_text = quote_text.replace(\"\\e\", \" \")\n    # quote_text = quote_text.replace(\"\\t\", \" \")\n    # quote_text = quote_text.replace(\"\\b\", \" \")\n    # quote_text = quote_text.replace(\"\\r\", \" \")\n    # quote_text = quote_text.replace(\"\\f\", \" \")\n    # quote_text = quote_text.replace(\"\\v\", \" \")\n    # quote_text = quote_text.replace(\"\\a\", \" \")\n    # quote_text = quote_text.replace(\"\\b\", \" \")\n    # quote_text = quote_text.replace(\"\\e\", \" \")\n    # quote_text = quote_text.replace(\"\\t\", \" \")\n    # quote_text = quote_text.replace(\"\\b\", \" \")\n    # quote_text = quote_text.replace(\"\\r\", \" \")\n    # quote_text = quote_text.replace(\"\\f\", \" \")\n    # quote_text = quote_text.replace(\"\\v\", \" \")\n    # quote_text = quote_text.replace(\"\\a\", \" \")\n    # quote_text = quote_text.replace(\"\\b\", \" \")\n    # quote_text = quote_text.replace(\"\\e\", \" \")\n    # quote_text = quote_text.replace(\"\\t\", \" \")\n    # quote_text = quote_text.replace(\"\\b\", \" \")\n    # quote_text = quote_text.replace(\"\\r\", \" \")\n    # quote_text = quote_text.replace(\"\\f\", \" \")\n    # quote_text = quote_text.replace(\"\\v\", \" \")\n    # quote_text = quote_text.replace(\"\\a\", \" \")\n    # quote_text = quote_text.replace(\"\\b\", \" \")\n    # quote_text = quote_text.replace(\"\\e\", \" \")\n    # quote_text = quote_text.replace(\"\\t\", \" \")\n    # quote_text = quote_text.replace(\"\\b\", \" \")\n    # quote_text = quote_text.replace(\"\\r\", \" \")\n    # quote_text = quote_text.replace(\"\\f\", \" \")\n    # quote_text = quote_text.replace(\"\\v\", \" \")\n    # quote_text = quote_text.replace(\"\\a\", \" \")\n    # quote_text = quote_text.replace(\"\\b\", \" \")\n    # quote_text = quote_text.replace(\"\\e\", \" \")\n    # quote_text = quote_text.replace(\"\\t\", \" \")\n    # quote_text = quote_text.replace(\"\\b\", \" \")\n    # quote_text = quote_text.replace(\"\\r\", \" \")\n    # quote_text = quote_text.replace(\"\\f\", \" \")\n    # quote_text = quote_text.replace(\"\\v\", \" \")\n    # quote_text = quote_text.replace(\"\\a\", \" \")\n    # quote_text = quote_text.replace(\"\\b\", \" \")\n    # quote_text = quote_text.replace(\"\\e\", \" \")"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'\\\"[^\\\"]*\\\"', text1)\ndef extract_hashtag(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'(?<=#)([^#]*)(?=#)', text1)\ndef extract_emoticons(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'(?<=:)([^:]*)(?=:)', text1)\ndef extract_urls(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'(https?://\\S+)', text1)\ndef extract_sentiment_words(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'(?<=\\():[^\\)]*(?=\\))', text1)\ndef extract_digit(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'[0-9]+', text1)\ndef extract_punctuation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'(?<=[\\.\\?\\!\\,\\;])[^\\.\\?\\!\\,\\;]*(?=[\\.\\?\\!\\,\\;])', text1)\ndef extract_emoticons_list(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'(?<=\\():[^\\)]*(?=\\))', text1)\ndef extract_number(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'(?<=\\()[^\\)]*(?=\\))', text1)\ndef extract_words(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'[a-zA-Z]+', text1)\ndef extract_words_list(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'[a-zA-Z]+', text1)\ndef extract_hashtag_list(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'(?<=#)([^#]*)(?=#)', text1)\ndef extract_digit_list(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'[0-9]+', text1)\ndef extract_quotation_list(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'\\\"[^\\\"]*\\\"', text1)\ndef extract_urls_list(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'(https?://\\S+)', text1)\ndef extract_sentiment_words_list(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'(?<=\\():[^\\)]*(?=\\))', text1)\ndef extract_emoticons_list_list(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'(?<=\\():[^\\)]*(?=\\))', text1)\ndef extract_digit_list_list(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'(?<=\\()[^\\)]*(?=\\))', text1)\ndef extract_punctuation_list(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'(?<=[\\.\\?\\!\\,\\;])[^\\.\\?\\!\\,\\;]*(?=[\\.\\?\\!\\,\\;])', text1)\ndef extract_number_list(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'(?<=\\()[^\\)]*(?=\\))', text1)\ndef extract_words_list_list(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'[a-zA-Z]+', text1)\ndef extract_words_set(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return set(text1)\ndef extract_hashtag_set(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return set(text1)\ndef extract_digit_set(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return set(text1)\ndef extract_quotation_set(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return set(text1)\ndef extract_urls_set(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return set(text1)\ndef extract_sentiment_words_set(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return set(text1)\ndef extract_emoticons_set(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return set(text1)\ndef extract_number_set(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return set(text1)\ndef extract_punctuation_set(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return set(text1)\ndef extract_words_list_set(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return set(text1)\ndef extract_hashtag_list_set(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return set(text1)\ndef extract_digit_list_set(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return set(text1)\ndef extract_quotation_list_set(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return set(text1)\ndef extract_urls_list_set(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return set(text1)\ndef extract_sentiment_words_list"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quote_pattern = re.compile(r'\\\"(.*)\\\"')\n    quot_list = quote_pattern.findall(text1)\n    print quot_list\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_marks = re.findall(r'\\\"(.*?)\\\"', text1)\n    return quotation_marks\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'\".*?\"', text1)\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    ans = ()\n    for i in range(len(test_tup)-1):\n        ans += (test_tup[i] * test_tup[i+1],)\n    return ans\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    result = ()\n    \n    for i in range(len(test_tup)):\n        result += (test_tup[i] * test_tup[i+1],)\n    \n    return result\n    \n    \n    \n    \n    "
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    ans = ()\n    for i in range(len(test_tup)):\n        if i == 0:\n            ans = (test_tup[i],)\n        else:\n            ans = ans + (test_tup[i]*test_tup[i-1],)\n    return ans\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    lst = []\n    for i in test_tup:\n        if type(i) == int:\n            lst.append(i)\n    new_tup = tuple(lst)\n    return new_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for idx in range(0, len(test_tup)):\n        if idx == 0:\n            result = (test_tup[0],)\n        else:\n            result = result + (test_tup[idx] * test_tup[idx+1],)\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(a*b for a,b in zip(test_tup[0:-1], test_tup[1:])) + (test_tup[-1],)\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([x*y for x,y in zip(test_tup[1:],test_tup)])\n    #return test_tup[0]\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(0,len(test_tup)):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    res = 1\n    for i in test_tup:\n        res *= i\n    return res\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    output = ()\n    for i in range(len(test_tup)):\n        output = output + (test_tup[i] * test_tup[i+1],)\n    return output\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # TODO: Your code here\n    \n    return lst1 + lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    \n    if len(lst1)!=len(lst2):\n        return None\n    else:\n        return [sum(i) for i in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i]+lst2[i] for i in range(len(lst1))]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst3 = [a + b for a, b in zip(lst1, lst2)]\n    return lst3\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(0,len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        return False\n    \n    return [i + j for i,j in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a_i + b_i for a_i, b_i in zip(lst1,lst2)]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    group = []\n    for i in nums:\n        if len(group) == 0:\n            group.append(i)\n        elif group[-1]!= i:\n            group.append(i)\n        else:\n            group[-1] = i\n    return group\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [v for k,g in groupby(nums) for v in (list(g)) if len(list(g))>1]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Create an iterator for nums\n    it = iter(nums)\n    # Look at the first item\n    item = next(it)\n    # Initialize list to hold the number of consecutive duplicates\n    count = 1\n    # Initialize a flag that indicates if the current item is the same as the last\n    was_duplicate = False\n    # Loop over the remaining items\n    for item in it:\n        # If the current item is the same as the last item, increase the count\n        if item == item:\n            count += 1\n        # If the current item is not the same as the last item\n        else:\n            # If the number of consecutive duplicates is greater than 1, add the previous item and the last item to the list\n            if count > 1:\n                yield (item - 1, item)\n            # Reset the count to 1\n            count = 1\n            # Set the flag to False\n            was_duplicate = False\n    # If the number of consecutive duplicates is greater than 1, add the last item to the list\n    if count > 1:\n        yield (item - 1, item)\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if nums == []:\n        return []\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for i, v in enumerate(nums):\n        if i == len(nums) - 1:\n            break\n        if nums[i] == nums[i+1]:\n            nums.pop(i)\n            nums.pop(i)\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    \n    for i,k in groupby(nums):\n        if i+1 < len(nums):\n            print(i,k)\n            if k[0] == k[1]:\n                nums[:] = nums[:i]+nums[i+2:]\n                print(nums)\n                break\n            else:\n                nums[:] = nums[:i]+nums[i+1:]\n                print(nums)\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    grouped_list = [list(g) for k, g in groupby(nums)]\n    grouped_list = [list(g) for g in grouped_list if len(g)>1]\n    return [item for sublist in grouped_list for item in sublist]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums) if len(list(g)) > 1]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) <= 1:\n        return len(nums)\n    newList = []\n    for (k,g) in groupby(nums):\n        newList.append(len(list(g)))\n    return newList\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surfacearea = math.pi*r**2+(h/3)*math.pi*r**2\n    return surfacearea\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    sr = math.pi*math.pow(r,2)+math.pi*math.pow(r-h,2)\n    return sr\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * (r**2) + math.pi * (r**2) * h/3\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi=math.pi\n    return pi*(r**2)*h*0.5\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * (h/3 + math.sqrt(h**2 + (3/4 * math.pi * r**2)))\ndef lateralsurface_sphere(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r and the height h.\n    '''\n    return 4/3 * math.pi * r**3 * h\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    return math.pi * r**2 * h\ndef lateralsurface_ellipsoid(r,h):\n    '''\n    Write a function to find the lateral surface area of an ellipsoid given radius r and the height h.\n    '''\n    return 4/3 * math.pi * r**3 * h\ndef lateralsurface_paraboloid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a paraboloid given radius r and the height h.\n    '''\n    return math.pi * a**2 * b * h\ndef lateralarea_all(r,h,type):\n    '''\n    Write a function to find the lateral surface area of a cone, sphere, cylinder, or ellipsoid given radius r, height h, and surface type.\n    '''\n    if type == 'cone':\n        return lateralsurface_cone(r,h)\n    elif type =='sphere':\n        return lateralsurface_sphere(r,h)\n    elif type == 'cylinder':\n        return lateralsurface_cylinder(r,h)\n    elif type == 'ellipsoid':\n        return lateralsurface_ellipsoid(r,h)\n    elif type == 'paraboloid':\n        return lateralsurface_paraboloid(r,h)\ndef lateralarea_all2(r,h,type):\n    '''\n    Write a function to find the lateral surface area of a cone, sphere, cylinder, or ellipsoid given radius r, height h, and surface type.\n    '''\n    if type == 'cone':\n        return math.pi * r**2 * (h/3 + math.sqrt(h**2 + (3/4 * math.pi * r**2)))\n    elif type =='sphere':\n        return 4/3 * math.pi * r**3 * h\n    elif type == 'cylinder':\n        return math.pi * r**2 * h\n    elif type == 'ellipsoid':\n        return 4/3 * math.pi * r**3 * h\n    elif type == 'paraboloid':\n        return math.pi * r**2 * h\ndef distance_all(r,h,type):\n    '''\n    Write a function to find the distance a sphere or ellipsoid extends out given radius r, height h, and surface type.\n    '''\n    if type =='sphere':\n        return r + math.sqrt(r**2 + h**2)\n    elif type == 'ellipsoid':\n        return math.sqrt(r**2 + h**2)\ndef distance_all2(r,h,type):\n    '''\n    Write a function to find the distance a sphere or ellipsoid extends out given radius r, height h, and surface type.\n    '''\n    if type =='sphere':\n        return math.sqrt(r**2 + h**2)\n    elif type == 'ellipsoid':\n        return r + h\ndef volume_all(r,h,type):\n    '''\n    Write a function to find the volume of a sphere, ellipsoid, or cylinder given radius r, height h, and surface type.\n    '''\n    if type =='sphere':\n        return 4/3 * math.pi * r**3 * h\n    elif type == 'cylinder':\n        return math.pi * r**2 * h\n    elif type == 'ellipsoid':\n        return 4/3 * math.pi * r**3 * h\ndef volume_all2(r,h,type):\n    '''\n    Write a function to find the volume of a sphere, ellipsoid, or cylinder given radius r, height h, and surface type.\n    '''\n    if type =='sphere':\n        return 4/3 * math.pi * r**3 * h\n    elif type == 'cylinder':\n        return math.pi * r**2 * h\n    elif type == 'ellipsoid':\n        return 4/3 * math.pi * r**3 * h\ndef distance_cone(r,h):\n    '''\n    Write a function to find the distance of a cone given radius r and height h.\n    '''\n    return math.sqrt(r**2 + h**2)\ndef distance_sphere(r,h):\n    '''\n    Write a function to find the distance of a sphere given radius r and height h.\n    '''\n    return math.sqrt(r**2 + h**2)\ndef distance_cylinder(r,h):\n    '''\n    Write a function to find the distance of a cylinder given radius r and height h.\n    '''\n    return r + h\ndef distance_ellipsoid(r,h):\n    '''\n    Write a function to find the distance of an ellipsoid given radius r and height h.\n    '''\n    return math.sqrt(r**2 + h**2)\ndef distance_paraboloid(a,b,h):\n    '''\n    Write a function to find the distance of a paraboloid given radius r and height h.\n    '''\n    return math.sqrt(a**2 + b**2 * h)\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and height h.\n    '''\n    return math.pi * r**2 * (h/3 + math.sqrt(h**2 + (3/4 * math.pi * r**2)))\ndef volume_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere given radius r and height h.\n    '''\n    return 4/3 * math.pi * r**3 * h\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given radius r and height h.\n    '''\n    return math.pi * r**2 * h\ndef volume_ellipsoid(r,h):\n    '''\n    Write a function to find the volume of an ellipsoid given radius r and height h.\n    '''\n    return 4/3 * math.pi * r**3 * h\ndef volume_paraboloid(a,b,h):\n    '''\n    Write a function to find the volume of a paraboloid given radius r and height h.\n    '''\n    return 4/3 * math.pi * r**3 * h\ndef volume_all3(r,h,type):\n    '''\n    Write a function to find the volume of a cone, sphere, cylinder, or ellipsoid given radius r, height h, and surface type.\n    '''\n    if type == 'cone':\n        return math.pi * r**2 * (h/3 + math.sqrt(h**2 + (3/4 * math.pi * r**2)))\n    elif type =='sphere':\n        return 4/3 * math.pi * r**3 * h\n    elif type == 'cylinder':\n        return math.pi * r**2 * h\n    elif type == 'ellipsoid':\n        return 4/3 * math.pi * r**3 * h\ndef volume_all4(r,h,type):\n    '''\n    Write a function to find the volume of a cone, sphere, cylinder, or ellipsoid given radius r, height h, and surface type.\n    '''\n    if type == 'cone':\n        return math.pi * r**2 * (h/3 + math.sqrt(h**2 + (3/4 * math.pi * r**2)))\n    elif type =='sphere':\n        return 4/3 * math.pi * r**3 * h\n    elif type == 'cylinder':\n        return math"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2*h/3\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    return 4*math.pi*r**2\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    return math.pi*r**2*2 + math.pi*r*h\ndef volumesurface_cone(r,h):\n    '''\n    Write a function to find the volume surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2*h/3\ndef volumesurface_sphere(r):\n    '''\n    Write a function to find the volume surface area of a sphere given radius r.\n    '''\n    return 4*math.pi*r**3/3\ndef volumesurface_cylinder(r,h):\n    '''\n    Write a function to find the volume surface area of a cylinder given radius r and the height h.\n    '''\n    return math.pi*r**2*2 + math.pi*r*h\ndef energy_impulse(m1,m2,x1,vx1,y1,vy1,x2,vx2,y2,vy2):\n    '''\n    Write a function to find the kinetic energy of a particle given m1,m2,x1,vx1,y1,vy1,x2,vx2,y2,vy2.\n    '''\n    return (m1*vx1**2 + m2*vx2**2 + 2*m1*m2*x1*x2*math.cos(y1-y2))\ndef energy_kinetic(m1,m2,x1,vx1,y1,vy1,x2,vx2,y2,vy2):\n    '''\n    Write a function to find the kinetic energy of a particle given m1,m2,x1,vx1,y1,vy1,x2,vx2,y2,vy2.\n    '''\n    return (m1*vx1**2 + m2*vx2**2)\ndef energy_potential(m1,m2,x1,vx1,y1,vy1,x2,vx2,y2,vy2):\n    '''\n    Write a function to find the kinetic energy of a particle given m1,m2,x1,vx1,y1,vy1,x2,vx2,y2,vy2.\n    '''\n    return (m1*vy1**2 + m2*vy2**2 + 2*m1*m2*y1*y2*math.cos(x1-x2))\ndef energy_total(m1,m2,x1,vx1,y1,vy1,x2,vx2,y2,vy2):\n    '''\n    Write a function to find the kinetic energy of a particle given m1,m2,x1,vx1,y1,vy1,x2,vx2,y2,vy2.\n    '''\n    return (m1*vx1**2 + m2*vx2**2 + m1*vy1**2 + m2*vy2**2)\ndef momentum_impulse(m1,m2,x1,vx1,y1,vy1,x2,vx2,y2,vy2):\n    '''\n    Write a function to find the kinetic energy of a particle given m1,m2,x1,vx1,y1,vy1,x2,vx2,y2,vy2.\n    '''\n    return (m1*vx1 + m2*vx2 + m1*x1*x2*math.cos(y1-y2))\ndef momentum_kinetic(m1,m2,x1,vx1,y1,vy1,x2,vx2,y2,vy2):\n    '''\n    Write a function to find the kinetic energy of a particle given m1,m2,x1,vx1,y1,vy1,x2,vx2,y2,vy2.\n    '''\n    return (m1*vx1 + m2*vx2)\ndef momentum_potential(m1,m2,x1,vx1,y1,vy1,x2,vx2,y2,vy2):\n    '''\n    Write a function to find the kinetic energy of a particle given m1,m2,x1,vx1,y1,vy1,x2,vx2,y2,vy2.\n    '''\n    return (m1*vy1 + m2*vy2 + m1*y1*y2*math.cos(x1-x2))\ndef momentum_total(m1,m2,x1,vx1,y1,vy1,x2,vx2,y2,vy2):\n    '''\n    Write a function to find the kinetic energy of a particle given m1,m2,x1,vx1,y1,vy1,x2,vx2,y2,vy2.\n    '''\n    return (m1*vx1 + m2*vx2 + m1*vy1 + m2*vy2)\ndef time_impulse(m1,m2,x1,vx1,y1,vy1,x2,vx2,y2,vy2):\n    '''\n    Write a function to find the kinetic energy of a particle given m1,m2,x1,vx1,y1,vy1,x2,vx2,y2,vy2.\n    '''\n    return ((vx1*x2 + vy1*y2)/(vx1**2 + vy1**2)**0.5 + (vx2*x1 + vy2*y1)/(vx2**2 + vy2**2)**0.5)\ndef time_kinetic(m1,m2,x1,vx1,y1,vy1,x2,vx2,y2,vy2):\n    '''\n    Write a function to find the kinetic energy of a particle given m1,m2,x1,vx1,y1,vy1,x2,vx2,y2,vy2.\n    '''\n    return ((vx1*x2 + vy1*y2)/(vx1**2 + vy1**2)**0.5 + (vx2*x1 + vy2*y1)/(vx2**2 + vy2**2)**0.5)\ndef time_potential(m1,m2,x1,vx1,y1,vy1,x2,vx2,y2,vy2):\n    '''\n    Write a function to find the kinetic energy of a particle given m1,m2,x1,vx1,y1,vy1,x2,vx2,y2,vy2.\n    '''\n    return ((vx1*x2 + vy1*y2)/(vx1**2 + vy1**2)**0.5 + (vx2*x1 + vy2*y1)/(vx2**2 + vy2**2)**0.5)\ndef time_total(m1,m2,x1,vx1,y1,vy1,x2,vx2,y2,vy2):\n    '''\n    Write a function to find the kinetic energy of a particle given m1,m2,x1,vx1,y1,vy1,x2,vx2,y2,vy2.\n    '''\n    return ((vx1*x2 + vy1*y2)/(vx1**2 + vy1**2)**0.5 + (vx2*x1 + vy2*y1)/(vx2**2 + vy2**2)**0.5)\ndef acceleration_impulse(m1,m2,x1,vx1,y1,vy1,x2,vx2,y2,vy2):\n    '''\n    Writ"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    l=3.14*r**2\n    s=3.14*r*h\n    return l+s\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylindrical surface given radius r and the height h.\n    '''\n    l=2*3.14*r*h\n    return l\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a spherical surface given radius r.\n    '''\n    l=4*3.14*r**2\n    return l\ndef lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cuboid given length l.\n    '''\n    return 6*l\ndef lateralsurface_spherical_cap(r,h):\n    '''\n    Write a function to find the lateral surface area of a spherical cap given radius r and the height h.\n    '''\n    return 2*math.pi*r*h\ndef lateralsurface_spherical_cylindrical_cap(r,h):\n    '''\n    Write a function to find the lateral surface area of a spherical cap of cylindrical symmetry given radius r and the height h.\n    '''\n    return 2*math.pi*r*h\ndef lateralsurface_spherical_cuboid_cap(r,h):\n    '''\n    Write a function to find the lateral surface area of a spherical cuboid cap given radius r and the height h.\n    '''\n    return 2*math.pi*r*h\ndef lateralsurface_spherical_tapered_cylindrical_cap(r,h):\n    '''\n    Write a function to find the lateral surface area of a spherical tapered cap of cylindrical symmetry given radius r and the height h.\n    '''\n    return 2*math.pi*r*h\ndef lateralsurface_spherical_cuboid_cap(r,h):\n    '''\n    Write a function to find the lateral surface area of a spherical cuboid cap given radius r and the height h.\n    '''\n    return 6*(math.pi*r**2-r**3)\ndef lateralsurface_torus(r,h):\n    '''\n    Write a function to find the lateral surface area of a torus given radius r and the height h.\n    '''\n    l=2*3.14*r*(r+h)\n    s=2*3.14*r**2*h\n    return l+s\ndef lateralsurface_tetrahedron(r):\n    '''\n    Write a function to find the lateral surface area of a tetrahedron given radius r.\n    '''\n    l=2*math.pi*r**3\n    return l\ndef lateralsurface_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given base a, base b, and height h.\n    '''\n    l=a+b\n    s=2*h*(a+b)\n    return l+s\ndef lateralsurface_triangle(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a triangle given base a, base b, and height h.\n    '''\n    l=a+b\n    s=h*(a+b)\n    return l+s\ndef lateralsurface_square(a):\n    '''\n    Write a function to find the lateral surface area of a square given side length a.\n    '''\n    l=4*a\n    s=4*a**2\n    return l+s\ndef lateralsurface_ellipsoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of an ellipsoid given base a, base b, and height h.\n    '''\n    l=6*a*b*h/((a**2+b**2)**(3/2))\n    s=6*a*b*h/((a**2+b**2)**(1/2))\n    return l+s\ndef lateralsurface_ellipsoidal_cap(r,h):\n    '''\n    Write a function to find the lateral surface area of a ellipsoidal cap given radius r and the height h.\n    '''\n    l=2*3.14*r*(r+h)\n    s=2*3.14*r**2*h\n    return l+s\ndef lateralsurface_ellipsoidal_tapered_cylindrical_cap(r,h):\n    '''\n    Write a function to find the lateral surface area of a tapered ellipsoidal cap of cylindrical symmetry given radius r and the height h.\n    '''\n    l=2*math.pi*r*(r+h)\n    s=2*math.pi*r**2*h\n    return l+s\ndef lateralsurface_ellipsoidal_cuboid_cap(r,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid ellipsoidal cap given radius r and the height h.\n    '''\n    l=2*3.14*r*(r+h)\n    s=2*3.14*r**2*h\n    return l+s\ndef lateralsurface_ellipsoidal_spherical_cap(r,h):\n    '''\n    Write a function to find the lateral surface area of a spherical cap of ellipsoidal symmetry given radius r and the height h.\n    '''\n    return 2*math.pi*r*(r+h)\ndef lateralsurface_ellipsoidal_spherical_cylindrical_cap(r,h):\n    '''\n    Write a function to find the lateral surface area of a spherical cap of ellipsoidal symmetry given radius r and the height h.\n    '''\n    return 2*math.pi*r*(r+h)\ndef lateralsurface_ellipsoidal_spherical_cuboid_cap(r,h):\n    '''\n    Write a function to find the lateral surface area of a spherical cuboid cap given radius r and the height h.\n    '''\n    return 2*3.14*r*(r+h)\ndef lateralsurface_ellipsoidal_spherical_tapered_cylindrical_cap(r,h):\n    '''\n    Write a function to find the lateral surface area of a spherical tapered cap of ellipsoidal symmetry given radius r and the height h.\n    '''\n    return 2*3.14*r*(r+h)\ndef lateralsurface_ellipsoidal_spherical_cuboid_cap(r,h):\n    '''\n    Write a function to find the lateral surface area of a spherical cuboid cap given radius r and the height h.\n    '''\n    return 6*(math.pi*r**2-r**3)\ndef lateralsurface_hyperbola(r,h):\n    '''\n    Write a function to find the lateral surface area of a hyperbola given radius r and the height h.\n    '''\n    l=2*math.pi*r*(r+h)\n    s=2*math.pi*r**2*h\n    return l+s\ndef lateralsurface_hyperbolic_cap(r,h):\n    '''\n    Write a function to find the lateral surface area of a hyperbolic cap given radius r and the height h.\n    '''\n    l=2*3.14*r*(r+h)\n    s=2*3.14*r**2*h\n    return l+s\ndef lateralsurface_paraboloid(a,h):\n    '''\n    Write a function to find the lateral surface area of a paraboloid given side length a and height h.\n    '''\n    l=4*a*h/((a**2+h**2)**(3/2))\n    s=4*a*h/((a**2+h**2)**(1/2))\n    return l+s\ndef lateralsurface_parabolic_cap(a,h):\n    '''\n    Write a function to find the lateral surface area of a parabolic cap given side length a and height h.\n    '''\n    l"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r > 0 and h > 0:\n        return 2*r*math.pi + 2*r*math.sqrt(r**2 + h**2)\n    else:\n        return None\nprint(lateralsurface_cone(1,1))\nprint(lateralsurface_cone(2,3))\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #return math.pi * r * r * h\n    return math.pi * r * r\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*(r**2)*math.sin(h)\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace(',', '_')\n    text = text.replace('.', '_')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Write your code here\n    #print(\"in function replace_specialchar\")\n    text = text.replace(\".\",\":\")\n    text = text.replace(\"  \",\":\")\n    text = text.replace(\" \",\":\")\n    text = text.replace(\",\",\":\")\n    #print(\"after function replace_specialchar\")\n    return text\ndef extract_info_from_text(text):\n    '''\n    Write a function to extract all numbers, letters, and capital letters from a string and return it as a string.\n    '''\n    # Write your code here\n    #print(\"in function extract_info_from_text\")\n    #print(\"text:\",text)\n    text = replace_specialchar(text)\n    #print(\"text:\",text)\n    #text = re.sub(r'\\d+','',text)\n    text = re.sub(r'\\d','',text)\n    #print(\"after function extract_info_from_text\")\n    #print(\"text:\",text)\n    #print(\"return text:\",text)\n    return text\ndef make_uppercase_lowercase(text):\n    '''\n    Write a function to swap the case of every letter in a string.\n    '''\n    # Write your code here\n    #print(\"in function make_uppercase_lowercase\")\n    #print(\"text:\",text)\n    text = text.lower()\n    #print(\"after function make_uppercase_lowercase\")\n    #print(\"text:\",text)\n    text = text.upper()\n    #print(\"after function make_uppercase_lowercase\")\n    #print(\"text:\",text)\n    return text\ndef split_string_by_regex(text):\n    '''\n    Write a function to split a string into a list based on regex\n    '''\n    # Write your code here\n    #print(\"in function split_string_by_regex\")\n    #print(\"text:\",text)\n    list_of_strings = re.split('[^a-zA-Z0-9]',text)\n    #print(\"after function split_string_by_regex\")\n    #print(\"list_of_strings:\",list_of_strings)\n    return list_of_strings\ndef make_string_uppercase_lowercase(text):\n    '''\n    Write a function to capitalize every first letter of a word\n    '''\n    # Write your code here\n    #print(\"in function make_string_uppercase_lowercase\")\n    #print(\"text:\",text)\n    text = text.title()\n    #print(\"after function make_string_uppercase_lowercase\")\n    #print(\"text:\",text)\n    return text\ndef remove_spaces(text):\n    '''\n    Write a function to remove all spaces from a string\n    '''\n    # Write your code here\n    #print(\"in function remove_spaces\")\n    #print(\"text:\",text)\n    text = text.replace(\" \",\"\")\n    #print(\"after function remove_spaces\")\n    #print(\"text:\",text)\n    return text\ndef remove_doubles(text):\n    '''\n    Write a function to remove double spaces from a string\n    '''\n    # Write your code here\n    #print(\"in function remove_doubles\")\n    #print(\"text:\",text)\n    text = text.replace(\"  \",\" \")\n    #print(\"after function remove_doubles\")\n    #print(\"text:\",text)\n    return text\ndef remove_all_doubles(text):\n    '''\n    Write a function to remove all double spaces from a string\n    '''\n    # Write your code here\n    #print(\"in function remove_all_doubles\")\n    #print(\"text:\",text)\n    text = text.replace(\"  \",\" \")\n    #print(\"after function remove_all_doubles\")\n    #print(\"text:\",text)\n    return text\ndef remove_all_doubles_and_spaces(text):\n    '''\n    Write a function to remove all double spaces from a string and removes spaces\n    '''\n    # Write your code here\n    #print(\"in function remove_all_doubles_and_spaces\")\n    #print(\"text:\",text)\n    text = text.replace(\"  \",\" \")\n    text = text.replace(\" \",\"\")\n    #print(\"after function remove_all_doubles_and_spaces\")\n    #print(\"text:\",text)\n    return text\ndef remove_all_doubles_and_spaces_in_reverse(text):\n    '''\n    Write a function to remove all double spaces from a string and removes spaces in reverse\n    '''\n    # Write your code here\n    #print(\"in function remove_all_doubles_and_spaces_in_reverse\")\n    #print(\"text:\",text)\n    text = text.replace(\"  \",\" \")\n    text = text.replace(\" \",\"\")\n    text = text[::-1]\n    #print(\"after function remove_all_doubles_and_spaces_in_reverse\")\n    #print(\"text:\",text)\n    return text\ndef remove_all_doubles_and_spaces_in_reverse_and_reverse_combo(text):\n    '''\n    Write a function to remove all double spaces from a string and removes spaces in reverse and reverse combo\n    '''\n    # Write your code here\n    #print(\"in function remove_all_doubles_and_spaces_in_reverse_and_reverse_combo\")\n    #print(\"text:\",text)\n    text = text.replace(\"  \",\" \")\n    text = text.replace(\" \",\"\")\n    text = text[::-1]\n    #print(\"after function remove_all_doubles_and_spaces_in_reverse_and_reverse_combo\")\n    #print(\"text:\",text)\n    return text\ndef remove_all_doubles_and_spaces_in_reverse_and_reverse_combo_in_reverse(text):\n    '''\n    Write a function to remove all double spaces from a string and removes spaces in reverse and reverse combo\n    '''\n    # Write your code here\n    #print(\"in function remove_all_doubles_and_spaces_in_reverse_and_reverse_combo_in_reverse\")\n    #print(\"text:\",text)\n    text = text.replace(\"  \",\" \")\n    text = text.replace(\" \",\"\")\n    text = text[::-1]\n    text = text[::-1]\n    #print(\"after function remove_all_doubles_and_spaces_in_reverse_and_reverse_combo_in_reverse\")\n    #print(\"text:\",text)\n    return text\ndef remove_all_doubles_and_spaces_in_reverse_and_reverse_combo_in_reverse_and_reverse(text):\n    '''\n    Write a function to remove all double spaces from a string and removes spaces in reverse and reverse combo\n    '''\n    # Write your code here\n    #print(\"in function remove_all_doubles_and_spaces_in_reverse_and_reverse_combo_in_reverse_and_reverse\")\n    #print(\"text:\",text)\n    text = text.replace(\"  \",\" \")\n    text = text.replace(\" \",\"\")\n    text = text[::-1]\n    text = text[::-1]\n    #print(\"after function remove_all_doubles_and_spaces_in_reverse_and_reverse_combo_in_reverse_and_reverse\")\n    #print(\"text:\",text)\n    return text\ndef remove_all_doubles_and_spaces_in_reverse_and_reverse_combo_in_reverse_and_reverse_in_reverse(text):\n    '''\n    Write a function to remove all double spaces from a string and removes spaces in reverse and reverse combo\n    '''\n    # Write your code here\n    #print(\"in function remove_all_doubles_and_spaces_in_reverse_and_reverse_combo_in_reverse_and_reverse_in_reverse\")\n    #print(\"text:\",text)\n    text = text.replace(\"  \",\" \")\n    text = text.replace(\" \",\"\")\n    text = text[::-1]\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #return re.sub(\"[\\,\\.]+\", \":\", text)\n    return text.replace(\",\", \":\").replace(\".\", \":\").replace(\" \", \":\")\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[\\.\\,\\ ]', ':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #text = text.replace(' ',':')\n    #text = text.replace(',',' :')\n    #text = text.replace('.',' :')\n    text = re.sub(r'\\s+|,|\\.', ':',text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # replacing commas with ':'\n    text=re.sub(',',':',text)\n    # replacing spaces with ':'\n    text=re.sub(' ',':',text)\n    # replacing dots with ':'\n    text=re.sub('\\.',':',text)\n    # replacing multiple spaces with one space\n    text=re.sub(' +','', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[^A-Za-z0-9]+', ':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,.]', ':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', ':')\n    text = text.replace('.', ':')\n    text = text.replace(',', ':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\".\",\":\")\n    text = text.replace(\",\",\":\")\n    text = text.replace(\" \",\":\")\n    return text\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if not A:\n        return -1\n    l, r = 0, len(A)\n    while l < r:\n        m = (l+r)//2\n        if A[m] > x:\n            r = m\n        elif A[m] < x:\n            l = m + 1\n        else:\n            r = m\n    return l if A[l] == x else -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    while start <= end:\n        mid = (start + end) / 2\n        if x == A[mid]:\n            return mid\n        elif x < A[mid]:\n            end = mid - 1\n        elif x > A[mid]:\n            start = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # A = [1,2,3,3,4,4,5,6]\n    # x = 3\n    # start = 0\n    # end = len(A)-1\n    # while start<=end:\n    #     mid = (start+end)/2\n    #     if A[mid] == x:\n    #         return mid\n    #     elif A[mid] > x:\n    #         end = mid-1\n    #     else:\n    #         start = mid+1\n    # return -1\n    if not A:\n        return -1\n    start = 0\n    end = len(A)-1\n    while start<=end:\n        mid = (start+end)/2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            end = mid-1\n        else:\n            start = mid+1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    left, right = 0, len(A)\n    while left < right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1] < x:\n                return mid\n            right = mid - 1\n        elif A[mid] > x:\n            right = mid\n        else:\n            left = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if x not in A:\n        return -1\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] > x:\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    j = len(A)\n    while i <= j:\n        mid = (i + j) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            j = mid - 1\n        else:\n            i = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A)-1\n    while start <= end:\n        mid = start + (end-start)/2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return None\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    low = 0\n    high = n-1\n    while low <= high:\n        mid = (low+high) / 2\n        if A[mid] == x and (mid == 0 or A[mid-1]!= x):\n            return mid\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return None\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    j = len(A)\n    while i < j:\n        mid = (i + j) / 2\n        if x < A[mid]:\n            j = mid\n        elif x > A[mid]:\n            i = mid + 1\n        else:\n            return mid\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    product_dict = {}\n    total_sum = 0\n    \n    for i in range(len(arr)):\n        product = 1\n        for j in range(i, len(arr)):\n            product *= arr[j]\n            total_sum += product\n            if product not in product_dict:\n                product_dict[product] = []\n            product_dict[product].append(j-i+1)\n    \n    return total_sum\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    subarrays = []\n    prod = 1\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            subarrays.append(arr[i:j + 1])\n            prod *= arr[i:j + 1]\n    print subarrays\n    return prod\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Bottom-Up approach\n    n = len(arr)\n    if n == 0:\n        return 0\n    # Store the cumulative product on the left\n    # as we find the sum of all subarrays\n    left = [1] * n\n    for i in range(1, n):\n        left[i] = arr[i-1] * left[i-1]\n    # Store the cumulative product on the right\n    # as we find the sum of all subarrays\n    right = [1] * n\n    for i in range(n-2, -1, -1):\n        right[i] = arr[i+1] * right[i+1]\n    # Now we traverse the array, and\n    # at every step multiply the current\n    # element with the product on left side\n    # and add with the product on the right side\n    # and keep track of the max\n    max_sum = -sys.maxsize - 1\n    for i in range(n):\n        max_sum = max(max_sum, arr[i] * left[i] * right[i])\n    return max_sum\n    \ndef max_Sum_Subarray(arr):\n    '''\n    Write a python function to find the maximum sum of the contiguous subarray in the given list. https://www.geeksforgeeks.org/maximum-sum-contiguous-subarray/\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    # Bottom-Up approach\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n    \ndef max_Sum_Subarray_Optimised(arr):\n    '''\n    Write a python function to find the maximum sum of the contiguous subarray in the given list. https://www.geeksforgeeks.org/maximum-sum-contiguous-subarray/\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_ending_here = arr[0]\n    max_ending_here_so_far = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_ending_here + arr[i]:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here = max_ending_here + arr[i]\n        if max_ending_here > max_ending_here_so_far:\n            max_ending_here_so_far = max_ending_here\n    return max_ending_here_so_far\n    \ndef min_Swap_2_3(arr):\n    '''\n    Write a python function to find the minimum number of swaps required to bring arr[] into non-decreasing order. https://www.geeksforgeeks.org/minimum-number-swaps-required-sort-array/\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        # Find index j such that arr[j] > arr[i]\n        j = i-1\n        while j >= 0 and arr[j] > arr[i]:\n            j -= 1\n        if j!= i:\n            arr[j], arr[i] = arr[i], arr[j]\n            count += 1\n    return count\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    sum = [0 for x in range(n)]\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    #using hashing\n    hash_dict = {}\n    hash_dict[0] = 0\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    subArrSum = [1]\n    for i in range(1, len(arr)):\n        subArrSum.append(subArrSum[-1] * arr[i - 1])\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    total = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            sub = arr[i:j+1]\n            sub_prod = 1\n            for k in sub:\n                sub_prod *= k\n            total += sub_prod\n    return total\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    total = 0\n    for i in xrange(len(arr)):\n        for j in xrange(i,len(arr)):\n            total += arr[i]*arr[j]\n    return total\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] * arr[1]\n    res = arr[0] * arr[1]\n    for i in xrange(2, len(arr)):\n        res = res + arr[i] * arr[i]\n    return res\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if not arr:\n        return 0\n    n = len(arr)\n    res = [0 for _ in range(n + 1)]\n    res[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            res[i] += arr[j] * res[i - j - 1]\n    return res[n]\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    lst = []\n    while n!= 0:\n        lst.append(n%2)\n        n //= 2\n    \n    lst = lst[::-1]\n    lst.append(0)\n    lst.append(0)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return int('{:b}'.format(n)[1:-1] + '1' + '{:b}'.format(n)[0], 2)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    binary_rep = bin(n)\n    binary_rep = binary_rep[:2] + '0' + binary_rep[2:-1] + '1' + binary_rep[-1]\n    return int(binary_rep, 2)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = ~(~0 << (n.bit_length() - 2))\n    return (n ^ mask)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n ^ (n >> 1)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = ~(n & 0x55555555)\n    n = n ^ (n & mask)\n    n = n ^ (n & mask)\n    n = n ^ (n & mask)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = ~(~0 << n)  \n    return mask & n\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n ^ (n & 1)  + (n & 2)  + (n & 4)  + (n & 8)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # a = int(bin(n)[2:])\n    # b = a ^ (2**(len(bin(n)[2:])) - 1)\n    # print(b)\n    # return b\n    return n ^ (2**(len(bin(n)[2:])) - 1)\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pos = bisect.bisect_left(a, x)\n    if pos < len(a) and a[pos] == x:\n        return pos\n    else:\n        return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    \n    return bisect.bisect_left(a, x)\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # if x is not present in the array, the insertion point would be the last value\n    insertion_point = len(a)\n    \n    # If x is greater than all the elements to its left, x will be the only element\n    if x > a[0]:\n        return 0\n    \n    # If x is less than all the elements to its left, insert it between the first and last elements\n    if x < a[len(a)-1]:\n        insertion_point = bisect.bisect_left(a, x)\n    \n    # if x is equal to all the elements to its left, x will be the first element\n    if x == a[0]:\n        return 0\n    \n    # if x is equal to all the elements to its right, insert it before the last element\n    if x == a[len(a)-1]:\n        insertion_point = len(a)-1\n    \n    return insertion_point\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i==0:\n        return 0\n    else:\n        if a[i-1]!=x:\n            return i\n        else:\n            return i-1\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # print(x)\n    if x < a[0]:\n        return 0\n    i = 0\n    while i < len(a):\n        if a[i] == x:\n            return i\n        elif a[i] > x:\n            return i\n        i += 1\n    return len(a)\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pos = bisect.bisect_left(a, x)\n    return pos\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pos = bisect.bisect_right(a, x)\n    return pos\ndef find_min_max(a):\n    '''\n    Write a function to find the min and max elements of a list. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-23.php\n    '''\n    min = a[0]\n    max = a[0]\n    for i in a:\n        if min > i:\n            min = i\n        elif max < i:\n            max = i\n    return (min, max)\ndef lca(a, b, c, d):\n    '''\n    Write a function to find the lowest common ancestor of two given nodes in a binary tree. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-23.php\n    '''\n    min_node = min(a, b, c, d)\n    max_node = max(a, b, c, d)\n    if max_node < min_node:\n        max_node, min_node = min_node, max_node\n    diff = max_node - min_node\n    if diff == 1:\n        return min_node\n    elif diff == 2:\n        return max_node\n    elif diff == 3:\n        return min_node\n    elif diff == 4:\n        return max_node\ndef print_node(node):\n    '''\n    Write a function to print a node of a tree. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-23.php\n    '''\n    print(node.val, end=' ')\n    if node.left!= None:\n        print_node(node.left)\n    if node.right!= None:\n        print_node(node.right)\ndef print_preorder(node):\n    '''\n    Write a function to print a tree in preorder (root -> left -> right). https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-23.php\n    '''\n    if node!= None:\n        print(node.val, end=' ')\n        print_preorder(node.left)\n        print_preorder(node.right)\ndef print_inorder(node):\n    '''\n    Write a function to print a tree in inorder (left -> root -> right). https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-23.php\n    '''\n    if node!= None:\n        print_inorder(node.left)\n        print(node.val, end=' ')\n        print_inorder(node.right)\ndef print_postorder(node):\n    '''\n    Write a function to print a tree in postorder (left -> right -> root). https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-23.php\n    '''\n    if node!= None:\n        print_postorder(node.left)\n        print_postorder(node.right)\n        print(node.val, end=' ')\ndef print_breadth(node):\n    '''\n    Write a function to print a tree in breadth-first search. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-23.php\n    '''\n    level = 1\n    queue = [node]\n    while len(queue)!= 0:\n        print(queue[0].val)\n        if queue[0].left!= None:\n            queue.append(queue[0].left)\n        if queue[0].right!= None:\n            queue.append(queue[0].right)\n        queue = queue[1:]\n        level += 1\ndef dfs_in_order(node, order):\n    '''\n    Write a function to do inorder traversal of a tree. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-23.php\n    '''\n    if node!= None:\n        dfs_in_order(node.left, order)\n        order.append(node.val)\n        dfs_in_order(node.right, order)\ndef dfs_pre_order(node, order):\n    '''\n    Write a function to do preorder traversal of a tree. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-23.php\n    '''\n    if node!= None:\n        order.append(node.val)\n        dfs_pre_order(node.left, order)\n        dfs_pre_order(node.right, order)\ndef dfs_post_order(node, order):\n    '''\n    Write a function to do postorder traversal of a tree. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-23.php\n    '''\n    if node!= None:\n        dfs_post_order(node.left, order)\n        dfs_post_order(node.right, order)\n        order.append(node.val)\ndef bfs_tree(node):\n    '''\n    Write a function to do breadth-first search of a tree. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-23.php\n    '''\n    queue = [node]\n    while len(queue)!= 0:\n        print(queue[0].val)\n        if queue[0].left!= None:\n            queue.append(queue[0].left)\n        if queue[0].right!= None:\n            queue.append(queue[0].right)\n        queue = queue[1:]\ndef sum_of_path_numbers(node):\n    '''\n    Write a function to find the sum of the path numbers for each node in a tree. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-23.php\n    '''\n    s = 0\n    if node!= None:\n        s += node.val\n        if node.left!= None:\n            s += sum_of_path_numbers(node.left)\n        if node.right!= None:\n            s += sum_of_path_numbers(node.right)\n    return s\ndef find_height(node):\n    '''\n    Write a function to find the height of a tree. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-23.php\n    '''\n    if node == None:\n        return 0\n    lh = find_height(node.left)\n    rh = find_height(node.right)\n    if lh > rh:\n        return lh + 1\n    else:\n        return rh + 1\ndef count_all_path(node, count, temp):\n    '''\n    Write a function to count the number of paths in a tree. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-2"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pos = bisect.bisect_left(a, x)\n    return pos\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return 0\n    else:\n        l = len(a)\n        i = bisect.bisect_left(a, x)\n        return i if i < l else l\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return 0\n    else:\n        l = len(a)\n        i = bisect.bisect_right(a, x)\n        return i if i < l else l\ndef left_search(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return -1\n    else:\n        l = len(a)\n        i = bisect.bisect_left(a, x)\n        return -1 if i == l else i\ndef right_search(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return -1\n    else:\n        l = len(a)\n        i = bisect.bisect_right(a, x)\n        return -1 if i == l else i\ndef test_left_insert():\n    a = [1, 2, 3, 4, 5]\n    x = 1\n    assert(left_insertion(a, x) == 0)\n    assert(left_insertion(a, 5) == 5)\n    assert(left_insertion(a, 10) == 5)\n    assert(left_insertion(a, 6) == 5)\n    assert(left_insertion(a, 4) == 4)\n    assert(left_insertion(a, 2) == 2)\n    assert(left_insertion(a, 0) == 0)\n    assert(left_insertion(a, -1) == 0)\n    assert(left_insertion(a, 100) == 0)\n    print('Passed all tests!')\ndef test_right_insert():\n    a = [1, 2, 3, 4, 5]\n    x = 1\n    assert(right_insertion(a, x) == 1)\n    assert(right_insertion(a, 5) == 5)\n    assert(right_insertion(a, 10) == 5)\n    assert(right_insertion(a, 6) == 6)\n    assert(right_insertion(a, 4) == 4)\n    assert(right_insertion(a, 2) == 4)\n    assert(right_insertion(a, 0) == 0)\n    assert(right_insertion(a, -1) == 0)\n    assert(right_insertion(a, 100) == 0)\n    print('Passed all tests!')\ndef test_left_search():\n    a = [1, 2, 3, 4, 5]\n    x = 1\n    assert(left_search(a, x) == 0)\n    assert(left_search(a, 5) == 4)\n    assert(left_search(a, 10) == -1)\n    assert(left_search(a, 6) == -1)\n    assert(left_search(a, 4) == 2)\n    assert(left_search(a, 2) == 1)\n    assert(left_search(a, 0) == -1)\n    assert(left_search(a, -1) == -1)\n    assert(left_search(a, 100) == -1)\n    print('Passed all tests!')\ndef test_right_search():\n    a = [1, 2, 3, 4, 5]\n    x = 1\n    assert(right_search(a, x) == 1)\n    assert(right_search(a, 5) == 4)\n    assert(right_search(a, 10) == -1)\n    assert(right_search(a, 6) == -1)\n    assert(right_search(a, 4) == 2)\n    assert(right_search(a, 2) == 1)\n    assert(right_search(a, 0) == -1)\n    assert(right_search(a, -1) == -1)\n    assert(right_search(a, 100) == -1)\n    print('Passed all tests!')\ndef test_left_insertion_with_loop():\n    a = [1, 2, 3, 4, 5]\n    x = 1\n    assert(left_insertion(a, x) == 0)\n    assert(left_insertion(a, 5) == 4)\n    assert(left_insertion(a, 10) == 4)\n    assert(left_insertion(a, 6) == 4)\n    assert(left_insertion(a, 4) == 3)\n    assert(left_insertion(a, 2) == 1)\n    assert(left_insertion(a, 0) == 0)\n    assert(left_insertion(a, -1) == 0)\n    assert(left_insertion(a, 100) == 0)\n    print('Passed all tests!')\ndef test_right_insertion_with_loop():\n    a = [1, 2, 3, 4, 5]\n    x = 1\n    assert(right_insertion(a, x) == 1)\n    assert(right_insertion(a, 5) == 4)\n    assert(right_insertion(a, 10) == 4)\n    assert(right_insertion(a, 6) == 5)\n    assert(right_insertion(a, 4) == 3)\n    assert(right_insertion(a, 2) == 2)\n    assert(right_insertion(a, 0) == 0)\n    assert(right_insertion(a, -1) == 0)\n    assert(right_insertion(a, 100) == 0)\n    print('Passed all tests!')\ndef test_left_search_with_loop():\n    a = [1, 2, 3, 4, 5]\n    x = 1\n    assert(left_search(a, x) == 0)\n    assert(left_search(a, 5) == 4)\n    assert(left_search(a, 10) == -1)\n    assert(left_search(a, 6) == -1)\n    assert(left_search(a, 4) == 3)\n    assert(left_search(a, 2) == 1)\n    assert(left_search(a, 0) == 0)\n    assert(left_search(a, -1) == 0)\n    assert(left_search(a, 100) == 0)\n    print('Passed all tests!')\ndef test_right_search_with_loop():\n    a = [1, 2, 3, 4, 5]\n    x = 1\n    assert(right_search(a, x) == 1)\n    assert(right_search(a, 5) == 4)\n    assert(right_search(a, 10) == -1)\n    assert(right_search(a, 6) == -1)\n    assert(right_search(a, 4) == 3)\n    assert(right_search(a, 2) == 2)\n    assert(right_search(a, 0) == 0)\n    assert(right_search(a, -1) == 0)\n    assert(right_search(a, 100) == 0)\n    print('Passed all tests!')\ndef test_left_insertion_with_list_of_numbers():\n    a = [1, 2, 3, 4, 5]\n    x = 1\n    assert(left_insertion(a, x) == 0)\n    assert(left_insertion"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if not a:\n        return None\n    i = bisect.bisect_left(a, x)\n    if i==len(a):\n        return i\n    if a[i]==x:\n        return i\n    elif a[i]>x:\n        return i\n    else:\n        return i+1\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex,string):\n        print \"The string is starting with vowel\"\n    else:\n        print \"The string is not starting with vowel\"\n    \n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string): \n        return True\n    return False\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    result = re.findall(regex, string) \n    if result:\n        return 'Found'\n    else:\n        return 'Not Found'\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex, string))\nif __name__ == '__main__':\n    string = input()\n    if check_str(string): \n        print('True')\n    else: \n        print('False')"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string): \n        return True \n    else: \n        return False\nprint(check_str('a'))\nprint(check_str('A'))\nprint(check_str('an'))\nprint(check_str('An'))\nprint(check_str('aaaa'))\nprint(check_str('Aa'))\nprint(check_str('an'))\nprint(check_str('An'))\nprint(check_str('abc'))\nprint(check_str('b'))\nprint(check_str('a_b'))\nprint(check_str('a_'))\nprint(check_str('_'))\nprint(check_str('_a'))\nprint(check_str('_a_'))\nprint(check_str('_'))\nprint(check_str('_'))\nprint(check_str('_a'))\nprint(check_str('_a_'))\nprint(check_str('_'))\nprint(check_str('_'))\nprint(check_str('a_b_c'))\nprint(check_str('a_b_'))\nprint(check_str('_a_b_'))\nprint(check_str('_a_b'))\nprint(check_str('_a_b_c_'))\nprint(check_str('a_b_'))\nprint(check_str('a_b_c_'))\nprint(check_str('_a_b_c_'))\nprint(check_str('_a_b_c'))\nprint(check_str('a_b_c'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_'))\nprint(check_str('a_b_c_')"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex, string))\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string): \n        print('Yes!')\n    else:\n        print('No!')\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.search(regex,string)): \n        print(\"Yes\")\n    else: \n        print(\"No\")\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.search(regex, string)\n    if match:\n        return True\n    return False\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string):\n        print \"Yes\"\n    else:\n        print \"No\"\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n < 2:\n        return 1\n    else:\n        return (1/n) * (geometric_sum(n-1))\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 1.0/float(n - 1) * (geometric_sum(n - 1))\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return 1 / (1 - 1 / n)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return 1 + (1/n)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return (1/n) * (geometric_sum(n-1))\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/n) + (geometric_sum(n-1))\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n<=0:\n        return 0\n    n = int(n)\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    index = 1\n    while n>=index*(index+1)/2:\n        index += 1\n    return index\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    a = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if (n == 0): \n        return 0\n    a = (int)(n * (n + 1) / 2)\n    return n * (n + 1) / 2 - (a + 1) + n\ndef find_Index_2(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if (n == 0): \n        return 0\n    a = (int)(n * (n + 1) / 2)\n    return n * (n + 1) / 2 - (a + 1) + n\ndef is_Prime(n): \n    '''\n    Write a python function to find whether n is a prime number or not.\n    '''\n    if (n == 1): \n        return False\n    elif (n == 2): \n        return True\n    else: \n        for i in range(2, n): \n            if (n % i == 0): \n                return False\n        return True\ndef is_Prime_2(n): \n    '''\n    Write a python function to find whether n is a prime number or not.\n    '''\n    if (n == 1): \n        return False\n    elif (n == 2): \n        return True\n    else: \n        if (n % 2 == 0): \n            return False\n        for i in range(3, int(math.sqrt(n)) + 1): \n            if (n % i == 0): \n                return False\n        return True\ndef is_Prime_3(n): \n    '''\n    Write a python function to find whether n is a prime number or not.\n    '''\n    if (n == 1): \n        return False\n    elif (n == 2): \n        return True\n    else: \n        if (n % 2 == 0): \n            return False\n        for i in range(3, int(math.sqrt(n)) + 1): \n            if (n % i == 0): \n                return False\n        return True\ndef is_Prime_4(n): \n    '''\n    Write a python function to find whether n is a prime number or not.\n    '''\n    if (n == 1): \n        return False\n    elif (n == 2): \n        return True\n    else: \n        if (n % 2 == 0): \n            return False\n        for i in range(3, int(math.sqrt(n)) + 1, 2): \n            if (n % i == 0): \n                return False\n        return True\ndef is_Prime_5(n): \n    '''\n    Write a python function to find whether n is a prime number or not.\n    '''\n    if (n == 1): \n        return False\n    elif (n == 2): \n        return True\n    else: \n        if (n % 2 == 0): \n            return False\n        for i in range(3, int(math.sqrt(n)) + 1): \n            if (n % i == 0): \n                return False\n        return True\ndef is_Prime_6(n): \n    '''\n    Write a python function to find whether n is a prime number or not.\n    '''\n    if (n == 1): \n        return False\n    elif (n == 2): \n        return True\n    else: \n        if (n % 2 == 0): \n            return False\n        for i in range(3, int(math.sqrt(n)) + 1, 2): \n            if (n % i == 0): \n                return False\n        return True\ndef is_Prime_7(n): \n    '''\n    Write a python function to find whether n is a prime number or not.\n    '''\n    if (n == 1): \n        return False\n    elif (n == 2): \n        return True\n    else: \n        if (n % 2 == 0): \n            return False\n        for i in range(3, int(math.sqrt(n)) + 1): \n            if (n % i == 0): \n                return False\n        return True\ndef is_Prime_8(n): \n    '''\n    Write a python function to find whether n is a prime number or not.\n    '''\n    if (n == 1): \n        return False\n    elif (n == 2): \n        return True\n    else: \n        if (n % 2 == 0): \n            return False\n        for i in range(3, int(math.sqrt(n)) + 1, 2): \n            if (n % i == 0): \n                return False\n        return True\ndef is_Prime_9(n): \n    '''\n    Write a python function to find whether n is a prime number or not.\n    '''\n    if (n == 1): \n        return False\n    elif (n == 2): \n        return True\n    else: \n        if (n % 2 == 0): \n            return False\n        for i in range(3, int(math.sqrt(n)) + 1, 2): \n            if (n % i == 0): \n                return False\n        return True\ndef is_Prime_10(n): \n    '''\n    Write a python function to find whether n is a prime number or not.\n    '''\n    if (n == 1): \n        return False\n    elif (n == 2): \n        return True\n    else: \n        if (n % 2 == 0): \n            return False\n        for i in range(3, int(math.sqrt(n)) + 1, 2): \n            if (n % i == 0): \n                return False\n        return True\ndef is_Prime_11(n): \n    '''\n    Write a python function to find whether n is a prime number or not.\n    '''\n    if (n == 1): \n        return False\n    elif (n == 2): \n        return True\n    else: \n        if (n % 2 == 0): \n            return False\n        for i in range(3, int(math.sqrt(n)) + 1, 2): \n            if (n % i == 0): \n                return False\n        return True\ndef is_Prime_12(n): \n    '''\n    Write a python function to find whether n is a prime number or not.\n    '''\n    if (n == 1): \n        return False\n    elif (n == 2): \n        return True\n    else: \n        if (n % 2 == 0): \n            return False\n        for i in range(3, int(math.sqrt(n)) + 1, 2): \n            if (n % i == 0): \n                return False\n        return True\ndef is_Prime_13(n): \n    '''\n    Write a python function to find whether n is a prime number or not.\n    '''\n    if (n == 1): \n        return False\n    elif (n == 2): \n        return True\n    else: \n        if (n % 2 == 0): \n            return False\n        for i in range(3, int(math.sqrt(n)) + 1, 2): \n            if (n % i == 0): \n                return False\n        return True\ndef is_Prime_14(n): \n    '''\n    Write a python function to find whether n is a prime number or not.\n    '''\n    if (n == 1): \n        return False\n    elif (n == 2): \n        return True\n    else: \n        if (n % 2 == 0): \n            return False\n        for i in range(3, int(math.sqrt(n)) + 1, 2): \n            if (n % i == 0): \n                return False\n        return True\ndef is_Prime_15(n): \n    '''\n    Write a python function to find whether n is a prime number or not.\n    '''\n    if (n == 1): \n        return False\n    elif (n == 2): \n        return True\n    else: \n        if (n % 2 == 0): \n            return False\n        fo"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # initialize the list\n    t_num = [0] * 10001\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    import math \n    if n == 1: \n        return 1 \n    \n    #The formula for finding the index of triangular number with n digit is \n    # (n * (n + 1) * (n + 2)) / (6 * 10^n)\n    # n = 3 \n    #(3 * (3 + 1) * (3 + 2)) / (6 * 10^3) = 3 * 4/6 = 1.5\n    # n = 4 \n    #(4 * (4 + 1) * (4 + 2) * (4 + 3)) / (6 * 10^4) = 4 * 9/6 = 3.5\n    # n = 5 \n    #(5 * (5 + 1) * (5 + 2) * (5 + 3) * (5 + 4)) / (6 * 10^5) = 5 * 9 * 8/6 = 5.5\n    # n = 6 \n    #(6 * (6 + 1) * (6 + 2) * (6 + 3) * (6 + 4) * (6 + 5)) / (6 * 10^6) = 6 * 9 * 8 * 7/6 = 6.5\n    \n    return (n * (n + 1) * (n + 2)) / (6 * math.factorial(n))\ndef find_Digits(n): \n    '''\n    Write a python function to find the number of digits of smallest triangular number with n digits. https://www.geeksforgeeks.org/find-number-of-digits-of-smallest-triangular-number-with-n-digits/\n    '''\n    import math \n    if n == 1: \n        return 1 \n    \n    #The formula for finding the number of digits of triangular number with n digit is \n    # n * (n + 1) / 2\n    # n = 3 \n    #n * (n + 1) / 2 = 3 * 3/2 = 9\n    # n = 4 \n    #n * (n + 1) / 2 = 4 * 4/2 = 16\n    # n = 5 \n    #n * (n + 1) / 2 = 5 * 5/2 = 25\n    # n = 6 \n    #n * (n + 1) / 2 = 6 * 6/2 = 36\n    \n    return n * (n + 1) / 2\ndef find_Sum_Digits(n): \n    '''\n    Write a python function to find the sum of digits of smallest triangular number with n digits. https://www.geeksforgeeks.org/find-sum-of-digits-of-smallest-triangular-number-with-n-digits/\n    '''\n    import math \n    if n == 1: \n        return 1 \n    \n    #The formula for finding the sum of digits of triangular number with n digit is \n    # (n * (n + 1) / 2) * (1 + 2 + 3 +.. + n)\n    # n = 3 \n    #(3 * (3 + 1) / 2) * (1 + 2 + 3) = 3 * 9/2 = 3\n    # n = 4 \n    #(4 * (4 + 1) / 2) * (1 + 2 + 3 + 4) = 4 * 17/2 = 7\n    # n = 5 \n    #(5 * (5 + 1) / 2) * (1 + 2 + 3 + 4 + 5) = 5 * 19/2 = 11\n    # n = 6 \n    #(6 * (6 + 1) / 2) * (1 + 2 + 3 + 4 + 5 + 6) = 6 * 22/2 = 15\n    \n    return (n * (n + 1) / 2) * (1 + 2 + 3 + 4 + 5)\ndef find_Sum_Digits_ExceptOne(n): \n    '''\n    Write a python function to find the sum of digits of smallest triangular number with n digits, except the number that is 1. https://www.geeksforgeeks.org/find-sum-of-digits-of-smallest-triangular-number-with-n-digits-except-one/\n    '''\n    import math \n    if n == 1: \n        return 1 \n    \n    #The formula for finding the sum of digits of triangular number with n digit is \n    # (n * (n + 1) / 2) * (1 + 2 + 3 +.. + n) - 1\n    # n = 3 \n    #(3 * (3 + 1) / 2) * (1 + 2 + 3) = 3 * 9/2 - 1 = 3\n    # n = 4 \n    #(4 * (4 + 1) / 2) * (1 + 2 + 3 + 4) = 4 * 17/2 - 1 = 7\n    # n = 5 \n    #(5 * (5 + 1) / 2) * (1 + 2 + 3 + 4 + 5) = 5 * 19/2 - 1 = 11\n    # n = 6 \n    #(6 * (6 + 1) / 2) * (1 + 2 + 3 + 4 + 5 + 6) = 6 * 22/2 - 1 = 15\n    \n    return (n * (n + 1) / 2) * (1 + 2 + 3 + 4 + 5) - 1\ndef find_Sum_Digits_ExceptOne_2(n): \n    '''\n    Write a python function to find the sum of digits of smallest triangular number with n digits, except the number that is 1. https://www.geeksforgeeks.org/find-sum-of-digits-of-smallest-triangular-number-with-n-digits-except-one/\n    '''\n    import math \n    if n == 1: \n        return 1 \n    \n    #The formula for finding the sum of digits of triangular number with n digit is \n    # (n * (n + 1) / 2) * (1 + 2 + 3 +.. + n) - 1\n    # n = 3 \n    #(3 * (3 + 1) / 2) * (1 + 2 + 3) = 3 * 9/2 - 1 = 3\n    # n = 4 \n    #(4 * (4 + 1) / 2) * (1 + 2 + 3 + 4) = 4 * 17/2 - 1 = 7\n    # n = 5 \n    #(5 * (5 + 1) / 2) * (1 + 2 + 3 + 4 + 5) = 5 * 19/2 - 1 = 11\n    # n = 6 \n    #(6 * (6 + 1) / 2) * (1 + 2 + 3 + 4 + 5 + 6) = 6 * 22/2 - 1 = 15\n    \n    return (n * (n + 1) / 2) * (1 + 2 + 3 + 4 + 5) - 1\ndef find_Smallest_Triangular_Number(n): \n    '''\n    Write a python function to find the smallest triangular number with n digits. https://www.geeksforgeeks.org/smallest-triangular-number-with-n-digits/\n    '''\n    import math \n    if n == 1: \n        return 1 \n    \n    #The formula for finding the smallest triangular number with n digit is \n    # (n * (n + 1) * (n + 2)) / (6 * 10^n)\n    # n = 3 \n    #(3 * (3 + 1) * (3 + 2)) / (6 * 10^3) = 3 * 4/6 = 1.5\n    # n = 4 \n    #(4 * (4 + 1) * (4 + 2) * (4 + 3)) / (6 * 10^4) = 4 * 9/6 = 3.5\n    # n = 5 \n    #(5 * (5 + 1) * (5 + 2) * (5 + 3) * (5 + 4)) / (6 * 10^5) = 5 * 9 * 8/6 = 5.5\n    # n = 6 \n    #(6 * (6 + 1) * (6 + 2) * (6 + 3) * (6 + 4) * (6 + 5)) / (6 * 10^6) = 6 * 9 * 8 * 7/6 = 6.5\n    \n    return (n * (n + 1) * (n + 2)) / (6 * math.factorial(n))\ndef find_Smallest_Triangular_Number_2(n): \n    '"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = 1\n    triangle = 1\n    while index < n:\n        index += 1\n        triangle += index\n    return triangle\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int((n * (n + 1)) / 2)\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # iterative solution \n    i, j = 1, 1\n    while(i<=n): \n        j = 1\n        while(j<=i): \n            if(math.ceil(j*(j+1)/2)==i): \n                return int(i) \n            j+=1\n        i+=1\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = n+1\n    i = 1\n    while (i < 10**(n-1)): \n        i = i*10\n    return i\ndef number_of_digits(n): \n    '''\n    Write a python function to find the number of digits in a triangular number. https://www.geeksforgeeks.org/find-number-of-digits-in-a-triangular-number/\n    '''\n    count = 0\n    while n > 0:\n        n = n//10\n        count += 1\n    return count\ndef sum_of_digits(n): \n    '''\n    Write a python function to find the sum of digits in a triangular number. https://www.geeksforgeeks.org/sum-of-digits-in-a-triangular-number/\n    '''\n    n = n*(n+1)//2\n    n = n%10\n    return n\ndef reverse(n): \n    '''\n    Write a python function to reverse a triangular number. https://www.geeksforgeeks.org/reverse-a-triangular-number/\n    '''\n    n = n*(n+1)//2\n    return n\ndef count_digits(n):\n    '''\n    Write a python function to find the number of digits in a triangular number. https://www.geeksforgeeks.org/find-number-of-digits-in-a-triangular-number/\n    '''\n    count = 0\n    while n > 0:\n        n = n//10\n        count += 1\n    return count\ndef is_palindrome(n): \n    '''\n    Write a python function to find whether a triangular number is palindrome or not. https://www.geeksforgeeks.org/palindrome-triangular-number/\n    '''\n    rev_num = 0\n    temp = n\n    while n > 0:\n        rev_num = rev_num*10 + n%10\n        n = n//10\n    if temp == rev_num:\n        return True\n    else:\n        return False\ndef find_Palindromes(n): \n    '''\n    Write a python function to find all the palindromes less than n. https://www.geeksforgeeks.org/find-all-palindromes-less-than-n/\n    '''\n    # Asserts\n    assert(n>0)\n    palindromes = []\n    for i in range(0,n+1):\n        for j in range(0,n+1):\n            # print(i,j,i*j,i+j)\n            if is_palindrome(i*j):\n                palindromes.append(i*j)\n    return palindromes\ndef find_Palindromes_Prime(n): \n    '''\n    Write a python function to find all the palindromes less than n and prime numbers less than n. https://www.geeksforgeeks.org/find-all-palindromes-less-than-n-and-prime-numbers-less-than-n/\n    '''\n    # Asserts\n    assert(n>0)\n    palindromes = []\n    for i in range(0,n+1):\n        for j in range(0,n+1):\n            # print(i,j,i*j,i+j)\n            if is_palindrome(i*j):\n                if is_Prime(i*j):\n                    palindromes.append(i*j)\n    return palindromes\ndef is_Prime(n): \n    '''\n    Write a python function to find whether a number is prime or not. https://www.geeksforgeeks.org/find-whether-a-number-is-prime-or-not/\n    '''\n    # Asserts\n    assert(n>0)\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\ndef find_all_Prime_numbers_less_than(n): \n    '''\n    Write a python function to find all the prime numbers less than n. https://www.geeksforgeeks.org/find-all-prime-numbers-less-than-n/\n    '''\n    # Asserts\n    assert(n>0)\n    prime_numbers_less_than = []\n    for i in range(2,n):\n        if is_Prime(i):\n            prime_numbers_less_than.append(i)\n    return prime_numbers_less_than\ndef prime_number_sum(n): \n    '''\n    Write a python function to find the sum of prime numbers less than n. https://www.geeksforgeeks.org/find-the-sum-of-prime-numbers-less-than-n/\n    '''\n    # Asserts\n    assert(n>0)\n    prime_numbers_less_than = find_all_Prime_numbers_less_than(n)\n    return sum(prime_numbers_less_than)\ndef prime_number_product(n): \n    '''\n    Write a python function to find the product of prime numbers less than n. https://www.geeksforgeeks.org/find-the-product-of-prime-numbers-less-than-n/\n    '''\n    # Asserts\n    assert(n>0)\n    prime_numbers_less_than = find_all_Prime_numbers_less_than(n)\n    product = 1\n    for i in range(0,len(prime_numbers_less_than)):\n        product = product * prime_numbers_less_than[i]\n    return product\ndef triangular_number(n): \n    '''\n    Write a python function to find the triangular number. https://www.geeksforgeeks.org/triangular-number/\n    '''\n    # Asserts\n    assert(n>0)\n    return n*(n+1)//2\ndef triangular_number_of_digits(n): \n    '''\n    Write a python function to find the triangular number of digits. https://www.geeksforgeeks.org/triangular-number-of-digits/\n    '''\n    # Asserts\n    assert(n>0)\n    num_of_digits = count_digits(n)\n    return num_of_digits\ndef sum_of_digits_of_triangular_number_of_digits(n): \n    '''\n    Write a python function to find the sum of digits of triangular number of digits. https://www.geeksforgeeks.org/sum-of-digits-of-triangular-number-of-digits/\n    '''\n    # Asserts\n    assert(n>0)\n    return n*(n+1)*(n+2)//6\ndef sum_of_digits_of_triangular_number(n): \n    '''\n    Write a python function to find the sum of digits of triangular number. https://www.geeksforgeeks.org/sum-of-digits-of-triangular-number/\n    '''\n    # Asserts\n    assert(n>0)\n    triangular_number_of_digits = triangular_number_of_digits(n)\n    sum_of_digits = sum_of_digits(triangular_number_of_digits)\n    return sum_of_digits\ndef triangular_number_of_digits_of_sum_of_digits(n): \n    '''\n    Write a python function to find the triangular number of digits of sum of digits. https://www.geeksforgeeks.org/triangular-number-of-digits-of-sum-of-digits/\n    '''\n    # Asserts\n    assert(n>0)\n    return n*(n+1)*(n+2)//6\ndef triangular_number_of_digits_of_sum_of_digits_of_triangular_number(n): \n    '''\n    Write a python function to find the triangular number of digits of sum of digits of triangular number. https://www.geeksforgeeks.org/triangular-number-of-digits-of-sum-of-digits-o"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        triangular_number = n*(n+1)/2\n        n_digits = 1\n        triangular_number_n_digits = triangular_number * 10**n_digits\n        while True:\n            if triangular_number_n_digits == int(str(triangular_number_n_digits)[:n]):\n                break\n            n_digits+=1\n            triangular_number_n_digits = triangular_number * 10**n_digits\n        return n_digits\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup[1:]))\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[i]:test_tup[i+1] for i in range(0, len(test_tup), 2)}\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {i:test_tup[i] for i in range(0,len(test_tup),2)}\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(0,len(test_tup),2):\n        if i+1<len(test_tup):\n            d[test_tup[i]]=test_tup[i+1]\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if isinstance(test_tup, tuple):\n        return dict(zip(test_tup, test_tup[1:]))\n    else:\n        raise TypeError(\"The given tuple is not a tuple\")\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    if len(test_tup) % 2!= 0:\n        return None\n    else:\n        for i in range(0,len(test_tup),2):\n            d[test_tup[i]] = test_tup[i+1]\n        return d\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # pair = {}\n    # for i in range(0, len(test_tup), 2):\n    #     pair[test_tup[i]] = test_tup[i + 1]\n    # return pair\n    return dict(zip(test_tup[::2], test_tup[1::2]))\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2],test_tup[1::2]))\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    #string_list = list(test_tup)\n    #print(string_list)\n    #for i in string_list:\n        #print(i)\n    #for i in string_list:\n        #print(i)\n    #list_of_tuples = []\n    #for i in range(0,len(string_list),2):\n        #list_of_tuples.append(string_list[i]+string_list[i+1])\n        #print(string_list[i]+string_list[i+1])\n    #return dict(list_of_tuples)\n    return dict(zip(test_tup[0::2], test_tup[1::2]))\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_in = {}\n    for index, item in enumerate(test_tup):\n        if index % 2 == 0:\n            dict_in[item] = test_tup[index + 1]\n    return dict_in\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    \n    flag = 1\n    for i in s :\n        if i!= s[0] :\n            flag = 0\n            break\n    if flag == 1 :\n        return 1\n    else :\n        return 0\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in s :\n        if s.count(i) > 1 :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # your code goes here\n    return len(set(s)) == 1\n    # print(all_Characters_Same(\"hello\"))\n    # print(all_Characters_Same(\"ll\"))\n    # print(all_Characters_Same(\"ll\"))\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in s:\n        if i not in s[1:] :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)) :\n        if s[i]!= s[0] :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if s.count(s[0]) == len(s):\n        return True\n    else :\n        return False\n        \ndef all_Characters_Diff(s) :\n    '''\n    Write a python function to check whether all the characters are different or not.\n    '''\n    if s.count(s[0]) == len(s) - 1:\n        return True\n    else :\n        return False\n        \ndef all_Characters_Same_Alternate(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    l = len(s)\n    if s[0] == s[l-1]:\n        return True\n    else :\n        return False\n        \ndef all_Characters_Alternate(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(1, len(s)) :\n        if s[i-1]!= s[i] :\n            return False\n    return True\n        \ndef upper_case_Characters_Alternate(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(0, len(s)) :\n        if s[i].isupper() :\n            return False\n    return True\n        \ndef lower_case_Characters_Alternate(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(0, len(s)) :\n        if s[i].islower() :\n            return False\n    return True\n        \ndef space_Characters_Alternate(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(0, len(s)) :\n        if s[i] =='' :\n            return False\n    return True\n        \ndef number_Characters_Alternate(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(0, len(s)) :\n        if s[i].isdigit() :\n            return False\n    return True\n        \ndef alphabet_Characters_Alternate(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(0, len(s)) :\n        if s[i].isalpha() :\n            return False\n    return True\n        \ndef special_Characters_Alternate(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(0, len(s)) :\n        if s[i].isalnum() :\n            return False\n    return True\n        \ndef special_Characters_Except_Digits_Alternate(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(0, len(s)) :\n        if s[i].isalnum() :\n            return False\n    return True\n        \ndef special_Characters_Except_Lower_Case_Alternate(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(0, len(s)) :\n        if s[i].isalnum() :\n            return False\n    return True\n        \ndef special_Characters_Except_Upper_Case_Alternate(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(0, len(s)) :\n        if s[i].isalnum() :\n            return False\n    return True\n        \ndef special_Characters_Except_Special_Chars_Alternate(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(0, len(s)) :\n        if s[i].isalnum() :\n            return False\n    return True\n        \ndef special_Characters_Except_Special_Chars_Alternate_Case(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(0, len(s)) :\n        if s[i].isalnum() :\n            return False\n    return True\n        \ndef special_Characters_Except_Special_Chars_Alternate_Case_2(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(0, len(s)) :\n        if s[i].isalnum() :\n            return False\n    return True\n        \ndef special_Characters_Except_Special_Chars_Alternate_Case_3(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(0, len(s)) :\n        if s[i].isalnum() :\n            return False\n    return True\n        \ndef special_Characters_Except_Special_Chars_Alternate_Case_4(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(0, len(s)) :\n        if s[i].isalnum() :\n            return False\n    return True\n        \ndef special_Characters_Except_Special_Chars_Alternate_Case_5(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(0, len(s)) :\n        if s[i].isalnum() :\n            return False\n    return True\n        \ndef special_Characters_Except_Special_Chars_Alternate_Case_6(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(0, len(s)) :\n        if s[i].isalnum() :\n            return False\n    return True\n        \ndef special_Characters_Except_Special_Chars_Alternate_Case_7(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(0, len(s)) :\n        if s[i].isalnum() :\n            return False\n    return True\n        \ndef special_Characters_Except_Special_Chars_Alternate_Case_8(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(0, len(s)) :\n        if s[i].isalnum() :\n            return False\n    return True\n        \ndef special_Characters_Except_Special_Chars_Alternate_Case_9(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(0, len(s)) :\n        if s[i].isalnum() :\n            return False\n    return True\n        \ndef special_Characters_Except_Special_Chars_Alternate_Case_10(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(0, len(s)) :\n        if s[i].isalnum() :\n            return False\n    return True\n        \ndef special_Characters_Except_Special_Chars_Alternate_Case_11(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(0, len(s)) :\n        if s[i].isalnum() :\n            return False\n    return True\n        \ndef special_Characters_Except_Special_Chars_Alternate_Case_12(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(0, len(s)) :\n        if s[i].isalnum() :\n            return False\n    return True\n        \ndef special_Characters_Except_Special_Chars_Alternate_Case_1"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    l = list(s)\n    for i in l:\n        if(l.count(i)!=len(l)):\n            return False\n    return True\ndef all_Digits_Same(s) :\n    '''\n    Write a python function to check whether all the digits are same or not.\n    '''\n    l = list(s)\n    for i in l:\n        if(l.count(i)!=len(l)):\n            return False\n    return True\ndef all_Digits_Same(s) :\n    '''\n    Write a python function to check whether all the digits are same or not.\n    '''\n    l = list(s)\n    for i in l:\n        if(l.count(i)!=len(l)):\n            return False\n    return True\ndef all_Digits_Same(s) :\n    '''\n    Write a python function to check whether all the digits are same or not.\n    '''\n    l = list(s)\n    for i in l:\n        if(l.count(i)!=len(l)):\n            return False\n    return True\ndef all_Digits_Same(s) :\n    '''\n    Write a python function to check whether all the digits are same or not.\n    '''\n    l = list(s)\n    for i in l:\n        if(l.count(i)!=len(l)):\n            return False\n    return True\ndef all_Digits_Same(s) :\n    '''\n    Write a python function to check whether all the digits are same or not.\n    '''\n    l = list(s)\n    for i in l:\n        if(l.count(i)!=len(l)):\n            return False\n    return True\ndef all_Digits_Same(s) :\n    '''\n    Write a python function to check whether all the digits are same or not.\n    '''\n    l = list(s)\n    for i in l:\n        if(l.count(i)!=len(l)):\n            return False\n    return True\ndef all_Digits_Same(s) :\n    '''\n    Write a python function to check whether all the digits are same or not.\n    '''\n    l = list(s)\n    for i in l:\n        if(l.count(i)!=len(l)):\n            return False\n    return True\ndef all_Digits_Same(s) :\n    '''\n    Write a python function to check whether all the digits are same or not.\n    '''\n    l = list(s)\n    for i in l:\n        if(l.count(i)!=len(l)):\n            return False\n    return True\ndef all_Digits_Same(s) :\n    '''\n    Write a python function to check whether all the digits are same or not.\n    '''\n    l = list(s)\n    for i in l:\n        if(l.count(i)!=len(l)):\n            return False\n    return True\ndef all_Digits_Same(s) :\n    '''\n    Write a python function to check whether all the digits are same or not.\n    '''\n    l = list(s)\n    for i in l:\n        if(l.count(i)!=len(l)):\n            return False\n    return True\ndef all_Digits_Same(s) :\n    '''\n    Write a python function to check whether all the digits are same or not.\n    '''\n    l = list(s)\n    for i in l:\n        if(l.count(i)!=len(l)):\n            return False\n    return True\ndef all_Digits_Same(s) :\n    '''\n    Write a python function to check whether all the digits are same or not.\n    '''\n    l = list(s)\n    for i in l:\n        if(l.count(i)!=len(l)):\n            return False\n    return True\ndef all_Digits_Same(s) :\n    '''\n    Write a python function to check whether all the digits are same or not.\n    '''\n    l = list(s)\n    for i in l:\n        if(l.count(i)!=len(l)):\n            return False\n    return True\ndef all_Digits_Same(s) :\n    '''\n    Write a python function to check whether all the digits are same or not.\n    '''\n    l = list(s)\n    for i in l:\n        if(l.count(i)!=len(l)):\n            return False\n    return True\ndef all_Digits_Same(s) :\n    '''\n    Write a python function to check whether all the digits are same or not.\n    '''\n    l = list(s)\n    for i in l:\n        if(l.count(i)!=len(l)):\n            return False\n    return True\ndef all_Digits_Same(s) :\n    '''\n    Write a python function to check whether all the digits are same or not.\n    '''\n    l = list(s)\n    for i in l:\n        if(l.count(i)!=len(l)):\n            return False\n    return True\ndef all_Digits_Same(s) :\n    '''\n    Write a python function to check whether all the digits are same or not.\n    '''\n    l = list(s)\n    for i in l:\n        if(l.count(i)!=len(l)):\n            return False\n    return True\ndef all_Digits_Same(s) :\n    '''\n    Write a python function to check whether all the digits are same or not.\n    '''\n    l = list(s)\n    for i in l:\n        if(l.count(i)!=len(l)):\n            return False\n    return True\ndef all_Digits_Same(s) :\n    '''\n    Write a python function to check whether all the digits are same or not.\n    '''\n    l = list(s)\n    for i in l:\n        if(l.count(i)!=len(l)):\n            return False\n    return True\ndef all_Digits_Same(s) :\n    '''\n    Write a python function to check whether all the digits are same or not.\n    '''\n    l = list(s)\n    for i in l:\n        if(l.count(i)!=len(l)):\n            return False\n    return True\ndef all_Digits_Same(s) :\n    '''\n    Write a python function to check whether all the digits are same or not.\n    '''\n    l = list(s)\n    for i in l:\n        if(l.count(i)!=len(l)):\n            return False\n    return True\ndef all_Digits_Same(s) :\n    '''\n    Write a python function to check whether all the digits are same or not.\n    '''\n    l = list(s)\n    for i in l:\n        if(l.count(i)!=len(l)):\n            return False\n    return True\ndef all_Digits_Same(s) :\n    '''\n    Write a python function to check whether all the digits are same or not.\n    '''\n    l = list(s)\n    for i in l:\n        if(l.count(i)!=len(l)):\n            return False\n    return True\ndef all_Digits_Same(s) :\n    '''\n    Write a python function to check whether all the digits are same or not.\n    '''\n    l = list(s)\n    for i in l:\n        if(l.count(i)!=len(l)):\n            return False\n    return True\ndef all_Digits_Same(s) :\n    '''\n    Write a python function to check whether all the digits are same or not.\n    '''\n    l = list(s)\n    for i in l:\n        if(l.count(i)!=len(l)):\n            return False\n    return True\ndef all_Digits_Same(s) :\n    '''\n    Write a python function to check whether all the digits are same or not.\n    '''\n    l = list(s)\n    for i in l:\n        if(l.count(i)!=len(l)):\n            return False\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s)==len(set(s))\n    \nprint(all_Characters_Same('abba'))\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    d = {}\n    for i in s :\n        if i not in d :\n            d[i] = 1\n        else :\n            d[i] += 1\n    for i in d :\n        if d[i] > 1 :\n            return False\n    return True\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # assert type(side) == int\n    return 0.5 * side ** 2\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3 * math.sqrt(3) / 4) * math.pow(side, 2)\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**2\ndef area_triangle(side):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return (side**2)/2\ndef volume_tetrahedron(side):\n    '''\n    Write a function to calculate the volume of a tetrahedron.\n    '''\n    return side**3\ndef volume_triangle(side):\n    '''\n    Write a function to calculate the volume of a triangle.\n    '''\n    return (side**2) / 3\ndef volume_cube(side):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    return side**3\ndef volume_sphere(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return (4.0/3.0)* math.pi*(radius**3)\ndef volume_sphere(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*(radius**3)\ndef volume_cylinder(radius, height):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    return (math.pi/4.0)*radius**2*height\ndef area_rectangle(width, height):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return width*height\ndef area_triangle(side1, side2, side3):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return 0.5*(side1+side2+side3)\ndef area_rectangle(width, height):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return width*height\ndef area_trapezoid(base1, base2, height, top_width):\n    '''\n    Write a function to calculate the area of a trapezoid.\n    '''\n    return 0.5*(base1 + base2 + top_width)\ndef area_triangle(side1, side2, side3):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return 0.5*(side1+side2+side3)\ndef area_circle(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return math.pi*(radius**2)\ndef perimeter_triangle(side1, side2, side3):\n    '''\n    Write a function to calculate the perimeter of a triangle.\n    '''\n    return side1+side2+side3\ndef perimeter_rectangle(width, height):\n    '''\n    Write a function to calculate the perimeter of a rectangle.\n    '''\n    return 2*(width+height)\ndef perimeter_triangle(side1, side2, side3):\n    '''\n    Write a function to calculate the perimeter of a triangle.\n    '''\n    return side1+side2+side3\ndef perimeter_circle(radius):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    return 2*math.pi*radius\ndef perimeter_sphere(radius):\n    '''\n    Write a function to calculate the perimeter of a sphere.\n    '''\n    return 4*math.pi*radius\ndef perimeter_circle(radius):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    return 2*math.pi*radius\ndef perimeter_rectangle(width, height):\n    '''\n    Write a function to calculate the perimeter of a rectangle.\n    '''\n    return 2*(width+height)\ndef perimeter_sphere(radius):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    return 4*math.pi*radius\ndef perimeter_cylinder(radius, height):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    return 2*math.pi*radius + 2*math.pi*(radius**2)\ndef perimeter_sphere(radius):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    return 4*math.pi*radius\ndef perimeter_circle(radius):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    return 2*math.pi*radius\ndef perimeter_trapezoid(base1, base2, height, top_width):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    return 2*(base1 + base2 + top_width)\ndef perimeter_rectangle(width, height):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    return 2*(width+height)\ndef perimeter_triangle(side1, side2, side3):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    return side1+side2+side3\ndef perimeter_circle(radius):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    return 2*math.pi*radius\ndef perimeter_sphere(radius):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    return 4*math.pi*radius\ndef perimeter_cylinder(radius, height):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    return 2*math.pi*radius + 2*math.pi*(radius**2)\ndef perimeter_rectangle(width, height):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    return 2*(width+height)\ndef perimeter_sphere(radius):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    return 4*math.pi*radius\ndef perimeter_circle(radius):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    return 2*math.pi*radius\ndef perimeter_triangle(side1, side2, side3):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    return side1+side2+side3\ndef perimeter_circle(radius):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    return 2*math.pi*radius\ndef perimeter_rectangle(width, height):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    return 2*(width+height)\ndef perimeter_sphere(radius):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    return 4*math.pi*radius\ndef perimeter_cylinder(radius, height):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    return 2*math.pi*radius + 2*math.pi*(radius**2)\ndef perimeter_rectangle(width, height):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    return 2*(width+height)\ndef perimeter_triangle(side1, side2, side3):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    return side1+side2+side3\ndef perimeter_circle(radius):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    return 2*math.pi*radius\ndef perimeter_sphere(radius):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    return 4*math.pi*radius\ndef perimeter_cylinder(radius, height):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    return 2*math.pi*radius + 2*math.pi*(radius**2)\ndef perimeter_rectangle(width, height):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    return 2*(width+height)\ndef perimeter_triangle(side1, side2, side3):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    return side1+side2+side3"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return(3**0.5/4*(3**0.5 - side))\ndef area_cube(side):\n    '''\n    Write a function to calculate the area of a cube.\n    '''\n    return(side**2)\ndef area_prism(side,height):\n    '''\n    Write a function to calculate the area of a prism.\n    '''\n    return(side*side*height/3)\ndef area_cuboid(side,height,length):\n    '''\n    Write a function to calculate the area of a cuboid.\n    '''\n    return(side*side*height + side*side*length)\ndef area_trapezium(bottom,height,top):\n    '''\n    Write a function to calculate the area of a trapezium.\n    '''\n    return(bottom*(height+top)/2)\ndef area_circle(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return(math.pi*(radius**2))\ndef area_ellipse(radius_a,radius_b):\n    '''\n    Write a function to calculate the area of an ellipse.\n    '''\n    return(math.pi*(radius_a*radius_a + radius_b*radius_b)*0.5)\ndef area_rhombus(side1,side2):\n    '''\n    Write a function to calculate the area of a rhombus.\n    '''\n    return(side1*side2/2)\ndef area_square(side):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return(side*side)\ndef area_rectangle(length,width):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return(length*width)\ndef area_rectangular_prism(length,width,height):\n    '''\n    Write a function to calculate the area of a rectangular prism.\n    '''\n    return(length*width + width*length + height*length)\ndef area_triangle(side1,side2,side3):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return(side1*side2/2)\ndef area_trinagle(side1,side2,side3):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return(side1*side2/2)\ndef area_triangular_prism(base,height,side):\n    '''\n    Write a function to calculate the area of a triangular prism.\n    '''\n    return(base*height*(side/2))\ndef area_sphere(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    return(4*math.pi*(radius**2))\ndef area_pyramid(base,height):\n    '''\n    Write a function to calculate the area of a pyramid.\n    '''\n    return(base*height/2)\ndef area_triangle(side1,side2,side3):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return(side1*side2/2)\ndef area_square(side):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return(side*side)\ndef area_rectangle(length,width):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return(length*width)\ndef area_cylinder(radius,height):\n    '''\n    Write a function to calculate the area of a cylinder.\n    '''\n    return(2*math.pi*radius*radius + 2*math.pi*radius*height)\ndef area_sphere(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    return(4*math.pi*radius*radius)\ndef area_spherical_ring(radius):\n    '''\n    Write a function to calculate the area of a spherical ring.\n    '''\n    return(4*math.pi*radius**2*math.sin(math.pi/4))\ndef area_pyramid(base,height):\n    '''\n    Write a function to calculate the area of a pyramid.\n    '''\n    return(base*height/2)\ndef area_triangular_prism(base,height,side):\n    '''\n    Write a function to calculate the area of a triangular prism.\n    '''\n    return(base*height*side/2)\ndef area_spherical_ring(radius):\n    '''\n    Write a function to calculate the area of a spherical ring.\n    '''\n    return(4*math.pi*radius*radius*math.sin(math.pi/4))\ndef area_spherical_shell(radius):\n    '''\n    Write a function to calculate the area of a spherical shell.\n    '''\n    return(4*math.pi*radius*radius*(1 - math.cos(math.pi/4)))\ndef area_spherical_shell_cylinder(radius,height):\n    '''\n    Write a function to calculate the area of a spherical shell and cylinder.\n    '''\n    return(4*math.pi*radius*radius + 2*math.pi*radius*height)\ndef area_spherical_shell_triangle(radius,height):\n    '''\n    Write a function to calculate the area of a spherical shell and triangle.\n    '''\n    return(4*math.pi*radius*radius*(1 - math.cos(math.pi/4)) - math.pi*radius*radius)\ndef area_spherical_shell_square(radius):\n    '''\n    Write a function to calculate the area of a spherical shell and square.\n    '''\n    return(4*math.pi*radius*radius*(1 - math.cos(math.pi/4)))\ndef area_spherical_shell_hexagon(radius):\n    '''\n    Write a function to calculate the area of a spherical shell and hexagon.\n    '''\n    return(4*math.pi*radius*radius*(1 - math.cos(math.pi/6)))\ndef area_spherical_shell_octagon(radius):\n    '''\n    Write a function to calculate the area of a spherical shell and octagon.\n    '''\n    return(4*math.pi*radius*radius*(1 - math.cos(math.pi/8)))\ndef area_spherical_shell_dodecagon(radius):\n    '''\n    Write a function to calculate the area of a spherical shell and dodecagon.\n    '''\n    return(4*math.pi*radius*radius*(1 - math.cos(math.pi/10)))\ndef area_spherical_shell_decagon(radius):\n    '''\n    Write a function to calculate the area of a spherical shell and decagon.\n    '''\n    return(4*math.pi*radius*radius*(1 - math.cos(math.pi/12)))\ndef area_spherical_shell_tetrahedron(radius):\n    '''\n    Write a function to calculate the area of a spherical shell and tetrahedron.\n    '''\n    return(4*math.pi*radius*radius*(1 - math.cos(math.pi/4)))\ndef area_spherical_shell_pentagon(radius):\n    '''\n    Write a function to calculate the area of a spherical shell and pentagon.\n    '''\n    return(4*math.pi*radius*radius*(1 - math.cos(math.pi/5)))\ndef area_spherical_shell_hexagon(radius):\n    '''\n    Write a function to calculate the area of a spherical shell and hexagon.\n    '''\n    return(4*math.pi*radius*radius*(1 - math.cos(math.pi/6)))\ndef area_spherical_shell_heptagon(radius):\n    '''\n    Write a function to calculate the area of a spherical shell and heptagon.\n    '''\n    return(4*math.pi*radius*radius*(1 - math.cos(math.pi/7)))\ndef area_spherical_shell_octagon(radius):\n    '''\n    Write a function to calculate the area of a spherical shell and octagon.\n    '''\n    return"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side*(side-2)*(side-2)*(side-2)/4\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area=3*math.sqrt(3)/4*side**2\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (5.0/4.0)*(side**2)\n    return area\ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    volume = (1.0/3.0)*(side**3)\n    return volume\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3**0.5)*side**2\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/4)*(3*side**2)\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**2/4\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    m = m % len(list)\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    m = m % len(list)\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m == 0:\n        return list\n    else:\n        return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    l = len(list)\n    \n    right = list[l-m:]\n    del list[l-m:]\n    list.extend(right)\n    \n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m < 0:\n        return False\n    if m == 0:\n        return list\n    n = len(list)\n    m = m % n\n    return list[-m:] + list[:-m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        list.append(list.pop(0))\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list_len = len(list)\n    new_list = [None] * list_len\n    for i in range(list_len):\n        new_list[i] = list[(i + m) % list_len]\n    return new_list\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    \n    #check if the tuple is none or not\n    if test_tup == None:\n        print \"This tuple has none value\"\n    else:\n        print \"This tuple is not none\"\n    return\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if None in i:\n            return False\n    return True\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for ele in test_tup:\n        if ele is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return None not in test_tup\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup[0] == None or test_tup[1] == None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    return False\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return lambda num: num % int(str(num)[0]) == 0 and num % int(str(num)[1]) == 0 and num % int(str(num)[2]) == 0 and num % int(str(num)[3]) == 0 and num % int(str(num)[4]) == 0 and num % int(str(num)[5]) == 0 and num % int(str(num)[6]) == 0 and num % int(str(num)[7]) == 0 and num % int(str(num)[8]) == 0 and num % int(str(num)[9]) == 0\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    digits = []\n    numbers = []\n    for i in range(startnum, endnum+1):\n        digits = [int(d) for d in str(i)]\n        if sum(digits) == i:\n            numbers.append(i)\n    return numbers\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [num for num in range(startnum, endnum + 1) if num % sum(map(int, list(str(num)))) == 0]\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return filter(lambda x: not is_divisible_by_digits(x), range(startnum, endnum))\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum, endnum + 1):\n        #print i\n        s = str(i)\n        for j in s:\n            #print j\n            if i % int(j)!= 0:\n                break\n            elif j == s[-1]:\n                print i\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    for num in range(startnum, endnum):\n        divisor = num\n        while divisor:\n            divisor = divisor / 10\n            if divisor == 1:\n                result.append(num)\n                break\n            elif not divisor % 9:\n                result.append(num)\n                break\n    return result\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Simple version\n    '''\n    for num in range(startnum,endnum+1):\n        if num < 10:\n            continue\n        divisor_list = [int(i) for i in str(num)]\n        if all(num % i == 0 for i in divisor_list):\n            print num\n    '''\n    # Version 1 - O(n^2)\n    '''\n    for num in range(startnum,endnum+1):\n        divisor_list = [int(i) for i in str(num)]\n        if all(num % i == 0 for i in divisor_list):\n            print num\n    '''\n    # Version 2 - O(n)\n    for num in range(startnum,endnum+1):\n        divisor_list = [int(i) for i in str(num)]\n        if all(num % i == 0 for i in divisor_list):\n            print num\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    digits = str(startnum) + str(endnum)\n    digits_list = list(digits)\n    divisible_nums = []\n    for num in range(startnum, endnum):\n        if all(num % int(digits_list[idx]) == 0 for idx, digit in enumerate(digits_list)):\n            divisible_nums.append(num)\n    return divisible_nums\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    startnum = int(startnum)\n    endnum = int(endnum)\n    divisible_by_digits = filter(lambda x: x % int(startnum/10) == 0 and x % int(endnum/10) == 0, xrange(startnum, endnum+1))\n    return divisible_by_digits\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    if endnum - startnum <= 9:\n        return [startnum]\n    else:\n        return divisible_by_digits(startnum, (startnum + endnum) / 2) + divisible_by_digits(startnum, endnum)\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return 3.14 * r * r * (a/360)\ndef calc_surface(r,a):\n    '''\n    Write a function that takes the radius and angle as inputs. The function should return the volume of the sector if angle is not greater than 360 degrees. The function should return None if angle is greater than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (3.14 * r * r * (a/360))\ndef run():\n    r = input(\"Input the radius: \")\n    a = input(\"Input the angle: \")\n    print(sector_area(r,a))\n    print(calc_surface(r,a))\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return 3.14 * r * a\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    angle = a % 360\n    \n    if angle == 0 or angle == 360:\n        return math.pi*r*r\n    elif angle < 180:\n        return math.pi*r*r*angle/180\n    elif angle > 180:\n        return math.pi*r*r*(360-angle)/180\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>360):\n        return None\n    else:\n        return r**2*math.pi/180*a\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    a = math.radians(a)\n    area = math.pi * r * math.sin(a)\n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r<0 or a<0 or a>360:\n        return None\n    if a==360:\n        return math.pi*r*r\n    return math.pi*r*r*((a/360.0)*0.5+0.5)\ndef how_many_years_to_save(initial_value,annual_growth_rate,total_cost):\n    '''\n    Write a function that takes the initial value, the annual growth rate and the total cost of a dream home as inputs. \n    Return the number of years that it will take to save enough money for a down payment. \n    '''\n    if total_cost>initial_value or annual_growth_rate>100 or annual_growth_rate<1:\n        return None\n    return math.log(total_cost/initial_value)/math.log(1+annual_growth_rate/100.0)\ndef is_prime(n):\n    '''\n    Write a function that takes an integer as input, and returns True if the integer is prime and False otherwise.\n    '''\n    if n<2:\n        return False\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\ndef is_palindrome(n):\n    '''\n    Write a function that takes a string as input and returns True if it is a palindrome and False otherwise. \n    Ignore case.\n    '''\n    s=n.lower()\n    for i in range(len(s)//2):\n        if s[i]!=s[-(i+1)]:\n            return False\n    return True\ndef is_anagram(s1,s2):\n    '''\n    Write a function that takes two strings as input and returns True if they are anagrams and False otherwise.\n    Ignore case.\n    '''\n    if len(s1)!=len(s2):\n        return False\n    s1=s1.lower()\n    s2=s2.lower()\n    for i in s1:\n        if i in s2:\n            s2=s2.replace(i,\"\",1)\n    if s2==\"\":\n        return True\n    return False\ndef make_spoonerism(word1,word2):\n    '''\n    Write a function that takes two strings as input and returns a spoonerism for the strings as a string.\n    If the two words are the same, it should return an empty string. \n    '''\n    if word1==word2:\n        return \"\"\n    elif word1[0]==word2[0]:\n        return word2[0]+word1[1:]+word2[0]+word1[0]\n    else:\n        return word1[0]+word2[1:]+word1[0]+word2[0]\ndef make_spoonerism2(word1,word2):\n    '''\n    Write a function that takes two strings as input and returns a spoonerism for the strings as a string.\n    If the two words are the same, it should return an empty string. \n    '''\n    if word1==word2:\n        return \"\"\n    elif word1[0]==word2[0]:\n        return word2[0]+word1[1:]+word2[0]+word1[0]+word2[1:]\n    else:\n        return word1[0]+word2[1:]+word1[0]+word2[0]+word2[1:]\ndef make_spoonerism3(word1,word2):\n    '''\n    Write a function that takes two strings as input and returns a spoonerism for the strings as a string.\n    If the two words are the same, it should return an empty string. \n    '''\n    if word1==word2:\n        return \"\"\n    elif word1[0]==word2[0]:\n        return word2[0]+word1[1:]+word2[0]+word1[0]+word2[1:]\n    else:\n        return word1[0]+word2[1:]+word1[0]+word2[0]+word2[1:]\ndef add_spoonerism(word1,word2):\n    '''\n    Write a function that takes two strings as input and returns the word1 with the first letter of word2 at the end. \n    If word2 is an empty string, it should return word1.\n    '''\n    if word2==\"\":\n        return word1\n    else:\n        return word1+word2[0]\ndef add_spoonerism2(word1,word2):\n    '''\n    Write a function that takes two strings as input and returns the word1 with the first letter of word2 at the end. \n    If word2 is an empty string, it should return word1.\n    '''\n    if word2==\"\":\n        return word1\n    else:\n        return word1[0]+word2+word1[1:]\ndef add_spoonerism3(word1,word2):\n    '''\n    Write a function that takes two strings as input and returns the word1 with the first letter of word2 at the end. \n    If word2 is an empty string, it should return word1.\n    '''\n    if word2==\"\":\n        return word1\n    else:\n        return word1[0]+word2+word1[1:]\ndef rotate_right(text,n):\n    '''\n    Write a function that takes a string as input and returns the string after n characters have been rotated right by one position.\n    '''\n    return text[n:]+text[:n]\ndef rotate_left(text,n):\n    '''\n    Write a function that takes a string as input and returns the string after n characters have been rotated left by one position.\n    '''\n    return text[-n:]+text[:-n]\ndef translate_word(word,n):\n    '''\n    Write a function that takes a word and an integer as input and returns the word after n number of shifts.\n    '''\n    return word[n:]+word[:n]\ndef translate_phrase(phrase,n):\n    '''\n    Write a function that takes a phrase and an integer as input and returns the phrase after n number of shifts.\n    '''\n    return phrase[n:]+phrase[:n]\ndef rotate_letter(letter,n):\n    '''\n    Write a function that takes a letter and an integer as input and returns the letter after n number of rotations.\n    '''\n    if n==0:\n        return letter\n    n=n%26\n    if n==0:\n        n=26\n    return rotate_letter(chr((ord(letter)-ord('a')+n)%26+ord('a')),0)\ndef rotate_letter2(letter,n):\n    '''\n    Write a function that takes a letter and an integer as input and returns the letter after n number of rotations.\n    '''\n    if n==0:\n        return letter\n    n=n%26\n    if n==0:\n        n=26\n    if ord(letter)>=ord('a') and ord(letter)<=ord('z'):\n        return rotate_letter(chr((ord(letter)-ord('a')+n)%26+ord('a')),0)\n    elif ord(letter)>=ord('A') and ord(letter)<=ord('Z'):\n        return rotate_letter(chr((ord(letter)-ord('A')+n)%26+ord('A')),0)\n    else:\n        return letter\ndef rotate_letter3(letter,n):\n    '''\n    Write a function that takes a letter and an integer as input and returns the letter after n number of rotations.\n    '''\n    if n==0:\n        return letter\n    n=n%26\n    if n==0:\n        n=26\n    if ord(letter)>=ord('a') and ord(letter)<=ord('z'):\n        return chr((ord(letter)-ord('a')+n)%26+ord('a'))\n    elif ord(letter)>=ord('A') and ord(letter)<=ord('Z'):\n        return chr((ord(letter)-ord('A')+n)%26+ord('A'))\n    else:\n        return letter\ndef is_rotation(word1,word"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        pi = 3.14\n        return (math.pi*r**2*a)/360\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        print 'Invalid angle'\n    else:\n        a=math.radians(a)\n        s=math.pi*r*r*a/360\n        print s\ndef area_of_a_circle(r):\n    '''\n    Write a function that returns the area of a circle. The radius r is an input argument. Function should return None if the radius is negative.\n    '''\n    if r<0:\n        print 'Invalid radius'\n    else:\n        a=math.pi*r*r\n        print a\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if r<0:\n        print 'Invalid radius'\n    else:\n        a=math.pi*r*r\n        print a\ndef total_area_of_the_circle(r):\n    '''\n    Write a function to find the area of a circle. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if r<0:\n        print 'Invalid radius'\n    else:\n        a=math.pi*r*r\n        print a\ndef total_area_of_a_sector(r,a):\n    '''\n    Write a function to find the area of a circle. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        print 'Invalid angle'\n    else:\n        a=math.radians(a)\n        r=math.radians(r)\n        a=a*r\n        s=math.pi*r*r*a/360\n        print s\ndef average_volume_of_a_sphere(r):\n    '''\n    Write a function to calculate average volume of a sphere. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if r<0:\n        print 'Invalid radius'\n    else:\n        a=4*math.pi*r*r*r/3\n        print a\ndef area_of_a_cylinder(r,h):\n    '''\n    Write a function to calculate the area of a cylinder. The function takes the radius and height as inputs. Function should return None if the radius is negative or height is negative.\n    '''\n    if r<0 or h<0:\n        print 'Invalid radius or height'\n    else:\n        a=2*math.pi*r*h+2*math.pi*r*r\n        print a\ndef volume_of_a_cylinder(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder. The function takes the radius and height as inputs. Function should return None if the radius is negative or height is negative.\n    '''\n    if r<0 or h<0:\n        print 'Invalid radius or height'\n    else:\n        a=math.pi*r*r*h\n        print a\ndef volume_of_a_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere. The function takes the radius as input. Function should return None if the radius is negative.\n    '''\n    if r<0:\n        print 'Invalid radius'\n    else:\n        a=4*math.pi*r*r*r/3\n        print a\ndef volume_of_a_cube(r):\n    '''\n    Write a function to calculate the volume of a cube. The function takes the length as input. Function should return None if the length is negative.\n    '''\n    if r<0:\n        print 'Invalid length'\n    else:\n        a=r*r*r\n        print a\ndef volume_of_a_triangle(r,h):\n    '''\n    Write a function to calculate the volume of a triangle. The function takes the length and height as inputs. Function should return None if the length or height is negative.\n    '''\n    if r<0 or h<0:\n        print 'Invalid length or height'\n    else:\n        a=(r*r*h)/3\n        print a\ndef volume_of_a_spheroid(r,h):\n    '''\n    Write a function to calculate the volume of a spheroid. The function takes the radius and height as inputs. Function should return None if the radius or height is negative.\n    '''\n    if r<0 or h<0:\n        print 'Invalid radius or height'\n    else:\n        a=(math.pi*r*r*h)/3\n        print a\ndef volumetric_difference_of_a_cube(r,h):\n    '''\n    Write a function to calculate the volumetric difference of a cube. The function takes the length and height as inputs. Function should return None if the length or height is negative.\n    '''\n    if r<0 or h<0:\n        print 'Invalid length or height'\n    else:\n        a=2*(r*r*h-r*r*r)\n        print a\ndef surface_area_of_a_cube(r,h):\n    '''\n    Write a function to calculate the surface area of a cube. The function takes the length and height as inputs. Function should return None if the length or height is negative.\n    '''\n    if r<0 or h<0:\n        print 'Invalid length or height'\n    else:\n        a=6*r*r*h\n        print a\ndef volume_of_a_cylinder_by_area_of_a_prism(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder by area of a prism. The function takes the radius and height as inputs. Function should return None if the radius or height is negative.\n    '''\n    if r<0 or h<0:\n        print 'Invalid radius or height'\n    else:\n        a=3*math.pi*r*r*h\n        print a\ndef volume_of_a_cylinder_by_area_of_a_sphere(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder by area of a sphere. The function takes the radius and height as inputs. Function should return None if the radius or height is negative.\n    '''\n    if r<0 or h<0:\n        print 'Invalid radius or height'\n    else:\n        a=3*math.pi*r*r*h\n        print a\ndef volume_of_a_cylinder_by_area_of_a_cube(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder by area of a cube. The function takes the radius and height as inputs. Function should return None if the radius or height is negative.\n    '''\n    if r<0 or h<0:\n        print 'Invalid radius or height'\n    else:\n        a=r*r*h\n        print a\ndef volume_of_a_cylinder_by_area_of_a_triangle(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder by area of a triangle. The function takes the radius and height as inputs. Function should return None if the radius or height is negative.\n    '''\n    if r<0 or h<0:\n        print 'Invalid radius or height'\n    else:\n        a=(r*r*h)/2\n        print a\ndef volume_of_a_cylinder_by_area_of_a_spheroid(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder by area of a spheroid. The function takes the radius and height as inputs. Function should return None if the radius or height is negative.\n    '''\n    if r<0 or h<0:\n        print 'Invalid radius or height'\n    else:\n        a=(math.pi*r*r*h)/3\n        print a\ndef volume_of_a_sphere_by_area_of_a_prism(r,h):\n    '''\n    Write a function to calculate the volume of a sphere by area of a prism. The function takes the radius and height as inputs. Function should return None if the radius or height is negative.\n    '''\n    if r<0 or h<0:\n        print 'Invalid radius or height'\n    else:\n        a"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*r*r*(math.sin(math.radians(a)))\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        a=float(a)\n        r=float(r)\n        area=(3.14*r**2)*(180/a)\n        return area\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # base case\n    if len(X) == 0 or len(Y) == 0 or len(Z) == 0:\n        return 0\n    if len(X) == 1:\n        if X[0] == Y[0] == Z[0]:\n            return 1\n        else:\n            return 0\n    if len(Y) == 1:\n        if X[0] == Y[0] == Z[0]:\n            return 1\n        else:\n            return 0\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    if len(X) == 0: return 0\n    if len(Y) == 0: return 0\n    if len(Z) == 0: return 0\n    \n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n    LCS = [[[0 for k in range(l+1)] for j in range(n+1)] for i in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(l+1):\n                if i==0 or j==0 or k==0:\n                    LCS[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    LCS[i][j][k] = LCS[i-1][j-1][k-1] + 1\n                else:\n                    LCS[i][j][k] = max(LCS[i-1][j][k],LCS[i][j-1][k],LCS[i][j][k-1])\n    return LCS[m][n][l]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[None]*(o+1) for i in range(n+1)] for j in range(m+1)]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n    return L[m][n][o] \n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    #for given three strings,\n    #find the longest common subsequence\n    #:) \n    \n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    L = [[[0 for i in xrange(o + 1)] for j in xrange(n + 1)] for k in xrange(m + 1)] \n    for i in xrange(m + 1): \n        for j in xrange(n + 1): \n            for k in xrange(o + 1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] == Z[k - 1]: \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else: \n                    L[i][j][k] = max(L[i - 1][j][k], \n                                    L[i][j - 1][k], \n                                    L[i][j][k - 1]) \n    return L[m][n][o] \n    #at last, calculate the lcs for each string pair, \n    #take the max of them, then return the result \n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    # The length of the strings \n    m = len(X) \n    n = len(Y) \n    p = len(Z) \n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    L = [[None] * (n + 1) for i in range(m + 1)] \n    for i in range(m + 1): \n        for j in range(n + 1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1] + 1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n    return L[m][n] \n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    x = re.sub(r'(^[A-Z]\\w+[a-z]\\w*)',r'\\1 ',str1)\n    return x\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    res = \"\"\n    for i in range(0, len(str1)):\n        if str1[i].isupper():\n            res += \" \" + str1[i]\n        else:\n            res += str1[i]\n    return res\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = str1[0].upper() + str1[1:]\n    return str2\ndef find_num_occurences(str1,ch):\n    '''\n    Write a function to return the number of times a character occurs in a string.\n    '''\n    return str1.count(ch)\ndef capital_letter(str1):\n    '''\n    Write a function to capitalize the first letter of the string given.\n    '''\n    return str1[0].upper() + str1[1:]\ndef count_substring(string,substring):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    return string.count(substring)\ndef remove_spaces(str1):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    return str1.replace(\" \",\"\")\ndef count_digits(str1):\n    '''\n    Write a function to count the number of digits in a string.\n    '''\n    return len(re.findall(\"\\d\",str1))\ndef is_pan_id_valid(id):\n    '''\n    Write a function to check whether a string is a valid pan card number or not.\n    '''\n    return len(id) == 10 and id.isdigit()\ndef count_vowels(str1):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    return len(re.findall(\"[aeiouAEIOU]\",str1))\ndef count_consonants(str1):\n    '''\n    Write a function to count the number of consonants in a string.\n    '''\n    return len(re.findall(\"[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]\",str1))\ndef reverse_string(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    return str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    return str1==str1[::-1]\ndef count_splits(str1,num):\n    '''\n    Write a function to count the number of palindrome substrings in a string.\n    '''\n    return len(re.findall(\"(?=(\\w\\w)\\1\\w\\1\\w\\w)\",str1))\ndef create_phone_number(n):\n    '''\n    Write a function to create a phone number using the given string.\n    '''\n    return \"({}{}{}) {}{}{}-{}{}{}{}\".format(*n)\ndef check_url(url):\n    '''\n    Write a function to check whether a string is a valid URL or not.\n    '''\n    return re.match(r\"^(http|ftp|https)://(?:[\\w\\-_]+\\.)+[\\w\\-_]+(/[\\w\\-_]*)*$\",url) is not None\ndef alphabet_histogram(str1):\n    '''\n    Write a function to return the histogram of characters of a string.\n    '''\n    d = {}\n    for i in str1:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return d\ndef find_second_largest(numbers):\n    '''\n    Write a function to return the second largest number in the list of numbers given.\n    '''\n    numbers = sorted(numbers)\n    return numbers[len(numbers)-2]\ndef count_letters(str1,ch):\n    '''\n    Write a function to count the number of times a character occurs in a string.\n    '''\n    return str1.count(ch)\ndef remove_even_index_characters(str1):\n    '''\n    Write a function to remove the characters at even index positions in a string.\n    '''\n    return \"\".join(str1[0::2])\ndef count_vowels(str1):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    return len(re.findall(\"[aeiouAEIOU]\",str1))\ndef convert_to_base_7(n):\n    '''\n    Write a function to convert an integer to a string in base 7.\n    '''\n    return \"{0:b}\".format(n)\ndef count_spaces(str1):\n    '''\n    Write a function to count the number of spaces in a string.\n    '''\n    return str1.count(\" \")\ndef count_vowels(str1):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    return len(re.findall(\"[aeiouAEIOU]\",str1))\ndef find_intersection(str1,str2):\n    '''\n    Write a function to return the intersection of two strings.\n    '''\n    return set(str1)&set(str2)\ndef check_strictly_increasing(n):\n    '''\n    Write a function to check whether a given list of integers is strictly increasing or not.\n    '''\n    return all(a<b for a,b in zip(n,n[1:]))\ndef count_numbers_occurence(str1,ch):\n    '''\n    Write a function to count the number of times a character occurs in a string.\n    '''\n    return str1.count(ch)\ndef digit_count(num):\n    '''\n    Write a function to count the number of digits in a number.\n    '''\n    return len(str(num))\ndef find_missing_alphabet(str1):\n    '''\n    Write a function to find the missing alphabet in a string.\n    '''\n    d={}\n    for i in str1:\n        if i.isalpha() and i not in d:\n            d[i]=0\n        elif i.isalpha():\n            d[i]+=1\n    for i in range(ord(\"a\"),ord(\"z\")+1):\n        if chr(i) not in d:\n            return chr(i)\ndef count_characters(str1,ch):\n    '''\n    Write a function to count the number of times a character occurs in a string.\n    '''\n    return str1.count(ch)\ndef find_second_largest(numbers):\n    '''\n    Write a function to return the second largest number in the list of numbers given.\n    '''\n    numbers = sorted(numbers)\n    return numbers[len(numbers)-2]\ndef count_letters(str1,ch):\n    '''\n    Write a function to count the number of times a character occurs in a string.\n    '''\n    return str1.count(ch)\ndef find_second_largest(numbers):\n    '''\n    Write a function to return the second largest number in the list of numbers given.\n    '''\n    numbers = sorted(numbers)\n    return numbers[len(numbers)-2]\ndef is_valid_date(date):\n    '''\n    Write a function to check whether a date is valid or not.\n    '''\n    return re.match(r\"^([0-9]{2})[\\/\\-]([0-9]{2})[\\/\\-]([0-9]{4})$\",date) is not None\ndef calculate_grade(score):\n    '''\n    Write a function to calculate the letter grade of a particular score.\n    '''\n    if score>=90:\n        return \"A\"\n    elif score>=80:\n        return \"B\"\n    elif score>=70:\n        return \"C\"\n    elif score>=60:\n        return \"D\"\n    else:\n        return \"F\"\ndef find_middle_character(str1):\n    '''\n    Write a function to return the middle character of a string.\n    '''\n    return str1[len(str1)//2]\ndef find_middle_character(str1):\n    '''\n    Write a function to return the middle character of a string.\n    '''\n    return str1[len(str1)//2]"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    lst=str1.split(' ')\n    i=0\n    for ele in lst:\n        if ele.isupper():\n            lst[i]=ele.lower()\n        else:\n            lst[i]=ele\n        i+=1\n    return''.join(lst)\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub('([A-Z][a-z]+)', r' \\1', str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    res = re.findall(r'\\b[A-Z]', str1)\n    for i in range(len(res)):\n        if res[i] =='':\n            res[i+1] =''\n    print''.join(res)\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.split(r'\\b[A-Z]\\b', str1)\n    return''.join(words)\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.replace(\" \",\" \")\n    x = re.findall('\\w+',str1)\n    str2 =\"\"\n    for i in x:\n        if (i[0].isupper()):\n            str2 = str2 + i + \" \"\n    return str2\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    result = []\n    for word in str1.split():\n        if word[0].isupper():\n            result.append(word +'')\n        else:\n            result.append(word)\n    return ''.join(result)\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    x = re.compile(r'[A-Z]\\w+')\n    y = x.findall(str1)\n    for i in y:\n        print i.strip() +'',\n    print\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(int(num_str))\n    nums.sort()\n    return nums\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: int(x))\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key = lambda x: map(int, re.findall(r'\\d+', x)))\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    pass\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    if nums_str is None or len(nums_str) == 0:\n        return []\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    from functools import cmp_to_key\n    # Sort the list of numbers numerically\n    # For e.g. ['1','5','4','3','2'] -> ['1','2','3','4','5']\n    cmp = lambda x, y: int(x+y) - int(y+x)\n    nums = [float(i) for i in nums_str]\n    nums.sort(key=cmp_to_key(cmp))\n    return nums\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sorted_nums_str = sorted(nums_str, key=lambda x: int(x.replace('-', '')), reverse=False)\n    return sorted_nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_int = []\n    for num_str in nums_str:\n        nums_int.append(int(num_str))\n    nums_int.sort()\n    return [str(num_int) for num_int in nums_int]\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    list_to_sort = [int(num) for num in nums_str]\n    list_to_sort.sort()\n    return [str(num) for num in list_to_sort]\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(int(num_str))\n    nums.sort()\n    return nums\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    #Your code here\n    test_list.append(test_tup)\n    return None\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Start writing your code here\n    # Please do not use list.append()\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + list(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # code here\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.append(i)\n    for j in test_tup:\n        new_list.append(j)\n    return new_list\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2*i + 1\n    right = 2*i + 2\n    #print left, right\n    if left > len(arr) - 1 or arr[left] < arr[i]:\n        return False\n    if right > len(arr) - 1 or arr[right] < arr[left]:\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2*i + 1\n    right = 2*i + 2\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i <= 1:\n        return True\n    left, right = i//2, i\n    while left <= right:\n        if arr[left] < arr[i] or arr[right] < arr[i]:\n            return False\n        else:\n            left, right = left//2, right//2\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    parent = i//2\n    left_child = i*2 + 1\n    right_child = i*2 + 2\n    \n    # If the parent is greater than left child and right child, then the array is not a min heap\n    if (arr[parent] > arr[left_child] and arr[parent] > arr[right_child]) or (arr[parent] < arr[left_child] and arr[parent] < arr[right_child]):\n        return False\n    \n    if left_child < len(arr) and arr[left_child] < arr[parent]:\n        return False\n    if right_child < len(arr) and arr[right_child] < arr[parent]:\n        return False\n    \n    return check_min_heap_helper(arr, parent)\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    max_index = i\n    left_child = 2*i + 1\n    right_child = 2*i + 2\n    if left_child <= arr_length - 1 and arr[left_child] < arr[max_index]:\n        max_index = left_child\n    if right_child <= arr_length - 1 and arr[right_child] < arr[max_index]:\n        max_index = right_child\n    return max_index\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    l = len(arr)\n    if i < l/2:\n        return True\n    else:\n        return arr[i] <= arr[2*i] and arr[i] <= arr[2*i+1]\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    arr_len = len(arr)\n    if i >= arr_len:\n        return False\n    left_child_index = 2*i + 1\n    right_child_index = 2*i + 2\n    if left_child_index < arr_len and arr[left_child_index] < arr[i]:\n        return False\n    if right_child_index < arr_len and arr[right_child_index] < arr[i]:\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    left_child_index = 2 * i + 1\n    right_child_index = 2 * i + 2\n    if left_child_index < len(arr) and arr[left_child_index] < arr[i]:\n        return False\n    if right_child_index < len(arr) and arr[right_child_index] < arr[i]:\n        return False\n    return check_min_heap_helper(arr, left_child_index) and check_min_heap_helper(arr, right_child_index)\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    l = i * 2\n    r = i * 2 + 1\n    if l < len(arr) and arr[l] < arr[i]:\n        return False\n    if r < len(arr) and arr[r] < arr[i]:\n        return False\n    return check_min_heap_helper(arr, l) and check_min_heap_helper(arr, r)\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2*i + 1\n    right = 2*i + 2\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n    return True\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    fib = [0,1]\n    while len(fib) < n:\n        fib.append(fib[-2]+fib[-1])\n    return fib[-1]\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 0:\n        return 0\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    a = 1\n    b = 0\n    c = 1\n    d = 1\n    for i in range(n):\n        c = b + d\n        b = a\n        a = c\n    return a\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # get the nth number of jacobsthal number\n    nth = [0, 1, 1]\n    for i in range(3, n+1):\n        nth.append((nth[i-1] + nth[i-2]) % 1000000007)\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: \n        return 0 \n    if n == 1: \n        return 1 \n    return jacobsthal_num(n-1) + jacobsthal_num(n-2) \n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 1: \n        print 'Error: invalid n'\n        return -1\n    if n == 1: \n        return 0\n    if n == 2: \n        return 1\n    s = 0\n    t = 1\n    for i in range(n-1): \n        s = t\n        t = s + t\n    return t\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else: \n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return [tuple(test_list[i]) for i in range(K)]\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Use binary search for first element in tuple list\n    def first_rec(list, K):\n        low = 0\n        high = len(list) - 1\n        while low <= high:\n            mid = (high + low) // 2\n            if list[mid][1] <= K:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return list[low]\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_rec = None\n    for k in range(K, len(test_list)):\n        min_rec = test_list[k]\n        for i in range(k, len(test_list)):\n            if test_list[i][1] < min_rec[1]:\n                min_rec = test_list[i]\n            else:\n                break\n        break\n    return min_rec\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) == 0:\n        return None\n    if len(test_list) <= K:\n        return test_list\n    if K == 1:\n        return test_list[0]\n    if K == 2:\n        return min(test_list, key=itemgetter(1))\n    #first, find max K\n    if len(test_list) < K:\n        return min(test_list, key=itemgetter(1))\n    else:\n        new_list = sorted(test_list, key=itemgetter(1))\n        return new_list[0:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) <= K:\n        return test_list\n    res = sorted(test_list, key = lambda x:x[2])\n    return res[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if K == len(test_list):\n        return test_list[:K]\n    else:\n        K_records = min_k(test_list[K:], K)\n        return K_records + [min(test_list[:K], key=lambda x:x[1])]\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) == 0:\n        return []\n    min_k_list = []\n    for i in xrange(K):\n        min_k_list.append(test_list[i])\n    return min_k_list\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return sorted(test_list, key=itemgetter(K))[:k]\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) < K:\n        return -1\n    min_record = test_list[0]\n    for i in xrange(len(test_list) - 1):\n        if test_list[i][0] < min_record[0]:\n            min_record = test_list[i]\n    return min_record\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    #print(test_list)\n    temp = sorted(test_list, key=itemgetter(0,1))\n    #print(temp)\n    arr = []\n    for i in range(0,K):\n        arr.append(temp[i])\n    return arr\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return list(set(l1).intersection(set(l2), set(l3)))\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [l1[i] for i in range(len(l1)) if l1[i] in l2 and l1[i] in l3]\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    assert (len(l1) == len(l2) == len(l3)), \"All lists must have the same length\"\n    return [i for i in range(len(l1)) if l1[i] == l2[i] == l3[i]]\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1_n = len(l1)\n    l2_n = len(l2)\n    l3_n = len(l3)\n    l1_i = 0\n    l2_i = 0\n    l3_i = 0\n    \n    i = 0\n    while i < l1_n:\n        l1_i = i\n        while i < l1_n and l1[i] == l1[l1_i]:\n            i += 1\n        l1_i = i\n        i += 1\n    i = 0\n    while i < l2_n:\n        l2_i = i\n        while i < l2_n and l2[i] == l2[l2_i]:\n            i += 1\n        l2_i = i\n        i += 1\n    i = 0\n    while i < l3_n:\n        l3_i = i\n        while i < l3_n and l3[i] == l3[l3_i]:\n            i += 1\n        l3_i = i\n        i += 1\n    i = 0\n    l = []\n    while i < l1_i:\n        while i < l1_i and l1[i] == l2[i]:\n            i += 1\n        while i < l1_i and l1[i] == l3[i]:\n            i += 1\n        if i < l1_i:\n            l.append(l1[i])\n    return l\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in index_list:\n            index_list.append(l1[i])\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    m = {}\n    \n    for i in l1:\n        m[i] = 0\n    \n    for i in l2:\n        m[i] = 0\n        \n    for i in l3:\n        m[i] = 0\n    \n    result = []\n    \n    for i in m:\n        if m[i] == 1:\n            result.append(i)\n    \n    return result\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in l1:\n        if i in l2 and i in l3:\n            index_list.append(l1.index(i))\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    pass\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    def common(l1, l2, l3):\n        return list(set(l1).intersection(l2,l3))\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [item for item in l1 if item in l2 and item in l3]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) <= 1:\n        return\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest:\n            second_smallest = number\n    return second_smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    first_min = float('inf')\n    second_min = float('inf')\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    \n    if len(numbers) < 2:\n        return None\n    \n    min_num = min(numbers)\n    min_num_index = numbers.index(min_num)\n    \n    numbers[min_num_index] = sys.maxint\n    \n    second_min = min(numbers)\n    \n    return second_min\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    if len(numbers) == 2:\n        return min(numbers)\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) <= 1:\n        return None\n    else:\n        smallest = min(numbers)\n        numbers.remove(smallest)\n        return min(numbers)\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) <= 1:\n        return None\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # re.match(r'\\ba.*?b', text)\n    # re.search(r'\\ba.*?b', text)\n    # re.match(r'\\ba.*?b', text, re.I)\n    # re.search(r'\\ba.*?b', text, re.I)\n    # re.match(r'\\ba.*?b', text, re.S)\n    # re.search(r'\\ba.*?b', text, re.S)\n    # re.match(r'\\ba.*?b', text, re.S|re.I)\n    # re.search(r'\\ba.*?b', text, re.S|re.I)\n    return re.match(r'\\ba.*?b', text, re.S|re.I)\n    # return re.match(r'\\ba.*?b', text, re.S|re.I)\n    # return re.match(r'\\ba.*?b', text, re.S)\n    # return re.search(r'\\ba.*?b', text, re.S)\n    # return re.match(r'\\ba.*?b', text, re.S)\n    # return re.search(r'\\ba.*?b', text, re.S)\n    # return re.match(r'\\ba.*?b', text, re.I)\n    # return re.search(r'\\ba.*?b', text, re.I)\n    # return re.match(r'\\ba.*?b', text, re.I)\n    # return re.search(r'\\ba.*?b', text, re.I)\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.match('a+b', text):\n        print(\"Found\")\n    else:\n        print(\"Not found\")\ndef text_match_zero_many(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-4.php\n    '''\n    if re.match('a*b', text):\n        print(\"Found\")\n    else:\n        print(\"Not found\")\ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-5.php\n    '''\n    if re.match('a+b', text):\n        print(\"Found\")\n    else:\n        print(\"Not found\")\ndef text_match_one_or_none(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-6.php\n    '''\n    if re.match('a+b', text):\n        print(\"Found\")\n    elif re.match('a+', text):\n        print(\"Found\")\n    else:\n        print(\"Not found\")\ndef text_match_group(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-7.php\n    '''\n    if re.match('a+b', text):\n        print(\"Found\")\n        print(re.match('a+b', text).group(1))\n    else:\n        print(\"Not found\")\ndef text_match_start_end(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-8.php\n    '''\n    if re.match('a+b', text):\n        print(\"Found\")\n        print(re.match('a+b', text).start(1))\n        print(re.match('a+b', text).end(1))\n    else:\n        print(\"Not found\")\ndef text_match_pos(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-9.php\n    '''\n    if re.match('a+b', text):\n        print(\"Found\")\n        print(re.match('a+b', text).pos(1))\n    else:\n        print(\"Not found\")\ndef text_match_end(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-10.php\n    '''\n    if re.match('a+b', text):\n        print(\"Found\")\n        print(re.match('a+b', text).end(1))\n    else:\n        print(\"Not found\")\ndef text_match_span(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-11.php\n    '''\n    if re.match('a+b', text):\n        print(\"Found\")\n        print(re.match('a+b', text).span(1))\n    else:\n        print(\"Not found\")\ndef text_match_start(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-12.php\n    '''\n    if re.match('a+b', text):\n        print(\"Found\")\n        print(re.match('a+b', text).start(1))\n    else:\n        print(\"Not found\")\ndef text_match_findall(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-13.php\n    '''\n    if re.match('a+b', text):\n        print(\"Found\")\n        print(re.findall('a+b', text))\n    else:\n        print(\"Not found\")\ndef text_match_compile(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-14.php\n    '''\n    if re.match('a+b', text):\n        print(\"Found\")\n        print(re.compile('a+b'))\n    else:\n        print(\"Not found\")\ndef text_match_sub(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-15.php\n    '''\n    if re.match('a+b', text):\n        print(\"Found\")\n        print(re.sub('a', 'z', text))\n    else:\n        print(\"Not found\")\ndef text_match_escape(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-16.php\n    '''\n    if re.match('a+b', text):\n        print(\"Found\")\n        print(re.escape(text))\n    else:\n        print(\"Not found\")\ndef text_match_syntax_error(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-17.php\n    '''\n    if re.match('a+b', text):\n        print(\"Found\")\n        print(re.match('a+b', text))\n    else:\n        print(\"Not found\")\ndef text_match_finditer(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-18.php\n    '''\n    if re.match('a+b', text):\n        print(\"Found\")\n        print(re.finditer('a+b', text))\n    else:\n        print(\"Not found\")\ndef text_match_fullmatch(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-19.php\n    '''\n    if re.match('a+b', text):\n        print(\"Found\")\n        print(re.fullmatch('a+b', text))\n    else:\n        print(\"Not found\")\ndef text_match_match_object(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-20.php\n    '''\n    if re.match('a+"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pat = re.compile(r'a+b')\n    match = re.match(pat, text)\n    if match:\n        return match.group()\n    return None\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search(r'a+b', text)\n    if result:\n        print('Found a match: ', result.group())\n    else:\n        print('No match')\ndef text_match_zero_one_list(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    list = re.findall(r'a+b', text)\n    print(list)\ndef text_match_zero_one_wo_list(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search(r'a+b', text)\n    if result:\n        print('Found a match: ', result.group())\n    else:\n        print('No match')\ndef text_match_zero_one_count_with_group(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    count = 0\n    for match in re.finditer(r'a+b', text):\n        count += 1\n        print('Found match number', count, 'with group', match.group())\n    print('Total number of matches: ', count)\ndef text_match_zero_one_count_without_group(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    count = 0\n    for match in re.finditer(r'a+b', text):\n        count += 1\n        print('Found match number', count, 'with group', match.group())\n    print('Total number of matches: ', count)\ndef text_match_zero_one_count_without_group_with_group(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    count = 0\n    for match in re.finditer(r'a+b', text):\n        count += 1\n        print('Found match number', count, 'with group', match.group())\n    print('Total number of matches: ', count)\ndef text_match_zero_one_count_without_group_with_group_with_group(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    count = 0\n    for match in re.finditer(r'a+b', text):\n        count += 1\n        print('Found match number', count, 'with group', match.group())\n    print('Total number of matches: ', count)\ndef text_match_zero_one_count_without_group_with_group_without_group(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    count = 0\n    for match in re.finditer(r'a+b', text):\n        count += 1\n        print('Found match number', count, 'with group', match.group())\n    print('Total number of matches: ', count)\ndef text_match_zero_one_count_without_group_without_group(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    count = 0\n    for match in re.finditer(r'a+b', text):\n        count += 1\n        print('Found match number', count, 'with group', match.group())\n    print('Total number of matches: ', count)\ndef text_match_zero_one_count_without_group_without_group_without_group(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    count = 0\n    for match in re.finditer(r'a+b', text):\n        count += 1\n        print('Found match number', count, 'with group', match.group())\n    print('Total number of matches: ', count)\ndef text_match_zero_one_count_with_group_with_group(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    count = 0\n    for match in re.finditer(r'(a)(b)+', text):\n        count += 1\n        print('Found match number', count, 'with group', match.group())\n    print('Total number of matches: ', count)\ndef text_match_zero_one_count_with_group_without_group(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    count = 0\n    for match in re.finditer(r'(a)(b)+', text):\n        count += 1\n        print('Found match number', count, 'with group', match.group())\n    print('Total number of matches: ', count)\ndef text_match_zero_one_count_with_group_without_group_without_group(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    count = 0\n    for match in re.finditer(r'(a)(b)+', text):\n        count += 1\n        print('Found match number', count, 'with group', match.group())\n    print('Total number of matches: ', count)\ndef text_match_zero_one_count_with_group_without_group_without_group_without_group(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    count = 0\n    for match in re.finditer(r'(a)(b)+', text):\n        count += 1\n        print('Found match number', count, 'with group', match.group())\n    print('Total number of matches: ', count)\ndef text_match_one_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search(r'a(b)+b', text)\n    if result:\n        print('Found a match: ', result.group())\n    else:\n        print('No match')\ndef text_match_one_one_list(text):\n    '''\n    Write a function that matches a string tha"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile('a+b')\n    return pattern.match(text)\ndef text_match_zero_n(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-4.php\n    '''\n    pattern = re.compile('a*b')\n    return pattern.match(text)\ndef text_match_one_n(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-5.php\n    '''\n    pattern = re.compile('a+b')\n    return pattern.match(text)\ndef text_match_n_n(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 0 or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-6.php\n    '''\n    pattern = re.compile('a*b')\n    return pattern.match(text)\ndef text_match_non_greedy(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-7.php\n    '''\n    pattern = re.compile('a+?b')\n    return pattern.match(text)\ndef text_match_non_greedy_2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-8.php\n    '''\n    pattern = re.compile('a*?b')\n    return pattern.match(text)\ndef text_match_non_greedy_3(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-9.php\n    '''\n    pattern = re.compile('a+?b')\n    return pattern.match(text)\ndef text_match_non_greedy_4(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-10.php\n    '''\n    pattern = re.compile('a*?b')\n    return pattern.match(text)\ndef text_match_non_greedy_5(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-11.php\n    '''\n    pattern = re.compile('a+?b')\n    return pattern.match(text)\ndef text_match_non_greedy_6(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-12.php\n    '''\n    pattern = re.compile('a+?b')\n    return pattern.match(text)\ndef text_match_non_greedy_7(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-13.php\n    '''\n    pattern = re.compile('a+?b')\n    return pattern.match(text)\ndef text_match_non_greedy_8(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-14.php\n    '''\n    pattern = re.compile('a+?b')\n    return pattern.match(text)\ndef text_match_non_greedy_9(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-15.php\n    '''\n    pattern = re.compile('a+?b')\n    return pattern.match(text)\ndef text_match_non_greedy_10(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-16.php\n    '''\n    pattern = re.compile('a+?b')\n    return pattern.match(text)\ndef text_match_non_greedy_11(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-17.php\n    '''\n    pattern = re.compile('a+?b')\n    return pattern.match(text)\ndef text_match_non_greedy_12(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-18.php\n    '''\n    pattern = re.compile('a+?b')\n    return pattern.match(text)\ndef text_match_non_greedy_13(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-19.php\n    '''\n    pattern = re.compile('a+?b')\n    return pattern.match(text)\ndef text_match_non_greedy_14(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-20.php\n    '''\n    pattern = re.compile('a+?b')\n    return pattern.match(text)\ndef text_match_non_greedy_15(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-21.php\n    '''\n    pattern = re.compile('a+?b')\n    return pattern.match(text)\ndef text_match_non_greedy_16(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-22.php\n    '''\n    pattern = re.compile('a+?b')\n    return pattern.match(text)\ndef text_match_non_greedy_17(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-23.php\n    '''\n    pattern = re.compile('a+?b')\n    return pattern.match(text)\ndef text_match"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a_pattern = re.compile('a(.*?)b')\n    mo = a_pattern.search(text)\n    print mo.group(1)\n    \ndef text_match_one_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a_pattern = re.compile('a(.*?)b',re.DOTALL)\n    mo = a_pattern.search(text)\n    print mo.group(1)\n    \ndef text_match_zero_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a_pattern = re.compile('a(.*?)b',re.DOTALL)\n    mo = a_pattern.search(text)\n    print mo.group(1)\n    \ndef text_match_one_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a_pattern = re.compile('a(.*?)b',re.DOTALL)\n    mo = a_pattern.search(text)\n    print mo.group(1)\n    \ndef text_match_non_greedy(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a_pattern = re.compile('a(.*?)b',re.DOTALL)\n    mo = a_pattern.search(text)\n    print mo.group(1)\n    \ndef text_match_non_greedy2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a_pattern = re.compile('a(.*?)b',re.DOTALL)\n    mo = a_pattern.search(text)\n    print mo.group(1)\n    \ndef text_match_non_greedy3(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a_pattern = re.compile('a(.*?)b',re.DOTALL)\n    mo = a_pattern.search(text)\n    print mo.group(1)\n    \ndef text_match_non_greedy4(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a_pattern = re.compile('a(.*?)b',re.DOTALL)\n    mo = a_pattern.search(text)\n    print mo.group(1)\n    \ndef text_match_re_ignore_case(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a_pattern = re.compile('a(.*?)b',re.IGNORECASE)\n    mo = a_pattern.search(text)\n    print mo.group(1)\n    \ndef text_match_re_ignore_case2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a_pattern = re.compile('a(.*?)b',re.IGNORECASE)\n    mo = a_pattern.search(text)\n    print mo.group(1)\n    \ndef text_match_re_ignore_case3(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a_pattern = re.compile('a(.*?)b',re.IGNORECASE)\n    mo = a_pattern.search(text)\n    print mo.group(1)\n    \ndef text_match_re_ignore_case4(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a_pattern = re.compile('a(.*?)b',re.IGNORECASE)\n    mo = a_pattern.search(text)\n    print mo.group(1)\n    \ndef text_match_re_ignore_case5(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a_pattern = re.compile('a(.*?)b',re.IGNORECASE)\n    mo = a_pattern.search(text)\n    print mo.group(1)\n    \ndef text_match_re_ignore_case6(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a_pattern = re.compile('a(.*?)b',re.IGNORECASE)\n    mo = a_pattern.search(text)\n    print mo.group(1)\n    \ndef text_match_re_ignore_case7(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a_pattern = re.compile('a(.*?)b',re.IGNORECASE)\n    mo = a_pattern.search(text)\n    print mo.group(1)\n    \ndef text_match_re_ignore_case8(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a_pattern = re.compile('a(.*?)b',re.IGNORECASE)\n    mo = a_pattern.search(text)\n    print mo.group(1)\n    \ndef text_match_re_ignore_case9(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a_pattern = re.compile('a(.*?)b',re.IGNORECASE)\n    mo = a_pattern.search(text)\n    print mo.group(1)\n    \ndef text"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a+b'\n    if re.search(pattern, text):\n        print(\"yes\")\n    else:\n        print(\"no\")\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.match(text)\n    print match\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab+')\n    return pattern.match(text)\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.match('a*b', text)\n    print(match.group())\n    if match is None:\n        print('not found')\n    else:\n        print('found')\ndef text_match_zero_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-4.php\n    '''\n    match = re.match('a*?b', text)\n    print(match.group())\n    if match is None:\n        print('not found')\n    else:\n        print('found')\ndef text_match_one_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-5.php\n    '''\n    match = re.match('a+b', text)\n    print(match.group())\n    if match is None:\n        print('not found')\n    else:\n        print('found')\ndef text_match_one_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-6.php\n    '''\n    match = re.match('a+?b', text)\n    print(match.group())\n    if match is None:\n        print('not found')\n    else:\n        print('found')\ndef text_match_greedy_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-7.php\n    '''\n    match = re.match('a*?b', text)\n    print(match.group())\n    if match is None:\n        print('not found')\n    else:\n        print('found')\ndef text_match_greedy_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-8.php\n    '''\n    match = re.match('a*b', text)\n    print(match.group())\n    if match is None:\n        print('not found')\n    else:\n        print('found')\ndef text_match_non_greedy_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-9.php\n    '''\n    match = re.match('a*?b', text)\n    print(match.group())\n    if match is None:\n        print('not found')\n    else:\n        print('found')\ndef text_match_non_greedy_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-10.php\n    '''\n    match = re.match('a*b', text)\n    print(match.group())\n    if match is None:\n        print('not found')\n    else:\n        print('found')\ndef text_match_initial_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-11.php\n    '''\n    match = re.match('a?b', text)\n    print(match.group())\n    if match is None:\n        print('not found')\n    else:\n        print('found')\ndef text_match_initial_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-12.php\n    '''\n    match = re.match('a?b', text)\n    print(match.group())\n    if match is None:\n        print('not found')\n    else:\n        print('found')\ndef text_match_any_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-13.php\n    '''\n    match = re.match('a.*?b', text)\n    print(match.group())\n    if match is None:\n        print('not found')\n    else:\n        print('found')\ndef text_match_any_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-14.php\n    '''\n    match = re.match('a.*?b', text)\n    print(match.group())\n    if match is None:\n        print('not found')\n    else:\n        print('found')\ndef text_match_final_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-15.php\n    '''\n    match = re.match('a.*?b$', text)\n    print(match.group())\n    if match is None:\n        print('not found')\n    else:\n        print('found')\ndef text_match_final_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-16.php\n    '''\n    match = re.match('a.*?b$', text)\n    print(match.group())\n    if match is None:\n        print('not found')\n    else:\n        print('found')\ndef text_match_non_capturing(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-17.php\n    '''\n    match = re.match('a(.*?)b', text)\n    print(match.group())\n    if match is None:\n        print('not found')\n    else:\n        print('found')\ndef text_match_non_capturing_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-18.php\n    '''\n    match = re.match('a(.*?)b', text)\n    print(match.group())\n    if match is None:\n        print('not found')\n    else:\n        print('found')\ndef text_match_non_capturing_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-19.php\n    '''\n    match = re.match('a(.*?)(?=b)', text)\n    print(match.group())\n    if match is None:\n        print('not found')\n    else:\n        print('found')\ndef text_matc"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    def reverse_in_place(str):\n        str = str[::-1]\n        return str\n    def count_pairs(l):\n        if len(l) < 2:\n            return 0\n        a = reverse_in_place(l[0])\n        b = reverse_in_place(l[1])\n        if a == b:\n            return 1 + count_pairs(l[2:])\n        else:\n            return count_pairs(l[2:])\n    return count_pairs(test_list)\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    print count\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #solution 2:\n    #return sum(test_list[i] == test_list[-i-1] for i in range(0, len(test_list)))\n    #solution 1:\n    #return sum([test_list[i] == test_list[-i-1] for i in range(0, len(test_list))])\n    #solution 3:\n    #return sum([test_list[i] == test_list[-i-1] for i in range(0, len(test_list))].count(True))\n    #solution 4:\n    return sum([test_list[i] == test_list[-i-1] for i in range(0, len(test_list))].count(True))\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(0, len(test_list)):\n        for j in range(0, len(test_list)):\n            if(test_list[i] == test_list[j]):\n                continue\n            elif(test_list[i][::-1] == test_list[j]):\n                count += 1\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for x in range(0, len(test_list)):\n        for y in range(x, len(test_list)):\n            if test_list[x] == test_list[y][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    # count the number of the pairs of reverse string in the test_list \n    return len([i for i in test_list if i[::-1] in test_list])\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pairs = 0\n    for string in test_list:\n        if string[::-1] in test_list:\n            pairs += 1\n    return pairs\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # for item in list1:\n    #     if item not in sub_list:\n    #         sub_list.append(item)\n    #         count+=1\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result = {}\n    for x in list1:\n        sub_list = tuple(x)\n        if sub_list not in result:\n            result[sub_list] = 1\n        else:\n            result[sub_list] += 1\n    return result\n    \ndef main():\n    \n    list1 = [[1,2],[1,3,4,5],[1,4,5,6]]\n    print unique_sublists(list1)\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dic = {}\n    for i in list1:\n        if isinstance(i, list):\n            dic[tuple(i)] = list1.count(i)\n    return dic\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    def _convert_list_to_tuple(list1):\n        return tuple(list1)\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counts = {}\n    for i in range(len(list1)):\n        if tuple(list1[i]) not in counts:\n            counts[tuple(list1[i])] = 0\n        counts[tuple(list1[i])] += 1\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import defaultdict\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict_of_tuples = {}\n    for list in list1:\n        dict_of_tuples[tuple(list)] = list1.count(list)\n    return dict_of_tuples\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list_counter = {}\n    for sublist in list1:\n        list_counter[tuple(sublist)] = list_counter.setdefault(tuple(sublist), 0) + 1\n    return list_counter\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict={}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i] == list1[j]:\n                #print \"i=\", i, \" j=\", j\n                list2 = list1[i:j+1]\n                #print list2\n                tup = tuple(list2)\n                #print tup\n                if tup not in dict:\n                    dict[tup] = 1\n                else:\n                    dict[tup] += 1\n    #print dict\n    return dict\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for i in range(0,len(list1)):\n        for j in range(i+1,len(list1)+1):\n            sublist = list1[i:j]\n            if sublist not in count_dict:\n                count_dict[tuple(sublist)] = 0\n            count_dict[tuple(sublist)] += 1\n    return count_dict\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return bool(re.match(r'^-?\\d+\\.\\d$',num))\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if type(num)!= str:\n        return False\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if not isinstance(num, int):\n        return False\n    if len(str(num)) < 2:\n        return False\n    if str(num)[0] == '-' and str(num)[1]!= '.':\n        return False\n    if str(num)[-1] == '.':\n        return False\n    \n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.isdigit():\n        return True\n    elif num[0] == '-' and num[1:].isdigit():\n        return True\n    else:\n        return False\n    \ndef is_octal(num):\n    '''\n    Write a function to check whether a given string is an octal number with a precision of 2.\n    '''\n    if num.isdigit():\n        return True\n    elif num[0] == '-' and num[1:].isdigit():\n        return True\n    elif num[0] == '0' and len(num) > 1 and num[1] == '0':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    pass\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    n = len(num)\n    i = n - 1\n    decimal = True\n    while i >= 0:\n        if not num[i].isdigit():\n            decimal = False\n            break\n        i -= 1\n    return decimal\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # get rid of any leading/trailing spaces, make sure we have two digits\n    num = num.strip()\n    if len(num)!= 2:\n        return False\n    # get rid of any leading/trailing 0s, make sure the number is actually 2 digits\n    if num[0] == '0' or num[1] == '0':\n        return False\n    # get rid of any leading/trailing 0s\n    num = num.lstrip('0')\n    num = num.rstrip('0')\n    # make sure we have a dot\n    if num[0]!= '.':\n        return False\n    # make sure we have a decimal\n    if num[1]!= '.':\n        return False\n    # check if the second character is a decimal\n    if num[1] == '.':\n        if num[1]!= num[2]:\n            return False\n    # get rid of any leading/trailing spaces, make sure we have two digits\n    num = num.strip()\n    if len(num)!= 2:\n        return False\n    # get rid of any leading/trailing 0s, make sure the number is actually 2 digits\n    if num[0] == '0' or num[1] == '0':\n        return False\n    # get rid of any leading/trailing 0s\n    num = num.lstrip('0')\n    num = num.rstrip('0')\n    # make sure we have a dot\n    if num[0]!= '.':\n        return False\n    # make sure we have a decimal\n    if num[1]!= '.':\n        return False\n    # check if the second character is a decimal\n    if num[1] == '.':\n        if num[1]!= num[2]:\n            return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return isinstance(num, float) and num.is_integer()\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    s = set(arr)\n    return len(s) == len(arr)\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        return False\n    if len(arr) == 3:\n        return True\n    if len(arr) > 3:\n        arr = arr[:3]\n        if arr[0] == arr[1] == arr[2]:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    temp=[]\n    for i in arr:\n        if i not in temp:\n            temp.append(i)\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr = set(arr)\n    if len(arr) == len(arr):\n        return True\n    return False\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    num_dict = {}\n    for num in arr:\n        if num not in num_dict:\n            num_dict[num] = 1\n        else:\n            num_dict[num] += 1\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    x = {}\n    for i in arr:\n        if i in x:\n            return False\n        else:\n            x[i] = True\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)==1:\n        return True\n    else:\n        for i in range(0, len(arr)-1):\n            if arr[i]==arr[i+1]:\n                return False\n        return True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    result = set(arr)\n    if len(result) == 1:\n        return True\n    return False\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in range(1,len(arr)):\n        if arr[0] == arr[i]:\n            return True\n    return False\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    dict = {}\n    for i in arr:\n        if i in dict:\n            return False\n        else:\n            dict[i]=1\n    return True\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return 30\n    elif monthnum3 in [4,6,9,11]:\n        return 29\n    elif monthnum3 == 2:\n        return 28\n    else:\n        return 0\n    \n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if int(monthnum3) > 12 or int(monthnum3) < 1:\n        print(\"Month number has to be between 1 to 12\")\n        return\n    if int(monthnum3) == 2:\n        if int(monthnum3)%4 == 0:\n            if int(monthnum3)%100 == 0:\n                if int(monthnum3)%400 == 0:\n                    print(\"Month number has 30 days\")\n                    return\n                else:\n                    print(\"Month number does not have 30 days\")\n                    return\n            else:\n                print(\"Month number has 30 days\")\n                return\n        else:\n            print(\"Month number does not have 30 days\")\n            return\n    if int(monthnum3) in [4,6,9,11]:\n        print(\"Month number has 30 days\")\n        return\n    else:\n        print(\"Month number does not have 30 days\")\n        return\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        raise ValueError('invalid month number')\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        print '31 days'\n    else:\n        print '30 days'\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    else:\n        if monthnum3 in [4, 6, 9, 11]:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    try:\n        if monthnum3 < 1 or monthnum3 > 12:\n            print('Invalid Month Number Entered')\n        else:\n            print('Valid Month Number Entered')\n    except:\n        print('Invalid Month Number Entered')\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if (monthnum3 == 2) or (monthnum3 == 4) or (monthnum3 == 6) or (monthnum3 == 9) or (monthnum3 == 11):\n        return 30\n    elif (monthnum3 == 1) or (monthnum3 == 3) or (monthnum3 == 5) or (monthnum3 == 7) or (monthnum3 == 8) or (monthnum3 == 10) or (monthnum3 == 12):\n        return 31\n    else:\n        return 29\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 == 2:\n        return True if check_leapyear(year) else False\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    result = [0]\n    arr.sort()\n    for i in range(0,n-1):\n        result.append(arr[i+1]-arr[i])\n    return min(result)\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n == 1:\n        return arr[0]\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    return arr[-1] - arr[0]\n    \ndef test_find_min_diff():\n    arr = [1,2,4,5,6,7]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 4)\n    \n    arr = [7,5,4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 1)\n    \n    arr = [5,4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [1,2]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 1)\n    \n    arr = [3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 1)\n    \n    arr = [4,5,6,7,8]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 1)\n    \n    arr = [3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 1)\n    \n    arr = [4,5,6,7,8]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [7,5,4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 1)\n    \n    arr = [4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [5,4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [7,5,4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [7,5,4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [7,5,4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [7,5,4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [7,5,4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = [4,3,2,1]\n    n = len(arr)\n    assert(find_min_diff(arr,n) == 0)\n    \n    arr = "
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    i = 0\n    while i < n - 1:\n        j = i + 1\n        while j < n:\n            diff = arr[j] - arr[i]\n            if diff == 0:\n                return arr[i]\n            elif abs(diff) == 1:\n                return arr[i]\n            elif abs(diff) > 1:\n                return arr[i]\n            j += 1\n        i += 1\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    mn=arr[1]-arr[0]\n    for i in range(1,n-1):\n        mn = min(mn,arr[i+1]-arr[i])\n    return mn\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n <= 1:\n        return None\n    arr = sorted(arr)\n    print arr\n    minimum = float('inf')\n    i = 0\n    j = n-1\n    while i<j:\n        diff = abs(arr[i] - arr[j])\n        if diff < minimum:\n            minimum = diff\n        if arr[i] < arr[j]:\n            i += 1\n        else:\n            j -= 1\n    return minimum\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    if n == 1:\n        return arr[0] - arr[1]\n    elif n == 2:\n        return arr[1] - arr[0]\n    elif n == 3:\n        return abs(arr[0] - arr[1])\n    else:\n        return min(arr[n-1] - arr[n-2], arr[n-2] - arr[n-3], arr[n-3] - arr[n-4])\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = None\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if min_diff == None or min_diff > diff:\n                min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    n = len(arr)\n    i=0\n    j=n-1\n    min_diff = arr[j]-arr[i]\n    while i<j:\n        if min_diff > abs(arr[j]-arr[i]):\n            min_diff = abs(arr[j]-arr[i])\n        i+=1\n        j-=1\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[1] - arr[0]\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[j] - arr[i] < min_diff:\n                min_diff = arr[j] - arr[i]\n    return min_diff\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    number = 0\n    for i in str:\n        if i.isdigit():\n            number += 1\n    return number\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    cnt = 0\n    for i in str:\n        if i.isdigit():\n            cnt = cnt+1\n    return cnt\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    if len(str) == 0:\n        return 0\n    else:\n        if str[0] in \"1234567890\":\n            return 1 + number_ctr(str[1:])\n        else:\n            return number_ctr(str[1:])\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum([1 for i in str if i.isdigit()])\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    counter = 0\n    for i in range(0, len(str)):\n        if str[i] in ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'):\n            counter += 1\n    return counter\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    d={}\n    count = 0\n    for i in str:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for key,value in d.items():\n        count += value\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<1:\n        return False\n    s=int(math.sqrt(n))+1\n    for i in xrange(2,s):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0: \n        return 1\n    x, y = 1, 2\n    while y <= n:\n        x, y = y, x + y\n    return x\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n = abs(n)\n    if n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return (n*(n+1))/2\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_polite(n): \n        c = 1\n        c1 = 1\n        c2 = 1\n        c3 = 1\n        c4 = 1\n        # print(n)\n        while n-4 > 0: \n            c1 = c1 * (n-1)\n            n = n - 1\n        # print(n)\n        while n-3 > 0: \n            c2 = c2 * (n-1)\n            n = n - 1\n        # print(n)\n        while n-2 > 0: \n            c3 = c3 * (n-1)\n            n = n - 1\n        # print(n)\n        while n-1 > 0: \n            c4 = c4 * (n-1)\n            n = n - 1\n        # print(n)\n        c = c1 * c2 * c3 * c4\n        if c % 1 == 0: \n            return True\n        else: \n            return False\n    return is_polite(n)\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<5:\n        return 1\n    elif n<21:\n        return 3\n    elif n<123:\n        return 5\n    else:\n        x=math.ceil(math.sqrt(n))\n        y=math.ceil(math.sqrt(n+1))\n        return y-1\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<5:\n        return True\n    elif n==5:\n        return False\n    else:\n        return ((n*(n+1))/2)%5==0\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if (n > 2) : \n        return (n - 1) * ((3 * n) - 1) / 2\n    else: \n        return 1\ndef factorial(n): \n    '''\n    Factorial of a number\n    '''\n    if n == 0: \n        return 1\n    else: \n        return n * factorial(n - 1)\ndef m_factorial(n): \n    '''\n    n! = n * (n-1)! \n    '''\n    if n == 0: \n        return 1\n    else: \n        return n * m_factorial(n - 1)\ndef n_factorial(n): \n    '''\n    n! = n * (n-1)! \n    '''\n    if n == 0: \n        return 1\n    else: \n        return n * n_factorial(n - 1)\ndef factorial_recursive(n): \n    '''\n    Factorial of a number using recursion\n    '''\n    if n == 0: \n        return 1\n    else: \n        return n * factorial_recursive(n - 1)\ndef factorial_iterative(n): \n    '''\n    Factorial of a number using iteration\n    '''\n    if n == 0: \n        return 1\n    else: \n        product = 1\n        for i in range(1,n + 1): \n            product = product * i\n        return product\ndef nth_fibonacci(n): \n    '''\n    Returns nth fibonacci number \n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    elif n == 3: \n        return 2\n    else: \n        return nth_fibonacci(n - 1) + nth_fibonacci(n - 2)\ndef nth_fibonacci_iterative(n): \n    '''\n    Returns nth fibonacci number \n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    else: \n        fib1 = 1\n        fib2 = 1\n        for i in range(3,n + 1): \n            fib1, fib2 = fib2, fib1 + fib2\n        return fib2\ndef count_ways(n): \n    '''\n    Count ways to reach to nth stair \n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    elif n == 3: \n        return 4\n    else: \n        return count_ways(n - 1) + count_ways(n - 2) + count_ways(n - 3)\ndef count_ways_memoized(n, memo): \n    '''\n    Count ways to reach to nth stair using memoization\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    elif n == 3: \n        return 4\n    if memo[n]!= -1: \n        return memo[n]\n    else: \n        memo[n] = count_ways_memoized(n - 1, memo) + count_ways_memoized(n - 2, memo) + count_ways_memoized(n - 3, memo)\n        return memo[n]\ndef count_ways_tabulation(n): \n    '''\n    Count ways to reach to nth stair \n    '''\n    memo = [0] * (n + 1)\n    memo[1] = 1\n    memo[2] = 2\n    memo[3] = 4\n    for i in range(4,n + 1): \n        memo[i] = memo[i - 1] + memo[i - 2] + memo[i - 3]\n    return memo[n]\ndef count_ways_tabulation_iterative(n): \n    '''\n    Count ways to reach to nth stair \n    '''\n    memo = [0] * (n + 1)\n    memo[1] = 1\n    memo[2] = 2\n    memo[3] = 4\n    for i in range(4,n + 1): \n        memo[i] = memo[i - 1] + memo[i - 2] + memo[i - 3]\n    return memo[n]\ndef sum_of_digits(n): \n    '''\n    Sum of digits of a number\n    '''\n    if n == 0: \n        return 0\n    else: \n        return n % 10 + sum_of_digits(n // 10)\ndef sum_of_digits_iterative(n): \n    '''\n    Sum of digits of a number\n    '''\n    sum = 0\n    while n > 0: \n        sum += n % 10\n        n //= 10\n    return sum\ndef sum_of_digits_recursive(n): \n    '''\n    Sum of digits of a number\n    '''\n    if n == 0: \n        return 0\n    else: \n        return n % 10 + sum_of_digits_recursive(n // 10)\ndef sum_of_digits_iterative_using_while(n): \n    '''\n    Sum of digits of a number\n    '''\n    sum = 0\n    while n > 0: \n        sum += n % 10\n        n //= 10\n    return sum\ndef sum_of_digits_iterative_using_for_loop(n): \n    '''\n    Sum of digits of a number\n    '''\n    sum = 0\n    for i in range(0,len(str(n))): \n        sum += n % 10\n        n //= 10\n    return sum\ndef sum_of_digits_recursive_using_loop(n): \n    '''\n    Sum of digits of a number\n    '''\n    if n == 0: \n        return 0\n    else: \n        return n % 10 + sum_of_digits_recursive_using_loop(n // 10)\ndef sum_of_digits_recursive_using_recursion(n): \n    '''\n    Sum of digits of a number\n    '''\n    if n == 0: \n        return 0\n    else: \n        return n % 10 + sum_of_digits_recursive(n // 10)\ndef sum_of_digits_recursive_using_recursion_using_array(n): \n    '''\n    Sum of digits of a number\n    '''\n    sum = 0\n    temp = n\n    while n > 0: \n        sum += n % 10\n        n //= 10\n    n = temp\n    return sum + n\ndef sum_of_digits_iterative_using_recursion(n): \n    '''\n    Sum of digits of a number\n    '''\n    if n == 0: \n        return 0\n    else: \n        return n % 10 + sum_of_digits_iterative(n // 10)\ndef sum_of_digits_iterative_using_recursion_iterative(n): \n    '''\n    Sum of digits of a number\n    '''\n    sum = 0\n    while n > 0: \n        sum += n % 10\n        n //= 10\n    return sum\ndef sum_of_digits_iterative_using_recursion_iterative_while(n): \n    '''\n    Sum of digits of a number\n    '''\n    sum = 0\n    while n > 0: \n        sum += n % 10\n        n //= 10\n    return sum\ndef sum_of_digits_recursive_iterative_using_loop(n): \n    '''\n    Sum of digits of a number\n    '''\n    if n == 0: \n        return 0\n    else: \n        return n % 10 + sum_of_digits_recursive_iterative(n // 10)\ndef sum_of_digits_recursive_iterative_using_recursion(n): \n    '''\n    Sum of digits of a number\n    '''\n    if n == 0: \n        return 0\n    else: \n    "
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 3\n    elif n == 2:\n        return 5\n    else:\n        return 1 + 3 * n + 2 * (n - 1) * (n - 2)\ndef happy_number(num):\n    '''\n    Write a function to check if a number is a happy number or not. geeksforgeeks.org/happy-number/\n    '''\n    rem = sum = 0\n    num = str(num)\n    for i in num:\n        rem = int(i) * int(i)\n        sum = sum + rem\n    if sum == 1:\n        return True\n    else:\n        return False\ndef palindrome(string):\n    '''\n    Write a function to check if a string is palindrome or not. geeksforgeeks.org/check-if-a-string-is-a-palindrome-or-not/\n    '''\n    length = len(string)\n    mid = length / 2\n    flag = True\n    for i in range(mid):\n        if string[i]!= string[length - i - 1]:\n            flag = False\n            break\n    if flag:\n        return True\n    else:\n        return False\ndef find_word(s):\n    '''\n    Write a function to find word in a string. geeksforgeeks.org/find-word-in-a-string/\n    '''\n    s = s.lower()\n    for i in s.split():\n        if palindrome(i):\n            return i\n    return -1\ndef is_vowel(ch):\n    '''\n    Write a function to check if a character is a vowel or not. geeksforgeeks.org/check-if-a-character-is-a-vowel-or-not/\n    '''\n    if ch in \"aeiouAEIOU\":\n        return True\n    else:\n        return False\ndef count_vowels(string):\n    '''\n    Write a function to count vowels in a string. geeksforgeeks.org/count-vowels-in-a-string/\n    '''\n    count = 0\n    for i in string:\n        if is_vowel(i):\n            count += 1\n    return count\ndef check_for_digits(num):\n    '''\n    Write a function to check if a number is a digit or not. geeksforgeeks.org/check-if-a-number-is-a-digit-or-not/\n    '''\n    if num >= 0:\n        return True\n    else:\n        return False\ndef find_next_smaller(num):\n    '''\n    Write a function to find next smaller number with digits. geeksforgeeks.org/find-next-smaller-number-with-digits/\n    '''\n    digits = 0\n    while num > 0:\n        digits += 1\n        num /= 10\n    for i in range(10):\n        if 10 ** (digits - 1) < i < num:\n            return 10 ** (digits - 1) * i\n    return 0\ndef find_next_palindrome(num):\n    '''\n    Write a function to find the next palindrome number. geeksforgeeks.org/next-palindrome-number/\n    '''\n    num = num + 1\n    while not palindrome(num):\n        num += 1\n    return num\ndef remove_spaces(string):\n    '''\n    Write a function to remove spaces from a string. geeksforgeeks.org/remove-spaces-from-a-string/\n    '''\n    return string.replace(' ', '')\ndef remove_duplicates(string):\n    '''\n    Write a function to remove duplicates from a string. geeksforgeeks.org/remove-duplicate-characters-from-a-string/\n    '''\n    d = {}\n    for i in string:\n        if i not in d:\n            d[i] = 1\n    return \"\".join(d.keys())\ndef reverse_string(string):\n    '''\n    Write a function to reverse a string. geeksforgeeks.org/reverse-a-string/\n    '''\n    return string[::-1]\ndef rotate(string, k):\n    '''\n    Write a function to rotate a string. geeksforgeeks.org/rotate-string/\n    '''\n    if k > len(string):\n        k = k % len(string)\n    return string[k:] + string[:k]\ndef replace_vowels(string):\n    '''\n    Write a function to replace vowels in a string. geeksforgeeks.org/replace-vowels-in-string/\n    '''\n    vowels = \"aeiouAEIOU\"\n    for i in string:\n        if i in vowels:\n            string = string.replace(i, '')\n    return string\ndef count_vowels(string):\n    '''\n    Write a function to count vowels in a string. geeksforgeeks.org/count-vowels-in-a-string/\n    '''\n    count = 0\n    for i in string:\n        if is_vowel(i):\n            count += 1\n    return count\ndef is_anagram(string1, string2):\n    '''\n    Write a function to check if two strings are anagrams or not. geeksforgeeks.org/check-if-two-strings-are-anagrams/\n    '''\n    if len(string1)!= len(string2):\n        return False\n    else:\n        for i in string1:\n            if i not in string2:\n                return False\n        for i in string2:\n            if i not in string1:\n                return False\n        return True\ndef list_diff(l1, l2):\n    '''\n    Write a function to find the difference between two list. geeksforgeeks.org/list-difference/\n    '''\n    return [i for i in l1 + l2 if i not in l1 or i not in l2]\ndef count_vowels(string):\n    '''\n    Write a function to count vowels in a string. geeksforgeeks.org/count-vowels-in-a-string/\n    '''\n    count = 0\n    for i in string:\n        if is_vowel(i):\n            count += 1\n    return count\ndef find_smallest_element(l):\n    '''\n    Write a function to find the smallest element in a list. geeksforgeeks.org/find-smallest-element-in-a-list/\n    '''\n    smallest = l[0]\n    for i in l:\n        if i < smallest:\n            smallest = i\n    return smallest\ndef partition(l):\n    '''\n    Write a function to partition a list into two sublists such that all elements in one sublist are less than the other. geeksforgeeks.org/partition-a-list-into-two-sublists/\n    '''\n    smallest = find_smallest_element(l)\n    i = l.index(smallest)\n    smaller = l[:i]\n    larger = l[i + 1:]\n    return smaller, larger\ndef find_smallest_element(l):\n    '''\n    Write a function to find the smallest element in a list. geeksforgeeks.org/find-smallest-element-in-a-list/\n    '''\n    smallest = l[0]\n    for i in l:\n        if i < smallest:\n            smallest = i\n    return smallest\ndef pair_sum(l, s):\n    '''\n    Write a function to find the pair of elements in a list that sum to a given value. geeksforgeeks.org/find-the-pair-of-elements-in-a-list-that-sum-to-a-given-value/\n    '''\n    d = {}\n    for i in l:\n        if i not in d:\n            d[s - i] = 1\n        else:\n            return i, s - i\n    return 0, 0\ndef find_smallest_element(l):\n    '''\n    Write a function to find the smallest element in a list. geeksforgeeks.org/find-smallest-element-in-a-list/\n    '''\n    smallest = l["
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    numbers = [1,3,5,7,9,11,13,15,17,19]\n    return numbers[n%10] if n%10 <> 0 else 1\ndef get_pollution(s): \n    '''\n    For a given string of characters, the function finds the longest word that can be replaced with any letter of the alphabet \n    to get an equal number of 'a's and 'e's. \n    '''\n    a = s.count('a')\n    e = s.count('e')\n    if a == e:\n        return \"\"\n    elif a > e:\n        for i in range(len(s)):\n            if s[i] == 'e':\n                s[i] = 'a'\n                e += 1\n                if a == e:\n                    return s\n    else:\n        for i in range(len(s)):\n            if s[i] == 'a':\n                s[i] = 'e'\n                a += 1\n                if a == e:\n                    return s\ndef is_polite_correct(n): \n    '''\n    Write a function to find whether a given number is a polite number or not.\n    '''\n    is_polite = True \n    if n%2 == 0:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i == 0:\n                is_polite = False\n                break\n    else:\n        is_polite = False\n    return is_polite\ndef is_polite_correct_for_str(s): \n    '''\n    Write a function to find whether a given string is a polite string or not.\n    '''\n    is_polite = True \n    for i in range(1,len(s)):\n        if s[i] == s[i-1]:\n            is_polite = False\n            break\n    return is_polite\ndef find_s(n): \n    '''\n    Write a function to find nth smallest number. \n    '''\n    numbers = [1,2,3,4,5,6,7,8,9]\n    return numbers[n%10] if n%10 <> 0 else 1\ndef find_n(n): \n    '''\n    Write a function to find nth largest number. \n    '''\n    numbers = [1,2,3,4,5,6,7,8,9]\n    return numbers[n%10] if n%10 <> 0 else 1\ndef find_n_str(s): \n    '''\n    Write a function to find nth largest number in a string. \n    '''\n    numbers = [1,2,3,4,5,6,7,8,9]\n    return numbers[s%10] if s%10 <> 0 else 1\ndef find_n_str_2(s): \n    '''\n    Write a function to find nth largest number in a string. \n    '''\n    numbers = [1,2,3,4,5,6,7,8,9]\n    s = s.replace(\" \",\"\")\n    for i in range(len(s)):\n        if s[i] in numbers:\n            numbers.remove(s[i])\n    return numbers[len(numbers)-1] if len(numbers) <> 0 else 1\ndef find_n_str_3(s): \n    '''\n    Write a function to find nth largest number in a string. \n    '''\n    numbers = [1,2,3,4,5,6,7,8,9]\n    s = s.replace(\" \",\"\")\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] in numbers:\n            numbers.remove(s[i])\n    return numbers[len(numbers)-1] if len(numbers) <> 0 else 1\ndef find_n_str_4(s): \n    '''\n    Write a function to find nth largest number in a string. \n    '''\n    numbers = [1,2,3,4,5,6,7,8,9]\n    s = s.replace(\" \",\"\")\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] in numbers:\n            numbers.remove(s[i])\n    return numbers[len(numbers)-1] if len(numbers) <> 0 else 1\ndef find_n_str_5(s): \n    '''\n    Write a function to find nth largest number in a string. \n    '''\n    numbers = [1,2,3,4,5,6,7,8,9]\n    s = s.replace(\" \",\"\")\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] in numbers:\n            numbers.remove(s[i])\n    return numbers[len(numbers)-1] if len(numbers) <> 0 else 1\ndef find_n_str_6(s): \n    '''\n    Write a function to find nth largest number in a string. \n    '''\n    numbers = [1,2,3,4,5,6,7,8,9]\n    s = s.replace(\" \",\"\")\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] in numbers:\n            numbers.remove(s[i])\n    return numbers[len(numbers)-1] if len(numbers) <> 0 else 1\ndef find_n_str_7(s): \n    '''\n    Write a function to find nth largest number in a string. \n    '''\n    numbers = [1,2,3,4,5,6,7,8,9]\n    s = s.replace(\" \",\"\")\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] in numbers:\n            numbers.remove(s[i])\n    return numbers[len(numbers)-1] if len(numbers) <> 0 else 1\ndef find_n_str_8(s): \n    '''\n    Write a function to find nth largest number in a string. \n    '''\n    numbers = [1,2,3,4,5,6,7,8,9]\n    s = s.replace(\" \",\"\")\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] in numbers:\n            numbers.remove(s[i])\n    return numbers[len(numbers)-1] if len(numbers) <> 0 else 1\ndef find_n_str_9(s): \n    '''\n    Write a function to find nth largest number in a string. \n    '''\n    numbers = [1,2,3,4,5,6,7,8,9]\n    s = s.replace(\" \",\"\")\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] in numbers:\n            numbers.remove(s[i])\n    return numbers[len(numbers)-1] if len(numbers) <> 0 else 1\ndef find_n_str_10(s): \n    '''\n    Write a function to find nth largest number in a string. \n    '''\n    numbers = [1,2,3,4,5,6,7,8,9]\n    s = s.replace(\" \",\"\")\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] in numbers:\n            numbers.remove(s[i])\n    return numbers[len(numbers)-1] if len(numbers) <> 0 else 1\ndef find_n_str_11(s): \n    '''\n    Write a function to find nth largest number in a string. \n    '''\n    numbers = [1,2,3,4,5,6,7,8,9]\n    s = s.replace(\" \",\"\")\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] in number"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    a = 1\n    n = n - 1\n    while n>0:\n        a = a*(3*n*n+1)/(2*n-1)\n        n = n-1\n    return int(a)\n    \ndef find_nth_polite_number(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    else:\n        a = 1\n        n = n - 1\n        while n>0:\n            a = 3*a*n/(2*n-1)\n            n = n-1\n        return int(a)\n    \ndef find_nth_polite_number(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    else:\n        a = 1\n        n = n - 1\n        while n>0:\n            a = 3*a*n/(2*n-1)\n            n = n-1\n        return int(a)\n    \ndef find_nth_polite_number(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    else:\n        a = 1\n        n = n - 1\n        while n>0:\n            a = 3*a*n/(2*n-1)\n            n = n-1\n        return int(a)\n    \ndef find_nth_polite_number(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    else:\n        a = 1\n        n = n - 1\n        while n>0:\n            a = 3*a*n/(2*n-1)\n            n = n-1\n        return int(a)\n    \ndef find_nth_polite_number(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    else:\n        a = 1\n        n = n - 1\n        while n>0:\n            a = 3*a*n/(2*n-1)\n            n = n-1\n        return int(a)\n    \ndef find_nth_polite_number(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    else:\n        a = 1\n        n = n - 1\n        while n>0:\n            a = 3*a*n/(2*n-1)\n            n = n-1\n        return int(a)\n    \ndef find_nth_polite_number(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    else:\n        a = 1\n        n = n - 1\n        while n>0:\n            a = 3*a*n/(2*n-1)\n            n = n-1\n        return int(a)\n    \ndef find_nth_polite_number(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    else:\n        a = 1\n        n = n - 1\n        while n>0:\n            a = 3*a*n/(2*n-1)\n            n = n-1\n        return int(a)\n    \ndef find_nth_polite_number(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    else:\n        a = 1\n        n = n - 1\n        while n>0:\n            a = 3*a*n/(2*n-1)\n            n = n-1\n        return int(a)\n    \ndef find_nth_polite_number(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    else:\n        a = 1\n        n = n - 1\n        while n>0:\n            a = 3*a*n/(2*n-1)\n            n = n-1\n        return int(a)\n    \ndef find_nth_polite_number(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    else:\n        a = 1\n        n = n - 1\n        while n>0:\n            a = 3*a*n/(2*n-1)\n            n = n-1\n        return int(a)\n    \ndef find_nth_polite_number(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    else:\n        a = 1\n        n = n - 1\n        while n>0:\n            a = 3*a*n/(2*n-1)\n            n = n-1\n        return int(a)\n    \ndef find_nth_polite_number(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    else:\n        a = 1\n        n = n - 1\n        while n>0:\n            a = 3*a*n/(2*n-1)\n            n = n-1\n        return int(a)\n    \ndef find_nth_polite_number(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    else:\n        a = 1\n        n = n - 1\n        while n>0:\n            a = 3*a*n/(2*n-1)\n            n = n-1\n        return int(a)\n    \ndef find_nth_polite_number(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    else:\n        a = 1\n        n = n - 1\n        while n>0:\n            a = 3*a*n/(2*n-1)\n            n = n-1\n        return int(a)\n    \ndef find_nth_polite_number(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    else:\n        a = 1\n        n = n - 1\n        while n>0:\n            a = 3*a*n/(2*n-1)\n            n = n-1\n        return int(a)\n    \ndef find_nth_polite_number(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    else:\n        a "
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) <= 1:\n        return []\n    new_l1 = []\n    for i in range(len(l1)-1):\n        new_l1.append(l1[i], l1[i+1])\n    return new_l1\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    i = 0\n    j = 1\n    l = []\n    while i < len(l1):\n        l.append([l1[i],l1[j]])\n        i += 1\n        j += 1\n    return l\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) == 0:\n        return []\n    if len(l1) == 1:\n        return [[l1[0],l1[0]+1]]\n    return [[l1[0],l1[0]+1]] + pair_wise(l1[1:])\n    \n    \ndef get_pairs_of_numbers(nums, nums_dict):\n    '''\n    This function returns a list of all pairs of numbers in a given list of numbers.\n    '''\n    nums_pairs = pair_wise(nums)\n    nums_pairs_filtered = []\n    for pair in nums_pairs:\n        if (pair[1] - pair[0]) in nums_dict:\n            nums_pairs_filtered.append(pair)\n    return nums_pairs_filtered\n    \n    \ndef get_max_occurring_num_pairs(nums, nums_dict):\n    '''\n    This function returns a list of all pairs of numbers in a given list of numbers.\n    '''\n    nums_pairs = get_pairs_of_numbers(nums, nums_dict)\n    max_occurring_nums = []\n    max_occurring_nums_counts = []\n    for pair in nums_pairs:\n        if nums_dict[pair[1] - pair[0]] >= max_occurring_nums_counts[-1]:\n            max_occurring_nums.append(pair)\n            max_occurring_nums_counts.append(nums_dict[pair[1] - pair[0]])\n    return max_occurring_nums\n    \ndef get_unique_pairs(nums, nums_dict):\n    '''\n    This function returns a list of all unique pairs of numbers in a given list of numbers.\n    '''\n    nums_pairs = get_pairs_of_numbers(nums, nums_dict)\n    unique_nums_pairs = []\n    for pair in nums_pairs:\n        if pair not in unique_nums_pairs:\n            unique_nums_pairs.append(pair)\n    return unique_nums_pairs\n    \ndef remove_duplicates(nums):\n    '''\n    Write a function that takes a list of numbers and returns a new list with the same elements in the \n    original list and in the same order. Do not use the sort method to solve this problem.\n    '''\n    if len(nums) == 0:\n        return nums\n    num_to_remove = nums[0]\n    nums_without_duplicates = [num_to_remove]\n    for i in range(1, len(nums)):\n        if nums[i]!= num_to_remove:\n            nums_without_duplicates.append(nums[i])\n            num_to_remove = nums[i]\n    return nums_without_duplicates\n    \ndef swap(nums, p1, p2):\n    '''\n    Write a function that takes a list of numbers and two indexes, and swaps the elements at the two \n    indices.\n    '''\n    nums[p1], nums[p2] = nums[p2], nums[p1]\n    return nums\n    \ndef remove_duplicates_without_using_sort(nums):\n    '''\n    Write a function that takes a list of numbers and returns a new list with the same elements in the \n    original list and in the same order. Do not use the sort method to solve this problem.\n    '''\n    num_to_remove = nums[0]\n    nums_without_duplicates = [num_to_remove]\n    for i in range(1, len(nums)):\n        if nums[i]!= num_to_remove:\n            nums_without_duplicates.append(nums[i])\n            num_to_remove = nums[i]\n    return nums_without_duplicates\n    \ndef is_valid_walk(walk):\n    '''\n    Given a list of strings, write a function to determine if a walk is valid. \n    A valid walk is made of exactly 10 strings, where each string is a valid direction \n    on the walk like \"n\", \"s\", \"e\", or \"w\". \n    \n    For example, [\"n\", \"s\", \"n\", \"s\", \"n\", \"s\", \"n\", \"s\", \"n\", \"s\"] is a valid walk, \n    but [\"n\", \"s\", \"n\", \"s\", \"n\", \"s\", \"n\", \"s\", \"n\", \"s\", \"s\"] is not.\n    '''\n    return len(walk) == 10 and walk.count('n') == walk.count('s') and walk.count('e') == walk.count('w')\n    \ndef is_valid_walk_2(walk):\n    '''\n    Given a list of strings, write a function to determine if a walk is valid. \n    A valid walk is made of exactly 10 strings, where each string is a valid direction \n    on the walk like \"n\", \"s\", \"e\", or \"w\". \n    \n    For example, [\"n\", \"s\", \"n\", \"s\", \"n\", \"s\", \"n\", \"s\", \"n\", \"s\"] is a valid walk, \n    but [\"n\", \"s\", \"n\", \"s\", \"n\", \"s\", \"n\", \"s\", \"n\", \"s\", \"s\"] is not.\n    '''\n    return len(walk) == 10 and walk.count('n') == walk.count('s') and walk.count('e') == walk.count('w') and walk.count('n') == walk.count('s')\n    \ndef find_bunny_pos(bunnies, pos):\n    '''\n    This function returns the bunny position in the list of bunnies. If the bunny is not found, then \n    the function returns None.\n    '''\n    if len(bunnies) == 0:\n        return None\n    if pos >= len(bunnies):\n        return None\n    return bunnies[pos]\n    \ndef bunnies_in_bunny_positions(bunnies, pos1, pos2):\n    '''\n    This function returns a list of the bunnies in positions pos1 and pos2. If either position is \n    greater than the length of the list, then the function returns None.\n    '''\n    bunnies_pos_1 = find_bunny_pos(bunnies, pos1)\n    bunnies_pos_2 = find_bunny_pos(bunnies, pos2)\n    if bunnies_pos_1 == None or bunnies_pos_2 == None:\n        return None\n    return [bunnies_pos_1, bunnies_pos_2]\n    \ndef same_bunnies_in_both_positions(bunnies, pos1, pos2):\n    '''\n    This function returns True if the two bunnies in positions pos1 and pos2 have the same position \n    in the list of bunnies. Otherwise, it returns False.\n    '''\n    bunnies_in_pos_1 = bunnies_in_bunny_positions(bunnies, pos1, pos2)\n    bunnies_in_pos_2 = bunnies_in_bunny_positions(bunnies, pos2, pos1)\n    if bunnies_in_pos_1 == None or bunnies_in_pos_2 == None:\n        return False\n    if bunnies_in_pos_1[0] == bunnies_in_pos_2[0] and bunnies_in_pos_1[1] == bunnies_in_pos_2[1]:\n        return True\n    return False\n    \ndef find_num_of_bunnies_in_both_positions(bunnies, pos1, pos2):\n    '''\n    This function returns the number of bunnies in positions pos1 and pos2. If either position is \n    greater than the length of the list, then the function returns None.\n    '''\n    bunnies_in_pos_1 = bunnies_in_bunny_positions(bunnies, pos1, pos2)\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    length = len(l1)\n    if length < 2:\n        return []\n    result = []\n    for i in xrange(length - 1):\n        result.append([l1[i], l1[i + 1]])\n    return result\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    \n    # for i in l1:\n    #     for j in l1:\n    #         if i+1 == j:\n    #             print i,j\n    #     print ''\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1 = l1 + [None]\n    l2 = []\n    for i in range(len(l1)):\n        if i == len(l1)-1:\n            break\n        l2.append(l1[i:i+2])\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    list1 = []\n    for i in range(len(l1)-1):\n        list1.append([l1[i],l1[i+1]])\n    return list1\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1) - 1):\n        result.append([l1[i], l1[i + 1]])\n    return result\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    \n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    s1 = sorted(l1)\n    out = []\n    for i in range(len(s1)):\n        if i == len(s1) - 1:\n            break\n        out.append(s1[i], s1[i+1])\n    return out\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    map = {}\n    for num in arr:\n        temp = sum - num\n        if temp in map:\n            return 2\n        else:\n            map[num] = 1\n    return 0\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    d = {}\n    for num in arr:\n        if sum-num in d:\n            d[sum-num] += 1\n        else:\n            d[num] = 1\n    return d\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] + arr[j] == sum):\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if len(arr) < 2:\n        return 0\n    sums = {}\n    for i in range(0, len(arr)):\n        sums[arr[i]] = sums.get(arr[i], 0) + 1\n    count = 0\n    for i in sums:\n        if sum - i in sums:\n            count += sums[i] * sums[sum - i]\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    arr.sort()\n    i, j = 0, len(arr) - 1\n    while i < j:\n        if arr[i] + arr[j] == sum:\n            return 1\n        elif arr[i] + arr[j] > sum:\n            j -= 1\n        else:\n            i += 1\n    return 0\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1)-set(li2)))\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n    \ndef is_vowel(letter):\n    '''\n    Write a python function to check if a letter is a vowel or not.\n    '''\n    vowels = 'aeiouAEIOU'\n    return letter.lower() in vowels\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n    \n    \ndef GetTopWords(L,idx,n):\n    '''\n    Write a python function to get the top n words of a list.\n    '''\n    return [L[idx] for idx in range(0,n)]\n    \n    \ndef RemoveWords(L,idx,n):\n    '''\n    Write a python function to remove a word from the top n words of a list.\n    '''\n    return [L[idx] for idx in range(0,n) if idx!=idx]\n    \n    \ndef Contains(li1,li2):\n    '''\n    Write a python function to check if li2 is sublist of li1\n    '''\n    return set(li2).issubset(set(li1))\n    \n    \ndef GetElementsInList(L,idx,n):\n    '''\n    Write a python function to get a particular element of n-elements from the list\n    '''\n    return L[idx][0:n]\n    \n    \ndef GetSetCombinations(L,idx,n):\n    '''\n    Write a python function to get all the combinations of size n from the list.\n    '''\n    li = list(L[idx])\n    return [li[idx:(idx+n)] for idx in range(0,len(li)-n+1)]\n    \n    \ndef GetIntersection(li1,li2):\n    '''\n    Write a python function to get the intersection of two lists.\n    '''\n    return list(set(li1).intersection(set(li2)))\n    \n    \ndef GetUniqueElements(li):\n    '''\n    Write a python function to get the unique elements of a list.\n    '''\n    return list(set(li))\n    \n    \ndef ContainsAll(li,li2):\n    '''\n    Write a python function to check if all the elements of a list are present in a list.\n    '''\n    return set(li) <= set(li2)\n    \n    \ndef RemoveElementsFromList(L,idx,n):\n    '''\n    Write a python function to remove elements from the top n elements of a list.\n    '''\n    return [L[idx] for idx in range(0,n)]\n    \n    \ndef GetWordLengths(L):\n    '''\n    Write a python function to get the lengths of all the words in a list.\n    '''\n    return [len(L[idx]) for idx in range(0,len(L))]\n    \n    \ndef ReplaceWords(L,idx,n):\n    '''\n    Write a python function to replace the word of the top n words in a list.\n    '''\n    return [L[idx] for idx in range(0,n)]\n    \n    \ndef RemoveWordsFromList(L,idx,n):\n    '''\n    Write a python function to remove the top n words of a list.\n    '''\n    return [L[idx] for idx in range(0,n)]\n    \n    \ndef Flatten(L):\n    '''\n    Write a python function to flatten a list.\n    '''\n    return [item for sublist in L for item in sublist]\n    \n    \ndef SortByLength(L):\n    '''\n    Write a python function to sort a list by length.\n    '''\n    return sorted(L,key=len)\n    \n    \ndef UniqueList(L):\n    '''\n    Write a python function to remove the duplicates of a list.\n    '''\n    return list(set(L))\n    \n    \ndef GetSimilarity(li1,li2):\n    '''\n    Write a python function to get the similarity between two lists.\n    '''\n    return len(GetIntersection(li1,li2))/float(len(li1)+len(li2)-len(GetIntersection(li1,li2)))\n    \n    \ndef GetListFrequencies(L):\n    '''\n    Write a python function to get the frequency of each element of a list.\n    '''\n    freq = {}\n    for elem in L:\n        if elem not in freq:\n            freq[elem] = 1\n        else:\n            freq[elem] += 1\n    return freq\n    \n    \ndef GetListCommons(L):\n    '''\n    Write a python function to get the commons of two lists.\n    '''\n    return list(set(L[0]).intersection(set(L[1])))\n    \n    \ndef GetMaxWords(L):\n    '''\n    Write a python function to get the max words in a list.\n    '''\n    return max([len(L[idx]) for idx in range(0,len(L))])\n    \n    \ndef GetMaxElements(L):\n    '''\n    Write a python function to get the max elements in a list.\n    '''\n    return max([len(L[idx]) for idx in range(0,len(L))])\n    \n    \ndef GetMinWords(L):\n    '''\n    Write a python function to get the min words in a list.\n    '''\n    return min([len(L[idx]) for idx in range(0,len(L))])\n    \n    \ndef GetMinElements(L):\n    '''\n    Write a python function to get the min elements in a list.\n    '''\n    return min([len(L[idx]) for idx in range(0,len(L))])\n    \n    \ndef InsertBefore(L,idx,elem):\n    '''\n    Write a python function to insert an element before the idx position of a list.\n    '''\n    return [L[idx-1]+[elem]+L[idx:] for idx in range(0,len(L))]\n    \n    \ndef InsertAfter(L,idx,elem):\n    '''\n    Write a python function to insert an element after the idx position of a list.\n    '''\n    return [L[idx:]+[elem]+L[0:idx] for idx in range(0,len(L))]\n    \n    \ndef Insert(L,idx,elem):\n    '''\n    Write a python function to insert an element at the idx position of a list.\n    '''\n    return [L[:idx]+[elem]+L[idx:] for idx in range(0,len(L))]\n    \n    \ndef ReplaceElementInList(L,idx,elem):\n    '''\n    Write a python function to replace the element of the idx position of a list.\n    '''\n    return [L[:idx]+[elem]+L[idx+1:] for idx in range(0,len(L))]\n    \n    \ndef AddElementAtStart(L,elem):\n    '''\n    Write a python function to add an element at the start of a list.\n    '''\n    return [elem]+L\n    \n    \ndef AddElementAtEnd(L,elem):\n    '''\n    Write a python function to add an element at the end of a list.\n    '''\n    return L+[elem]\n    \n    \ndef AddElement(L,idx,elem):\n    '''\n    Write a python function to add an element at the idx position of a list.\n    '''\n    return L[:idx]+[elem]+L[idx:]\n    \n    \ndef AddElementToEnd(L,elem):\n    '''\n    Write a python function to add an element to the end of a list.\n    '''\n    return L+[elem]\n    \n    \ndef GetSmallestElem(L):\n    '''\n    Write a python function to get the smallest element of a list.\n    '''\n    return min(L)\n    \n    \ndef GetLargestElem(L):\n    '''\n    Write a python function to get the largest element of a list.\n    '''\n    return max(L)\n    \n    \ndef RemoveElemFromList(L,idx):\n    '''\n    Write a python function to remove the element of the idx position from a list.\n    '''\n    return L[:idx]+"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(list(set(li1)-set(li2)) + list(set(li2)-set(li1)))\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = [item for item in li1 + li2 if item not in li1 or item not in li2]\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1) :\n        if i%2 == 1 :\n            sum += i**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # [1,3,5,7,9,11,...]\n    # sum(n^4) = n^4 + n^3 + n^2 + n\n    # sum(n^4) = (n+1)^4 - n^4\n    # (n+1)^4 - n^4 = (n+1)(n+2)... (n+1)^2 - n^2\n    # sum(n^4) = ((n+1)^2)(n+2)... n^2 + n\n    # sum(n^4) = (n+1)(n+2)(n+3)... n^2 + n\n    # sum(n^4) = n^3 + n^2 + n^1 + n\n    # sum(n^4) = n^3 + n^2 + n + 1\n    # sum(n^4) = n^3 + n^2 + n^1 + n + 1\n    # sum(n^4) = n^3 + n^2 + n + 2\n    # sum(n^4) = n^3 + n^2 + n + 3\n    # sum(n^4) = n^3 + n^2 + n + 4\n    # sum(n^4) = n^3 + n^2 + n + 5\n    # sum(n^4) = n^3 + n^2 + n + 6\n    # sum(n^4) = n^3 + n^2 + n + 7\n    # sum(n^4) = n^3 + n^2 + n + 8\n    # sum(n^4) = n^3 + n^2 + n + 9\n    # sum(n^4) = n^3 + n^2 + n + 10\n    # sum(n^4) = n^3 + n^2 + n + 11\n    # sum(n^4) = n^3 + n^2 + n + 12\n    # sum(n^4) = n^3 + n^2 + n + 13\n    # sum(n^4) = n^3 + n^2 + n + 14\n    # sum(n^4) = n^3 + n^2 + n + 15\n    # sum(n^4) = n^3 + n^2 + n + 16\n    # sum(n^4) = n^3 + n^2 + n + 17\n    # sum(n^4) = n^3 + n^2 + n + 18\n    # sum(n^4) = n^3 + n^2 + n + 19\n    # sum(n^4) = n^3 + n^2 + n + 20\n    # sum(n^4) = n^3 + n^2 + n + 21\n    # sum(n^4) = n^3 + n^2 + n + 22\n    # sum(n^4) = n^3 + n^2 + n + 23\n    # sum(n^4) = n^3 + n^2 + n + 24\n    # sum(n^4) = n^3 + n^2 + n + 25\n    # sum(n^4) = n^3 + n^2 + n + 26\n    # sum(n^4) = n^3 + n^2 + n + 27\n    # sum(n^4) = n^3 + n^2 + n + 28\n    # sum(n^4) = n^3 + n^2 + n + 29\n    # sum(n^4) = n^3 + n^2 + n + 30\n    # sum(n^4) = n^3 + n^2 + n + 31\n    # sum(n^4) = n^3 + n^2 + n + 32\n    # sum(n^4) = n^3 + n^2 + n + 33\n    # sum(n^4) = n^3 + n^2 + n + 34\n    # sum(n^4) = n^3 + n^2 + n + 35\n    # sum(n^4) = n^3 + n^2 + n + 36\n    # sum(n^4) = n^3 + n^2 + n + 37\n    # sum(n^4) = n^3 + n^2 + n + 38\n    # sum(n^4) = n^3 + n^2 + n + 39\n    # sum(n^4) = n^3 + n^2 + n + 40\n    # sum(n^4) = n^3 + n^2 + n + 41\n    # sum(n^4) = n^3 + n^2 + n + 42\n    # sum(n^4) = n^3 + n^2 + n + 43\n    # sum(n^4) = n^3 + n^2 + n + 44\n    # sum(n^4) = n^3 + n^2 + n + 45\n    # sum(n^4) = n^3 + n^2 + n + 46\n    # sum(n^4) = n^3 + n^2 + n + 47\n    # sum(n^4) = n^3 + n^2 + n + 48\n    # sum(n^4) = n^3 + n^2 + n + 49\n    # sum(n^4) = n^3 + n^2 + n + 50\n    # sum(n^4) = n^3 + n^2 + n + 51\n    # sum(n^4) = n^3 + n^2 + n + 52\n    # sum(n^4) = n^3 + n^2 + n + 53\n    # sum(n^4) = n^3 + n^2 + n + 54\n    # sum(n^4) = n^3 + n^2 + n + 55\n    # sum(n^4) = n^3 + n^2 + n + 56\n    # sum(n^4) = n^3 + n^2 + n + 57\n    # sum(n^4) = n^3 + n^2 + n + 58\n    # sum(n^4) = n^3 + n^2 + n + 59\n    # sum(n^4) = n^3 + n^2 + n + 60\n    # sum(n^4) = n^3 + n^2 + n + 61\n    # sum(n^4) = n^3 + n^2 + n + 62\n    # sum(n^4) = n^3 + n^2 + n + 63\n    # sum(n^4) = n^3 + n^2 + n + 64\n    # sum(n^4) = n^3 + n^2 + n + 65\n    # sum(n^4) = n^3 + n^2 + n + 66\n    # sum(n^4) = n^3 + n^2 + n + 67\n    # sum(n^4) = n^3 + n^2 + n + 68\n    # sum(n^4) = n^3 + n^2 + n + 69\n    # sum(n^4) = n^3 + n^2 + n + 70\n    # sum(n^4) = n^3 + n^2 + n + 71\n    # sum(n^4) = n^3 + n^2 + n + 72\n    # sum(n^4) = n^3 + n^2 + n + 73\n    # sum(n^4) = n^3 + n^2 + n + 74\n    # sum(n^4) = n^3 + n^2 + n + 75\n    # sum(n^4) = n^3 + n^2 + n + 76\n    # sum(n^4) = n^3 + n^2 + n + 77\n    # sum(n^4) = n^3 + n^2 + n + 78\n    # sum(n^4) = n^3 + n^2 + n + 79\n    # sum(n^4) = n^3 + n^2 + n + 80\n    # sum(n^4) = n^3 + n^2 + n + 81\n    # sum(n^4) = n^3 + n^2 + n + 82\n    # sum(n^4) = n^3 + n^2 + n + 83\n    # sum(n^4) = n^3 + n^2 + n + 84\n    # sum(n^4) = n^3 + n^2 + n + 85\n    # sum(n^4) = n^3 + n^2 + n + 86\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum([x**4 for x in range(1, n, 2) if x%2==1])\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    i = 0\n    total = 0\n    while i <= n :\n        i += 2\n        total = total + i**4\n    return total\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n == 0 : \n        return 0 \n    else : \n        return n + odd_num_sum(n-1)\n    \n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n == 0 : \n        return 0\n    else : \n        return n**4 + odd_num_sum(n-1)\n    \ndef factorial(n) : \n    '''\n    Write a python function to find the factorial of a number. \n    '''\n    if n == 0 : \n        return 1\n    else : \n        return n * factorial(n-1)\n    \ndef palindrome(n) : \n    '''\n    Write a python function to check whether a number is palindrome or not. \n    '''\n    if n == 0 : \n        return True\n    else : \n        return n % 10 == n//10 % 10 and palindrome(n//10)\n    \ndef square_sum(n) : \n    '''\n    Write a python function to find the sum of the first n even square numbers. \n    '''\n    if n == 0 : \n        return 0\n    else : \n        return n**2 + square_sum(n-1)\n    \ndef sqrt(n) : \n    '''\n    Write a python function to find the square root of a number. \n    '''\n    if n == 0 : \n        return 0\n    elif n == 1 : \n        return 1\n    else : \n        return sqrt(n // 2) * 2 + (n % 2)\n    \ndef fibonacci(n) : \n    '''\n    Write a python function to find nth term of fibonacci sequence. \n    '''\n    if n == 0 : \n        return 0\n    elif n == 1 : \n        return 1\n    else : \n        return fibonacci(n-2) + fibonacci(n-1)\n    \ndef sum_of_digit(n) : \n    '''\n    Write a python function to find sum of digits of a number. \n    '''\n    if n == 0 : \n        return 0\n    else : \n        return n%10 + sum_of_digit(n//10)\n    \ndef fact_digit(n) : \n    '''\n    Write a python function to find factorial of a number. \n    '''\n    if n == 0 : \n        return 1\n    else : \n        return n * fact_digit(n-1)\n    \ndef sum_of_digit_of_num(n) : \n    '''\n    Write a python function to find sum of digits of a number. \n    '''\n    if n < 10 : \n        return n\n    else : \n        return (n%10) + sum_of_digit_of_num(n//10)\n    \ndef power(a, b) : \n    '''\n    Write a python function to find a number raised to a power. \n    '''\n    if b == 0 : \n        return 1\n    elif b == 1 : \n        return a\n    else : \n        return a * power(a, b-1)\n    \ndef f(n) : \n    '''\n    Write a python function to find the factorial of n. \n    '''\n    if n == 0 : \n        return 1\n    else : \n        return n * f(n-1)\n    \ndef to_power_of(x, n) : \n    '''\n    Write a python function to find x raised to a power. \n    '''\n    if n == 0 : \n        return 1\n    elif n == 1 : \n        return x\n    else : \n        return x * to_power_of(x, n-1)\n    \ndef fibonacci_series(n) : \n    '''\n    Write a python function to find the fibonacci series upto n terms. \n    '''\n    if n == 0 : \n        return [0]\n    elif n == 1 : \n        return [0, 1]\n    else : \n        return fibonacci_series(n-2) + fibonacci_series(n-1)\n    \ndef fibonacci_series_gen(n) : \n    '''\n    Write a python function to find the fibonacci series upto n terms. \n    '''\n    fib = [0, 1]\n    if n == 0 : \n        yield fib\n    elif n == 1 : \n        yield fib\n    else : \n        for i in range(n) : \n            fib.append(fib[i] + fib[i+1])\n            yield fib\n    \ndef sum_of_digit_series(n) : \n    '''\n    Write a python function to find the sum of digits of the fibonacci series upto n terms. \n    '''\n    if n == 0 : \n        return 0\n    elif n == 1 : \n        return 1\n    else : \n        return fibonacci_series_gen(n)[n-1]\n    \ndef fibonacci_series_term(n) : \n    '''\n    Write a python function to find the nth term of fibonacci series. \n    '''\n    if n == 0 : \n        return 0\n    elif n == 1 : \n        return 1\n    else : \n        return fibonacci_series_term(n-2) + fibonacci_series_term(n-1)\n    \ndef get_leap_years(n) : \n    '''\n    Write a python function to find all the leap years in the range of 1800 - n. \n    '''\n    if n <= 0 : \n        return []\n    else : \n        if n%4 == 0 : \n            if n%100 == 0 : \n                if n%400 == 0 : \n                    return get_leap_years(n-1) + [n]\n                else : \n                    return get_leap_years(n-1)\n            else : \n                return get_leap_years(n-1)\n        else : \n            return get_leap_years(n-1)\n    \ndef is_prime(n) : \n    '''\n    Write a python function to check whether a number is prime or not. \n    '''\n    if n == 0 : \n        return False\n    elif n == 1 : \n        return False\n    elif n == 2 : \n        return True\n    elif n%2 == 0 : \n        return False\n    else : \n        return all(n%i for i in range(3, int(n**0.5+1), 2))\n    \ndef permutations(n) : \n    '''\n    Write a python function to find all the permutations of a string. \n    '''\n    if n == 0 : \n        return []\n    elif n == 1 : \n        return [\"\"]\n    else : \n        n_before = permutations(n-1)\n        n_after = []\n        for before in n_before : \n            for i in range(len(before)) : \n                n_after.append(before[:i] + n + before[i:])\n        return n_before + n_after\n    \ndef all_permutations(n) : \n    '''\n    Write a python function to find all the permutations of a string. \n    '''\n    if n == 0 : \n        return []\n    elif n == 1 : \n        return [\"\"]\n    else : \n        n_before = all_permutations(n-1)\n        n_after = []\n        for before in n_before : \n            for i in range(len(before)) : \n                n_after.append(before[:i] + n + before[i:])\n        return n_before + n_after\n    \ndef permutation_index(n) : \n    '''\n    Write a python function to find the index of a permutation. \n    '''\n    if n == 0 : \n        return 0\n    else : \n        return permutation_index(n-1) + 1\n    \ndef all_permutation_indices(n) : \n    '''\n    Write a python function to find the index of a permutation. \n    '''\n    if n == 0 : \n        return 0\n    else : \n        return permutation_index(n) + all_permutation_indices(n-1)\n    \ndef find_permutatio"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    \n    sum = 0\n    for i in range(1, n+1, 2):\n        sum = sum + i**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum([x**4 for x in range(1,n) if x%2!=0])\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1) : \n        if i%2 == 1 : \n            total += i**4\n    return total\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    summation = 0\n    for i in range(1, n+1) :\n        if i % 2!= 0 :\n            summation = summation + i ** 4\n    return summation\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return False\n            c = stack.pop()\n            if (c == '(' and i!= ')') or (c == '{' and i!= '}') or (c == '[' and i!= ']'):\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n    # code here\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp)%2!=0:\n        return False\n    stack=deque()\n    for i in range(len(exp)):\n        if exp[i]=='(' or exp[i]=='{' or exp[i]=='[':\n            stack.append(exp[i])\n        elif exp[i]==')' and stack and stack[-1]=='(':\n            stack.pop()\n        elif exp[i]=='}' and stack and stack[-1]=='{':\n            stack.pop()\n        elif exp[i]==']' and stack and stack[-1]=='[':\n            stack.pop()\n        else:\n            return False\n    if stack:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for c in exp:\n        if c == '{' or c == '[' or c == '(':\n            stack.append(c)\n        elif c == '}' or c == ']' or c == ')':\n            if not stack:\n                return False\n            opening = stack.pop()\n            if (c == '}' and opening!= '{') or (c == ']' and opening!= '[') or (c == ')' and opening!= '('):\n                return False\n    return True if not stack else False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    print \"Expression: \", exp\n    s = list(exp)\n    if len(s) == 0:\n        return False\n    stack = deque()\n    for item in s:\n        if item == '(':\n            stack.append(item)\n        elif item == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    #Base case: Expression contains no parentheses\n    if exp == \"\":\n        return True\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp) % 2!= 0:\n        return False\n    queue = deque()\n    for i in range(0, len(exp)):\n        if exp[i] in '({[':\n            queue.append(exp[i])\n        elif exp[i] in ')}]':\n            if len(queue) == 0:\n                return False\n            top = queue.pop()\n            if (top == '(' and exp[i] == ')') or (top == '{' and exp[i] == '}') or (top == '[' and exp[i] == ']'):\n                continue\n            else:\n                return False\n    if len(queue) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return False\n            if i == ')':\n                if stack[-1]!= '(':\n                    return False\n                else:\n                    stack.pop()\n            elif i == '}':\n                if stack[-1]!= '{':\n                    return False\n                else:\n                    stack.pop()\n            else:\n                if stack[-1]!= '[':\n                    return False\n                else:\n                    stack.pop()\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    n = len(exp)\n    stack = []\n    for i in exp:\n        if i in ['(','[','{']:\n            stack.append(i)\n        else:\n            if len(stack)==0:\n                return False\n            else:\n                a = stack.pop()\n                if (a == '(' and i == ')') or (a == '[' and i == ']') or (a == '{' and i == '}'):\n                    pass\n                else:\n                    return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    brackets_stack = deque()\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if not test_str:\n        return ''\n    if K >= len(test_str):\n        return test_str\n    length_end = len(test_str) - K\n    length_start = 0\n    new_str = []\n    while length_start < length_end:\n        if not test_str[length_start].isalnum():\n            length_start += 1\n            continue\n        new_str.append(test_str[length_start])\n        length_start += 1\n    return ''.join(new_str)\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if test_str == '':\n        return ''\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if len(test_str) == 0:\n        return test_str\n    \n    res = \"\"\n    start = 0\n    for i in range(len(test_str)):\n        if test_str[i]!= \" \":\n            if i - start + 1 < K:\n                res += test_str[start]\n            else:\n                res += test_str[start]\n                start += 1\n        else:\n            if i - start + 1 == K:\n                start += 1\n                res += \" \"\n    \n    return res\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    result = \"\"\n    for i in range(len(test_str)):\n        if len(test_str[i]) == K:\n            continue\n        else:\n            result += test_str[i] + \" \"\n    return result\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    str_lst = test_str.split(' ')\n    for i in range(len(str_lst) - 1, -1, -1):\n        if len(str_lst[i])!= K:\n            del str_lst[i]\n    return''.join(str_lst)\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if test_str == None:\n        return None\n    if K > len(test_str):\n        return None\n    if K == 0:\n        return None\n    res = []\n    for i in range(len(test_str)):\n        if len(test_str[i:]) >= K:\n            res.append(test_str[i:i+K])\n    return res\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.split(' ')\n    res = []\n    for word in test_str:\n        if len(word) == K:\n            res.append(word)\n    print \" \".join(res)\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if len(test_str) <= K:\n        return test_str\n    else:\n        counter = K\n        for i in range(len(test_str)):\n            if i < len(test_str) - 1 and test_str[i] =='':\n                continue\n            elif test_str[i] =='' and test_str[i+1] =='':\n                continue\n            else:\n                if counter == 0:\n                    return test_str[:i+1]\n                counter -= 1\n        if counter == 0:\n            return test_str[:-K]\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    splits = test_str.split(' ')\n    for i in range(len(splits)):\n        if len(splits[i]) == K:\n            splits[i] = ''\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if K <= 0:\n        return test_str\n    elif K == 1:\n        return ''.join(filter(lambda x: x[0]!= x[-1], test_str.split(' ')))\n    else:\n        return''.join(filter(lambda x: len(x) > K, test_str.split(' ')))\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_len = len(pattern)\n    # print \"pattern_len =\",pattern_len\n    text_len = len(text)\n    # print \"text_len =\",text_len\n    count = 0\n    for i in range(0,text_len-pattern_len+1):\n        if (text[i:i+pattern_len] == pattern):\n            count = count + 1\n            i = i + pattern_len\n    if (count > 0):\n        # print \"count =\",count\n        return (count,i)\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_length = len(pattern)\n    \n    if pattern_length > len(text):\n        return None\n    \n    if pattern == \"\":\n        return None\n    \n    if pattern_length == 1:\n        return [i for i in range(len(text)) if text.startswith(pattern, i)]\n    else:\n        first_match = []\n        for i in range(len(text) - pattern_length):\n            if text[i:i+pattern_length] == pattern:\n                first_match.append(i)\n        return first_match\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match=re.search(pattern,text)\n    if match:\n        return match.span()\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    count = 0\n    n = len(pattern)\n    m = len(text)\n    a = []\n    if m < n:\n        return None\n    if m == n:\n        if text == pattern:\n            return 1\n        return 0\n    i = 0\n    while i < m-n+1:\n        if pattern == text[i:i+n]:\n            a.append(i)\n            count += 1\n        i += 1\n    if count == 0:\n        return None\n    return a\ndef occurance_substring2(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    count = 0\n    n = len(pattern)\n    m = len(text)\n    a = []\n    if m < n:\n        return None\n    if m == n:\n        if text == pattern:\n            return 1\n        return 0\n    i = 0\n    while i < m-n+1:\n        if text[i:i+n] == pattern:\n            a.append(i)\n            count += 1\n        i += 1\n    if count == 0:\n        return None\n    return a\ndef pattern_matching(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    count = 0\n    n = len(pattern)\n    m = len(text)\n    a = []\n    if m < n:\n        return None\n    if m == n:\n        if text == pattern:\n            return 1\n        return 0\n    i = 0\n    while i < m-n+1:\n        if text[i:i+n] == pattern:\n            a.append(i)\n            count += 1\n        i += 1\n    if count == 0:\n        return None\n    return a\ndef pattern_matching2(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    count = 0\n    n = len(pattern)\n    m = len(text)\n    a = []\n    if m < n:\n        return None\n    if m == n:\n        if text == pattern:\n            return 1\n        return 0\n    i = 0\n    while i < m-n+1:\n        if text[i:i+n] == pattern:\n            a.append(i)\n            count += 1\n        i += 1\n    if count == 0:\n        return None\n    return a\ndef pattern_matching3(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    count = 0\n    n = len(pattern)\n    m = len(text)\n    a = []\n    if m < n:\n        return None\n    if m == n:\n        if text == pattern:\n            return 1\n        return 0\n    i = 0\n    while i < m-n+1:\n        if text[i:i+n] == pattern:\n            a.append(i)\n            count += 1\n        i += 1\n    if count == 0:\n        return None\n    return a\ndef pattern_matching4(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    count = 0\n    n = len(pattern)\n    m = len(text)\n    a = []\n    if m < n:\n        return None\n    if m == n:\n        if text == pattern:\n            return 1\n        return 0\n    i = 0\n    while i < m-n+1:\n        if text[i:i+n] == pattern:\n            a.append(i)\n            count += 1\n        i += 1\n    if count == 0:\n        return None\n    return a\ndef pattern_matching5(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    count = 0\n    n = len(pattern)\n    m = len(text)\n    a = []\n    if m < n:\n        return None\n    if m == n:\n        if text == pattern:\n            return 1\n        return 0\n    i = 0\n    while i < m-n+1:\n        if text[i:i+n] == pattern:\n            a.append(i)\n            count += 1\n        i += 1\n    if count == 0:\n        return None\n    return a\ndef pattern_matching6(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    count = 0\n    n = len(pattern)\n    m = len(text)\n    a = []\n    if m < n:\n        return None\n    if m == n:\n        if text == pattern:\n            return 1\n        return 0\n    i = 0\n    while i < m-n+1:\n        if text[i:i+n] == pattern:\n            a.append(i)\n            count += 1\n        i += 1\n    if count == 0:\n        return None\n    return a\ndef pattern_matching7(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    count = 0\n    n = len(pattern)\n    m = len(text)\n    a = []\n    if m < n:\n        return None\n    if m == n:\n        if text == pattern:\n            return 1\n        return 0\n    i = 0\n    while i < m-n+1:\n        if text[i:i+n] == pattern:\n            a.append(i)\n            count += 1\n        i += 1\n    if count == 0:\n        return None\n    return a\ndef pattern_matching8(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    count = 0\n    n = len(pattern)\n    m = len(text)\n    a = []\n    if m < n:\n        return None\n    if m == n:\n        if text == pattern:\n            return 1\n        return 0\n    i = 0\n    while i < m-n+1:\n        if text[i:i+n] == pattern:\n            a.append(i)\n            count += 1\n        i += 1\n    if count == 0:\n        return None\n    return a\ndef pattern_matching9(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    count = 0\n    n = len(pattern)\n    m = len(text)\n    a = []\n    if m < n:\n        return None\n    if m == n:\n        if text == pattern:\n            return 1\n        return 0\n    i = 0\n    while i < m-n+1:\n        if text[i:i+n] == pattern:\n            a.append(i)\n            count += 1\n        i += 1\n    if count == 0:\n        return None\n    return a\ndef pattern_matching10(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    count = 0\n    n = len(pattern)\n    m = len(text)\n    a = []\n    if m < n:\n        return None\n    if m == n:\n        if text == pattern:\n            return 1\n        return 0\n    i = 0\n    while i < m-n+1:\n        if text[i:i+n] == pattern:\n            a.append(i)\n            count += 1\n        i += 1\n    if count == 0:\n        return None\n    return a\ndef pattern_matching11(text,pattern):\n    '''\n    Writ"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    return re.findall(pattern,text)\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurrence_positions=[]\n    occurrence_positions_dic={}\n    for m in re.finditer(pattern,text):\n        #occurrence_positions.append(m.start())\n        occurrence_positions_dic[m.start()]=m.end()\n    if occurrence_positions_dic:\n        return occurrence_positions_dic\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance=re.finditer(pattern,text)\n    res=[text[0:match.start()] for match in occurance]\n    return res\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    m=re.search(pattern,text)\n    if m:\n        return m.group(),m.start(),m.end()\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance = [m.start() for m in re.finditer(pattern,text)]\n    return occurance\n    \ndef sub_string(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurances = [m.start() for m in re.finditer(pattern,text)]\n    return occurances\n    \ndef find_all(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurances = [m.start() for m in re.finditer(pattern,text)]\n    return occurances\n    \ndef substring_indices(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurances = [m.start() for m in re.finditer(pattern,text)]\n    return occurances\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    for i in range(len(text)):\n        for j in range(i,len(text)):\n            if pattern == text[i:j]:\n                return (i,j)\n    return None\ndef substring(text,pattern):\n    return text[occurance_substring(text,pattern)]\ndef camelCase(s):\n    # Write your code here\n    if s == \"\":\n        return \"\"\n    else:\n        return substring(s,substring(s,camelCase(s[1:]))) + s[0].upper() + camelCase(s[1:])\ndef camelCase2(s):\n    # Write your code here\n    if s == \"\":\n        return \"\"\n    else:\n        return substring(s,substring(s,camelCase(s[1:]))) + s[0].upper() + camelCase(s[1:])\ndef string_compression(s):\n    if s == \"\":\n        return \"\"\n    else:\n        return substring(s,substring(s,string_compression(s[1:]))) + s[0] + str(len(s))\ndef string_compression2(s):\n    if s == \"\":\n        return \"\"\n    else:\n        return substring(s,substring(s,string_compression(s[1:]))) + s[0] + str(len(s))\ndef palindrome(s):\n    return s == s[::-1]\ndef check_palidrome(s):\n    return palindrome(s)\ndef palindrome2(s):\n    if s == \"\":\n        return True\n    elif s[0]!= s[-1]:\n        return False\n    else:\n        return palindrome2(s[1:-1])\ndef palindrome3(s):\n    return s == s[::-1]\ndef check_palidrome3(s):\n    return palindrome3(s)\ndef reverse_string(s):\n    return s[::-1]\ndef is_palindrome(s):\n    return s == reverse_string(s)\ndef is_palindrome2(s):\n    if s == \"\":\n        return True\n    elif s[0]!= s[-1]:\n        return False\n    else:\n        return is_palindrome2(s[1:-1])\ndef is_palindrome3(s):\n    if s == \"\":\n        return True\n    else:\n        return s[0] == s[-1] and is_palindrome3(s[1:-1])\ndef is_palindrome4(s):\n    return s == s[::-1]\ndef is_palindrome5(s):\n    return s == s[::-1]\ndef reverse_string2(s):\n    if s == \"\":\n        return \"\"\n    else:\n        return reverse_string2(s[1:]) + s[0]\ndef get_longest_palindrome(s):\n    if s == \"\":\n        return \"\"\n    elif palindrome(s):\n        return s\n    else:\n        return substring(s,substring(s,get_longest_palindrome(s[1:]))) + s[0] + substring(s[1:],substring(s[1:],get_longest_palindrome(s[1:])))\ndef get_longest_palindrome2(s):\n    if s == \"\":\n        return \"\"\n    elif palindrome(s):\n        return s\n    else:\n        return substring(s,substring(s,get_longest_palindrome2(s[1:]))) + s[0] + substring(s[1:],substring(s[1:],get_longest_palindrome2(s[1:])))\ndef is_palindrome5(s):\n    return s == s[::-1]\ndef is_palindrome6(s):\n    return s == s[::-1]\ndef get_longest_palindrome6(s):\n    if s == \"\":\n        return \"\"\n    elif palindrome(s):\n        return s\n    else:\n        return substring(s,substring(s,get_longest_palindrome6(s[1:]))) + s[0] + substring(s[1:],substring(s[1:],get_longest_palindrome6(s[1:])))\ndef is_palindrome7(s):\n    return s == s[::-1]\ndef is_palindrome8(s):\n    return s == s[::-1]\ndef get_longest_palindrome8(s):\n    if s == \"\":\n        return \"\"\n    elif palindrome(s):\n        return s\n    else:\n        return substring(s,substring(s,get_longest_palindrome8(s[1:]))) + s[0] + substring(s[1:],substring(s[1:],get_longest_palindrome8(s[1:])))\ndef is_palindrome9(s):\n    return s == s[::-1]\ndef is_palindrome10(s):\n    return s == s[::-1]\ndef get_longest_palindrome10(s):\n    if s == \"\":\n        return \"\"\n    elif palindrome(s):\n        return s\n    else:\n        return substring(s,substring(s,get_longest_palindrome10(s[1:]))) + s[0] + substring(s[1:],substring(s[1:],get_longest_palindrome10(s[1:])))\ndef is_palindrome11(s):\n    return s == s[::-1]\ndef is_palindrome12(s):\n    return s == s[::-1]\ndef get_longest_palindrome12(s):\n    if s == \"\":\n        return \"\"\n    elif palindrome(s):\n        return s\n    else:\n        return substring(s,substring(s,get_longest_palindrome12(s[1:]))) + s[0] + substring(s[1:],substring(s[1:],get_longest_palindrome12(s[1:])))\ndef is_palindrome13(s):\n    return s == s[::-1]\ndef is_palindrome14(s):\n    return s == s[::-1]\ndef get_longest_palindrome14(s):\n    if s == \"\":\n        return \"\"\n    elif palindrome(s):\n        return s\n    else:\n        return substring(s,substring(s,get_longest_palindrome14(s[1:]))) + s[0] + substring(s[1:],substring(s[1:],get_longest_palindrome14(s[1:])))\ndef is_palindrome15(s):\n    return s == s[::-1]\ndef is_palindrome16(s):\n    return s == s[::-1]\ndef get_longest_palindrome16(s):\n    if s == \"\":\n        return \"\"\n    elif palindrome(s):\n        return s\n    else:\n        return substring(s,substring(s,get_longest_palindrome16(s[1:]))) + s[0] + substring(s[1:],substring(s[1:],get_longest_palindrome16(s[1:])))\ndef is_palindrome17(s):\n    return s == s[::-1]\ndef is_palindrome18(s):\n    return s == s[::-1]\ndef get_longest_palindrome18(s):\n    if s == \"\":\n        return \"\"\n    elif palindrome(s):\n        return s\n    else:\n        return substring(s,substring(s,get_longest_palindrome18(s[1:]))) + s[0] + substring(s[1:],substring(s[1:],get_longest_palindrome18(s[1:])))\ndef is_palindrome19(s):\n    return s == s[::-1]"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(nums[i]%2==1 for i in range(1,len(nums),2))\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return nums[0]%2!=0 and nums[1]%2!=0 and nums[2]%2!=0 and nums[3]%2!=0 and nums[4]%2!=0\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in xrange(0,len(nums)):\n        if i%2 and nums[i]%2:\n            return True\n    return False\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if nums[i]%2!=0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for index,i in enumerate(nums):\n        if index % 2 == 1:\n            if i % 2!= 1:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if not nums[i] % 2:\n            return False\n    return True\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    result = 0\n    for i in range(1, len(test_str)-1):\n        if test_str[i-1].lower() in VOWELS and test_str[i+1].lower() in VOWELS:\n            result += 1\n    return result\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set('aeiou')\n    test_str = test_str.lower()\n    count = 0\n    for i in xrange(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 0\n    for i in range(len(test_str)):\n        if test_str[i] in \"aeiouAEIOU\":\n            if i > 0 and test_str[i-1] in \"aeiouAEIOU\":\n                vowels += 1\n            if i < len(test_str) - 1 and test_str[i+1] in \"aeiouAEIOU\":\n                vowels += 1\n    return vowels\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    if len(test_str) == 0:\n        return 0\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if i + 1 < len(test_str) and test_str[i + 1] in vowels:\n                vowel_count += 1\n            elif i + 2 < len(test_str) and test_str[i + 2] in vowels:\n                vowel_count += 1\n            elif i + 3 < len(test_str) and test_str[i + 3] in vowels:\n                vowel_count += 1\n    return vowel_count\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    dict_vowels = {}\n    dict_consonants = {}\n    for i in range(len(test_str) - 1):\n        if test_str[i] in ['a','e','i','o','u','A','E','I','O','U']:\n            dict_vowels[i] = 1\n        else:\n            dict_consonants[i] = 1\n    return dict_vowels, dict_consonants\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    #vowels = \"aeiou\"\n    vowels = \"AEIOU\"\n    counter = 0\n    #print(len(test_str))\n    #print(len(vowels))\n    #for i in range(0, len(test_str)):\n    #    #print(i)\n    #    if vowels[i] in test_str[i+1:len(test_str)]:\n    #        counter += 1\n    #        #print(i)\n    #print(counter)\n    return sum(map(lambda x: 1 if vowels[i] in x else 0, test_str))\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels_counter = 0\n    for i,j in enumerate(test_str[:-1]):\n        if j in VOWELS and test_str[i+1] in VOWELS:\n            vowels_counter += 1\n    return vowels_counter\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    return sum(test_str[i-1] in \"aeiou\" and test_str[i+1] in \"aeiou\" for i in range(1, len(test_str) - 1))\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = ''\n    for c in test_str:\n        if c in vowels:\n            new_str += c\n    return new_str\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            sum += i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = sum(set(arr))\n    return s\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # return sum([i for i in set(arr) if arr.count(i)==1])\n    return sum([i for i in set(arr) if arr.count(i)==1])\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if i not in arr[1:]:\n            sum += i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(arr) - arr[0]*len(arr)\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Approach 1 - Two loops: O(n2)\n    # sum = 0\n    # for i in arr:\n    #     for j in arr:\n    #         if i!= j:\n    #             sum += i\n    # return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for x in arr:\n        if arr.count(x) == 1:\n            sum += x\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr = sorted(arr)\n    for i in range(len(arr)-2):\n        if arr[i]!=arr[i+1]:\n            return arr[i]+arr[i+1]\n    return arr[-1]+arr[-2]\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum=0\n    for i in arr:\n        if i not in arr:\n            sum+=i\n    return sum\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(v) for k, v in groupby(list1)]\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(list1):\n        result.append((k, len(list(g))))\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    temp_list = []\n    output_list = []\n    for i,j in groupby(list1):\n        temp_list.append(list(j))\n    for i in range(len(temp_list)):\n        output_list.append(temp_list[i][0])\n    return output_list\ndef unpack_consecutive_duplicates(list1):\n    '''\n    Write a function to unpack consecutive duplicates of a given list elements into sublists.\n    '''\n    temp_list = []\n    output_list = []\n    for i,j in groupby(list1):\n        temp_list.append(list(j))\n    for i in range(len(temp_list)):\n        output_list.append(temp_list[i])\n    return output_list\ndef pack_consecutive_duplicates_reverse(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    temp_list = []\n    output_list = []\n    for i,j in groupby(list1):\n        temp_list.append(list(j))\n    for i in range(len(temp_list)):\n        output_list.append(temp_list[i][::-1])\n    return output_list\ndef unpack_consecutive_duplicates_reverse(list1):\n    '''\n    Write a function to unpack consecutive duplicates of a given list elements into sublists.\n    '''\n    temp_list = []\n    output_list = []\n    for i,j in groupby(list1):\n        temp_list.append(list(j))\n    for i in range(len(temp_list)):\n        output_list.append(temp_list[i][::-1])\n    return output_list\ndef unpack_consecutive_duplicates_reverse_2(list1):\n    '''\n    Write a function to unpack consecutive duplicates of a given list elements into sublists.\n    '''\n    temp_list = []\n    output_list = []\n    for i,j in groupby(list1):\n        temp_list.append(list(j))\n    for i in range(len(temp_list)):\n        output_list.append(temp_list[i][::-1])\n    return output_list\ndef reverse_string(str1):\n    '''\n    Write a function to reverse a string using iteration.\n    '''\n    output_str = \"\"\n    for i in range(1,len(str1)+1):\n        output_str = output_str + str1[-i]\n    return output_str\ndef reverse_string_2(str1):\n    '''\n    Write a function to reverse a string using recursion.\n    '''\n    if len(str1) == 1:\n        return str1\n    else:\n        return str1[-1] + reverse_string_2(str1[:-1])\ndef reverse_string_3(str1):\n    '''\n    Write a function to reverse a string using iteration.\n    '''\n    str1 = list(str1)\n    for i in range(len(str1)//2):\n        temp = str1[i]\n        str1[i] = str1[len(str1) - 1 - i]\n        str1[len(str1) - 1 - i] = temp\n    return \"\".join(str1)\ndef reverse_string_4(str1):\n    '''\n    Write a function to reverse a string using iteration.\n    '''\n    str1 = list(str1)\n    for i in range(len(str1)//2):\n        temp = str1[i]\n        str1[i] = str1[len(str1) - 1 - i]\n        str1[len(str1) - 1 - i] = temp\n    return \"\".join(str1)\ndef reverse_string_5(str1):\n    '''\n    Write a function to reverse a string using iteration.\n    '''\n    return str1[::-1]\ndef reverse_string_6(str1):\n    '''\n    Write a function to reverse a string using iteration.\n    '''\n    str1 = list(str1)\n    for i in range(len(str1)//2):\n        temp = str1[i]\n        str1[i] = str1[len(str1) - 1 - i]\n        str1[len(str1) - 1 - i] = temp\n    return \"\".join(str1)\ndef reverse_string_7(str1):\n    '''\n    Write a function to reverse a string using recursion.\n    '''\n    if len(str1) == 1:\n        return str1\n    else:\n        return str1[-1] + reverse_string_7(str1[:-1])\ndef reverse_string_8(str1):\n    '''\n    Write a function to reverse a string using recursion.\n    '''\n    if len(str1) == 1:\n        return str1\n    else:\n        return str1[-1] + reverse_string_8(str1[:-1])\ndef reverse_string_9(str1):\n    '''\n    Write a function to reverse a string using recursion.\n    '''\n    if len(str1) == 1:\n        return str1\n    else:\n        return reverse_string_9(str1[1:]) + str1[0]\ndef reverse_string_10(str1):\n    '''\n    Write a function to reverse a string using recursion.\n    '''\n    if len(str1) == 1:\n        return str1\n    else:\n        return reverse_string_10(str1[1:]) + str1[0]\ndef reverse_string_11(str1):\n    '''\n    Write a function to reverse a string using recursion.\n    '''\n    if len(str1) == 1:\n        return str1\n    else:\n        return str1[-1] + reverse_string_11(str1[:-1])\ndef reverse_string_12(str1):\n    '''\n    Write a function to reverse a string using recursion.\n    '''\n    if len(str1) == 1:\n        return str1\n    else:\n        return reverse_string_12(str1[1:]) + str1[0]\ndef reverse_string_13(str1):\n    '''\n    Write a function to reverse a string using recursion.\n    '''\n    if len(str1) == 1:\n        return str1\n    else:\n        return reverse_string_13(str1[1:]) + str1[0]\ndef reverse_string_14(str1):\n    '''\n    Write a function to reverse a string using recursion.\n    '''\n    if len(str1) == 1:\n        return str1\n    else:\n        return str1[-1] + reverse_string_14(str1[:-1])\ndef reverse_string_15(str1):\n    '''\n    Write a function to reverse a string using recursion.\n    '''\n    if len(str1) == 1:\n        return str1\n    else:\n        return reverse_string_15(str1[1:]) + str1[0]\ndef reverse_string_16(str1):\n    '''\n    Write a function to reverse a string using recursion.\n    '''\n    if len(str1) == 1:\n        return str1\n    else:\n        return reverse_string_16(str1[1:]) + str1[0]\ndef reverse_string_17(str1):\n    '''\n    Write a function to reverse a string using recursion.\n    '''\n    if len(str1) == 1:\n        return str1\n    else:\n        return reverse_string_17(str1[1:]) + str1[0]\ndef reverse_string_18(str1):\n    '''\n    Write a function to reverse a string using recursion.\n    '''\n    if len(str1) == 1:\n        return str1\n    else:\n        return reverse_string_18(str1[1:]) + str1[0]\ndef reverse_string_19(str1):\n    '''\n    Write a function to reverse a string using recursion.\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    a =[]\n    b = []\n    for k,g in groupby(list1):\n        a.append(k)\n        b.append(list(g))\n    return a,b\n    #print pack_consecutive_duplicates([1,1,1,2,3,4,4,4,4,4,4,5])\n    #a = [[1,1,1,2],[3,4,4,4,4,4,5]]\n    #b = [[1,1,1,2,3,4,4,4,4,4,4,5]]\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = []\n    l1 = [list1[0]]\n    for j in range(1,len(list1)):\n        if list1[j] == list1[j-1]:\n            l1.append(list1[j])\n        else:\n            list2.append(l1)\n            l1 = [list1[j]]\n    list2.append(l1)\n    return list2\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = list(list1)\n    list3 = []\n    for k,g in groupby(list2):\n        list3.append(list(g))\n    list3.reverse()\n    return list3\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    keyfunc = lambda x: x[1]\n    groups = [(k, g) for k, g in groupby(list1, keyfunc)]\n    #print groups\n    return [list(map(lambda x: x[0], g)) for k, g in groups]\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # itertools.groupby\n    # grouper = lambda x: x[0]\n    # for key, group in groupby(enumerate(list1), grouper):\n    #     print key, list(map(itemgetter(1), group))\n    # print [key for key, group in groupby(enumerate(list1), grouper)]\n    # for key, group in groupby(enumerate(list1), grouper):\n    #     print key, list(map(itemgetter(1), group))\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(list1):\n        result.append(list(g))\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    '''\n    The algorithm is:\n    Create an empty list called result.\n    Iterate over the given list.\n    If the current element of the list is not same as the previous element,\n    append the current element to the result list.\n    Else, add the current element to the result list and restart the process with the next element.\n    '''\n    result = []\n    for k, g in groupby(list1):\n        if k!= None:\n            result.append([k]*len(list(g)))\n    return result\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    tally = {}\n    for i in list1:\n        if tuple(i) not in tally:\n            tally[tuple(i)] = 1\n        else:\n            tally[tuple(i)] += 1\n    return tally\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    output = []\n    count = 0\n    for i in list1:\n        if type(i) is not list:\n            continue\n        else:\n            for x in i:\n                if x not in output:\n                    output.append(x)\n    dict1 = {i:output.count(i) for i in output}\n    return dict1\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    def list_to_tuple(l):\n        return tuple(l)\n    t = map(list_to_tuple,list1)\n    d = dict()\n    for i in t:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    new_list = []\n    for item in list1:\n        if not item in new_list:\n            new_list.append(item)\n    return new_list\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict_of_lists = {}\n    for i in list1:\n        if tuple(i) not in dict_of_lists:\n            dict_of_lists[tuple(i)] = 1\n        else:\n            dict_of_lists[tuple(i)] += 1\n    return dict_of_lists\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict = {}\n    for lst in list1:\n        if tuple(lst) in dict.keys():\n            dict[tuple(lst)] = dict[tuple(lst)] + 1\n        else:\n            dict[tuple(lst)] = 1\n    return dict\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_tuples = []\n    for item in list1:\n        if not tuple(item) in unique_tuples:\n            unique_tuples.append(tuple(item))\n    unique_tuples = tuple(unique_tuples)\n    unique_lists = [list(x) for x in unique_tuples]\n    return dict(zip(unique_lists, [list1.count(item) for item in unique_lists]))\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return {x:list1.count(x) for x in set(list1)}\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    hash_table = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in hash_table:\n            hash_table[tuple_sublist] += 1\n        else:\n            hash_table[tuple_sublist] = 1\n    return hash_table\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    set_list = set()\n    for i in range(0,len(test_list)):\n        for j in range(i+1,len(test_list)):\n            sum = test_list[i] + test_list[j]\n            set_list.add(sum)\n    return list(set_list)\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    final_list = []\n    if len(test_list) == 0:\n        return []\n    for i in range(1, len(test_list)):\n        for j in combinations(test_list, i):\n            #print(j)\n            #print(sum(j))\n            final_list.append(sum(j))\n    #print(final_list)\n    return final_list\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if test_list is None:\n        return None\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #test_list = [('2', '3'), ('3', '2'), ('4', '3'), ('3', '4'), ('4', '1')]\n    #print(test_list)\n    comb = []\n    for i in range(1, len(test_list)):\n        for j in combinations(test_list, i):\n            if sum(j) == 5:\n                comb.append(j)\n    print(comb)\n    print(len(comb))\n    return comb\n    \ndef find_combinations_with_duplicates(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #test_list = [('2', '3'), ('3', '2'), ('4', '3'), ('3', '4'), ('4', '1')]\n    #print(test_list)\n    comb = []\n    for i in range(1, len(test_list)):\n        for j in combinations(test_list, i):\n            if sum(j) == 5:\n                if j not in comb:\n                    comb.append(j)\n    print(comb)\n    print(len(comb))\n    return comb\n    \n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in xrange(1, len(test_list)):\n        result += list(combinations(test_list, i))\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_set = set()\n    for sum in test_list:\n        for i in range(1, len(sum)):\n            test_set.add(sum[i])\n    return test_set\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    sums = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            sums.append((test_list[i], test_list[j]))\n    print(sums)\n    return sums\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        combs = combinations(test_list, i)\n        for comb in combs:\n            result.append(sum(comb))\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #print test_list\n    #combination = combinations(test_list,2)\n    result = []\n    for i in xrange(1,len(test_list)+1):\n        for c in combinations(test_list,i):\n            result.append(c)\n    print result\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    s = sum(test_list)\n    if s%2==0:\n        for a in range(len(test_list)):\n            combi = []\n            for b in range(a+1, len(test_list)):\n                combi.append((test_list[a], test_list[b]))\n            combinations_list.append(combi)\n    else:\n        for a in range(len(test_list)):\n            combi = []\n            for b in range(a+1, len(test_list)):\n                combi.append((test_list[a], test_list[b]))\n            combinations_list.append(combi)\n    return combinations_list\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisor_count = 0\n    for i in range(1, n) : \n        if n % i == 0 : \n            divisor_count += 1\n    if divisor_count % 2 == 0 : \n        return True\n    else : \n        return False\ndef count_primes(n) : \n    '''\n    Write a python function to check whether the count of prime numbers is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    prime_count = 0\n    for i in range(2, n) : \n        if n % i == 0 : \n            prime_count += 1\n    if prime_count % 2 == 0 : \n        return True\n    else : \n        return False\ndef is_prime(n) : \n    '''\n    Write a python function to check whether the input number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    if n % 2 == 0 : \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2) : \n        if n % i == 0 : \n            return False\n    return True\ndef get_primes(n) : \n    '''\n    Write a python function to return all the prime numbers between 0 and n. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    prime_list = []\n    for i in range(2, n + 1) : \n        if is_prime(i) : \n            prime_list.append(i)\n    return prime_list\ndef get_divisors(n) : \n    '''\n    Write a python function to return all the divisors of an input number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    divisor_list = []\n    for i in range(1, n + 1) : \n        if n % i == 0 : \n            divisor_list.append(i)\n    return divisor_list\ndef get_perfect_squares(n) : \n    '''\n    Write a python function to return all the perfect square numbers between 0 and n. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    perfect_square_list = []\n    for i in range(1, n + 1) : \n        perfect_square = i * i\n        if perfect_square <= n : \n            perfect_square_list.append(perfect_square)\n        else : \n            break\n    return perfect_square_list\ndef get_perfect_squares_below_n(n) : \n    '''\n    Write a python function to return all the perfect square numbers between 0 and n. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    perfect_square_list = []\n    for i in range(1, n) : \n        perfect_square = i * i\n        if perfect_square <= n : \n            perfect_square_list.append(perfect_square)\n        else : \n            break\n    return perfect_square_list\ndef get_perfect_squares_below_n_optimal(n) : \n    '''\n    Write a python function to return all the perfect square numbers between 0 and n. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    perfect_square_list = []\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        perfect_square = i * i\n        if perfect_square <= n : \n            perfect_square_list.append(perfect_square)\n        else : \n            break\n    return perfect_square_list\ndef get_perfect_squares_below_n_optimal_2(n) : \n    '''\n    Write a python function to return all the perfect square numbers between 0 and n. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    perfect_square_list = []\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        perfect_square = i * i\n        if perfect_square <= n : \n            perfect_square_list.append(perfect_square)\n        else : \n            break\n    return perfect_square_list\ndef get_perfect_squares_between_a_and_b(a, b) : \n    '''\n    Write a python function to return all the perfect square numbers between a and b. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    perfect_square_list = []\n    for i in range(a, b) : \n        perfect_square = i * i\n        if perfect_square <= b : \n            perfect_square_list.append(perfect_square)\n        else : \n            break\n    return perfect_square_list\ndef get_perfect_squares_between_a_and_b_optimal(a, b) : \n    '''\n    Write a python function to return all the perfect square numbers between a and b. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    perfect_square_list = []\n    for i in range(a, int(math.sqrt(b)) + 1) : \n        perfect_square = i * i\n        if perfect_square <= b : \n            perfect_square_list.append(perfect_square)\n        else : \n            break\n    return perfect_square_list\ndef get_perfect_squares_between_a_and_b_optimal_2(a, b) : \n    '''\n    Write a python function to return all the perfect square numbers between a and b. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    perfect_square_list = []\n    for i in range(a, int(math.sqrt(b)) + 1) : \n        perfect_square = i * i\n        if perfect_square <= b : \n            perfect_square_list.append(perfect_square)\n        else : \n            break\n    return perfect_square_list\ndef get_perfect_squares_between_a_and_b_optimal_3(a, b) : \n    '''\n    Write a python function to return all the perfect square numbers between a and b. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    perfect_square_list = []\n    for i in range(a, int(math.sqrt(b)) + 1) : \n        perfect_square = i * i\n        if perfect_square <= b : \n            perfect_square_list.append(perfect_square)\n        else : \n            break\n    return perfect_square_list\ndef get_perfect_squares_between_a_and_b_optimal_4(a, b) : \n    '''\n    Write a python function to return all the perfect square numbers between a and b. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    perfect_square_list = []\n    for i in range(a, int(math.sqrt(b)) + 1) : \n        perfect_square = i * i\n        if perfect_square <= b : \n            perfect_square_list.append(perfect_square)\n        else : \n            break\n    return perfect_square_list\ndef get_perfect_squares_between_"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisor = 1\n    count = 0\n    while divisor <= math.sqrt(n) :\n        if n % divisor == 0 :\n            count = count + 1\n        divisor = divisor + 1\n    if count % 2 == 0 :\n        return True\n    else :\n        return False\ndef find_prime_number(n) :\n    '''\n    Write a python function to check whether the number is a prime number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\n    '''\n    divisor = 2\n    count = 0\n    while divisor <= n :\n        if n % divisor == 0 :\n            count = count + 1\n        divisor = divisor + 1\n    if count == 0 :\n        return True\n    else :\n        return False\ndef factorial(n) :\n    '''\n    Write a python function to calculate the factorial. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    product = 1\n    while n > 1 :\n        product = product * n\n        n = n - 1\n    return product\ndef is_palindrome(n) :\n    '''\n    Write a python function to check whether the number is a palindrome. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    temp = n\n    reverse = 0\n    while n > 0 :\n        rem = n % 10\n        reverse = reverse * 10 + rem\n        n = n // 10\n    if temp == reverse :\n        return True\n    else :\n        return False\ndef sum_of_digit(n) :\n    '''\n    Write a python function to check whether the sum of digit is equal to a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    total = 0\n    while n > 0 :\n        rem = n % 10\n        total = total + rem\n        n = n // 10\n    return total\ndef is_perfect_number(n) :\n    '''\n    Write a python function to check whether the number is a perfect number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    sum = 0\n    while n > 0 :\n        rem = n % 10\n        sum = sum + rem\n        n = n // 10\n    if sum == n :\n        return True\n    else :\n        return False\ndef is_anagram(str1, str2) :\n    '''\n    Write a python function to check whether the string is an anagram. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    str1 = str1.lower()\n    str2 = str2.lower()\n    list1 = []\n    list2 = []\n    for char in str1 :\n        list1.append(char)\n    for char in str2 :\n        list2.append(char)\n    list1.sort()\n    list2.sort()\n    if list1 == list2 :\n        return True\n    else :\n        return False\ndef max_of_digit(n) :\n    '''\n    Write a python function to find the maximum of digit. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    max = 0\n    while n > 0 :\n        rem = n % 10\n        if rem > max :\n            max = rem\n        n = n // 10\n    return max\ndef is_armstrong(n) :\n    '''\n    Write a python function to check whether the number is an armstrong number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    sum = 0\n    temp = n\n    while temp > 0 :\n        rem = temp % 10\n        sum = sum + rem ** 3\n        temp = temp // 10\n    if sum == n :\n        return True\n    else :\n        return False\ndef is_perfect_square(n) :\n    '''\n    Write a python function to check whether the number is a perfect square. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    temp = n\n    square = 0\n    while temp > 0 :\n        rem = temp % 10\n        square = square * 10 + rem\n        temp = temp // 10\n    if square == n :\n        return True\n    else :\n        return False\ndef fibonacci_number(n) :\n    '''\n    Write a python function to calculate the fibonacci number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    if n == 0 or n == 1 :\n        return n\n    else :\n        return fibonacci_number(n - 1) + fibonacci_number(n - 2)\ndef sum_of_digit_in_factorial(n) :\n    '''\n    Write a python function to calculate the sum of digit of factorial. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    sum = 0\n    while n > 0 :\n        rem = n % 10\n        sum = sum + rem\n        n = n // 10\n    return sum\ndef is_perfect_square(n) :\n    '''\n    Write a python function to check whether the number is a perfect square. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    temp = n\n    square = 0\n    while temp > 0 :\n        rem = temp % 10\n        square = square * 10 + rem\n        temp = temp // 10\n    if square == n :\n        return True\n    else :\n        return False\ndef is_leap_year(n) :\n    '''\n    Write a python function to check whether the number is a leap year. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-35.php\n    '''\n    if n % 4 == 0 :\n        if n % 100 == 0 :\n            if n % 400 == 0 :\n                return True\n            else :\n                return False\n        else :\n            return True\n    else :\n        return False\ndef is_power_of_two(n) :\n    '''\n    Write a python function to check whether the number is a power of two. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-36.php\n    '''\n    if n == 0 :\n        return False\n    while n > 0 :\n        rem = n % 2\n        if rem == 0 :\n            return False\n        n = n // 2\n    return True\ndef count_pairs(num) :\n    '''\n    Write a python function to count pairs of number in a list. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-37.php\n    '''\n    count = 0\n    for i in range(0, len(num) - 1) :\n        for j in range(i + 1, len(num)) :\n            if num[i] == num[j] :\n                count = count + 1\n    return count\ndef sum_of_digit_in_list(num) :\n    '''\n    Write a python function to calculate the sum of digit of a list. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-38.php\n    '''\n    sum = 0\n    for i in num :\n        sum = sum + i\n    return sum\ndef get_first_digit(n) :\n    '''\n    Write "
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n <= 0 : \n        return 0\n    count = 0\n    if (n % 2 == 0) : \n        count += 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                count += 1\n            else : \n                count += 2\n    return count \n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n) :\n        if n%i == 0 :\n            count = count + 1\n    return count\n    \ndef num_factors(n) : \n    '''\n    Write a python function to check whether the count of factors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n) :\n        if n%i == 0 :\n            count = count + 1\n    return count\n    \ndef sum_divisors(n) : \n    '''\n    Write a python function to calculate sum of divisors. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    sum = 0\n    for i in range(1,n) :\n        if n%i == 0 :\n            sum = sum + i\n    return sum\n    \ndef product_divisors(n) : \n    '''\n    Write a python function to calculate product of divisors. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    product = 1\n    for i in range(1,n) :\n        if n%i == 0 :\n            product = product*i\n    return product\n    \ndef is_perfect_square(n) : \n    '''\n    Write a python function to check whether number is a perfect square. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    sqrt = math.sqrt(n)\n    if sqrt.is_integer() :\n        return True\n    else :\n        return False\n    \ndef num_digits(n) : \n    '''\n    Write a python function to calculate number of digits of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return math.floor(math.log10(n))+1\n    \ndef is_prime(n) : \n    '''\n    Write a python function to check whether the number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    for i in range(2,n) :\n        if n%i == 0 :\n            return False\n    return True\n    \ndef gcd(a,b) : \n    '''\n    Write a python function to calculate greatest common divisor. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if a == 0 :\n        return b\n    return gcd(b%a,a)\n    \ndef get_lcm(a,b) : \n    '''\n    Write a python function to calculate least common multiple. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return (a*b)/gcd(a,b)\n    \ndef get_lcm_and_gcd(a,b) : \n    '''\n    Write a python function to calculate lcm and gcd. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    lcm = get_lcm(a,b)\n    gcd = gcd(a,b)\n    return [lcm,gcd]\n    \ndef convert_decimal_to_binary(n) : \n    '''\n    Write a python function to convert decimal to binary. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return bin(n).replace(\"0b\",\"\")\n    \ndef convert_binary_to_decimal(n) : \n    '''\n    Write a python function to convert binary to decimal. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return int(n,2)\n    \ndef is_pandigital(n,k) : \n    '''\n    Write a python function to check whether number is pandigital or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    for i in range(1,k) :\n        if n%10!= i :\n            return False\n    return True\n    \ndef is_digit_count_pandigital(n) : \n    '''\n    Write a python function to check whether number of digits is pandigital or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    while n :\n        n = n//10\n        count = count + 1\n    return is_pandigital(count,9)\n    \ndef is_armstrong(n) : \n    '''\n    Write a python function to check whether number is armstrong or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    sum = 0\n    temp = n\n    while temp :\n        sum = sum + pow(temp%10,3)\n        temp = temp//10\n    return n == sum\n    \ndef is_palindrome(n) : \n    '''\n    Write a python function to check whether number is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return str(n) == str(n)[::-1]\n    \ndef is_perfect_number(n) : \n    '''\n    Write a python function to check whether number is perfect number or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    sum = 0\n    temp = n\n    while temp :\n        sum = sum + pow(temp%10,2)\n        temp = temp//10\n    return sum == pow(n,2)\n    \ndef is_fibonacci(n) : \n    '''\n    Write a python function to check whether number is fibonacci or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return is_perfect_number(5*n*n + 4) or is_perfect_number(5*n*n - 4)\n    \ndef is_lucas(n) : \n    '''\n    Write a python function to check whether number is lucas or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return is_fibonacci(n) and is_perfect_number(1 + (2*n)**2)\n    \ndef is_triangle_number(n) : \n    '''\n    Write a python function to check whether number is triangle number or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return n > (pow(n,2)/2)\n    \ndef is_square(n) : \n    '''\n    Write a python function to check whether number is square or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return n == pow(n,2)\n    \ndef is_square_root_of_n(n) : \n    '''\n    Write a python function to check whether number is square root o"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, (n // 2) + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors) % 2 == 0 \n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n<0 : \n        n = -n\n    c = 1\n    i = 2\n    while i <= n : \n        if n%i == 0 : \n            c += 1\n        i += 1\n    if c%2==0 : \n        return True\n    else : \n        return False\ndef prime_factorization(n) : \n    '''\n    Write a python function to check whether the given number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    if n<2 : \n        return False\n    for i in range(2,int(math.sqrt(n))+1) : \n        if n%i == 0 : \n            return False\n    return True\ndef is_palindrome(n) : \n    '''\n    Write a python function to check whether the given number is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    t = n\n    r = 0\n    while t : \n        r = r*10 + t%10\n        t = t/10\n    if r==n : \n        return True\n    return False\ndef is_anagram(s1,s2) : \n    '''\n    Write a python function to check whether the two strings are anagram or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    if len(s1)!= len(s2) : \n        return False\n    d = {}\n    for c in s1 : \n        if c not in d : \n            d[c] = 1\n        else : \n            d[c] += 1\n    for c in s2 : \n        if c not in d or d[c]==0 : \n            return False\n        else : \n            d[c] -= 1\n    return True\ndef is_anagram_2(s1,s2) : \n    '''\n    Write a python function to check whether the two strings are anagram or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    if len(s1)!= len(s2) : \n        return False\n    d = {}\n    for c in s1 : \n        if c not in d : \n            d[c] = 1\n        else : \n            d[c] += 1\n    for c in s2 : \n        if c not in d or d[c]==0 : \n            return False\n        else : \n            d[c] -= 1\n    return True\ndef rotate_matrix(matrix) : \n    '''\n    Write a python function to rotate a 2D matrix. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    n = len(matrix)\n    i = 0\n    while i<int(math.floor(n/2)) : \n        temp = matrix[i][i]\n        matrix[i][i] = matrix[n-1-i][i]\n        matrix[n-1-i][i] = matrix[n-1-i][n-1-i]\n        matrix[n-1-i][n-1-i] = matrix[i][n-1-i]\n        matrix[i][n-1-i] = temp\n        i += 1\n    return matrix\ndef rotate_matrix_2(matrix) : \n    '''\n    Write a python function to rotate a 2D matrix. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    n = len(matrix)\n    for i in range(int(math.floor(n/2))):\n        for j in range(i,n-i-1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[n-1-j][i]\n            matrix[n-1-j][i] = matrix[n-1-i][n-1-j]\n            matrix[n-1-i][n-1-j] = matrix[j][n-1-i]\n            matrix[j][n-1-i] = temp\n    return matrix\ndef rotate_matrix_3(matrix) : \n    '''\n    Write a python function to rotate a 2D matrix. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    n = len(matrix)\n    for i in range(int(math.floor(n/2))):\n        for j in range(i,n-i-1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[n-1-j][i]\n            matrix[n-1-j][i] = matrix[n-1-i][n-1-j]\n            matrix[n-1-i][n-1-j] = matrix[j][n-1-i]\n            matrix[j][n-1-i] = temp\n    return matrix\ndef rotate_matrix_4(matrix) : \n    '''\n    Write a python function to rotate a 2D matrix. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    n = len(matrix)\n    for i in range(int(math.floor(n/2))):\n        for j in range(i,n-i-1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[n-1-j][i]\n            matrix[n-1-j][i] = matrix[n-1-i][n-1-j]\n            matrix[n-1-i][n-1-j] = matrix[j][n-1-i]\n            matrix[j][n-1-i] = temp\n    return matrix\ndef rotate_matrix_5(matrix) : \n    '''\n    Write a python function to rotate a 2D matrix. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    n = len(matrix)\n    for i in range(int(math.floor(n/2))):\n        for j in range(i,n-i-1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[n-1-j][i]\n            matrix[n-1-j][i] = matrix[n-1-i][n-1-j]\n            matrix[n-1-i][n-1-j] = matrix[j][n-1-i]\n            matrix[j][n-1-i] = temp\n    return matrix\ndef rotate_matrix_6(matrix) : \n    '''\n    Write a python function to rotate a 2D matrix. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    n = len(matrix)\n    for i in range(int(math.floor(n/2))):\n        for j in range(i,n-i-1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[n-1-j][i]\n            matrix[n-1-j][i] = matrix[n-1-i][n-1-j]\n            matrix[n-1-i][n-1-j] = matrix[j][n-1-i]\n            matrix[j][n-1-i] = temp\n    return matrix\ndef rotate_matrix_7(matrix) : \n    '''\n    Write a python function to rotate a 2D matrix. https://www."
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1,n):\n        if n%i == 0:\n            divisors+=1\n    if divisors%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    divisor = 2\n    while n>1 :\n        if n % divisor == 0 :\n            count += 1\n        divisor += 1\n    return count\ndef prime_num(n) :\n    '''\n    Write a python function to check whether the number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    is_prime = True\n    if n == 2 :\n        return True\n    elif n == 1 :\n        return False\n    else :\n        divisor = 2\n        while divisor < n :\n            if n % divisor == 0 :\n                is_prime = False\n            divisor += 1\n        return is_prime\ndef prime_num_test() :\n    print count_divisors(15)\n    print count_divisors(20)\n    print prime_num(15)\n    print prime_num(20)\ndef power(a,b) :\n    '''\n    Write a python function to calculate a power. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    ans = 1\n    if b == 0 :\n        return 1\n    while b > 0 :\n        if b % 2 == 1 :\n            ans *= a\n        a = a * a\n        b = int(b/2)\n    return ans\ndef power_test() :\n    print power(3,4)\ndef factorial(n) :\n    '''\n    Write a python function to calculate the factorial of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-35.php\n    '''\n    ans = 1\n    if n == 0 :\n        return 1\n    while n > 0 :\n        ans *= n\n        n -= 1\n    return ans\ndef factorial_test() :\n    print factorial(4)\n    print factorial(5)\n    print factorial(0)\ndef reverse_string(s) :\n    '''\n    Write a python function to reverse a string. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-39.php\n    '''\n    ans = \"\"\n    for i in range(len(s)-1,-1,-1) :\n        ans += s[i]\n    return ans\ndef reverse_string_test() :\n    print reverse_string(\"Hello\")\n    print reverse_string(\"abcdefgh\")\ndef pig_latin(s) :\n    '''\n    Write a python function to convert a string into pig latin. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-45.php\n    '''\n    ans = \"\"\n    if len(s) == 0 :\n        return \"\"\n    if len(s) == 1 :\n        if s[0] in \"aeiou\" :\n            return s + \"ay\"\n        else :\n            return s[1:] + s[0] + \"ay\"\n    elif s[0] in \"aeiou\" :\n        ans += s[1:]\n        ans += s[0] + \"ay\"\n    else :\n        ans += s[1:]\n        ans += s[0] + \"ay\"\n    return ans\ndef pig_latin_test() :\n    print pig_latin(\"hello\")\n    print pig_latin(\"abcdefg\")\ndef str_comp(s1,s2) :\n    '''\n    Write a python function to compare two strings. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-49.php\n    '''\n    ans = 0\n    for i in range(min(len(s1),len(s2))) :\n        if s1[i]!= s2[i] :\n            ans += 1\n    return ans\ndef str_comp_test() :\n    print str_comp(\"helllo\",\"hello\")\n    print str_comp(\"hello\",\"hello\")\n    print str_comp(\"hello\",\"heol\")\ndef is_palin(s) :\n    '''\n    Write a python function to check whether a string is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-52.php\n    '''\n    ans = True\n    for i in range(int(len(s)/2)) :\n        if s[i]!= s[len(s)-i-1] :\n            ans = False\n            break\n    return ans\ndef is_palin_test() :\n    print is_palin(\"hannah\")\n    print is_palin(\"hannah\")\n    print is_palin(\"hannah\")\ndef is_palindrome(s) :\n    '''\n    Write a python function to check whether a string is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-49.php\n    '''\n    ans = True\n    i = 0\n    j = len(s) - 1\n    while i < j :\n        if s[i]!= s[j] :\n            ans = False\n            break\n        i += 1\n        j -= 1\n    return ans\ndef is_palindrome_test() :\n    print is_palindrome(\"hannah\")\n    print is_palindrome(\"hannah\")\n    print is_palindrome(\"hannah\")\ndef has_digit(s,d) :\n    '''\n    Write a python function to check whether a string has a digit. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-53.php\n    '''\n    ans = False\n    for i in range(len(s)) :\n        if s[i] in \"0123456789\" :\n            ans = True\n            break\n    return ans\ndef has_digit_test() :\n    print has_digit(\"abc123\")\n    print has_digit(\"abc123\")\n    print has_digit(\"abc\")\ndef is_numeric(s) :\n    '''\n    Write a python function to check whether a string is numeric or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-54.php\n    '''\n    ans = False\n    for i in range(len(s)) :\n        if s[i] in \"0123456789\" :\n            ans = True\n            break\n    return ans\ndef is_numeric_test() :\n    print is_numeric(\"1234\")\n    print is_numeric(\"1234\")\n    print is_numeric(\"1234a\")\ndef is_alpha(s) :\n    '''\n    Write a python function to check whether a string is alphanumeric or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-55.php\n    '''\n    ans = True\n    for i in range(len(s)) :\n        if s[i] in \"0123456789\" or s[i] in \"abcdefghijklmnopqrstuvwxyz\" :\n            ans = True\n            break\n    return ans\ndef is_alpha_test() :\n    print is_alpha(\"abc\")\n    print is_alpha(\"abc\")\n    print is_alpha(\"abcd\")\ndef palindrome(s) :\n    '''\n    Write a python function to check whether a string is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-50.php\n    '''\n    ans = True\n    for i in range(int(len(s)/2)) :\n        if s[i]!= s[len(s)-i-1] :\n            ans = False\n            break\n    return ans\ndef palindrome_test() :\n    print palindrome(\"hannah\")\n    print palindrome(\"hannah\")\n    print palindrome(\"hannah\")\ndef is_a"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0 :\n            divisors += 1\n    return divisors\ndef gcd(a,b):\n    '''\n    Write a python function to calculate the greatest common divisor. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    if b == 0:\n        return a\n    return gcd(b, a%b)\ndef is_prime(n):\n    '''\n    Write a python function to check whether a given number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    if n==1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef find_prime(n):\n    '''\n    Write a python function to find a prime number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    #print n\n    if n<2:\n        return False\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\ndef make_palindrome(n):\n    '''\n    Write a python function to check whether a given number is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    a=n\n    b=0\n    while(a!=0):\n        b=b*10+a%10\n        a=a/10\n    return b==n\ndef is_perfect(n):\n    '''\n    Write a python function to check whether a given number is perfect or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    divisors=0\n    for i in range(1,n):\n        if n%i==0:\n            divisors+=i\n    if divisors==n:\n        return True\n    else:\n        return False\ndef is_pythagoras(a,b,c):\n    '''\n    Write a python function to check whether a given triplet is pythagoras or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    return (a*a)+(b*b)==(c*c)\ndef get_factors(n):\n    '''\n    Write a python function to find the factors of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    factors=[]\n    i=1\n    while i<=n:\n        if n%i==0:\n            factors.append(i)\n        i+=1\n    return factors\ndef count_digits(n):\n    '''\n    Write a python function to count the number of digits of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    if n==0:\n        return 1\n    if n>0:\n        return 1+count_digits(n/10)\ndef sum_of_digits(n):\n    '''\n    Write a python function to calculate the sum of the digits of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    s=0\n    while n:\n        s+=n%10\n        n=n/10\n    return s\ndef is_leap(n):\n    '''\n    Write a python function to check whether a given year is leap or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    if n%4==0:\n        if n%100==0:\n            if n%400==0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef factors(n):\n    '''\n    Write a python function to find all the factors of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-35.php\n    '''\n    factors=[]\n    i=1\n    while i<=n:\n        if n%i==0:\n            factors.append(i)\n        i+=1\n    return factors\ndef sum_of_factors(n):\n    '''\n    Write a python function to calculate the sum of the factors of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-36.php\n    '''\n    factors=[]\n    i=1\n    while i<=n:\n        if n%i==0:\n            factors.append(i)\n        i+=1\n    s=0\n    for i in factors:\n        s+=i\n    return s\ndef is_perfect_square(n):\n    '''\n    Write a python function to check whether a given number is a perfect square or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-37.php\n    '''\n    if n<0:\n        return False\n    x=int(math.sqrt(n))\n    if x*x==n:\n        return True\n    else:\n        return False\ndef is_perfect_cube(n):\n    '''\n    Write a python function to check whether a given number is a perfect cube or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-38.php\n    '''\n    if n<0:\n        return False\n    x=int(math.pow(n,1/3))\n    if x*x*x==n:\n        return True\n    else:\n        return False\ndef is_armstrong(n):\n    '''\n    Write a python function to check whether a given number is an armstrong number or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-39.php\n    '''\n    t=n\n    s=0\n    while t:\n        s+=pow(t%10,3)\n        t=t/10\n    return s==n\ndef is_truncatable(n):\n    '''\n    Write a python function to check whether a given number is a truncable number or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-40.php\n    '''\n    a=str(n)\n    b=len(a)\n    c=0\n    for i in range(0,b):\n        c+=int(a[i])\n    if c==0:\n        return False\n    else:\n        b=b-1\n        while b>0:\n            c=0\n            for i in range(0,b):\n                c+=int(a[i])\n            if c==0:\n                return False\n            b=b-1\n        return True\ndef is_aphabetical(n):\n    '''\n    Write a python function to check whether a given number is aphabetic or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-41.php\n    '''\n    if n<0:\n        return False\n    s=str(n)\n    s=s.lower()\n    for i in s:\n        if ord(i)<97 or ord(i)>122:\n            return False\n    return True\ndef is_square(n)"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1 : \n        return True\n    if n == 2 : \n        return True\n    else : \n        count = 0\n        for i in range(1, math.floor(n/2)+1) : \n            if n % i == 0 : \n                count = count + 1\n        return count % 2 == 0\ndef pair_product(arr, n) : \n    '''\n    Write a python function to calculate the product of the pair elements. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    res = 0\n    for i in range(n) : \n        res = res + arr[i] * arr[i]\n    return res\ndef is_prime(n) : \n    '''\n    Write a python function to check whether a number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    if n == 1 : \n        return False\n    if n == 2 : \n        return True\n    if n % 2 == 0 : \n        return False\n    for i in range(3, math.floor(math.sqrt(n))+1, 2) : \n        if n % i == 0 : \n            return False\n    return True\ndef find_all_primes(n) : \n    '''\n    Write a python function to find all prime numbers in an array. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    arr = [i for i in range(2, n+1)]\n    res = []\n    for i in arr : \n        if is_prime(i) : \n            res.append(i)\n    return res\ndef find_all_factors(n) : \n    '''\n    Write a python function to find all factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    res = []\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            res.append(i)\n    return res\ndef find_all_perfect_squares(n) : \n    '''\n    Write a python function to find all perfect squares of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    res = []\n    i = 1\n    while i * i <= n : \n        if n % i == 0 : \n            res.append(i * i)\n        i = i + 1\n    return res\ndef find_all_perfect_squares_in_array(arr) : \n    '''\n    Write a python function to find all perfect squares of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    res = []\n    for i in arr : \n        res = res + find_all_perfect_squares(i)\n    return res\ndef find_all_perfect_squares_in_range(n1, n2) : \n    '''\n    Write a python function to find all perfect squares of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    res = []\n    for i in range(n1, n2+1) : \n        res = res + find_all_perfect_squares(i)\n    return res\ndef find_all_perfect_squares_in_range_v2(n1, n2) : \n    '''\n    Write a python function to find all perfect squares of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    res = []\n    for i in range(n1, n2+1) : \n        res = res + find_all_perfect_squares_in_array(arr)\n    return res\ndef find_all_perfect_squares_in_range_v3(n1, n2) : \n    '''\n    Write a python function to find all perfect squares of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    res = []\n    for i in range(n1, n2+1) : \n        res = res + find_all_perfect_squares_in_array(arr)\n    return res\ndef find_all_perfect_squares_in_range_v4(n1, n2) : \n    '''\n    Write a python function to find all perfect squares of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    res = []\n    for i in range(n1, n2+1) : \n        res = res + find_all_perfect_squares_in_array(arr)\n    return res\ndef find_all_perfect_squares_in_range_v5(n1, n2) : \n    '''\n    Write a python function to find all perfect squares of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    res = []\n    for i in range(n1, n2+1) : \n        res = res + find_all_perfect_squares_in_array(arr)\n    return res\ndef find_all_perfect_squares_in_range_v6(n1, n2) : \n    '''\n    Write a python function to find all perfect squares of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    res = []\n    for i in range(n1, n2+1) : \n        res = res + find_all_perfect_squares_in_array(arr)\n    return res\ndef find_all_perfect_squares_in_range_v7(n1, n2) : \n    '''\n    Write a python function to find all perfect squares of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    res = []\n    for i in range(n1, n2+1) : \n        res = res + find_all_perfect_squares_in_array(arr)\n    return res\ndef find_all_perfect_squares_in_range_v8(n1, n2) : \n    '''\n    Write a python function to find all perfect squares of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    res = []\n    for i in range(n1, n2+1) : \n        res = res + find_all_perfect_squares_in_array(arr)\n    return res\ndef find_all_perfect_squares_in_range_v9(n1, n2) : \n    '''\n    Write a python function to find all perfect squares of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    res = []\n    for i in range(n1, n2+1) : \n        res = res + find_all_perfect_squares_in_array(arr)\n    return res\ndef find_all_perfect_squares_in_range_v10(n1, n2) : \n    '''\n    Write a python function to find all perfect squares of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr)==0:\n        return 0\n    res = arr[0]\n    for i in range(1,len(arr)):\n        res += sum(arr[i:])\n    return res\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr)==0:\n        return 0\n    if len(arr)==1:\n        return arr[0]\n    return arr[0] + odd_length_sum(arr[1:])\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if len(arr[i]) % 2 == 1:\n            sum += sum(arr[i])\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = 0\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if not arr:\n        return 0\n    else:\n        res = []\n        for i in range(len(arr)):\n            temp = arr[i:i+2]\n            res.append(sum(temp))\n        return sum(res)\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr), 2):\n            total += sum(arr[i:j+1])\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    max_len = len(arr)\n    # 2 pointers to traverse the array.\n    left = 0\n    right = 1\n    # we increment/decrement the left pointer in every iteration. We always make a sum of \n    # the array[left:right] and increment/decrement the right pointer.\n    # left and right pointers are always pointing to odd indices and the subarray is of odd length.\n    # This is because:\n    #     - we increment the left pointer when we find an odd index.\n    #     - we decrement the right pointer when we find an even index.\n    total = 0\n    while right <= max_len:\n        total += sum(arr[left:right])\n        left += 1\n        right += 1\n    return total\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    #defining a class sum_of_odd_length_subarrays\n    class sum_of_odd_length_subarrays(object):\n        def __init__(self):\n            self.arr = arr\n            self.arr_len = len(arr)\n            self.sum_of_subarrays = 0\n    #define a method to find the sum of all odd length subarrays in the array\n    def find_sum_of_subarrays(self,start_index,end_index):\n        '''\n        we have to find the sum of all odd length subarrays. This sum can be found by adding the elements of the subarray at start_index\n        and subtracting the element of end_index\n        '''\n        if start_index == end_index:\n            return 0\n        if start_index < end_index:\n            #compute the sum of all subarrays between start_index and end_index\n            return self.arr[start_index] + self.find_sum_of_subarrays(start_index+1,end_index) + self.find_sum_of_subarrays(start_index,end_index-1)\n        else:\n            #if end_index is greater than start_index, then the sum of subarrays starts from the element after end_index\n            return self.find_sum_of_subarrays(end_index+1,start_index)\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    sum = 0\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        if (len(arr[start:end+1]) % 2!= 0):\n            sum = sum + arr[start:end+1][-1]\n        start = start + 1\n        end = end - 1\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    \n    res = 0\n    for i in range(0, len(arr)):\n        for j in range(0, len(arr)):\n            if j-i+1%2!= 0:\n                res = res + arr[j]\n    return res\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    diff = max_value - min_value\n    if max_value == min_value:\n        return 0.0, 0.0, max_value\n    if max_value == r:\n        h = (g - b) / diff\n    elif max_value == g:\n        h = (b - r) / diff + 2\n    elif max_value == b:\n        h = (r - g) / diff + 4\n    if h < 0:\n        h += 6\n    if h > 6:\n        h -= 6\n    if max_value == r:\n        s = 0 if diff == 0 else (diff / max_value)\n    elif max_value == g:\n        s = 0 if diff == 0 else (diff / max_value)\n    else:\n        s = 0 if diff == 0 else (diff / max_value)\n    v = max_value\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    max_c = max(r, g, b)\n    min_c = min(r, g, b)\n    diff_c = max_c - min_c\n    \n    if max_c == 0:\n        h = 0\n    elif max_c == r:\n        h = (60 * ((g - b) / diff_c) + 360) % 360\n    elif max_c == g:\n        h = (60 * ((b - r) / diff_c) + 120) % 360\n    elif max_c == b:\n        h = (60 * ((r - g) / diff_c) + 240) % 360\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    import math\n    R = r / 255\n    G = g / 255\n    B = b / 255\n    cmax = max(R, G, B)\n    cmin = min(R, G, B)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n    elif cmax == R:\n        h = 60 * ((G - B) / delta)\n    elif cmax == G:\n        h = 60 * ((B - R) / delta) + 120\n    elif cmax == B:\n        h = 60 * ((R - G) / delta) + 240\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = (g - b) / delta % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    elif cmax == b:\n        h = (r - g) / delta + 4\n    h *= 60\n    if cmax == 0:\n        s = 0\n    else:\n        s = delta / cmax\n    v = cmax\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return (h, s, v)\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_product = 1\n    odd_product = 1\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    prod_even = 1\n    prod_odd = 1\n    for num in list1:\n        if num % 2 == 0:\n            prod_even *= num\n        else:\n            prod_odd *= num\n    return prod_even, prod_odd\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    result = 1\n    for i in list1:\n        if i % 2 == 0:\n            result *= i\n        else:\n            result *= i\n    return result\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_product = 1\n    odd_product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n    return [even_product, odd_product]\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_product = 1\n    odd_product = 1\n    for i in list1:\n        if i%2 == 0:\n            even_product *= i\n        else:\n            odd_product *= i\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n    for i in list1:\n        if i%2 == 0:\n            even *= i\n        else:\n            odd *= i\n    print(f'Product of even and odd number is {even} and {odd}')\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n    for i in list1:\n        if i%2 == 0:\n            even *= i\n        else:\n            odd *= i\n    return even,odd\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for i in list1:\n        if i%2 == 0:\n            product *= i\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    \n    #Count the number of even and odd numbers\n    evens = 0\n    odds = 0\n    for item in list1:\n        if item % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    \n    #Initialize the result with None\n    product = None\n    \n    #If there are even numbers then multiply the product of even numbers by even product\n    #and vice versa\n    if evens > 0:\n        if odds == 0:\n            product = 1\n        else:\n            product = evens * product\n    \n    #If there are odd numbers then multiply the product of odd numbers by odd product\n    #and vice versa\n    if odds > 0:\n        if evens == 0:\n            product = 1\n        else:\n            product = odds * product\n    \n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    sum1 = 0\n    sum2 = 0\n    for i in list1:\n        if (i%2 == 0):\n            sum1 = sum1 + i\n        else:\n            sum2 = sum2 + i\n    print sum1, sum2\nmul_even_odd([2,3,4,5,6,7,8])"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str[1:-1]\n    test_str = test_str.replace(',','')\n    return tuple(map(int, test_str.split()))\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.split(','))\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    assert type(test_str) == tuple\n    return tuple(int(i) for i in test_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    pass\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.strip('()').split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # if type(test_str)!= str:\n    #     return -1\n    # test_str = test_str[1:-1]\n    # if not test_str:\n    #     return -1\n    # ret = tuple(map(int,test_str.split(',')))\n    # return ret\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_int = []\n    tuple_str = test_str[1:-1]\n    for i in tuple_str.split(','):\n        tuple_int.append(int(i))\n    return tuple(tuple_int)\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if '(' not in test_str:\n        return int(test_str)\n    test_str = test_str.replace(',', '').replace('(', '').replace(')', '')\n    return tuple(map(int, test_str.split(' ')))\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        return tuple(map(int,test_str.split(',')))\n    except:\n        return 0\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    i = n-1\n    # print(n, i)\n    # print(a)\n    while i >= 0 and a[i] > x:\n        i -= 1\n    # print(i, x)\n    a.insert(i+1, x)\n    # print(a)\n    return i+1\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # a[0:i] is sorted array, a[i:] is unsorted array\n    i = bisect.bisect_right(a, x)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if not a:\n        return 0\n    if a[0] > x:\n        return 0\n    if x > a[-1]:\n        return len(a)\n    l, r = 0, len(a) - 1\n    while l < r:\n        m = (l + r) // 2\n        if a[m] < x:\n            l = m + 1\n        else:\n            r = m\n    return l\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if x < a[0]:\n        return 0\n    elif x == a[0]:\n        return 1\n    else:\n        return bisect.bisect(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    j = len(a) - 1\n    while j >= 0 and a[j] > x:\n        j -= 1\n    return j + 1\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    result = bisect.bisect_right(a, x)\n    return result\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # return bisect.bisect_right(a, x)\n    # return bisect.bisect_right(a, x)\n    # return bisect.bisect_right(a, x)\n    left_idx = bisect.bisect_left(a, x)\n    right_idx = bisect.bisect_right(a, x)\n    if left_idx == len(a) or a[left_idx]!= x:\n        return left_idx\n    else:\n        return right_idx\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i:\n        return i - 1\n    else:\n        return i\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    left_idx = bisect.bisect_left(a, x)\n    right_idx = bisect.bisect_right(a, x)\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    def text_match_two(text):\n        if text.startswith('a') and text.endswith('b'):\n            return text\n    return text_match_two(text)\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'^a(.+?)b{3}$'\n    return re.match(pattern, text)\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'^a(.+?)b{4}$'\n    return re.match(pattern, text)\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'^a(.+?)b{5}$'\n    return re.match(pattern, text)\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'^a(.+?)b{6}$'\n    return re.match(pattern, text)\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'^a(.+?)b{7}$'\n    return re.match(pattern, text)\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'^a(.+?)b{8}$'\n    return re.match(pattern, text)\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'^a(.+?)b{9}$'\n    return re.match(pattern, text)\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'^a(.+?)b{10}$'\n    return re.match(pattern, text)\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'^a(.+?)b{11}$'\n    return re.match(pattern, text)\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'^a(.+?)b{12}$'\n    return re.match(pattern, text)\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'^a(.+?)b{13}$'\n    return re.match(pattern, text)\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'^a(.+?)b{14}$'\n    return re.match(pattern, text)\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'^a(.+?)b{15}$'\n    return re.match(pattern, text)\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'^a(.+?)b{16}$'\n    return re.match(pattern, text)\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'^a(.+?)b{17}$'\n    return re.match(pattern, text)\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'^a(.+?)b{18}$'\n    return re.match(pattern, text)\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'^a(.+?)b{19}$'\n    return re.match(pattern, text)\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'^a(.+?)b{20}$'\n    return re.match(pattern, text)\ndef text_match_twenty_one(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'^a(.+?)b{21}$'\n    return re.match(pattern, text)\ndef text_match_twenty_two(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'^a(.+?)b{22}$'\n    return re.match(pattern, text)\ndef text_match_twenty_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'^a(.+?)b{23}$'\n    return re.match(pattern, text)\ndef text_match_twenty_four(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'^a(.+?)b{24}$'\n    return re.match(pattern, text)\ndef text_match_twenty_five(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'^a(.+?)b{25}$'\n    return re.match(pattern, text)\ndef text_match_twenty_six(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'^a(.+?)b{26}$'\n    return re.match(pattern, text)\ndef text_match_twenty_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'^a(.+?)b{27}$'\n    return re.match(pattern, text)\ndef text_match_twenty_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'^a(.+?)b{28}$'\n    return re.match(pattern, text)\ndef text_match_twenty_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'^a(.+?)b{29}$'\n    return re.match(pattern, text)\ndef text_match_thirty(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'^a(.+?)b{30}$'\n    return re.match(pattern, text)\ndef text_match_thirty_one(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'^a(.+?)b{31}$'\n    return re.match(pattern, text)\ndef text_match_thirty_two(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'^a(.+?)b{32}$'\n    return re.match(pattern, text)\ndef text_match_thirty_three(text):\n    '''\n    Write "
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'No match!'\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(.*?)b\\3'\n    result = re.match(pattern, text)\n    return result\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    #define the pattern\n    pattern = r\"ab{3}$\"\n    \n    #Use the pattern to match the string\n    result = re.search(pattern, text)\n    \n    #return the result\n    return result\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('(ab){3}')\n    if pattern.match(text):\n        return 'found match'\n    return 'no match'\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an abc followed by three b's\n    '''\n    pattern = re.compile('(abc){3}(b)')\n    if pattern.match(text):\n        return 'found match'\n    return 'no match'\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('(a)(.*)(b)')\n    match = pattern.match(text)\n    if match:\n        return match.group()\n    return 'no match'\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('(a)(.*)(b)(.*)(b)')\n    match = pattern.match(text)\n    if match:\n        return match.group()\n    return 'no match'\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('(a)(.*)(b)(.*)(b)(.*)(a)')\n    match = pattern.match(text)\n    if match:\n        return match.group()\n    return 'no match'\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('(a)(.*)(b)(.*)(b)(.*)(b)(.*)(a)(.*)')\n    match = pattern.match(text)\n    if match:\n        return match.group()\n    return 'no match'\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('(a)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(a)(.*)')\n    match = pattern.match(text)\n    if match:\n        return match.group()\n    return 'no match'\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('(a)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(a)(.*)')\n    match = pattern.match(text)\n    if match:\n        return match.group()\n    return 'no match'\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('(a)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(a)(.*)')\n    match = pattern.match(text)\n    if match:\n        return match.group()\n    return 'no match'\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('(a)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(a)(.*)')\n    match = pattern.match(text)\n    if match:\n        return match.group()\n    return 'no match'\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('(a)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(a)(.*)')\n    match = pattern.match(text)\n    if match:\n        return match.group()\n    return 'no match'\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('(a)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(a)(.*)')\n    match = pattern.match(text)\n    if match:\n        return match.group()\n    return 'no match'\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('(a)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(a)(.*)')\n    match = pattern.match(text)\n    if match:\n        return match.group()\n    return 'no match'\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('(a)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(a)(.*)')\n    match = pattern.match(text)\n    if match:\n        return match.group()\n    return 'no match'\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('(a)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(a)(.*)')\n    match = pattern.match(text)\n    if match:\n        return match.group()\n    return 'no match'\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('(a)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(a)(.*)')\n    match = pattern.match(text)\n    if match:\n        return match.group()\n    return 'no match'\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('(a)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(a)(.*)')\n    match = pattern.match(text)\n    if match:\n        return match.group()\n    return 'no match'\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('(a)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)(.*)(b)"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    print \"Match the String\"\n    print \"Enter the String\"\n    search = re.search('a[ab]+b',text)\n    if search:\n        print \"Match found\"\n    else:\n        print \"Match not found\"\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    print \"Match the String\"\n    print \"Enter the String\"\n    search = re.search('a[b]+',text)\n    if search:\n        print \"Match found\"\n    else:\n        print \"Match not found\"\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    print \"Match the String\"\n    print \"Enter the String\"\n    search = re.search('a[b]+',text)\n    if search:\n        print \"Match found\"\n    else:\n        print \"Match not found\"\ndef text_match_zero(text):\n    '''\n    Write a function that matches a string that has an a followed by one or no 'b'.\n    '''\n    print \"Match the String\"\n    print \"Enter the String\"\n    search = re.search('a[b]+',text)\n    if search:\n        print \"Match found\"\n    else:\n        print \"Match not found\"\ndef text_match_zero_or_one(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or one 'b'.\n    '''\n    print \"Match the String\"\n    print \"Enter the String\"\n    search = re.search('a[b]+',text)\n    if search:\n        print \"Match found\"\n    else:\n        print \"Match not found\"\ndef text_match_zero_or_more(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    print \"Match the String\"\n    print \"Enter the String\"\n    search = re.search('a[b]+',text)\n    if search:\n        print \"Match found\"\n    else:\n        print \"Match not found\"\ndef text_match_zero_or_more_plus_one(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    print \"Match the String\"\n    print \"Enter the String\"\n    search = re.search('a[b]+',text)\n    if search:\n        print \"Match found\"\n    else:\n        print \"Match not found\"\ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    print \"Match the String\"\n    print \"Enter the String\"\n    search = re.search('a[b]+',text)\n    if search:\n        print \"Match found\"\n    else:\n        print \"Match not found\"\ndef text_match_one_or_more_plus_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    print \"Match the String\"\n    print \"Enter the String\"\n    search = re.search('a[b]+',text)\n    if search:\n        print \"Match found\"\n    else:\n        print \"Match not found\"\ndef text_match_one_or_more_plus_one_or_zero(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    print \"Match the String\"\n    print \"Enter the String\"\n    search = re.search('a[b]+',text)\n    if search:\n        print \"Match found\"\n    else:\n        print \"Match not found\"\ndef text_match_one_or_more_plus_one_or_zero_plus_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    print \"Match the String\"\n    print \"Enter the String\"\n    search = re.search('a[b]+',text)\n    if search:\n        print \"Match found\"\n    else:\n        print \"Match not found\"\ndef text_match_one_or_more_plus_one_or_zero_plus_one_or_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    print \"Match the String\"\n    print \"Enter the String\"\n    search = re.search('a[b]+',text)\n    if search:\n        print \"Match found\"\n    else:\n        print \"Match not found\"\ndef text_match_one_or_more_plus_one_or_zero_plus_one_or_one_plus_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    print \"Match the String\"\n    print \"Enter the String\"\n    search = re.search('a[b]+',text)\n    if search:\n        print \"Match found\"\n    else:\n        print \"Match not found\"\ndef text_match_one_or_more_plus_one_or_zero_plus_one_or_one_plus_one_or_zero(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    print \"Match the String\"\n    print \"Enter the String\"\n    search = re.search('a[b]+',text)\n    if search:\n        print \"Match found\"\n    else:\n        print \"Match not found\"\ndef text_match_one_or_more_plus_one_or_zero_plus_one_or_one_plus_one_or_zero_plus_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    print \"Match the String\"\n    print \"Enter the String\"\n    search = re.search('a[b]+',text)\n    if search:\n        print \"Match found\"\n    else:\n        print \"Match not found\"\ndef text_match_one_or_more_plus_one_or_zero_plus_one_or_one_plus_one_or_zero_plus_one_or_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    print \"Match the String\"\n    print \"Enter the String\"\n    search = re.search('a[b]+',text)\n    if search:\n        print \"Match found\"\n    else:\n        print \"Match not found\"\ndef text_match_one_or_more_plus_one_or_zero_plus_one_or_one_plus_one_or_zero_plus_one_or_one_plus_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    print \"Match the String\"\n    print \"Enter the String\"\n    search = re.search('a[b]+',text)\n    if search:\n        print \"Match found\"\n    else:\n        print \"Match not found\"\ndef text_match_zero_or_one_plus_one_or_one(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or one 'b'.\n    '''\n    print \"Match the String\"\n    print \"Enter the String\"\n    search = re.search('a[b]+',text)\n    if search:\n        print \"Match found\"\n    else:\n        print \"Match not found\"\ndef text_match_zero_or_one_plus_one_or_one_plus_one_or_one_plus_one(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or one 'b'.\n    '''\n    print \"Match the String\"\n    print \"Enter the String\"\n    search = re.search('a[b]+',text)\n    if search:\n        print \"Match found\""
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    print re.search('^a.*b{3}$', text)\n    return\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r\"ab{3}$\"\n    if re.match(pattern,text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = 'ab{3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    pass\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_list = test_list.replace(',', '')\n    test_list = test_list.split()\n    new_tuple = tuple(test_list)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = test_list[:]\n    new_tuple.append(test_str)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str, *test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    #Create a list of characters from string\n    char_list = list(test_str)\n    #print(char_list)\n    #Create a list of tuples from char_list\n    tup_list = list(zip(char_list, char_list))\n    #print(tup_list)\n    #Create a list of new tuples for the result\n    new_tup_list = []\n    #Iterate through the list and create new tuple list for new tuples\n    for x in tup_list:\n        if x[0] == x[1]:\n            #Remove the duplicates\n            continue\n        else:\n            #print(x)\n            new_tup_list.append(x)\n    #print(new_tup_list)\n    return tuple(new_tup_list)\n    \ndef sum_of_tuples(test_list, test_str):\n    '''\n    Write a function that takes a list and a string, both of which are tuples, \n    and returns a list of tuples with the strings from each tuple concatenated \n    and the sum of the string lengths from each tuple.\n    '''\n    #Get the length of the strings in each tuple\n    string_len = [len(x) for x in test_list]\n    #Create a list of tuples from the list of strings and string lengths\n    tup_list = list(zip(test_list, string_len))\n    #print(tup_list)\n    #Create a new list of tuples for the new strings and sum of string lengths\n    new_tup_list = []\n    #Iterate through the list of tuples and create new tuples with strings\n    for x in tup_list:\n        #print(x[0])\n        #print(x[1])\n        #Concatenate the strings\n        new_tup_list.append(x[0]+x[1])\n    #print(new_tup_list)\n    return new_tup_list\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    def new_tuple(test_list, test_str):\n    \n        if not test_list:\n            return test_str\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    str_list = list(test_str)\n    \n    for i in range(len(test_list)):\n        str_list[i] = test_list[i]\n        \n    new_tuple = tuple(str_list)\n    \n    return new_tuple\n    \n    \ndef new_list(test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    str_list = list(test_str)\n    \n    for i in range(len(str_list)):\n        str_list[i] = int(str_list[i])\n        \n    new_list = list(str_list)\n    \n    return new_list\n    \n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    s = list(test_str)\n    count = 0\n    for i in test_list:\n        if i == ',':\n            s[count] = ')'\n            count += 1\n            s.insert(count, '(')\n            count += 1\n        else:\n            count += 1\n    s.insert(count, ')')\n    return ''.join(s)\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    list_to_tuple = tuple(test_list)\n    tuple_test = list_to_tuple + (test_str,)\n    return tuple_test\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if len(nums) == 0:\n        return False\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(nums[i] % 2 == 0 for i in range(0, len(nums), 2))\n    \n    \nprint(even_position([1, 2, 3, 4, 5, 6])) # True\nprint(even_position([-1, -2, -3, -4, -5, -6])) # True\nprint(even_position([1, 2, 3, 4, 5, 6, 7, 8, 9])) # False\nprint(even_position([0, 0, 0, 0, 1, 1])) # False\nprint(even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # False"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if nums == []:\n        return False\n    else:\n        return (nums[0] % 2 == 0 and even_position(nums[1:])) or (nums[0] % 2!= 0 and even_position(nums[1:]))\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(i%2==0 for i in nums[:len(nums):2])\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    res = 0\n    for i in nums:\n        if i % 2 == 0:\n            res += i\n    return res\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if len(nums) < 2:\n        return False\n    else:\n        for i in range(0, len(nums) - 1, 2):\n            if nums[i] % 2 == 0:\n                return True\n        return False\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    evens_index = True\n    for i in range(1,len(nums),2):\n        if nums[i] % 2!= 0:\n            evens_index = False\n            break\n    return evens_index\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all([num % 2 == 0 for num in nums[::2]])\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if not len(nums):\n        return False\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if len(nums) < 2:\n        return True\n    for i in range(0,len(nums),2):\n        if i+1 >= len(nums) or not nums[i] % 2 and not nums[i+1] % 2:\n            return False\n    return True\n    \n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for i in test_tup:\n        if not isinstance(i,tuple):\n            result.append(i)\n    return tuple(result)\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    res = []\n    for tup in test_tup:\n        if type(tup) == tuple:\n            res.append(tup[0])\n        else:\n            res.append(tup)\n    return tuple(res)\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    removal_list = []\n    for tup in test_tup:\n        if isinstance(tup, tuple):\n            removal_list.append(tup)\n    for removal in removal_list:\n        test_tup.remove(removal)\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if type(test_tup) == tuple:\n        if len(test_tup) == 1:\n            return test_tup[0]\n        else:\n            return test_tup[0:1] + remove_nested(test_tup[1:])\n    else:\n        return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        for i in range(0,len(test_tup)):\n            test_tup = remove_nested(test_tup[i])\n        return test_tup\n    else:\n        return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    tup = ()\n    for a in test_tup:\n        if isinstance(a, tuple):\n            tup += (remove_nested(a),)\n        else:\n            tup += (a,)\n    return tup\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(el for el in test_tup if not isinstance(el, tuple))\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(sub for sub in test_tup if not isinstance(sub, tuple))\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for item in test_tup:\n        if isinstance(item, tuple):\n            remove_nested(item)\n        else:\n            pass\n    return tuple(test_tup)\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    def remove_nested_1(list_of_tup):\n        new_list = []\n        for i in list_of_tup:\n            if type(i) == tuple:\n                new_list.append(i)\n        return new_list\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    num_list = int(input(\"Enter the number of lists: \"))\n    i = 0\n    while i < num_list:\n        input_list.append([])\n        i = i + 1\n    return num_list\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n    "
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    n = 0\n    for i in input_list:\n        if type(i) == list:\n            n += 1\n    return n\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    while input_list:\n        count += 1\n        input_list = input_list[0]\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if isinstance(input_list, list): \n        print(input_list)\n        return 1 + count_list(input_list[1:])\n    else: \n        return 0\n    "
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    \n    output_list = []\n    for i in range(0, len(input_list)):\n        output_list.append(0)\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0\n    for i in range(0,len(input_list)):\n        if type(input_list[i]) == list:\n            counter = counter + 1\n    return counter\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if input_list == []:\n        return 0\n    return 1 + count_list(input_list[1:])\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    arr = sorted(arr)\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            return i\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    start = 0\n    end = len(arr)-1\n    while start<=end:\n        mid = (start+end)/2\n        if arr[mid] == x:\n            end = mid-1\n        elif arr[mid] > x:\n            end = mid-1\n        else:\n            start = mid+1\n    return start\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    result = arr.index(x)\n    return result\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    #arr = [1,4,6,9,11,15,16,18,19,21,23,26,29,30,32,35,36,38,40,42,43,46,48,50,51,53,55,56,58,59,60,61,65,66,69,70,72,73,75,76,78,79,80,82,83,85,86,88,90,91,92,94,97,98,99,100,101,102,103,104,105,106,107,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,0]\n    '''\n    arr = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 0]\n    '''\n    x = 17\n    #return arr.index(x)\n    #return arr.index(x)\n    #return arr.index(x)\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    #return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr[-1]==x:\n        return len(arr)-1\n    return arr.index(x)\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    length = len(arr)\n    high = length\n    low = 0\n    mid = 0\n    while high>low:\n        mid = (high+low)/2\n        if arr[mid]>arr[mid-1]:\n            high = mid\n        else:\n            low = mid+1\n    return low\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    \n    l = len(arr)\n    low = 0\n    high = l - 1\n    while low <= high:\n        mid = (low + high)//2\n        if arr[mid] == x and mid == l-1:\n            return mid\n        elif arr[mid] >= x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    else:\n        l = len(arr)\n        i = l-1\n        while i>=0:\n            if arr[i]>=x:\n                return i\n            i -= 1\n        return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low,high=0,len(arr)-1\n    while low<=high:\n        mid=(low+high)/2\n        if arr[mid]>x:\n            high=mid-1\n        elif arr[mid]<x:\n            low=mid+1\n        else:\n            if mid==len(arr)-1 or arr[mid+1]>x:\n                return mid\n            else:\n                low=mid+1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    if arr[0] == x:\n        return 0\n    if arr[-1] == x:\n        return len(arr)-1\n    i = 1\n    j = len(arr)-1\n    while i <= j:\n        mid = (i+j)/2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            i = mid+1\n        else:\n            j = mid-1\n    return -1\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search(r'^a.*b$', text)\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'(?<=a)[^b]*$')\n    return pattern.match(text)\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.+?b')\n    if pattern.search(text):\n        print('Text found')\n    else:\n        print('Text not found')\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = re.search(r\"a.*b$\", text)\n    print(x.group())\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = re.search(r'(a.*b)', text)\n    return x.group(1)\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'(\\Aa*[^b])b$')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search('^[ab]', text)\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'\\b[a][a-z]+[b]'\n    if re.search(pattern,text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n    \ndef text_startb_enda(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    pass\n    \ndef text_starta_endb_aba(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b', with anything before or after.\n    '''\n    pass\n    \ndef text_startb_enda_aba(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b', with anything before or after.\n    '''\n    pass\n    \ndef text_endswith(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n    \ndef text_endswith_ab(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n    \ndef text_endswith_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n    \ndef text_endswith_ab_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n    \ndef text_endswith_ab_ba(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n    \ndef text_endswith_ab_b_ab(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n    \ndef text_endswith_ab_b_ab_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n    \ndef text_endswith_ab_b_ab_ba(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n    \ndef text_endswith_ab_ba(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n    \ndef text_endswith_ab_ba_ab(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n    \ndef text_endswith_ab_ba_ab_ba(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n    \ndef text_endswith_ab_ba_ab_b_ab(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n    \ndef text_endswith_ab_ba_ab_b_ab_ba(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n    \ndef text_endswith_ab_b_ab_ba(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n    \ndef text_endswith_ab_b_ab_ba_ba(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n    \ndef text_endswith_ab_b_ab_ba_ba_b_ab(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n    \ndef text_endswith_ab_b_ab_ba_ba_b_ab_ba(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n    \ndef text_endswith_ab_ba(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n    \ndef text_endswith_ab_ba_ab(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n    \ndef text_endswith_ab_ba_ab_ab(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n    \ndef text_endswith_ab_ba_ab_ab_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n    \ndef text_endswith_ab_ba_ab_ab_ba(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n    \ndef text_endswith_ab_ba_ab_ab_b_ab(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n    \ndef text_endswith_ab_ba_ab_ab_b_ab_ba(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n    \ndef text_endswith_ab_ba_ab_ab_b_ab_ba_ba(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n    \ndef text_endswith_ab_ba_ab_ab_b_ab_ba_ba_b_ab(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n    \ndef text_endswith_ab_ba_ab_ab_b_ab_ba_ba_b_ab_ba(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n    \ndef text_endswith_ab_ba_ab_ab_b_ab_ba_ba_b_ab_b_ab(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n    \ndef text_endswith_ab_ba_ab_ab_b_ab_ba_ba_b_ab_b_ab(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n    \ndef text_endswith_ab_ba_ab_ab_b_ab_ba_ba_b_ab_b_ab(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n    \ndef text_endswith_ab_ba_ab_ab_b_ab_ba_ba_b_ab_b_ab_ba(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n    \ndef text_endswith_ab_ba_ab_ab_b_ab_ba_ba_b_ab_b_ab_ba(tex"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.*b$',re.IGNORECASE)\n    if re.match(pattern,text):\n        return True\n    return False\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_ = 0\n    for i in dict:\n        sum_ += dict[i]\n    return sum_\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict:\n        total += dict[item]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict:\n        total += dict[item]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for x in dict:\n        total += dict[x]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    \n    # Dict is mutable\n    # sum = 0\n    # for key, value in dict.items():\n    #     sum += value\n    # return sum\n    \n    # return sum(value for key, value in dict.items())\n    \n    # return sum(dict.values())\n    \n    # return sum(value for value in dict.values())\n    \n    # return sum(value for key, value in dict.items())\n    \n    # return sum(value for value in dict.values())\n    \n    return sum(value for key, value in dict.items())\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(n+1):\n        if i%2!=0:\n            s = s + i\n    return s\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(x for x in range(n) if x%2!= 0)\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            s += i\n    return s\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n%2==0:\n        return 0\n    else:\n        return n+sum_odd(n-1)\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if (n%2!= 0): \n        return n \n    else: \n        return n + sum_odd(n+1) \n    \ndef sum_even(n): \n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    if (n%2 == 0): \n        return n \n    else: \n        return n + sum_even(n+1) \n    \ndef sum_odd_even(n): \n    '''\n    Write a python function to find the sum of all odd and even natural numbers within the range l and r.\n    '''\n    if (n%2 == 0): \n        return n \n    else: \n        return n + sum_odd_even(n+1) \n    \ndef sum_odd_even_odd(n): \n    '''\n    Write a python function to find the sum of all odd, even, and odd natural numbers within the range l and r.\n    '''\n    if (n%2 == 0): \n        return n \n    else: \n        return n + sum_odd_even_odd(n+1) \n    \ndef sum_odd_even_odd_even(n): \n    '''\n    Write a python function to find the sum of all odd, even, odd, and even natural numbers within the range l and r.\n    '''\n    if (n%2 == 0): \n        return n \n    else: \n        return n + sum_odd_even_odd_even(n+1) \n    \ndef sum_odd_even_odd_even_odd(n): \n    '''\n    Write a python function to find the sum of all odd, even, odd, even, and odd natural numbers within the range l and r.\n    '''\n    if (n%2 == 0): \n        return n \n    else: \n        return n + sum_odd_even_odd_even_odd(n+1) \n    \ndef sum_odd_even_odd_even_odd_odd(n): \n    '''\n    Write a python function to find the sum of all odd, even, odd, even, odd, and odd natural numbers within the range l and r.\n    '''\n    if (n%2 == 0): \n        return n \n    else: \n        return n + sum_odd_even_odd_even_odd_odd(n+1) \n    \ndef sum_odd_even_odd_even_odd_odd_odd(n): \n    '''\n    Write a python function to find the sum of all odd, even, odd, even, odd, even, and odd natural numbers within the range l and r.\n    '''\n    if (n%2 == 0): \n        return n \n    else: \n        return n + sum_odd_even_odd_even_odd_odd_odd(n+1) \n    \ndef sum_odd_even_odd_even_odd_odd_odd_odd(n): \n    '''\n    Write a python function to find the sum of all odd, even, odd, even, odd, even, even, odd, and odd natural numbers within the range l and r.\n    '''\n    if (n%2 == 0): \n        return n \n    else: \n        return n + sum_odd_even_odd_even_odd_odd_odd_odd(n+1) \n    \ndef sum_odd_even_odd_even_odd_odd_odd_odd_odd(n): \n    '''\n    Write a python function to find the sum of all odd, even, odd, even, odd, even, even, odd, even, odd, and odd natural numbers within the range l and r.\n    '''\n    if (n%2 == 0): \n        return n \n    else: \n        return n + sum_odd_even_odd_even_odd_odd_odd_odd_odd(n+1) \n    \ndef sum_odd_even_odd_even_odd_odd_odd_odd_odd_odd(n): \n    '''\n    Write a python function to find the sum of all odd, even, odd, even, odd, even, even, odd, even, odd, even, and odd natural numbers within the range l and r.\n    '''\n    if (n%2 == 0): \n        return n \n    else: \n        return n + sum_odd_even_odd_even_odd_odd_odd_odd_odd_odd(n+1) \n    \ndef sum_odd_even_odd_even_odd_odd_odd_odd_odd_odd(n): \n    '''\n    Write a python function to find the sum of all odd, even, odd, even, odd, even, even, even, odd, and odd natural numbers within the range l and r.\n    '''\n    if (n%2 == 0): \n        return n \n    else: \n        return n + sum_odd_even_odd_even_odd_odd_odd_odd_odd_odd(n+1) \n    \ndef sum_odd_even_odd_even_odd_odd_odd_odd_odd_odd_odd(n): \n    '''\n    Write a python function to find the sum of all odd, even, odd, even, odd, even, even, even, odd, and odd natural numbers within the range l and r.\n    '''\n    if (n%2 == 0): \n        return n \n    else: \n        return n + sum_odd_even_odd_even_odd_odd_odd_odd_odd_odd_odd(n+1) \n    \ndef sum_odd_even_odd_even_odd_odd_odd_odd_odd_odd_odd(n): \n    '''\n    Write a python function to find the sum of all odd, even, odd, even, odd, even, even, even, odd, and odd natural numbers within the range l and r.\n    '''\n    if (n%2 == 0): \n        return n \n    else: \n        return n + sum_odd_even_odd_even_odd_odd_odd_odd_odd_odd_odd(n+1) \n    \ndef sum_odd_even_odd_even_odd_odd_odd_odd_odd_odd_odd_odd(n): \n    '''\n    Write a python function to find the sum of all odd, even, odd, even, odd, even, even, even, odd, and odd natural numbers within the range l and r.\n    '''\n    if (n%2 == 0): \n        return n \n    else: \n        return n + sum_odd_even_odd_even_odd_odd_odd_odd_odd_odd_odd_odd(n+1) \n    \ndef sum_odd_even_odd_even_odd_odd_odd_odd_odd_odd_odd_odd(n): \n    '''\n    Write a python function to find the sum of all odd, even, odd, even, odd, even, even, even, odd, and odd natural numbers within the range l and r.\n    '''\n    if (n%2 == 0): \n        return n \n    else: \n        return n + sum_odd_even_odd_even_odd_odd_odd_odd_odd_odd_odd_odd(n+1) \n    \ndef sum_odd_even_odd_even_odd_odd_odd_odd_odd_odd_odd_odd(n): \n    '''\n    Write a python function to find the sum of all odd, even, odd, even, odd, even, even, even, odd, and odd natural numbers within the range l and r.\n    '''\n    if (n%2 == 0): \n        return n \n    else: \n        return n + sum_odd_even_odd_even_odd_odd_odd_odd_odd_odd_odd_odd(n+1) \n    \ndef sum_odd_even_odd_even_odd_odd_odd_odd_odd_odd_odd_odd(n): \n    '''\n    Write a python function to find the sum of all odd, even, odd, even, odd, even, even, even, odd, and odd natural numbers within the range l and r.\n    '''\n    if (n%2 == 0): \n        return n \n    else: \n        return n + su"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    odd_sum = 0\n    for i in range(n+1):\n        if i % 2 == 1:\n            odd_sum = odd_sum + i\n    return odd_sum\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(n):\n        if i % 2!= 0:\n            total = total + i\n    return total\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n<=0:\n        return 0\n    if n==1:\n        return 1\n    else:\n        return n + sum_odd(n-1)\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return (n*(n+1))//2\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum([i for i in range(l,r+1) if i%2==1])\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for n in arr:\n        sum = sum + n\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr)==0:\n        return 0\n    else:\n        return arr[0]+_sum(arr[1:])\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s = 0\n    for i in arr:\n        s += i\n    return s\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    res = 0\n    for i in arr:\n        res += i\n    return res\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n == 0:\n        return n\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n<<d)|(n>>(32-d))) & 0xffffffff\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff\n    \ndef right_rotate(n,d):\n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n >> d) | (n << (32 - d))) & 0xffffffff\n    \ndef key_expansion(key, key_length):\n    '''\n    Given the key, the length of the key in bits, this function expands the key to a 256 bit key that can be used in a DES.\n    '''\n    keys = list()\n    r_constant = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1]\n    for i in range(key_length / 32):\n        keys.append(key[32*i:32*(i+1)])\n    \n    tmp = None\n    for i in range(8):\n        for j in range(r_constant[i]):\n            tmp = keys[-1]\n            keys.append(left_rotate(tmp, 1) ^ left_rotate(tmp, 2) ^ left_rotate(tmp, 3) ^ left_rotate(tmp, 4))\n    \n    return keys\n    \ndef add_padding(block):\n    '''\n    Write a function that adds padding to a block of data. We know that the last 8 bits of the last byte of the block is the padding value. We also know that the padding value is equal to the number of bits of the original block mod 64.\n    '''\n    return block + '\\x80' + '\\x00' * ((56 - (len(block) + 1) % 64) % 64) + '\\x00' * (64 - (len(block) + 1) % 64)\n    \ndef remove_padding(block):\n    '''\n    Remove padding on the data block.\n    '''\n    return block[: -ord(block[-1])]\n    \ndef left_shift(n, d):\n    '''\n    We have left shift a byte by a given number of bits.\n    '''\n    return (n << d) | (n >> (8 - d))\n    \ndef get_s_box(in_sbox):\n    '''\n    Returns a s box depending on the input.\n    '''\n    sbox = list()\n    for i in range(0, 256, 8):\n        sbox.append(in_sbox[i:i+8])\n    return sbox\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    result = 0\n    for i in range(d):\n        result = result << 1\n        result |= n & 1\n        n = n >> 1\n    return result\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    return (n << d) | (n >> (32 - d)) & mask\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    m = 1<<d\n    return (n<<d)|(n>>(32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n << d | n >> (32-d)\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n << d | n >> (32 - d)\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n<<d)|(n>>(32-d))\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    newText = re.sub(\" \", \"\", text)\n    return newText\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    res = ''\n    for c in text:\n        if c!='':\n            res += c\n    return res\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return''.join(text.split())\ndef get_max_number_of_occurences_of_a_character(s):\n    '''\n    Write a function to return the max number of occurence of a character in a string.\n    '''\n    max_occurence = 0\n    for i in s:\n        if s.count(i)>max_occurence:\n            max_occurence = s.count(i)\n    return max_occurence\ndef get_word_count(s):\n    '''\n    Write a function to return the number of words in a string.\n    '''\n    return len(s.split(' '))\ndef get_longest_word_in_string(s):\n    '''\n    Write a function to return the longest word in a string.\n    '''\n    words = s.split(' ')\n    lengths = [len(word) for word in words]\n    return words[lengths.index(max(lengths))]\ndef get_all_capital_words(s):\n    '''\n    Write a function to return all the capital words in a string.\n    '''\n    return re.findall('[A-Z][^A-Z]*', s)\ndef get_all_words_with_length_at_most(s, num):\n    '''\n    Write a function to return all words with length at most num in a string.\n    '''\n    return re.findall('[^\\s]{'+str(num)+'}', s)\ndef find_all_anagrams(s):\n    '''\n    Write a function to return all the anagrams of a string.\n    '''\n    length = len(s)\n    result = []\n    for i in range(0, length):\n        left = i+1\n        right = length - 1\n        while left < right:\n            if s[i] == s[left] and s[i] == s[right]:\n                result.append(s[i] + '|' + s[left] + '|' + s[right])\n                left += 1\n                right -= 1\n            elif s[i] == s[left]:\n                left += 1\n            elif s[i] == s[right]:\n                right -= 1\n            else:\n                left += 1\n                right -= 1\n    return result\ndef find_all_anagrams_with_dictionary(s):\n    '''\n    Write a function to return all the anagrams of a string with dictionary.\n    '''\n    result = []\n    length = len(s)\n    dictionary = {}\n    for i in range(0, length):\n        left = i+1\n        right = length - 1\n        while left < right:\n            if s[i] == s[left] and s[i] == s[right]:\n                result.append(s[i] + '|' + s[left] + '|' + s[right])\n                left += 1\n                right -= 1\n            elif s[i] == s[left]:\n                left += 1\n            elif s[i] == s[right]:\n                right -= 1\n            else:\n                left += 1\n                right -= 1\n    return result\ndef find_all_anagrams_with_counts(s):\n    '''\n    Write a function to return all the anagrams of a string with counts of letters.\n    '''\n    result = []\n    length = len(s)\n    dictionary = {}\n    for i in range(0, length):\n        left = i+1\n        right = length - 1\n        while left < right:\n            if s[i] == s[left] and s[i] == s[right]:\n                result.append(s[i] + '|' + s[left] + '|' + s[right])\n                left += 1\n                right -= 1\n            elif s[i] == s[left]:\n                left += 1\n            elif s[i] == s[right]:\n                right -= 1\n            else:\n                left += 1\n                right -= 1\n    return result\ndef find_longest_string_in_list(l):\n    '''\n    Write a function to return the longest string in a list of strings.\n    '''\n    lengths = [len(string) for string in l]\n    return l[lengths.index(max(lengths))]\ndef find_all_strings_in_list_with_length_less_than(l, num):\n    '''\n    Write a function to return all strings in a list of strings with length less than num.\n    '''\n    return [string for string in l if len(string) < num]\ndef find_all_strings_in_list_with_length_greater_than_or_equal_to(l, num):\n    '''\n    Write a function to return all strings in a list of strings with length greater than or equal to num.\n    '''\n    return [string for string in l if len(string) >= num]\ndef get_alphabetically_ordered_words(s):\n    '''\n    Write a function to return the alphabetically ordered words in a string.\n    '''\n    words = s.split(' ')\n    result = sorted(words)\n    return result\ndef get_all_palindromes(s):\n    '''\n    Write a function to return all the palindromes in a string.\n    '''\n    return re.findall('[a-zA-Z]{2}', s)\ndef get_all_palindrome_substrings(s):\n    '''\n    Write a function to return all the palindrome substrings in a string.\n    '''\n    result = []\n    length = len(s)\n    for i in range(0, length):\n        left = i+1\n        right = length - 1\n        while left < right:\n            if s[left] == s[right]:\n                result.append(s[left:right+1])\n                left += 1\n                right -= 1\n            elif s[left]!= s[right]:\n                break\n            else:\n                left += 1\n                right -= 1\n    return result\ndef get_all_upper_case_letters_in_a_string(s):\n    '''\n    Write a function to return all the upper case letters in a string.\n    '''\n    return re.findall('[A-Z]', s)\ndef get_all_lower_case_letters_in_a_string(s):\n    '''\n    Write a function to return all the lower case letters in a string.\n    '''\n    return re.findall('[a-z]', s)\ndef get_all_digits_in_a_string(s):\n    '''\n    Write a function to return all the digits in a string.\n    '''\n    return re.findall('[0-9]', s)\ndef get_all_uppercase_letters_and_digits_in_a_string(s):\n    '''\n    Write a function to return all the uppercase letters and digits in a string.\n    '''\n    return re.findall('[A-Z0-9]', s)\ndef get_first_and_last_letters_of_a_string(s):\n    '''\n    Write a function to return the first and last letters of a string.\n    '''\n    return s[0], s[-1]\ndef get_number_of_words_in_a_string(s):\n    '''\n    Write a function to return the number of words in a string.\n    '''\n    return len(s.split(' '))\ndef get_number_of_characters_in_a_string(s):\n    '''\n    Write a function to return the number of characters in a string.\n    '''\n    return len(s)\ndef get_longest_word_in_a_string(s):\n    '''\n    Write a function to return the longest word in a string.\n    '''\n    words = s.split(' ')\n    lengths = [len(word) for word in words]\n    return words[lengths.index(max(lengths))]\ndef get_occurrence_of_a_character(s, c):\n    '''\n    Write a function to return the number of occurrences of a character in a string.\n    '''\n    return s.count(c)\ndef get_numbe"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.strip()\n    return re.sub('\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)\ndef has_symbols(text):\n    '''\n    Write a function to check whether the input text has a special character.\n    '''\n    return re.search('[^a-zA-Z0-9]', text)\ndef count_vowels(text):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    return len(re.findall('[aeiouAEIOU]', text))\ndef count_consonants(text):\n    '''\n    Write a function to count the number of consonants in a string.\n    '''\n    return len(re.findall('[^aeiouAEIOU]', text))\ndef count_whitespaces(text):\n    '''\n    Write a function to count the number of whitespaces in a string.\n    '''\n    return len(re.findall('\\s+', text))\ndef count_lower_case_letters(text):\n    '''\n    Write a function to count the number of lowercase letters in a string.\n    '''\n    return len(re.findall('[a-z]', text))\ndef count_uppercase_letters(text):\n    '''\n    Write a function to count the number of uppercase letters in a string.\n    '''\n    return len(re.findall('[A-Z]', text))\ndef count_digit(text):\n    '''\n    Write a function to count the number of digits in a string.\n    '''\n    return len(re.findall('\\d+', text))\ndef count_symbols(text):\n    '''\n    Write a function to count the number of symbols in a string.\n    '''\n    return len(re.findall('[!#$%&\\()*+-/:;<=>?@[\\\\]^_`{|}~]', text))\ndef count_numbers(text):\n    '''\n    Write a function to count the number of numbers in a string.\n    '''\n    return len(re.findall('\\d+', text))\ndef count_lower_case_alphabets(text):\n    '''\n    Write a function to count the number of lowercase alphabets in a string.\n    '''\n    return len(re.findall('[a-z]', text))\ndef count_uppercase_alphabets(text):\n    '''\n    Write a function to count the number of uppercase alphabets in a string.\n    '''\n    return len(re.findall('[A-Z]', text))\ndef count_sentence_length(text):\n    '''\n    Write a function to count the number of words in a string.\n    '''\n    return len(re.findall('\\w+', text))\ndef count_words_in_sentence(text):\n    '''\n    Write a function to count the number of words in a sentence.\n    '''\n    return len(re.findall('\\w+', text))\ndef count_alphabets(text):\n    '''\n    Write a function to count the number of alphabets in a string.\n    '''\n    return len(re.findall('[a-zA-Z]', text))\ndef count_digits(text):\n    '''\n    Write a function to count the number of digits in a string.\n    '''\n    return len(re.findall('\\d+', text))\ndef count_sentences(text):\n    '''\n    Write a function to count the number of sentences in a string.\n    '''\n    return len(re.findall('\\n\\w+', text))\ndef count_lines(text):\n    '''\n    Write a function to count the number of lines in a string.\n    '''\n    return len(re.findall('\\n', text))\ndef count_characters(text):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    return len(text)\ndef count_other_characters(text):\n    '''\n    Write a function to count the number of other characters in a string.\n    '''\n    return len(re.findall('[^a-zA-Z0-9]', text))\ndef count_words(text):\n    '''\n    Write a function to count the number of words in a string.\n    '''\n    return len(re.findall('\\w+', text))\ndef count_tokens(text):\n    '''\n    Write a function to count the number of tokens in a string.\n    '''\n    return len(re.findall('\\s+', text))\ndef count_sentence_tokens(text):\n    '''\n    Write a function to count the number of sentence tokens in a string.\n    '''\n    return len(re.findall('[\\.\\?!]+', text))\ndef count_digits_in_words(text):\n    '''\n    Write a function to count the number of digits in words in a string.\n    '''\n    return len(re.findall('\\d+', text))\ndef count_sentence_digits(text):\n    '''\n    Write a function to count the number of digits in a sentence.\n    '''\n    return len(re.findall('\\d+', text))\ndef count_words_of_length(text, length):\n    '''\n    Write a function to count the number of words of a particular length in a string.\n    '''\n    return len(re.findall('\\w+', text))\ndef count_sentence_of_length(text, length):\n    '''\n    Write a function to count the number of sentences of a particular length in a string.\n    '''\n    return len(re.findall('\\n\\w+', text))\ndef count_words_of_length(text, length):\n    '''\n    Write a function to count the number of words of a particular length in a string.\n    '''\n    return len(re.findall('\\w+', text))\ndef count_sentence_of_length(text, length):\n    '''\n    Write a function to count the number of sentences of a particular length in a string.\n    '''\n    return len(re.findall('\\n\\w+', text))\ndef count_sentence_with_length(text, length):\n    '''\n    Write a function to count the number of sentences with a particular length in a string.\n    '''\n    return len(re.findall('\\n\\w+', text))\ndef count_words_with_length(text, length):\n    '''\n    Write a function to count the number of words with a particular length in a string.\n    '''\n    return len(re.findall('\\w+', text))\ndef count_sentence_with_length(text, length):\n    '''\n    Write a function to count the number of sentences with a particular length in a string.\n    '''\n    return len(re.findall('\\n\\w+', text))\ndef count_sentence_with_letters(text, letters):\n    '''\n    Write a function to count the number of sentences with a particular number of letters in a string.\n    '''\n    return len(re.findall('\\n\\w+', text))\ndef count_words_with_letters(text, letters):\n    '''\n    Write a function to count the number of words with a particular number of letters in a string.\n    '''\n    return len(re.findall('\\w+', text))\ndef count_sentence_with_letters(text, letters):\n    '''\n    Write a function to count the number of sentences with a particular number of letters in a string.\n    '''\n    return len(re.findall('\\n\\w+', text))\ndef count_words_with_letters(text, letters):\n    '''\n    Write a function to count the number of words with a particular number of letters in a string.\n    '''\n    return len(re.findall('\\w+', text))\ndef count_sentence_with_letters(text, letters):\n    '''\n    Write a function to count the number of sentences with a particular number of letters in a string.\n    '''\n    return len(re.findall('\\n\\w+', text))\ndef count_sentence"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile('\\s+')\n    newtext = pattern.sub(' ',text)\n    return newtext\ndef remove_all_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile('\\s+')\n    newtext = pattern.sub('',text)\n    return newtext\ndef remove_all_whitespaces_2(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile('\\s+')\n    newtext = pattern.sub(' ',text)\n    return newtext\ndef remove_all_whitespaces_3(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile('\\s+')\n    newtext = pattern.sub('',text)\n    return newtext\ndef remove_all_whitespaces_4(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile('\\s+')\n    newtext = pattern.sub(' ',text)\n    return newtext\ndef remove_all_whitespaces_5(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile('\\s+')\n    newtext = pattern.sub(' ',text)\n    return newtext\ndef remove_all_whitespaces_6(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile('\\s+')\n    newtext = pattern.sub('',text)\n    return newtext\ndef remove_all_whitespaces_7(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile('\\s+')\n    newtext = pattern.sub(' ',text)\n    return newtext\ndef remove_all_whitespaces_8(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile('\\s+')\n    newtext = pattern.sub(' ',text)\n    return newtext\ndef remove_all_whitespaces_9(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile('\\s+')\n    newtext = pattern.sub(' ',text)\n    return newtext\ndef remove_all_whitespaces_10(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile('\\s+')\n    newtext = pattern.sub(' ',text)\n    return newtext\ndef remove_all_whitespaces_11(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile('\\s+')\n    newtext = pattern.sub(' ',text)\n    return newtext\ndef remove_all_whitespaces_12(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile('\\s+')\n    newtext = pattern.sub(' ',text)\n    return newtext\ndef remove_all_whitespaces_13(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile('\\s+')\n    newtext = pattern.sub(' ',text)\n    return newtext\ndef remove_all_whitespaces_14(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile('\\s+')\n    newtext = pattern.sub(' ',text)\n    return newtext\ndef remove_all_whitespaces_15(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile('\\s+')\n    newtext = pattern.sub(' ',text)\n    return newtext\ndef remove_all_whitespaces_16(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile('\\s+')\n    newtext = pattern.sub(' ',text)\n    return newtext\ndef remove_all_whitespaces_17(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile('\\s+')\n    newtext = pattern.sub(' ',text)\n    return newtext\ndef remove_all_whitespaces_18(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile('\\s+')\n    newtext = pattern.sub(' ',text)\n    return newtext\ndef remove_all_whitespaces_19(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile('\\s+')\n    newtext = pattern.sub(' ',text)\n    return newtext\ndef remove_all_whitespaces_20(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile('\\s+')\n    newtext = pattern.sub(' ',text)\n    return newtext\ndef remove_all_whitespaces_21(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile('\\s+')\n    newtext = pattern.sub(' ',text)\n    return newtext\ndef remove_all_whitespaces_22(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile('\\s+')\n    newtext = pattern.sub(' ',text)\n    return newtext\ndef remove_all_whitespaces_23(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile('\\s+')\n    newtext = pattern.sub(' ',text)\n    return newtext\ndef remove_all_whitespaces_24(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile('\\s+')\n    newtext = pattern.sub(' ',text)\n    return newtext\ndef remove_all_whitespaces_25(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile('\\s+')\n    newtext = pattern.sub(' ',text)\n    return newtext\ndef remove_all_whitespaces_26(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile('\\s+')\n    newtext = pattern.sub(' ',text)\n    return newtext\ndef remove_all_whitespaces_27(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile('\\s+')\n    newtext = pattern.sub(' ',text)\n    return newtext\ndef remove_all_whitespaces_28(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile('\\s+')\n    newtext = pattern.sub(' ',text)\n    return newtext\ndef remove_all_whitespaces_29(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile('\\s+')\n    newtext = pattern.sub(' ',text)\n    return newtext\ndef remove_all_whitespaces_30(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile('\\s+')\n    newtext = pattern.sub(' ',text)\n    return newtext\ndef remove_al"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    regex = '\\s+'\n    return re.sub(regex, '', text)\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z:\n        return 3\n    elif x==y or x==z or y==z:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and y==z\n    pass\n    \ndef test_three_equal_with_minuses(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and y==z\n    pass\n    \ndef test_three_equal_with_negatives(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and y==z\n    pass\n    \ndef test_two_equal_and_a_negative(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and y==z\n    pass\n    \ndef test_one_equal_and_two_negatives(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and y==z\n    pass\n    \ndef test_negative_and_one_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and y==z\n    pass\n    \ndef test_negative_and_negative_and_one_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and y==z\n    pass\n    \ndef test_negative_and_negative_and_two_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and y==z\n    pass\n    \ndef test_negative_and_positive_and_one_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and y==z\n    pass\n    \ndef test_negative_and_positive_and_two_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and y==z\n    pass\n    \ndef test_negative_and_positive_and_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and y==z\n    pass\n    \ndef test_negative_and_negative_and_two_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and y==z\n    pass\n    \ndef test_one_negative_and_one_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and y==z\n    pass\n    \ndef test_one_negative_and_two_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and y==z\n    pass\n    \ndef test_one_negative_and_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and y==z\n    pass\n    \ndef test_two_negative_and_one_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and y==z\n    pass\n    \ndef test_two_negative_and_two_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and y==z\n    pass\n    \ndef test_two_negative_and_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and y==z\n    pass\n    \ndef test_three_negative_and_one_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and y==z\n    pass\n    \ndef test_three_negative_and_two_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and y==z\n    pass\n    \ndef test_three_negative_and_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and y==z\n    pass\n    \ndef test_three_positive_and_one_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and y==z\n    pass\n    \ndef test_three_positive_and_two_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and y==z\n    pass\n    \ndef test_three_positive_and_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and y==z\n    pass\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and y==z and z==a\n    pass\n    \ndef test_four_equal_with_minuses(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and y==z and z==a\n    pass\n    \ndef test_four_equal_with_negatives(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and y==z and z==a\n    pass\n    \ndef test_four_equal_with_negatives_and_one_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and y==z and z==a\n    pass\n    \ndef test_four_equal_with_negatives_and_two_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and y==z and z==a\n    pass\n    \ndef test_four_equal_with_negatives_and_three_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and y==z and z==a\n    pass\n    \ndef test_four_equal_with_negatives_and_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and y==z and z==a\n    pass\n    \ndef test_four_equal_with_negatives_and_one_negative(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and y==z and z==a\n    pass\n    \ndef test_four_equal_with_negatives_and_two_negatives(x,y,z,a):"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or y == z or z == x:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return (x==y==z)\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print count_equal(x,y,z)\n    \nif __name__ == '__main__':\n    test_count_equal("
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y and y == z\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y==z\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return (x == y) and (y == z) and (x == z)\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return True\n    return False\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n=len(arr)\n    if n<2:\n        return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 0\n    \n    n = len(arr)\n    left, right = 0, n-1\n    \n    # Find the middle index\n    mid = 0\n    while mid <= right:\n        if arr[mid] >= arr[left]:\n            left = mid\n        elif arr[mid] <= arr[right]:\n            right = mid\n        mid += 1\n    \n    # Find the number of rotations\n    rotations = 0\n    # If left and right index indices are same, arr[left] == arr[right] and we do not need any rotation\n    if left == right:\n        return 0\n    \n    # If mid index is in the left subarray, then right subarray must be sorted\n    if mid <= right:\n        for i in range(left, right+1):\n            if arr[i] >= arr[left]:\n                rotations += 1\n        return rotations\n    # If mid index is in the right subarray, then left subarray must be sorted\n    if mid >= left:\n        for i in range(left, mid):\n            if arr[i] <= arr[right]:\n                rotations += 1\n        return rotations + 1\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # TODO : count the number of rotations required to generate a sorted array\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return i+1\n    return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    rotation = 0\n    flag = False\n    for i in range(n):\n        if flag:\n            break\n        for j in range(n-1, i, -1):\n            if arr[j] < arr[j-1]:\n                flag = True\n                rotation += 1\n                break\n    return rotation\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if not arr:\n        return 0\n    start = 0\n    end = len(arr)-1\n    while start < end:\n        mid = start + (end-start)//2\n        if arr[mid] > arr[end]:\n            start = mid + 1\n        elif arr[mid] < arr[end]:\n            end = mid\n        else:\n            return 0\n    return start\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    min_element = arr[0]\n    max_element = arr[-1]\n    element_count = len(arr) - 1\n    rotations = 0\n    while min_element <= max_element:\n        element_count = element_count - 1\n        rotations = rotations + 1\n        max_element = arr[element_count]\n    return rotations\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    mid = n/2\n    if arr[mid] > arr[n-1]:\n        return n\n    return count_rotation(arr[mid:]) + count_rotation(arr[:mid])\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(0, n):\n        for j in range(i+1, n):\n            if (arr[i] > arr[j]):\n                count += 1\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    min_index = min(range(n), key=arr.__getitem__)\n    if min_index == 0:\n        return 0\n    elif arr[min_index] < arr[n-1]:\n        return 0\n    else:\n        for i in range(n):\n            if arr[i] > arr[0]:\n                return i\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt = n ** 0.5\n    return (int(sqrt + 0.5) ** 2 == n)\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 or n == 1:\n        return True\n    if n < 0:\n        return False\n    for i in range(1, n):\n        if i * i == n:\n            return True\n        if i * i > n:\n            return False\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0 :\n        return False\n    if n == 0 :\n        return True\n    for i in range(0, n) :\n        temp = i * i\n        if temp == n :\n            return True\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Corner Case\n    if n <= 0 :\n        return False\n    # Check for n ** 0.5\n    # This gives the square root of the number\n    if n ** 0.5 == int(n ** 0.5) :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    s = n ** (0.5)\n    if int(s) == s :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # if (int(math.sqrt(n))*int(math.sqrt(n)) == n) :\n    #     return True\n    # else :\n    #     return False\n    if (n**0.5)%1 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return (sqrt(n) - int(sqrt(n)) == 0)\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # A perfect square is a number that can be expressed as an integer square\n    # e.g. 25 = 4^2 + 5^2\n    sqrt = int(math.sqrt(n))\n    return (sqrt * sqrt == n)\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n < 0) :\n        return False\n    \n    x = n\n    y = (x + 1) / 2\n    while (y * y!= x) :\n        x = y\n        y = (x + 1) / 2\n        \n    return (y * y == x)\n    \ndef is_perfect_square_optimized(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n < 0) :\n        return False\n    \n    x = n\n    y = (x + 1) / 2\n    while (y * y!= x) :\n        x = y\n        y = (x + 1) / 2\n        \n    return (y * y == x)\n    \ndef is_perfect_square_optimized_1(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n < 0) :\n        return False\n    \n    x = n\n    y = (x + 1) / 2\n    while (y * y!= x) :\n        x = y\n        y = (x + 1) / 2\n        \n    return (y * y == x)\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return n == int(math.sqrt(n)) ** 2\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # If the length of the array is even, then the product is an even number\n    # If the length of the array is odd, then the product is an odd number\n    return not bool(len(arr) % 2)\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product = product * i\n    return product % 2 == 0\n    \nprint is_product_even([1, 2, 3, 4, 5])\nprint is_product_even([1, 2, 3, 4, 10])\nprint is_product_even([2, 2, 2, 2, 2])\nprint is_product_even([1, 2, 3, 4, 6])\nprint is_product_even([-1, 2, 3, 4, -5])\nprint is_product_even([0, 0, 0, 0, 0])"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return not any(i%2 for i in arr)\n    \nassert is_product_even([1,2,3])\nassert not is_product_even([2,4,6])\nassert is_product_even([4,6,8])\nassert not is_product_even([1,2,3,4,5])\nassert is_product_even([1,2,3,4,5,6])\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if arr[0] % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    #Method 1:\n    # product_arr = 1\n    # for i in arr:\n    #     product_arr *= i\n    # if product_arr % 2 == 0:\n    #     return True\n    # else:\n    #     return False\n    #Method 2:\n    return reduce(lambda x, y: x*y, arr) % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    product = 1\n    for x in arr:\n        product = product * x\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    total = 1\n    for i in arr:\n        total *= i\n    return total % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if (product(arr) % 2 == 0): \n        return True\n    return False\n    \nprint(is_product_even([2,4,3])) # True\nprint(is_product_even([2,3])) # False\nprint(is_product_even([2,2])) # True\nprint(is_product_even([3,2])) # True\nprint(is_product_even([1,2,3])) # True"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for item in arr:\n        product *= item\n    return product % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return True\n    arr_sum = 1\n    for i in arr:\n        arr_sum *= i\n    if arr_sum % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    n = len(lists)\n    # map(sum,lists)\n    # map(lambda x: sum(x),lists)\n    # map(lambda x: [sum(x)],lists)\n    # map(lambda x: [sum(x)],[x for x in lists])\n    max_list = max(map(lambda x: sum(x),lists),key=sum)\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return None\n    max_sum = 0\n    max_sum_list = []\n    for i in range(len(lists)):\n        curr_sum = 0\n        for j in range(len(lists[i])):\n            curr_sum += lists[i][j]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_sum_list = lists[i]\n    return max_sum_list\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = lists[0]\n    for i in range(1,len(lists)):\n        if max_sum[0] < lists[i][0] + max_sum[1]:\n            max_sum = lists[i]\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_so_far = 0\n    for i in range(len(lists)):\n        temp = 0\n        for j in lists[i]:\n            temp += j\n        if temp > max_so_far:\n            max_so_far = temp\n            max_list = lists[i]\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    index = 0\n    for i in range(0, len(lists)):\n        if sum(lists[i]) > max_sum:\n            max_sum = sum(lists[i])\n            index = i\n    return lists[index]\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # max_list = []\n    # for l in lists:\n    #     if sum(l) == max(sum(l)):\n    #         max_list.append(l)\n    # return max_list\n    # Sol1\n    # max_sum = 0\n    # for l in lists:\n    #     if sum(l) > max_sum:\n    #         max_sum = sum(l)\n    # max_lists = []\n    # for l in lists:\n    #     if sum(l) == max_sum:\n    #         max_lists.append(l)\n    # return max_lists\n    # Sol2\n    max_sum = 0\n    max_lists = []\n    for l in lists:\n        s = sum(l)\n        if s > max_sum:\n            max_sum = s\n            max_lists = [l]\n        elif s == max_sum:\n            max_lists.append(l)\n    return max_lists\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    def max_sum(list):\n        if list == []:\n            return []\n        else:\n            list.reverse()\n            return max_sum(list[1:]) + [max(list)]\n    return max_sum(lists)\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if not lists:\n        return []\n    elif len(lists) == 1:\n        return lists[0]\n    elif not lists[0]:\n        return max_sum_list(lists[1:])\n    else:\n        max_sum_list = [lists[0]]\n        for i in range(1, len(lists)):\n            if sum(max_sum_list[-1]) < sum(lists[i]):\n                max_sum_list.append(lists[i])\n        return max_sum_list\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    sums = []\n    for elem in lists:\n        sums.append(sum(elem))\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = lists[0]\n    for list in lists:\n        if sum(list) > sum(max_sum):\n            max_sum = list\n    return max_sum\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Create an empty dictionary\n    max_run = {}\n    # Iterate over the string\n    for i in range(len(test_str)):\n        # if the current char is uppercase,\n        if test_str[i].isupper():\n            # if we have a uppercase letter as the first letter,\n            if i == 0:\n                # update the max_run as we have a new uppercase letter\n                max_run[i] = 1\n            # If current char is uppercase and next character is not uppercase,\n            elif test_str[i].isupper() and test_str[i-1].islower():\n                # update the max_run as we have a new uppercase letter\n                max_run[i] = max_run[i-1] + 1\n            # If current char is uppercase and next character is uppercase,\n            elif test_str[i].isupper() and test_str[i-1].isupper():\n                # update the max_run as we have a new uppercase letter\n                max_run[i] = max_run[i-1] + 1\n            # If current char is uppercase and next character is not uppercase,\n            elif test_str[i].isupper() and test_str[i-1].islower():\n                # update the max_run as we have a new uppercase letter\n                max_run[i] = 1\n            # If we are at the end of the string,\n            elif i == len(test_str) - 1:\n                # update the max_run as we have a new uppercase letter\n                max_run[i] = 1\n            # If we have a lowercase letter as the first letter,\n            elif test_str[i].islower():\n                # update the max_run as we have a new uppercase letter\n                max_run[i] = 1\n            # If we have a lowercase letter as the first letter,\n            elif test_str[i].islower() and test_str[i-1].isupper():\n                # update the max_run as we have a new uppercase letter\n                max_run[i] = 1\n            # If we have a lowercase letter as the first letter,\n            elif test_str[i].islower() and test_str[i-1].islower():\n                # update the max_run as we have a new uppercase letter\n                max_run[i] = max_run[i-1] + 1\n    # return the max run\n    return max(max_run.values())\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    return max(sum(1 for c in test_str if c.isupper()) for test_str in test_str)\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    curr_run = 0\n    for char in test_str:\n        if char.isupper():\n            curr_run += 1\n        else:\n            max_run = max(max_run, curr_run)\n            curr_run = 0\n    max_run = max(max_run, curr_run)\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    temp = [len(list(g)) for k,g in itertools.groupby(test_str) if k.isupper()]\n    return max(temp) if temp else 0\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max = 0\n    current = 1\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            current += 1\n        else:\n            if max < current:\n                max = current\n            current = 1\n    if max < current:\n        max = current\n    return max\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run_len = 0\n    run_len = 0\n    for i in xrange(len(test_str)):\n        if test_str[i].isupper():\n            run_len += 1\n            if run_len > max_run_len:\n                max_run_len = run_len\n        else:\n            run_len = 0\n    return max_run_len\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    upper_str = test_str.upper()\n    for i in range(len(upper_str)):\n        curr = 1\n        j = i\n        while j < len(upper_str):\n            if upper_str[j] == upper_str[j-1]:\n                curr += 1\n                j += 1\n            else:\n                break\n        if curr > max_run:\n            max_run = curr\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    current_count = 0\n    for i in test_str:\n        if i.isupper():\n            current_count += 1\n        else:\n            max_count = max(max_count, current_count)\n            current_count = 0\n    return max(max_count, current_count)\n    \n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    last_char = None\n    for char in test_str:\n        if char.isupper():\n            if last_char!= None and last_char == char:\n                count += 1\n            else:\n                count = 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n        last_char = char\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if len(nums)==0:\n        return None\n    if len(nums)==1:\n        return nums[0] if nums[0]%2!=0 else None\n    return nums[0] if nums[0]%2!=0 else first_odd(nums[1:])\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(0,len(nums)):\n        if nums[i]%2==1:\n            return nums[i]\n    return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for x in nums:\n        if x % 2 == 1:\n            return x\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num%2==1:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n    return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for n in nums:\n        if n % 2!= 0:\n            return n\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n        \ndef factorial(n):\n    '''\n    Write a python function to compute the factorial of a given number n\n    '''\n    if n < 0:\n        return None\n    if n == 0 or n == 1:\n        return 1\n    return n * factorial(n-1)\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num%2!=0:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    \n    for i in nums:\n        if i%2==1:\n            return i\n            \n    return None\n            \ndef second_odd(nums):\n    '''\n    Write a python function to find the second odd number in a given list of numbers.\n    '''\n    \n    for i in nums:\n        if i%2==1:\n            return i\n            \n    return None\n            \ndef rotate_nums(nums, n):\n    '''\n    Write a python function to rotate a list of numbers by n elements.\n    '''\n    \n    for i in range(n):\n        nums.append(nums.pop(0))\n    \n    return nums\n            \ndef rotate_nums_2(nums, n):\n    '''\n    Write a python function to rotate a list of numbers by n elements.\n    '''\n    \n    for i in range(n):\n        nums.insert(0, nums.pop())\n    \n    return nums\n            \ndef rotate_nums_3(nums, n):\n    '''\n    Write a python function to rotate a list of numbers by n elements.\n    '''\n    \n    new_nums = []\n    \n    for i in range(n):\n        new_nums.append(nums[-n+i])\n    \n    nums[:] = new_nums[:]\n    \n    return nums\n    \ndef rotate_nums_4(nums, n):\n    '''\n    Write a python function to rotate a list of numbers by n elements.\n    '''\n    \n    new_nums = []\n    \n    for i in range(n):\n        new_nums.append(nums[-n+i])\n    \n    nums[:] = new_nums[:]\n    \n    return nums\n    \ndef rotate_nums_5(nums, n):\n    '''\n    Write a python function to rotate a list of numbers by n elements.\n    '''\n    \n    new_nums = []\n    \n    for i in range(n):\n        new_nums.append(nums[-n+i])\n    \n    nums[:] = new_nums[:]\n    \n    return nums\n    \ndef rotate_nums_6(nums, n):\n    '''\n    Write a python function to rotate a list of numbers by n elements.\n    '''\n    \n    for i in range(n):\n        nums.insert(0, nums.pop())\n    \n    return nums\n    \ndef rotate_nums_7(nums, n):\n    '''\n    Write a python function to rotate a list of numbers by n elements.\n    '''\n    \n    new_nums = []\n    \n    for i in range(n):\n        new_nums.append(nums[-n+i])\n    \n    nums[:] = new_nums[:]\n    \n    return nums\n    \ndef rotate_nums_8(nums, n):\n    '''\n    Write a python function to rotate a list of numbers by n elements.\n    '''\n    \n    for i in range(n):\n        nums.insert(0, nums.pop())\n    \n    return nums\n    \ndef rotate_nums_9(nums, n):\n    '''\n    Write a python function to rotate a list of numbers by n elements.\n    '''\n    \n    for i in range(n):\n        nums.append(nums.pop(0))\n    \n    return nums\n    \ndef rotate_nums_10(nums, n):\n    '''\n    Write a python function to rotate a list of numbers by n elements.\n    '''\n    \n    for i in range(n):\n        nums.append(nums.pop(0))\n    \n    return nums\n    \ndef rotate_nums_11(nums, n):\n    '''\n    Write a python function to rotate a list of numbers by n elements.\n    '''\n    \n    for i in range(n):\n        nums.append(nums.pop(0))\n    \n    return nums\n    \ndef rotate_nums_12(nums, n):\n    '''\n    Write a python function to rotate a list of numbers by n elements.\n    '''\n    \n    for i in range(n):\n        nums.append(nums.pop(0))\n    \n    return nums\n    \ndef rotate_nums_13(nums, n):\n    '''\n    Write a python function to rotate a list of numbers by n elements.\n    '''\n    \n    for i in range(n):\n        nums.insert(0, nums.pop())\n    \n    return nums\n    \ndef rotate_nums_14(nums, n):\n    '''\n    Write a python function to rotate a list of numbers by n elements.\n    '''\n    \n    new_nums = []\n    \n    for i in range(n):\n        new_nums.append(nums[-n+i])\n    \n    nums[:] = new_nums[:]\n    \n    return nums\n    \ndef rotate_nums_15(nums, n):\n    '''\n    Write a python function to rotate a list of numbers by n elements.\n    '''\n    \n    new_nums = []\n    \n    for i in range(n):\n        new_nums.append(nums[-n+i])\n    \n    nums[:] = new_nums[:]\n    \n    return nums\n    \ndef rotate_nums_16(nums, n):\n    '''\n    Write a python function to rotate a list of numbers by n elements.\n    '''\n    \n    for i in range(n):\n        nums.insert(0, nums.pop())\n    \n    return nums\n    \ndef rotate_nums_17(nums, n):\n    '''\n    Write a python function to rotate a list of numbers by n elements.\n    '''\n    \n    for i in range(n):\n        nums.insert(0, nums.pop())\n    \n    return nums\n    \ndef rotate_nums_18(nums, n):\n    '''\n    Write a python function to rotate a list of numbers by n elements.\n    '''\n    \n    for i in range(n):\n        nums.append(nums.pop(0))\n    \n    return nums\n    \ndef rotate_nums_19(nums, n):\n    '''\n    Write a python function to rotate a list of numbers by n elements.\n    '''\n    \n    for i in range(n):\n        nums.append(nums.pop(0))\n    \n    return nums\n    \ndef rotate_nums_20(nums, n):\n    '''\n    Write a python function to rotate a list of numbers by n elements.\n    '''\n    \n    for i in range(n):\n        nums.append(nums.pop(0))\n    \n    return nums\n    \ndef rotate_nums_21(nums, n):\n    '''\n    Write a python function to rotate a list of numbers by n elements.\n    '''\n    \n    for i in range(n):\n        nums.insert(0, nums.pop())\n    \n    return nums\n    \ndef rotate_nums_22(nums, n):\n    '''\n    Write a python function to rotate a list of numbers by n elements.\n    '''\n    \n    new_nums = []\n    \n    for i in range(n):\n        new_nums.append(nums[-n+i])\n    \n    nums[:] = new_nums[:]\n    \n    return nums\n    \ndef rotate_nums_23(nums, n):\n    '''\n    Write a python function to rotate a list of numbers by n elements.\n    '''\n    \n    new_nums = []\n    \n    for i in range(n):\n        new_nums.append(nums[-n+i])\n    \n    nums[:] = new_nums[:]\n    \n    return nums\n    \ndef rotate_nums_24(nums, n):\n    '''\n    Write a python function to rotate a list of numbers by n elements.\n    '"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K > len(test_tup):\n        return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) <= K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup)!= K:\n        return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    s1, s2, s3 = test_tup\n    if s1.count(K) > 0 or s2.count(K) > 0 or s3.count(K) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    (x,y) = test_tup\n    if y in K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    print \"Checking if the given tuples contain the k or not: \",\n    for t in test_tup:\n        if K in t:\n            print \"K is in tuple\"\n            return True\n        else:\n            print \"K is not in tuple\"\n            return False\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if len(tup)!= K:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    K_tuple = ()\n    if K == 0:\n        K_tuple = tuple()\n    else:\n        K_tuple = test_tup[:K]\n    return K_tuple\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return set(test_tup).issuperset(K)\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for x in range(len(test_tup1)):\n        if test_tup1[x] > test_tup2[x]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i,j in zip(test_tup1, test_tup2):\n        if j < i:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    #for i in range(0, len(test_tup1)):\n    #    if test_tup1[i] > test_tup2[i]:\n    #        return False\n    #return True\n    #\n    #return [test_tup1[i] > test_tup2[i] for i in range(0, len(test_tup1))]\n    return all(x > y for x, y in zip(test_tup1, test_tup2))\n    #\n    #return all([test_tup1[i] > test_tup2[i] for i in range(0, len(test_tup1))])\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] > test_tup2[0] and test_tup1[1] > test_tup2[1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return all(test_tup1[i] < test_tup2[i] for i in range(len(test_tup1)))\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"The first tuple is not a subset of the second tuple\")\n            return False\n    print(\"The first tuple is a subset of the second tuple\")\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return False\n    elif test_tup1[0] < test_tup2[0]:\n        return True\n    else:\n        return check_smaller(test_tup2[1:], test_tup1[1:])\n"
    }
]