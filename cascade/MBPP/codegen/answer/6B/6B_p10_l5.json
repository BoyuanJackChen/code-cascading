[
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    intersection = set1.intersection(set2)\n    return list(intersection)\n",
        "num_ids": 50
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n    \nif __name__ == \"__main__\":\n    assert similar_elements((1, 2, 3, 4), (2, 1, 4, 3)) == {1, 3}\n    assert similar_elements((1, 2, 3, 4, 5, 6), (2, 1, 4, 3)) == {1, 3}\n    assert similar_elements((1, 2, 3, 4), (2, 3, 1, 4)) == set()\n    assert similar_elements((1, 2, 3, 4), (2, 3, 1, 4, 5)) == {1}\n    assert similar_elements((1, 2, 3, 4, 5, 6), (2, 3, 1, 4, 5)) == {1",
        "num_ids": 193
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] not in test_tup2:\n                return False\n        return True\n",
        "num_ids": 73
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    a = set(test_tup1)\n    b = set(test_tup2)\n    c = a.intersection(b)\n    return list(c)\n",
        "num_ids": 44
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # we want to return the common elements\n    # both test_tup1 and test_tup2\n    # are tuples\n    return [x for x in test_tup1 if x in test_tup2]\n",
        "num_ids": 55
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    n = len(test_tup1)\n    m = len(test_tup2)\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n    res_tup = []\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if test_tup1[i] == test_tup2[j]:\n            res_tup.append(test_tup1[i])\n            i += 1\n            j += 1\n        elif test_tup1[i] > test_tup2[j]:\n            j += 1\n        else:\n            i += 1\n    return tuple(res_tup)\n",
        "num_ids": 179
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    from collections import Counter\n    s1 = Counter(test_tup1)\n    s2 = Counter(test_tup2)\n    shared = s1 & s2\n    for i in shared:\n        print(i)\n",
        "num_ids": 56
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n",
        "num_ids": 24
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n",
        "num_ids": 24
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return set(test_tup1).intersection(set(test_tup2))\n    else:\n        return '''Incorrect Inputs'''\n",
        "num_ids": 2
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return False\n    elif n > 2 and n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n    return True\n",
        "num_ids": 87
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    if n%2==0:\n        return True\n    for x in range(3,int(math.sqrt(n))+1,2):\n        if n%x==0:\n            return True\n    return False\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 2:\n        return True\n    if n%2==0:\n        return False\n    for x in range(3,int(math.sqrt(n))+1,2):\n        if n%x==0:\n            return False\n    return True\n",
        "num_ids": 66
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<2:\n        return True\n    if n == 2:\n        return False\n    if n%2 == 0:\n        return True\n    for x in range(3,int(math.ceil(math.sqrt(n))),2):\n        if n%x == 0:\n            return True\n    return False\ndef primes(n):\n    '''\n    Write a python function to return all the prime numbers upto n.\n    '''\n    if n == 2:\n        return [2]\n    elif n < 2:\n        return []\n    else:\n        sieve = [True] * (n+1)\n        for x in range(3,int(math.ceil(math.sqrt(n)))):\n            if sieve[x]:\n                for y in range(x*2,n+1,x):\n                    sieve[y] = False\n        return [2]+[x for x in range(3,n,2) if sieve[x]]\ndef sum_numbers(a,b):\n    '''\n    Write a python function to return the sum of two numbers.\n    '''\n    return a+b\ndef diff_numbers(a,b):\n    '''\n    Write a python function to return the difference of two numbers.\n    '''\n    return a-b\ndef power_numbers(a,b):\n    '''\n    Write a python function to return the power of a number.\n    '''\n    return a**b\ndef is_palindrome(s):\n    '''\n    Write a python function to identify palindromes.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ndef is_abecedarian(s):\n    '''\n    Write a python function to identify abecedarian.\n    '''\n    for x in range(1,len(s)):\n        if s[x-1]>s[x]:\n            return False\n    return True\ndef is_anagram(a,b):\n    '''\n    Write a python function to identify anagrams.\n    '''\n    if len(a)==len(b):\n        return sorted(a)==sorted(b)\n    return False\ndef is_substring(a,b):\n    '''\n    Write a python function to identify substring.\n    '''\n    if a in b:\n        return True\n    else:\n        return False\ndef is_rotation(a,b):\n    '''\n    Write a python function to identify rotation.\n    '''\n    if len(a)==len(b):\n        if a in b:\n            return True\n        else:\n            return False\n    elif len(a)>len(b):\n        if b in a:\n            return True\n        else:\n            return False\n    else:\n        if a in b:\n            return True\n        else:\n            return False\ndef is_anagram_sorted(a,b):\n    '''\n    Write a python function to identify anagrams.\n    '''\n    if len(a)==len(b):\n        if sorted(a)==sorted(b):\n            return True\n        else:\n            return False\n    elif len(a)>len(b):\n        if sorted(b)==sorted(a):\n            return True\n        else:\n            return False\n    else:\n        if sorted(a)==sorted(b):\n            return True\n        else:\n            return False\ndef is_prime(n):\n    '''\n    Write a python function to identify primes.\n    '''\n    if n==2 or n==3:\n        return True\n    elif n%2==0 or n%3==0:\n        return False\n    for x in range(5,int(math.ceil(math.sqrt(n))),2):\n        if n%x==0 or n%(x+2)==0:\n            return False\n    return True\ndef is_perfect(n):\n    '''\n    Write a python function to identify perfect numbers.\n    '''\n    sum=0\n    for x in range(1,n):\n        if n%x == 0:\n            sum+=x\n    return sum == n\ndef is_armstrong(n):\n    '''\n    Write a python function to identify armstrong numbers.\n    '''\n    s=str(n)\n    sum=0\n    for x in range(0,len(s)):\n        sum+=pow(int(s[x]),len(s))\n    return sum == n\ndef is_armstrong_numbers(n):\n    '''\n    Write a python function to identify armstrong numbers.\n    '''\n    s=str(n)\n    sum=0\n    for x in range(0,len(s)):\n        sum+=pow(int(s[x]),len(s))\n    return sum == n\ndef is_prime_number(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n==2 or n==3:\n        return True\n    elif n%2==0 or n%3==0:\n        return False\n    for x in range(5,int(math.ceil(math.sqrt(n))),2):\n        if n%x==0 or n%(x+2)==0:\n            return False\n    return True\ndef is_perfect_number(n):\n    '''\n    Write a python function to identify perfect numbers.\n    '''\n    sum=0\n    for x in range(1,n):\n        if n%x == 0:\n            sum+=x\n    return sum == n\ndef is_perfect_number_numbers(n):\n    '''\n    Write a python function to identify perfect numbers.\n    '''\n    sum=0\n    for x in range(1,n):\n        if n%x == 0:\n            sum+=x\n    return sum == n\ndef is_factorial(n):\n    '''\n    Write a python function to identify factorials.\n    '''\n    return math.factorial(n)\ndef is_factorial_numbers(n):\n    '''\n    Write a python function to identify factorials.\n    '''\n    return math.factorial(n)\ndef is_truncatable_primes(n):\n    '''\n    Write a python function to identify truncable primes.\n    '''\n    s=str(n)\n    sum=0\n    for x in range(0,len(s)):\n        sum+=is_prime(int(s[x:]))\n        sum+=is_prime(int(s[:x]))\n    return sum==2\ndef is_truncatable_primes_numbers(n):\n    '''\n    Write a python function to identify truncable primes.\n    '''\n    s=str(n)\n    sum=0\n    for x in range(0,len(s)):\n        sum+=is_prime_number(int(s[x:]))\n        sum+=is_prime_number(int(s[:x]))\n    return sum==2\ndef is_hex_number(n):\n    '''\n    Write a python function to identify hex numbers.\n    '''\n    return is_number(n,16)\ndef is_oct_number(n):\n    '''\n    Write a python function to identify octal numbers.\n    '''\n    return is_number(n,8)\ndef is_dec_number(n):\n    '''\n    Write a python function to identify decimal numbers.\n    '''\n    return is_number(n,10)\ndef is_number(n,base):\n    '''\n    Write a python function to identify any base number.\n    '''\n    return int(n,base)\ndef is_number_numbers(n,base):\n    '''\n    Write a python function to identify any base number.\n    '''\n    return int(n,base)\ndef is_palindrome_numbers(n):\n    '''\n    Write a python function to identify palindromes.\n    '''\n    s=str(n)\n    sum=0\n    for x in range(0,len(s)):\n        sum+=is_palindrome(int(s[x:]))\n        sum+=is_palindrome(int(s[:x]))\n    return sum==",
        "num_ids": 68
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    elif n % 2 == 0:\n        return True\n    else:\n        for i in xrange(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return True\n        return False\n",
        "num_ids": 72
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n % 2 == 0 and n > 2:\n        return False\n    return all(n % i for i in range(3, int(math.sqrt(n)) + 1, 2))\n",
        "num_ids": 48
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n % 2 == 0 and n > 2:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n % i == 0:\n                return False\n    return True\n",
        "num_ids": 63
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Initialize variables\n    # start_num = 2\n    # end_num = math.sqrt(n)\n    # if n == 1 or n == 0:\n    #     return True\n    # while start_num < end_num:\n    #     if n % start_num == 0:\n    #         return True\n    #     start_num += 1\n    # return False\n",
        "num_ids": 93
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\ndef sieve(n):\n    '''\n    Write a python function to return all primes less than n.\n    '''\n    primes=[]\n    for i in range(2,n):\n        if is_not_prime(i):\n            primes.append(i)\n    return primes\ndef prime_factors(n):\n    '''\n    Write a python function to return all prime factors of a given number n.\n    '''\n    primes=sieve(n)\n    factors=[]\n    for i in primes:\n        while n%i==0:\n            n/=i\n            factors.append(i)\n    return factors\ndef generate_primes(n):\n    '''\n    Write a python function to return the prime numbers within a given range.\n    '''\n    primes=sieve(n)\n    for i in primes:\n        if n%i==0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a python function to return True if the given number n is prime and False if it is not.\n    '''\n    return generate_primes(n)\ndef prime_numbers(n):\n    '''\n    Write a python function to return the prime numbers within a given range.\n    '''\n    primes=[]\n    for i in range(2,n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\ndef is_prime_number(n):\n    '''\n    Write a python function to return True if the given number n is prime and False if it is not.\n    '''\n    if n%2==0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i==0:\n                return False\n    return True\ndef is_prime_string(n):\n    '''\n    Write a python function to return True if the given string n is a prime number and False if it is not.\n    '''\n    n=int(n)\n    if n%2==0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i==0:\n                return False\n    return True\ndef is_prime_list(n):\n    '''\n    Write a python function to return True if the given list n is a prime number and False if it is not.\n    '''\n    primes=prime_numbers(max(n))\n    for i in n:\n        if not i%2==0:\n            if i not in primes:\n                return False\n    return True\ndef is_prime_string_list(n):\n    '''\n    Write a python function to return True if the given list n is a prime number and False if it is not.\n    '''\n    primes=prime_numbers(max(n))\n    for i in n:\n        if not is_prime_string(i):\n            return False\n    return True\ndef prime_number_string(n):\n    '''\n    Write a python function to return the prime numbers within a given range.\n    '''\n    primes=prime_numbers(n)\n    string=\"\"\n    for i in primes:\n        string+=str(i)+\" \"\n    return string\ndef prime_number_string_list(n):\n    '''\n    Write a python function to return the prime numbers within a given range.\n    '''\n    primes=prime_numbers(n)\n    string=[]\n    for i in primes:\n        string.append(str(i))\n    return string\ndef prime_factor(n):\n    '''\n    Write a python function to return the prime factors of a given number n.\n    '''\n    primes=prime_numbers(n)\n    factors=[]\n    for i in primes:\n        while n%i==0:\n            n/=i\n            factors.append(i)\n    return factors\ndef is_factor(n,i):\n    '''\n    Write a python function to return True if the given number n is a factor of i and False if it is not.\n    '''\n    if i%n==0:\n        return True\n    return False\ndef prime_factors_list(n):\n    '''\n    Write a python function to return the prime factors of a given number n.\n    '''\n    primes=prime_numbers(n)\n    factors=[]\n    for i in primes:\n        if is_factor(n,i):\n            factors.append(i)\n    return factors\ndef prime_factors_string_list(n):\n    '''\n    Write a python function to return the prime factors of a given number n.\n    '''\n    primes=prime_numbers(n)\n    factors=[]\n    for i in primes:\n        if is_factor(n,i):\n            factors.append(i)\n    string=[]\n    for i in factors:\n        string.append(str(i))\n    return string\ndef is_perfect(n):\n    '''\n    Write a python function to return True if the given number n is a perfect number and False if it is not.\n    '''\n    if n==0:\n        return False\n    else:\n        divisors=[]\n        for i in range(1,n):\n            if n%i==0:\n                divisors.append(i)\n        if sum(divisors)==n:\n            return True\n        return False\ndef is_perfect_list(n):\n    '''\n    Write a python function to return True if the given list n is a perfect number and False if it is not.\n    '''\n    divisors=[]\n    for i in n:\n        if is_perfect(i):\n            divisors.append(i)\n    if sum(divisors)==sum(n):\n        return True\n    return False\ndef is_perfect_string(n):\n    '''\n    Write a python function to return True if the given string n is a perfect number and False if it is not.\n    '''\n    n=int(n)\n    divisors=[]\n    for i in range(1,n):\n        if n%i==0:\n            divisors.append(i)\n    if sum(divisors)==n:\n        return True\n    return False\ndef is_perfect_string_list(n):\n    '''\n    Write a python function to return True if the given list n is a perfect number and False if it is not.\n    '''\n    divisors=[]\n    for i in n:\n        if is_perfect_string(i):\n            divisors.append(i)\n    if sum(divisors)==sum(n):\n        return True\n    return False\ndef is_perfect_number(n):\n    '''\n    Write a python function to return True if the given number n is a perfect number and False if it is not.\n    '''\n    if is_perfect(n):\n        return True\n    else:\n        return False\ndef is_perfect_number_list(n):\n    '''\n    Write a python function to return True if the given list n is a perfect number and False if it is not.\n    '''\n    divisors=[]\n    for i in n:\n        if is_perfect(i):\n            divisors.append(i)\n    if sum(divisors)==sum(n):\n        return True\n    return False\ndef is_perfect_number_string(n):\n    '''\n    Write a python function to return True if the given string n is a perfect number and False if it is not.\n    '''\n    n=int(n)\n    if is_perfect(n):\n        return True\n    else:\n        return False\ndef is_perfect_number_string_list(n):\n    '''\n    Write a python function to return True if the given list n is a perfect number and False if it is not.\n    '''\n    divisors=[]\n    for i in n:\n        if is_perfect(i):\n            divisors.append(i)\n    if sum(divisors)==sum(n):\n        return True\n    return False\ndef is",
        "num_ids": 59
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    if n == 3:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6):\n        if n % i == 0:\n            return False\n        if n % (i+2) == 0:\n            return False\n    return True\n",
        "num_ids": 107
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 67
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return [hq.heappop(nums) for i in range(n)]\n",
        "num_ids": 35
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums) < n:\n        return None\n    hq.heapify(nums)\n    print(nums)\n    for i in range(n-1):\n        hq.heappop(nums)\n    return nums\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if len(nums) < n:\n        return None\n    hq.heapify(nums)\n    for i in range(n-1):\n        hq.heappop(nums)\n    return nums\ndef max_heap_heapify(nums,i):\n    l = i*2\n    r = i*2 + 1\n    if l <= len(nums)-1 and nums[l] > nums[i]:\n        largest = l\n    else:\n        largest = i\n    if r <= len(nums)-1 and nums[r] > nums[largest]:\n        largest = r\n    if largest!= i:\n        nums[i],nums[largest] = nums[largest],nums[i]\n        max_heap_heapify(nums,largest)\ndef max_heap_insert(nums,e):\n    nums.append(e)\n    i = len(nums)-1\n    while i > 0 and nums[(i-1)//2] < nums[i]:\n        nums[i],nums[(i-1)//2] = nums[(i-1)//2],nums[i]\n        i = (i-1)//2\ndef max_heap_extract(nums,i):\n    if i >= len(nums):\n        return None\n    max = i\n    l = i*2\n    r = i*2 + 1\n    if l <= len(nums)-1 and nums[l] > nums[max]:\n        max = l\n    if r <= len(nums)-1 and nums[r] > nums[max]:\n        max = r\n    if max!= i:\n        nums[max],nums[i] = nums[i],nums[max]\n        max_heap_extract(nums,max)\ndef max_heap_delete(nums,e):\n    i = 0\n    for i in range(len(nums)):\n        if nums[i] == e:\n            break\n    if i!= len(nums)-1:\n        nums[i],nums[len(nums)-1] = nums[len(nums)-1],nums[i]\n        max_heap_extract(nums,i)\ndef max_heap_decrease_key(nums,e,i):\n    if i >= len(nums):\n        return None\n    if e < nums[i]:\n        return None\n    nums[i] = e\n    while i > 0 and nums[(i-1)//2] < nums[i]:\n        nums[i],nums[(i-1)//2] = nums[(i-1)//2],nums[i]\n        i = (i-1)//2\ndef max_heap_decrease_key_inplace(nums,e,i):\n    if i >= len(nums):\n        return None\n    if e < nums[i]:\n        return None\n    nums[i] = e\n    hq.heapify(nums)\ndef max_heap_get_max(nums):\n    return nums[0]\ndef max_heap_get_size(nums):\n    return len(nums)\ndef max_heap_get_parent(nums,i):\n    return (i-1)//2\ndef max_heap_get_left(nums,i):\n    l = i*2 + 1\n    if l > len(nums)-1:\n        return None\n    return l\ndef max_heap_get_right(nums,i):\n    r = i*2 + 2\n    if r > len(nums)-1:\n        return None\n    return r\ndef max_heap_get_children(nums,i):\n    l = max_heap_get_left(nums,i)\n    r = max_heap_get_right(nums,i)\n    return (l,r)\ndef max_heap_get_max_child(nums,i):\n    l = max_heap_get_left(nums,i)\n    r = max_heap_get_right(nums,i)\n    if l == None:\n        return r\n    if r == None:\n        return l\n    return max(l,r)\ndef max_heap_get_max_child_index(nums,i):\n    l = max_heap_get_left(nums,i)\n    r = max_heap_get_right(nums,i)\n    if l == None:\n        return 1\n    if r == None:\n        return 0\n    if l == r:\n        return l\n    return min(l,r)\ndef max_heap_get_min(nums):\n    return nums[0]\ndef max_heap_get_min_child(nums,i):\n    l = max_heap_get_left(nums,i)\n    r = max_heap_get_right(nums,i)\n    if l == None:\n        return r\n    if r == None:\n        return l\n    return min(l,r)\ndef max_heap_get_min_child_index(nums,i):\n    l = max_heap_get_left(nums,i)\n    r = max_heap_get_right(nums,i)\n    if l == None:\n        return 1\n    if r == None:\n        return 0\n    if l == r:\n        return l\n    return min(l,r)\ndef max_heap_get_max_child_index(nums,i):\n    l = max_heap_get_left(nums,i)\n    r = max_heap_get_right(nums,i)\n    if l == None:\n        return 0\n    if r == None:\n        return 1\n    if l == r:\n        return l\n    return min(l,r)\ndef max_heap_get_index(nums,e):\n    for i in range(len(nums)):\n        if nums[i] == e:\n            return i\n    return -1\ndef max_heap_get_index_recursive(nums,e):\n    def get_max_index(nums,i,e):\n        if i >= len(nums):\n            return None\n        if nums[i] == e:\n            return i\n        l = get_max_index(nums,i*2+1,e)\n        if l == None:\n            return get_max_index(nums,i*2,e)\n        return l\n    return get_max_index(nums,0,e)\ndef max_heap_get_index_iterative(nums,e):\n    i = 0\n    for i in range(len(nums)):\n        if nums[i] == e:\n            return i\n    return -1\ndef max_heap_get_index_iterative_2(nums,e):\n    i = 0\n    for i in range(len(nums)):\n        if nums[i] == e:\n            return i\n    return -1\ndef max_heap_get_index_recursive_2(nums,e):\n    def get_max_index(nums,i,e):\n        if i >= len(nums):\n            return None\n        if nums[i] == e:\n            return i\n        l = get_max_index(nums,i*2+1,e)\n        if l == None:\n            return get_max_index(nums,i*2,e)\n        return l\n    return get_max_index(nums,0,e)",
        "num_ids": 1894
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums) < n:\n        return\n    nums.sort(reverse=True)\n    for i in range(n):\n        print(nums[i])\n",
        "num_ids": 45
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    ans = []\n    hq.heapify(nums)\n    for i in range(n):\n        ans.append(hq.heappop(nums))\n    return ans\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    ans = []\n    hq.heapify(nums)\n    for i in range(n):\n        ans.append(hq.heappop(nums))\n    return ans\ndef heapsort(nums):\n    '''\n    Heapsort.\n    '''\n    n = len(nums)\n    for i in range(n//2-1,-1,-1):\n        siftdown(nums,i)\n    for i in range(n-1,0,-1):\n        nums[i],nums[0] = nums[0],nums[i]\n        siftdown(nums,0)\ndef siftdown(nums,k):\n    '''\n    Siftdown.\n    '''\n    while k*2+1 < len(nums):\n        j = min(k*2+1,k*2+2)\n        if j < len(nums) and nums[j] < nums[k]:\n            j = min(j,k*2+1)\n        if nums[j] > nums[k]:\n            nums[j],nums[k] = nums[k],nums[j]\n            k = j\n        else:\n            break\ndef smallest_contiguous_subarray(nums,k):\n    '''\n    Write a function to find the smallest contiguous subarray within an array (containing at least one number) which has a sum of at least k.\n    If the answer doesn't exist, return [-1,-1].\n    '''\n    n = len(nums)\n    left = right = 0\n    curr = nums[0]\n    while right < n:\n        curr += nums[right]\n        while curr >= k:\n            curr -= nums[left]\n            left += 1\n        if curr >= k:\n            return [left,right]\n        right += 1\n    return [-1,-1]\ndef find_smallest_k(nums,k):\n    '''\n    Write a function to find the smallest k numbers in a stream.\n    '''\n    ans = []\n    for i in range(k):\n        ans.append(heap_queue_largest(nums,1)[0])\n        hq.heappop(nums)\n    return ans\ndef find_largest_k(nums,k):\n    '''\n    Write a function to find the largest k numbers in a stream.\n    '''\n    ans = []\n    for i in range(k):\n        ans.append(heap_queue_smallest(nums,1)[0])\n        hq.heappop(nums)\n    return ans\ndef min_k(nums,k):\n    '''\n    Write a function to find the smallest k numbers in a stream.\n    '''\n    ans = []\n    for i in range(k):\n        ans.append(min(nums))\n        nums.remove(min(nums))\n    return ans\ndef max_k(nums,k):\n    '''\n    Write a function to find the largest k numbers in a stream.\n    '''\n    ans = []\n    for i in range(k):\n        ans.append(max(nums))\n        nums.remove(max(nums))\n    return ans\ndef find_min_k(nums,k):\n    '''\n    Write a function to find the largest k numbers in a stream.\n    '''\n    ans = []\n    for i in range(k):\n        ans.append(min(nums))\n        nums.remove(min(nums))\n    return ans\ndef find_max_k(nums,k):\n    '''\n    Write a function to find the largest k numbers in a stream.\n    '''\n    ans = []\n    for i in range(k):\n        ans.append(max(nums))\n        nums.remove(max(nums))\n    return ans\ndef max_sliding_window(nums,k):\n    '''\n    Write a function to find the largest k numbers in an array.\n    '''\n    n = len(nums)\n    ans = []\n    for i in range(n-k+1):\n        ans.append(max(nums[i:i+k]))\n    return ans\ndef min_sliding_window(nums,k):\n    '''\n    Write a function to find the largest k numbers in an array.\n    '''\n    n = len(nums)\n    ans = []\n    for i in range(n-k+1):\n        ans.append(min(nums[i:i+k]))\n    return ans\ndef find_max_sliding_window(nums,k):\n    '''\n    Write a function to find the largest k numbers in an array.\n    '''\n    n = len(nums)\n    ans = []\n    for i in range(n-k+1):\n        ans.append(max(nums[i:i+k]))\n    return ans\ndef find_min_sliding_window(nums,k):\n    '''\n    Write a function to find the largest k numbers in an array.\n    '''\n    n = len(nums)\n    ans = []\n    for i in range(n-k+1):\n        ans.append(min(nums[i:i+k]))\n    return ans\ndef max_sliding_window_v2(nums,k):\n    '''\n    Write a function to find the largest k numbers in an array.\n    '''\n    n = len(nums)\n    ans = []\n    for i in range(n-k+1):\n        ans.append(max(nums[i:i+k]))\n    return ans\ndef min_sliding_window_v2(nums,k):\n    '''\n    Write a function to find the largest k numbers in an array.\n    '''\n    n = len(nums)\n    ans = []\n    for i in range(n-k+1):\n        ans.append(min(nums[i:i+k]))\n    return ans\ndef find_max_sliding_window_v2(nums,k):\n    '''\n    Write a function to find the largest k numbers in an array.\n    '''\n    n = len(nums)\n    ans = []\n    for i in range(n-k+1):\n        ans.append(max(nums[i:i+k]))\n    return ans\ndef find_min_sliding_window_v2(nums,k):\n    '''\n    Write a function to find the largest k numbers in an array.\n    '''\n    n = len(nums)\n    ans = []\n    for i in range(n-k+1):\n        ans.append(min(nums[i:i+k]))\n    return ans\ndef max_sliding_window_v3(nums,k):\n    '''\n    Write a function to find the largest k numbers in an array.\n    '''\n    n = len(nums)\n    ans = []\n    for i in range(n-k+1):\n        ans.append(max(nums[i:i+k]))\n    ans = ans[::-1]\n    return ans\ndef min_sliding_window_v3(nums,k):\n    '''\n    Write a function to find the largest k numbers in an array.\n    '''\n    n = len(nums)\n    ans = []\n    for i in range(n-k+1):\n        ans.append(min(nums[i:i+k]))\n    ans = ans[::-1]\n    return ans\ndef find_max_sliding_window_v3(nums,k):\n    '''\n    Write a function to find the largest k numbers in an array.\n    '''\n    n = len(nums)\n    ans = []\n    for i in rang",
        "num_ids": 21
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    for i in range(n,len(nums)):\n        hq.heappushpop(heap,nums[i])\n    for i in range(n):\n        print(hq.heappop(heap))\n    return\n",
        "num_ids": 93
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    print \"largest: \"\n    #nums.sort(reverse=True)\n    if n > len(nums):\n        n = len(nums)\n    return heapq.nlargest(n,nums)\n",
        "num_ids": 54
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return [hq.heappop(nums) for i in range(n)]\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    return [hq.heappop(nums) for i in range(n)]\ndef heap_extract_min(nums):\n    '''\n    Write a function to remove the minimum item from a heap, and return the removed item.\n    '''\n    return hq.heappop(nums)\ndef heap_increase_key(nums,i,val):\n    '''\n    Write a function to increase the value of a key in a given heap by an amount.\n    '''\n    hq.heapify(nums)\n    nums[i] = val\n    while i > 0 and nums[(i-1)//2] > nums[i]:\n        nums[(i-1)//2],nums[i] = nums[i],nums[(i-1)//2]\n        i = (i-1)//2\ndef heap_decrease_key(nums,i,val):\n    '''\n    Write a function to decrease the value of a key in a given heap by an amount.\n    '''\n    hq.heapify(nums)\n    nums[i] = val\n    while i > 0 and nums[(i-1)//2] < nums[i]:\n        nums[(i-1)//2],nums[i] = nums[i],nums[(i-1)//2]\n        i = (i-1)//2\ndef heap_insert(nums,val):\n    '''\n    Write a function to insert a given value in the heap.\n    '''\n    hq.heapify(nums)\n    hq.heappush(nums,val)\ndef heap_delete(nums,i):\n    '''\n    Write a function to delete a given item from the heap.\n    '''\n    hq.heapify(nums)\n    hq.heappop(nums)\n    nums[i] = hq.heappop(nums)\ndef heap_build_max_heap(nums):\n    '''\n    Write a function to build a heap from an array of integers such that the largest integer is at the root.\n    '''\n    hq.heapify(nums)\n    for i in range(len(nums)-1,-1,-1):\n        hq.heappush(nums,hq.heappop(nums))\ndef heap_sort(nums):\n    '''\n    Write a function to sort a list of integers by using the heap data structure.\n    '''\n    hq.heapify(nums)\n    return [hq.heappop(nums) for i in range(len(nums))]\ndef heap_sort_reverse(nums):\n    '''\n    Write a function to sort a list of integers by using the heap data structure in descending order.\n    '''\n    hq.heapify(nums)\n    return [hq.heappop(nums) for i in range(len(nums))][::-1]\ndef heap_sort_d(nums):\n    '''\n    Write a function to sort a list of integers by using the heap data structure in descending order.\n    '''\n    hq.heapify(nums)\n    return [hq.heappop(nums) for i in range(len(nums))][::-1]\ndef min_search(nums,i,j):\n    '''\n    Write a function to find the minimum value in a given sub-array of integers.\n    '''\n    if i > j:\n        return\n    m = (i+j)//2\n    if nums[i] > nums[m] and nums[m] > nums[j]:\n        return min_search(nums,i,m-1)\n    elif nums[i] < nums[m] and nums[m] < nums[j]:\n        return min_search(nums,m+1,j)\n    else:\n        return nums[m]\ndef min_search_d(nums,i,j):\n    '''\n    Write a function to find the minimum value in a given sub-array of integers.\n    '''\n    if i > j:\n        return\n    m = (i+j)//2\n    if nums[i] > nums[m] and nums[m] > nums[j]:\n        return min_search_d(nums,i,m-1)\n    elif nums[i] < nums[m] and nums[m] < nums[j]:\n        return min_search_d(nums,m+1,j)\n    else:\n        return nums[m]\ndef max_search(nums,i,j):\n    '''\n    Write a function to find the maximum value in a given sub-array of integers.\n    '''\n    if i > j:\n        return\n    m = (i+j)//2\n    if nums[i] > nums[m] and nums[m] > nums[j]:\n        return max_search(nums,i,m-1)\n    elif nums[i] < nums[m] and nums[m] < nums[j]:\n        return max_search(nums,m+1,j)\n    else:\n        return nums[m]\ndef max_search_d(nums,i,j):\n    '''\n    Write a function to find the maximum value in a given sub-array of integers.\n    '''\n    if i > j:\n        return\n    m = (i+j)//2\n    if nums[i] > nums[m] and nums[m] > nums[j]:\n        return max_search_d(nums,i,m-1)\n    elif nums[i] < nums[m] and nums[m] < nums[j]:\n        return max_search_d(nums,m+1,j)\n    else:\n        return nums[m]\ndef min_heap_insert(nums,val):\n    '''\n    Write a function to insert a given value in the heap.\n    '''\n    hq.heapify(nums)\n    hq.heappush(nums,val)\ndef max_heap_insert(nums,val):\n    '''\n    Write a function to insert a given value in the heap.\n    '''\n    hq.heapify(nums)\n    hq.heappush(nums,-val)\ndef heap_extract_max(nums):\n    '''\n    Write a function to remove the maximum item from a heap, and return the removed item.\n    '''\n    return hq.heappop(nums)\ndef heap_increase_key(nums,i,val):\n    '''\n    Write a function to increase the value of a key in a given heap by an amount.\n    '''\n    hq.heapify(nums)\n    nums[i] = val\n    while i > 0 and nums[(i-1)//2] > nums[i]:\n        nums[(i-1)//2],nums[i] = nums[i],nums[(i-1)//2]\n        i = (i-1)//2\ndef heap_decrease_key(nums,i,val):\n    '''\n    Write a function to decrease the value of a key in a given heap by an amount.\n    '''\n    hq.heapify(nums)\n    nums[i] = val\n    while i > 0 and nums[(i-1)//2] < nums[i]:\n        nums[(i-1)//2],nums[i] = nums[i],nums[(i-1)//2]\n        i = (i-1)//2\ndef max_h",
        "num_ids": 97
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums:\n        return []\n    heap=[]\n    for num in nums:\n        hq.heappush(heap,num)\n    return [hq.heappop() for i in range(n)]\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if not nums:\n        return []\n    heap=[]\n    for num in nums:\n        hq.heappush(heap,num)\n    return [hq.heappop() for i in range(n)]\ndef heap_sort(nums):\n    if not nums:\n        return []\n    heap=[]\n    for num in nums:\n        hq.heappush(heap,num)\n    return [hq.heappop() for i in range(len(nums))]\ndef heap_sort_desc(nums):\n    if not nums:\n        return []\n    heap=[]\n    for num in nums:\n        hq.heappush(heap,-num)\n    return [hq.heappop() for i in range(len(nums))]\ndef min_heap_sort(nums):\n    if not nums:\n        return []\n    heap=[]\n    for num in nums:\n        hq.heappush(heap,num)\n    return [hq.heappop() for i in range(len(nums))]\ndef max_heap_sort(nums):\n    if not nums:\n        return []\n    heap=[]\n    for num in nums:\n        hq.heappush(heap,-num)\n    return [hq.heappop() for i in range(len(nums))]\ndef max_heap_sort_desc(nums):\n    if not nums:\n        return []\n    heap=[]\n    for num in nums:\n        hq.heappush(heap,-num)\n    return [hq.heappop() for i in range(len(nums))]\ndef k_largest(nums,k):\n    '''\n    Write a function to find the k largest integers from a given list of numbers, returned in ascending order.\n    '''\n    if not nums:\n        return []\n    heap=[]\n    for num in nums:\n        hq.heappush(heap,num)\n        if len(heap)>=k:\n            hq.heappop(heap)\n    return heap\ndef k_smallest(nums,k):\n    '''\n    Write a function to find the k smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if not nums:\n        return []\n    heap=[]\n    for num in nums:\n        hq.heappush(heap,num)\n        if len(heap)>=k:\n            hq.heappop(heap)\n    return heap\ndef find_median(nums):\n    if not nums:\n        return 0\n    heap=[]\n    for num in nums:\n        hq.heappush(heap,num)\n    mid_point=len(heap)//2\n    if len(heap)%2==1:\n        return hq.heappop(heap)\n    else:\n        return (hq.heappop(heap)+hq.heappop(heap))/2.0\ndef find_median_2(nums):\n    '''\n    Write a function to find the median of a list of numbers.\n    '''\n    if not nums:\n        return 0\n    heap=[]\n    for num in nums:\n        hq.heappush(heap,num)\n    mid_point=len(heap)//2\n    if len(heap)%2==1:\n        return heap[mid_point]\n    else:\n        return (heap[mid_point]+heap[mid_point-1])/2.0\ndef find_median_3(nums):\n    '''\n    Write a function to find the median of a list of numbers.\n    '''\n    if not nums:\n        return 0\n    nums.sort()\n    mid_point=len(nums)//2\n    if len(nums)%2==1:\n        return nums[mid_point]\n    else:\n        return (nums[mid_point]+nums[mid_point-1])/2.0\ndef find_median_4(nums):\n    '''\n    Write a function to find the median of a list of numbers.\n    '''\n    if not nums:\n        return 0\n    mid_point=len(nums)//2\n    if len(nums)%2==1:\n        return sorted(nums)[mid_point]\n    else:\n        return (sorted(nums)[mid_point]+sorted(nums)[mid_point-1])/2.0\ndef find_median_5(nums):\n    '''\n    Write a function to find the median of a list of numbers.\n    '''\n    if not nums:\n        return 0\n    mid_point=len(nums)//2\n    if len(nums)%2==1:\n        return sorted(nums)[mid_point]\n    else:\n        return (sorted(nums)[mid_point]+sorted(nums)[mid_point-1])/2.0\ndef find_median_6(nums):\n    '''\n    Write a function to find the median of a list of numbers.\n    '''\n    if not nums:\n        return 0\n    mid_point=len(nums)//2\n    if len(nums)%2==1:\n        return sorted(nums)[mid_point]\n    else:\n        return (sorted(nums)[mid_point]+sorted(nums)[mid_point-1])/2.0\ndef find_median_7(nums):\n    '''\n    Write a function to find the median of a list of numbers.\n    '''\n    if not nums:\n        return 0\n    mid_point=len(nums)//2\n    if len(nums)%2==1:\n        return sorted(nums)[mid_point]\n    else:\n        return (sorted(nums)[mid_point]+sorted(nums)[mid_point-1])/2.0\ndef find_median_8(nums):\n    '''\n    Write a function to find the median of a list of numbers.\n    '''\n    if not nums:\n        return 0\n    mid_point=len(nums)//2\n    if len(nums)%2==1:\n        return sorted(nums)[mid_point]\n    else:\n        return (sorted(nums)[mid_point]+sorted(nums)[mid_point-1])/2.0\ndef find_median_9(nums):\n    '''\n    Write a function to find the median of a list of numbers.\n    '''\n    if not nums:\n        return 0\n    mid_point=len(nums)//2\n    if len(nums)%2==1:\n        return sorted(nums)[mid_point]\n    else:\n        return (sorted(nums)[mid_point]+sorted(nums)[mid_point-1])/2.0\ndef find_median_10(nums):\n    '''\n    Write a function to find the median of a list of numbers.\n    '''\n    if not nums:\n        return 0\n    mid_point=len(nums)//2\n    if len(nums)%2==1:\n        return sorted(nums)[mid_point]\n    else:\n        return (sorted(nums)[mid_point]+sorted(nums)[mid_point-1])/2.0\ndef find_median_11(nums):\n    '''\n    Write a function to find the median of a list of numbers.\n    '''\n    if not nums:\n        return 0\n    mid_point=len(nums",
        "num_ids": 22
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return [-heapq.heappop(nums) for i in range(n)]\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    return [heapq.heappop(nums) for i in range(n)]\ndef heap_extract_max(nums):\n    '''\n    Write a function to delete and return the max number from a given list of numbers.\n    '''\n    return heapq.heappop(nums)\ndef heap_max(nums):\n    '''\n    Write a function to find the max number from a given list of numbers.\n    '''\n    return -heapq.nlargest(1,nums)[0]\ndef heap_min(nums):\n    '''\n    Write a function to find the min number from a given list of numbers.\n    '''\n    return heapq.nsmallest(1,nums)[0]\ndef heap_push(nums,n):\n    '''\n    Write a function to insert a number into the max heap.\n    '''\n    return heapq.heappush(nums,n)\ndef heap_pop(nums):\n    '''\n    Write a function to remove and return the max number from the max heap.\n    '''\n    return heapq.heappop(nums)\ndef heapsort(nums):\n    '''\n    Write a function to sort a list of numbers using the max heap.\n    '''\n    return heapq.nlargest(len(nums),nums)\ndef heapsort_reverse(nums):\n    '''\n    Write a function to sort a list of numbers using the min heap.\n    '''\n    return heapq.nsmallest(len(nums),nums)\ndef max_heapify(nums,i):\n    '''\n    Write a function to rearrange a given list of numbers to form a max heap.\n    '''\n    l=2*i+1\n    r=2*i+2\n    m=i\n    if l<=len(nums)-1 and nums[l]>nums[m]:\n        m=l\n    if r<=len(nums)-1 and nums[r]>nums[m]:\n        m=r\n    if m!=i:\n        nums[i],nums[m]=nums[m],nums[i]\n        max_heapify(nums,m)\ndef min_heapify(nums,i):\n    '''\n    Write a function to rearrange a given list of numbers to form a min heap.\n    '''\n    l=2*i+1\n    r=2*i+2\n    m=i\n    if l<=len(nums)-1 and nums[l]<nums[m]:\n        m=l\n    if r<=len(nums)-1 and nums[r]<nums[m]:\n        m=r\n    if m!=i:\n        nums[i],nums[m]=nums[m],nums[i]\n        min_heapify(nums,m)\ndef heapsort_ascending(nums):\n    '''\n    Write a function to sort a list of numbers using the max heap in ascending order.\n    '''\n    return heapq.nlargest(len(nums),nums)\ndef heapsort_descending(nums):\n    '''\n    Write a function to sort a list of numbers using the max heap in descending order.\n    '''\n    return heapq.nsmallest(len(nums),nums)\ndef merge_sort(nums):\n    '''\n    Write a function to sort a list of numbers using the merge sort algorithm.\n    '''\n    if len(nums)<=1:\n        return nums\n    else:\n        n=len(nums)//2\n        left=merge_sort(nums[:n])\n        right=merge_sort(nums[n:])\n        return merge(left,right)\ndef merge(left,right):\n    i,j=0,0\n    res=[]\n    while i<len(left) and j<len(right):\n        if left[i]<right[j]:\n            res.append(left[i])\n            i+=1\n        else:\n            res.append(right[j])\n            j+=1\n    if i<len(left):\n        res+=left[i:]\n    if j<len(right):\n        res+=right[j:]\n    return res\ndef radix_sort(nums):\n    '''\n    Write a function to sort a list of numbers using the radix sort algorithm.\n    '''\n    def get_digit(num,i):\n        return (num%(10**i)//(10**(i-1)))\n    def sort_helper(nums,base,i):\n        if i==0:\n            return nums\n        else:\n            temp=[]\n            for num in nums:\n                temp.append(get_digit(num,i))\n            buckets=[[] for i in range(base)]\n            for num in temp:\n                buckets[num].append(num)\n            res=[]\n            for bucket in buckets:\n                res+=sort_helper(bucket,base,i-1)\n            return res\n    res=sort_helper(nums,10,len(str(max(nums))))\n    return res\ndef bucket_sort(nums):\n    '''\n    Write a function to sort a list of numbers using the bucket sort algorithm.\n    '''\n    def get_digit(num,i):\n        return (num%(10**i)//(10**(i-1)))\n    def sort_helper(nums,base,i):\n        if i==0:\n            return nums\n        else:\n            temp=[]\n            for num in nums:\n                temp.append(get_digit(num,i))\n            buckets=[[] for i in range(base)]\n            for num in temp:\n                buckets[num].append(num)\n            res=[]\n            for bucket in buckets:\n                res+=sort_helper(bucket,base,i-1)\n            return res\n    res=sort_helper(nums,10,len(str(max(nums))))\n    return res\ndef insertion_sort(nums):\n    '''\n    Write a function to sort a list of numbers using the insertion sort algorithm.\n    '''\n    for i in range(1,len(nums)):\n        key=nums[i]\n        j=i-1\n        while j>=0 and nums[j]>key:\n            nums[j+1]=nums[j]\n            j-=1\n        nums[j+1]=key\n    return nums\ndef cocktail_sort(nums):\n    '''\n    Write a function to sort a list of numbers using the cocktail sort algorithm.\n    '''\n    def exchange(nums,i,j):\n        temp=nums[i]\n        nums[i]=nums[j]\n        nums[j]=temp\n    def is_sorted(nums):\n        for i in range(1,len(nums)):\n            if nums[i]<nums[i-1]:\n                return False\n        return True\n    def sort_helper(nums,i,j):\n        if i==j:\n            return\n        else:\n            k=i\n            while k<j:\n                if nums[k]<nums[k+1]:\n                    exchange(nums,k,k+1)\n                    k+=1\n                else:\n                    break\n            sort_helper(nums,i,k)\n            sort_helper(nums,k+1,j)\n    sort_helper(nums,0,len(nums)-1)\n    return nums\ndef quick_sort(nums):\n    '''\n    Write a function to sort a list of numbers using the quick sort algorithm.\n    '''\n    def sort_helper(nums,i,j):\n        if i==j:\n            return\n        else:\n            p=i\n            q=j\n            whil",
        "num_ids": 44
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    res=[]\n    for i in range(n):\n        res.append(hq.heappop(nums))\n    return res\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    res=[]\n    for i in range(n):\n        res.append(hq.heappop(nums))\n    return res\nclass Solution:\n    def kthSmallest(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        m=len(matrix)\n        n=len(matrix[0])\n        res=[]\n        for i in range(m):\n            heap_queue_largest(matrix[i],k)\n        for i in range(m):\n            res.append(heap_queue_largest(matrix[i],k)[k-1])\n        return res",
        "num_ids": 184
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return False\n    if x == 1: \n        return False\n    if x & (x - 1) == 0: \n        return True\n    else: \n        return False\n",
        "num_ids": 53
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x - 1) == 0\n",
        "num_ids": 14
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    return ((x & (x - 1)) == 0) and (x!= 0)\n    \n    \n    \ndef print_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1937
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0\ndef is_Power_Of_Two_Without_Sqrt (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 1:\n        return True\n    if x == 0:\n        return False\n    while x!= 1:\n        if x & 1 == 1:\n            return False\n        x >>= 1\n    return True\ndef is_Power_Of_Two_without_log (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 1:\n        return True\n    if x == 0:\n        return False\n    if x & 1 == 1:\n        return False\n    while x!= 1:\n        if x & 1 == 1:\n            return False\n        x >>= 1\n    return True\ndef isPowerOfTwo(n):\n    '''\n    given an integer n, return True if it is a power of 2, otherwise return False\n    '''\n    if n == 0:\n        return False\n    while n!= 1:\n        if n & 1 == 1:\n            return False\n        n >>= 1\n    return True\ndef isPowerOfTwo1(n):\n    '''\n    given an integer n, return True if it is a power of 2, otherwise return False\n    '''\n    if n == 0:\n        return False\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False\ndef isPowerOfTwo2(n):\n    '''\n    given an integer n, return True if it is a power of 2, otherwise return False\n    '''\n    if n == 0:\n        return False\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False\ndef isPowerOfTwo3(n):\n    '''\n    given an integer n, return True if it is a power of 2, otherwise return False\n    '''\n    if n == 0:\n        return False\n    else:\n        return n & (n-1) == 0\ndef isPowerOfTwo4(n):\n    '''\n    given an integer n, return True if it is a power of 2, otherwise return False\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return n & (n-1) == 0\ndef isPowerOfTwo5(n):\n    '''\n    given an integer n, return True if it is a power of 2, otherwise return False\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return n & (n-1) == 0\ndef isPowerOfTwo6(n):\n    '''\n    given an integer n, return True if it is a power of 2, otherwise return False\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return n & (n-1) == 0\ndef isPowerOfTwo7(n):\n    '''\n    given an integer n, return True if it is a power of 2, otherwise return False\n    '''\n    if n == 0:\n        return False\n    else:\n        return n & (n-1) == 0\ndef isPowerOfTwo8(n):\n    '''\n    given an integer n, return True if it is a power of 2, otherwise return False\n    '''\n    if n == 0:\n        return False\n    else:\n        return n & (n-1) == 0\ndef isPowerOfTwo9(n):\n    '''\n    given an integer n, return True if it is a power of 2, otherwise return False\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return n & (n-1) == 0\ndef isPowerOfTwo10(n):\n    '''\n    given an integer n, return True if it is a power of 2, otherwise return False\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return n & (n-1) == 0\ndef isPowerOfTwo11(n):\n    '''\n    given an integer n, return True if it is a power of 2, otherwise return False\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return n & (n-1) == 0\ndef isPowerOfTwo12(n):\n    '''\n    given an integer n, return True if it is a power of 2, otherwise return False\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return n & (n-1) == 0\ndef isPowerOfTwo13(n):\n    '''\n    given an integer n, return True if it is a power of 2, otherwise return False\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return n & (n-1) == 0\ndef isPowerOfTwo14(n):\n    '''\n    given an integer n, return True if it is a power of 2, otherwise return False\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return n & (n-1) == 0\ndef isPowerOfTwo15(n):\n    '''\n    given an integer n, return True if it is a power of 2, otherwise return False\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return n & (n-1) == 0\ndef isPowerOfTwo16(n):\n    '''\n    given an integer n, return True if it is a power of 2, otherwise return False\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return n & (n-1) == 0\ndef isPowerOfTwo17(n):\n    '''\n    given an integer n, return True if it is a power of 2, otherwise return False\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return n & (n-1) == 0\ndef isPowerOfTwo18(n):\n    '''\n    given an integer n, return True if it is a power of 2, otherwise return False\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return n & (n-1) == 0\ndef isPowerOfTwo19(n):\n    '''\n    given an integer n, return True if it is a power of 2, otherwise return False\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return n & (n-1) == 0\ndef isPowerOfTwo20(n):\n    '''\n    given an integer n, return True if it is a power of 2, otherwise return False\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return n & (n-1) == 0\ndef isPowerOfTwo21(n):\n    '''\n    given an integer n, return True if it is a power of 2, otherwise return False\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return n & (n-1) == 0\ndef isPowerOfTwo22(n):\n    '''\n    given an integer n, return True if it is a power of 2, otherwise return False\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return n & (n-1) == 0\ndef isPowerOfTwo23(n):\n    '''\n    given an integer n, return True if it is a power of 2, otherwise return False\n    '''\n    if n == 0:\n        return False\n    elif n =",
        "num_ids": 18
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x - 1) == 0\n",
        "num_ids": 14
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # function starts here\n    a = x\n    b = x\n    return (a & (a-1)) == 0 and (b & (b-1))!= 0\n",
        "num_ids": 45
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x-1) == 0\n",
        "num_ids": 14
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 1:\n        return False\n    elif x == 2:\n        return True\n    elif x > 2:\n        if x%2 == 1:\n            return True\n        else:\n            return False\n    else:\n        print(\"You have entered a negative number, which is not allowed\")\n",
        "num_ids": 74
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x > 0:\n        if (x & (x - 1)) == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 43
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text)<4:\n        return False\n    else:\n        return True\n",
        "num_ids": 24
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # n_words = [word for word in text.split() if len(word) >= 4]\n    # print(n_words)\n    # return n_words\n    return [word for word in text.split() if len(word) >= 4]\n",
        "num_ids": 62
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}', text)\n",
        "num_ids": 21
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile('\\w{4,}')\n    return pattern.findall(text)\n",
        "num_ids": 28
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    m = re.findall(r'\\w{4,}',text)\n    return m\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall",
        "num_ids": 8
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall('[a-z]+',text)\n    return result\n",
        "num_ids": 23
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    find_words = re.findall('\\w{4,}', text)\n    return find_words\n",
        "num_ids": 28
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    output = []\n    for word in text.split(' '):\n        if len(word) >= 4:\n            output.append(word)\n    return output\n",
        "num_ids": 40
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return [x for x in text.split() if len(x)>4]\n",
        "num_ids": 22
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    regex = re.compile('\\w{4,}')\n    return regex.findall(text)\n",
        "num_ids": 29
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    sq = []\n    for i in nums:\n        sq.append(i * i)\n    return sq\n",
        "num_ids": 29
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** 2\n",
        "num_ids": 30
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = [num**2 for num in nums]\n    return squares\n",
        "num_ids": 21
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares\n",
        "num_ids": 31
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for x in nums:\n        squares.append(x * x)\n    return squares\n",
        "num_ids": 31
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i**2)\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares\n",
        "num_ids": 31
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**2\n    return nums\n",
        "num_ids": 35
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return str[-1:] + str + find_Rotations(str[:-1]) if str else ''\n",
        "num_ids": 27
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str) \n    temp = str + str\n    for i in range(n): \n        if (temp[i:] == temp[i:n]): \n            return i \n    return 0\ndef find_Rotations_recursive(str):\n    n = len(str)\n    if (str == str[n:len(str)]):\n        return 0\n    else:\n        return 1 + find_Rotations_recursive(str[1:])\n",
        "num_ids": 115
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    if (str == ''):\n        return 0\n    n = len(str)\n    for i in range(n):\n        if (str[i:] == str[i:][::-1]):\n            return (n - i)\n    return 0\n",
        "num_ids": 64
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    def find_Rotations_rec(str, start, end):\n        if start == end:\n            return 0\n        else:\n            if str[start] == str[end]:\n                return 1 + find_Rotations_rec(str, start+1, end-1)\n            else:\n                return max(find_Rotations_rec(str, start, end-1), find_Rotations_rec(str, start+1, end))\n",
        "num_ids": 108
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str_len = len(str)\n    rotations = 0\n    for i in range(str_len,1,-1):\n        if str[:i] == str[-i:]:\n            rotations+=1\n            str = str[i:]\n            break\n    return rotations\n",
        "num_ids": 70
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str1 = str[1:] + str[0]\n    if str == str1:\n        return 0\n    elif str1 == str:\n        return 1\n    else:\n        return 2 + find_Rotations(str1)\n",
        "num_ids": 58
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    if n == 0:\n        return -1\n    if n == 1:\n        return 0\n    start = 0\n    end = n-1\n    while start<=end:\n        if str[start] == str[end]:\n            start+=1\n            end-=1\n        else:\n            break\n    if start>end:\n        return 0\n    else:\n        return (end-start)\n",
        "num_ids": 106
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    l = list(str)\n    r = list(str)\n    r.reverse()\n    for i in range(1,n):\n        if l[:i] == r[-i:]:\n            return i\n    return 0\n",
        "num_ids": 66
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def find_Rotations(str): \n        '''\n        Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n        '''\n        def find_Rotations(str): \n            '''\n            Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n            '''\n            if len(str) <= 1: \n                return 0\n            if len(str) == 2: \n                if str[0]!= str[1]: \n                    return 1\n                else: \n                    return 0\n            if len(str) == 3: \n                if str[0]!= str[2]: \n                    return 1\n                else: \n                    if str[1]!= str[0]: \n                        return 2\n                    else: \n                        return 0\n            for i in range(len(str)): \n                if str[i]!= str[0]: \n                    return 1\n            return 0\n        return find_Rotations(str)\n    print find_Rotations('abc')\n    print find_Rotations('aba')\n    print find_Rotations('a')\n    print find_Rotations('aab')\n    print find_Rotations('aabb')\n    print find_Rotations('aabbb')\n    print find_Rotations('abaab')\n    print find_Rotations('abcabc')\n    print find_Rotations('abcabcabab')\n    print find_Rotations('abcabcabcabc')\n    print find_Rotations('abcabcabcabcab')\n    print find_Rotations('abcabcabcabcabc')\n    print find_Rotations('abcabcabcabcabcabc')\n    print find_Rotations('aabbbccc')\n    print find_Rotations('bbcabcd')\n    print find_Rotations('aaaaa')\n    print find_Rotations('aaaaab')\n    print find_Rotations('aabaa')\n    print find_Rotations('abbbab')\n    print find_Rotations('bbbab')\n    print find_Rotations('abbbba')\n    print find_Rotations('abba')\n    print find_Rotations('bbbba')\n    print find_Rotations('abbbba')\n    print find_Rotations('baba')\n    print find_Rotations('bbabb')\n    print find_Rotations('bababa')\n    print find_Rotations('abbabb')\n    print find_Rotations('bbaaa')\n    print find_Rotations('bbabbb')\n    print find_Rotations('bbaaba')\n    print find_Rotations('baaaaa')\n    print find_Rotations('baaaaab')\n    print find_Rotations('baababb')\n    print find_Rotations('bbbaab')\n    print find_Rotations('bbbaaba')\n    print find_Rotations('baabaa')\n    print find_Rotations('babaab')\n    print find_Rotations('bababb')\n    print find_Rotations('baabbb')\n    print find_Rotations('babaa')\n    print find_Rotations('bbaaba')\n    print find_Rotations('bbaaba')\n    print find_Rotations('bbbbaa')\n    print find_Rotations('ababa')\n    print find_Rotations('ababa')\n    print find_Rotations('ababab')\n    print find_Rotations('abababab')\n    print find_Rotations('ababababab')\n    print find_Rotations('abababababab')\n    print find_Rotations('abbbb')\n    print find_Rotations('abababababababa')\n    print find_Rotations('abbbbbbbbbbbbbbaaabaaaaababbbbbbbbbbaaabab')\n    print find_Rotations('abbbbbbbbbbbbbbaaabaaaaabababababab')\n    print find_Rotations('abbbbbbbbbbbbbbaaabaaaaababbbbbbbbbbaaabab')\n    print find_Rotations('abbbbbbbbbbbbbbaaabaaaaabababababab')\n    print find_Rotations('abbbbbbbbbbbbbbaaabaaaaabababababab')\n    print find_Rotations('abbbbbbbbbbbbbbaaabaaaaabababababab')\n    print find_Rotations('aaaaaaaaaaaaaaaaaaaaaab')\n    print find_Rotations('aaaaaaaaaaaaaaaaaaaaaaaba')\n    print find_Rotations('aaaaaaaaaaaaaaaaaaaaaaabab')\n    print find_Rotations('aaaaaaaaaaaaaaaaaaaaaaababa')\n    print find_Rotations('aaaaaaaaaaaaaaaaaaaaaaababbbaaab')\n    print find_Rotations('aaaaaaaaaaaaaaaaaaaaaaabababbbbbaaabbbbbbbbbbbbaaababa')\n    print find_Rotations('aaaaaaaaaaaaaaaaaaaaaaabababbbbbbaaabbbbbbbbbbbbaaababbbbaaaab')\n    print find_Rotations('aaaaaaaaaaaaaaaaaaaaaaabababbbbbbaaabbbbbbbbbbbbaaababbbbaaaaa')\n    print find_Rotations('aaaaaaaaaaaaaaaaaaaaaaabababbbbbbaaabbbbbbbbbbbbaaababbbbaaaaaaa')\n    print find_Rotations('aaaaaaaaaaaaaaaaaaaaaaabababbbbbbaaabbbbbbbbbbbbaaababbbbaaaaaaa')\n    print find_Rotations('aaaaaaaaaaaaaaaaaaaaaaabababbbbbbaaabbbbbbbbbbbbaaababbbbaaaaaaa')\n    print find_Rotations('aaaaaaaaaaaaaaaaaaaaaaabababbbbbbaaabbbbbbbbbbbbaaababbbbaaaaaaa')\n    print find_Rotations('aaaaaaaaaaaaaaaaaaaaaaabababbbbbbbaaabbbbbbbbbbbbaaababbbbaaaaaaa')\n    print find_Rotations('aaaaaaaaaaaaaaaaaaaaaaabababbbbbbbaaabbbbbbbbbbbbaaababbbbaaaaaaa')\n    print find_Rotations('aaaaaaaaaaaaaaaaaaaaaaabababbbbbbbaaabbbbbbbbbbbbaaababbbbaaaaaaa')\n    print find_Rotations('aaaaaaaaaaaaaaaaaaaaaaabababbbbbbbaaabbbbbbbbbbbbaaababbbbaaaaaaa')\n    print find_Rotations('aaaaaaaaaaaaaaaaaaaaaaabababbbbbbbaaabbbbbbbbbbbbaaababbbbaaaaaaa')\n    print find_Rotations('aaaaaaaaaaaaaaaaaaaaaaabababbbbbbbaaabbbbbbbbbbbbaaababbbbaaaaaaa')\n    print find_Rotations('aaaaaaaaaaaaaaaaaaaaaaabababbbbbbbaaabbbbbbbbbbbbaaababbbbaaaaaaa')\n    print find_Rotations('aaaaaaaaaaaaaaaaaaaaaaabababbbbbbbaaabbbbbbbbbbbbaaababbbbaaaaaaa')\n    print find_Rotations('aaaaaaaaaaaaaaaaaaaaaaabababbbbbbbaaabbbbbbbbbbbbaaababbbbaaaaaaa')\n    print find_Rotations('aaaaaaaaaaaaaaaaaaaaaaabababbbbbbbaaabbbbbbbbbbbbaaababbbbaaaaaaa')\n    print find_Rotations('aaaaaaaaaaaaaaaaaaaaaaabababbbbbbbaaabbbbbbbbbbbbaaababbbbaaaaaaa')\n    print find_Rotations('aaaaaaaaaaaaaaaaaaaaaaabababbbbbbbaaabbbbbbbbbbbbaaababbbbaaaaaaa')\n    print find_Rotations('aaaaaaaaaaaaaaaaaaaaaaabababbbbbbbaaabbbbbbbbbbbbaaababbbbaaaaaaa')\n    print find_Rotations('aaaaaaaaaaaaaaaaaaaaaaabababbbbbbbaaabbbbbbbbbbbbaaababbbbaaaaaaa')\n    print find_Rotations('aaaaaaaaaaaaaaaaaaaaaaabababbbbbbbaaabbbbbbbbbbbbaaababbbbaaaaaaa')\n    print find_Rotations('aaaaaaaaaaaaaaaaaaaaaaabababbbbbbbaaabbbbbbbbbbbbaaababbbbaaaaaaa')\n    print find_Rotations('aaaaaaaaaaaaaaaaaaaaaaabababbbbbbbaaabbbbbbbbbbbbaaababbbbaaaaaaa')\n    print find_Rotations('aaaaaaaaaaaaaaaaaaaaaaabababbbbbbbaaabbb",
        "num_ids": 1917
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    if (len(str) == 0):\n        return 0\n    if (len(str) == 1):\n        return 0\n    if (len(str) == 2):\n        if (str[0] == str[1]):\n            return 0\n        else:\n            return 1\n    s_len = len(str)\n    \n    for i in range(1,s_len):\n        j = i\n        if (str[0] == str[j]):\n            while(str[i] == str[0]):\n                j = j + 1\n                if (j == s_len):\n                    return 0\n            str = str[j:]\n            str = str + str[0:i]\n            return find_Rotations(str) + 1\n    return 0\n    \nprint find_Rotations(\"abcd\")\nprint find_Rotations(\"cabca\")\nprint find_Rotations(\"abcde\")\nprint find_Rotations(\"cabce\")\nprint find_Rotations(\"aabcde\")\nprint find_Rotations(\"aaaa\")\nprint find_Rotations(\"acac\")\nprint find_Rotations(\"acacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacacac_\")\nprint find_Rotations(\"cabce\")\nprint find_Rotations(\"abce\")\nprint find_Rotations(\"cabcde\")\nprint find_Rotations(\"cabcce\")\nprint find_Rotations(\"abcd\")\nprint find_Rotations(\"aabcde\")\nprint find_Rotations(\"aabcdea\")\nprint find_Rotations(\"abcde\")\nprint find_Rotations(\"cabcdea\")\nprint find_Rotations(\"abcdea\")\nprint find_Rotations(\"abcdef\")\nprint find_Rotations(\"abcdefa\")\nprint find_Rotations(\"abcdefa\")\nprint find_Rotations(\"abcdefb\")\nprint find_Rotations(\"abcdefc\")\nprint find_Rotations(\"abcdefd\")\nprint find_Rotations(\"abcdefe\")\nprint find_Rotations(\"abcdefgh\")\nprint find_Rotations(\"abcdefgj\")\nprint find_Rotations(\"abcdefgij\")\nprint find_Rotations(\"abcdefgjk\")\nprint find_Rotations(\"abcdefgijkl\")\nprint find_Rotations(\"abcdefgh\")\nprint find_Rotations(\"abcdefghij\")\nprint find_Rotations(\"abcdefghijkl\")\nprint find_Rotations(\"abcdefghijklm\")\nprint find_Rotations(\"abcdefghijklmnop\")\nprint find_Rotations(\"abcdefghijklmnopq\")\nprint find_Rotations(\"abcdefghijklmnopqr\")\nprint find_Rotations(\"abcdefghijklmnopqrs\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyz\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzq\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzuvwxyzq\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzuvwxyzuvwxyzqyz\")\nprint find_Rotations(\"abcdefghijklmnopqrstuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzuvwxyzu",
        "num_ids": 2004
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s1=s.split(ch)\n        s=''\n        for i in s1:\n            s=s+i\n    return s\n",
        "num_ids": 44
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s[0]==ch:\n        s=s[1:]\n    if s[-1]==ch:\n        s=s[:-1]\n    return s\n",
        "num_ids": 44
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1).replace(ch, '', 1)\n    \ndef isPallindrome(s): \n    '''\n    Write a python function to check if a string is a palindrome or not.\n    '''\n    if s==s[::-1]:\n        return True\n    else:\n        return False\n    \ndef isPalindrome_2(s): \n    '''\n    Write a python function to check if a string is a palindrome or not.\n    '''\n    if s==s[::-1]:\n        return True\n    else:\n        return False\n    \ndef isPalindrome_3(s): \n    '''\n    Write a python function to check if a string is a palindrome or not.\n    '''\n    rev = reverse(s)\n    if s == rev:\n        return True\n    else:\n        return False\n    \ndef reverse(s): \n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef removeDuplicate(s): \n    '''\n    Write a python function to remove duplicate characters from the string.\n    '''\n    d = {}\n    for ch in s:\n        if ch in d:\n            d[ch] += 1\n        else:\n            d[ch] = 1\n    return ''.join([ch for ch,count in d.iteritems() if count == 1])\n",
        "num_ids": 64
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\")\n",
        "num_ids": 13
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,\"\",1).replace(ch,\"\",1)\n    \ndef find_max(a,b): \n    '''\n    Write a python function to find the maximum number from two inputs\n    '''\n    return (a if a > b else b)\n    \ndef find_min(a,b): \n    '''\n    Write a python function to find the minimum number from two inputs\n    '''\n    return (a if a < b else b)\n    \ndef find_longest(s): \n    '''\n    Write a python function to find the longest word in the string\n    '''\n    longest = 0\n    words = s.split()\n    for word in words: \n        if len(word) > longest: \n            longest = len(word)\n    return longest\n    \ndef find_longest_word(s): \n    '''\n    Write a python function to find the longest word in the string\n    '''\n    longest = 0\n    words = s.split()\n    for word in words: \n        if len(word) > longest: \n            longest = len(word)\n    return longest\n    \ndef find_length(s): \n    '''\n    Write a python function to find the length of the string\n    '''\n    return len(s)\n    \ndef count_words(s): \n    '''\n    Write a python function to count the number of words in a string\n    '''\n    return len(s.split())\n    \ndef remove_punctuation(s): \n    '''\n    Write a python function to remove punctuation from a string\n    '''\n    return s.replace(\".\",\"\")\n    \ndef reverse_string(s): \n    '''\n    Write a python function to reverse the string\n    '''\n    return s[::-1]\n    \ndef change_all_to_upper(s): \n    '''\n    Write a python function to change all characters to upper case\n    '''\n    return s.upper()\n    \ndef change_all_to_lower(s): \n    '''\n    Write a python function to change all characters to lower case\n    '''\n    return s.lower()\n    \ndef change_all_to_capital(s): \n    '''\n    Write a python function to change all characters to upper case\n    '''\n    return s.capitalize()\n    \ndef count_vowels(s): \n    '''\n    Write a python function to count the number of vowels in a string\n    '''\n    return sum(1 for c in s if c in 'aeiou')\n    \ndef count_consonants(s): \n    '''\n    Write a python function to count the number of consonants in a string\n    '''\n    return sum(1 for c in s if c in 'bcdfghjklmnpqrstvwxyz')\n    \ndef count_letters(s): \n    '''\n    Write a python function to count the number of letters in a string\n    '''\n    return len(s)\n    \ndef count_digits(s): \n    '''\n    Write a python function to count the number of digits in a string\n    '''\n    return sum(c.isdigit() for c in s)\n    \ndef count_lower_case(s): \n    '''\n    Write a python function to count the number of lower case characters in a string\n    '''\n    return sum(c.islower() for c in s)\n    \ndef count_upper_case(s): \n    '''\n    Write a python function to count the number of upper case characters in a string\n    '''\n    return sum(c.isupper() for c in s)\n    \ndef count_alphanumeric(s): \n    '''\n    Write a python function to count the number of alphanumeric characters in a string\n    '''\n    return sum(c.isalnum() for c in s)\n    \ndef count_spaces(s): \n    '''\n    Write a python function to count the number of spaces in a string\n    '''\n    return sum(1 for c in s if c =='')\n    \ndef count_punctuation(s): \n    '''\n    Write a python function to count the number of punctuation characters in a string\n    '''\n    return sum(1 for c in s if c in '.,;:!?()[]/\\n')\n    \ndef count_uppercase(s): \n    '''\n    Write a python function to count the number of uppercase characters in a string\n    '''\n    return sum(1 for c in s if c.isupper())\n    \ndef count_lowercase(s): \n    '''\n    Write a python function to count the number of lowercase characters in a string\n    '''\n    return sum(1 for c in s if c.islower())\n    \ndef count_spaces(s): \n    '''\n    Write a python function to count the number of spaces in a string\n    '''\n    return sum(1 for c in s if c =='')\n    \ndef count_punctuation(s): \n    '''\n    Write a python function to count the number of punctuation characters in a string\n    '''\n    return sum(1 for c in s if c in '.,;:!?()[]/\\n')\n    \ndef count_spaces(s): \n    '''\n    Write a python function to count the number of spaces in a string\n    '''\n    return sum(1 for c in s if c =='')\n    \ndef count_punctuation(s): \n    '''\n    Write a python function to count the number of punctuation characters in a string\n    '''\n    return sum(1 for c in s if c in '.,;:!?()[]/\\n')\n    \ndef count_letters(s): \n    '''\n    Write a python function to count the number of letters in a string\n    '''\n    return len(s)\n    \ndef count_numbers(s): \n    '''\n    Write a python function to count the number of numbers in a string\n    '''\n    return sum(c.isdigit() for c in s)\n    \ndef count_lower_case(s): \n    '''\n    Write a python function to count the number of lower case characters in a string\n    '''\n    return sum(c.islower() for c in s)\n    \ndef count_upper_case(s): \n    '''\n    Write a python function to count the number of upper case characters in a string\n    '''\n    return sum(c.isupper() for c in s)\n    \ndef count_alphanumeric(s): \n    '''\n    Write a python function to count the number of alphanumeric characters in a string\n    '''\n    return sum(c.isalnum() for c in s)\n    \ndef count_spaces(s): \n    '''\n    Write a python function to count the number of spaces in a string\n    '''\n    return sum(1 for c in s if c =='')\n    \ndef count_punctuation(s): \n    '''\n    Write a python function to count the number of punctuation characters in a string\n    '''\n    return sum(1 for c in s if c in '.,;:!?()[]/\\n')\n    \ndef find_first_occurrence(s, ch): \n    '''\n    Write a python function to find the first occurrence of a given character in a string\n    '''\n    return s.find(ch)\n    \ndef find_last_occurrence(s, ch): \n    '''\n    Write a python function to find the last occurrence of a given character in a string\n    '''\n    return s.rfind(ch)\n    \ndef count_occurrences(s, ch): \n    '''\n    Write a python function to count the number of times a character occurs in a string\n    '''\n    return s.count(ch)\n    \ndef substring(s, start, end): \n    '''\n    Write a python function to find a substring from a string\n    '''\n    return s[start:end]\n    \ndef reverse(s): \n    '''\n    Write a python function to reverse a string\n    '''\n    return s[::-1]\n    \ndef reverse_each_word(s): \n    '''\n    Write a python functio",
        "num_ids": 9
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i=s.find(ch)\n    j=s.rfind(ch)\n    return s[:i]+s[j+1:]\n",
        "num_ids": 37
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s[s.index(ch):len(s)]\n        s = s[0:s.index(ch)]\n    return s\n",
        "num_ids": 43
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    \n    return s.replace(ch, '', 1).replace(ch, '', 1)\n",
        "num_ids": 25
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '',1).replace(ch,'',1) \ndef Occur(s): \n    '''\n    Write a python function to find the first and last occurrence of a given character in the given string.\n    '''\n    count=0\n    for i in range(len(s)):\n        if s[i] == 'o' and count==0:\n            first_occ=i\n            count+=1\n        elif s[i] == 'o' and count>0:\n            last_occ=i\n    return first_occ,last_occ\ndef reverse_string(s): \n    '''\n    Write a python function to reverse the string.\n    '''\n    return s[::-1]\ndef reverse_chars(s): \n    '''\n    Write a python function to reverse the characters of a given string.\n    '''\n    rev_str=\"\"\n    for i in s:\n        rev_str=i+rev_str\n    return rev_str\ndef reverse_words(s): \n    '''\n    Write a python function to reverse the words of a given string.\n    '''\n    s=s.split()\n    s.reverse()\n    return''.join(s)\ndef rev_sentence(s): \n    '''\n    Write a python function to reverse the words of a given string.\n    '''\n    s=s.split()\n    s.reverse()\n    return''.join(s)\ndef is_palindrome(s): \n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    rev_str=reverse_words(s)\n    if rev_str == s:\n        return True\n    else:\n        return False\ndef is_anagram(s1,s2): \n    '''\n    Write a python function to check whether a given string is anagram of another or not.\n    '''\n    s1=sorted(s1)\n    s2=sorted(s2)\n    if s1 == s2:\n        return True\n    else:\n        return False\ndef longest_string(s): \n    '''\n    Write a python function to find the longest string in the given string.\n    '''\n    return max(s.split(),key=len)\ndef check_palindrome(s): \n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    rev_str=reverse_words(s)\n    if rev_str == s:\n        return True\n    else:\n        return False\ndef is_pangram(s): \n    '''\n    Write a python function to check whether a given string is pangram or not.\n    '''\n    for i in range(26):\n        if chr(97+i) not in s:\n            return False\n    return True\ndef count_letters(s): \n    '''\n    Write a python function to count the letters of a given string.\n    '''\n    return len(s)\ndef count_digits(s): \n    '''\n    Write a python function to count the digits of a given string.\n    '''\n    return len(s.replace(' ',''))\ndef find_consonants(s): \n    '''\n    Write a python function to find the consonants of a given string.\n    '''\n    s=s.lower()\n    vowels='aeiou'\n    consonants='bcdfghjklmnpqrstvwxz'\n    s=s.lower()\n    count=0\n    for i in s:\n        if i in vowels:\n            count+=1\n    return count\ndef count_vowels(s): \n    '''\n    Write a python function to count the vowels of a given string.\n    '''\n    s=s.lower()\n    vowels='aeiou'\n    count=0\n    for i in s:\n        if i in vowels:\n            count+=1\n    return count\ndef count_punctuation(s): \n    '''\n    Write a python function to count the punctuation of a given string.\n    '''\n    s=s.lower()\n    count=0\n    for i in s:\n        if i in ',.?!;:()-_':\n            count+=1\n    return count\ndef count_words(s): \n    '''\n    Write a python function to count the words of a given string.\n    '''\n    s=s.lower()\n    s=s.split()\n    return len(s)\ndef find_consonants(s): \n    '''\n    Write a python function to find the consonants of a given string.\n    '''\n    s=s.lower()\n    vowels='aeiou'\n    consonants='bcdfghjklmnpqrstvwxz'\n    s=s.lower()\n    count=0\n    for i in s:\n        if i in vowels:\n            count+=1\n    return count\ndef count_letters(s): \n    '''\n    Write a python function to count the letters of a given string.\n    '''\n    return len(s)\ndef find_letters(s): \n    '''\n    Write a python function to find the letters of a given string.\n    '''\n    s=s.lower()\n    return list(set(s))\ndef find_digit_count(s): \n    '''\n    Write a python function to count the digits of a given string.\n    '''\n    s=s.lower()\n    s=s.replace(' ','')\n    return len(s)\ndef count_digits(s): \n    '''\n    Write a python function to count the digits of a given string.\n    '''\n    return len(s.replace(' ',''))\ndef is_panagram(s): \n    '''\n    Write a python function to check whether a given string is panagram or not.\n    '''\n    s=s.lower()\n    s=s.replace(' ','')\n    return all(i in s for i in 'abcdefghijklmnopqrstuvwxyz')\ndef count_words(s): \n    '''\n    Write a python function to count the words of a given string.\n    '''\n    s=s.lower()\n    s=s.split()\n    return len(s)\ndef check_anagram(s1,s2): \n    '''\n    Write a python function to check whether two strings are anagram of each other or not.\n    '''\n    s1=sorted(s1)\n    s2=sorted(s2)\n    if s1 == s2:\n        return True\n    else:\n        return False\ndef palindrome_permutation(s): \n    '''\n    Write a python function to check whether a given string is a permutation of a palindrome or not.\n    '''\n    count=0\n    for i in s:\n        if s.count(i)%2==1:\n            count+=1\n    return count<=1\ndef is_abecedarian(s): \n    '''\n    Write a python function to check whether a given string is a abecedarian or not.\n    '''\n    for i in range(1,len(s)):\n        if ord(s[i-1])>=ord(s[i]):\n            return False\n    return True\ndef is_anagram_of_palindrome(s): \n    '''\n    Write a python function to check whether a given string is an anagram of palindrome or not.\n    '''\n    return check_anagram(s,s[::-1])\ndef is_pangram(s): \n    '''\n    Write a python function to check whether a given string is pangram or not.\n    '''\n    return is_anagram(s,s.lower())\ndef count_vowels(s): \n    '''\n    Write a python function to count the vowels of a given string.\n    '''\n    s=s.lower()\n    vowels='aeiou'\n    count=0\n    for i in s:\n        if i in vowels:\n            count+=1\n    return count\ndef find_missing_alphabet(s): \n    '''\n    Write a python function t",
        "num_ids": 8
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,\"\").replace(ch,\"\")\ndef group_by_occ(s): \n    '''\n    Write a python function to group letters by occurrence order in a string.\n    '''\n    return \"\".join(sorted(s, key=s.index))\ndef word_wrap(s, k): \n    '''\n    Write a python function to wrap a given string into a maximum of 'k' number of words.\n    '''\n    return \" \".join(s.split()[:k])\ndef find_max_occ(s,ch): \n    '''\n    Write a python function to find the maximum number of occurrence of a given character in a string.\n    '''\n    return max([s.count(ch),1])\ndef delete_char(s,pos): \n    '''\n    Write a python function to delete a character from a string at given position.\n    '''\n    return s[:pos]+s[pos+1:]\ndef duplicate_count(s): \n    '''\n    Write a python function to find the duplicate characters in a given string.\n    '''\n    return len([i for i in s.split() if s.count(i)>1])\ndef r_replace(s,ch1,ch2): \n    '''\n    Write a python function to replace all occurrences of first character with second character in a given string.\n    '''\n    return s.replace(ch1,ch2)\ndef super_reduced_string(s): \n    '''\n    Write a python function to return the super reduced string of a given string.\n    '''\n    return \"\".join(sorted(set(s),key=s.index))\ndef powerset(s): \n    '''\n    Write a python function to find the power set of a given string.\n    '''\n    return list(reduce(lambda x,y:x+y,list(map(lambda x:list(x),list(itertools.combinations(s,i+1))))) for i in range(len(s)))\ndef change_all(s, old, new): \n    '''\n    Write a python function to change all occurrence of a substring to another substring.\n    '''\n    return new.join(s.split(old))\ndef right_rotate(s,k): \n    '''\n    Write a python function to right rotate a string.\n    '''\n    return s[k%len(s):]+s[:k%len(s)]\ndef left_rotate(s,k): \n    '''\n    Write a python function to left rotate a string.\n    '''\n    return s[len(s)-k%len(s):]+s[:len(s)-k%len(s)]\ndef swap(s,p1,p2): \n    '''\n    Write a python function to swap two characters in a string.\n    '''\n    return s[:p1]+s[p2]+s[p1+1:p2]+s[p1]+s[p2+1:]\ndef sort_012(s): \n    '''\n    Write a python function to sort an array containing only 0, 1, and 2 in a way that keeps the numbers coming out in the order 0, 1, and 2.\n    '''\n    return \"\".join(sorted(s))\ndef group_by_key(s,k): \n    '''\n    Write a python function to group a string by character and produce a list of tuples.\n    '''\n    return [s[i:i+k] for i in range(len(s))[::k]]\ndef group_by_key_index(s,k): \n    '''\n    Write a python function to group a string by character and produce a list of tuples.\n    '''\n    return list(zip(s,range(len(s))[::k]))\ndef median(s): \n    '''\n    Write a python function to compute the median of a list of numbers.\n    '''\n    return sorted(s)[len(s)/2]\ndef max_end3(s): \n    '''\n    Write a python function to find the maximum sum of a subarray in a given array with size 3.\n    '''\n    return max(sum(s[:3]),sum(s[1:]))\ndef is_prime(n): \n    '''\n    Write a python function to check if a given number is a prime number or not.\n    '''\n    return n>1 and all(n%i for i in range(2,int(n**0.5)+1))\ndef factorial(n): \n    '''\n    Write a python function to compute the factorial of a given number.\n    '''\n    return reduce(lambda x,y:x*y,range(1,n+1))\ndef count_substring(s,ss): \n    '''\n    Write a python function to find the number of occurrences of a substring in a string.\n    '''\n    return s.count(ss)\ndef count_words(s): \n    '''\n    Write a python function to count the number of words in a string.\n    '''\n    return len(s.split())\ndef count_words_lower(s): \n    '''\n    Write a python function to count the number of words in a string which are all lower case.\n    '''\n    return len([w for w in s.split() if w.islower()])\ndef is_anagram(s1,s2): \n    '''\n    Write a python function to check if two strings are anagrams or not.\n    '''\n    return sorted(s1) == sorted(s2)\ndef permute(s): \n    '''\n    Write a python function to find all permutations of a given string.\n    '''\n    return list(map(\"\".join,itertools.permutations(s)))\ndef count_vowels(s): \n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    return len(re.findall(\"[aeiou]\",s))\ndef is_anagram_sort(s1,s2): \n    '''\n    Write a python function to check if two strings are anagrams or not.\n    '''\n    return sorted(s1) == sorted(s2)\ndef reverse_vowels(s): \n    '''\n    Write a python function to reverse vowels in a string.\n    '''\n    return \"\".join(re.findall(r\"[aeiou]\",s))[::-1]\ndef roman_to_int(s): \n    '''\n    Write a python function to convert a roman numeral to an integer.\n    '''\n    rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    int_val = 0\n    for i in range(len(s)):\n        if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\n            int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\n        else:\n            int_val += rom_val[s[i]]\n    return int_val\ndef int_to_roman(num): \n    '''\n    Write a python function to convert an integer to a roman numeral.\n    '''\n    roman = {1000:'M', 900:'CM', 500:'D', 400:'CD', 100:'C', 90:'XC', 50:'L', 40:'XL', 10:'X', 9:'IX', 5:'V', 4:'IV', 1:'I'}\n    keys = [1000,900,500,400,100,90,50,40,10,9,5,4,1]\n    result = \"\"\n    for i in keys:\n        while num >= i:\n            result += roman[i]\n            num -= i\n    return result\ndef is_leap(n): \n    '''\n    Write a python function to check if a given year is a leap year or not.\n    '''\n    return n%4==0 and (n%100!=0 or n%400==0)\ndef divisors(n): \n    '''\n    Write a python function to find divisors of a given number.\n    '''\n    return [i for i in range(1,",
        "num_ids": 13
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sort_list = []\n    for row in M:\n        sort_list.append(sum(row))\n    sort_list.sort()\n    for i in range(len(M)):\n        for j in range(len(M)):\n            M[i][j] = sort_list.index(M[i][j])\n    return M\n",
        "num_ids": 85
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    for i in range(rows):\n        for j in range(rows - i - 1):\n            if sum(M[j]) > sum(M[j + 1]):\n                M[j], M[j + 1] = M[j + 1], M[j]\n    return M\n",
        "num_ids": 89
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key=sum)\n",
        "num_ids": 13
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Traverse the rows of the matrix and print the sorted array\n    return sorted([sum(row) for row in M])\n",
        "num_ids": 31
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i,n):\n            if M[i][j] < M[j][i]:\n                M[i], M[j] = M[j], M[i]\n    return M\n",
        "num_ids": 69
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M,key = lambda x:sum(x))\n",
        "num_ids": 18
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    m = len(M)\n    n = len(M[0])\n    res = [0] * m\n",
        "num_ids": 29
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    columns = len(M[0])\n    M = [[0 for x in range(rows)] for y in range(columns)]\n    for i in range(rows):\n        for j in range(columns):\n            M[j][i] = M[j][i] + M[j][i-1] if i!= 0 else M[j][i]\n    return M\n",
        "num_ids": 101
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    for i in range(rows):\n        min_col = min(M[i])\n        for j in range(rows):\n            if M[j][cols - i - 1] > min_col:\n                temp = M[j][cols - i - 1]\n                M[j][cols - i - 1] = min_col\n                min_col = temp\n    return M\n",
        "num_ids": 113
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    N = len(M)\n    for i in range(N):\n        M[i].sort(reverse = True)\n    for i in range(N):\n        for j in range(N-1):\n            if M[i][j] < M[i][j+1]:\n                temp = M[i][j]\n                M[i][j] = M[i][j+1]\n                M[i][j+1] = temp\n    return M\n    \ndef largest_elem(M):\n    '''\n    Write a function to find the largest element in a given matrix.\n    '''\n    N = len(M)\n    for i in range(N):\n        for j in range(N):\n            if M[i][j] == 0:\n                M[i][j] = 1\n    ans = max(sum(M[i]) for i in range(N))\n    return ans\n",
        "num_ids": 73
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h/6\n",
        "num_ids": 12
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    return l*b*h/6\n",
        "num_ids": 14
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l * b * h)/3.0\n",
        "num_ids": 15
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = (1/6)*(l*b*h)\n    return Volume\n",
        "num_ids": 22
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/3\n",
        "num_ids": 13
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h/6\n",
        "num_ids": 12
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5*(l*b*h)\n    return V\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2012
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h/6\n",
        "num_ids": 12
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/3\n",
        "num_ids": 13
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/6\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return '_' in text\ndef lowercase_underscore_join(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return '_' in text\ndef string_ends_in_number(text):\n    '''\n    Write a function to that returns true if the input string ends in a number and false otherwise.\n    '''\n    return bool(re.search(r'^\\d$', text))\ndef number_string_ends_in_number(text):\n    '''\n    Write a function to that returns true if the input string ends in a number and false otherwise.\n    '''\n    return bool(re.search(r'^\\d$', text))\ndef word_with_dashes(text):\n    '''\n    Write a function to that returns true if the input string ends in a word with dashes and false otherwise.\n    '''\n    return bool(re.search(r'^\\w+-\\w+$', text))\ndef word_with_dashes_check(text):\n    '''\n    Write a function to that returns true if the input string ends in a word with dashes and false otherwise.\n    '''\n    return bool(re.search(r'^\\w+-\\w+$', text))\ndef words_with_dashes(text):\n    '''\n    Write a function to that returns true if the input string ends in a word with dashes and false otherwise.\n    '''\n    return bool(re.search(r'^\\w+-\\w+$', text))\ndef words_with_dashes_check(text):\n    '''\n    Write a function to that returns true if the input string ends in a word with dashes and false otherwise.\n    '''\n    return bool(re.search(r'^\\w+-\\w+$', text))\ndef no_repeats(text):\n    '''\n    Write a function to that returns true if the input string contains no repeated letters and false otherwise.\n    '''\n    return not bool(re.search(r'(.)\\1+', text))\ndef no_repeats_check(text):\n    '''\n    Write a function to that returns true if the input string contains no repeated letters and false otherwise.\n    '''\n    return not bool(re.search(r'(.)\\1+', text))\ndef no_repeat_with_spaces(text):\n    '''\n    Write a function to that returns true if the input string contains no repeated letters and false otherwise.\n    '''\n    return not bool(re.search(r'(.)\\1+', text))\ndef no_repeat_with_spaces_check(text):\n    '''\n    Write a function to that returns true if the input string contains no repeated letters and false otherwise.\n    '''\n    return not bool(re.search(r'(.)\\1+', text))\ndef no_repeat_spaces(text):\n    '''\n    Write a function to that returns true if the input string contains no repeated letters and false otherwise.\n    '''\n    return not bool(re.search(r'(.)\\1+', text))\ndef no_repeat_spaces_check(text):\n    '''\n    Write a function to that returns true if the input string contains no repeated letters and false otherwise.\n    '''\n    return not bool(re.search(r'(.)\\1+', text))\ndef no_repeat_letters(text):\n    '''\n    Write a function to that returns true if the input string contains no repeated letters and false otherwise.\n    '''\n    return not bool(re.search(r'(.)\\1+', text))\ndef no_repeat_letters_check(text):\n    '''\n    Write a function to that returns true if the input string contains no repeated letters and false otherwise.\n    '''\n    return not bool(re.search(r'(.)\\1+', text))\ndef no_repeat_letters_checker(text):\n    '''\n    Write a function to that returns true if the input string contains no repeated letters and false otherwise.\n    '''\n    return not bool(re.search(r'(.)\\1+', text))\ndef no_repeated_letters(text):\n    '''\n    Write a function to that returns true if the input string contains no repeated letters and false otherwise.\n    '''\n    return not bool(re.search(r'(.)\\1+', text))\ndef no_repeated_letters_check(text):\n    '''\n    Write a function to that returns true if the input string contains no repeated letters and false otherwise.\n    '''\n    return not bool(re.search(r'(.)\\1+', text))\ndef no_repeated_letters_checker(text):\n    '''\n    Write a function to that returns true if the input string contains no repeated letters and false otherwise.\n    '''\n    return not bool(re.search(r'(.)\\1+', text))\ndef no_repeated_letters_checker(text):\n    '''\n    Write a function to that returns true if the input string contains no repeated letters and false otherwise.\n    '''\n    return not bool(re.search(r'(.)\\1+', text))\ndef no_repeated_letters_checker(text):\n    '''\n    Write a function to that returns true if the input string contains no repeated letters and false otherwise.\n    '''\n    return not bool(re.search(r'(.)\\1+', text))\ndef number_in_string(text):\n    '''\n    Write a function to that returns true if the input string contains a number and false otherwise.\n    '''\n    return bool(re.search(r'\\d', text))\ndef number_in_string_check(text):\n    '''\n    Write a function to that returns true if the input string contains a number and false otherwise.\n    '''\n    return bool(re.search(r'\\d', text))\ndef digit_in_string(text):\n    '''\n    Write a function to that returns true if the input string contains a digit and false otherwise.\n    '''\n    return bool(re.search(r'\\d', text))\ndef digit_in_string_check(text):\n    '''\n    Write a function to that returns true if the input string contains a digit and false otherwise.\n    '''\n    return bool(re.search(r'\\d', text))\ndef digit_in_string(text):\n    '''\n    Write a function to that returns true if the input string contains a digit and false otherwise.\n    '''\n    return bool(re.search(r'\\d', text))\ndef digit_in_string_check(text):\n    '''\n    Write a function to that returns true if the input string contains a digit and false otherwise.\n    '''\n    return bool(re.search(r'\\d', text))\ndef digits_in_string(text):\n    '''\n    Write a function to that returns true if the input string contains digits and false otherwise.\n    '''\n    return bool(re.search(r'\\d', text))\ndef digits_in_string_check(text):\n    '''\n    Write a function to that returns true if the input string contains digits and false otherwise.\n    '''\n    return bool(re.search(r'\\d', text))\ndef digits_in_string(text):\n    '''\n    Write a function to that returns true if the input string contains digits and false otherwise.\n    '''\n    return bool(re.search(r'\\d', text))\ndef digits_in_string_check(text):\n    '''\n    Write a function to that returns true if the input string contains digits and false otherwise.\n    '''\n    return bool(re.search(r'\\d', text))\ndef digits_in_string_check(text):\n    '''\n    Write a function to that returns true if the input string contains digits and false otherwise.\n    '''\n    return bool(re.search(r'\\d', text))\ndef string_in_string(text):\n    '''\n    Write a function to that returns true if the input string contains other strings and false otherwise.\n    '''\n    return bool(re.search(r'[a-zA-Z]+', text))\ndef string_in_string_check(text):\n    '''\n    Write a function to that returns true if the inpu",
        "num_ids": 14
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = text.lower()\n    for char in text:\n        if not char.isalpha():\n            return False\n    return True\n",
        "num_ids": 34
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return (text.isalpha() and '_' in text)\n",
        "num_ids": 18
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # import pdb;pdb.set_trace()\n    # print 'this is the text'\n    # print text\n    # print 'this is the string'\n    # print text.lower()\n    # print text.lower().replace(' ', '_')\n    return text.lower().replace(' ', '_')\n",
        "num_ids": 76
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return len(re.findall(r'\\b_\\b',text))>0\n",
        "num_ids": 24
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'^[a-z]+_[a-z]+$', text)\n",
        "num_ids": 27
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return text.islower()\n",
        "num_ids": 10
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    try:\n        return re.search('^[a-z]+_[a-z]+$', text)\n    except:\n        raise AssertionError('Invalid Input')\n",
        "num_ids": 44
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[a-z]+_[a-z]+', text, re.IGNORECASE))\ndef text_cap_tilde(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of uppercase letters joined with a tilde and false otherwise.\n    '''\n    return bool(re.search(r'[A-Z]+\\~[A-Z]+', text, re.IGNORECASE))\ndef text_numerics(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of numerics and false otherwise.\n    '''\n    return bool(re.search(r'[0-9]+', text, re.IGNORECASE))\ndef text_dot_dash(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of dots and dashes and false otherwise.\n    '''\n    return bool(re.search(r'[\\.\\-]+', text, re.IGNORECASE))\ndef text_one_of_these(text, list_of_strings):\n    '''\n    Write a function to that returns true if the input string contains one of the strings in the list and false otherwise.\n    '''\n    return bool(re.search(r'(?i)'.join(list_of_strings), text, re.IGNORECASE))\ndef text_not_one_of_these(text, list_of_strings):\n    '''\n    Write a function to that returns true if the input string doesn't contain one of the strings in the list and false otherwise.\n    '''\n    return not text_one_of_these(text, list_of_strings)\ndef text_not_contains_this(text, not_this):\n    '''\n    Write a function to that returns true if the input string doesn't contain this string and false otherwise.\n    '''\n    return not text_one_of_these(text, [not_this])\ndef text_not_contains_those(text, not_those):\n    '''\n    Write a function to that returns true if the input string doesn't contain any of the strings in the list and false otherwise.\n    '''\n    return not text_one_of_these(text, not_those)\ndef text_contains_this(text, this):\n    '''\n    Write a function to that returns true if the input string contains this string and false otherwise.\n    '''\n    return text_one_of_these(text, [this])\ndef text_contains_those(text, these):\n    '''\n    Write a function to that returns true if the input string contains any of the strings in the list and false otherwise.\n    '''\n    return text_one_of_these(text, these)\ndef text_has_length_between(text, length_start, length_end):\n    '''\n    Write a function to that returns true if the input string contains a substring whose length is between length_start and length_end and false otherwise.\n    '''\n    return len(text) > length_start and len(text) < length_end\ndef text_has_length(text, length):\n    '''\n    Write a function to that returns true if the input string contains a substring whose length is equal to length and false otherwise.\n    '''\n    return len(text) == length\ndef text_doesnt_have_length(text, length):\n    '''\n    Write a function to that returns true if the input string contains a substring whose length is not equal to length and false otherwise.\n    '''\n    return len(text)!= length\ndef text_has_only_these(text, these):\n    '''\n    Write a function to that returns true if the input string contains only the strings in the list and false otherwise.\n    '''\n    return bool(re.search(r'(?i)'.join(these), text, re.IGNORECASE))\ndef text_doesnt_have_these(text, these):\n    '''\n    Write a function to that returns true if the input string doesn't contain any of the strings in the list and false otherwise.\n    '''\n    return not text_has_these(text, these)\ndef text_has_these_anywhere(text, these):\n    '''\n    Write a function to that returns true if the input string contains any of the strings in the list and false otherwise.\n    '''\n    return bool(re.search(r'(?i)'.join(these), text, re.IGNORECASE))\ndef text_doesnt_have_these_anywhere(text, these):\n    '''\n    Write a function to that returns true if the input string doesn't contain any of the strings in the list and false otherwise.\n    '''\n    return not text_has_these_anywhere(text, these)\ndef text_has_an_integer_in_range(text, start, end):\n    '''\n    Write a function to that returns true if the input string contains an integer in the range [start, end] and false otherwise.\n    '''\n    return text_has_length_between(text, start, end)\ndef text_has_an_integer_greater_than(text, start):\n    '''\n    Write a function to that returns true if the input string contains an integer greater than start and false otherwise.\n    '''\n    return text_has_length(text, start+1)\ndef text_has_an_integer_less_than(text, end):\n    '''\n    Write a function to that returns true if the input string contains an integer less than end and false otherwise.\n    '''\n    return text_has_length(text, end-1)\ndef text_has_an_integer_in_range_that_is_not(text, start, end):\n    '''\n    Write a function to that returns true if the input string contains an integer in the range [start, end] and false otherwise.\n    '''\n    return not text_has_an_integer_greater_than(text, start) and not text_has_an_integer_less_than(text, end)\ndef text_has_a_number_after_a_letter_but_not_this(text, letter, not_this):\n    '''\n    Write a function to that returns true if the input string contains a number after a letter but not this number and false otherwise.\n    '''\n    return text_has_length_between(text, letter, letter+1) and text_not_contains_this(text, not_this)\ndef text_has_a_number_after_a_letter_but_not_these(text, letter, not_these):\n    '''\n    Write a function to that returns true if the input string contains a number after a letter but not these numbers and false otherwise.\n    '''\n    return text_has_length_between(text, letter, letter+1) and not text_has_these_anywhere(text, not_these)\ndef text_has_a_number_after_a_letter_but_not_these_and_not_this(text, letter, not_these, not_this):\n    '''\n    Write a function to that returns true if the input string contains a number after a letter but not these numbers and not this number and false otherwise.\n    '''\n    return text_has_length_between(text, letter, letter+1) and not text_has_these_anywhere(text, not_these) and not text_has_this(text, not_this)\ndef text_has_a_number_after_a_letter_and_not_these_and_not_this(text, letter, not_these, not_this):\n    '''\n    Write a function to that returns true if the input string contains a number after a letter and not these numbers and not this number and false otherwise.\n    '''\n    return text_has_length_between(text, letter, letter+1) and not text_has_these_anywhere(text, not_these) and not text_has_this(text, not_this)\ndef text_has_a_letter_after_this(text, letter, this):\n    '''\n    Write a function to that returns true if the input string contains a letter after this and false otherwise.\n    '''\n    return text_has_length_between(text, letter+1, letter+2) and text_contains_this(text, this)\ndef text_has_a_letter_before_thi",
        "num_ids": 48
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex = re.compile(r'[a-z]+_+[a-z]+', re.IGNORECASE)\n    result = regex.findall(text)\n    return result\n",
        "num_ids": 49
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n",
        "num_ids": 14
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return string.translate(None, string)\ndef remove_chars(string1,string2):\n    if len(string1)<len(string2):\n        string1,string2=string2,string1\n    if len(string1)==len(string2):\n        return ''.join(list(map(lambda a:a[0] if a[1]==0 else '',zip(string1,list(map(lambda a:string1.count(a),list(set(string1))))) ) ))\n    else:\n        return string1\n",
        "num_ids": 134
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    output_list = []\n    for item in string: \n        if item not in output_list:\n            output_list.append(item)\n    return output_list\n",
        "num_ids": 43
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str2 = list(string)\n    for i in str2:\n        if i in str1:\n            str2.remove(i)\n    return str2\n",
        "num_ids": 41
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = [''] * len(string)\n    for i in range(len(string)):\n        for j in range(len(string)):\n            if(string[i] == string[j]):\n                list1[i] = string[j]\n    return list1\n",
        "num_ids": 70
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = list(string)\n    list2 = list(string2)\n    return list(set(list1) - set(list2))\n",
        "num_ids": 37
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return list(string.replace(char,'').replace(char,'').replace(char,'').replace(char,''))\n",
        "num_ids": 29
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str1 = string\n    str2 = '!@#$%^&*()_-+='\n    for i in str2:\n        if i in str1:\n            str1 = str1.replace(i, '')\n    return str1\ndef list_to_str(list):\n    '''\n    Write a function to convert a list into a string and then return that string\n    '''\n    list = ''.join(list)\n    return list\ndef convert_to_binary(string):\n    '''\n    Write a function to convert a string to a list of binary values and then convert the list to a string.\n    '''\n    binary_list = []\n    for x in string:\n        binary_list.append(bin(ord(x)))\n    binary_list = list_to_str(binary_list)\n    return binary_list\ndef convert_to_list(binary):\n    '''\n    Write a function to convert a string of binary values to a list of values and then return the list.\n    '''\n    binary_list = []\n    binary = str(binary)\n    for x in binary:\n        binary_list.append(x)\n    return binary_list\ndef list_to_num(list):\n    '''\n    Write a function to convert a list to a number\n    '''\n    num = 0\n    for x in list:\n        num = num * 2 + int(x)\n    return num\ndef num_to_list(num):\n    '''\n    Write a function to convert a number to a list of bits\n    '''\n    list = []\n    num = str(num)\n    while num!= '':\n        list.append(num[0])\n        num = num[1:]\n    return list\ndef string_to_num(string):\n    '''\n    Write a function to convert a string to a number\n    '''\n    num = 0\n    for x in string:\n        num = num * 2 + ord(x) - ord('0')\n    return num\ndef num_to_string(num):\n    '''\n    Write a function to convert a number to a string\n    '''\n    string = ''\n    while num > 0:\n        string = chr(num % 2 + ord('0')) + string\n        num = num / 2\n    return string\ndef is_palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome\n    '''\n    return string == string[::-1]\ndef reverse_string(string):\n    '''\n    Write a function to reverse a string\n    '''\n    return string[::-1]\ndef rotate_left(string, num):\n    '''\n    Write a function to rotate a string to the left by a number of characters\n    '''\n    return string[num:] + string[:num]\ndef rotate_right(string, num):\n    '''\n    Write a function to rotate a string to the right by a number of characters\n    '''\n    return string[-num:] + string[:-num]\ndef sum_string(string1, string2):\n    '''\n    Write a function to sum two strings\n    '''\n    num1 = string_to_num(string1)\n    num2 = string_to_num(string2)\n    return num_to_string(num1 + num2)\ndef sub_string(string1, string2):\n    '''\n    Write a function to substring a string\n    '''\n    num1 = string_to_num(string1)\n    num2 = string_to_num(string2)\n    return num_to_string(num1 - num2)\ndef str_to_int(string):\n    '''\n    Write a function to convert a string to an integer\n    '''\n    num = 0\n    for x in string:\n        num = num * 256 + ord(x)\n    return num\ndef int_to_str(num):\n    '''\n    Write a function to convert an integer to a string\n    '''\n    string = ''\n    while num > 0:\n        string = chr(num % 256) + string\n        num = num / 256\n    return string\ndef list_to_str(list):\n    '''\n    Write a function to convert a list to a string\n    '''\n    string = ''\n    for x in list:\n        string = string + x\n    return string\ndef str_to_list(string):\n    '''\n    Write a function to convert a string to a list\n    '''\n    list = []\n    for x in string:\n        list.append(x)\n    return list\ndef list_to_list(list):\n    '''\n    Write a function to convert a list to a list\n    '''\n    list2 = []\n    for x in list:\n        list2.append(x)\n    return list2\ndef rotate_left_by_n(num, n):\n    '''\n    Write a function to rotate a number left by n bits\n    '''\n    n = n % 8\n    return ((num << n) | (num >> (8 - n))) & 0xffffffff\ndef rotate_right_by_n(num, n):\n    '''\n    Write a function to rotate a number right by n bits\n    '''\n    return rotate_left_by_n(num, (8 - n))\ndef swap_n_bits(num1, num2, n):\n    '''\n    Write a function to swap the bits of two numbers n bits at a time\n    '''\n    x = (num1 >> n) & ((1 << n) - 1)\n    y = (num2 >> n) & ((1 << n) - 1)\n    num1 = (num1 & ((1 << n) - 1)) | ((x << n) & ((1 << n) - 1)) | ((num1 & ((1 << n) - 1)) >> n)\n    num2 = (num2 & ((1 << n) - 1)) | ((y << n) & ((1 << n) - 1)) | ((num2 & ((1 << n) - 1)) >> n)\n    return num1, num2\ndef shift_left_by_n(num, n):\n    '''\n    Write a function to shift a number left by n bits\n    '''\n    return num << n\ndef shift_right_by_n(num, n):\n    '''\n    Write a function to shift a number right by n bits\n    '''\n    return num >> n\ndef count_ones(num):\n    '''\n    Write a function to count the number of ones in a 32 bit number\n    '''\n    return bin(num).count('1')\ndef reverse_bits(num):\n    '''\n    Write a function to reverse bits of a number\n    '''\n    return ((num & 0x55555555) << 1) | ((num & 0xAAAAAAAA) >> 1)\ndef bit_string(num):\n    '''\n    Write a function to return the string represenation of an integer\n    '''\n    return bin(num)\ndef str_to_int(string):\n    '''\n    Write a function to convert a string to an integer\n    '''\n    num = 0\n    for x in string:\n        num = num * 256 + ord(x)\n    return num\ndef bit_flip(num):\n    '''\n    Write a function to flip all the bits of a number\n    '''\n    return num ^ (num & (num - 1))\ndef rotate_left_by_n(num, n):\n    '''\n    Write a function to rotate a number left by n bits\n    '''\n    n = n % 8\n    return ((num << n) | (num >> (8 - n))) & 0xffffffff\ndef rotate_right_by_n(num, n):\n    '''\n    Write a function to rotate a number right by n bits\n    '''\n    return rotate_left_by_n(num, (8 - n))\ndef list_to_string(list):\n    '''\n    Write a function to convert a list to a string\n    '''\n    string = ''\n    for x in list:\n        string = string + x\n    return string\ndef remove_nth(list, n):\n    '''\n    Write a function to remove the nth element from a list\n    '''\n    newlist = []\n    for x in list:\n        if x!= list[n]:\n            newlist",
        "num_ids": 28
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    li = []\n    for i in string:\n        if i not in li:\n            li.append(i)\n    return li\ndef huffman_encoding(string):\n    '''\n    Input:\n    String \n    Output:\n    Dictionary\n    '''\n    str_len = len(string)\n    freq = {}\n    for i in string:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    pq = []\n    for key, val in freq.items():\n        pq.append([val, key])\n    while len(pq) > 1:\n        pq.sort()\n        t = pq.pop(0)\n        t2 = pq.pop(0)\n        temp = [t[0] + t2[0], t, t2]\n        pq.append(temp)\n    root = pq[0][1]\n    huffman_code = {}\n    huffman_code[root] = 0\n    huffman_code[root] = huffman_code[root] + '0'\n    huffman_code[root] = huffman_code[root] + '1'\n    code = []\n    for i in string:\n        code.append(huffman_code[i])\n    return code\ndef huffman_decoding(code, string):\n    '''\n    Input:\n    String\n    String\n    Output:\n    String\n    '''\n    huffman_code = {}\n    huffman_code[0] = '0'\n    huffman_code[1] = '1'\n    huffman_code['a'] = 'x'\n    huffman_code['b'] = 'y'\n    huffman_code['c'] = 'z'\n    huffman_code['d'] = 'A'\n    huffman_code['e'] = 'B'\n    huffman_code['f'] = 'C'\n    huffman_code['g'] = 'D'\n    huffman_code['h'] = 'E'\n    huffman_code['i'] = 'F'\n    huffman_code['j'] = 'G'\n    huffman_code['k'] = 'H'\n    huffman_code['l'] = 'I'\n    huffman_code['m'] = 'J'\n    huffman_code['n'] = 'K'\n    huffman_code['o'] = 'L'\n    huffman_code['p'] = 'M'\n    huffman_code['q'] = 'N'\n    huffman_code['r'] = 'O'\n    huffman_code['s'] = 'P'\n    huffman_code['t'] = 'Q'\n    huffman_code['u'] = 'R'\n    huffman_code['v'] = 'S'\n    huffman_code['w'] = 'T'\n    huffman_code['x'] = 'U'\n    huffman_code['y'] = 'V'\n    huffman_code['z'] = 'W'\n    huffman_code['A'] = 'x'\n    huffman_code['B'] = 'y'\n    huffman_code['C'] = 'z'\n    huffman_code['D'] = 'A'\n    huffman_code['E'] = 'B'\n    huffman_code['F'] = 'C'\n    huffman_code['G'] = 'D'\n    huffman_code['H'] = 'E'\n    huffman_code['I'] = 'F'\n    huffman_code['J'] = 'G'\n    huffman_code['K'] = 'H'\n    huffman_code['L'] = 'I'\n    huffman_code['M'] = 'J'\n    huffman_code['N'] = 'K'\n    huffman_code['O'] = 'L'\n    huffman_code['P'] = 'M'\n    huffman_code['Q'] = 'N'\n    huffman_code['R'] = 'O'\n    huffman_code['S'] = 'P'\n    huffman_code['T'] = 'Q'\n    huffman_code['U'] = 'R'\n    huffman_code['V'] = 'S'\n    huffman_code['W'] = 'T'\n    huffman_code['X'] = 'U'\n    huffman_code['Y'] = 'V'\n    huffman_code['Z'] = 'W'\n    if code in huffman_code.values():\n        return string\n    else:\n        new_string = ''\n        new_code = ''\n        for i in code:\n            new_string = new_string + string[int(i)]\n            if int(i) == len(code):\n                new_code = new_code + '0'\n            else:\n                new_code = new_code + i\n        return new_string\ndef viterbi(string, trans, emit, start, end):\n    '''\n    Input:\n    String\n    Dictionary\n    Dictionary\n    String\n    String\n    Output:\n    List\n    '''\n    viterbi = {}\n    viterbi[(0, start)] = ('', start, 0)\n    for i in range(len(string)):\n        viterbi[(i, start)] = ('', start, 0)\n    for i in range(len(string)):\n        viterbi[(i, start)][2] = 1\n    for i in range(len(string)):\n        viterbi[(i, start)][1] = start\n    for i in range(len(string)):\n        viterbi[(i, end)][2] = 1\n    for i in range(len(string)):\n        viterbi[(i, end)][1] = end\n    for i in range(len(string) - 1):\n        if string[i] in trans:\n            for j in range(len(trans[string[i]])):\n                if (i + 1, trans[string[i]][j]) in viterbi:\n                    viterbi[(i + 1, trans[string[i]][j])][2] += viterbi[(i, start)][2] * emit[trans[string[i]][j]]\n                else:\n                    viterbi[(i + 1, trans[string[i]][j])] = ('', trans[string[i]][j], viterbi[(i, start)][2] * emit[trans[string[i]][j]])\n    \n    max_val = max([(viterbi[(len(string) - 1, i)][2], i) for i in range(len(start))])\n    \n    max_string = ''\n    for i in range(len(start)):\n        if viterbi[(len(string) - 1, i)][2] == max_val[0]:\n            max_string = max_string + start[i]\n    \n    return max_string\ndef huffman_encoding_sentence(string):\n    '''\n    Input:\n    String\n    Output:\n    List\n    '''\n    string = string.lower()\n    string = str_to_list(string)\n    frequency = {}\n    for i in string:\n        if i in frequency:\n            frequency[i] += 1\n        else:\n            frequency[i] = 1\n    pq = []\n    for key, val in frequency.items():\n        pq.append([val, key])\n    while len(pq) > 1:\n        pq.sort()\n        t = pq.pop(0)\n        t2 = pq.pop(0)\n        temp = [t[0] + t2[0], t, t2]\n        pq.append(temp)\n    root = pq[0][1]\n    huffman_code = {}\n    huffman_code[root] = 0\n    huffman_code[root] = huffman_code[root] + '0'\n    huffman_code[root] = huffman_code",
        "num_ids": 229
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str1 = string[0]\n    str2 = string[1]\n    for i in range(0,len(str1)):\n        if str1[i] in str2:\n            str1 = str1[:i] + str1[i+1:]\n    return str1\ndef is_prime(n):\n    '''\n    Write a function to check if a given number is prime or not.\n    '''\n    if n==1:\n        return False\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\ndef rot(list,n):\n    '''\n    Write a function to rotate the first n elements of the list to the last.\n    '''\n    n_elements = len(list)\n    if n_elements<n:\n        n = n%n_elements\n    for i in range(n):\n        list[i], list[n_elements-1-i] = list[n_elements-1-i], list[i]\n    return list\ndef hamming_distance(str1,str2):\n    '''\n    Write a function to calculate the hamming distance between two strings.\n    '''\n    hamming_distance = 0\n    for i in range(0,len(str1)):\n        if str1[i]!=str2[i]:\n            hamming_distance+=1\n    return hamming_distance\ndef factorial(n):\n    '''\n    Write a function to return the factorial of a given number.\n    '''\n    if n==0 or n==1:\n        return 1\n    fact = 1\n    while n>1:\n        fact = fact*n\n        n-=1\n    return fact\ndef sum_of_digits(num):\n    '''\n    Write a function to find the sum of digits of a given number.\n    '''\n    sum = 0\n    while num>0:\n        sum = sum + num%10\n        num = num//10\n    return sum\ndef palindrome(string):\n    '''\n    Write a function to check if a given string is a palindrome or not.\n    '''\n    if string == string[::-1]:\n        return True\n    return False\ndef search(list,key):\n    '''\n    Write a function to search for an element in a list using binary search.\n    '''\n    low = 0\n    high = len(list) - 1\n    while low <= high:\n        mid = (low + high)//2\n        if list[mid] == key:\n            return mid\n        elif list[mid] < key:\n            low = mid+1\n        else:\n            high = mid-1\n    return -1\ndef merge(list1,list2):\n    '''\n    Write a function to merge two sorted lists.\n    '''\n    new_list = []\n    i = 0\n    j = 0\n    while i<len(list1) and j<len(list2):\n        if list1[i]<list2[j]:\n            new_list.append(list1[i])\n            i+=1\n        else:\n            new_list.append(list2[j])\n            j+=1\n    while i<len(list1):\n        new_list.append(list1[i])\n        i+=1\n    while j<len(list2):\n        new_list.append(list2[j])\n        j+=1\n    return new_list\ndef get_permutations(string):\n    '''\n    Write a function to find all permutations of a string.\n    '''\n    perm = []\n    perm.append(string)\n    if len(string)==1:\n        return [string]\n    else:\n        prev_char = string[0]\n        rem_str = string[1:]\n        rem_perms = get_permutations(rem_str)\n        for i in range(0,len(rem_perms)):\n            for j in range(0,len(rem_perms[i])+1):\n                new_str = rem_perms[i][:j]+prev_char+rem_perms[i][j:]\n                if new_str not in perm:\n                    perm.append(new_str)\n    return perm\ndef get_permutations_with_dups(string):\n    '''\n    Write a function to find all permutations of a string with duplicates allowed.\n    '''\n    perm = []\n    perm.append(string)\n    if len(string)==1:\n        return [string]\n    else:\n        prev_char = string[0]\n        rem_str = string[1:]\n        rem_perms = get_permutations(rem_str)\n        for i in range(0,len(rem_perms)):\n            for j in range(0,len(rem_perms[i])+1):\n                new_str = rem_perms[i][:j]+prev_char+rem_perms[i][j:]\n                if new_str not in perm:\n                    perm.append(new_str)\n    return perm\ndef get_unique_permutations(string):\n    '''\n    Write a function to find all unique permutations of a string.\n    '''\n    perm = []\n    perm.append(string)\n    if len(string)==1:\n        return [string]\n    else:\n        prev_char = string[0]\n        rem_str = string[1:]\n        rem_perms = get_permutations(rem_str)\n        for i in range(0,len(rem_perms)):\n            for j in range(0,len(rem_perms[i])+1):\n                new_str = rem_perms[i][:j]+prev_char+rem_perms[i][j:]\n                if new_str not in perm:\n                    perm.append(new_str)\n    return perm\ndef check_permutation(string1,string2):\n    '''\n    Write a function to check if two strings are permutations of each other.\n    '''\n    if len(string1)!=len(string2):\n        return False\n    if string1==string2:\n        return True\n    else:\n        temp = ''\n        for i in range(0,len(string1)):\n            temp += string1[i]\n        for i in range(0,len(string2)):\n            temp += string2[i]\n        temp = temp.lower()\n        list1 = temp.split(' ')\n        list2 = sorted(list1)\n        if list1==list2:\n            return True\n    return False\ndef is_pangram(string):\n    '''\n    Write a function to check if a given string is a pangram or not.\n    '''\n    string = string.lower()\n    letter_count = dict()\n    for i in range(0,len(string)):\n        if string[i] not in letter_count:\n            letter_count[string[i]] = 1\n        else:\n            letter_count[string[i]]+=1\n    for key in letter_count:\n        if letter_count[key]==1:\n            return True\n    return False\ndef frequency(string):\n    '''\n    Write a function to count the frequency of each character in a string.\n    '''\n    letter_count = dict()\n    for i in range(0,len(string)):\n        if string[i] not in letter_count:\n            letter_count[string[i]] = 1\n        else:\n            letter_count[string[i]]+=1\n    return letter_count\ndef factorial_rec(n):\n    '''\n    Write a function to return the factorial of a given number using recursion.\n    '''\n    if n<=1:\n        return 1\n    else:\n        return n*factorial_rec(n-1)\ndef binary_search(list,key):\n    '''\n    Write a function to search for an element in a sorted list using binary search.\n    '''\n    low = 0\n    high = len(list) - 1\n    while low<=high:\n        mid = (low + high)//2\n        if list[mid]==key:\n            return mid\n        elif list[mid]>key:\n            high = mid-1\n        else:\n            low = mid+1",
        "num_ids": 78
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str_to_list.char_map = [None] * NO_OF_CHARS\n    str_to_list.result = []\n    for i in range(len(string)):\n        if str_to_list.char_map[ord(string[i])] == None:\n            str_to_list.char_map[ord(string[i])] = i\n            str_to_list.result.append(string[i])\n    return str_to_list.result\n",
        "num_ids": 117
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # find the duplicate element\n    for i in range(len(arraynums)):\n        for j in range(i + 1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n",
        "num_ids": 65
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums)!= len(set(arraynums))\n",
        "num_ids": 20
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) <= 0:\n        return False\n    # arraynums = sorted(arraynums)\n    # for i in xrange(len(arraynums)-1):\n    #     if arraynums[i] == arraynums[i+1]:\n    #         return True\n    # return False\n",
        "num_ids": 79
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for num in arraynums:\n        if arraynums.count(num) > 1:\n            return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 1:\n        return False\n    elif len(arraynums) == 2:\n        return arraynums[0] == arraynums[1]\n    else:\n        return (arraynums[0] == arraynums[1] and arraynums[0]!= arraynums[2]) or (arraynums[0] == arraynums[2] and arraynums[0]!= arraynums[1])\n",
        "num_ids": 113
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True\n",
        "num_ids": 33
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    n = len(arraynums)\n    if n < 2:\n        return False\n    for i in range(n):\n        for j in range(i+1, n):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n",
        "num_ids": 69
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if arraynums is None:\n        return False\n    setnums = set(arraynums)\n    if len(setnums)!= len(arraynums):\n        return True\n    return False\n",
        "num_ids": 51
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return True\n    if len(arraynums) == 1:\n        return False\n    if len(arraynums) == 2:\n        if arraynums[0] == arraynums[1]:\n            return False\n        else:\n            return True\n    if arraynums[0] == arraynums[1]:\n        return False\n    for i in range(len(arraynums)):\n        if arraynums[i] == arraynums[i+1]:\n            return True\n    return False\n",
        "num_ids": 134
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if not arraynums:\n        return False\n    return len(arraynums)!= len(set(arraynums))\n",
        "num_ids": 32
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%2 == 0: \n        return False\n    elif (x%3 == 0) or (x%5 == 0) or (x%7 == 0): \n        return True\n    return False\n    \nprint(is_woodall(12))\n",
        "num_ids": 64
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    def next_number(number): \n        '''\n        Write a function to get next number in the sequence of the given number\n        '''\n        number = number // 10 + (number % 10) * 10\n        return number\n",
        "num_ids": 21
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return (x % 10 == 2 or x % 10 == 3 or x % 10 == 4) and (x % 100!= 11 and x % 100!= 22 and x % 100!= 33 and x % 100!= 44)\n",
        "num_ids": 54
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    import math\n    if x.find(\"wood\")!= -1:\n        return True\n    return False\n",
        "num_ids": 28
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    import math \n    if x%1!=0:\n        return False\n    elif x<=0:\n        return False\n    elif x==1:\n        return True\n    else:\n        if x%2==0:\n            if int(math.log10(x))%2!=0:\n                return False\n            else:\n                return True\n        elif x%2!=0:\n            if int(math.log10(x))%2==0:\n                return True\n            else:\n                return False\n        \n        \nprint is_woodall(10)\nprint is_woodall(2)\nprint is_woodall(-1)\nprint is_woodall(0)\nprint is_woodall(1)\nprint is_woodall(11)\nprint is_woodall(31)\nprint is_woodall(22)\nprint is_woodall(2222)\nprint is_woodall(222222)\nprint is_woodall(3333)\nprint is_woodall(333333)\nprint is_woodall(3333333)\nprint is_woodall(33333333)\nprint is_woodall(3333333333)\nprint is_woodall(33333333333)\nprint is_woodall(333333333333)\nprint is_woodall(33333333333333)\nprint is_woodall(333333333333333)\nprint is_woodall(3333333333333333)\nprint is_woodall(333333333333333333)\nprint is_woodall(3333333333333333333)\nprint is_woodall(3333333333333333333333)\nprint is_woodall(333333333333333333333333)\nprint is_woodall(333333333333333333333333333)\nprint is_woodall(333333333333333333333333333333)\nprint is_woodall(3333333333333333333333333333333)\nprint is_woodall(3333333333333333333333333333333333)\nprint is_woodall(33333333333333333333333333333333333333)\nprint is_woodall(333333333333333333333333333333333333333333)\nprint is_woodall(3333333333333333333333333333333333333333333333)\nprint is_woodall(33333333333333333333333333333333333333333333333333)\nprint is_woodall(333333333333333333333333333333333333333333333333333333)\nprint is_woodall(3333333333333333333333333333333333333333333333333333333333)\nprint is_woodall(33333333333333333333333333333333333333333333333333333333333333)\nprint is_woodall(333333333333333333333333333333333333333333333333333333333333333333)\nprint is_woodall(3333333333333333333333333333333333333333333333333333333333333333333333)\nprint is_woodall(33333333333333333333333333333333333333333333333333333333333333333333333333)\nprint is_woodall(333333333333333333333333333333333333333333333333333333333333333333333333333333)\nprint is_woodall(3333333333333333333333333333333333333333333333333333333333333333333333333333333333)\nprint is_woodall(33333333333333333333333333333333333333333333333333333333333333333333333333333333333333)\nprint is_woodall(333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333)\nprint is_woodall(3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333)\nprint is_woodall(33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333)\nprint is_woodall(333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333)\nprint is_woodall(3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333)\nprint is_woodall(33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333)\nprint is_woodall(333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333)\nprint is_woodall(3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333)\nprint is_woodall(33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333)\nprint is_woodall(333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333)\nprint is_woodall(3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333)\nprint is_woodall(33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333)\nprint is_woodall(333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333)\nprint is_woodall(3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333)\nprint is_woodall(33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333)\nprint is_woodall(333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333)\nprint is_woodall(3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333)\nprint is_woodall(33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333)\nprint is_woodall(333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333)\nprint is_woodall(33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333)\nprint is_woodall(3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333)\nprint is_woodall(333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333)\nprint is_woodall(333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333)\nprint is_woodall(33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333)\nprint is_woodall(33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333)\nprint is_woodall(333333333333333333333333333333333333333333333333333333333333333333333333333",
        "num_ids": 2015
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    x_str = str(x)\n    \n    # if a digit is a subset of the rest of the digits, then x is a woodball number\n    for i in range(len(x_str)):\n        digits = [int(x_str[j]) for j in range(len(x_str)) if j!= i]\n        if all(digit <= int(x_str[i]) for digit in digits):\n            return True\n    \n    return False\n",
        "num_ids": 114
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%2 == 0:\n        return False\n    if x%2 == 1:\n        if (x%11) == 2 or (x%11) == 4 or (x%11) == 6 or (x%11) == 8 or (x%11) == 9:\n            return True\n        else:\n            return False\n    else:\n        return False\n        \ndef check_sum(x):\n    '''\n    Write a function to check if the given number is a sum of two odd numbers.\n    '''\n    if x%2 == 0:\n        return False\n    else:\n        if (x%11) == 1 or (x%11) == 3 or (x%11) == 5 or (x%11) == 7 or (x%11) == 9:\n            return True\n        else:\n            return False\n            \ndef is_triangle(x):\n    '''\n    Write a function to check if the given number is a triangular number or not.\n    '''\n    if x%3 == 0:\n        return False\n    else:\n        return True\n    \ndef n_digit_binary(x):\n    '''\n    Write a function to check if the given number is a n-digit binary number or not.\n    '''\n    temp = str(x)\n    for i in temp:\n        if int(i) not in range(0,2):\n            return False\n    return True\n    \ndef is_an_april_leap_year(x):\n    '''\n    Write a function to check if the given year is a leap year or not.\n    '''\n    if x%400 == 0:\n        return True\n    elif x%100 == 0:\n        return False\n    elif x%4 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 51
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%1==0:\n        y=x\n        count=0\n        while y>0:\n            x=y%10\n            if x == 7:\n                count+=1\n            y/=10\n        if count>=2:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 81
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    global tree_height_map, tree_slope_map, tree_height_map_angle\n",
        "num_ids": 25
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    i = 1\n    while i <= len(x):\n        if x[:i].lower() == x[:i][::-1]:\n            return True\n        i += 1\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = int(num)\n    rev = 0\n    while (num!= 0):\n        rev = (rev * 10) + (num % 10)\n        num = num // 10\n    if (rev - (rev // 10) == num - 1):\n        return True\n    else:\n        return False\n",
        "num_ids": 74
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return False\n    elif (num * 2) - 1 == int(str(num * 2)[::-1]):\n        return True\n    else:\n        return False\n",
        "num_ids": 50
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = str(num)[::-1]\n    if str(num) == str(int(rev_num)+1):\n        return True\n    return False\n",
        "num_ids": 42
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return (int(str(num)[::-1]) == (2 * int(str(num)[::-1])) - int(str(num)[::-1]))\n",
        "num_ids": 43
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if str(num)[::-1] == str(2*num)[::-1]:\n        return True\n    return False\n",
        "num_ids": 32
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    return rev_num == num-1\n",
        "num_ids": 45
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return True\n    else:\n        return (num-1)%2 == 0 and rev(num%10)\n",
        "num_ids": 36
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return True\n    return (num%10 + num//10)%10 == 0 and rev(num//10)\n",
        "num_ids": 36
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return True\n    elif num == 1:\n        return False\n    else:\n        return num == num % 10 + 10 * rev(num / 10)\n",
        "num_ids": 46
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    str_num = str(num)\n    rev_num = str_num[::-1]\n    if (num - int(rev_num)) == int(rev_num):\n        return True\n    else:\n        return False\n    \ndef Palindrome(num):    \n    '''\n    Write a python function to check if a given number is palindrome or not.\n    '''\n    str_num = str(num)\n    rev_num = str_num[::-1]\n    if (num == int(rev_num)):\n        return True\n    else:\n        return False\n",
        "num_ids": 51
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    arr_len = len(arr)\n    num = 0\n    max_num = 0\n    \n    for i in range(arr_len - 1) :\n        for j in range(i + 1, arr_len) :\n            if arr[i] < arr[j] :\n                num = arr[j] - arr[i]\n                if num > max_num :\n                    max_num = num\n    \n    return max_num\n",
        "num_ids": 108
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    list = []\n    for i in arr :\n        list.append(i)\n    list.sort(reverse = True)\n    print list\n    list_num = 0\n    for i in list :\n        if list_num == 0 :\n            list_num = i\n        else :\n            list_num *= i\n    return list_num\n",
        "num_ids": 84
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    max_num = arr[-1]\n    for i in range(len(arr)-1,0,-1):\n        if arr[i] == arr[i-1]:\n            max_num = arr[i-1]\n        else:\n            break\n    return max_num\n",
        "num_ids": 75
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = arr[0]\n    for i in range(len(arr)) :\n        if arr[i] > max_num :\n            max_num = arr[i]\n    return max_num\n",
        "num_ids": 52
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    i = len(arr)-1\n    j = len(arr)-1\n    while i >= 0 : \n        if arr[i] == 0 : \n            arr.pop(i)\n        else :\n            break\n        i -= 1\n    while j >= 0 : \n        if arr[j] == 9 : \n            arr[j] = 0\n            j -= 1\n        else :\n            break\n        j -= 1\n    if len(arr) == 0 : \n        return 0\n    else : \n        return arr[0]*10**len(arr) + sum(arr)\n",
        "num_ids": 142
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = arr[0]\n    for i in arr :\n        if i > max :\n            max = i\n    return max\n",
        "num_ids": 33
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse = True) \n    # Print the largest number \n    print arr \n",
        "num_ids": 26
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 1 : \n        return arr[0]\n    \n    left = arr[0:len(arr)//2]\n    right = arr[len(arr)//2:]\n",
        "num_ids": 50
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if arr == []:\n        return 0\n    else :\n        return max(arr)\n",
        "num_ids": 24
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    if n==0 :\n        return 0\n    elif n==1 :\n        return arr[0]\n    else :\n        m = [arr[0]]\n        m1 = [arr[1]]\n        for i in range(2, n) :\n            m.append(max(arr[i], m[i-1]*10+arr[i]))\n            m1.append(max(arr[i], m1[i-1]*10+arr[i]))\n        return max(m[n-1], m1[n-1])\n",
        "num_ids": 143
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0:\n        print \"True\"\n    elif x>0 and y<0:\n        print \"True\"\n    else:\n        print \"False\"\n    \ndef Sum_of_two_evens():\n    '''\n    Write a python function to compute the sum of even numbers from 1 to 100.\n    '''\n    count = 0\n    for i in range(1,101):\n        if i%2==0:\n            count += i\n    print count\n    \ndef Sum_of_two_odds():\n    '''\n    Write a python function to compute the sum of odd numbers from 1 to 100.\n    '''\n    count = 0\n    for i in range(1,101):\n        if i%2!=0:\n            count += i\n    print count\n    \ndef Prime_Number_Check():\n    '''\n    Write a python function to check whether a given number is a prime number or not.\n    '''\n    def Prime(x):\n        for i in range(2,int(x**0.5)):\n            if x%i==0:\n                return False\n        return True\n    n = int(input(\"Enter number\"))\n    if Prime(n):\n        print \"Yes\"\n    else:\n        print \"No\"\n    \ndef even_odd_check():\n    '''\n    Write a python function to check whether a given number is even or odd\n    '''\n    n = int(input(\"Enter number\"))\n    if n%2==0:\n        print \"Even\"\n    else:\n        print \"Odd\"\n    \ndef perfect_square_check():\n    '''\n    Write a python function to check whether a given number is a perfect square or not.\n    '''\n    n = int(input(\"Enter number\"))\n    if n**0.5==int(n**0.5):\n        print \"Perfect\"\n    else:\n        print \"Not Perfect\"\n    \ndef fibonacci_series():\n    '''\n    Write a python function to compute the fibonacci series upto the given number.\n    '''\n    n = int(input(\"Enter number\"))\n    a = 0\n    b = 1\n    while b<n:\n        print b\n        a,b = b,a+b\n    \ndef Armstrong_number():\n    '''\n    Write a python function to check whether a given number is an armstrong number or not.\n    '''\n    n = int(input(\"Enter number\"))\n    s = 0\n    temp = n\n    while temp>0:\n        a = temp%10\n        s += a**3\n        temp //= 10\n    if n==s:\n        print \"Armstrong number\"\n    else:\n        print \"Not Armstrong number\"\n        \ndef factorial_of_a_number():\n    '''\n    Write a python function to compute the factorial of a given number.\n    '''\n    n = int(input(\"Enter number\"))\n    fact = 1\n    for i in range(1,n+1):\n        fact = fact*i\n    print fact\n    \ndef first_n_digit_factorial():\n    '''\n    Write a python function to compute the factorial of the first n digits of a number.\n    '''\n    n = int(input(\"Enter number\"))\n    fact = 1\n    for i in range(1,n+1):\n        fact = fact*i\n    print fact\n    \ndef first_n_digit_of_a_number():\n    '''\n    Write a python function to compute the first n digits of a number.\n    '''\n    n = int(input(\"Enter number\"))\n    s = 0\n    while n:\n        r = n%10\n        s = s*10+r\n        n = n//10\n    print s\n    \ndef digits_of_a_number():\n    '''\n    Write a python function to compute the digits of a number.\n    '''\n    n = int(input(\"Enter number\"))\n    s = 0\n    while n:\n        r = n%10\n        s = s*10+r\n        n = n//10\n    print s\n    \ndef cube_root():\n    '''\n    Write a python function to compute the cube root of a number.\n    '''\n    n = int(input(\"Enter number\"))\n    guess = n/2\n    while guess*guess!=n:\n        guess = (guess + n/guess)/2\n    print guess\n    \ndef fibonacci_sequence():\n    '''\n    Write a python function to compute the fibonacci series upto the given number.\n    '''\n    n = int(input(\"Enter number\"))\n    a = 0\n    b = 1\n    while b<n:\n        print b\n        a,b = b,a+b\n    \ndef count_vowels_and_consonants():\n    '''\n    Write a python function to count the vowels and consonants in a given string.\n    '''\n    s = raw_input(\"Enter string\")\n    count = 0\n    count_vowels = 0\n    count_consonants = 0\n    for i in range(len(s)):\n        if s[i]=='a' or s[i]=='e' or s[i]=='i' or s[i]=='o' or s[i]=='u':\n            count_vowels += 1\n        elif s[i]=='b' or s[i]=='c' or s[i]=='d' or s[i]=='f' or s[i]=='g' or s[i]=='h' or s[i]=='j' or s[i]=='k' or s[i]=='l' or s[i]=='m' or s[i]=='n' or s[i]=='p' or s[i]=='q' or s[i]=='r' or s[i]=='s' or s[i]=='t' or s[i]=='v' or s[i]=='w' or s[i]=='x' or s[i]=='z':\n            count_consonants += 1\n        else:\n            pass\n    print \"Number of vowels:\",count_vowels\n    print \"Number of consonants:\",count_consonants\n    \ndef caesar_cipher():\n    '''\n    Write a python function to encrypt a given string with a caesar cipher with given key.\n    '''\n    s = raw_input(\"Enter string\")\n    k = int(raw_input(\"Enter key\"))\n    cipher = ''\n    for i in range(len(s)):\n        if s[i]>='a' and s[i]<='z':\n            cipher = cipher + chr((ord(s[i])-ord('a')+k)%26+ord('a'))\n        elif s[i]>='A' and s[i]<='Z':\n            cipher = cipher + chr((ord(s[i])-ord('A')+k)%26+ord('A'))\n        else:\n            cipher = cipher + s[i]\n    print cipher\n    \ndef caesar_decrypt():\n    '''\n    Write a python function to decrypt a given string with a caesar cipher with given key.\n    '''\n    s = raw_input(\"Enter string\")\n    k = int(raw_input(\"Enter key\"))\n    cipher = ''\n    for i in range(len(s)):\n        if s[i]>='a' and s[i]<='z':\n            cipher = cipher + chr((ord(s[i])-ord('a')-k)%26+ord('a'))\n        elif s[i]>='A' and s[i]<='Z':\n            cipher = cipher + chr((ord(s[i])-ord('A')-k)%26+ord('A'))\n        else:\n            cipher = cipher + s[i]\n    print cipher\n    \ndef find_all_anagrams():\n    '''\n    Write a python function to find all the anagrams of a given word.\n    '''\n    s = raw_input(\"Enter word\")\n    s_list = list(s)\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s",
        "num_ids": 53
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x*y<0\n",
        "num_ids": 10
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x * y < 0:\n        print(\"Opposite signs\")\n    else:\n        print(\"opposite signs are not present\")\n",
        "num_ids": 34
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0:\n        print \"True\"\n    else:\n        print \"False\"\n",
        "num_ids": 29
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y<0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y>0: \n        return True\n    else: \n        return False\n        \nprint(opposite_Signs(5,10))\n",
        "num_ids": 40
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x*y<0\n",
        "num_ids": 10
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x<0 and y>0) or (x>0 and y<0):\n        print \"Given numbers have opposite sign.\"\n    else:\n        print \"Given numbers do not have opposite sign.\"\n",
        "num_ids": 50
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    #code here\n    return x*y < 0\n",
        "num_ids": 15
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x>0 and y>0) or (x<0 and y<0):\n        return 1\n    else:\n        return 0\n    \n    \ndef is_Odd_Number(n):\n    '''\n    Write a python function to check whether the given integer is an odd number or not.\n    '''\n    if n%2==1:\n        return 1\n    else:\n        return 0\n    \n    \ndef is_Prime(n):\n    '''\n    Write a python function to check whether the given integer is a prime number or not.\n    '''\n    if n>1:\n        for i in range(2,n):\n            if n%i==0:\n                return 0\n        return 1\n    else:\n        return 0\n    \n    \ndef is_Palindrome(n):\n    '''\n    Write a python function to check whether the given integer is a palindrome number or not.\n    '''\n    s=str(n)\n    if s==s[::-1]:\n        return 1\n    else:\n        return 0\n    \n    \ndef is_Fibonacci(n):\n    '''\n    Write a python function to check whether the given integer is a Fibonacci number or not.\n    '''\n    if is_Prime(n)==1 and n%2==1:\n        return 1\n    else:\n        return 0\n    \n    \ndef factorial(n):\n    '''\n    Write a python function to calculate the factorial of the given number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\n    \n    \ndef is_Pentagonal(n):\n    '''\n    Write a python function to check whether the given integer is a pentagonal number or not.\n    '''\n    x=((3*n*n-n)/2)\n    if x%1==0:\n        return 1\n    else:\n        return 0\n    \n    \ndef is_Hexagonal(n):\n    '''\n    Write a python function to check whether the given integer is a hexagonal number or not.\n    '''\n    x=((n*(2*n-1))/2)\n    if x%1==0:\n        return 1\n    else:\n        return 0\n    \n    \ndef is_Heptagonal(n):\n    '''\n    Write a python function to check whether the given integer is a heptagonal number or not.\n    '''\n    x=((n*(3*n-2))/2)\n    if x%1==0:\n        return 1\n    else:\n        return 0\n    \n    \ndef is_Octagonal(n):\n    '''\n    Write a python function to check whether the given integer is an octagonal number or not.\n    '''\n    x=((2*n*n-n)/2)\n    if x%1==0:\n        return 1\n    else:\n        return 0\n    \n    \ndef is_Square(n):\n    '''\n    Write a python function to check whether the given integer is a square number or not.\n    '''\n    x=n**0.5\n    if x%1==0:\n        return 1\n    else:\n        return 0\n    \n    \ndef is_Power(x,n):\n    '''\n    Write a python function to check whether the given integer is a power of the given number or not.\n    '''\n    if x**n%1==0:\n        return 1\n    else:\n        return 0\n    \n    \ndef is_Binary(n):\n    '''\n    Write a python function to check whether the given integer is a binary number or not.\n    '''\n    s=bin(n)\n    if s[2:]=='1':\n        return 1\n    else:\n        return 0\n    \n    \ndef is_Hexadecimal(n):\n    '''\n    Write a python function to check whether the given integer is a hexadecimal number or not.\n    '''\n    s=hex(n)\n    if s[2:]=='1':\n        return 1\n    else:\n        return 0\n    \n    \ndef is_Digital(n):\n    '''\n    Write a python function to check whether the given integer is a digital number or not.\n    '''\n    if n>=0:\n        s=str(n)\n        if s.isdigit()==1:\n            return 1\n        else:\n            return 0\n    else:\n        s=str(n)\n        if s[1:].isdigit()==1:\n            return 1\n        else:\n            return 0\n    \n    \ndef is_Decimal(n):\n    '''\n    Write a python function to check whether the given integer is a decimal number or not.\n    '''\n    if n>=0:\n        s=str(n)\n        if s[1:].isdigit()==1:\n            return 1\n        else:\n            return 0\n    else:\n        s=str(n)\n        if s[0:1].isdigit()==1:\n            return 1\n        else:\n            return 0\n    \n    \ndef is_Roman(n):\n    '''\n    Write a python function to check whether the given integer is a roman number or not.\n    '''\n    if n>=0 and n<=3999:\n        s=str(n)\n        if s[0]=='1':\n            if s[1]=='0' and s[2]=='0':\n                return 1\n            else:\n                return 0\n        if s[0]=='2':\n            if s[1]=='0':\n                if s[2]=='0':\n                    return 1\n                else:\n                    return 0\n        if s[0]=='3':\n            if s[1]=='0' and s[2]=='0':\n                if s[3]=='0':\n                    return 1\n                else:\n                    return 0\n        if s[0]=='4':\n            if s[1]=='0' and s[2]=='0' and s[3]=='0':\n                return 1\n            else:\n                return 0\n        if s[0]=='5':\n            if s[1]=='0':\n                if s[2]=='0':\n                    if s[3]=='0':\n                        return 1\n                    else:\n                        return 0\n                else:\n                    return 0\n        if s[0]=='6':\n            if s[1]=='0':\n                if s[2]=='0':\n                    if s[3]=='0' and s[4]=='0':\n                        return 1\n                    else:\n                        return 0\n                else:\n                    return 0\n        if s[0]=='7':\n            if s[1]=='0':\n                if s[2]=='0':\n                    if s[3]=='0' and s[4]=='0' and s[5]=='0':\n                        return 1\n                    else:\n                        return 0\n                else:\n                    return 0\n        if s[0]=='8':\n            if s[1]=='0' and s[2]=='0' and s[3]=='0':\n                if s[4]=='0' and s[5]=='0':\n                    return 1\n                else:\n                    return 0\n            else:\n                return 0\n        if s[0]=='9':\n            if s[1]=='0' and s[2]=='0' and s[3]=='0' and s[4]=='0':\n                return 1\n            else:\n                return 0\n        if s[0]=='0':\n            return 1\n        else:\n            return 0\n    else:\n        return 0\n    \n    \ndef is_Prime_Number(n):\n    '''\n    Write a python function to check whether the given integer is a prime number or not.\n    '''\n    if n>1:\n        for i in range(2,n):\n            if n%i==0:\n                return 0\n        return 1\n    else:\n        return 0\n    \n    \ndef is_Prime_Number_2(n):\n    '''\n    Write a python function to check whether the given integer is a prime number or not.\n    '''\n    if n>",
        "num_ids": 6
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n - 1) / 2 == n**3\n",
        "num_ids": 20
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (2 * n - 1) == n ** 2\n",
        "num_ids": 18
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)/2\n",
        "num_ids": 15
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n - 1) / 2\n",
        "num_ids": 16
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n - 1) / 2 == int(n*(3*n - 1) / 2)\n",
        "num_ids": 31
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n**2 + n)**2 == (3*n + 1)**2\n",
        "num_ids": 24
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    oct_n = 0\n    for x in range(n):\n        oct_n += 1\n        oct_n += (1 - (x % 2)) * 6 * x\n    return oct_n\n",
        "num_ids": 49
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n**2 + n)**2 / 4 == n**2 \n",
        "num_ids": 21
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 4 * n * (n - 1) // 2\n",
        "num_ids": 31
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n**2)+(n**3)/2==n\n",
        "num_ids": 18
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Answer\n    # d = {}\n    # for i in range(len(s)):\n    #     for j in range(i, len(s)):\n    #         sub = s[i:j+1]\n    #         if len(sub) > 1:\n    #             if sub not in d:\n    #                 d[sub] = 0\n    #             d[sub] += 1\n    # print(d)\n    # print(len(d))\n    # # Explanation\n    # '''\n    # For example, if the input string is 'abababa' then the count is\n    # 5 (as the substrings are\n    # ['a', 'ab', 'aba', 'abab', 'ababa'].\n    # '''\n    # # Answer\n    # count = 0\n    # for i in range(len(s)):\n    #     for j in range(i, len(s)):\n    #         sub = s[i:j+1]\n    #         if len(sub) > 1:\n    #             if sum([int(i) for i in sub]) == len(sub):\n    #                 count += 1\n    # print(count)\n    '''\n    Write a python function to return the count of substrings that are\n    anagrams of each other. An anagram is a word or phrase that is the same\n    length but rearranged. The same string will not be an anagram of itself.\n    '''\n    # Answer\n    # d = {}\n    # for i in range(len(s)):\n    #     for j in range(i, len(s)):\n    #         sub = s[i:j+1]\n    #         if len(sub) > 1:\n    #             if ''.join(sorted(sub)) not in d:\n    #                 d[''.join(sorted(sub))] = 0\n    #             d[''.join(sorted(sub))] += 1\n    # print(d)\n    # print(len(d))\n    # # Explanation\n    # '''\n    # For example, if the input string is 'abababa' then the count is\n    # 7 (as the substrings are\n    # ['a', 'ab', 'aba', 'abab', 'ababa', 'ba', 'bab'].\n    # '''\n    # # Answer\n    # count = 0\n    # for i in range(len(s)):\n    #     for j in range(i, len(s)):\n    #         sub = s[i:j+1]\n    #         if len(sub) > 1:\n    #             if ''.join(sorted(sub)) == ''.join(sorted(sub[::-1])):\n    #                 count += 1\n    # print(count)\n    '''\n    Write a python function to return the count of substrings that are\n    palindromes. A palindrome is a word or phrase that is the same\n    length and is rearranged to the same string. The same string will not\n    be a palindrome of itself.\n    '''\n    # Answer\n    # d = {}\n    # for i in range(len(s)):\n    #     for j in range(i, len(s)):\n    #         sub = s[i:j+1]\n    #         if len(sub) > 1:\n    #             if sub not in d:\n    #                 d[sub] = 0\n    #             d[sub] += 1\n    # print(d)\n    # print(len(d))\n    # # Explanation\n    # '''\n    # For example, if the input string is 'abababa' then the count is\n    # 5 (as the substrings are\n    # ['a', 'ab', 'aba', 'abab', 'ababa'].\n    # '''\n    # # Answer\n    # count = 0\n    # for i in range(len(s)):\n    #     for j in range(i, len(s)):\n    #         sub = s[i:j+1]\n    #         if len(sub) > 1:\n    #             if sub == sub[::-1]:\n    #                 count += 1\n    # print(count)\n    '''\n    Write a python function to count the number of substrings with the\n    first and last characters the same as one another.\n    '''\n    # Answer\n    # d = {}\n    # for i in range(len(s)):\n    #     for j in range(i, len(s)):\n    #         sub = s[i:j+1]\n    #         if len(sub) > 1:\n    #             if sub[0] == sub[-1]:\n    #                 if sub not in d:\n    #                     d[sub] = 0\n    #                 d[sub] += 1\n    # print(d)\n    # print(len(d))\n    # # Explanation\n    # '''\n    # For example, if the input string is 'abaabaab' then the count is\n    # 9 (as the substrings are\n    # ['a', 'ab', 'aba', 'ba', 'baa', 'aab', 'abaab', 'abaaba', 'ababaab'].\n    # '''\n    # # Answer\n    # count = 0\n    # for i in range(len(s)):\n    #     for j in range(i, len(s)):\n    #         sub = s[i:j+1]\n    #         if len(sub) > 1:\n    #             if sub[0] == sub[-1]:\n    #                 if ''.join(sorted(sub)) not in d:\n    #                     d[''.join(sorted(sub))] = 0\n    #                 d[''.join(sorted(sub))] += 1\n    # print(d)\n    # print(len(d))\n    # # Explanation\n    # '''\n    # For example, if the input string is 'abaabaab' then the count is\n    # 9 (as the substrings are\n    # ['a', 'ab', 'aba', 'ba', 'baa', 'aab', 'abaab', 'abaaba', 'ababaab'].\n    # '''\n    '''\n    Write a python function to count the number of substrings with\n    exactly K identical characters. For example, if the input string is\n    'aabccbaa' and K = 2 then the count is 2, as the substrings with exactly\n    two identical characters are\n    ['a', 'ab', 'ba', 'aab', 'aa', 'bb', 'bab', 'bba', 'aabcc', 'aabb',\n    'bbcc', 'cc', 'cab', 'cb'].\n    '''\n    # Answer\n    # d = {}\n    # for i in range(len(s)):\n    #     for j in range(i, len(s)):\n    #         sub = s[i:j+1]\n    #         if len(sub) > 1:\n    #             if len(set(sub)) == K:\n    #                 if sub not in d:\n    #                     d[sub] = 0\n    #                 d[sub] += 1\n    # print(d)\n    # print(len(d))\n    # # Explanation\n    # '''\n    # For example, if the input string is 'aabccbaa' and K = 2 then the count\n    # is 2.\n    # '''\n    # # Answer\n    # count = 0\n    # for i in range(len(s)):\n    #     for j in range(i, len(s)):\n    #         sub = s[i:j+1]\n    #         if len(sub) > 1:\n    #             if len(set(sub)) == K:\n    #                 if ''.join(sorted(sub)) not in d:\n    #                     d[''.join(sorted(sub))] = 0\n    #                 d[''.join(sorted(sub))] += 1\n    # print(d)\n    # print(len(d))\n    # # Explanation\n    # '''\n    # For example, if the input string is ",
        "num_ids": 13
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # dic = {i:s.count(i) for i in s}\n    # for key,value in dic.items():\n    #     print key,value\n",
        "num_ids": 43
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    m = len(s)\n    for i in range(1, n + 1):\n        # Find all possible substrings with the length of i\n        for j in range(n - i + 1):\n            sum1 = 0\n            for k in range(i):\n                sum1 += int(s[k])\n            if sum1 == i:\n                m += 1\n",
        "num_ids": 96
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    for i in range(len(s)):\n        d[s[i]] += 1\n        if i < len(s) - 1:\n            d[s[i] + s[i + 1]] += 1\n    return sum([v for v in d.values()])\n",
        "num_ids": 76
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if s == '':\n        return 0\n    count = 0\n    for i in range(1, len(s)+1):\n        temp = s[0:i]\n        if int(temp) == i:\n            count += 1\n    return count\n",
        "num_ids": 62
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            d[s[i:j+1]] += 1\n    return sum(d[s[i:j+1]] for i in range(len(s)) for j in range(i, len(s)))\n    \ndef count_Substrings_2(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    d[0] = 1\n    for i in range(len(s)):\n        count = 0\n        for j in range(i, len(s)):\n            count += d[j-i]\n            d[count+j-i] += 1\n    return sum(d[j] for j in range(len(s)))\n",
        "num_ids": 90
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    t = defaultdict(int)\n    for i in range(n):\n        for j in range(i,n):\n            t[s[i:j+1]] += 1\n    ans = 0\n    for i in t:\n        if int(i)==len(i):\n            ans += t[i]\n    return ans\n",
        "num_ids": 89
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    length = len(s)\n    number = 0\n    for i in xrange(length):\n        for j in xrange(i, length):\n            if sum(map(int, s[i:j+1])) == j-i+1:\n                number += 1\n    return number\n",
        "num_ids": 71
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    table = defaultdict(int)\n    table['0'] = 1\n    table['1'] = 1\n    table['2'] = 1\n    table['3'] = 1\n    table['4'] = 1\n    table['5'] = 1\n    table['6'] = 1\n    table['7'] = 1\n    table['8'] = 1\n    table['9'] = 1\n    for i in range(1,len(s)):\n        tmp = s[i-1]\n        table[tmp]+=1\n        j = 1\n        while j <= i:\n            tmp += s[i-j]\n            if table[tmp] == 0:\n                table[tmp]+=1\n            j+=1\n    return sum(table.values())\ndef longest_Substring(s):\n    table = defaultdict(int)\n    table['0'] = 0\n    table['1'] = 0\n    table['2'] = 0\n    table['3'] = 0\n    table['4'] = 0\n    table['5'] = 0\n    table['6'] = 0\n    table['7'] = 0\n    table['8'] = 0\n    table['9'] = 0\n    res = 0\n    for i in range(1,len(s)):\n        tmp = s[i-1]\n        table[tmp]+=1\n        if table[tmp] == 1:\n            res = max(res,i-1)\n        j = 1\n        while j <= i:\n            tmp += s[i-j]\n            if table[tmp] == 0:\n                table[tmp]+=1\n                res = max(res,i-j+1)\n            j+=1\n    return res\ndef longest_palindromic_Substring(s):\n    table = defaultdict(int)\n    table['0'] = 0\n    table['1'] = 0\n    table['2'] = 0\n    table['3'] = 0\n    table['4'] = 0\n    table['5'] = 0\n    table['6'] = 0\n    table['7'] = 0\n    table['8'] = 0\n    table['9'] = 0\n    res = 0\n    for i in range(1,len(s)):\n        tmp = s[i-1]\n        table[tmp]+=1\n        if table[tmp] == 1:\n            res = max(res,i-1)\n        j = 1\n        while j <= i:\n            tmp += s[i-j]\n            if table[tmp] == 0:\n                table[tmp]+=1\n                res = max(res,i-j+1)\n            j+=1\n    return res\ndef generate_max_product(num1,num2):\n    '''\n    Given a list of ints, \n    return a list of ints, the maximum product of three ints in the list.\n    '''\n    table = defaultdict(int)\n    for i in range(len(num1)):\n        table[num1[i]]+=1\n        table[num2[i]]+=1\n    res = []\n    for i in range(len(num1)):\n        if table[num1[i]] == 1:\n            if table[num2[i]] == 1:\n                res.append(num1[i]*num2[i])\n    return res\ndef duplicate_number(nums):\n    '''\n    Given an array of ints,\n    return array a 2 ints,\n    returns the first int as the duplicate number,\n    and the second int as the number of times the number occurred.\n    '''\n    table = defaultdict(int)\n    res = [0,0]\n    for i in range(len(nums)):\n        table[nums[i]]+=1\n        if table[nums[i]] == 2:\n            res[0] = nums[i]\n        if table[nums[i]] == 3:\n            res[1] += 1\n    return res\ndef sum_of_left_leaves(tree):\n    '''\n    Given a binary tree, return the sum of all of the left leaves.\n    '''\n    table = defaultdict(int)\n    table[tree] = 0\n    s = 0\n    q = [tree]\n    while len(q):\n        t = q.pop()\n        if t.left:\n            if not t.left.left and not t.left.right:\n                s+=t.left.val\n            else:\n                q.append(t.left)\n        if t.right:\n            q.append(t.right)\n    return s\ndef sum_of_path_numbers(tree):\n    '''\n    Given a binary tree, count the number of paths that go from the root node to a leaf node.\n    '''\n    table = defaultdict(int)\n    table[tree] = 0\n    q = [tree]\n    while len(q):\n        t = q.pop()\n        if t.left:\n            table[t.left] += table[t.right] + table[t.left]\n            table[t.left.left] += table[t.left]\n            table[t.left.right] += table[t.left]\n            q.append(t.left)\n        if t.right:\n            table[t.right] += table[t.left] + table[t.right]\n            table[t.right.left] += table[t.right]\n            table[t.right.right] += table[t.right]\n            q.append(t.right)\n    return table[tree]\ndef word_break(s,wordDict):\n    '''\n    Given a string s and a list of strings wordDict,\n    return true if s can be segmented into a space-separated sequence of one or more dictionary words.\n    Note:\n    - s and wordDict may contain special characters but these will not appear in the dictionary.\n    - dictionary words are not the same length as s.\n    - there may be multiple valid segmentations.\n    '''\n    table = defaultdict(int)\n    for i in range(len(s)):\n        tmp = s[i]\n        table[tmp]+=1\n    if s[0] not in wordDict:\n        return False\n    table[s[0]]-=1\n    for i in range(1,len(s)):\n        tmp = s[i]\n        if table[tmp] == 0:\n            return False\n        table[tmp]-=1\n        tmp = s[:i+1]\n        if tmp not in wordDict:\n            return False\n        table[tmp]-=1\n    return True\ndef is_one_edit_different(s1,s2):\n    '''\n    Given two strings s1 and s2, return true if they are both one edit distance apart, otherwise return false.\n    '''\n    if len(s1) > len(s2):\n        return one_edit_different(s2,s1)\n    if len(s2) > len(s1):\n        return one_edit_different(s1,s2)\n    for i in range(len(s1)):\n        if s1[i]!= s2[i]:\n            if len(s1) == len(s2):\n                return s1[i+1:] == s2[i+1:]\n            return s2[i+1:] == s1[i+1:]\n    return len(s1) + 1 == len(s2)\ndef one_edit_different(s1,s2):\n    '''\n    Given two strings s1 and s2, return true if they are both one edit distance apart, otherwise return false.\n    '''\n    table = defaultdict(int)\n    for i in range(len(s1)):\n        table[s1[i]]+=1\n        table[s2[i]]+=1\n    for i in range(len(s1)):\n        if table[s1[i]] == 1:\n            if table[s1[i]]!= table[s2[i]]:\n                return True\n        if table[s2[i]] == 1:\n            if table[s2[i]]!= table[s1[i]]:\n                return True\n    return False\ndef zero_matrix(matrix):\n    table = defaultdict(int)\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0]",
        "num_ids": 182
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    for i in xrange(len(s)):\n        for j in xrange(i,len(s)):\n            d[s[i:j+1]]+=1\n    print d\n    return sum(d[i]*(d[i]-1)/2 for i in d)\n",
        "num_ids": 80
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < min_num:\n            min_num = xs[i]\n    return min_num\n",
        "num_ids": 57
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    x = xs[0]\n    for i in xs[1:]:\n        if i < x:\n            x = i\n    return x\n",
        "num_ids": 38
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diffs = []\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if abs(test_list[i] - test_list[j]) in diffs:\n                continue\n            else:\n                diffs.append(abs(test_list[i] - test_list[j]))\n    return max(diffs)\n",
        "num_ids": 102
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) == 1:\n        return 0\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        diff = test_list[i+1]-test_list[i]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n",
        "num_ids": 80
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if test_list:\n        max_diff = 0\n        for i in range(len(test_list)):\n            for j in range(i + 1, len(test_list)):\n                max_diff = max(abs(test_list[i] - test_list[j]), max_diff)\n        return max_diff\n    else:\n        return 0\n",
        "num_ids": 89
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = -1\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "num_ids": 83
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if abs(test_list[i] - test_list[j]) > max_difference:\n                max_difference = abs(test_list[i] - test_list[j])\n    return max_difference\n",
        "num_ids": 91
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    sorted_list = sorted(test_list)\n    i = 0\n    while i < len(sorted_list) - 1:\n        j = i + 1\n        while j < len(sorted_list):\n            if abs(sorted_list[i] - sorted_list[j]) > 0:\n                return abs(sorted_list[i] - sorted_list[j])\n            j += 1\n        i += 1\n    return None\n",
        "num_ids": 109
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Algorithm: Sort the list and check the first and last element, then find the difference between them\n    # O(nlogn) time, O(1) space\n    if not test_list:\n        return 0\n    test_list.sort()\n    return test_list[-1] - test_list[0]\n",
        "num_ids": 77
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    result = 0\n    test_list = sorted(test_list)\n    for i in xrange(len(test_list) - 1):\n        result = max(result, test_list[i + 1] - test_list[i])\n    return result\n",
        "num_ids": 63
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pair_list = []\n    for i in range(0, len(test_list), 2):\n        pair_list.append((test_list[i], test_list[i+1]))\n    diff_list = []\n    for i in pair_list:\n        diff_list.append(abs(i[0]-i[1]))\n    return max(diff_list)\n",
        "num_ids": 93
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    first = test_list[0][0]\n    second = test_list[0][1]\n    min_first = min(first, second)\n    max_first = max(first, second)\n    min_second = min(first, second)\n    max_second = max(first, second)\n    for i in range(1, len(test_list)):\n        if test_list[i][0] < min_first:\n            min_first = test_list[i][0]\n        if test_list[i][0] > max_first:\n            max_first = test_list[i][0]\n        if test_list[i][1] < min_second:\n            min_second = test_list[i][1]\n        if test_list[i][1] > max_second:\n            max_second = test_list[i][1]\n    return max_second - min_first\n",
        "num_ids": 220
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    new_list = sorted(subjectmarks,key = lambda t: t[1])\n    return new_list\n",
        "num_ids": 28
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    def sorted_marks(subjectmarks):\n        '''\n        Sort the list of tuples.\n        '''\n        for i in range(0, len(subjectmarks)):\n            for j in range(i, len(subjectmarks)):\n                if subjectmarks[i][1] < subjectmarks[j][1]:\n                    subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n                elif subjectmarks[i][1] == subjectmarks[j][1]:\n                    if subjectmarks[i][0] > subjectmarks[j][0]:\n                        subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n    sorted_marks(subjectmarks)\n    return subjectmarks\n",
        "num_ids": 148
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x:x[1])\n",
        "num_ids": 19
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # return sorted(subjectmarks, key = lambda i: i[1])\n    return sorted(subjectmarks, key=lambda x: x[1])\n    \n",
        "num_ids": 39
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    for i,j in subjectmarks:\n        subjectmarks[subjectmarks.index((i,j))] = (i,j)\n    return subjectmarks\ndef user_interface():\n    '''\n    User interface for the program.\n    '''\n    subjects = ['Physics','Chemistry','Maths','English','Computer','Hindi']\n    subjectmarks = {}\n    print 'Welcome to the subject wise marks program'\n    print 'Please enter the marks for the subjects below'\n    print 'Enter the subject name'\n    for i in subjects:\n        print i,\n        subjectmarks[i] = int(raw_input())\n    subjectmarks = subject_marks(subjectmarks)\n    print 'The student with the highest marks is',subjectmarks[max(subjectmarks.iteritems(), key=operator.itemgetter(1))[0]]\n    print 'The student with the lowest marks is',subjectmarks[min(subjectmarks.iteritems(), key=operator.itemgetter(1))[0]]\nuser_interface()",
        "num_ids": 179
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    list_marks = []\n    list_marks = subjectmarks\n    for mark in list_marks:\n        list_marks[list_marks.index(mark)] = (mark[0], mark[1])\n    return list_marks\n",
        "num_ids": 56
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    temp = sorted(subjectmarks, key=lambda x: x[1])\n    return temp\n",
        "num_ids": 24
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key = lambda x:x[1])\n    return subjectmarks\n",
        "num_ids": 23
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks = sorted(subjectmarks, key=lambda x:x[1])\n    return subjectmarks\n",
        "num_ids": 26
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sortedlist = sorted(subjectmarks,key=lambda x:x[1],reverse=True)\n    return sortedlist\n",
        "num_ids": 31
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 45
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 37
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    #if data_list is a list of lists, add all elements together\n    #if data_list is a list of scalars, add all elements together\n    if isinstance(data_list, list):\n        return sum(recursive_list_sum(element) for element in data_list)\n    else:\n        return data_list\n",
        "num_ids": 80
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    if len(data_list) == 0:\n        return total\n    else:\n        for item in data_list:\n            total += item\n        return recursive_list_sum(data_list[1:]) + total\n",
        "num_ids": 59
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 41
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 42
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for each in data_list:\n        if isinstance(each, list):\n            total += recursive_list_sum(each)\n        else:\n            total += each\n    return total\n",
        "num_ids": 51
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for i in data_list:\n        if isinstance(i, list):\n            sum += recursive_list_sum(i)\n        else:\n            sum += i\n    return sum\n",
        "num_ids": 51
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return sum(data_list)\n",
        "num_ids": 72
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        if len(data_list) == 0:\n            return 0\n        elif len(data_list) == 1:\n            return data_list[0]\n        else:\n            return data_list[0] + recursive_list_sum(data_list[1:])\n    else:\n        return data_list\n",
        "num_ids": 89
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i >= 0:\n            count = count + 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            count = count + 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n    \ndef neg_count(list):\n    '''\n    Write a python function to count the number of negative numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i < 0:\n            count += 1\n    return count\n    \ndef even_count(list):\n    '''\n    Write a python function to count the number of even numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i % 2 == 0:\n            count += 1\n    return count\n    \ndef odd_count(list):\n    '''\n    Write a python function to count the number of odd numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i % 2!= 0:\n            count += 1\n    return count\n    \ndef pos_neg(list):\n    '''\n    Write a python function to count the number of positive and negative numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n        elif i < 0:\n            count += 1\n    return count\n    \ndef min_max(list):\n    '''\n    Write a python function to return the smallest and largest number in a list.\n    '''\n    min_val = list[0]\n    max_val = list[0]\n    for i in list:\n        if i < min_val:\n            min_val = i\n        elif i > max_val:\n            max_val = i\n    return min_val, max_val\n    \ndef sum_list(list):\n    '''\n    Write a python function to return the sum of all numbers in a list.\n    '''\n    total = 0\n    for i in list:\n        total += i\n    return total\n    \ndef max_list(list):\n    '''\n    Write a python function to return the maximum value in a list.\n    '''\n    max_val = list[0]\n    for i in list:\n        if i > max_val:\n            max_val = i\n    return max_val\n    \ndef is_member(list):\n    '''\n    Write a python function to check whether a number is in a list.\n    '''\n    if list.count(list[0]) > 0:\n        return True\n    else:\n        return False\n        \ndef is_in_list(list):\n    '''\n    Write a python function to check whether a number is in a list.\n    '''\n    for i in list:\n        if i == list[0]:\n            return True\n    return False\n    \ndef avg(list):\n    '''\n    Write a python function to calculate the average of a list.\n    '''\n    total = 0\n    for i in list:\n        total += i\n    avg = total / len(list)\n    return avg\n    \ndef get_list(list):\n    '''\n    Write a python function to get a list of a given length.\n    '''\n    get_list = []\n    for i in range(len(list)):\n        get_list.append(list[i])\n    return get_list\n    \ndef reverse_list(list):\n    '''\n    Write a python function to reverse a list.\n    '''\n    reverse_list = []\n    for i in range(len(list)):\n        reverse_list.append(list[-i-1])\n    return reverse_list\n    \ndef chop(list):\n    '''\n    Write a python function to chop a list in half.\n    '''\n    length = len(list)\n    new_list = []\n    half = int(length / 2)\n    if length % 2 == 0:\n        new_list.append(list[half])\n        new_list.append(list[half-1])\n    else:\n        new_list.append(list[half])\n    return new_list\n    \ndef chop_2(list):\n    '''\n    Write a python function to chop a list in half.\n    '''\n    length = len(list)\n    new_list = []\n    half = int(length / 2)\n    if length % 2 == 0:\n        new_list.append(list[half])\n        new_list.append(list[half-1])\n    else:\n        new_list.append(list[half])\n    return new_list\n    \ndef get_middle(list):\n    '''\n    Write a python function to get the middle item from a list.\n    '''\n    if len(list) % 2 == 0:\n        return list[len(list) // 2 - 1], list[len(list) // 2]\n    else:\n        return list[len(list) // 2]\n    \ndef max_end(list):\n    '''\n    Write a python function to get the maximum value at the end of a list.\n    '''\n    if len(list) % 2 == 0:\n        return max(list[-1], list[-2])\n    else:\n        return max(list[-1])\n    \ndef min_end(list):\n    '''\n    Write a python function to get the maximum value at the end of a list.\n    '''\n    if len(list) % 2 == 0:\n        return min(list[-1], list[-2])\n    else:\n        return min(list[-1])\n    \ndef thirds(list):\n    '''\n    Write a python function to get the third, fourth, and fifth largest numbers in a list.\n    '''\n    if len(list) % 3 == 0:\n        new_list = []\n        new_list.append(list[-1])\n        new_list.append(list[-2])\n        new_list.append(list[-3])\n        return new_list\n    elif len(list) % 3 == 1:\n        new_list = []\n        new_list.append(list[-1])\n        new_list.append(list[-2])\n        return new_list\n    else:\n        new_list = []\n        new_list.append(list[-1])\n        new_list.append(list[-2])\n        new_list.append(list[-3])\n        return new_list\n    \ndef freq(list):\n    '''\n    Write a python function to return a list of the frequency of each number in a list.\n    '''\n    count = []\n    for i in list:\n        if i in count:\n            count[count.index(i)] += 1\n        else:\n            count.append(1)\n    return count\n    \ndef sort_list(list):\n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    for i in range(len(list)):\n        for j in range(len(list) - i - 1):\n            if list[j] > list[j+1]:\n                temp = list[j+1]\n                list[j+1] = list[j]\n                list[j] = temp\n    return list\n    \ndef sort_list_2(list):\n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    for i in range(len(list)):\n        for j in range(len(list) - i - 1):\n            if list[j] < list[j+1]:\n                temp = list[j+1]\n                list[j+1] = list[j]\n                list[j] = temp\n    return list\n    \ndef sort_list_3(list):\n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    for i in range(len(list)):\n        for j in range(len(list) - i - 1):\n            if list[j] > list[j+1]:\n                temp = list[j+1]\n                list[j+1] = list[j]\n                list[j] = temp\n    return list\n    \ndef rotate_left(list):\n    '''\n    Write a python function to rotate a list to the left.\n    '''\n    if len(list) > 0:\n        return list[1:] + list[0:1]\n    else:\n        return list\n    \ndef rotate_left_2(list):",
        "num_ids": 45
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for num in list:\n        if num > 0:\n            pos_count += 1\n    return pos_count\n",
        "num_ids": 36
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            count = count + 1\n    print count\n",
        "num_ids": 40
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count+=1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i >= 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n    \ndef partition_elements(n,m):\n    '''\n    Write a function to find the number of partitions of n using m elements.\n    '''\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    elif m == 0:\n        return 0\n    else:\n        return partition_elements(n-m,m) + partition_elements(n,m-1)\n",
        "num_ids": 67
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n",
        "num_ids": 53
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*bell_number(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return bell(n)\n",
        "num_ids": 9
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n",
        "num_ids": 46
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n > 1:\n        return bell_number(n-1) + bell_number(n-2)\n    else:\n        return 0\n",
        "num_ids": 59
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return bell_numbers[n]\n",
        "num_ids": 12
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 2:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n",
        "num_ids": 37
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    return bell_number(n-1) + bell_number(n-2)\n",
        "num_ids": 44
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n",
        "num_ids": 48
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)<=2:\n        return True\n    if A[0]<=A[1]:\n        for i in range(2,len(A)):\n            if A[i-1]<=A[i]<=A[i-1]:\n                pass\n            else:\n                return False\n    else:\n        return False\n",
        "num_ids": 86
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n        all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n    ",
        "num_ids": 60
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i+1] for i in range(len(A)-1)) or all(A[i] >= A[i+1] for i in range(len(A)-1)))\n",
        "num_ids": 55
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return A == sorted(A) or A == sorted(A, reverse = True)\n",
        "num_ids": 22
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if A == None:\n        return False\n    \n    start = -2147483648\n    end = 2147483648\n    \n    for i in xrange(0, len(A)):\n        if A[i] < start:\n            start = A[i]\n        if A[i] > end:\n            end = A[i]\n    \n    if start > end:\n        return True\n    return False\n    ",
        "num_ids": 105
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if A == sorted(A):\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(1, len(A)):\n        if A[i-1] > A[i]:\n            return 0\n    return 1\n",
        "num_ids": 38
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (A[0]<=A[1]) and (A[1]<=A[2]) and (A[2]<=A[3]) and (A[3]<=A[4]) and (A[4]<=A[5])\n",
        "num_ids": 64
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    i=0\n    j=0\n    n=len(A)\n    #print(A)\n    if n==1:\n        return 1\n    if n==2:\n        if A[i]<A[j]:\n            return 1\n        else:\n            return 0\n    while i<n-1:\n        while j<n-1:\n            if A[i]<A[j]:\n                j+=1\n            else:\n                return 0\n        i+=1\n        j=i\n    return 1\n",
        "num_ids": 126
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if type(s) is not list:\n        return False\n    if l == s:\n        return True\n    if len(l) < len(s):\n        return False\n    for i in range(len(s)):\n        if l[i] == s[i]:\n            pass\n        else:\n            return False\n    return True\n",
        "num_ids": 83
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l\n",
        "num_ids": 8
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    elif s[0] in l:\n        if l.index(s[0]) + len(s) <= len(l):\n            return is_sublist(l[l.index(s[0])+len(s):], s[1:])\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 90
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l\n",
        "num_ids": 8
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if not s[0] in l:\n        return is_sublist(l[1:], s[1:])\n    return is_sublist(l[1:], s)\n",
        "num_ids": 66
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if len(l) < len(s):\n        return False\n    for i in range(len(s)):\n        if l[i] == s[0]:\n            if is_sublist(l[i:], s[1:]):\n                return True\n    return False\n",
        "num_ids": 79
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # for i in l:\n    #     if i == s:\n    #         return True\n",
        "num_ids": 25
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l\n",
        "num_ids": 8
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == s:\n        return True\n    elif l == []:\n        return False\n    else:\n        return is_sublist(l[1:], s) or is_sublist(l[1:], s[:-1])\n",
        "num_ids": 60
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) <= len(s):\n        return False\n",
        "num_ids": 18
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return all([len(t) == len(Input[0]) for t in Input])\n",
        "num_ids": 23
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return all(len(x) == len(Input[0]) for x in Input)\n",
        "num_ids": 23
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    #Your Code Here\n    length = len(Input[0])\n    for x in Input:\n        if len(x)!= length:\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    n = len(Input)\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True\n",
        "num_ids": 62
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    if len(Input) == 0:\n        return False\n    elif len(Input) == 1:\n        return True\n    else:\n        a = len(Input[0])\n        for i in range(1, len(Input)):\n            if len(Input[i])!= a:\n                return False\n        return True\n",
        "num_ids": 82
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Length = []\n    for i in range(len(Input)):\n        Length.append(len(Input[i]))\n    for i in range(len(Length) - 1):\n        if Length[i]!= Length[i + 1]:\n            return False\n    return True\n",
        "num_ids": 69
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    List = []\n    for i in range(len(Input)):\n        List.append(len(Input[i]))\n    if len(set(List))==1:\n        return True\n    else:\n        return False\n",
        "num_ids": 56
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    equal_list = []\n    for each in Input:\n        if len(each) in equal_list:\n            equal_list.append(len(each))\n        else:\n            equal_list.append(len(each))\n    return equal_list\n    \n    ",
        "num_ids": 65
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    N=len(Input)\n    for i in range(N):\n        if len(Input[i])!=len(Input[0]):\n            return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    tuple_length = len(Input)\n    check = True\n    for i in range(tuple_length):\n        for j in range(i+1, tuple_length):\n            if len(Input[i])!= len(Input[j]):\n                check = False\n    return check\n",
        "num_ids": 74
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    sorted_list = list(nums)\n    gap = len(sorted_list)\n    swapped = True\n",
        "num_ids": 31
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap!= 1 or swapped == 1:\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(0, n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n",
        "num_ids": 131
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Combine Sort\n    # 1. Sort half of the list\n    # 2. Compare each element with the one on the right side\n    # 3. Move the larger element to the right\n    # 4. Repeat till the list is sorted\n",
        "num_ids": 55
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    gap = length\n    swapped = True\n    while gap > 1 or swapped == True:\n        gap = max(1, int(gap / 1.25))\n        swapped = False\n        for i in range(0, length-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n    return nums\n",
        "num_ids": 122
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.3))\n        swapped = False\n        for i in range(0, n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n",
        "num_ids": 115
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    shrink = 1.3\n    # keep trying until the list is sorted\n    while gap!= 1:\n        # break the list into two pieces\n        gap = int(gap / shrink)\n        for i in range(len(nums) - gap):\n            j = i + gap\n            # sort them\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n        # repeat\n        shrink = 1.3\n    return nums\n",
        "num_ids": 137
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    gap = 1\n",
        "num_ids": 16
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    swapped = True\n    \n    while swapped:\n        swapped = False\n        for i in range(len(nums)-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n                \n                \ndef insertion_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(1, len(nums)):\n        j = i\n        while j > 0 and nums[j] < nums[j-1]:\n            nums[j], nums[j-1] = nums[j-1], nums[j]\n            j -= 1\n                \ndef partition(nums, start, end):\n    pivot = nums[end]\n    i = start - 1\n    \n    for j in range(start, end):\n        if nums[j] < pivot:\n            i += 1\n            nums[i], nums[j] = nums[j], nums[i]\n            \n    nums[i+1], nums[end] = nums[end], nums[i+1]\n    return i+1\n    \n",
        "num_ids": 193
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n        \n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while gap!= 1 or swapped:\n        swapped = False\n        gap = max(1, int(gap/1.25))\n        \n        for i in range(0, n-gap):\n            if nums[i] > nums[i+gap]:\n                swap(i, i+gap)\n                swapped = True\n                \n    return nums\n",
        "num_ids": 145
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    \n    size = len(nums)\n    gap = size//2\n    \n    while gap > 0:\n        for i in range(gap, size):\n            tmp = nums[i]\n            j = i\n            while j >= gap and nums[j - gap] > tmp:\n                nums[j] = nums[j - gap]\n                j -= gap\n            nums[j] = tmp\n        gap = gap // 2\n        \n    return nums\n    \ndef insertion_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    \n    size = len(nums)\n    \n    for i in range(1, size):\n        tmp = nums[i]\n        j = i\n        while j > 0 and nums[j - 1] > tmp:\n            nums[j] = nums[j - 1]\n            j -= 1\n        nums[j] = tmp\n        \n    return nums\n    \ndef selection_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    \n    size = len(nums)\n    \n    for i in range(size):\n        min_idx = i\n        for j in range(i + 1, size):\n            if nums[j] < nums[min_idx]:\n                min_idx = j\n                \n        tmp = nums[i]\n        nums[i] = nums[min_idx]\n        nums[min_idx] = tmp\n        \n    return nums\n    \ndef shell_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    \n    size = len(nums)\n    \n    d = size // 2\n    while d >= 1:\n        for i in range(d, size):\n            tmp = nums[i]\n            j = i\n            while j >= d and nums[j - d] > tmp:\n                nums[j] = nums[j - d]\n                j -= d\n            nums[j] = tmp\n        d //= 2\n        \n    return nums\n    \ndef heap_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    \n    build_heap(nums)\n    \n    size = len(nums)\n    for i in range(size - 1, 0, -1):\n        tmp = nums[0]\n        nums[0] = nums[i]\n        nums[i] = tmp\n        \n        sift_down(0, i - 1, nums)\n        \n    return nums\n",
        "num_ids": 113
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return n in [i*i for i in range(10)]\n",
        "num_ids": 18
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    for i in range(1,n):\n        if i*i == n:\n            return True\n        elif i*i > n:\n            return False\n    return False\n",
        "num_ids": 46
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n <= 0:\n        return False\n    x = math.floor(math.sqrt(n))\n    y = math.floor(math.sqrt(n+x*x))\n    if (x*x) - (y*y) == n:\n        return True\n    else:\n        return False\n",
        "num_ids": 76
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return n**2 - (n-1)**2\n",
        "num_ids": 16
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(0,n):\n        for j in range(0,n):\n            if i*i+j*j==n:\n                return True\n    return False\n",
        "num_ids": 45
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,int(n**(1/2))+1):\n        if i**2 == n:\n            return True\n        elif i**2 < n:\n            return False\n        else:\n            if i**2 - n in range(1,n+1):\n                return True\n            else:\n                return False\n",
        "num_ids": 83
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    from math import sqrt\n    for i in range(1, int(sqrt(n)+1)):\n        if (i**2) - n in range(1, n):\n            return True\n    return False\n",
        "num_ids": 53
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    #take input from the user\n    num=int(raw_input(\"Enter the number: \"))\n    #compute the absolute difference between the square of the number and the square of the sum of the number and the number itself\n    if abs(num**2 - (num+1)**2) == abs(num**2 - (num-1)**2):\n        print 'The number',num,'can be represented as the difference of two squares'\n    else:\n        print 'The number',num,'cannot be represented as the difference of two squares'\n",
        "num_ids": 128
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def is_square(x):\n        root = int(math.sqrt(x))\n        return root * root == x\n",
        "num_ids": 32
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    x = int(sqrt(n))\n    if x*x == n:\n        return True\n    else:\n        return False\n    \ndef dif_Square_recursive(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0:\n        return True\n    else:\n        x = int(sqrt(n))\n        return dif_Square_recursive(n-x*x)\n        \ndef Sum_of_Digits(n): \n    '''\n    Write a python function to return the sum of the digits of a given number.\n    '''\n    while n > 0:\n        x = n % 10\n        n = n//10\n        return x + Sum_of_Digits(n)\n",
        "num_ids": 37
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for p in patterns:\n        if p[0] == '#':\n            if colors[-1] == p[1:]:\n                colors.pop()\n            else:\n                return False\n        else:\n            if colors[-1]!= p:\n                return False\n            colors.pop()\n    return True\n",
        "num_ids": 80
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        for j in range(i, len(colors)):\n            if patterns[i] == colors[j]:\n                return True\n    return False\n",
        "num_ids": 50
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    # each pattern is a list of 2 integers\n    for pattern in patterns:\n        i = pattern[0]\n        j = pattern[1]\n        if colors[i]!= colors[j]:\n            return False\n",
        "num_ids": 73
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if patterns[i]!= colors[i]:\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) < len(patterns):\n        return False\n    else:\n        return patterns[0:len(colors)] == colors\n    \nif __name__ == '__main__':\n    print is_samepatterns(['r', 'b', 'b', 'r', 'r'], ['r', 'r', 'r', 'r', 'b']",
        "num_ids": 90
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    colors = [color[0] for color in colors]\n    for index in range(len(patterns)):\n        pattern = patterns[index]\n        if index == len(patterns) - 1:\n            return (colors[0] == pattern)\n        else:\n            return (colors[0] == patterns[index + 1]) and is_samepatterns(colors[1:], patterns[index:])\n            \n    \ndef is_samepatterns2(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) == 1:\n        return True\n    else:\n        pattern = patterns[0]\n        if pattern == colors[0]:\n            return is_samepatterns(colors[1:], patterns[1:])\n        else:\n            return False\n",
        "num_ids": 66
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    p = patterns\n    n = len(p)\n",
        "num_ids": 15
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    elif len(colors) == 0:\n        return True\n    else:\n        p = patterns[0]\n        if p[0] == colors[0]:\n            if is_samepatterns(colors[1:], patterns[1:]):\n                return True\n            else:\n                return False\n        else:\n            return False\n",
        "num_ids": 100
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if not colors or not patterns:\n        return False\n    if len(colors)!= len(patterns):\n        return False\n    colors = colors[:]\n    for pattern in patterns:\n        if len(pattern) > len(colors):\n            return False\n        for i in pattern:\n            if colors[0] == i:\n                colors.pop(0)\n            else:\n                return False\n    return True\n    ",
        "num_ids": 104
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if colors == patterns:\n        return True\n    return False\n",
        "num_ids": 17
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # test_list = [(1,2,3),(2,3,4),(3,4,5),(4,5,6)]\n    # K = 2\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 3\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 5\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 11\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 21\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 31\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 41\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 51\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 61\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 71\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 81\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 91\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 101\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 111\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 121\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 131\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 141\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 151\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 161\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 171\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 181\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 191\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 201\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 211\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 221\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 231\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 241\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 251\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 261\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 271\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 281\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 291\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 301\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 311\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 321\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 331\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 341\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 351\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 361\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 371\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 381\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 381\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 391\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 401\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 411\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 421\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 431\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 441\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    # K = 451\n    # test_list = [(1,2,3,4),(2,3,4,5),(3,4,5,6)]\n    ",
        "num_ids": 2003
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [x for x in test_list if all(y % K == 0 for y in x)]\n",
        "num_ids": 26
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    output = []\n    for i in test_list:\n        if all([i%k == 0 for i in i]):\n            output.append(i)\n    return output\n",
        "num_ids": 44
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # for each tuple\n    for tuple in test_list:\n        # if all elements of tuple are divisible by k\n        if all([i % K == 0 for i in tuple]):\n            # yield tuple\n            yield tuple\n",
        "num_ids": 56
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for tuple in test_list:\n        if tuple[0] % K == 0 and tuple[1] % K == 0:\n            tuples.append(tuple)\n    return tuples\n",
        "num_ids": 53
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    answer = []\n    for t in test_list:\n        if all(a % K == 0 for a in t):\n            answer.append(t)\n    return answer\n",
        "num_ids": 43
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    # use a generator\n    return (x for x in test_list if sum(x) % K == 0)\n",
        "num_ids": 31
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    div_tuples = []\n    for i in test_list:\n        for j in i:\n            if j % K!= 0:\n                break\n        else:\n            div_tuples.append(i)\n    return div_tuples\n",
        "num_ids": 61
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    output = []\n    for i in test_list:\n        if len(i) >= K:\n            if all(i[x] % K == 0 for x in xrange(len(i))):\n                output.append(i)\n    return output\n",
        "num_ids": 62
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for element in test_list:\n        if all(map(lambda x: x % K == 0, element)):\n            result.append(element)\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11 == 0\n",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\ndef is_Palindrome(n):\n    '''\n    Write a python function to find whether a number is a palindrome.\n    '''\n    if n == int(str(n)[::-1]):\n        return True\n    else:\n        return False\ndef is_Armstrong(n):\n    '''\n    Write a python function to find whether a number is an Armstrong number.\n    '''\n    s = 0\n    if n >= 10:\n        for i in str(n):\n            s += int(i)**3\n    else:\n        return False\n    if s == n:\n        return True\n    else:\n        return False\ndef is_Prime(n):\n    '''\n    Write a python function to find whether a number is prime.\n    '''\n    if n > 1:\n        if n == 2:\n            return True\n        elif n%2 == 0:\n            return False\n        else:\n            for i in range(2,n):\n                if n%i == 0:\n                    return False\n        return True\n    else:\n        return False\ndef is_Perfect(n):\n    '''\n    Write a python function to find whether a number is a perfect number.\n    '''\n    s = 0\n    for i in range(1,n):\n        if n%i == 0:\n            s += i\n    if s == n:\n        return True\n    else:\n        return False\ndef is_Armstrong_range(a,b):\n    '''\n    Write a python function to find whether a range of numbers are armstrong numbers.\n    '''\n    for i in range(a,b+1):\n        if is_Armstrong(i):\n            print i\ndef is_Pandigital(n):\n    '''\n    Write a python function to find whether a number is pandigital.\n    '''\n    if len(str(n)) == 9:\n        s = 0\n        for i in str(n):\n            s += int(i)\n        if s == n:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_Trinum(n):\n    '''\n    Write a python function to find whether a number is a trinum.\n    '''\n    s = 0\n    for i in range(1,n):\n        if n%i == 0:\n            s += i\n    if s == n:\n        return True\n    else:\n        return False\ndef is_Harshad(n):\n    '''\n    Write a python function to find whether a number is a harshad number.\n    '''\n    if is_Prime(n):\n        if is_Prime(n+2):\n            s = 0\n            for i in range(1,n):\n                if n%i == 0:\n                    s += i\n            if n%(s+2) == 0:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\ndef is_Harshad_range(a,b):\n    '''\n    Write a python function to find whether a range of numbers is a harshad number.\n    '''\n    for i in range(a,b+1):\n        if is_Harshad(i):\n            print i\ndef is_Largest(n):\n    '''\n    Write a python function to find whether a number is the largest.\n    '''\n    if n == max(n):\n        return True\n    else:\n        return False\ndef is_Largest_range(a,b):\n    '''\n    Write a python function to find whether a range of numbers is the largest.\n    '''\n    for i in range(a,b+1):\n        if is_Largest(i):\n            print i\ndef is_Factors(n):\n    '''\n    Write a python function to find whether a number is a factor of another number.\n    '''\n    a = 2\n    while n%a!= 0:\n        a += 1\n    if a == n:\n        return True\n    else:\n        return False\ndef is_Factors_range(a,b):\n    '''\n    Write a python function to find whether a range of numbers is a factor of another number.\n    '''\n    for i in range(a,b+1):\n        if is_Factors(i) == True:\n            print i\ndef is_Even(n):\n    '''\n    Write a python function to find whether a number is even.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False\ndef is_Even_range(a,b):\n    '''\n    Write a python function to find whether a range of numbers is even.\n    '''\n    for i in range(a,b+1):\n        if is_Even(i):\n            print i\ndef is_Prime_number(n):\n    '''\n    Write a python function to find whether a number is prime.\n    '''\n    if n > 1:\n        if n == 2:\n            return True\n        elif n%2 == 0:\n            return False\n        else:\n            for i in range(2,n):\n                if n%i == 0:\n                    return False\n        return True\n    else:\n        return False\ndef is_Prime_number_range(a,b):\n    '''\n    Write a python function to find whether a range of numbers is prime.\n    '''\n    for i in range(a,b+1):\n        if is_Prime_number(i):\n            print i\ndef is_Odd(n):\n    '''\n    Write a python function to find whether a number is odd.\n    '''\n    if n%2 == 0:\n        return False\n    else:\n        return True\ndef is_Odd_range(a,b):\n    '''\n    Write a python function to find whether a range of numbers is odd.\n    '''\n    for i in range(a,b+1):\n        if is_Odd(i):\n            print i\ndef is_Even_number(n):\n    '''\n    Write a python function to find whether a number is even.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False\ndef is_Even_number_range(a,b):\n    '''\n    Write a python function to find whether a range of numbers is even.\n    '''\n    for i in range(a,b+1):\n        if is_Even_number(i):\n            print i\ndef is_Prime_range(a,b):\n    '''\n    Write a python function to find whether a range of numbers is prime.\n    '''\n    for i in range(a,b+1):\n        if is_Prime_number(i) == True:\n            print i\ndef is_Odd_range(a,b):\n    '''\n    Write a python function to find whether a range of numbers is odd.\n    '''\n    for i in range(a,b+1):\n        if is_Odd(i) == True:\n            print i\ndef is_Largest_range(a,b):\n    '''\n    Write a python function to find whether a range of numbers is the largest.\n    '''\n    for i in range(a,b+1):\n        if is_Largest(i) == True:\n            print i\ndef is_Prime_range(a,b):\n    '''\n    Write a python function to find whether a range of numbers is a prime.\n    '''\n    for i in range(a,b+1):\n        if is_Prime_number(i) == True:\n            print i\ndef is_Armstrong_range(a,b):\n    '''\n    Write a python function to find whether a range of numbers is an armstrong number.\n    '''\n    for i in range(a,b+1):\n        if is_Armstrong(i) == True:\n            print i\ndef is_Palindrome_range(a,b):\n    '''\n    Write a python function to find whether a range of numbers is a palindrome.\n    '''\n    for i in range(a,b+1):\n        if is_Palindrome(i) == True:\n            print i\ndef is_Perfect_range(a,b):\n    '''\n    Write ",
        "num_ids": 5
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n    \n",
        "num_ids": 25
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    return False\n",
        "num_ids": 19
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\n        \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\n        \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\n        \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\n        \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\n        \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\n        \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\n        \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\n        \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\n        \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\n        \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\n        \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\n        \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\n        \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\n        \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\n        \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\n        \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\n        \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\n        \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\n        \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\n        \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\n        \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\n        \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\n        \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\n        \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\n        \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\n        \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\n        \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\n        \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\n        \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\n        \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\n        \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\n        \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\n        \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\n        \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\n        \ndef is_Diff(n): \n    '''\n    Write a python functio",
        "num_ids": 9
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return not n%11\n",
        "num_ids": 9
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2\n",
        "num_ids": 11
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2\n",
        "num_ids": 11
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2!=0\n",
        "num_ids": 14
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==1\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    l = len(s)\n    if l%2==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 31
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        print('The word \"%s\" is an even word'%s)\n    else:\n        print('The word \"%s\" is an odd word'%s)\n",
        "num_ids": 52
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0: \n        print(\"The length of the word is even\")\n    else:\n        print(\"The length of the word is odd\")\n",
        "num_ids": 43
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 1\n    return n*(n+1)*(n+2)/6\n",
        "num_ids": 29
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return pow(3, n) - 1\n",
        "num_ids": 13
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedron = [[0 for i in range(4)] for j in range(4)]\n",
        "num_ids": 26
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)//2\n",
        "num_ids": 14
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int((n * (n + 1) * (n + 2) * (n + 3)) / 6)\n",
        "num_ids": 29
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0: return 0\n    elif n == 1: return 4\n    elif n == 2: return 10\n    elif n == 3: return 35\n    elif n == 4: return 112\n    elif n == 5: return 143\n    elif n == 6: return 175\n    elif n == 7: return 212\n    elif n == 8: return 284\n    elif n == 9: return 330\n    elif n == 10: return 395\n    elif n == 11: return 486\n    elif n == 12: return 653\n    elif n == 13: return 815\n    elif n == 14: return 994\n    elif n == 15: return 1074\n    elif n == 16: return 1226\n    elif n == 17: return 1461\n    elif n == 18: return 1631\n    elif n == 19: return 1839\n    elif n == 20: return 2118\n    elif n == 21: return 2381\n    elif n == 22: return 2633\n    elif n == 23: return 2925\n    elif n == 24: return 3177\n    elif n == 25: return 3466\n    elif n == 26: return 3734\n    elif n == 27: return 3913\n    elif n == 28: return 4179\n    elif n == 29: return 4385\n    elif n == 30: return 4588\n    elif n == 31: return 4783\n    elif n == 32: return 5040\n    elif n == 33: return 5247\n    elif n == 34: return 5330\n    elif n == 35: return 5495\n    elif n == 36: return 5673\n    elif n == 37: return 5760\n    elif n == 38: return 5937\n    elif n == 39: return 6026\n    elif n == 40: return 6205\n    elif n == 41: return 6286\n    elif n == 42: return 6363\n    elif n == 43: return 6541\n    elif n == 44: return 6720\n    elif n == 45: return 6999\n    elif n == 46: return 7178\n    elif n == 47: return 7365\n    elif n == 48: return 7552\n    elif n == 49: return 7751\n    elif n == 50: return 7990\n    elif n == 51: return 8169\n    elif n == 52: return 8348\n    elif n == 53: return 8527\n    elif n == 54: return 8696\n    elif n == 55: return 8965\n    elif n == 56: return 9143\n    elif n == 57: return 9332\n    elif n == 58: return 9521\n    elif n == 59: return 9710\n    elif n == 60: return 9909\n    elif n == 61: return 10088\n    elif n == 62: return 10275\n    elif n == 63: return 10364\n    elif n == 64: return 10443\n    elif n == 65: return 10532\n    elif n == 66: return 10703\n    elif n == 67: return 10872\n    elif n == 68: return 10951\n    elif n == 69: return 11040\n    elif n == 70: return 11219\n    elif n == 71: return 11408\n    elif n == 72: return 11577\n    elif n == 73: return 11766\n    elif n == 74: return 11855\n    elif n == 75: return 11954\n    elif n == 76: return 12043\n    elif n == 77: return 12236\n    elif n == 78: return 12405\n    elif n == 79: return 12574\n    elif n == 80: return 12763\n    elif n == 81: return 12952\n    elif n == 82: return 13141\n    elif n == 83: return 13320\n    elif n == 84: return 13498\n    elif n == 85: return 13685\n    elif n == 86: return 13864\n    elif n == 87: return 13943\n    elif n == 88: return 14124\n    elif n == 89: return 14303\n    elif n == 90: return 14482\n    elif n == 91: return 14560\n    elif n == 92: return 14639\n    elif n == 93: return 14808\n    elif n == 94: return 14977\n    elif n == 95: return 15156\n    elif n == 96: return 15335\n    elif n == 97: return 15504\n    elif n == 98: return 15683\n    elif n == 99: return 15852\n    elif n == 100: return 15941\n    elif n == 101: return 16030\n    elif n == 102: return 16209\n    elif n == 103: return 16288\n    elif n == 104: return 16367\n    elif n == 105: return 16446\n    elif n == 106: return 16625\n    elif n == 107: return 16794\n    elif n == 108: return 16963\n    elif n == 109: return 17142\n    elif n == 110: return 17321\n    elif n == 111: return 17410\n    elif n == 112: return 17499\n    elif n == 113: return 17688\n    elif n == 114: return 17757\n    elif n == 115: return 17836\n    elif n == 116: return 17805\n    elif n == 117: return 17974\n    elif n == 118: return 18043\n    elif n == 119: return 18122\n    elif n == 120: return 18201\n    elif n == 121: return 18280\n    elif n == 122: return 18359\n    elif n == 123: return 18448\n    elif n == 124: return 18527\n    elif n == 125: return 18606\n    elif n == 126: return 18785\n    elif n == 127: return 18864\n    elif n == 128: return 18943\n    elif n == 129: return 19022\n    elif n == 130: return 19201\n    elif n == 131: return 19380\n    elif n == 132: return 19569\n    elif n == 133: return 19588\n    elif n == 134: return 19617\n    elif n == 135: return 19676\n    elif n == 136: return 19785\n    elif n == 137: return 19964\n    elif n == 138: return 20043\n    elif n == 139: return 20162\n    elif n == 140: return 20341\n    elif n == 141: return 20430\n    elif n == 142: return 20519\n    elif n == 143: return 20698\n    elif n == 144: return 20867\n    elif n == 145: return 20946\n    elif n == 146: return 21025\n    elif n == 147: return 21114\n    elif n == 148: return 21203\n    elif n == 149: return 21282\n    elif n == 150: return 21361\n    elif n == 151: return 21440\n    elif n == 152: return 21519\n    elif n == 153: return 21609\n    elif n == 154: return 21708\n    elif n == 155: return 21797\n    elif n == 156: return 21886\n    elif n == 157: return 21965\n    elif n == 158: return 22044\n    elif n == 159: return 22123\n    elif n == 160: return 22302\n    elif n == 161: return 22381\n    elif n == 162: return 22460\n    elif n == 163: return 22539\n    elif n == 164: return 22628\n    elif n == 165: return 22717\n    elif n == 166: return 22796\n    elif n == 167: return 22875\n    elif n == 168: return 22954\n    elif n == 169: return 23033\n    elif n == 170: return 23122\n    elif n == 171: return 23301\n    elif n == 172: return 23380\n    elif n == 173: return 23459\n    elif n == 174: return 23538\n    elif n == 175: return 23627\n    elif n == 176: return 23716\n    elif n == 177: return 23805\n    elif n == 178: return 23874\n    elif n == 179: return 23953\n    elif n == 180: return 24032\n    elif n == 181: return 24121\n    elif n == 182: return 24300\n    elif n == 183: return 24479\n",
        "num_ids": 2015
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Triangle number\n    # n * (n+1) / 2 \n    t = 0\n    for i in xrange(n):\n        t += i + 1\n    return t * (t + 1) * (t + 2) / 6\n",
        "num_ids": 60
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1) * (n + 2) * (n + 3)) / 4\n",
        "num_ids": 27
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    nums = [1, 2, 4, 8, 16, 32, 64, 128]\n    return nums[n]\n",
        "num_ids": 32
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return tetrahedral_number(n - 1) + 4 * n**2\n",
        "num_ids": 36
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0)*math.pi*(r**3)\n",
        "num_ids": 23
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0) * math.pi * (r**3)\n",
        "num_ids": 24
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3\n",
        "num_ids": 18
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*(math.pi)*(r**3)\n",
        "num_ids": 20
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3*math.pi*r**3\n    return volume\n",
        "num_ids": 21
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\n",
        "num_ids": 16
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4./3)*math.pi*r**3\n    return v\n    \ndef volume_cube(side):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    v = side**3\n    return v\n    \ndef volume_cuboid(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    v = l*b*h\n    return v\n    \ndef volume_cone(radius, height):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = (1./3)*math.pi*radius**2*height\n    return v\n    \ndef volume_cylinder(radius, height):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v = (2./3)*math.pi*radius**2*height\n    return v\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4./3)*math.pi*r**3\n    return v\n    \ndef volume_cube(side):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    v = side**3\n    return v\n    \ndef volume_cuboid(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    v = l*b*h\n    return v\n    \ndef volume_cone(radius, height):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = (1./3)*math.pi*radius**2*height\n    return v\n    \ndef volume_cylinder(radius, height):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v = (2./3)*math.pi*radius**2*height\n    return v\n    \ndef mass_sphere(r):\n    '''\n    Write a function to find the mass of a sphere.\n    '''\n    m = (4./3)*math.pi*r**3\n    return m\n    \ndef mass_cube(side):\n    '''\n    Write a function to find the mass of a cube.\n    '''\n    m = side**3\n    return m\n    \ndef mass_cuboid(l,b,h):\n    '''\n    Write a function to find the mass of a cuboid.\n    '''\n    m = l*b*h\n    return m\n    \ndef mass_cone(radius, height):\n    '''\n    Write a function to find the mass of a cone.\n    '''\n    m = (1./3)*math.pi*radius**2*height\n    return m\n    \ndef mass_cylinder(radius, height):\n    '''\n    Write a function to find the mass of a cylinder.\n    '''\n    m = (2./3)*math.pi*radius**2*height\n    return m\n    \ndef mass_sphere(r):\n    '''\n    Write a function to find the mass of a sphere.\n    '''\n    m = (4./3)*math.pi*r**3\n    return m\n    \ndef mass_cube(side):\n    '''\n    Write a function to find the mass of a cube.\n    '''\n    m = side**3\n    return m\n    \ndef mass_cuboid(l,b,h):\n    '''\n    Write a function to find the mass of a cuboid.\n    '''\n    m = l*b*h\n    return m\n    \ndef mass_cone(radius, height):\n    '''\n    Write a function to find the mass of a cone.\n    '''\n    m = (1./3)*math.pi*radius**2*height\n    return m\n    \ndef mass_cylinder(radius, height):\n    '''\n    Write a function to find the mass of a cylinder.\n    '''\n    m = (2./3)*math.pi*radius**2*height\n    return m\n    \ndef area_sphere(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    a = 4*math.pi*r**2\n    return a\n    \ndef area_cube(side):\n    '''\n    Write a function to find the area of a cube.\n    '''\n    a = side**2\n    return a\n    \ndef area_cuboid(l,b,h):\n    '''\n    Write a function to find the area of a cuboid.\n    '''\n    a = l*b\n    return a\n    \ndef area_cone(radius, height):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    a = (1./2)*math.pi*radius**2*height\n    return a\n    \ndef area_cylinder(radius, height):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    a = (2./3)*math.pi*radius**2*height\n    return a\n    \ndef area_sphere(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    a = 4*math.pi*r**2\n    return a\n    \ndef area_cube(side):\n    '''\n    Write a function to find the area of a cube.\n    '''\n    a = side**2\n    return a\n    \ndef area_cuboid(l,b,h):\n    '''\n    Write a function to find the area of a cuboid.\n    '''\n    a = l*b\n    return a\n    \ndef area_cone(radius, height):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    a = (1./2)*math.pi*radius**2*height\n    return a\n    \ndef area_cylinder(radius, height):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    a = (2./3)*math.pi*radius**2*height\n    return a\n    \ndef mass_sphere(r):\n    '''\n    Write a function to find the mass of a sphere.\n    '''\n    m = (4./3)*math.pi*r**3\n    return m\n    \ndef mass_cube(side):\n    '''\n    Write a function to find the mass of a cube.\n    '''\n    m = side**3\n    return m\n    \ndef mass_cuboid(l,b,h):\n    '''\n    Write a function to find the mass of a cuboid.\n    '''\n    m = l*b*h\n    return m\n    \ndef mass_cone(radius, height):\n    '''\n    Write a function to find the mass of a cone.\n    '''\n    m = (1./3)*math.pi*radius**2*height\n    return m\n    \ndef mass_cylinder(radius, height):\n    '''\n    Write a function to find the mass of a cylinder.\n    '''\n    m = (2./3)*math.pi*radius**2*height\n    return m\n    \ndef mass_sphere(r):\n    '''\n    Write a function to find the mass of a sphere.\n    '''\n    m = (4./3)*math.pi*r**3\n    return m\n    \ndef mass_cube(side):\n    '''\n    Write a function to find the mass of a cube.\n    '''\n    m = side**3\n    return m\n    \ndef mass_cuboid(l,b,h):\n    '''\n    Write a function to find the mass of a cuboid.\n    '''\n    m = l*b*h\n    return m\n    \ndef mass_cone(radius, height):\n    '''\n    Write a function to find the mass of a cone.\n    '''\n    m = (1./3)*math.pi*radius**2*height\n    return m\n    \ndef mass_cylinder(radius, height):\n    '''\n    Write a function to find the mass of a cylinder.\n    '''\n    m = (2./3)*math.pi*radius**2*height\n    return m\n    \ndef volume_sphere(",
        "num_ids": 32
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r = float(r)\n    v = (4/3)*math.pi*(r**3)\n    return v\n",
        "num_ids": 32
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * (3.14159265358979)**2 * (r**3)\n",
        "num_ids": 27
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\n",
        "num_ids": 16
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Your code goes here\n    result = \"\"\n    for i in strr:\n        result += chr(ord(i) + 1)\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    count = 0\n    for i in strr:\n        count = count + ord(i)\n    count = count % 26\n    print count\n    chr_int = chr(count + 65)\n    return chr_int\n",
        "num_ids": 57
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum = sum + ord(i)\n    if(sum % 26):\n        return chr(sum % 26 + 96)\n    else:\n        return chr(sum % 26 + 64)\n",
        "num_ids": 61
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for s in strr:\n        result = result + ord(s)\n    return result % 26\n",
        "num_ids": 31
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = 0\n    for i in range(len(strr)):\n        res = res + ord(strr[i])\n    return chr(res % 26)\n",
        "num_ids": 43
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if len(strr) == 0:\n        return None\n    \n    total = 0\n    \n    for i in strr:\n        total = total + ord(i)\n    \n    return total % 26\n    \n    \nif __name__ == '__main__':\n    strr = raw_input('Enter a string: ')\n    print 'The character made is ',get_Char(strr)\n    print\n    ",
        "num_ids": 102
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum = sum + ord(i)\n    return chr(sum%26 + ord('a'))\n",
        "num_ids": 40
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum=0\n    for i in strr:\n        sum=sum+ord(i)\n    return sum%26\n",
        "num_ids": 31
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if len(strr) == 0:\n        return 0\n    mod = 0\n    for i in strr:\n        mod = mod + ord(i)\n    mod = mod % 26\n    return mod\n",
        "num_ids": 51
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    lst = []\n    for i in strr:\n        lst.append(ord(i))\n    c = 0\n    for i in lst:\n        c = (i + c)%26\n    return chr(c+97)\ndef encrypt(s):\n    '''\n    Write a python function to encrypt the string s using a rail fence cipher.\n    '''\n    l = len(s)\n    if l%2!=0:\n        mid = l//2\n        s = s + '#'\n    else:\n        mid = l//2\n    rail = 2*mid-1\n    s1 = ''\n    for i in range(mid):\n        s1+= s[i]\n        s1+= s[rail-i]\n    if mid%2==0:\n        return s1\n    else:\n        return s1[:-1]\ndef encrypt_word(s):\n    '''\n    Write a python function to encrypt the string s using a rail fence cipher.\n    '''\n    rail = 2*len(s)-1\n    s1 = ''\n    for i in range(len(s)):\n        s1+= s[i]\n        s1+= s[rail-i]\n    return s1\ndef decrypt(s):\n    '''\n    Write a python function to decrypt the string s using a rail fence cipher.\n    '''\n    l = len(s)\n    if l%2!=0:\n        mid = l//2\n        s = s + '#'\n    else:\n        mid = l//2\n    rail = 2*mid-1\n    s1 = ''\n    for i in range(mid):\n        s1+= s[i]\n        s1+= s[rail-i]\n    if mid%2==0:\n        return s1\n    else:\n        return s1[:-1]\ndef decrypt_word(s):\n    '''\n    Write a python function to decrypt the string s using a rail fence cipher.\n    '''\n    rail = 2*len(s)-1\n    s1 = ''\n    for i in range(len(s)):\n        s1+= s[i]\n        s1+= s[rail-i]\n    return s1\ndef get_double(s):\n    '''\n    Write a python function to get the double of a string.\n    '''\n    lst = []\n    for i in s:\n        lst.append(ord(i))\n    lst = lst[::-1]\n    for i in lst:\n        lst[lst.index(i)] = (i*2)%100\n    lst = lst[::-1]\n    l = 0\n    for i in lst:\n        l = (l+i)%100\n    return chr(l+97)\ndef get_reverse(s):\n    '''\n    Write a python function to get the reverse of a string.\n    '''\n    lst = []\n    for i in s:\n        lst.append(ord(i))\n    lst = lst[::-1]\n    for i in lst:\n        lst[lst.index(i)] = (i+1)%100\n    lst = lst[::-1]\n    l = 0\n    for i in lst:\n        l = (l+i)%100\n    return chr(l+97)\ndef print_all_words(s):\n    '''\n    Write a python function to print all the words in a string.\n    '''\n    lst = []\n    s1 = ''\n    for i in s:\n        lst.append(i)\n    lst = lst[::-1]\n    for i in lst:\n        s1+=i\n    s1 = s1[::-1]\n    return s1\ndef print_all_words1(s):\n    '''\n    Write a python function to print all the words in a string.\n    '''\n    lst = []\n    s1 = ''\n    for i in s:\n        lst.append(i)\n    lst = lst[::-1]\n    for i in lst:\n        s1+=i\n    return s1\ndef print_all_words2(s):\n    '''\n    Write a python function to print all the words in a string.\n    '''\n    lst = []\n    s1 = ''\n    for i in s:\n        lst.append(i)\n    lst = lst[::-1]\n    for i in lst:\n        s1+=i\n    s1 = s1[::-1]\n    return s1\ndef encrypt_at_index(s, i):\n    '''\n    Write a python function to encrypt a string at a given index i.\n    '''\n    lst = []\n    s1 = ''\n    for i in s:\n        lst.append(i)\n    lst = lst[::-1]\n    for i in range(i):\n        lst[i] = '#'\n    for i in lst:\n        s1+=i\n    s1 = s1[::-1]\n    return s1\ndef encrypt_at_index1(s, i):\n    '''\n    Write a python function to encrypt a string at a given index i.\n    '''\n    lst = []\n    s1 = ''\n    for i in s:\n        lst.append(i)\n    lst = lst[::-1]\n    for i in range(i):\n        lst[i] = '#'\n    for i in lst:\n        s1+=i\n    s1 = s1[::-1]\n    return s1\ndef decrypt_at_index(s, i):\n    '''\n    Write a python function to decrypt a string at a given index i.\n    '''\n    lst = []\n    s1 = ''\n    for i in s:\n        lst.append(i)\n    lst = lst[::-1]\n    for i in range(i):\n        lst[i] = '#'\n    for i in lst:\n        s1+=i\n    s1 = s1[::-1]\n    return s1\ndef decrypt_at_index1(s, i):\n    '''\n    Write a python function to decrypt a string at a given index i.\n    '''\n    lst = []\n    s1 = ''\n    for i in s:\n        lst.append(i)\n    lst = lst[::-1]\n    for i in range(i):\n        lst[i] = '#'\n    for i in lst:\n        s1+=i\n    s1 = s1[::-1]\n    return s1\ndef encrypt_str(s):\n    '''\n    Write a python function to encrypt the string s using a rail fence cipher.\n    '''\n    rail = 2*len(s)-1\n    s1 = ''\n    for i in range(len(s)):\n        s1+= s[i]\n        s1+= s[rail-i]\n    return s1\ndef decrypt_str(s):\n    '''\n    Write a python function to decrypt the string s using a rail fence cipher.\n    '''\n    rail = 2*len(s)-1\n    s1 = ''\n    for i in range(len(s)):\n        s1+= s[i]\n        s1+= s[rail-i]\n    return s1\ndef remove_chars(s, n):\n    '''\n    Write a python function to remove characters from a string, if the position of the character is not passed in the array n.\n    '''\n    lst = []\n    s1 = ''\n    for i in s:\n        lst.append(i)\n    for i in n:\n        lst[i] = '#'\n    for i in lst:\n        s1+=i\n    return s1\ndef remove_chars1(s, n):\n    '''\n    Write a python function to remove characters from a string, if the position of the character is not passed in the array n.\n    '''\n    lst = []\n    s1 = ''\n    for i in s:\n        lst.append(i)\n    for i in n:\n        lst[i] = '#'\n    for i in ",
        "num_ids": 53
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # i = 0\n    # while True:\n    #     i+=1\n    #     nth = newman_seq(i)\n    #     if nth == n:\n    #         return nth\n    return newman_seq(n)\n",
        "num_ids": 62
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    x = 0\n    y = 1\n    for i in range(n-1):\n        x, y = y, x+y\n    return x\n",
        "num_ids": 38
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    s = [0]*n\n    s[0] = 1\n    s[1] = 1\n    for i in range(2,n):\n        s[i] = s[i-1] + 2*s[i-2]\n",
        "num_ids": 60
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    # We use the Fibonacci Sequence\n    # The newman sequence is defined by the pattern A1, A2, A3,..., A(n-2) + A(n-1)\n    # The 2nd to last number is A(n-2) + A(n-1) + A(n-2) + A(n-1)\n    # The last number is A(n-2) + A(n-1) + A(n-2) + A(n-2) + A(n-1) + A(n-2)\n    # The nth number is A(n-2) + A(n-1) + A(n-2) + A(n-2) + A(n-1) + A(n-2) + A(n-2) + A(n-1) + A(n-2) + A(n-2) + A(n-1) + A(n-2)\n    \n    # This returns the nth number in the sequence\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2) + sequence(n-2) + sequence(n-2) + sequence(n-1) + sequence(n-2) + sequence(n-2) + sequence(n-1) + sequence(n-2) + sequence(n-2) + sequence(n-1)\n",
        "num_ids": 345
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [1, 2]\n    for i in xrange(1, n):\n        seq.append(seq[i-1] + seq[i-1])\n    return seq[n-1]\n",
        "num_ids": 51
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sq = [1,1]\n    for i in range(2,n):\n        sq.append(sq[i-1] + sq[i-2])\n    return sq[n-1]\n",
        "num_ids": 50
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [0, 1, 1]\n    for i in range(2, n + 1):\n        seq.append(seq[i - 1] + seq[i - 2])\n    return seq[n]\n",
        "num_ids": 52
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (sequence(n-1) + sequence(n-2))%(10**9 + 7)\n",
        "num_ids": 42
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    num = 0\n    seq = []\n    while len(seq) < n:\n        seq.append(num)\n        num += 1\n        num %= 10\n    return seq\n",
        "num_ids": 45
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # 1, 0, 0, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733\n    first = 1\n    second = 0\n    third = 0\n    for i in range(n):\n        first, second, third = second, third, first + second + third\n    return third\n",
        "num_ids": 200
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 4 * math.pi * (r ** 2)\n    return s\ndef vol_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4 / 3) * math.pi * (r ** 3)\n    return v\n",
        "num_ids": 25
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n",
        "num_ids": 14
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * (r**2)\n    return area\n",
        "num_ids": 21
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfarea = 4 * math.pi * r * r\n    return surfarea\n",
        "num_ids": 22
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4 * math.pi * r * r\n    return a\n",
        "num_ids": 19
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r ** 2)\n",
        "num_ids": 16
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n",
        "num_ids": 14
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    print(\"surface area of a sphere = 4*pi*r*r\")\n    return 4*math.pi*r*r\n",
        "num_ids": 32
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n",
        "num_ids": 14
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*(r**2)\n    return sa\n",
        "num_ids": 21
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return 1/2 * n**2 + n\n",
        "num_ids": 14
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    return (3 * n - 1) * (n / 2) ** 2 + 1\n",
        "num_ids": 33
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (2*n + 1)**2 / (4 * (2*n + 1) - 4)\n",
        "num_ids": 28
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    #return n**2 + (n-1)**2\n    return n**2 + (n**2 - 2*n + 1)*1.0/2.0\n",
        "num_ids": 42
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(2*n - 1)\n",
        "num_ids": 14
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return 2 * (n ** 2 - n) / 2\n",
        "num_ids": 16
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n**2 + n) // 2\n",
        "num_ids": 14
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int((1 + (5**0.5)) / 2) * n\n    \ndef centered_hexagonal_number2(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int((1 + (5**0.5)) / 2) * n\n    \ndef centered_hexagonal_number3(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int((1 + (5**0.5)) / 2) * n\n    \ndef triangular_number(n):\n    '''\n    Write a function to find nth triangular number.\n    '''\n    return n * (n + 1) / 2\n    \ndef triangular_number2(n):\n    '''\n    Write a function to find nth triangular number.\n    '''\n    return n * (n + 1) / 2\n    \ndef triangular_number3(n):\n    '''\n    Write a function to find nth triangular number.\n    '''\n    return n * (n + 1) / 2\n    \ndef tetrahedral_number(n):\n    '''\n    Write a function to find nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) / 6\n    \ndef tetrahedral_number2(n):\n    '''\n    Write a function to find nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) / 6\n    \ndef tetrahedral_number3(n):\n    '''\n    Write a function to find nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) / 6\n    \ndef tetrahedral_number4(n):\n    '''\n    Write a function to find nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) / 6\n    \ndef pentagonal_number(n):\n    '''\n    Write a function to find nth pentagonal number.\n    '''\n    return n * (3 * n - 1) / 2\n    \ndef pentagonal_number2(n):\n    '''\n    Write a function to find nth pentagonal number.\n    '''\n    return n * (3 * n - 1) / 2\n    \ndef pentagonal_number3(n):\n    '''\n    Write a function to find nth pentagonal number.\n    '''\n    return n * (3 * n - 1) / 2\n    \ndef pentagonal_number4(n):\n    '''\n    Write a function to find nth pentagonal number.\n    '''\n    return n * (3 * n - 1) / 2\n    \ndef hexagonal_number(n):\n    '''\n    Write a function to find nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n    \ndef hexagonal_number2(n):\n    '''\n    Write a function to find nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n    \ndef hexagonal_number3(n):\n    '''\n    Write a function to find nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n    \ndef hexagonal_number4(n):\n    '''\n    Write a function to find nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n    \ndef heptagonal_number(n):\n    '''\n    Write a function to find nth heptagonal number.\n    '''\n    return n * (5 * n - 3) / 2\n    \ndef heptagonal_number2(n):\n    '''\n    Write a function to find nth heptagonal number.\n    '''\n    return n * (5 * n - 3) / 2\n    \ndef heptagonal_number3(n):\n    '''\n    Write a function to find nth heptagonal number.\n    '''\n    return n * (5 * n - 3) / 2\n    \ndef heptagonal_number4(n):\n    '''\n    Write a function to find nth heptagonal number.\n    '''\n    return n * (5 * n - 3) / 2\n    \ndef octagonal_number(n):\n    '''\n    Write a function to find nth octagonal number.\n    '''\n    return n * (3 * n - 2)\n    \ndef octagonal_number2(n):\n    '''\n    Write a function to find nth octagonal number.\n    '''\n    return n * (3 * n - 2)\n    \ndef octagonal_number3(n):\n    '''\n    Write a function to find nth octagonal number.\n    '''\n    return n * (3 * n - 2)\n    \ndef octagonal_number4(n):\n    '''\n    Write a function to find nth octagonal number.\n    '''\n    return n * (3 * n - 2)\n    \ndef nonagon_number(n):\n    '''\n    Write a function to find nth nonagonal number.\n    '''\n    return n * (2 * n - 1)\n    \ndef nonagon_number2(n):\n    '''\n    Write a function to find nth nonagonal number.\n    '''\n    return n * (2 * n - 1)\n    \ndef nonagon_number3(n):\n    '''\n    Write a function to find nth nonagonal number.\n    '''\n    return n * (2 * n - 1)\n    \ndef nonagon_number4(n):\n    '''\n    Write a function to find nth nonagonal number.\n    '''\n    return n * (2 * n - 1)\n    \ndef square_number(n):\n    '''\n    Write a function to find nth square number.\n    '''\n    return n ** 2\n    \ndef square_number2(n):\n    '''\n    Write a function to find nth square number.\n    '''\n    return n ** 2\n    \ndef square_number3(n):\n    '''\n    Write a function to find nth square number.\n    '''\n    return n ** 2\n    \ndef square_number4(n):\n    '''\n    Write a function to find nth square number.\n    '''\n    return n ** 2\n    \ndef pentagonal_cycle(n):\n    '''\n    Write a function to find nth pentagonal cycle number.\n    '''\n    return int(n / 5)\n    \ndef pentagonal_cycle2(n):\n    '''\n    Write a function to find nth pentagonal cycle number.\n    '''\n    return int(n / 5)\n    \ndef pentagonal_cycle3(n):\n    '''\n    Write a function to find nth pentagonal cycle number.\n    '''\n    return int(n / 5)\n    \ndef pentagonal_cycle4(n):\n    '''\n    Write a function to find nth pentagonal cycle number.\n    '''\n    return int(n / 5)\n    \ndef hexagonal_cycle(n):\n    '''\n    Write a function to find nth hexagonal cycle number.\n    '''\n    return int(n / 6)\n    \ndef hexagonal_cycle2(n):\n    '''\n    Write a function to find nth hexagonal cycle number.\n    '''\n    return int(n / 6)\n    \ndef hexagonal_cycle3(n):\n    '''\n    Write a function to find nth hexagonal cycle number.\n    '''\n    return int(n / 6)\n    \ndef hexagonal_cycle4(n):\n    '''\n    Write a function to find nth hexagonal cycle number.\n    '''\n    return int(n / 6)\n    \ndef heptagonal_cycle(n):\n    '''\n    Write a function to find nth heptagonal cycle number.\n    '''\n    return int(n / 7)\n    \ndef heptagonal_cycle2(n):\n    '''\n    Write a function to find nth heptagonal cycle number.\n    '''\n    return int(n / 7)\n    \ndef heptagonal_cycle3(n):\n    '''\n    Write a function to find nth heptagonal cycle number.\n    '''\n    return int(n / 7)\n    \ndef hep",
        "num_ids": 15
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return -(-1)**n * (2*n**2 - 2*n + 1) / 2**(1 + n)\n",
        "num_ids": 33
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    #hexagonal number\n    hexagonal_num = 1/2*n*(n+1)\n    #centered hexagonal number\n    centered_hexagonal_num = 1/2*((n+1)*(n+2))\n",
        "num_ids": 56
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for i in (dict1, dict2, dict3):\n        for key in i.keys():\n            if key in dict4:\n                dict4[key] += i[key]\n            else:\n                dict4[key] = i[key]\n    return dict4\ndef merge_dictionaries_four(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for i in (dict1, dict2, dict3):\n        dict4.update(i)\n    return dict4\ndef merge_dictionaries_five(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for i in (dict1, dict2, dict3):\n        dict4.update(i)\n    return dict4\ndef merge_dictionaries_six(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for i in (dict1, dict2, dict3):\n        dict4.update(i)\n    return dict4\ndef merge_dictionaries_seven(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for i in (dict1, dict2, dict3):\n        dict4.update(i)\n    return dict4\ndef merge_dictionaries_eight(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for i in (dict1, dict2, dict3):\n        dict4.update(i)\n    return dict4\ndef merge_dictionaries_nine(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for i in (dict1, dict2, dict3):\n        dict4.update(i)\n    return dict4\ndef merge_dictionaries_ten(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for i in (dict1, dict2, dict3):\n        dict4.update(i)\n    return dict4\ndef merge_dictionaries_eleven(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for i in (dict1, dict2, dict3):\n        dict4.update(i)\n    return dict4\ndef merge_dictionaries_twelve(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for i in (dict1, dict2, dict3):\n        dict4.update(i)\n    return dict4\ndef merge_dictionaries_thirteen(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for i in (dict1, dict2, dict3):\n        dict4.update(i)\n    return dict4\ndef merge_dictionaries_fourteen(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for i in (dict1, dict2, dict3):\n        dict4.update(i)\n    return dict4\ndef merge_dictionaries_fifteen(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for i in (dict1, dict2, dict3):\n        dict4.update(i)\n    return dict4\ndef merge_dictionaries_sixteen(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for i in (dict1, dict2, dict3):\n        dict4.update(i)\n    return dict4\ndef merge_dictionaries_seventeen(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for i in (dict1, dict2, dict3):\n        dict4.update(i)\n    return dict4\ndef merge_dictionaries_eighteen(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for i in (dict1, dict2, dict3):\n        dict4.update(i)\n    return dict4\ndef merge_dictionaries_nineteen(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for i in (dict1, dict2, dict3):\n        dict4.update(i)\n    return dict4\ndef merge_dictionaries_twenty(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for i in (dict1, dict2, dict3):\n        dict4.update(i)\n    return dict4\ndef merge_dictionaries_twentyone(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for i in (dict1, dict2, dict3):\n        dict4.update(i)\n    return dict4\ndef merge_dictionaries_twentytwo(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for i in (dict1, dict2, dict3):\n        dict4.update(i)\n    return dict4\ndef merge_dictionaries_twentythree(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for i in (dict1, dict2, dict3):\n        dict4.update(i)\n    return dict4\ndef merge_dictionaries_twentyfour(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for i in (dict1, dict2, dict3):\n        dict4.update(i)\n    return dict4\ndef merge_dictionaries_twentyfive(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for i in (dict1, dict2, dict3):\n        dict4.update(i)\n    return dict4\ndef merge_dictionaries_twentysix(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for i in (dict1, dict2, dict3):\n        dict4.update(i)\n    return dict4\ndef merge_dictionaries_twentyseven(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for i in (dict1, dict2, dict3):\n        dict4.update(i)\n    return dict4\ndef merge_dictionaries_twentyeight(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for i in ",
        "num_ids": 13
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return_dict = {}\n    for key in dict1.keys():\n        return_dict[key] = dict1[key]\n    for key in dict2.keys():\n        return_dict[key] = dict2[key]\n    for key in dict3.keys():\n        return_dict[key] = dict3[key]\n    return return_dict\n",
        "num_ids": 87
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dic = {}\n    for dic1, dic2, dic3 in zip(dict1, dict2, dict3):\n        dic.update(dic1)\n        dic.update(dic2)\n        dic.update(dic3)\n    return dic\n",
        "num_ids": 72
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for key in dict1.keys():\n        dict4[key] = dict1[key]\n    for key in dict2.keys():\n        dict4[key] = dict2[key]\n    for key in dict3.keys():\n        dict4[key] = dict3[key]\n    return dict4\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict3 = {}\n    for key in dict1.keys():\n        dict3[key] = dict1[key]\n    for key in dict2.keys():\n        dict3[key] = dict2[key]\n    return dict3\ndef merge_dictionaries_one(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict3 = {}\n    for key in dict1.keys():\n        dict3[key] = dict1[key]\n    for key in dict2.keys():\n        dict3[key] = dict2[key]\n    return dict3\ndef merge_dictionaries(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict3 = {}\n    dict1.update(dict2)\n    return dict3\ndef merge_dictionaries_no_return(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict3 = {}\n    dict1.update(dict2)\n    return dict3\ndef merge_dictionaries_no_return_with_same_keys(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict3 = {}\n    for key in dict1.keys():\n        dict3[key] = dict1[key]\n    for key in dict2.keys():\n        dict3[key] = dict2[key]\n    return dict3\ndef merge_dictionaries_no_return_with_different_keys(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict3 = {}\n    for key in dict1.keys():\n        dict3[key] = dict1[key]\n    for key in dict2.keys():\n        dict3[key] = dict2[key]\n    return dict3\ndef merge_dictionaries_no_return_with_list_of_keys(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict3 = {}\n    for key in dict1.keys():\n        dict3[key] = dict1[key]\n    for key in dict2.keys():\n        dict3[key] = dict2[key]\n    return dict3\ndef merge_dictionaries_no_return_with_list_of_keys_with_same_values(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict3 = {}\n    for key in dict1.keys():\n        dict3[key] = dict1[key]\n    for key in dict2.keys():\n        dict3[key] = dict2[key]\n    return dict3\ndef merge_dictionaries_no_return_with_list_of_keys_with_different_values(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict3 = {}\n    for key in dict1.keys():\n        dict3[key] = dict1[key]\n    for key in dict2.keys():\n        dict3[key] = dict2[key]\n    return dict3\ndef merge_dictionaries_no_return_with_list_of_keys_with_values_from_second_dictionary(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict3 = {}\n    for key in dict1.keys():\n        dict3[key] = dict1[key]\n    for key in dict2.keys():\n        dict3[key] = dict2[key]\n    return dict3\ndef merge_dictionaries_no_return_with_list_of_keys_with_values_from_both_dictionaries(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict3 = {}\n    for key in dict1.keys():\n        dict3[key] = dict1[key]\n    for key in dict2.keys():\n        dict3[key] = dict2[key]\n    return dict3\ndef merge_dictionaries_no_return_with_list_of_keys_with_values_from_both_dictionaries_different_values(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict3 = {}\n    for key in dict1.keys():\n        dict3[key] = dict1[key]\n    for key in dict2.keys():\n        dict3[key] = dict2[key]\n    return dict3\ndef merge_dictionaries_no_return_with_list_of_keys_with_values_from_both_dictionaries_with_same_values(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict3 = {}\n    for key in dict1.keys():\n        dict3[key] = dict1[key]\n    for key in dict2.keys():\n        dict3[key] = dict2[key]\n    return dict3\ndef merge_dictionaries_no_return_with_list_of_keys_with_values_from_both_dictionaries_with_same_values_different_order(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict3 = {}\n    for key in dict1.keys():\n        dict3[key] = dict1[key]\n    for key in dict2.keys():\n        dict3[key] = dict2[key]\n    return dict3\ndef merge_dictionaries_no_return_with_list_of_keys_with_values_from_both_dictionaries_with_different_values(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict3 = {}\n    for key in dict1.keys():\n        dict3[key] = dict1[key]\n    for key in dict2.keys():\n        dict3[key] = dict2[key]\n    return dict3\ndef merge_dictionaries_no_return_with_list_of_keys_with_values_from_both_dictionaries_with_different_values_different_order(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict3 = {}\n    for key in dict1.keys():\n        dict3[key] = dict1[key]\n    for key in dict2.keys():\n        dict3[key] = dict2[key]\n    return dict3\ndef merge_dictionaries_no_return_with_list_of_keys_with_values_from_both_dictionaries_with_different_values_same_key(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict3 = {}\n    for key in dict1.keys():\n        dict3[key] = dict1[key]\n    for key in dict2.keys():\n        dict3[key] = dict2[key]\n    return dict3\ndef merge_dictionaries_no_return_with_list_of_keys_with_values_from_both_dictionaries_with_different_values_same_key_different_order(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict3 = {}",
        "num_ids": 7
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dic=dict1.copy()\n    merged_dic.update(dict2)\n    merged_dic.update(dict3)\n    return merged_dic\n",
        "num_ids": 48
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for key in dict1:\n        dict4[key] = dict1[key]\n    for key in dict2:\n        dict4[key] = dict2[key]\n    for key in dict3:\n        dict4[key] = dict3[key]\n    return dict4\n",
        "num_ids": 76
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = {}\n    for key in set(dict1.keys() + dict2.keys() + dict3.keys()):\n        if key in dict1 and key in dict2 and key in dict3:\n            new_dict[key] = [dict1[key], dict2[key], dict3[key]]\n        elif key in dict1 and key in dict2:\n            new_dict[key] = [dict1[key], dict2[key]]\n        elif key in dict1 and key in dict3:\n            new_dict[key] = [dict1[key], dict3[key]]\n        elif key in dict2 and key in dict3:\n            new_dict[key] = [dict2[key], dict3[key]]\n        elif key in dict1:\n            new_dict[key] = [dict1[key]]\n        elif key in dict2:\n            new_dict[key] = [dict2[key]]\n        elif key in dict3:\n            new_dict[key] = [dict3[key]]\n    return new_dict\n",
        "num_ids": 257
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict(dict1.items() + dict2.items() + dict3.items())\n",
        "num_ids": 24
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if not isinstance(dict1, dict) or not isinstance(dict2, dict) or not isinstance(dict3, dict):\n        return None\n    \n    merged_dict = {}\n    for key in dict1:\n        if key in dict2 and key in dict3:\n            merged_dict[key] = [dict1[key], dict2[key], dict3[key]]\n        elif key in dict2:\n            merged_dict[key] = [dict1[key], dict2[key], None]\n        elif key in dict3:\n            merged_dict[key] = [dict1[key], None, dict3[key]]\n        else:\n            merged_dict[key] = [dict1[key], None, None]\n    \n    for key in dict2:\n        if not key in dict1:\n            merged_dict[key] = [None, dict2[key], None]\n    for key in dict3:\n        if not key in dict1:\n            merged_dict[key] = [None, None, dict3[key]]\n    \n    return merged_dict\n    \ndef split_string(str_val, delimiter):\n    '''\n    Write a function to split a string into a list, based on delimiter, \n    and in the same order.\n    '''\n    \n    if not isinstance(str_val, str) or not isinstance(delimiter, str):\n        return None\n    \n    splitted = str_val.split(delimiter)\n    return splitted\n    \ndef capitalize(sentence):\n    '''\n    Write a function to capitalize a string.\n    '''\n    \n    if not isinstance(sentence, str):\n        return None\n    \n    capitalized = sentence[0].upper()\n    \n    for i in range(1, len(sentence)):\n        if sentence[i-1] =='':\n            capitalized = capitalized + sentence[i].upper()\n        else:\n            capitalized = capitalized + sentence[i]\n    \n    return capitalized\n    \ndef reverse_characters(sentence):\n    '''\n    Write a function to reverse a string.\n    '''\n    \n    if not isinstance(sentence, str):\n        return None\n    \n    reversed_sentence = ''\n    \n    for i in range(len(sentence)-1, -1, -1):\n        reversed_sentence = reversed_sentence + sentence[i]\n    \n    return reversed_sentence\n    \ndef dict_set(dict_val, key, val):\n    '''\n    Write a function to set a key to a value in a dictionary if it does not exist\n    '''\n    \n    if not isinstance(dict_val, dict) or not isinstance(key, str) or not isinstance(val, str):\n        return None\n    \n    if key not in dict_val:\n        dict_val[key] = val\n    \n    return None\n    \ndef reverse_dict(dict_val):\n    '''\n    Write a function to reverse a dictionary.\n    '''\n    \n    if not isinstance(dict_val, dict):\n        return None\n    \n    reverse_dict = {}\n    for key in dict_val:\n        dict_set(reverse_dict, key, dict_val[key])\n    \n    return reverse_dict\n    \ndef word_list(str_val, word):\n    '''\n    Write a function to find the occurences of a word in a string.\n    '''\n    \n    if not isinstance(str_val, str) or not isinstance(word, str):\n        return None\n    \n    occurences = []\n    for i in range(len(str_val)):\n        if str_val[i] == word[0] and str_val[i:i+len(word)] == word:\n            occurences.append(i)\n    \n    return occurences\n    \ndef occurrences_dict(word, string):\n    '''\n    Write a function to find the occurences of a word in a string.\n    '''\n    \n    if not isinstance(string, str) or not isinstance(word, str):\n        return None\n    \n    occurences = {}\n    for i in range(len(string)):\n        if string[i] == word[0] and string[i:i+len(word)] == word:\n            if not word in occurences:\n                occurences[word] = [i]\n            else:\n                occurences[word].append(i)\n    return occurences\n    \ndef check_substring(str_val1, str_val2):\n    '''\n    Write a function to check if a substring is present in another string.\n    '''\n    \n    if not isinstance(str_val1, str) or not isinstance(str_val2, str):\n        return None\n    \n    if str_val2 in str_val1:\n        return True\n    else:\n        return False\n    \ndef occurrence_dict_count(word, string):\n    '''\n    Write a function to find the occurences of a word in a string, and return\n    a dictionary.\n    '''\n    \n    if not isinstance(string, str) or not isinstance(word, str):\n        return None\n    \n    count = 0\n    occurences = {}\n    for i in range(len(string)):\n        if string[i] == word[0] and string[i:i+len(word)] == word:\n            if not word in occurences:\n                occurences[word] = 1\n            else:\n                occurences[word] = occurences[word] + 1\n            count = count + 1\n    return occurences\n    \ndef binary_dict(dict_val, key):\n    '''\n    Write a function to convert a dictionary to binary format.\n    '''\n    \n    if not isinstance(dict_val, dict) or not isinstance(key, str):\n        return None\n    \n    binary_string = ''\n    for i in range(len(key)):\n        if key[i] =='':\n            binary_string = binary_string +''\n        else:\n            binary_string = binary_string + '{0:08b}'.format(int(dict_val[key[i]], 2))\n    return binary_string\n    \ndef binary_dict_from_string(dict_val, binary_string):\n    '''\n    Write a function to convert a binary string to a dictionary.\n    '''\n    \n    if not isinstance(dict_val, dict) or not isinstance(binary_string, str):\n        return None\n    \n    binary_dict = {}\n    for i in range(0, len(binary_string), 8):\n        binary_dict[binary_string[i:i+8]] = dict_val[i/8]\n    return binary_dict\n    \ndef minimum_pair_difference(arr):\n    '''\n    Write a function to find the minimum pair difference in an array.\n    '''\n    \n    if not isinstance(arr, list):\n        return None\n    \n    if len(arr) < 2:\n        return None\n    \n    arr = sorted(arr)\n    \n    smallest = float('inf')\n    \n    for i in range(len(arr)-1):\n        if arr[i]!= arr[i+1]:\n            if smallest > abs(arr[i] - arr[i+1]):\n                smallest = abs(arr[i] - arr[i+1])\n    \n    return smallest\n    \ndef letter_list(string):\n    '''\n    Write a function to return the letters of a string in a list.\n    '''\n    \n    if not isinstance(string, str):\n        return None\n    \n    letter_list = []\n    for i in range(len(string)):\n        if string[i] not in letter_list:\n            letter_list.append(string[i])\n    return letter_list\n    \ndef letter_list_with_spaces(string):\n    '''\n    Write a function to return the letters of a string in a list, but keeping the spaces.\n    '''\n    \n    if not isinstance(string, str):\n        return None\n    \n    letter_list = []\n    for i in range(le",
        "num_ids": 35
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dic = {}\n    for key in dict1:\n        dic[key] = dict1[key]\n    for key in dict2:\n        if key in dic:\n            dic[key] = dict1[key]+dict2[key]\n        else:\n            dic[key] = dict2[key]\n    for key in dict3:\n        if key in dic:\n            dic[key] = dic[key]+dict3[key]\n        else:\n            dic[key] = dict3[key]\n    return dic\n",
        "num_ids": 136
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    list1 = [x for x in list1 if x > 0]\n    if len(list1) == 0:\n        return 0\n    else:\n        d = collections.defaultdict(int)\n        for x in list1:\n            d[x] += 1\n        return d\n    \ndef sum_val(list1):\n    '''\n    Write a function to get the sum of all the elements in a list.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        return sum(list1)\n    \ndef get_min(list1):\n    '''\n    Write a function to get the minimum element in a list.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        return min(list1)\n    \ndef get_max(list1):\n    '''\n    Write a function to get the maximum element in a list.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        return max(list1)\n    \ndef sort_list(list1):\n    '''\n    Write a function to sort a list in increasing order.\n    '''\n    if len(list1) == 0:\n        return []\n    else:\n        return sorted(list1)\n    \ndef remove_duplicates(list1):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    if len(list1) == 0:\n        return []\n    else:\n        return set(list1)\n    \ndef find_average(list1):\n    '''\n    Write a function to get the average of all the elements in a list.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        return sum(list1)/len(list1)\n    \ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary in increasing order.\n    '''\n    if len(dict1) == 0:\n        return {}\n    else:\n        return sorted(dict1)\n    \ndef find_min_max(list1):\n    '''\n    Write a function to get the minimum and maximum elements in a list.\n    '''\n    if len(list1) == 0:\n        return [0,0]\n    else:\n        return [min(list1), max(list1)]\n    \ndef longest_word(list1):\n    '''\n    Write a function to find the longest word in a list of words.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        return max(list1, key=len)\n    \ndef is_unique(list1):\n    '''\n    Write a function to check if all the elements in a list are unique or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        return len(set(list1)) == len(list1)\n    \ndef sort_by_freq(list1):\n    '''\n    Write a function to sort a list of words in descending order based on their frequency.\n    '''\n    if len(list1) == 0:\n        return []\n    else:\n        d = freq_count(list1)\n        return sorted(list1, key=lambda x:d[x], reverse=True)\n    \ndef most_common(list1):\n    '''\n    Write a function to get the most common element in a list.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        d = freq_count(list1)\n        return d[max(d, key=d.get)]\n    \ndef get_letter(str1):\n    '''\n    Write a function to get the frequency of all the characters in a string.\n    '''\n    if len(str1) == 0:\n        return 0\n    else:\n        d = collections.defaultdict(int)\n        for x in str1:\n            d[x] += 1\n        return d\n    \ndef get_most_frequent(list1):\n    '''\n    Write a function to get the most frequent element in a list.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        d = freq_count(list1)\n        return max(d, key=d.get)\n    \ndef sorted_dict(dict1):\n    '''\n    Write a function to get a sorted dictionary.\n    '''\n    if len(dict1) == 0:\n        return {}\n    else:\n        return collections.OrderedDict(sorted(dict1.items()))\n    \ndef find_missing(list1):\n    '''\n    Write a function to find the missing element in a list.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        return sorted(set(range(min(list1), max(list1)+1)) - set(list1))\n    \ndef max_and_min(list1):\n    '''\n    Write a function to get the maximum and minimum elements in a list.\n    '''\n    if len(list1) == 0:\n        return [0,0]\n    else:\n        return [max(list1), min(list1)]\n    \ndef freq_dict(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list.\n    '''\n    if len(list1) == 0:\n        return {}\n    else:\n        d = collections.defaultdict(int)\n        for x in list1:\n            d[x] += 1\n        return d\n    \ndef find_duplicate(list1):\n    '''\n    Write a function to find all the duplicate elements in a list.\n    '''\n    if len(list1) == 0:\n        return []\n    else:\n        return [x for x in list1 if list1.count(x) > 1]\n    \ndef get_most_common(list1):\n    '''\n    Write a function to get the most common element in a list.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        d = freq_count(list1)\n        return d[max(d, key=d.get)]\n    \ndef count_letters(str1):\n    '''\n    Write a function to get the frequency of all the letters in a string.\n    '''\n    if len(str1) == 0:\n        return 0\n    else:\n        d = collections.defaultdict(int)\n        for x in str1:\n            d[x] += 1\n        return d\n    \ndef get_longest_word(list1):\n    '''\n    Write a function to get the longest word in a list of words.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        return max(list1, key=len)\n    \ndef reverse_string(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef get_first_n_last(list1, n):\n    '''\n    Write a function to get the first nth and last nth elements in a list.\n    '''\n    if len(list1) == 0:\n        return [0,0]\n    else:\n        return [list1[0], list1[-1]]\n    \ndef sort_dict_by_value(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    if len(dict1) == 0:\n        return {}\n    else:\n        return collections.OrderedDict(sorted(dict1.items(), key=lambda x:x[1], reverse=True))\n    \ndef find_nth_element(list1, n):\n    '''\n    Write a function to get the nth element in a list.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        return list1[n]\n    \ndef is_palindrome(str1):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(str1) == 0:\n        return True\n    else:\n        return str1 =",
        "num_ids": 26
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency\n",
        "num_ids": 46
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict\n",
        "num_ids": 61
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = {}\n    for element in list1:\n        dict1[element] = list1.count(element)\n    return dict1\n    \ndef dict_frequency(dict1):\n    '''\n    Write a function to get the frequency of all the elements in a dictionary, returned as a dictionary.\n    '''\n    dict2 = {}\n    for element in dict1:\n        dict2[element] = dict1[element]\n    return dict2\n",
        "num_ids": 34
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency = {}\n    for i in list1:\n        if i in frequency:\n            frequency[i] += 1\n        else:\n            frequency[i] = 1\n    return frequency\ndef freq_max(freq):\n    '''\n    Write a function to find the most frequent key in a dictionary, and return it along with its frequency.\n    '''\n    max_freq = 0\n    for i in freq:\n        if freq[i] > max_freq:\n            max_freq = freq[i]\n            max_key = i\n    return max_key,max_freq\ndef check_repeat(list1):\n    '''\n    Write a function to check whether a list contains any repeated elements.\n    '''\n    for i in list1:\n        if list1.count(i) > 1:\n            return True\n    return False\ndef palindrome(list1):\n    '''\n    Write a function to check whether a given list contains a palindrome or not.\n    '''\n    for i in list1:\n        if list1.count(i) % 2!= 0:\n            return False\n    return True\ndef remove_duplicates(list1):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    new_list = []\n    for i in list1:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\ndef palindrome_checker(list1):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    for i in list1:\n        if list1.count(i) % 2!= 0:\n            return False\n    return True\ndef remove_match(list1, list2):\n    '''\n    Write a function to remove all the matching items from a list.\n    '''\n    new_list = []\n    for i in list1:\n        if i not in list2:\n            new_list.append(i)\n    return new_list\ndef remove_match_2(list1, list2):\n    '''\n    Write a function to remove all the matching items from a list.\n    '''\n    for i in list1:\n        if i in list2:\n            list2.remove(i)\n    return list2\ndef merge_sorted_lists(list1,list2):\n    '''\n    Write a function to merge two sorted lists into a new list.\n    '''\n    new_list = []\n    l1 = 0\n    l2 = 0\n    while l1 < len(list1) and l2 < len(list2):\n        if list1[l1] < list2[l2]:\n            new_list.append(list1[l1])\n            l1 += 1\n        else:\n            new_list.append(list2[l2])\n            l2 += 1\n    while l1 < len(list1):\n        new_list.append(list1[l1])\n        l1 += 1\n    while l2 < len(list2):\n        new_list.append(list2[l2])\n        l2 += 1\n    return new_list\ndef longest_word(string):\n    '''\n    Write a function to return the length of the longest word in a string.\n    '''\n    list1 = string.split()\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\ndef longest_word_2(string):\n    '''\n    Write a function to return the length of the longest word in a string.\n    '''\n    words = string.split()\n    longest = 0\n    for word in words:\n        if len(word) > longest:\n            longest = len(word)\n    return longest\ndef count_words(string):\n    '''\n    Write a function to return the count of each word in a string.\n    '''\n    word_count = {}\n    list1 = string.split()\n    for i in list1:\n        if i in word_count:\n            word_count[i] += 1\n        else:\n            word_count[i] = 1\n    return word_count\ndef check_perms(string1, string2):\n    '''\n    Write a function to check if a string contains all permutations of another string.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    for i in string1:\n        if string2.count(i)!= string1.count(i):\n            return False\n    return True\ndef reverse_string(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    new_string = ''\n    for i in string:\n        new_string = i + new_string\n    return new_string\ndef reverse_string_2(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    string = list(string)\n    l = len(string) - 1\n    while l > -1:\n        new_string.append(string[l])\n        l -= 1\n    return ''.join(new_string)\ndef reverse_string_3(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    return string[::-1]\ndef reverse_string_4(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    new_string = ''\n    for i in string:\n        new_string = i + new_string\n    return new_string\ndef reverse_string_5(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    return string[::-1]\ndef reverse_string_6(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    return ''.join(reversed(string))\ndef reverse_string_7(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    return ''.join(string[::-1])\ndef reverse_string_8(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    return ''.join(reversed(string))\ndef reverse_string_9(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    return string[::-1]\ndef reverse_string_10(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    return ''.join(reversed(string))\ndef rotate_str(string, rot):\n    '''\n    Write a function to rotate a string by given amount of characters.\n    '''\n    string = list(string)\n    new_string = ''\n    for i in string:\n        new_string += chr(ord(i) + rot)\n    return new_string\ndef rot_13(string):\n    '''\n    Write a function to rotate a string by 13 characters.\n    '''\n    return rotate_str(string,13)\ndef rot_13(string):\n    '''\n    Write a function to rotate a string by 13 characters.\n    '''\n    return rotate_str(string,13)\ndef palindrome_permutation(string):\n    '''\n    Write a function to check if a string is a permutation of a palindrome.\n    '''\n    list1 = list(string)\n    list1.sort()\n    if len(string) % 2 == 0:\n        for i in range(0,int(len(string)/2)):\n            if list1[i]!= list1[len(string)-1-i]:\n                return False\n        return True\n    else:\n        for i in range(0,int((len(string)-1)/2)):\n            if list1[i]!= list1[len(string)-1-i]:\n                return False\n        return True\ndef string_rot_13(string):\n    '''\n    Write a function to rotate a string by 13 characters.\n    '''\n    return rotate_str(string,13)\ndef rev_comp(string):\n    '''\n    Write a function to reverse and complement a string.\n    '''\n    string = list(string)\n    new_string = ''\n    for i in string:\n        if i == '",
        "num_ids": 29
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    l = {}\n    for x in list1:\n        if x not in l:\n            l[x] = 1\n        else:\n            l[x] += 1\n    return l\n",
        "num_ids": 47
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Method 1\n    counter = collections.Counter(list1)\n    return counter\n",
        "num_ids": 22
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    l = collections.Counter(list1)\n    return l\ndef reverse_sort(list1):\n    '''\n    Write a function to sort the list in descending order and return it.\n    '''\n    list1.sort()\n    list1.reverse()\n    return list1\ndef is_sorted(list1):\n    '''\n    Write a function to check if the list is sorted, and return True or False.\n    '''\n    if list1==sorted(list1):\n        return True\n    else:\n        return False\ndef first_max_of_list(list1):\n    '''\n    Write a function to find the first of the maximum element of a list, and return the element.\n    '''\n    max=list1[0]\n    for i in range(0,len(list1)):\n        if max<list1[i]:\n            max=list1[i]\n    return max\ndef second_max_of_list(list1):\n    '''\n    Write a function to find the second of the maximum element of a list, and return the element.\n    '''\n    max=list1[0]\n    second_max=list1[0]\n    for i in range(0,len(list1)):\n        if max<list1[i]:\n            second_max=max\n            max=list1[i]\n        elif second_max<list1[i]:\n            second_max=list1[i]\n    return second_max\ndef check_string(str1,str2):\n    '''\n    Write a function to check if a string is a permutation of another string.\n    '''\n    str1=str1.lower()\n    str2=str2.lower()\n    l1=list(str1)\n    l2=list(str2)\n    if len(l1)!=len(l2):\n        return False\n    for i in l1:\n        if i not in l2:\n            return False\n        else:\n            l2.remove(i)\n    return True\ndef reverse_string(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    str1=str1.lower()\n    str1=str1[::-1]\n    return str1\ndef find_substrings(str1,str2):\n    '''\n    Write a function to find all substrings of a string.\n    '''\n    list1=[]\n    for i in range(0,len(str1)):\n        if str1[i:len(str2)+i]==str2:\n            list1.append(str1[i:len(str2)+i])\n    return list1\ndef find_anagrams(str1,str2):\n    '''\n    Write a function to find all anagrams of a string.\n    '''\n    str1=str1.lower()\n    str2=str2.lower()\n    l1=list(str1)\n    l2=list(str2)\n    if len(l1)!=len(l2):\n        return False\n    for i in l1:\n        if i not in l2:\n            return False\n        else:\n            l2.remove(i)\n    return True\ndef palindrome_permutation(str1):\n    '''\n    Write a function to check if a string is a permutation of a palindrome.\n    '''\n    l1=list(str1.lower())\n    if len(l1)%2==0:\n        if len(l1)%4==0:\n            if l1[:len(l1)/2]==l1[len(l1)/2:][::-1]:\n                return True\n            else:\n                return False\n        else:\n            if l1[:len(l1)/2]==l1[len(l1)/2+1:][::-1]:\n                return True\n            else:\n                return False\n    else:\n        if l1[:len(l1)/2]==l1[len(l1)/2+1:][::-1]:\n            return True\n        else:\n            return False\ndef is_anagram(str1,str2):\n    '''\n    Write a function to check if two strings are anagrams.\n    '''\n    if sorted(list(str1.lower()))==sorted(list(str2.lower())):\n        return True\n    else:\n        return False\ndef add_digits(n):\n    '''\n    Write a function to add all the digits of a number.\n    '''\n    return sum(int(i) for i in str(n))\ndef read_file(filename):\n    '''\n    Write a function to read a file and return all the text in the file.\n    '''\n    try:\n        with open(filename,'r') as file:\n            text=file.read()\n            return text\n    except:\n        raise\ndef find_position(str1,str2):\n    '''\n    Write a function to find the first occurrence of a substring in a string, and return the index of the first character of the substring.\n    '''\n    l1=list(str1.lower())\n    l2=list(str2.lower())\n    for i in range(0,len(l1)):\n        if l1[i]==l2[0]:\n            if l2[0:i+1]==l1[:i+1]:\n                return i\n    return None\ndef max_subarray(list1):\n    '''\n    Write a function to find the maximum sum of a sublist in a given list.\n    '''\n    max_val=0\n    for i in range(0,len(list1)):\n        sum_val=0\n        for j in range(i,len(list1)):\n            sum_val+=list1[j]\n            if sum_val>max_val:\n                max_val=sum_val\n    return max_val\ndef is_anagram_of_palindrome(str1):\n    '''\n    Write a function to check if a string is a anagram of a palindrome.\n    '''\n    l1=list(str1.lower())\n    if len(l1)%2==0:\n        if sorted(l1[:len(l1)/2])==sorted(l1[len(l1)/2:][::-1]):\n            return True\n        else:\n            return False\n    else:\n        if sorted(l1[:len(l1)/2])==sorted(l1[len(l1)/2+1:][::-1]):\n            return True\n        else:\n            return False\ndef is_anagram_of_anagram(str1,str2):\n    '''\n    Write a function to check if a string is an anagram of anagram.\n    '''\n    if sorted(list(str1.lower()))==sorted(list(str2.lower())):\n        return True\n    else:\n        return False\ndef longest_common_substring(str1,str2):\n    '''\n    Write a function to find the longest common substring of two strings.\n    '''\n    l1=list(str1.lower())\n    l2=list(str2.lower())\n    dp=[[0 for i in range(len(l2)+1)] for j in range(len(l1)+1)]\n    for i in range(1,len(l1)+1):\n        for j in range(1,len(l2)+1):\n            if l1[i-1]==l2[j-1]:\n                dp[i][j]=dp[i-1][j-1]+1\n            else:\n                dp[i][j]=0\n    return dp[i][j]\ndef is_one_away(str1,str2):\n    '''\n    Write a function to check if two strings are one edit away.\n    '''\n    if len(str1)==len(str2):\n        if abs(len(str1)-len(str2))==1:\n            return True\n        else:\n            return False\n    elif len(str1)<len(str2):\n        if abs(len(str1)-len(str2))==1:\n            return True\n        else:\n            return False\n    elif len(str2)<len(str1)",
        "num_ids": 105
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    f_count = {}\n    for word in list1:\n        if word not in f_count:\n            f_count[word] = 1\n        else:\n            f_count[word] += 1\n    return f_count\n",
        "num_ids": 57
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d={}\n    for i in list1:\n        if i in d:\n            d[i]=d[i]+1\n        else:\n            d[i]=1\n    return d\ndef show_menu():\n    print(\"0: Exit\\n1: Insert\\n2: Print\\n3: Search\\n4: Delete\\n5: Search by Value\\n6: Exit\\n7: Random Search\\n8: Prefix Search\\n9: Suffix Search\\n10: Sort\")\n",
        "num_ids": 119
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest_n = float('inf')\n    for i in range(1, n):\n        if abs(i - n) < abs(closest_n - n):\n            closest_n = i\n    return closest_n\n",
        "num_ids": 60
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    res = [0]\n    for i in range(1, N):\n        if abs(res[-1] - i) > abs(res[-1] - N):\n            res.append(i)\n        else:\n            for j in range(len(res)):\n                if abs(res[j] - i) > abs(res[j] - N):\n                    res[j] = i\n                    break\n    return res\n",
        "num_ids": 105
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(N)\n    if n > 0:\n        return n-1\n    elif n < 0:\n        return -n+1\n    else:\n        return 0\n",
        "num_ids": 46
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0 or N == 1:\n        return N\n    # base case\n    if N == 2:\n        return 1\n",
        "num_ids": 33
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # We can see that any number smaller than n can be made larger\n    # by adding 1. To calculate the closest number to n, we can use\n    # n - 1, n - 2, n - 3, n - 4, n - 5, etc.\n    # To calculate the closest number to n, we can compare the difference\n    # of n and each of these numbers to the difference between n and the closest number\n    # smaller than n, and return the smallest one.\n    # The closest number is the one whose difference is closest to zero.\n    # We can find the closest difference from 0 by examining the numbers 1, 2, 3, 4, 5, 6, etc.\n    # To compare two numbers, we can use the function abs(a - b).\n    # If abs(a - b) is the smallest, then a is the closest number to n.\n    return abs(n - closest_num(n - 1) - closest_num(n - 2) - closest_num(n - 3) - closest_num(n - 4) - closest_num(n - 5))\n",
        "num_ids": 247
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if len(N) == 1:\n        return 0\n    if N[0] > N[1]:\n        return 0\n    if N[-1] < N[-2]:\n        return N[-1]\n    return N[-2]\n",
        "num_ids": 62
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    res = []\n    for i in range(len(N)):\n        if N[i] == min(N):\n            res.append(i)\n    if len(res) == 1:\n        return 0\n    else:\n        return min(res)\n",
        "num_ids": 64
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return sorted(range(1, N+1), key=lambda x: abs(x - N))[0]\n",
        "num_ids": 29
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    l = [x for x in range(1, N+1)]\n    l.append(N)\n    l.sort()\n    min_dist = l[-1] - l[0]\n    min_idx = l[0]\n    for i in range(1, len(l)):\n        if l[i] - l[i-1] < min_dist:\n            min_idx = l[i-1]\n            min_dist = l[i] - l[i-1]\n    return min_idx\n",
        "num_ids": 130
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return int(math.ceil(N/2))\n",
        "num_ids": 16
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(max(len(word) for word in list1))\n",
        "num_ids": 18
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = -1\n    for item in list1:\n        if len(item) > max_length:\n            max_length = len(item)\n    return max_length\n",
        "num_ids": 46
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    lengths = []\n    for x in list1:\n        lengths.append(len(x))\n    return max(lengths)\n",
        "num_ids": 35
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n",
        "num_ids": 45
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        return len(max(list1,key = len))\n",
        "num_ids": 35
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # Your Code Here\n    temp = 0\n    for i in list1:\n        if len(i) > temp:\n            temp = len(i)\n    return temp\n",
        "num_ids": 43
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    \n    max_len=0\n    for i in range(len(list1)):\n        if len(list1[i])>max_len:\n            max_len=len(list1[i])\n    return max_len\n",
        "num_ids": 58
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1 = [len(word) for word in list1]\n    return max(list1)\n",
        "num_ids": 26
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len_max = 0\n    for word in list1:\n        if len(word) > len_max:\n            len_max = len(word)\n    return len_max\n",
        "num_ids": 45
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_len = len(sub_str)\n    for i in xrange(len(str1)):\n        if str1[i:i+sub_len] == sub_str:\n            return True\n    return False\n",
        "num_ids": 55
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for val in sub_str:\n        if val in str1:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    str_index = -1\n    for s in sub_str:\n        index = str1.find(s, str_index+1)\n        if index == -1:\n            return False\n        str_index = index\n    return True\n",
        "num_ids": 59
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    n = len(sub_str)\n    str_l = len(str1)\n    m = len(str1) - n + 1\n    count = 0\n    for i in range(m):\n        j = 0\n        while j < n:\n            if str1[i + j]!= sub_str[j]:\n                break\n            j += 1\n        if j == n:\n            count += 1\n    return count\n",
        "num_ids": 104
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    l = len(sub_str)\n    #print(l)\n    for i in range(len(str1)-l+1):\n        #print('{}, {}'.format(str1[i:i+l], sub_str))\n        if str1[i:i+l] == sub_str:\n            return True\n    return False\n",
        "num_ids": 84
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not sub_str:\n        return True\n    else:\n        return sub_str in str1\n",
        "num_ids": 27
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1) - len(sub_str) + 1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n",
        "num_ids": 53
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any([sub_str in value for value in str1])\n",
        "num_ids": 18
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str in s for s in str1)\n",
        "num_ids": 18
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 10: \n        return False\n    else: \n        num = str(n)\n        for i in range(len(num) - 1):\n            if int(num[i]) < int(num[i+1]):\n                return False\n        return True\n",
        "num_ids": 68
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def is_undulating_helper(n, dp):\n        if len(str(n)) == 1:\n            return False\n        if n in dp:\n            return dp[n]\n        if n % 10 == 0 or n < 10:\n            return False\n        if is_undulating_helper(n // 10, dp):\n            dp[n] = True\n            return True\n        else:\n            dp[n] = False\n            return False\n    dp = {}\n    return is_undulating_helper(n, dp)\n",
        "num_ids": 134
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n%2==0:\n        return False\n    a = n\n    while a>0:\n        b = a/10\n        c = a%10\n        if b!=c:\n            return False\n        a = b\n    return True\n",
        "num_ids": 62
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    num_str = str(n)\n    len_num_str = len(num_str)\n",
        "num_ids": 26
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    n = str(n)\n    for i in range(len(n) - 1):\n        if int(n[i]) > int(n[i + 1]):\n            return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if len(str(n)) == 1:\n        return False\n    else:\n        nums = []\n        temp = n\n        while temp:\n            nums.append(temp % 10)\n            temp /= 10\n        nums.reverse()\n        for i in range(len(nums) - 1):\n            if nums[i] == nums[i+1]:\n                return False\n        return True\n    \ndef is_undulating_fast(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if len(str(n)) == 1:\n        return False\n    else:\n        nums = []\n        for i in range(len(str(n))):\n            nums.append(int(str(n)[i]))\n        for i in range(len(nums) - 1):\n            if nums[i] == nums[i+1]:\n                return False\n        return True\n",
        "num_ids": 97
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    l = []\n    k = 1\n    while k <= n:\n        l.append(k)\n        k += 1\n    l.reverse()\n    if n > 0:\n        for i in range(0,len(l)-1):\n            if l[i] + l[i+1] == n:\n                return True\n        return False\n    else:\n        for i in range(0,len(l)-1):\n            if l[i] - l[i+1] == n:\n                return True\n        return False\n",
        "num_ids": 129
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    from fractions import Fraction\n    import math\n    d = math.sqrt(n)\n    if d.is_integer(): \n        return False\n    else: \n        f = Fraction(n,d)\n        d = int(d)\n        if f.numerator == 1: \n            return False\n        else: \n            return True\n",
        "num_ids": 87
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    n=str(n)\n    a=int(n[0])\n    b=int(n[1])\n    c=int(n[2])\n    return a*a+b*b==c*c\n",
        "num_ids": 54
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b % 2 == 0:\n        return power(a,b/2)*power(a,b/2)\n    else:\n        return a*power(a,(b-1)/2)*power(a,(b-1)/2)\n    return None\n",
        "num_ids": 89
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b%2==1:\n        return power(a, b-1)*a\n    else:\n        return power(a*a, b/2)\n",
        "num_ids": 52
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    return a*power(a, b-1)\n",
        "num_ids": 37
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a*power(a,b-1)\n",
        "num_ids": 30
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b == -1:\n        return 1/a\n    if b%2 == 0:\n        return power(a*a, b/2)\n    else:\n        return a*power(a, b-1)\n",
        "num_ids": 77
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b % 2 == 0:\n        return power(a * a, b/2)\n    else:\n        return a * power(a, b-1)\n",
        "num_ids": 65
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b % 2 == 0:\n        return power(a * a, b // 2)\n    else:\n        return a * power(a * a, b // 2)\n",
        "num_ids": 55
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result = result * a\n    return result\n",
        "num_ids": 27
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1/power(a, abs(b))\n    else:\n        return power(a, b-1) * a\n",
        "num_ids": 51
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b==1:\n        return a\n    elif b%2==0:\n        return power(a*a,b/2)\n    elif b%2==1:\n        return a*power(a*a,(b-1)/2)\n",
        "num_ids": 76
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_list = []\n    for x in test_list:\n        index_list.append(x[1])\n    return index_list.index(min(index_list))\n",
        "num_ids": 45
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    new_list=sorted(test_list,key=itemgetter(1))\n    return new_list[0][0]\n",
        "num_ids": 34
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    print(min(test_list, key = itemgetter(1)))\n",
        "num_ids": 20
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key = itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_val = min(test_list,key=itemgetter(1))\n    return min_val[0]\n",
        "num_ids": 31
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_val = test_list[0][1]\n    min_val_index = 0\n    for i in range(len(test_list)):\n        if test_list[i][1] < min_val:\n            min_val = test_list[i][1]\n            min_val_index = i\n    return test_list[min_val_index][0]\n",
        "num_ids": 93
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 10000\n    for l in lst:\n        if len(l) < min_length:\n            min_length = len(l)\n    return min_length\n",
        "num_ids": 45
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for item in lst:\n        if(len(item) < min_len):\n            min_len = len(item)\n    return min_len\n",
        "num_ids": 52
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = sys.maxint\n    for i in lst:\n        if len(i)<min_len:\n            min_len = len(i)\n    return min_len\n",
        "num_ids": 48
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    #Initialize min_length to length of first list in lst\n    min_length = len(lst[0])\n    #Iterate over all lists in lst and find the minimum length\n    for lst in lst:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length\n",
        "num_ids": 86
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = float('inf')\n    for i in lst:\n        if len(i) < min:\n            min = len(i)\n    return min\n",
        "num_ids": 40
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for l in lst:\n        if min_len > len(l):\n            min_len = len(l)\n    return min_len\n",
        "num_ids": 50
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for item in lst:\n        if len(item) < min_len:\n            min_len = len(item)\n    return min_len\n",
        "num_ids": 48
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = lst[0]\n    for el in lst:\n        if len(el) < len(min_length):\n            min_length = el\n    return len(min_length)\n",
        "num_ids": 51
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length=None\n    if not lst:\n        return min_length\n    for e in lst:\n        if not min_length or len(e)<min_length:\n            min_length=len(e)\n    return min_length\n",
        "num_ids": 63
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    print(\"Enter list of lists\\n\")\n    list_of_lists=list(eval(input()))\n    mini=len(list_of_lists[0])\n    for each_list in list_of_lists:\n        if len(each_list)<mini:\n            mini=len(each_list)\n    print(\"Smallest list has length\",mini)\n",
        "num_ids": 89
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    divs = []\n    for i in range(1, n+1):\n        if n%i == 0:\n            divs.append(i)\n    return len(divs)\n",
        "num_ids": 58
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "num_ids": 36
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    c = 0\n    while i <= n:\n        if n % i == 0:\n            c += 1\n        i += 1\n    return c\n",
        "num_ids": 42
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # Base case\n    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    # Divisors are the factors other than 1\n    divisors = 0\n    for i in range(2, n):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n",
        "num_ids": 82
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1 + divisor(n-1))\n",
        "num_ids": 31
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n==1:\n        return 1\n    divisors=[]\n    for i in range(1,n):\n        if n%i==0:\n            divisors.append(i)\n    divisors.append(n)\n    divisors=set(divisors)\n    divisors=list(divisors)\n    divisors.sort()\n    return len(divisors)\n",
        "num_ids": 101
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divs = []\n    div = 1\n    while div * div <= n:\n        if n % div == 0:\n            divs.append(div)\n            if div!= n // div:\n                divs.append(n // div)\n        div += 1\n    return len(divs)\n",
        "num_ids": 74
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n",
        "num_ids": 44
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    return len(filter(lambda x: n % x == 0, [i for i in range(1, n + 1) if n % i == 0]))\n",
        "num_ids": 39
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    counter=0\n    for i in range(1, n+1):\n        if n%i == 0:\n            counter += 1\n    return counter\n",
        "num_ids": 38
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for i in list1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n",
        "num_ids": 46
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    output_dict = {}\n",
        "num_ids": 11
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Key: Element, Value: Number of times it occurs\n    return_dict = {}\n    for val in list1:\n        if val in return_dict:\n            return_dict[val] += 1\n        else:\n            return_dict[val] = 1\n    return return_dict\n",
        "num_ids": 70
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    new_dict = {}\n    for i in list1:\n        if i in new_dict:\n            new_dict[i] += 1\n        else:\n            new_dict[i] = 1\n    return new_dict\n",
        "num_ids": 56
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    newlist = []\n    for l in list1:\n        for i in l:\n            newlist.append(i)\n    dic = {}\n    for i in newlist:\n        if i not in dic:\n            dic[i] = 1\n        else:\n            dic[i] += 1\n    return dic\n",
        "num_ids": 82
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dic={}\n    for i in list1:\n        if i in dic:\n            dic[i]+=1\n        else:\n            dic[i]=1\n    return dic\n",
        "num_ids": 50
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n",
        "num_ids": 61
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for i in list1:\n        if i not in frequency_dict:\n            frequency_dict[i] = 1\n        else:\n            frequency_dict[i] = frequency_dict[i] + 1\n    return frequency_dict\n",
        "num_ids": 64
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dic = {}\n    for i in list1:\n        if i in dic.keys():\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    return dic\n",
        "num_ids": 53
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = {}\n    for item in list1:\n        if item not in dictionary:\n            dictionary[item] = 1\n        else:\n            dictionary[item] += 1\n    return dictionary\n",
        "num_ids": 50
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for i in numbers:\n        result = result * i\n    return result / len(numbers)\n",
        "num_ids": 31
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    numbers_new = []\n    for number in numbers:\n        numbers_new.append(number * len(numbers))\n    return numbers_new\n",
        "num_ids": 39
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    result = 1\n    for number in numbers:\n        result = result * number\n    return result\n",
        "num_ids": 27
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product/len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return reduce(lambda x, y: x * y, numbers) / len(numbers)\n",
        "num_ids": 24
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for i in numbers:\n        product *= i\n    return product / len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if not isinstance(numbers, list):\n        raise TypeError\n    result = 1\n    for i in numbers:\n        result = result * i\n    return result/len(numbers)\n",
        "num_ids": 48
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for n in numbers:\n        result = result * n\n    return result / len(numbers)\n",
        "num_ids": 31
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for i in numbers:\n        result *= i\n    return result / len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    num = 1\n    for x in numbers:\n        num = num * x\n    return num / len(numbers)\n    \n    \n    \n    \n    \n    ",
        "num_ids": 42
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    if n % 2 == 0:\n        return decimal_to_binary(n/2) + '0'\n    else:\n        return decimal_to_binary(n/2) + '1'\n",
        "num_ids": 62
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = []\n    if n == 0:\n        return '0'\n    while n > 0:\n        binary.append(str(n % 2))\n        n = n // 2\n    binary.reverse()\n    return ''.join(binary)\n",
        "num_ids": 61
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return \"0\"\n    \n    binary = \"\"\n    while n > 0: \n        binary = str(n % 2) + binary \n        n = n / 2 \n",
        "num_ids": 52
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return ''\n    elif n % 2 == 0:\n        return decimal_to_binary(n // 2) + '0'\n    else:\n        return decimal_to_binary((n - 1) // 2) + '1'\n",
        "num_ids": 64
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    #base case\n    if n == 0:\n        return 0\n    #recursive case\n    else:\n        return n % 2 + 10 * decimal_to_binary(n // 2)\n",
        "num_ids": 47
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n",
        "num_ids": 16
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = []\n    while(n):\n        binary.append(n%2)\n        n //= 2\n    return binary[::-1]\n",
        "num_ids": 38
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return 0\n    bits = ''\n    while n > 0:\n        bits += str(n % 2)\n        n /= 2\n    return bits[::-1]\n",
        "num_ids": 50
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if not isinstance(n,int) or n < 0:\n        raise ValueError('invalid input')\n    if n == 0:\n        return '0'\n    b = ''\n    while n > 0:\n        b = str(n % 2) + b\n        n = n // 2\n    return b\n",
        "num_ids": 76
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n % 2) + 10 * decimal_to_binary(n // 2)\n",
        "num_ids": 38
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num+=1\n    while not is_palindrome(num):\n        num+=1\n    return num\n",
        "num_ids": 28
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = num + 1\n    while not is_palindrome(num):\n        num = num + 1\n    return num\ndef is_palindrome(num):\n    '''\n    Write a function to determine whether a given input is a palindrome or not.\n    '''\n    return str(num) == str(num)[::-1]\ndef remove_duplicates(num):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    return list(set(num))\ndef is_leap_year(year):\n    '''\n    Write a function to determine whether a given year is a leap year or not.\n    '''\n    return year%4 == 0 and (year%100!= 0 or year%400 == 0)\ndef find_leap_years(year_1, year_2):\n    '''\n    Write a function to find all the leap years between two specified years.\n    '''\n    return [x for x in range(year_1, year_2) if is_leap_year(x)]\ndef find_leap_years_between_years(year_1, year_2):\n    '''\n    Write a function to find all the leap years between two specified years.\n    '''\n    return [x for x in range(year_1, year_2+1) if is_leap_year(x)]\ndef is_leap_year_list(years):\n    '''\n    Write a function to determine whether a given list of years is a leap year or not.\n    '''\n    return [x for x in years if is_leap_year(x)]\ndef sum_of_multiples(num, start, end):\n    '''\n    Write a function to find the sum of the first n multiples of a given number.\n    '''\n    return num * start + (num - 1) * (end - start - 1)\ndef sum_of_multiples_list(num, start, end):\n    '''\n    Write a function to find the sum of the first n multiples of a given number.\n    '''\n    return sum([num * x for x in range(start, end+1)])\ndef sum_of_multiples_list2(num, start, end):\n    '''\n    Write a function to find the sum of the first n multiples of a given number.\n    '''\n    return sum(x * num for x in range(start, end+1))\ndef sum_of_multiples_list3(num, start, end):\n    '''\n    Write a function to find the sum of the first n multiples of a given number.\n    '''\n    return sum([num * x for x in range(start, end+1)])\ndef sum_of_multiples_list4(num, start, end):\n    '''\n    Write a function to find the sum of the first n multiples of a given number.\n    '''\n    return sum(x * num for x in range(start, end+1))\ndef sum_of_multiples_list5(num, start, end):\n    '''\n    Write a function to find the sum of the first n multiples of a given number.\n    '''\n    return sum(num * x for x in range(start, end+1))\ndef sum_of_multiples_list6(num, start, end):\n    '''\n    Write a function to find the sum of the first n multiples of a given number.\n    '''\n    return sum(num * x for x in range(start, end+1))\ndef sum_of_multiples_list7(num, start, end):\n    '''\n    Write a function to find the sum of the first n multiples of a given number.\n    '''\n    return sum([num * x for x in range(start, end+1)])\ndef sum_of_multiples_list8(num, start, end):\n    '''\n    Write a function to find the sum of the first n multiples of a given number.\n    '''\n    return sum([num * x for x in range(start, end+1)])\ndef sum_of_multiples_list9(num, start, end):\n    '''\n    Write a function to find the sum of the first n multiples of a given number.\n    '''\n    return sum([num * x for x in range(start, end+1)])\ndef sum_of_multiples_list10(num, start, end):\n    '''\n    Write a function to find the sum of the first n multiples of a given number.\n    '''\n    return sum([num * x for x in range(start, end+1)])\ndef sum_of_multiples_list11(num, start, end):\n    '''\n    Write a function to find the sum of the first n multiples of a given number.\n    '''\n    return sum([num * x for x in range(start, end+1)])\ndef sum_of_multiples_list12(num, start, end):\n    '''\n    Write a function to find the sum of the first n multiples of a given number.\n    '''\n    return sum([num * x for x in range(start, end+1)])\ndef sum_of_multiples_list13(num, start, end):\n    '''\n    Write a function to find the sum of the first n multiples of a given number.\n    '''\n    return sum([num * x for x in range(start, end+1)])\ndef sum_of_multiples_list14(num, start, end):\n    '''\n    Write a function to find the sum of the first n multiples of a given number.\n    '''\n    return sum([num * x for x in range(start, end+1)])\ndef sum_of_multiples_list15(num, start, end):\n    '''\n    Write a function to find the sum of the first n multiples of a given number.\n    '''\n    return sum([num * x for x in range(start, end+1)])\ndef sum_of_multiples_list16(num, start, end):\n    '''\n    Write a function to find the sum of the first n multiples of a given number.\n    '''\n    return sum([num * x for x in range(start, end+1)])\ndef sum_of_multiples_list17(num, start, end):\n    '''\n    Write a function to find the sum of the first n multiples of a given number.\n    '''\n    return sum([num * x for x in range(start, end+1)])\ndef sum_of_multiples_list18(num, start, end):\n    '''\n    Write a function to find the sum of the first n multiples of a given number.\n    '''\n    return sum([num * x for x in range(start, end+1)])\ndef sum_of_multiples_list19(num, start, end):\n    '''\n    Write a function to find the sum of the first n multiples of a given number.\n    '''\n    return sum([num * x for x in range(start, end+1)])\ndef sum_of_multiples_list20(num, start, end):\n    '''\n    Write a function to find the sum of the first n multiples of a given number.\n    '''\n    return sum([num * x for x in range(start, end+1)])\ndef sum_of_multiples_list21(num, start, end):\n    '''\n    Write a function to find the sum of the first n multiples of a given number.\n    '''\n    return sum([num * x for x in range(start, end+1)])\ndef sum_of_multiples_list22(num, start, end):\n    '''\n    Write a function to find the sum of the first n multiples of a given number.\n    '''\n    return sum([num * x for x in range(start, end+1)])\ndef sum_of_multiples_list23(num, start, end):\n    '''\n    Write a function to find the sum of the first n multiples of a given number.\n    '''\n    return sum([num * x for x in range(start, end+1)])\ndef sum_of_multiples_list24(num, start, end):\n    '''\n    Write a function to find the sum of the first n multiples of a give",
        "num_ids": 19
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = num + 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n",
        "num_ids": 30
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    length = len(num_str)\n    for i in xrange(1,length):\n        if int(num_str[:i] + num_str[i:length]+num_str[:i][::-1]) > num:\n            return int(num_str[:i] + num_str[i:length]+num_str[:i][::-1])\n    return -1\n",
        "num_ids": 106
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    s = str(num)\n    length = len(s)\n    for i in range(length/2):\n        if s[i]!= s[length-i-1]:\n            return num+1\n        else:\n            continue\n    return num+1\n",
        "num_ids": 65
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_len = len(str(num))\n    # if num is a palindrome, num and its reverse are equal\n    if num == int(str(num)[::-1]):\n        return num + 1\n",
        "num_ids": 53
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = num\n    if (n == 0):\n        return 1\n    n = n - 1\n    if (n % 2 == 0):\n        n = n / 2\n    while (n % 2 == 0):\n        n = n / 2\n    n = n + 1\n    while (not is_palindrome(n)):\n        n = n + 1\n    return n\n",
        "num_ids": 92
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert to string\n    num_str = str(num)\n    # reverse the string\n    reversed_str = num_str[::-1]\n    # convert to list of integers\n    num_list = [int(i) for i in reversed_str]\n    # find the next smallest palindrome, which is the inverse of the string\n    num_list.pop(0)\n    num_list.append(0)\n    for i in range(len(num_list)):\n        num_list[i] *= 10\n    num_list[0] += 1\n    for i in range(1, len(num_list)):\n        num_list[i] -= 9\n    num_list[len(num_list) - 1] -= 1\n    # convert back to string\n    for i in range(len(num_list)):\n        num_list[i] = str(num_list[i])\n    reversed_str = ''.join(num_list)\n    # convert to integer\n    next_smallest_palindrome_num = int(reversed_str)\n    return next_smallest_palindrome_num\n",
        "num_ids": 276
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 0:\n        return 0\n    if num == 1:\n        return 2\n    if num == 2:\n        return 3\n    if num == 3:\n        return 5\n    low = 0\n    high = num\n    while high > low:\n        mid = (high + low) / 2\n        if mid*mid == num:\n            return mid + 1\n        elif mid*mid < num:\n            low = mid\n        else:\n            high = mid\n    return mid + 1\n",
        "num_ids": 119
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    if len(num) == 1:\n        num = int(num)\n        num = num+1\n        num = str(num)\n        num = num[::-1]\n        return int(num)\n    elif len(num) == 2:\n        num = int(num)\n        num = num+1\n        num = str(num)\n        num = num[::-1]\n        return int(num)\n    else:\n        last = num[-1]\n        first = num[0]\n        if last!= \"9\":\n            num = int(num)\n            num = num+1\n            num = str(num)\n            num = num[::-1]\n            return int(num)\n        else:\n            if num[1] == \"9\":\n                num = num[0]+\"0\"\n                num = int(num)\n                num = num+1\n                num = str(num)\n                num = num[::-1]\n                return int(num)\n            else:\n                num = int(num)\n                num = num+1\n                num = str(num)\n                num = num[::-1]\n                return int(num)\ndef is_palindrome(num):\n    '''\n    Write a function to determine if a number is palindrome or not.\n    '''\n    num = str(num)\n    if len(num) == 1:\n        return True\n    elif len(num) == 2:\n        return True\n    else:\n        last = num[-1]\n        first = num[0]\n        if last!= first:\n            return False\n        else:\n            return True\ndef is_pandigital(num,base = 10):\n    '''\n    Write a function that returns True if a string is pandigital, and returns False otherwise.\n    A string is said to be pandigital if it has all the digits 1 to base, without any gaps.\n    '''\n    num = str(num)\n    if len(num) == base:\n        for i in range(1,base+1):\n            if str(i) not in num:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef is_superpalindrome(num):\n    '''\n    Write a function to check whether a string is a superpalindrome or not.\n    A string is said to be a superpalindrome if it is a palindrome and has extra space at its both ends.\n    '''\n    num = str(num)\n    if len(num) == 1:\n        return True\n    elif len(num) == 2:\n        if num[0] == num[1]:\n            return True\n        else:\n            return False\n    else:\n        last = num[-1]\n        first = num[0]\n        if last == first:\n            return is_superpalindrome(num[1:-1])\n        else:\n            return False\ndef is_antipalindrome(num):\n    '''\n    Write a function to check whether a string is an antipalindrome or not.\n    A string is said to be an antipalindrome if it is a palindrome and has the opposite characters at both ends.\n    '''\n    num = str(num)\n    if len(num) == 1:\n        return True\n    elif len(num) == 2:\n        if num[0] == num[1]:\n            return True\n        else:\n            return False\n    else:\n        last = num[-1]\n        first = num[0]\n        if last == first:\n            return is_antipalindrome(num[1:-1])\n        else:\n            return False\ndef is_antipalindrome_str(num):\n    '''\n    Write a function to check whether a string is an antipalindrome or not.\n    A string is said to be an antipalindrome if it is a palindrome and has the opposite characters at both ends.\n    '''\n    num = str(num)\n    if len(num) == 1:\n        return True\n    elif len(num) == 2:\n        if num[0] == num[1]:\n            return True\n        else:\n            return False\n    else:\n        last = num[-1]\n        first = num[0]\n        if last == first:\n            return is_antipalindrome_str(num[1:-1])\n        else:\n            return False\ndef is_superantipalindrome(num):\n    '''\n    Write a function to check whether a string is a superantipalindrome or not.\n    A string is said to be a superantipalindrome if it is a palindrome and has extra space at its both ends.\n    '''\n    num = str(num)\n    if len(num) == 1:\n        return True\n    elif len(num) == 2:\n        if num[0] == num[1]:\n            return True\n        else:\n            return False\n    else:\n        last = num[-1]\n        first = num[0]\n        if last == first:\n            return is_superantipalindrome(num[1:-1])\n        else:\n            return False\ndef is_superantipalindrome_str(num):\n    '''\n    Write a function to check whether a string is a superantipalindrome or not.\n    A string is said to be a superantipalindrome if it is a palindrome and has extra space at its both ends.\n    '''\n    num = str(num)\n    if len(num) == 1:\n        return True\n    elif len(num) == 2:\n        if num[0] == num[1]:\n            return True\n        else:\n            return False\n    else:\n        last = num[-1]\n        first = num[0]\n        if last == first:\n            return is_superantipalindrome_str(num[1:-1])\n        else:\n            return False\ndef is_antipalindrome_number(num):\n    '''\n    Write a function to check whether a number is an antipalindrome or not.\n    A number is said to be an antipalindrome if it is a palindrome and has the opposite digits at both ends.\n    '''\n    num = str(num)\n    if len(num) == 1:\n        return True\n    elif len(num) == 2:\n        if num[0] == num[1]:\n            return True\n        else:\n            return False\n    else:\n        last = num[-1]\n        first = num[0]\n        if last == first:\n            return is_antipalindrome_number(num[1:-1])\n        else:\n            return False\ndef is_superantipalindrome_number(num):\n    '''\n    Write a function to check whether a number is a superantipalindrome or not.\n    A number is said to be a superantipalindrome if it is a palindrome and has extra space at its both ends.\n    '''\n    num = str(num)\n    if len(num) == 1:\n        return True\n    elif len(num) == 2:\n        if num[0] == num[1]:\n            return True\n        else:\n            return False\n    else:\n        last = num[-1]\n        first = num[0]\n        if last == first:\n            return is_superantipalindrome_number(num[1:-1])\n        else:\n            return False\ndef is_antipalindrome_number_str(num):\n    '''\n    Write a function to check whether a number is an antipalindrome or not.\n    A number is said to be an antipalindrome if it is a palindrome and has the opposite digits at both ends.\n    '''\n    num = str(num)\n    if len(num) == 1:\n        return True\n    elif len(num) == 2:\n        if num[0] == num[1]:\n            return True\n        else:\n            return False\n    else:\n        last = num[-1]\n        first = num[0]\n        if last == first:\n            return is_antipalindrome_number_str(num[1:-1])\n        else:\n            return False\ndef is_superantipalindrome_number_str(num):\n    '''\n    Write a function to chec",
        "num_ids": 9
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if arr == None or len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    pivot = arr[0]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    if k < len(left):\n        return kth_element(left, k)\n    elif k < len(left) + len(middle):\n        return pivot\n    else:\n        return kth_element(right, k - len(left) - len(middle))\n",
        "num_ids": 156
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k <= 0:\n        return arr[0]\n    elif k > len(arr):\n        return arr[-1]\n",
        "num_ids": 34
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr.sort()\n    return arr[k-1]\n",
        "num_ids": 17
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        raise IndexError('array index out of range')\n    n = len(arr)\n    i = n - 1\n    while i > k-1:\n        arr[i], arr[i-k] = arr[i-k], arr[i]\n        i -= 1\n    return arr[k-1]\n",
        "num_ids": 85
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # base case\n    if len(arr) == 0:\n        return None\n    # base case\n    if k == 0:\n        return arr[0]\n    # recursive case\n    else:\n        mid = len(arr) / 2\n        if mid - k >= 0:\n            return kth_element(arr[mid:], k)\n        else:\n            return kth_element(arr[:mid], k - (mid - k))\n",
        "num_ids": 107
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not arr:\n        return None\n    start, end = 0, len(arr) - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if arr[mid] == k:\n            return mid + 1\n        elif arr[mid] > k:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return None\n",
        "num_ids": 95
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 0 or k >= len(arr) + 1:\n        return None\n    if k < len(arr):\n        return arr[k]\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = start + (end-start) // 2\n        if arr[mid] == k:\n            return arr[mid]\n        if k < arr[mid]:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return arr[start-1]\n",
        "num_ids": 126
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n",
        "num_ids": 11
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.replace('_','').lower()\n    words = [word[0].lower()]\n    for i in range(1, len(word)):\n        if word[i-1] =='' and word[i]!='':\n            words.append('_')\n        words.append(word[i])\n    return ''.join(words)\n",
        "num_ids": 89
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    \n    camelcase_string = \"\"\n    for character in word:\n        if character == '_':\n            camelcase_string += \" \"\n        else:\n            camelcase_string += character\n    return camelcase_string.strip()\n",
        "num_ids": 61
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    \n    camel_case = ''\n    is_first_word = True\n    for char in word:\n        if char.isupper():\n            is_first_word = False\n            camel_case += char.lower()\n        elif is_first_word:\n            camel_case += char\n        else:\n            camel_case += char.upper()\n    return camel_case\n",
        "num_ids": 95
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return \"\".join([w.title() for w in words])\n",
        "num_ids": 28
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    first_upper = True\n    for c in word:\n        if c == '_':\n            first_upper = False\n            continue\n        if not first_upper:\n            c = c.upper()\n        first_upper = False\n    return word\n",
        "num_ids": 61
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if not word:\n        return word\n    new = []\n    words = word.split('_')\n    for i, word in enumerate(words):\n        if i == 0:\n            new.append(word)\n        else:\n            new.append(word.capitalize())\n    return ''.join(new)\n",
        "num_ids": 78
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_cased = []\n    snake_case = word.split('_')\n    for word in snake_case:\n        if word:\n            word = word.capitalize()\n            camel_cased.append(word)\n        else:\n            camel_cased.append(' ')\n    return ''.join(camel_cased)\n",
        "num_ids": 88
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word == '':\n        return word\n    return word[0].upper() + word[1:].replace('_', '')\n",
        "num_ids": 34
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if not word:\n        return \"\"\n    if len(word) == 1:\n        return word[0].upper()\n    else:\n        return word[0].upper() + \"\".join([w.title() for w in word[1:]])\n",
        "num_ids": 62
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    capitalized = []\n    for word in words:\n        capitalized.append(word.capitalize())\n    return ''.join(capitalized)\n",
        "num_ids": 47
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    num = 0\n    # First calculate the number of paths from the (0, 0) to (n-1, m-1).\n    for i in xrange(n):\n        for j in xrange(m):\n            if i == 0 and j == 0:\n                num += 1\n            elif i == 0:\n                num += m - j\n            elif j == 0:\n                num += n - i\n            else:\n                num += min(n - i, m - j)\n    # Second, calculate the number of paths from (n-1, m-1) to (0, 0).\n    for i in xrange(n):\n        for j in xrange(m):\n            if i == n - 1 and j == m - 1:\n                num += 1\n            elif i == n - 1:\n                num += m - j\n            elif j == m - 1:\n                num += n - i\n            else:\n                num += min(i, m - j)\n    return num\n",
        "num_ids": 237
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return 2*n*m - (n+m)\n",
        "num_ids": 16
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    graph = [[0 for i in range(n+1)] for j in range(m+1)] \n    for i in range(n+1):\n        graph[i][0] = 1\n        graph[0][i] = 1\n    print(graph)\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            graph[i][j] = graph[i-1][j] + graph[i][j-1]\n    print(graph)\n    result = 0\n    for i in range(m+1):\n        result += graph[n][i]\n    return result\n",
        "num_ids": 152
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    eulerian_num = 0\n    for a in range(n):\n        eulerian_num += (a**m)\n    return eulerian_num\n",
        "num_ids": 41
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    def eulerian_num(n, m): \n        '''\n        Write a function to find the Eulerian number a(n, m).\n        '''\n        \n        def eulerian_num(n, m): \n            '''\n            Write a function to find the Eulerian number a(n, m).\n            '''\n            \n            if m == 0:\n                return 1\n            else:\n                return n * eulerian_num(n-1, m-1)\n",
        "num_ids": 38
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if (n % 2 == 1 or m % 2 == 1) and (n + m == 2 * m):\n        return n // 2 + m // 2\n    if (n % 2 == 1 or m % 2 == 1) and (n + m!= 2 * m):\n        return 0\n    return n // 2 + m // 2\n",
        "num_ids": 79
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < 0 or m < 0:\n        return -1\n    if n == 0 or m == 0:\n        return 0\n    return a(n-1, m) + a(n, m-1) - a(n-1, m-1)\n",
        "num_ids": 64
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return sum(range(n+1, m+1))\n",
        "num_ids": 17
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m < n: \n        return None\n    if m == 1: \n        return 1\n    if n == 1: \n        return 0\n    return eulerian_num(n - 1, m) + eulerian_num(n - 1, m - 1)\n",
        "num_ids": 68
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    i = 0\n    while (i < m):\n        if (gcd(n, m) == 1):\n            return i + 1\n        else:\n            m = m - 1\n            i = i + 1\n    return 0\n",
        "num_ids": 57
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for index in range(len(input_list)):\n        input_list[index].sort()\n        \n",
        "num_ids": 28
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # These inner lists are holding strings.\n    # \n    # We sort them, then we convert each inner list back into a string.\n    # \n    # For example:\n    # \n    # input_list = [['cat', 'dog', 'fish'], ['bug', 'bee', 'fish']]\n    # \n    # will become:\n    # \n    # output_list = [['cat', 'dog', 'fish'], ['bug', 'bee', 'fish']]\n    \n    for i in range(len(input_list)):\n        input_list[i] = ''.join(sorted(input_list[i]))\n    \n    return input_list\n",
        "num_ids": 165
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for list in input_list:\n        list.sort()\n    return input_list\n",
        "num_ids": 23
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Initialize output list to be returned\n    output_list = []\n",
        "num_ids": 19
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublist_list = []\n    for string in input_list:\n        sublist_list.append(sorted(string))\n    return sublist_list\n",
        "num_ids": 40
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n    for items in input_list:\n        items.sort()\n        output_list.append(items)\n    return output_list\n",
        "num_ids": 40
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if not input_list:\n        return []\n    if isinstance(input_list[0], list):\n        return [sort_sublists(sublist) for sublist in input_list]\n    return sorted(input_list)\n",
        "num_ids": 57
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=len)\n",
        "num_ids": 15
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return_list = []\n    for sublist in input_list:\n        sublist.sort(key=lambda word: word[0])\n        return_list.append(sublist)\n    return return_list\n",
        "num_ids": 52
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Check if the list is empty\n    if not input_list:\n        return input_list\n",
        "num_ids": 25
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count +=1\n    return count\n    \ndef list_of_powers(n):\n    '''\n    Write a python function to return a list of powers from 1 to n\n    '''\n    lst = [i**i for i in range(1,n)]\n    return lst\n    \ndef to_binary(n):\n    '''\n    Write a python function to return the binary representation of the given decimal number\n    '''\n    lst = []\n    lst.insert(0,n%2)\n    if n >= 2:\n        lst = to_binary(n//2)\n    return lst\n    \ndef duplicate(lst):\n    '''\n    Write a python function to check if a given list contains duplicates\n    '''\n    d = {}\n    for i in lst:\n        if i not in d:\n            d[i] = 1\n        else:\n            return True\n    return False\n    \ndef circular_list(lst):\n    '''\n    Write a python function to check if the given list is circular or not.\n    '''\n    lst.insert(0,lst[-1])\n    for i in range(len(lst)):\n        if lst[i]!= lst[-1]:\n            return False\n    return True\n    \ndef inversions(lst):\n    '''\n    Write a python function to count inversions in a list\n    '''\n    inv = 0\n    if len(lst) == 1:\n        return lst\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if lst[i] > lst[j]:\n                inv +=1\n    return inv\n    \ndef remove_duplicate(lst):\n    '''\n    Write a python function to remove duplicates in a list\n    '''\n    lst = list(set(lst))\n    return lst\n    \ndef is_perfect(n):\n    '''\n    Write a python function to check if a given number is perfect or not\n    '''\n    lst = []\n    sum = 0\n    for i in range(1,n):\n        if n%i == 0:\n            lst.append(i)\n            sum += i\n    if sum == n:\n        return True\n    else:\n        return False\n    \ndef remove_duplicate_dict(lst):\n    '''\n    Write a python function to remove duplicates in a list using dict\n    '''\n    d = {}\n    for i in lst:\n        if i not in d:\n            d[i] = 1\n    lst = d.keys()\n    return lst\n    \ndef reverse_string(lst):\n    '''\n    Write a python function to reverse a string\n    '''\n    lst.reverse()\n    return lst\n    \ndef palindrome(lst):\n    '''\n    Write a python function to check if a given string is a palindrome or not\n    '''\n    if lst == lst[::-1]:\n        return True\n    else:\n        return False\n    \ndef permutations(lst):\n    '''\n    Write a python function to generate all permutations of a given list\n    '''\n    if len(lst) == 1:\n        return [lst]\n    else:\n        lst = lst.pop()\n        lst = [lst] + permutations(lst)\n    return lst\n    \ndef permutations_dict(lst):\n    '''\n    Write a python function to generate all permutations of a given list using dict\n    '''\n    lst = sorted(lst)\n    d = {}\n    for i in lst:\n        if i not in d:\n            d[i] = 1\n        else:\n            return False\n    return True\n    \ndef permutations_with_dup(lst):\n    '''\n    Write a python function to generate all permutations with duplicates of a given list\n    '''\n    if len(lst) == 1:\n        return [lst]\n    else:\n        lst = lst.pop()\n        lst = [lst] + permutations(lst)\n    return lst\n    \ndef is_prime(n):\n    '''\n    Write a python function to check if a given number is prime or not\n    '''\n    d = 2\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        while d <= n/d:\n            if n%d == 0:\n                return False\n            d += 1\n        return True\n    \ndef to_hash(lst):\n    '''\n    Write a python function to convert a given list to hash\n    '''\n    lst = sorted(lst)\n    d = {}\n    for i in lst:\n        if i not in d:\n            d[i] = 1\n        else:\n            return False\n    return True\n    \ndef find_duplicates(lst):\n    '''\n    Write a python function to find duplicates in a list\n    '''\n    d = {}\n    for i in lst:\n        if i not in d:\n            d[i] = 1\n        else:\n            return True\n    return False\n    \ndef rotate_list(lst):\n    '''\n    Write a python function to rotate a given list to the right\n    '''\n    if len(lst) == 0:\n        return lst\n    else:\n        lst.insert(0,lst.pop())\n        return lst\n    \ndef equalize_lengths(lst1,lst2):\n    '''\n    Write a python function to equalize the lengths of two lists\n    '''\n    if len(lst1) > len(lst2):\n        lst2.append(' '*(len(lst1)-len(lst2)))\n    elif len(lst1) < len(lst2):\n        lst1.append(' '*(len(lst2)-len(lst1)))\n    return lst1,lst2\n    \ndef equalize_lengths_dict(lst1,lst2):\n    '''\n    Write a python function to equalize the lengths of two lists using dict\n    '''\n    d = {}\n    if len(lst1) > len(lst2):\n        d[lst2] = len(lst1)-len(lst2)\n    elif len(lst1) < len(lst2):\n        d[lst1] = len(lst2)-len(lst1)\n    for i in lst1:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    for i in lst2:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] -= 1\n    return d\n    \ndef subset(lst1,lst2):\n    '''\n    Write a python function to check if a given list is a subset of another list\n    '''\n    if len(lst1) > len(lst2):\n        return False\n    else:\n        for i in lst2:\n            if i not in lst1:\n                return False\n        return True\n    \ndef is_member(lst1,lst2):\n    '''\n    Write a python function to check if a given list is a member of another list\n    '''\n    if len(lst1) > len(lst2):\n        return False\n    else:\n        for i in lst2:\n            if i not in lst1:\n                return False\n        return True\n    \ndef intersection(lst1,lst2):\n    '''\n    Write a python function to find the intersection of two lists\n    '''\n    lst = []\n    for i in lst1:\n        if i in lst2:\n            lst.append(i)\n    return lst\n    \ndef union(lst1,lst2):\n    '''\n    Write a python function to find the union of two lists\n    '''\n    lst = lst1 + lst2\n    return lst\n    \ndef intersection_with_dup(lst1,",
        "num_ids": 33
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(bool(x) for x in lst)\n",
        "num_ids": 17
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if type(i)==bool:\n            count+=1\n    return count\nprint count([True, False, True])",
        "num_ids": 43
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for each in lst:\n        if each==True:\n            count=count+1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    return sum(1 for ele in lst if ele)\n",
        "num_ids": 18
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(1 for i in lst if i)\n",
        "num_ids": 16
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return lst.count(True)\n",
        "num_ids": 12
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(bool(x) for x in lst)\n",
        "num_ids": 17
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(bool(i) for i in lst)\n",
        "num_ids": 17
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if test_list == []:\n        return test_tup\n    return test_tup + test_list\n",
        "num_ids": 29
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if not test_list:\n        return test_tup\n    else:\n        return test_tup + test_list\n",
        "num_ids": 32
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if not test_list:\n        return test_tup\n    else:\n        return (test_list[0] + test_tup, add_lists(test_list[1:], test_tup))\n",
        "num_ids": 53
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n",
        "num_ids": 13
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if len(test_tup) == 0:\n        return test_list\n    else:\n        # This is an empty tuple\n        if len(test_tup) == 1:\n            return add_lists(test_list, test_tup[0])\n        # This is a tuple with two elements\n        else:\n            if test_list == []:\n                return [test_tup]\n            else:\n                # This is a tuple with two elements\n                if isinstance(test_list[-1], tuple) and isinstance(test_tup[0], tuple):\n                    return add_lists(test_list[:-1], test_tup) + [test_list[-1] + test_tup[1:]]\n                # This is a tuple with one element\n                elif isinstance(test_list[-1], tuple) and isinstance(test_tup[0], tuple):\n                    return add_lists(test_list[:-1], test_tup[1:]) + [test_list[-1] + test_tup]\n                # This is a list with one element\n                elif isinstance(test_list[-1], tuple) and isinstance(test_tup[0], list):\n                    return add_lists(test_list[:-1], test_tup[0]) + [test_list[-1] + test_tup]\n                # This is a list with two elements\n                elif isinstance(test_list[-1], list) and isinstance(test_tup[0], list):\n                    return add_lists(test_list[:-1], test_tup) + [test_list[-1] + test_tup[1:]]\n                # This is a list with a single element\n                elif isinstance(test_list[-1], list) and isinstance(test_tup[0], list):\n                    return add_lists(test_list[:-1], test_tup[1:]) + [test_list[-1] + test_tup]\n                else:\n                    return add_lists(test_list[:-1], test_tup) + [test_list[-1] + test_tup]\n",
        "num_ids": 517
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_tup:\n        test_list.append(i)\n    return test_list\n",
        "num_ids": 28
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    list = list(test_list)\n    tup = tuple(test_tup)\n    list.append(tup)\n    return list\n",
        "num_ids": 37
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_tup:\n        test_list.append(item)\n    return\n",
        "num_ids": 25
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    \n    pass\n    \n",
        "num_ids": 9
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for t in test_tup:\n        test_list.append(t)\n",
        "num_ids": 22
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    for i in range(0,len(num1)+len(num2)+len(num3)):\n        if len(num1)==0:\n            result += num2\n            num2 = []\n        elif len(num2)==0:\n            result += num1\n            num1 = []\n        elif len(num3)==0:\n            result += num3\n            num3 = []\n        elif num1[0]<=num2[0] and num1[0]<=num3[0]:\n            result.append(num1.pop(0))\n        elif num2[0]<=num1[0] and num2[0]<=num3[0]:\n            result.append(num2.pop(0))\n        elif num3[0]<=num1[0] and num3[0]<=num2[0]:\n            result.append(num3.pop(0))\n    return result\n",
        "num_ids": 233
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i,j,k = 0,0,0\n    new_list = []\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            new_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            new_list.append(num2[j])\n            j += 1\n        else:\n            new_list.append(num3[k])\n            k += 1\n    while i < len(num1):\n        new_list.append(num1[i])\n        i += 1\n    while j < len(num2):\n        new_list.append(num2[j])\n        j += 1\n    while k < len(num3):\n        new_list.append(num3[k])\n        k += 1\n    return new_list\n",
        "num_ids": 249
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    if len(num1)==0:\n        merged_list = num2\n    elif len(num2)==0:\n        merged_list = num1\n    else:\n        l1 = len(num1)\n        l2 = len(num2)\n        i1 = 0\n        i2 = 0\n        while (i1<l1) and (i2<l2):\n            if num1[i1]<num2[i2]:\n                merged_list.append(num1[i1])\n                i1+=1\n            else:\n                merged_list.append(num2[i2])\n                i2+=1\n        while i1<l1:\n            merged_list.append(num1[i1])\n            i1+=1\n        while i2<l2:\n            merged_list.append(num2[i2])\n            i2+=1\n    return merged_list\ndef count_inversion(num):\n    '''\n    Given a list of integers, write a function that returns the count of the number of inversions in the list.\n    '''\n    if len(num)==1:\n        return 0\n    elif len(num)==2:\n        return (num[1]-num[0])\n    else:\n        mid = len(num)//2\n        return count_inversion(num[:mid])+count_inversion(num[mid:])\ndef smallest_largest_elements(num):\n    '''\n    Given a list of integers, write a function that returns a list with the smallest and largest elements of the list.\n    '''\n    if len(num)==1:\n        return [num[0],num[0]]\n    elif len(num)==2:\n        return [num[0],num[1]]\n    else:\n        first = smallest_largest_elements(num[:len(num)//2])\n        last = smallest_largest_elements(num[len(num)//2:])\n        if first[1]>last[1]:\n            return [last[1],first[1]]\n        else:\n            return [first[1],last[1]]\ndef smallest_elements(num):\n    '''\n    Given a list of integers, write a function that returns a list with the smallest elements of the list.\n    '''\n    if len(num)==1:\n        return num\n    else:\n        mid = len(num)//2\n        return smallest_elements(num[:mid])+smallest_elements(num[mid:])\ndef all_sum_possible(num):\n    '''\n    Write a function to find if there exists a list of three integers whose sum is equal to a given number.\n    '''\n    if len(num)==2:\n        return num[0]+num[1]==num[0]\n    elif len(num)==3:\n        return num[0]+num[1]+num[2]==num[0]\n    else:\n        mid = len(num)//2\n        return all_sum_possible(num[:mid])+all_sum_possible(num[mid:])\ndef smallest_sublist_with_sum(num,summ):\n    '''\n    Given a list of integers and a sum, write a function that returns the smallest sublist with sum equal to the sum.\n    '''\n    if len(num)==0:\n        return []\n    elif len(num)==1:\n        if num[0]==summ:\n            return [num[0]]\n        else:\n            return []\n    else:\n        mid = len(num)//2\n        l1 = smallest_sublist_with_sum(num[:mid],summ)\n        l2 = smallest_sublist_with_sum(num[mid:],summ)\n        if len(l1)==0:\n            return l2\n        elif len(l2)==0:\n            return l1\n        else:\n            return merge_sorted_list(l1,l2,num)\ndef check_permutation(string1,string2):\n    '''\n    Write a function to check if two strings are permutations of each other.\n    '''\n    if len(string1)==0 or len(string2)==0:\n        return False\n    elif len(string1)!=len(string2):\n        return False\n    else:\n        dic = {}\n        for ch in string1:\n            if ch in dic:\n                dic[ch]+=1\n            else:\n                dic[ch]=1\n        for ch in string2:\n            if ch not in dic:\n                return False\n            else:\n                dic[ch]-=1\n        for k in dic:\n            if dic[k]!=0:\n                return False\n        return True\ndef remove_duplicates(num):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    if len(num)==0:\n        return num\n    else:\n        dic = {}\n        for i in range(len(num)):\n            if num[i] in dic:\n                dic[num[i]]+=1\n            else:\n                dic[num[i]]=1\n        dic1 = []\n        for k in dic:\n            dic1.append(k)\n        return dic1\ndef has_duplicate(num):\n    '''\n    Given a list of integers, write a function that returns True if the list contains a duplicate number, and False otherwise.\n    '''\n    if len(num)==0:\n        return False\n    elif len(num)==1:\n        return False\n    else:\n        dic = {}\n        for i in range(len(num)):\n            if num[i] in dic:\n                dic[num[i]]+=1\n            else:\n                dic[num[i]]=1\n        for i in dic:\n            if dic[i]>1:\n                return True\n        return False\ndef is_pow_of_two(num):\n    '''\n    Write a function to determine whether a number is a power of 2.\n    '''\n    if num==0:\n        return False\n    elif num==1:\n        return True\n    else:\n        num1 = num-1\n        num2 = num\n        while num1>1:\n            if num1%2!=0:\n                return False\n            else:\n                num1 = num1//2\n        if num2%2!=0:\n            return False\n        return True\ndef find_occurence_of_element(num,ele):\n    '''\n    Write a function to find the index of the first occurrence of an element in a sorted array.\n    '''\n    if len(num)==0:\n        return -1\n    elif len(num)==1:\n        if num[0]==ele:\n            return 0\n        else:\n            return -1\n    else:\n        mid = len(num)//2\n        if num[mid]==ele:\n            return mid\n        elif num[mid]>ele:\n            return find_occurence_of_element(num[:mid],ele)\n        else:\n            return find_occurence_of_element(num[mid:],ele)\ndef find_occurence_of_element_recursive(num,ele):\n    '''\n    Write a function to find the index of the first occurrence of an element in a sorted array.\n    '''\n    if len(num)==0:\n        return -1\n    elif len(num)==1:\n        if num[0]==ele:\n            return 0\n        else:\n            return -1\n    else:\n        mid = len(num)//2\n        if num[mid]==ele:\n            return mid\n        elif num[mid]>ele:\n            return find_occurence_of_element_recursive(num[:mid],ele)\n        else:\n            return find_occurence_of_element_recursive(num[mid:],ele)\ndef find_occurence_of_element_binary_search(num,ele):\n    '''\n    Write a function to find the index of the first occurrence of an element in a sorted array.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    n1=len(num1)\n    n2=len(num2)\n    n3=len(num3)\n    if n1>n2:\n        if n1>n3:\n            res=heapq.merge(num1,num2,num3)\n        else:\n            res=heapq.merge(num1,num3,num2)\n    else:\n        if n1>n3:\n            res=heapq.merge(num2,num1,num3)\n        else:\n            res=heapq.merge(num2,num3,num1)\n    return list(res)",
        "num_ids": 157
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    def merge_two_sorted_list(list1,list2):\n        # print list1,list2\n        p1 = 0\n        p2 = 0\n        res = []\n        while p1 < len(list1) and p2 < len(list2):\n            if list1[p1] < list2[p2]:\n                res.append(list1[p1])\n                p1 += 1\n            else:\n                res.append(list2[p2])\n                p2 += 1\n        while p1 < len(list1):\n            res.append(list1[p1])\n            p1 += 1\n        while p2 < len(list2):\n            res.append(list2[p2])\n            p2 += 1\n        return res\n    if num1 == None:\n        return num2\n    if num2 == None:\n        return num1\n    return merge_two_sorted_list(num1,num2)\ndef merge_sort(num):\n    '''\n    Write a function to sort a list by using merge sort.\n    '''\n    if len(num) == 1:\n        return num\n    mid = len(num)/2\n    num1 = merge_sort(num[:mid])\n    num2 = merge_sort(num[mid:])\n    return merge_sorted_list(num1,num2,num)\ndef max_heap(num):\n    def check(nums,i,j):\n        if i > j:\n            return False\n        if nums[i] > nums[j]:\n            return True\n        else:\n            return False\n    def swap(nums,i,j):\n        tmp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = tmp\n    length = len(num)\n    for i in xrange(length/2-1,-1,-1):\n        heapify(num,i,length)\n    for i in xrange(length-1,0,-1):\n        swap(num,0,i)\n        heapify(num,0,i)\n    return num\ndef heapify(nums,i,length):\n    l = 2*i + 1\n    r = 2*i + 2\n    if l < length and check(nums,l,i):\n        swap(nums,l,i)\n        heapify(nums,l,length)\n    if r < length and check(nums,r,i):\n        swap(nums,r,i)\n        heapify(nums,r,length)\ndef check(nums,i,j):\n    if nums[i] > nums[j]:\n        return True\n    else:\n        return False\ndef heap_sort(num):\n    def swap(nums,i,j):\n        tmp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = tmp\n    length = len(num)\n    for i in xrange(length/2-1,-1,-1):\n        heapify(num,i,length)\n    for i in xrange(length-1,0,-1):\n        swap(num,0,i)\n        heapify(num,0,i)\n    return num\ndef partition(nums,l,r):\n    p = nums[l]\n    i = l+1\n    j = r\n    while i < j:\n        while i < j and nums[j] >= p:\n            j -= 1\n        nums[i],nums[j] = nums[j],nums[i]\n        while i < j and nums[i] <= p:\n            i += 1\n        nums[i],nums[j] = nums[j],nums[i]\n    nums[l],nums[i-1] = nums[i-1],nums[l]\n    return i-1\ndef quick_sort(num,l,r):\n    if l >= r:\n        return\n    i = partition(num,l,r)\n    quick_sort(num,l,i)\n    quick_sort(num,i+1,r)\ndef max_heap_2(num):\n    def heapify(nums,i,length):\n        l = 2*i + 1\n        r = 2*i + 2\n        if l < length and nums[l] > nums[i]:\n            max_heapify(nums,l,length)\n        if r < length and nums[r] > nums[i]:\n            max_heapify(nums,r,length)\n    def max_heapify(nums,i,length):\n        l = 2*i + 1\n        r = 2*i + 2\n        if l < length and nums[l] > nums[i]:\n            swap(nums,l,i)\n            max_heapify(nums,l,length)\n        if r < length and nums[r] > nums[i]:\n            swap(nums,r,i)\n            max_heapify(nums,r,length)\n    def swap(nums,i,j):\n        tmp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = tmp\n    length = len(num)\n    for i in xrange(length/2-1,-1,-1):\n        heapify(num,i,length)\n    for i in xrange(length-1,0,-1):\n        swap(num,0,i)\n        heapify(num,0,i)\n    return num\ndef heapsort(num):\n    def max_heapify(nums,i,length):\n        l = 2*i + 1\n        r = 2*i + 2\n        if l < length and nums[l] > nums[i]:\n            max_heapify(nums,l,length)\n        if r < length and nums[r] > nums[i]:\n            max_heapify(nums,r,length)\n    def swap(nums,i,j):\n        tmp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = tmp\n    length = len(num)\n    for i in xrange(length/2-1,-1,-1):\n        max_heapify(num,i,length)\n    for i in xrange(length-1,0,-1):\n        swap(num,0,i)\n        max_heapify(num,0,i)\n    return num\ndef heap_sort(nums):\n    def max_heapify(nums,i,length):\n        l = 2*i + 1\n        r = 2*i + 2\n        if l < length and nums[l] > nums[i]:\n            max_heapify(nums,l,length)\n        if r < length and nums[r] > nums[i]:\n            max_heapify(nums,r,length)\n    def swap(nums,i,j):\n        tmp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = tmp\n    length = len(nums)\n    for i in xrange(length/2-1,-1,-1):\n        max_heapify(nums,i,length)\n    for i in xrange(length-1,0,-1):\n        swap(nums,0,i)\n        max_heapify(nums,0,i)\n    return nums\ndef heapsort_2(nums):\n    def max_heapify(nums,i,length):\n        l = 2*i + 1\n        r = 2*i + 2\n        if l < length and nums[l] > nums[i]:\n            max_heapify(nums,l,length)\n        if r < length and nums[r] > nums[i]:\n            max_heapify(nums,r,length)\n    def swap(nums,i,j):\n        tmp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = tmp\n    length = len(nums)",
        "num_ids": 1748
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    for i in range(len(num1)):\n        if num1[i] > num3[0]:\n            if num2[i] > num3[0]:\n                continue\n            else:\n                num1[i],num3[0] = num3[0],num1[i]\n    return num1 + num2 + num3\ndef heapsort(alist):\n    \"\"\" Heapsort. Taken from GeeksforGeeks.\n    https://www.geeksforgeeks.org/heapsort/\n    \"\"\"\n    heap = [(0, x) for x in alist]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for i in range(len(alist))]\ndef longest_match_word(s):\n    '''\n    Given a string, find the longest word(s) that is a substring of the string.\n    '''\n    s = s.split(\" \")\n    max_len = 0\n    for i in s:\n        if len(i) > max_len:\n            max_len = len(i)\n    res = \"\"\n    for i in s:\n        if len(i) == max_len:\n            res = i\n    return res\ndef is_prime(num):\n    '''\n    A prime number is a positive integer that is only divisible by 1 and itself.\n    '''\n    if num == 1 or num == 0:\n        return False\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True\ndef is_binary(num):\n    '''\n    Given a number, check if the given number is a binary number.\n    '''\n    num = str(num)\n    for i in num:\n        if i not in \"01\":\n            return False\n    return True\ndef count_bits(num):\n    '''\n    Given a non-negative integer, count the total number of bits in the integer.\n    '''\n    count = 0\n    while num > 0:\n        count += num & 1\n        num >>= 1\n    return count\ndef count_min_bits(num):\n    '''\n    Given a non-negative integer, count the total number of bits in the integer\n    with the least significant bit as most significant.\n    '''\n    count = 0\n    while num > 0:\n        num &= (num - 1)\n        count += 1\n    return count\ndef add_binary(a,b):\n    '''\n    Given two non-negative integers, return their sum as a binary number.\n    '''\n    carry = 0\n    res = \"\"\n    max_len = max(len(a),len(b))\n    a = a.zfill(max_len)\n    b = b.zfill(max_len)\n    for i in range(max_len-1,-1,-1):\n        temp = int(a[i]) + int(b[i]) + carry\n        if temp > 1:\n            carry = 1\n            res = str(temp % 2) + res\n        else:\n            carry = 0\n            res = str(temp) + res\n    if carry:\n        res = str(carry) + res\n    return res.zfill(max_len)\ndef add_binary_recursive(a,b):\n    '''\n    Given two non-negative integers, return their sum as a binary number.\n    '''\n    if len(a) == 0:\n        return b\n    if len(b) == 0:\n        return a\n    if a[-1] == b[-1]:\n        return add_binary_recursive(a[:-1],b[:-1]) + str(0)\n    else:\n        return add_binary_recursive(a[:-1],b[:-1]) + str(1)\ndef find_leap_years(start_year,end_year):\n    '''\n    Given two integers, find all the leap years between the two integers (inclusive).\n    '''\n    res = []\n    for i in range(start_year,end_year + 1):\n        if i%4 == 0 and i%100!= 0 or i%400 == 0:\n            res.append(i)\n    return res\ndef find_perfect_squares(num):\n    '''\n    Given a positive integer, find all the perfect squares between 1 and the given integer (inclusive).\n    '''\n    res = []\n    i = 1\n    while i*i <= num:\n        if i*i == num:\n            res.append(i*i)\n        i += 1\n    return res\ndef find_perfect_squares_recursive(num):\n    '''\n    Given a positive integer, find all the perfect squares between 1 and the given integer (inclusive).\n    '''\n    if num == 1:\n        return [1]\n    res = []\n    i = 1\n    while i*i <= num:\n        if i*i == num:\n            res.append(i*i)\n        i += 1\n    return res + find_perfect_squares_recursive(num-1)\ndef move_zeros(num):\n    '''\n    Given a non-empty integer array, move all 0's to the end of it while maintaining the relative order of the other elements.\n    '''\n    if len(num) == 1 and num[0] == 0:\n        return [0]\n    new_num = []\n    for i in num:\n        if i!= 0:\n            new_num.append(i)\n    for i in range(len(num) - len(new_num)):\n        new_num.append(0)\n    return new_num\ndef move_zeros_recursive(num):\n    '''\n    Given a non-empty integer array, move all 0's to the end of it while maintaining the relative order of the other elements.\n    '''\n    if len(num) == 1 and num[0] == 0:\n        return [0]\n    if num[0] == 0:\n        return num[1:]\n    return [num[0]] + move_zeros_recursive(num[1:])\ndef largest_odd_times(arr):\n    '''\n    Given an array of integers, find the largest odd integer that occurs in the array more than once.\n    If there are no odd numbers, return -1.\n    '''\n    res = -1\n    count = {}\n    for i in arr:\n        if i % 2 == 1:\n            if i in count:\n                count[i] += 1\n            else:\n                count[i] = 1\n    for i in count:\n        if count[i] > 1:\n            if res == -1:\n                res = i\n            else:\n                res = max(res,i)\n    return res\ndef longest_common_prefix(s):\n    '''\n    Given a list of strings, find the longest common prefix.\n    '''\n    if len(s) == 0:\n        return \"\"\n    prefix = s[0]\n    for i in range(1,len(s)):\n        while s[i].find(prefix)!= 0:\n            prefix = prefix[:-1]\n            if prefix == \"\":\n                return \"\"\n    return prefix\ndef is_anagram(s1,s2):\n    '''\n    Given two strings, check if they are anagrams.\n    '''\n    return sorted(s1) == sorted(s2)\ndef find_duplicate_substring(s):\n    '''\n    Given a string, find all the non-empty substring(s) that has the maximum length and \n    the maximum number of unique characters. Return the result as a list of tuples in \n    the format of (length, substring)\n    '''\n    if len(s) <= 1:\n        return []\n    res = []\n    for i in range(1,len(s)):\n        j = i\n        while j <= len(s):\n            temp = s[i:j]\n            if is_anagram(s[i:j],s[i:j]):\n                if temp not in res:\n                    res.append(temp)\n            j += 1\n    return res\ndef find_longest_substring_with_k_distinct(s,k):\n    '''\n    Given a string and a number k, find the longest substring with k distinct characters.\n    '''\n    i",
        "num_ids": 4
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = [(num1[0],0),(num2[0],1),(num3[0],2)]\n    heapq.heapify(heap)\n    heapq.heappush(heap,(heap[0][0],0))\n    heapq.heappush(heap,(heap[1][0],1))\n    heapq.heappush(heap,(heap[2][0],2))\n    new_list = []\n    while len(heap)>1:\n        first,second = heapq.heappop(heap)\n        new_list.append(first)\n        first,second = heapq.heappop(heap)\n        new_list.append(first)\n    new_list.append(heap[0][0])\n    return new_list\n",
        "num_ids": 204
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    print \"Input:\",num1,num2,num3\n    l=[]\n    if(num1!= None and num2!= None and num3!= None):\n        if(num1 < num2 and num2 < num3):\n            l=sorted(num1+num2+num3)\n            print l\n        elif(num1 < num3 and num3 < num2):\n            l=sorted(num1+num3+num2)\n            print l\n        elif(num2 < num1 and num1 < num3):\n            l=sorted(num2+num1+num3)\n            print l\n        else:\n            l=sorted(num2+num3+num1)\n            print l\n    else:\n        if(num1!= None):\n            l=sorted(num1)\n            print l\n        elif(num2!= None):\n            l=sorted(num2)\n            print l\n        elif(num3!= None):\n            l=sorted(num3)\n            print l\n    print \"Output:\",l\n",
        "num_ids": 264
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 == None:\n        return num2\n    if num2 == None:\n        return num3\n    if num3 == None:\n        return num1\n    \n    if num1 > num2:\n        if num1 > num3:\n            return num1\n        return num2\n    else:\n        if num2 > num3:\n            return num2\n        return num3\n",
        "num_ids": 94
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    new_list=[]\n    size=len(num1)+len(num2)+len(num3)\n    size=size-1\n    i=0\n    j=0\n    k=0\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]>=num2[j]:\n            new_list.append(num2[j])\n            j+=1\n        elif num1[i]>=num3[k]:\n            new_list.append(num3[k])\n            k+=1\n        else:\n            new_list.append(num1[i])\n            i+=1\n    if i<len(num1):\n        new_list.extend(num1[i:])\n    if j<len(num2):\n        new_list.extend(num2[j:])\n    if k<len(num3):\n        new_list.extend(num3[k:])\n    return new_list\n",
        "num_ids": 246
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        if int(s[::-1],2)%2 == 1:\n            count = count + 1\n        s = s[1:] + s[0]\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # function to find the number of bits\n    def get_length(x):\n        y = bin(x)[2:]\n        y = y[::-1]\n        y = y.count('1')\n        return y\n    # function to find the number of bits of a given number\n    def get_binary(n):\n        return bin(n)[2:]\n    # function to find the number of bits of a given number\n    def get_decimal(n):\n        return int(str(n),2)\n    # loop for given number of times\n    for i in xrange(n):\n        s = get_decimal(s)\n        s = get_binary(s)\n        s = get_length(s)\n    return s\n",
        "num_ids": 176
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    n = bin(n)[2:]\n    c = 0\n    for i in range(len(n)):\n        if int(n[i])%2!= 0:\n            c+=1\n    return c\n    \ndef even_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    n = bin(n)[2:]\n    c = 0\n    for i in range(len(n)):\n        if int(n[i])%2 == 0:\n            c+=1\n    return c\n    \ndef permutations(s,n): \n    '''\n    Write a python function to count the number of permutations of the string s if we rotate the string n times.\n    '''\n    c = 0\n    for i in range(1,n+1):\n        c += even_Equivalent(s,i)\n    return c\n    \ndef permutations_itr(s,n):\n    '''\n    Write a python function to count the number of permutations of the string s if we rotate the string n times.\n    '''\n    c = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            c+=odd_Equivalent(s,i)\n        else:\n            c+=even_Equivalent(s,i)\n    return c\n    \ndef factorial(n):\n    '''\n    Write a python function to compute n!\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*factorial(n-1)\n",
        "num_ids": 29
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = bin(n)[2:]\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            if int(s[i-1])%2 == 0:\n                count += 1\n    return count\n",
        "num_ids": 65
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    if type(s)!= str:\n        raise ValueError('Not a string')\n    if type(n)!= int:\n        raise ValueError('Not an int')\n    if n < 0:\n        raise ValueError('Not a positive int')\n    if len(s) == 0:\n        raise ValueError('Empty string')\n    if n >= len(s):\n        raise ValueError('Rotation greater than or equal to string length')\n    if len(s) == 1:\n        if (s[0] == '0') or (s[0] == '1'):\n            return 1\n        else:\n            raise ValueError('Not 0 or 1')\n    \n    \n    if n == 0:\n        return 0\n    if n == 1:\n        if s[0] == '0':\n            return 1\n        else:\n            return 0\n    \n    if n % 2 == 0:\n        return 2 * odd_Equivalent(s[1:], n)\n    else:\n        if s[0] == '0':\n            return 2 * odd_Equivalent(s[1:], n - 1)\n        else:\n            return 2 * odd_Equivalent(s[1:], n)\n    \n",
        "num_ids": 288
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    x = bin(s)[2:]\n    x = x.zfill(n)\n    odd = 0\n    for i in x:\n        if i == '1':\n            odd += 1\n    return odd\n",
        "num_ids": 52
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return odd_Equivalent(s,n-1) +odd_Equivalent(s,n-2)*s[-1]\n",
        "num_ids": 48
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if s == '1':\n        return 1\n    if s == '0':\n        return 0\n    if len(s)==1:\n        return 0\n",
        "num_ids": 40
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    l = []\n    for i in range(n):\n        l.append(s[i:] + s[:i])\n    count = 0\n    for j in l:\n        if int(j,2)%2!=0:\n            count += 1\n    return count\n",
        "num_ids": 68
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    n = n % len(s)\n    if n < 1:\n        return 0\n    count = 0\n    s = s + s[0:n]\n    for i in range(len(s)):\n        if i + n >= len(s):\n            break\n        if (s[i] == '0' and s[i+n] == '1') or (s[i] == '1' and s[i+n] == '0'):\n            count += 1\n    return count\n",
        "num_ids": 120
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Write your code here\n    common = []\n    if not isinstance(nestedlist, list) or not nestedlist:\n        return common\n",
        "num_ids": 36
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not isinstance(nestedlist, list):\n        return False\n    if len(nestedlist) == 0:\n        return False\n    if len(nestedlist) == 1:\n        return nestedlist[0]\n    else:\n        new = []\n        for sublist in nestedlist:\n            new += sublist\n        return common_in_nested_lists(new)\n",
        "num_ids": 93
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    nestedlist = flatten_nested_list(nestedlist)\n    newlist = list(set(nestedlist))\n    return newlist\n",
        "num_ids": 38
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return []\n    if len(nestedlist) == 1:\n        return nestedlist[0]\n    def find_common_in_nested_lists(nestedlist):\n        if not nestedlist:\n            return []\n        if len(nestedlist) == 1:\n            return nestedlist[0]\n        else:\n            return find_common_in_nested_lists(nestedlist[1:]) + [nestedlist[0]]\n    return find_common_in_nested_lists(nestedlist)\n",
        "num_ids": 133
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set()\n    for list in nestedlist:\n        for element in list:\n            common_elements.add(element)\n    return common_elements\n",
        "num_ids": 44
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    # stack to hold the common elements\n    stack = []\n    \n    # loop through the nested lists\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            \n            # if the elemnt is not in the stack, add it\n            if nestedlist[i][j] not in stack:\n                stack.append(nestedlist[i][j])\n    \n    # return the stack\n    return stack\n    \n    ",
        "num_ids": 119
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    output = []\n    for i in nestedlist:\n        for j in nestedlist:\n            if i == j:\n                pass\n            else:\n                if i == j:\n                    output.append(i)\n                else:\n                    pass\n    return output\n",
        "num_ids": 63
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    a = []\n    for i in nestedlist:\n        for j in i:\n            a.append(j)\n    a = set(a)\n    return a\n",
        "num_ids": 42
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    nested_dict = {}\n",
        "num_ids": 12
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for list in nestedlist:\n        if list:\n            result.append(list[0])\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # Convert the string to integer\n    try:\n        int_val = int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 38
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # Make sure the input is a string\n    if type(text)!= str:\n        return False\n    # Make sure the input isn't blank\n    if text == '':\n        return False\n    # Check if the first character is a minus sign\n    if text[0] == '-':\n        return False\n    # Otherwise, check if the character is an integer\n    if text.isdigit():\n        return True\n    return False\n    \ndef check_float(text):\n    '''\n    Write a function to check if a string represents a float or not.\n    '''\n    # Make sure the input is a string\n    if type(text)!= str:\n        return False\n    # Make sure the input isn't blank\n    if text == '':\n        return False\n    # Check if the first character is a minus sign\n    if text[0] == '-':\n        return False\n    # Otherwise, check if the character is a float\n    if text.replace('.', '', 1).isdigit():\n        return True\n    return False\n    \ndef check_integer_range(text, minimum, maximum):\n    '''\n    Write a function to check if a string represents an integer and that it is in a specified range.\n    '''\n    # Make sure the input is a string\n    if type(text)!= str:\n        return False\n    # Make sure the input isn't blank\n    if text == '':\n        return False\n    # Check if the first character is a minus sign\n    if text[0] == '-':\n        return False\n    # Otherwise, check if the integer is in the range\n    if int(text) >= minimum and int(text) <= maximum:\n        return True\n    return False\n    \ndef check_float_range(text, minimum, maximum):\n    '''\n    Write a function to check if a string represents a float and that it is in a specified range.\n    '''\n    # Make sure the input is a string\n    if type(text)!= str:\n        return False\n    # Make sure the input isn't blank\n    if text == '':\n        return False\n    # Check if the first character is a minus sign\n    if text[0] == '-':\n        return False\n    # Otherwise, check if the float is in the range\n    if float(text) >= minimum and float(text) <= maximum:\n        return True\n    return False\n    \ndef check_negative(text):\n    '''\n    Write a function to check if a string represents a negative integer or not.\n    '''\n    # Make sure the input is a string\n    if type(text)!= str:\n        return False\n    # Make sure the input isn't blank\n    if text == '':\n        return False\n    # Check if the first character is a minus sign\n    if text[0] == '-':\n        return True\n    return False\n    \ndef check_positive(text):\n    '''\n    Write a function to check if a string represents a positive integer or not.\n    '''\n    # Make sure the input is a string\n    if type(text)!= str:\n        return False\n    # Make sure the input isn't blank\n    if text == '':\n        return False\n    # Check if the first character is a minus sign\n    if text[0]!= '+':\n        return False\n    return True\n    \ndef check_string(text):\n    '''\n    Write a function to check if a string is empty or not.\n    '''\n    # Make sure the input is a string\n    if type(text)!= str:\n        return False\n    # Make sure the input isn't blank\n    if text == '':\n        return True\n    return False\n    \ndef check_list(text):\n    '''\n    Write a function to check if a string is a list or not.\n    '''\n    # Make sure the input is a string\n    if type(text)!= str:\n        return False\n    # Make sure the input isn't blank\n    if text == '':\n        return False\n    # Check if the first character is a square bracket\n    if text[0] == '[':\n        return True\n    return False\n    \ndef check_tuple(text):\n    '''\n    Write a function to check if a string is a tuple or not.\n    '''\n    # Make sure the input is a string\n    if type(text)!= str:\n        return False\n    # Make sure the input isn't blank\n    if text == '':\n        return False\n    # Check if the first character is a curly bracket\n    if text[0] == '(':\n        return True\n    return False\n    \ndef check_dictionary(text):\n    '''\n    Write a function to check if a string is a dictionary or not.\n    '''\n    # Make sure the input is a string\n    if type(text)!= str:\n        return False\n    # Make sure the input isn't blank\n    if text == '':\n        return False\n    # Check if the first character is a curly bracket\n    if text[0] == '{':\n        return True\n    return False\n    \ndef check_dict_key(text):\n    '''\n    Write a function to check if a string is a dictionary key or not.\n    '''\n    # Make sure the input is a string\n    if type(text)!= str:\n        return False\n    # Make sure the input isn't blank\n    if text == '':\n        return False\n    # Check if the first character is a curly bracket\n    if text[0] == '{':\n        return True\n    return False\n    \ndef check_dict_value(text):\n    '''\n    Write a function to check if a string is a dictionary value or not.\n    '''\n    # Make sure the input is a string\n    if type(text)!= str:\n        return False\n    # Make sure the input isn't blank\n    if text == '':\n        return False\n    # Check if the first character is a curly bracket\n    if text[0] == '{':\n        return True\n    return False\n    \ndef check_dict_items(text):\n    '''\n    Write a function to check if a string is a dictionary items or not.\n    '''\n    # Make sure the input is a string\n    if type(text)!= str:\n        return False\n    # Make sure the input isn't blank\n    if text == '':\n        return False\n    # Check if the first character is a curly bracket\n    if text[0] == '{':\n        return True\n    return False\n    \ndef check_set(text):\n    '''\n    Write a function to check if a string is a set or not.\n    '''\n    # Make sure the input is a string\n    if type(text)!= str:\n        return False\n    # Make sure the input isn't blank\n    if text == '':\n        return False\n    # Check if the first character is a curly bracket\n    if text[0] == '{':\n        return True\n    return False\n    \ndef check_set_key(text):\n    '''\n    Write a function to check if a string is a set key or not.\n    '''\n    # Make sure the input is a string\n    if type(text)!= str:\n        return False\n    # Make sure the input isn't blank\n    if text == '':\n        return False\n    # Check if the first character is a curly bracket\n    if text[0] == '{':\n        return True\n    return False\n    \ndef check_set_value(text):\n    '''\n    Write a function to check if a string is a set value or not.\n    '''\n    # Make sure the input is a string\n    if type(text)!= str:\n        return False\n    # Make sure the input isn't blank\n    if text == '':\n        return False\n    # Check if the first character is a curly bracket\n    if text[0] == '{':\n        return True\n    return False\n    \ndef check_set_items(text):\n    '''\n    Write a function to check if a string is a set items or not.\n    '''\n    # Make sure the input is a string\n    if type(text)!= str:\n        return False\n    # Make sure the input isn't blank\n    if text == '':\n        return False\n    # Check if the first character is a curly bracket\n    if text[0] == '{':\n        return True\n    return False\n    \ndef check_boolean(text):\n    '''\n    Write a function to check if a string is a boolean or not.\n    '''\n    # Mak",
        "num_ids": 5
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if re.match(r\"^[-+]?[0-9]*$\", text):\n        return True\n    return False\n",
        "num_ids": 34
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    for item in list1:\n        if item:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        for i in list1:\n            if len(i)!= 0:\n                return False\n        return True\n",
        "num_ids": 47
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    result = True\n    for each_dict in list1:\n        if len(each_dict)!= 0:\n            result = False\n            break\n    return result\n    \n    \ndef empty_list(list1):\n    '''\n    Write a function to check whether all lists in a list are empty or not.\n    '''\n    result = True\n    for each_list in list1:\n        if len(each_list)!= 0:\n            result = False\n            break\n    return result\n    \n    \ndef list_to_dict(list1):\n    '''\n    Write a function to convert a list of dictionaries into a dictionary of lists.\n    '''\n    \n    result = {}\n    for each_dict in list1:\n        for each_key in each_dict:\n            if each_key not in result:\n                result[each_key] = []\n            result[each_key].append(each_dict[each_key])\n    return result\n    \n    \ndef dict_to_list(dict1):\n    '''\n    Write a function to convert a dictionary of lists into a list of dictionaries.\n    '''\n    \n    result = []\n    for each_key in dict1:\n        result.append(dict([(each_key,dict1[each_key])]))\n    return result\n    \n    \ndef dict_keys_to_list(dict1):\n    '''\n    Write a function to convert a dictionary's keys into a list.\n    '''\n    \n    result = []\n    for each_key in dict1:\n        result.append(each_key)\n    return result\n    \n    \ndef list_to_dict_by_key(list1, key):\n    '''\n    Write a function to convert a list into a dictionary by the given key.\n    '''\n    \n    result = {}\n    for each_dict in list1:\n        result[each_dict[key]] = each_dict\n    return result\n    \n    \ndef dictionary_keys_to_list(dict1, key):\n    '''\n    Write a function to convert a dictionary's keys into a list by the given key.\n    '''\n    \n    result = []\n    for each_key in dict1:\n        result.append(each_key)\n    return result\n    \n    \ndef dictionary_values_to_list(dict1, key):\n    '''\n    Write a function to convert a dictionary's values into a list by the given key.\n    '''\n    \n    result = []\n    for each_value in dict1[key]:\n        result.append(each_value)\n    return result\n    \n    \ndef tuple_to_dict(tup1):\n    '''\n    Write a function to convert a tuple of tuples into a dictionary of lists.\n    '''\n    \n    result = {}\n    for each_tuple in tup1:\n        result[each_tuple[0]] = each_tuple[1]\n    return result\n    \n    \ndef tuple_to_dict_by_key(tup1, key1, key2):\n    '''\n    Write a function to convert a tuple of tuples into a dictionary of lists by the given key.\n    '''\n    \n    result = {}\n    for each_tuple in tup1:\n        result[each_tuple[key1]] = each_tuple[key2]\n    return result\n    \n    \ndef list_to_tuple(list1):\n    '''\n    Write a function to convert a list of tuples into a tuple of lists.\n    '''\n    \n    result = ()\n    for each_list in list1:\n        result += (each_list,)\n    return result\n    \n    \ndef dict_to_tuple(dict1):\n    '''\n    Write a function to convert a dictionary of tuples into a tuple of dictionaries.\n    '''\n    \n    result = ()\n    for each_key in dict1:\n        result += (dict([(each_key,dict1[each_key])]),)\n    return result\n    \n    \ndef list_to_tuple_by_key(list1, key1, key2):\n    '''\n    Write a function to convert a list of tuples into a tuple of dictionaries by the given key.\n    '''\n    \n    result = ()\n    for each_tuple in list1:\n        result += (each_tuple[key1],)\n    return result\n    \n    \ndef dict_to_tuple_by_key(dict1, key1, key2):\n    '''\n    Write a function to convert a dictionary of tuples into a tuple of dictionaries by the given key.\n    '''\n    \n    result = ()\n    for each_key in dict1:\n        result += (dict([(each_key,dict1[each_key])]),)\n    return result\n    \n    \ndef list_to_tuple_by_index(list1, index1, index2):\n    '''\n    Write a function to convert a list of tuples into a tuple of dictionaries by the given index.\n    '''\n    \n    result = ()\n    for each_tuple in list1:\n        result += (each_tuple[index1],)\n    return result\n    \n    \ndef dict_to_tuple_by_index(dict1, index1, index2):\n    '''\n    Write a function to convert a dictionary of tuples into a tuple of dictionaries by the given index.\n    '''\n    \n    result = ()\n    for each_key in dict1:\n        result += (dict([(each_key,dict1[each_key])]),)\n    return result\n    \n    \ndef list_to_set(list1):\n    '''\n    Write a function to convert a list into a set.\n    '''\n    \n    result = set()\n    for each_element in list1:\n        result.add(each_element)\n    return result\n    \n    \ndef set_to_list(set1):\n    '''\n    Write a function to convert a set into a list.\n    '''\n    \n    result = []\n    for each_element in set1:\n        result.append(each_element)\n    return result\n    \n    \ndef tuple_to_set(tup1):\n    '''\n    Write a function to convert a tuple into a set.\n    '''\n    \n    result = set()\n    for each_element in tup1:\n        result.add(each_element)\n    return result\n    \n    \ndef set_to_tuple(set1):\n    '''\n    Write a function to convert a set into a tuple.\n    '''\n    \n    result = ()\n    for each_element in set1:\n        result += (each_element,)\n    return result\n    \n    \ndef tuple_to_set(tup1):\n    '''\n    Write a function to convert a tuple into a set.\n    '''\n    \n    result = set()\n    for each_element in tup1:\n        result.add(each_element)\n    return result\n    \n    \ndef tuple_to_tuple(tup1):\n    '''\n    Write a function to convert a tuple into a tuple.\n    '''\n    \n    result = ()\n    for each_element in tup1:\n        result += (each_element,)\n    return result\n    \n    \ndef list_to_set_by_key(list1, key):\n    '''\n    Write a function to convert a list into a set by the given key.\n    '''\n    \n    result = set()\n    for each_element in list1:\n        result.add(each_element[key])\n    return result\n    \n    \ndef set_to_list_by_key(set1, key):\n    '''\n    Write a function to convert a set into a list by the given key.\n    '''\n    \n    result = []\n    for each_element in set1:\n        result.append(each_element)\n    return result\n    \n    \ndef tuple_to_set_by_key(tup1, key):\n    '''\n    Write a function to convert a tuple into a set by the given key.\n    '''\n    \n    result = set()\n    for each_element in tup1:\n        result.add(each_element[key])\n    return result\n    \n    \ndef tuple_to_tuple_by_ke",
        "num_ids": 52
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    count = 0\n    for item in list1:\n        if(len(item) > 0):\n            count = 1\n            break\n    if(count == 0):\n        return True\n    return False\n",
        "num_ids": 50
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dit in list1:\n        if dit:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i == {}:\n            pass\n        else:\n            return False\n    return True\n",
        "num_ids": 32
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for each in list1:\n        if each:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    list2 = []\n    for i in list1:\n        if i:\n            list2.append(True)\n        else:\n            list2.append(False)\n    if all(list2):\n        return True\n    else:\n        return False\n",
        "num_ids": 63
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i]!={}:\n            return False\n    return True\n",
        "num_ids": 34
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    a,b,c=nums\n    return a*(2**31) + b*(2**30) + c*(2**29)\n",
        "num_ids": 38
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num_list = list(nums)\n    total = 0\n    for i in range(len(num_list)):\n        total += num_list[i] * (10**(len(num_list)-1-i))\n    return total\n",
        "num_ids": 61
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    sum = 0\n    for i in nums:\n        sum = sum * 10 + i\n    return sum\n",
        "num_ids": 28
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num = 1\n    for i in nums:\n        num *= i\n    return num\n",
        "num_ids": 25
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num_string = ''\n    for num in nums:\n        num_string += str(num)\n    return int(num_string)\n",
        "num_ids": 36
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    sum = 0\n    for i in nums:\n        sum = sum*10 + i\n    return sum\n",
        "num_ids": 28
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n",
        "num_ids": 17
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    ans = 0\n    for num in nums:\n        ans = ans * 10 + num\n    return ans\n",
        "num_ids": 28
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        return sum(nums)\n",
        "num_ids": 29
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return reduce(lambda x,y:x*10+y, nums)\n",
        "num_ids": 21
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    \n    def convert(val):\n        if isinstance(val, list):\n            return list_to_float(val)\n        else:\n            return float(val)\n",
        "num_ids": 43
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for i in range(len(row)):\n            try:\n                row[i] = float(row[i])\n            except:\n                continue\n    return test_list\n    \ndef string_to_int(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to ints.\n    '''\n    for row in test_list:\n        for i in range(len(row)):\n            try:\n                row[i] = int(row[i])\n            except:\n                continue\n    return test_list\n    \ndef string_to_list(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to a list.\n    '''\n    for row in test_list:\n        for i in range(len(row)):\n            try:\n                row[i] = list(row[i])\n            except:\n                continue\n    return test_list\n    \ndef column_length(test_list):\n    '''\n    Write a function to calculate the number of columns in a list of lists.\n    '''\n    length = len(test_list[0])\n    for row in test_list:\n        if len(row) < length:\n            length = len(row)\n    return length\n",
        "num_ids": 45
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n",
        "num_ids": 72
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    #This doesn't work.\n    for index in range(len(test_list)):\n        try:\n            test_list[index] = float(test_list[index])\n        except:\n            pass\n    return test_list\n",
        "num_ids": 58
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # create a new list to store the floated elements\n    new_list = []\n    for elements in test_list:\n        new_list.append([float(elements)])\n    return new_list\n",
        "num_ids": 50
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for lst in test_list:\n        for idx in range(len(lst)):\n            try:\n                lst[idx] = float(lst[idx])\n            except:\n                pass\n    return test_list\n",
        "num_ids": 60
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(item) for item in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for idx, l in enumerate(test_list):\n        for i in l:\n            try:\n                test_list[idx] = [float(i)]\n            except ValueError:\n                pass\n    return test_list\n",
        "num_ids": 58
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    if test_list == [[]]:\n        return test_list\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                pass\n    return test_list\n",
        "num_ids": 86
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for index, lst in enumerate(test_list):\n        for i, v in enumerate(lst):\n            try:\n                test_list[index][i] = float(v)\n            except ValueError:\n                pass\n    return test_list\n",
        "num_ids": 64
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Your code here\n    return string.split(' ')\n",
        "num_ids": 17
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list1 = string.split(\" \")\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n    \ndef list_to_string(list):\n    '''\n    Write a function to convert a list of strings to a string that is space-separated.\n    '''\n    return''.join(list)\n    \ndef string_to_list_of_words(string): \n    '''\n    Write a function to convert a string to a list of strings split on spaces.\n    '''\n    return string.split(' ')\n    \ndef list_to_string_of_words(list):\n    '''\n    Write a function to convert a list of strings to a string that is space-separated.\n    '''\n    return''.join(list)\n    \ndef string_to_list_of_numbers(string):\n    '''\n    Write a function to convert a string to a list of numbers split on the space character.\n    '''\n    return string.split(' ')\n    \ndef list_to_string_of_numbers(list):\n    '''\n    Write a function to convert a list of numbers to a string that is space-separated.\n    '''\n    return''.join(list)\n    \ndef string_to_list_of_punctuation(string):\n    '''\n    Write a function to convert a string to a list of punctuation split on the space character.\n    '''\n    return string.split(' ')\n    \ndef list_to_string_of_punctuation(list):\n    '''\n    Write a function to convert a list of punctuation to a string that is space-separated.\n    '''\n    return''.join(list)\n    \ndef string_to_list_of_lowercase_words(string):\n    '''\n    Write a function to convert a string to a list of lowercase words split on the space character.\n    '''\n    return string.split(' ')\n    \ndef list_to_string_of_lowercase_words(list):\n    '''\n    Write a function to convert a list of lowercase words to a string that is space-separated.\n    '''\n    return''.join(list)\n    \ndef string_to_list_of_uppercase_words(string):\n    '''\n    Write a function to convert a string to a list of uppercase words split on the space character.\n    '''\n    return string.split(' ')\n    \ndef list_to_string_of_uppercase_words(list):\n    '''\n    Write a function to convert a list of uppercase words to a string that is space-separated.\n    '''\n    return''.join(list)\n    \ndef string_to_list_of_numbers_plus_punctuation(string):\n    '''\n    Write a function to convert a string to a list of numbers, plus punctuation.\n    '''\n    return string.split(' ')\n    \ndef list_to_string_of_numbers_plus_punctuation(list):\n    '''\n    Write a function to convert a list of numbers, plus punctuation to a string that is space-separated.\n    '''\n    return''.join(list)\n    \ndef string_to_list_of_alphabetical_letters(string):\n    '''\n    Write a function to convert a string to a list of alphabetical letters split on the space character.\n    '''\n    return string.split(' ')\n    \ndef list_to_string_of_alphabetical_letters(list):\n    '''\n    Write a function to convert a list of alphabetical letters to a string that is space-separated.\n    '''\n    return''.join(list)\n    \ndef string_to_list_of_alphanumeric_characters(string):\n    '''\n    Write a function to convert a string to a list of alphanumeric characters split on the space character.\n    '''\n    return string.split(' ')\n    \ndef list_to_string_of_alphanumeric_characters(list):\n    '''\n    Write a function to convert a list of alphanumeric characters to a string that is space-separated.\n    '''\n    return''.join(list)\n    \ndef string_to_list_of_hex_characters(string):\n    '''\n    Write a function to convert a string to a list of hex characters split on the space character.\n    '''\n    return string.split(' ')\n    \ndef list_to_string_of_hex_characters(list):\n    '''\n    Write a function to convert a list of hex characters to a string that is space-separated.\n    '''\n    return''.join(list)\n    \ndef string_to_list_of_octal_characters(string):\n    '''\n    Write a function to convert a string to a list of octal characters split on the space character.\n    '''\n    return string.split(' ')\n    \ndef list_to_string_of_octal_characters(list):\n    '''\n    Write a function to convert a list of octal characters to a string that is space-separated.\n    '''\n    return''.join(list)\n    \ndef string_to_list_of_digit_characters(string):\n    '''\n    Write a function to convert a string to a list of digit characters split on the space character.\n    '''\n    return string.split(' ')\n    \ndef list_to_string_of_digit_characters(list):\n    '''\n    Write a function to convert a list of digit characters to a string that is space-separated.\n    '''\n    return''.join(list)\n    \ndef string_to_list_of_whitespace_characters(string):\n    '''\n    Write a function to convert a string to a list of whitespace characters split on the space character.\n    '''\n    return string.split(' ')\n    \ndef list_to_string_of_whitespace_characters(list):\n    '''\n    Write a function to convert a list of whitespace characters to a string that is space-separated.\n    '''\n    return''.join(list)\n    \ndef string_to_list_of_symbols(string):\n    '''\n    Write a function to convert a string to a list of symbols split on the space character.\n    '''\n    return string.split(' ')\n    \ndef list_to_string_of_symbols(list):\n    '''\n    Write a function to convert a list of symbols to a string that is space-separated.\n    '''\n    return''.join(list)\n    \ndef string_to_list_of_sentences(string):\n    '''\n    Write a function to convert a string to a list of sentences split on the space character.\n    '''\n    return string.split('\\n')\n    \ndef list_to_string_of_sentences(list):\n    '''\n    Write a function to convert a list of sentences to a string that is space-separated.\n    '''\n    return '\\n'.join(list)\n    \ndef string_to_list_of_words(string):\n    '''\n    Write a function to convert a string to a list of words split on the space character.\n    '''\n    return string.split(' ')\n    \ndef list_to_string_of_words(list):\n    '''\n    Write a function to convert a list of words to a string that is space-separated.\n    '''\n    return''.join(list)\n    \ndef string_to_list_of_capitalized_words(string):\n    '''\n    Write a function to convert a string to a list of capitalized words split on the space character.\n    '''\n    return string.split(' ')\n    \ndef list_to_string_of_capitalized_words(list):\n    '''\n    Write a function to convert a list of capitalized words to a string that is space-separated.\n    '''\n    return''.join(list)\n    \ndef string_to_list_of_capitalized_words_in_reverse_order(string):\n    '''\n    Write a function to convert a string to a list of words in reverse-case split on the space character.\n    '''\n    return string.split(' ')[::-1]\n    \ndef list_to_string_of_capitalized_words_in_reverse_order(list):\n    '''\n    Writ",
        "num_ids": 4
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    index = arr[0]\n    count = 1\n    for i in range(1, n):\n        if arr[i] == index:\n            count += 1\n        elif arr[i]!= index:\n            index = arr[i]\n            if count == 1:\n                return arr[i]\n            else:\n                count = 1\n    return arr[-1]\n",
        "num_ids": 100
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[1] if arr[0]!= arr[1] else None\n    if len(arr) == 3:\n        return arr[1] if arr[0]!= arr[1] else arr[2] if arr[2]!= arr[1] else None\n    if len(arr) == 4:\n        return arr[2] if arr[0]!= arr[1] else arr[3] if arr[3]!= arr[1] else arr[2] if arr[2]!= arr[1] else None\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    if search(left) == search(right):\n        return search(left)\n    return search(left) if search(left)!= search(right) else search(right)\n",
        "num_ids": 225
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    return single_occurence(arr)\n",
        "num_ids": 13
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return None\n    \n    count = [0] * (max(arr) + 1)\n    \n    for i in range(len(arr)):\n        count[arr[i]] += 1\n    \n    for i in range(len(count)):\n        if count[i] == 1:\n            return i\n    \n    return None\n",
        "num_ids": 92
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = [0] * len(arr)\n",
        "num_ids": 14
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(0, len(arr)):\n        if arr[i] == arr[arr.index(arr[i])]:\n            arr[i] = None\n        else:\n            arr[i] = arr[arr.index(arr[i])]\n",
        "num_ids": 65
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return\n    if len(arr) == 1:\n        return arr[0]\n    fast = 0\n    slow = 0\n    while True:\n        if arr[fast] == arr[slow]:\n            slow += 1\n            fast += 1\n        elif arr[fast]!= arr[slow]:\n            slow += 1\n            arr[slow], arr[fast] = arr[fast], arr[slow]\n        else:\n            slow += 1\n            arr[slow], arr[fast] = arr[fast], arr[slow]\n        if fast == slow:\n            break\n    return arr[fast]\n",
        "num_ids": 152
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    if arr is None:\n        return None\n    \n    start = 0\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) / 2\n        \n        if mid == arr[mid]:\n            mid += 1\n        \n        if mid == arr[mid]:\n            mid -= 1\n        \n        if mid < arr[mid]:\n            end = mid - 1\n        else:\n            start = mid + 1\n        \n    return arr[mid]\n",
        "num_ids": 122
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)<2:\n        return arr[0]\n    # take the first element as the candidate\n    start, end = arr[0], arr[-1]\n    mid = (start+end)/2\n    if (mid>=arr[0] and mid<=arr[-1]) or (mid<arr[0] and mid>=arr[-1]):\n        # candidate is in the array\n        res = search(arr[1:])\n        return res\n    elif mid>arr[0] and mid<arr[-1]:\n        # candidate is in left half\n        return search(arr[1:mid])\n    else:\n        # candidate is in right half\n        return search(arr[mid:])\n",
        "num_ids": 174
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        if arr[0] == arr[1]:\n            return arr[0]\n        else:\n            return arr[1]\n    else:\n        mid = n // 2\n        if arr[mid] == arr[n-1] and mid!= n-1:\n            return search(arr[:mid])\n        elif arr[mid] == arr[n-1] and mid == n-1:\n            return arr[mid]\n        else:\n            return search(arr[:mid])\n",
        "num_ids": 148
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    t1 = []\n    for i in range(0, len(list1), 2):\n        t1.append(list1[i][0]*list1[i][1]*list1[i+1][0]*list1[i+1][1])\n    return max(t1)\n",
        "num_ids": 74
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2=list(list1)\n    max_product=0\n    list3=[]\n    for i in range(0,len(list2),2):\n        list3.append(list2[i]*list2[i+1])\n    list3.sort()\n    for i in range(len(list3)):\n        if list3[i]>max_product:\n            max_product=list3[i]\n    return max_product\n",
        "num_ids": 111
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    tpl_list = []\n    for el1, el2 in list1:\n        tpl_list.append(tuple([el1, el2]))\n    max_value = tpl_list[0][0] * tpl_list[0][1]\n    for tpl in tpl_list:\n        value = tpl[0] * tpl[1]\n        if abs(value) > max_value:\n            max_value = abs(value)\n    return max_value\n",
        "num_ids": 120
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    big = 0\n    for i in range(0, len(list1)):\n        for j in range(i, len(list1)):\n            if(big < abs(list1[i][0] * list1[j][1])):\n                big = abs(list1[i][0] * list1[j][1])\n    return big\n",
        "num_ids": 86
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    return max(list(map(lambda a:abs(a[0]*a[1]),list1)))\n",
        "num_ids": 28
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    new_list = []\n    for tup in list1:\n        new_list.append(tup[0] * tup[1])\n    return max(new_list)\n",
        "num_ids": 46
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i]*list1[j]\n            max_product.append(product)\n    return max(max_product)\n",
        "num_ids": 73
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    products = []\n    for pair in list1:\n        first = pair[0]\n        second = pair[1]\n        product = abs(first) * abs(second)\n        products.append(product)\n    print(max(products))\n",
        "num_ids": 60
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    l = [list1[i][0] * list1[i][1] for i in range(len(list1))]\n    return max(l)\n",
        "num_ids": 40
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    result = []\n    for item in list1:\n        tup = (item[0], item[1])\n        result.append(tup)\n    \n    #sort the result by abs\n    result = sorted(result, key=lambda tup: tup[0]*tup[1])\n    return result[-1]\n    \ndef max_product_tuple_by_dict(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    result = []\n    for item in list1:\n        tup = (item[0], item[1])\n        result.append(tup)\n    \n    #sort the result by abs\n    result = sorted(result, key=lambda tup: tup[0]*tup[1])\n    return result[-1]\n",
        "num_ids": 81
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_ = 0\n    for number in range(1, limit):\n        if number_is_amicable(number):\n            sum_ += number\n    return sum_\n",
        "num_ids": 42
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sums = {}\n    amicables = set()\n    for i in range(1, limit+1):\n        #a = sum(divisors(i))\n        divisors = [x for x in range(1, i) if i % x == 0]\n        divisors_sum = sum(divisors)\n        if i!= divisors_sum and divisors_sum in sums:\n            amicables.add(i)\n        if i!= divisors_sum and i!= divisors_sum and divisors_sum not in sums:\n            sums[divisors_sum] = i\n    return sum(amicables)\n",
        "num_ids": 159
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable = 0\n",
        "num_ids": 10
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    all_amicable_numbers = [0 for _ in range(limit)]\n    for i in range(1, limit):\n        current_amicable_number = get_amicable_number(i)\n        if current_amicable_number is not None:\n            all_amicable_numbers[i] = current_amicable_number\n            all_amicable_numbers[current_amicable_number - 1] = i\n    return sum(all_amicable_numbers)\n",
        "num_ids": 116
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for n in range(1, limit):\n        num = sum(divisors(n))\n        if num == n and num not in amicable_numbers:\n            amicable_numbers.append(n)\n",
        "num_ids": 62
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum(\n        set(range(1, limit)).difference(\n            set(\n                sum(\n                    tuple(\n                        filter(\n                            lambda x: sum(x) == a,\n                            (\n                                tuple(\n                                    range(1, int(n / 2)) +\n                                    range(int(n / 2) + 1, n)\n                                )\n                                for n in set(range(1, limit))\n                            )\n                        )\n                    )\n                )\n            )\n        )\n    )\n",
        "num_ids": 123
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    \n    def sum_of_factors(n):\n        '''\n        Given a positive integer, return the sum of the factors of that integer.\n        '''\n        factors = []\n        for i in range(1,int(n**0.5)+1):\n            if n % i == 0:\n                factors.append(i)\n                if i!= n / i:\n                    factors.append(n/i)\n        return sum(factors)\n",
        "num_ids": 74
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    if limit == 1:\n        return 0\n    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        amicable_numbers.append(i)\n        sum_of_divisors = 0\n        for divisor in range(1, i):\n            if i % divisor == 0:\n                sum_of_divisors += divisor\n        if sum_of_divisors == i:\n            amicable_numbers.append(sum_of_divisors)\n    return sum(amicable_numbers)\n",
        "num_ids": 149
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_nums = []\n    for x in range(1,limit+1):\n        if x == sum(get_divisors(x)):\n            amicable_nums.append(x)\n    return sum(amicable_nums)\n",
        "num_ids": 63
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # TLE\n    amicable_nums = []\n    for i in range(1, limit):\n        # check if i is divisible by any of the amicable numbers\n        is_amicable = True\n        for j in range(1, int(i/2)+1):\n            if i % j == 0 and (i/j) in amicable_nums:\n                is_amicable = False\n                break\n        if is_amicable:\n            amicable_nums.append(i)\n    return sum(amicable_nums)\n",
        "num_ids": 131
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\ndef complex_number_polar(a,b):\n    '''\n    Write a function to get a complex number's polar coordinate.\n    '''\n    return abs(complex(a,b)),angle_complex(a,b)\ndef test_complex_number_polar():\n    assert complex_number_polar(5,3) == (5,cmath.pi/4)\n    assert complex_number_polar(-1,-1) == (1,3.141592)\n    assert complex_number_polar(1,1) == (1,0)\ndef is_polar_coordinate(a,b):\n    '''\n    Write a function that returns True if a number is a polar coordinate.\n    '''\n    return a!=0 and b!=0\ndef test_is_polar_coordinate():\n    assert is_polar_coordinate(1,1) == True\n    assert is_polar_coordinate(-1,1) == False\n    assert is_polar_coordinate(1,0) == False\n    assert is_polar_coordinate(0,0) == False\ndef polygon_area_polar(n,r):\n    '''\n    Write a function to compute the area of a regular polygon.\n    '''\n    return (n*r**2)/(4*cmath.pi)\ndef test_polygon_area_polar():\n    assert polygon_area_polar(3,3) == 3.4\n    assert polygon_area_polar(5,2) == 17\n    assert polygon_area_polar(8,2) == 108\ndef test_polygon_area_polar_equation():\n    '''\n    Write a function to compute the area of a regular polygon from the polygon area formula.\n    '''\n    assert polygon_area_polar(2,3) == 6\n    assert polygon_area_polar(4,2) == 12\n    assert polygon_area_polar(5,1) == 5\n    assert polygon_area_polar(6,1) == 6\ndef polygon_area_equation(n,r):\n    '''\n    Write a function to compute the area of a regular polygon.\n    '''\n    return n*r**2/4*cmath.pi\ndef test_polygon_area_equation():\n    assert polygon_area_equation(3,3) == 6\n    assert polygon_area_equation(5,2) == 17\n    assert polygon_area_equation(8,2) == 108\ndef test_polygon_area_equation_equation():\n    '''\n    Write a function to compute the area of a regular polygon from the polygon area formula.\n    '''\n    assert polygon_area_equation(2,3) == 6\n    assert polygon_area_equation(4,2) == 12\n    assert polygon_area_equation(5,1) == 5\n    assert polygon_area_equation(6,1) == 6\ndef polygon_perimeter_polar(n,r):\n    '''\n    Write a function to compute the perimeter of a regular polygon.\n    '''\n    return n*2*r*cmath.pi\ndef test_polygon_perimeter_polar():\n    assert polygon_perimeter_polar(3,3) == 18\n    assert polygon_perimeter_polar(5,2) == 25\n    assert polygon_perimeter_polar(8,2) == 60\ndef polygon_perimeter_equation(n,r):\n    '''\n    Write a function to compute the perimeter of a regular polygon.\n    '''\n    return n*2*r\ndef test_polygon_perimeter_equation():\n    assert polygon_perimeter_equation(3,3) == 18\n    assert polygon_perimeter_equation(5,2) == 25\n    assert polygon_perimeter_equation(8,2) == 60\ndef polygon_circumference_polar(n,r):\n    '''\n    Write a function to compute the circumference of a regular polygon.\n    '''\n    return n*2*r*cmath.pi\ndef test_polygon_circumference_polar():\n    assert polygon_circumference_polar(3,3) == 18\n    assert polygon_circumference_polar(5,2) == 25\n    assert polygon_circumference_polar(8,2) == 60\ndef polygon_circumference_equation(n,r):\n    '''\n    Write a function to compute the circumference of a regular polygon.\n    '''\n    return n*2*r\ndef test_polygon_circumference_equation():\n    assert polygon_circumference_equation(3,3) == 18\n    assert polygon_circumference_equation(5,2) == 25\n    assert polygon_circumference_equation(8,2) == 60\ndef test_triangle_polar_circumference():\n    '''\n    Write a function to compute the circumference of a regular polygon.\n    '''\n    assert polygon_circumference_polar(3,3) == 18\n    assert polygon_circumference_polar(5,2) == 25\n    assert polygon_circumference_polar(8,2) == 60\ndef triangle_perimeter_polar(n,r):\n    '''\n    Write a function to compute the perimeter of a regular polygon.\n    '''\n    return n*2*r*cmath.pi\ndef test_triangle_perimeter_polar():\n    assert triangle_perimeter_polar(3,3) == 18\n    assert triangle_perimeter_polar(5,2) == 25\n    assert triangle_perimeter_polar(8,2) == 60\ndef triangle_perimeter_equation(n,r):\n    '''\n    Write a function to compute the perimeter of a regular polygon.\n    '''\n    return n*2*r\ndef test_triangle_perimeter_equation():\n    assert triangle_perimeter_equation(3,3) == 18\n    assert triangle_perimeter_equation(5,2) == 25\n    assert triangle_perimeter_equation(8,2) == 60\ndef triangle_circumference_polar(n,r):\n    '''\n    Write a function to compute the circumference of a regular polygon.\n    '''\n    return n*2*r*cmath.pi\ndef test_triangle_circumference_polar():\n    assert triangle_circumference_polar(3,3) == 18\n    assert triangle_circumference_polar(5,2) == 25\n    assert triangle_circumference_polar(8,2) == 60\ndef triangle_circumference_equation(n,r):\n    '''\n    Write a function to compute the circumference of a regular polygon.\n    '''\n    return n*2*r\ndef test_triangle_circumference_equation():\n    assert triangle_circumference_equation(3,3) == 18\n    assert triangle_circumference_equation(5,2) == 25\n    assert triangle_circumference_equation(8,2) == 60\ndef test_rounding_equation_1():\n    assert rounding_equation(0.03,5) == '0.05'\n    assert rounding_equation(0.015,5) == '0.01'\n    assert rounding_equation(0.03,4) == '0.04'\n    assert rounding_equation(0.015,4) == '0.01'\ndef test_rounding_equation_2():\n    assert rounding_equation(0.03,3) == '0.03'\n    assert rounding_equation(0.015,3) == '0.015'\n    assert rounding_equation(0.03,2) == '0.03'\n    assert rounding_equation(0.015,2) == '0.01'\ndef rounding_equation(a,b):\n    '''\n    Write a function to compute the rounded value.\n    '''\n    return str(a)[:-2] + '.' + str(b)\ndef test_rounding_equation_3():\n    assert rounding_equation(0",
        "num_ids": 40
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\ndef complex_to_polar(a,b):\n    '''\n    Write a function to convert a complex number to polar coordinates.\n    '''\n    r=abs(complex(a,b))\n    theta=angle_complex(a,b)\n    return [r,theta]\ndef polar_to_complex(r,theta):\n    '''\n    Write a function to convert a polar number to a complex number.\n    '''\n    return complex(r*cmath.cos(theta),r*cmath.sin(theta))\ndef matrix_subtract(m1,m2):\n    '''\n    Write a function to subtract one matrix from another.\n    '''\n    m_dif=[]\n    for i in range(len(m1)):\n        m_dif.append([])\n        for j in range(len(m1[i])):\n            m_dif[i].append(m1[i][j]-m2[i][j])\n    return m_dif\ndef add_matrix_list(l1,l2):\n    '''\n    Write a function to add two lists.\n    '''\n    for i in range(len(l1)):\n        l1[i].extend(l2[i])\n    return l1\ndef multiply_complex_by_complex(c1,c2):\n    '''\n    Write a function to multiply a complex number by a complex number.\n    '''\n    return complex(c1*c2.real,c1*c2.imag)\ndef multiply_complex_by_scalar(c,r):\n    '''\n    Write a function to multiply a complex number by a scalar.\n    '''\n    return complex(c.real*r,c.imag*r)\ndef add_complex_list(l1,l2):\n    '''\n    Write a function to add two lists.\n    '''\n    for i in range(len(l1)):\n        l1[i].extend(l2[i])\n    return l1\ndef sub_complex_list(l1,l2):\n    '''\n    Write a function to subtract two lists.\n    '''\n    for i in range(len(l1)):\n        l1[i].extend(l2[i])\n    return l1\ndef add_matrix(m1,m2):\n    '''\n    Write a function to add two matrices.\n    '''\n    m_dif=[]\n    for i in range(len(m1)):\n        m_dif.append([])\n        for j in range(len(m1[i])):\n            m_dif[i].append(m1[i][j]+m2[i][j])\n    return m_dif\ndef sub_matrix(m1,m2):\n    '''\n    Write a function to subtract two matrices.\n    '''\n    m_dif=[]\n    for i in range(len(m1)):\n        m_dif.append([])\n        for j in range(len(m1[i])):\n            m_dif[i].append(m1[i][j]-m2[i][j])\n    return m_dif\ndef multiply_complex_by_matrix(c,m):\n    '''\n    Write a function to multiply a complex number by a matrix.\n    '''\n    m_dif=[]\n    for i in range(len(m)):\n        m_dif.append([])\n        for j in range(len(m[i])):\n            m_dif[i].append(multiply_complex_by_complex(c,m[i][j]))\n    return m_dif\ndef multiply_matrix_by_complex(m,c):\n    '''\n    Write a function to multiply a matrix by a complex number.\n    '''\n    m_dif=[]\n    for i in range(len(m)):\n        m_dif.append([])\n        for j in range(len(m[i])):\n            m_dif[i].append(multiply_complex_by_complex(m[i][j],c))\n    return m_dif\ndef divide_complex_by_complex(c1,c2):\n    '''\n    Write a function to divide a complex number by a complex number.\n    '''\n    return c1/c2\ndef divide_complex_by_scalar(c,r):\n    '''\n    Write a function to divide a complex number by a scalar.\n    '''\n    return c/r\ndef subtract_complex_list(l1,l2):\n    '''\n    Write a function to subtract two lists.\n    '''\n    for i in range(len(l1)):\n        l1[i].extend(l2[i])\n    return l1\ndef inverse_matrix(m):\n    '''\n    Write a function to compute the inverse of a matrix.\n    '''\n    m_dif=[]\n    det=determinant(m)\n    if det==0:\n        return \"This matrix doesn't have an inverse.\"\n    else:\n        for i in range(len(m)):\n            m_dif.append([])\n            for j in range(len(m[i])):\n                m_dif[i].append(divide_complex_by_complex(m[i][j],det))\n        return m_dif\ndef determinant(m):\n    '''\n    Write a function to compute the determinant of a matrix.\n    '''\n    det=0\n    if len(m)==1:\n        det=m[0][0]\n    elif len(m)==2:\n        det=m[0][0]*m[1][1]-m[1][0]*m[0][1]\n    else:\n        for i in range(len(m)):\n            det+=(-1)**i*m[0][i]*determinant(subtract_matrix(m,m_minor(m,0,i)))\n    return det\ndef m_minor(m,i,j):\n    '''\n    Write a function to compute the minor of a matrix.\n    '''\n    m_dif=[]\n    for k in range(len(m)):\n        m_dif.append([])\n        for l in range(len(m[k])):\n            if k==i and l==j:\n                continue\n            else:\n                m_dif[k].append(m[k][l])\n    return m_dif\ndef transpose(m):\n    '''\n    Write a function to compute the transpose of a matrix.\n    '''\n    m_dif=[]\n    for i in range(len(m[0])):\n        m_dif.append([])\n        for j in range(len(m)):\n            m_dif[i].append(m[j][i])\n    return m_dif\ndef conjugate(m):\n    '''\n    Write a function to compute the conjugate of a matrix.\n    '''\n    m_dif=[]\n    for i in range(len(m)):\n        m_dif.append([])\n        for j in range(len(m[i])):\n            m_dif[i].append(m[i][j].conjugate())\n    return m_dif\ndef adjoint(m):\n    '''\n    Write a function to compute the adjoint of a matrix.\n    '''\n    m_dif=[]\n    for i in range(len(m)):\n        m_dif.append([])\n        for j in range(len(m[i])):\n            m_dif[i].append(m[j][i].conjugate())\n    return m_dif\ndef inverse_matrix_2x2(m):\n    '''\n    Write a function to compute the inverse of a 2x2 matrix.\n    '''\n    det=m[0][0]*m[1][1]-m[1][0]*m[0][1]\n    if det==0:\n        return \"This matrix doesn't have an inverse.\"\n    else:\n        return [[m[1][1]/det, -m[0][1]/det]",
        "num_ids": 77
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return (cmath.phase(a + b*1j))\n",
        "num_ids": 18
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    x = complex(a,b)\n    return cmath.phase(x)\n    \nimport unittest\n",
        "num_ids": 29
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c=complex(a,b)\n    return cmath.phase(c)\n    pass\n",
        "num_ids": 25
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n",
        "num_ids": 16
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    real_part = a.real\n    imaginary_part = a.imag\n    if b.imag > 0:\n        sign = 1\n    else:\n        sign = -1\n    ang = sign*(cmath.phase(complex(real_part,imaginary_part)))\n    return ang\n",
        "num_ids": 72
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # A = cmath.phase(complex(a,b))\n    A = cmath.phase(complex(a,b))\n    # B = cmath.phase(complex(a,-b))\n    B = cmath.phase(complex(-a,-b))\n    if A < 0:\n        A = 2*math.pi + A\n    if B < 0:\n        B = 2*math.pi + B\n    if A > B:\n        return A\n    else:\n        return B\n",
        "num_ids": 119
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a_re=a.real\n    a_im=a.imag\n    b_re=b.real\n    b_im=b.imag\n    \n    angle=cmath.atan2(a_re,a_im)*(180/cmath.pi)\n    if angle>360:\n        angle=angle-360\n    if angle<0:\n        angle=360+angle\n    return angle\n",
        "num_ids": 98
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    \n    x=a.real\n    y=a.imag\n    \n    z=b.real\n    w=b.imag\n    \n    \n    \n    angle_complex = cmath.phase(complex(x,y)*complex(z,w))\n    \n    return angle_complex\n    \nprint angle_complex(1,1)\n    \n    \n    ",
        "num_ids": 88
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    num_ones, num_zeros = 0, 0\n    i = 0\n    while i < len(string):\n        if string[i] == '1':\n            num_ones += 1\n            num_zeros = 0\n        else:\n            num_zeros += 1\n            num_ones = 0\n        if num_zeros > num_ones:\n            num_ones = 0\n            num_zeros = 0\n            i += 1\n            continue\n        i += 1\n    return abs(num_ones - num_zeros)\n",
        "num_ids": 129
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 0: \n        return \n    else: \n        max_diff = 0 \n        count = 0 \n        for i in range(len(string)): \n            if string[i] == '0': \n                count += 1\n            else: \n                max_diff = max(max_diff, count)\n                count = 0 \n    return max_diff \n",
        "num_ids": 98
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    result = 0\n    i = 0\n    j = 0\n    while i < len(string): \n        if string[i] == '1': \n            j = j + 1\n        else: \n            if result < j - i: \n                result = j - i\n            j = 0\n        i = i + 1\n    if result < j - i: \n        result = j - i\n    return result \n",
        "num_ids": 102
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string)\n    zeros = 1\n    ones = 0\n    for i in range(length):\n        if string[i] == '0':\n            zeros += 1\n        else:\n            ones += 1\n    return length - max(zeros, ones)\n",
        "num_ids": 68
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    def find_substring(string):\n        start = 0\n        length = 0\n        count = 0\n        while start < len(string):\n            if string[start] == '0':\n                count += 1\n            else:\n                if count > length:\n                    length = count\n                count = 0\n            start += 1\n        return length\n    return max(find_substring(string[i:]) - find_substring(string[:i]) for i in range(len(string)))\n",
        "num_ids": 117
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    index, count_zero, count_one = 0, 0, 0\n    while index < len(string):\n        if string[index] == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n        if count_zero == count_one:\n            break\n        index += 1\n    return count_zero - count_one\n",
        "num_ids": 86
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return max(sum([int(i) for i in string]) - sum([1-int(i) for i in string]), sum([int(i) for i in string]) - sum([1-int(i) for i in string]))\n",
        "num_ids": 58
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return max(len(string) - string.count('0'),string.count('1')-len(string))\n",
        "num_ids": 29
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    zero = 1\n    one = 1\n    for i in xrange(1, len(string)):\n        if string[i] == '1':\n            if string[i - 1] == '0':\n                zero += 1\n            else:\n                one += 1\n        else:\n            if string[i - 1] == '1':\n                one -= 1\n            else:\n                zero -= 1\n    return max(zero, one)\n",
        "num_ids": 105
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '1':\n            count += 1\n        elif string[i] == '0':\n            count -= 1\n        if count == 0:\n            return i+1\n    return 0\n",
        "num_ids": 69
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c = 0\n    for i in range(1,min(a,b)+1):\n        if a%i == 0 and b%i == 0:\n            c += i\n    return c\n",
        "num_ids": 48
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    x,y=a,b\n    n=2\n    while (y!=0):\n        x=x%y\n        x,y=y,x\n        n+=1\n    return a*b/n\n",
        "num_ids": 54
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divs = []\n    for x in range(2,min(a,b)+1):\n        if a%x == 0 and b%x == 0:\n            divs.append(x)\n    return sum(divs)\n",
        "num_ids": 57
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    s=0\n    while (a>0) and (b>0):\n        if a%b==0:\n            s=s+b\n            a=a/b\n        else:\n            a=a-1\n    return s\n",
        "num_ids": 59
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors=[]\n    divisors.extend([i for i in range(1,a) if a%i==0 and b%i==0])\n    divisors.extend([i for i in range(1,b) if b%i==0 and a%i==0])\n    return sum(divisors)\n",
        "num_ids": 82
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a < b:\n        (a,b) = (b,a)\n    i = 1\n    s = 0\n    while (i <= a) and (i <= b):\n        if (a % i == 0) and (b % i == 0):\n            s += i\n        i += 1\n    return s\n",
        "num_ids": 78
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    for i in range(1,min(a,b)+1):\n        if a%i == 0 and b%i == 0:\n            sum += i\n    return sum\n",
        "num_ids": 48
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    lsum = 0\n    for i in range(1,a+1):\n        if(a%i==0)and(b%i==0):\n            lsum += i\n    return lsum\n",
        "num_ids": 50
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    total = 0\n    for i in range(1, min(a,b) + 1):\n        if(a%i == 0 and b%i == 0):\n            total += i\n    return total\n",
        "num_ids": 50
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    x=a\n    y=b\n    while(1):\n        if(x>y):\n            x=x-y\n        if(y>x):\n            y=y-x\n        if(x==1 or y==1):\n            break\n    print x\n    print y\n",
        "num_ids": 71
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    \n    return x*y\n",
        "num_ids": 10
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if y == 0:\n        return 0\n    else:\n        return x + multiply_int(x, y-1)\n",
        "num_ids": 32
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for _ in range(y):\n        result += x\n    return result\n",
        "num_ids": 25
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    def multiply(x, y):\n        '''\n        multiply two integers\n        '''\n        if x == 0 or y == 0:\n            return 0\n        if x < 0:\n            x = -x\n        if y < 0:\n            y = -y\n",
        "num_ids": 43
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    print long_words\n",
        "num_ids": 50
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    ret = []\n    for word in str:\n        if len(word) > n:\n            ret.append(word)\n    return ret\n",
        "num_ids": 36
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    pas",
        "num_ids": 4
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    return [word for word in words if len(word) > n]\n",
        "num_ids": 27
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Create a new list to store the longer words\n    lw = []\n    for word in str:\n        if len(word) > n:\n            lw.append(word)\n    return lw\n",
        "num_ids": 51
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    new_list = []\n    for word in str:\n        if len(word) > n:\n            new_list.append(word)\n    return new_list\n",
        "num_ids": 42
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    \n    import re\n    result = []\n    \n    pattern = re.compile(\"\\w+\")\n    \n    for word in str:\n        if len(word) > n:\n            result.append(word)\n    \n    return result\n    \n    \ndef unique_english_letters(str):\n    '''\n    Write a function to count the number of unique english letters from a string.\n    '''\n    \n    import re\n    \n    unique = set(re.sub('[^a-zA-Z]+', '', str))\n    return len(unique)\n    \n    \ndef longest_word(str):\n    '''\n    Write a function to find the longest word in a string of words.\n    '''\n    \n    str = str.split(\" \")\n    \n    maximum = \"\"\n    for word in str:\n        if len(word) > len(maximum):\n            maximum = word\n    \n    return maximum\n    \n    \ndef vowel_count(str):\n    '''\n    Write a function that counts the number of vowels in a string.\n    '''\n    \n    vowels = \"aeiouAEIOU\"\n    \n    result = 0\n    for char in str:\n        if char in vowels:\n            result = result + 1\n    return result\n    \n    \ndef count_vowels(str):\n    '''\n    Write a function that counts the number of vowels in a string.\n    '''\n    \n    count = 0\n    for char in str:\n        if char in 'aeiouAEIOU':\n            count = count + 1\n    \n    return count\n    \n    \ndef count_letters(str):\n    '''\n    Write a function that counts the number of letters in a string.\n    '''\n    \n    count = 0\n    for char in str:\n        if char in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            count = count + 1\n    \n    return count\n    \n    \ndef count_words(str):\n    '''\n    Write a function that counts the number of words in a string.\n    '''\n    \n    count = 0\n    for word in str.split(\" \"):\n        count = count + 1\n    \n    return count\n    \n    \ndef count_unique_words(str):\n    '''\n    Write a function that counts the number of unique words in a string.\n    '''\n    \n    str = str.split(\" \")\n    \n    count = 0\n    \n    for word in str:\n        for char in word:\n            if char not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n                count = count + 1\n                break\n    \n    return count\n    \n    \ndef reverse_string(str):\n    '''\n    Write a function that returns the reverse of a string.\n    '''\n    \n    result = \"\"\n    for index in range(len(str) - 1, -1, -1):\n        result = result + str[index]\n    \n    return result\n    \n    \ndef find_misspell(str):\n    '''\n    Write a function that returns the longest substring that is a misspelling of the original string.\n    \n    >>> find_misspell('kittens')\n    'kattn'\n    >>> find_misspell('watch')\n    'cat'\n    >>> find_misspell('blah blah blah')\n    ''\n    >>> find_misspell('CS')\n    'Cs'\n    '''\n    \n    result = \"\"\n    current = \"\"\n    for index in range(len(str)):\n        current = current + str[index]\n        if current not in str:\n            if len(current) > len(result):\n                result = current\n            current = \"\"\n    \n    return result\n    \n    \ndef find_longest_word(str):\n    '''\n    Write a function that returns the longest word in a string.\n    \n    >>> find_longest_word('one two three four')\n    'four'\n    >>> find_longest_word('The quick brown fox jumped over the lazy dog')\n    'fox'\n    >>> find_longest_word('A happy day!')\n    'A'\n    >>> find_longest_word('I hate you')\n    'you'\n    '''\n    \n    str = str.split()\n    \n    maximum = \"\"\n    \n    for word in str:\n        if len(word) > len(maximum):\n            maximum = word\n    \n    return maximum\n    \n    \ndef convert_to_pig_latin(str):\n    '''\n    Write a function that takes a string and returns a string that is the same\n    word, but in pig latin.\n    \n    The first letter is moved to the end and \"ay\" is added to the end.\n    \n    >>> convert_to_pig_latin('hello')\n    'ellohay'\n    >>> convert_to_pig_latin('go')\n    'ogay'\n    >>> convert_to_pig_latin('a')\n    'aay'\n    >>> convert_to_pig_latin('apple')\n    'appleay'\n    '''\n    \n    first_letter = str[0]\n    rest_of_word = str[1:]\n    \n    new_string = rest_of_word + first_letter + \"ay\"\n    \n    return new_string\n    \n    \ndef count_vowels(str):\n    '''\n    Write a function that counts the number of vowels in a string.\n    \n    >>> count_vowels('go')\n    2\n    >>> count_vowels('go go go')\n    3\n    >>> count_vowels('go go go rhea')\n    4\n    '''\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    count = 0\n    \n    for char in str:\n        if char in vowels:\n            count = count + 1\n    \n    return count\n    \n    \ndef count_double_letters(str):\n    '''\n    Write a function that counts the number of double letters in a string.\n    \n    >>> count_double_letters('go go go')\n    2\n    >>> count_double_letters('go go aa')\n    0\n    >>> count_double_letters('go go go go')\n    1\n    '''\n    \n    double_letters = []\n    \n    for index in range(len(str) - 1):\n        if str[index] == str[index + 1]:\n            double_letters.append(str[index])\n    \n    return len(double_letters)\n    \n    \ndef count_consonants(str):\n    '''\n    Write a function that counts the number of consonants in a string.\n    \n    >>> count_consonants('go go go')\n    2\n    >>> count_consonants('go go aa')\n    0\n    >>> count_consonants('go go go go')\n    0\n    '''\n    \n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n    \n    count = 0\n    \n    for char in str:\n        if char in consonants:\n            count = count + 1\n    \n    return count\n    \n    \ndef count_alphabet(str):\n    '''\n    Write a function that counts the number of letters in a string.\n    \n    >>> count_alphabet('go go go')\n    3\n    >>> count_alphabet('go go aa')\n    2\n    >>> count_alphabet('go go go go')\n    1\n    '''\n    \n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    count = 0\n    \n    for char in str:\n        if char in alphabet:\n            count = count + 1\n    \n    return count\n    \n    \ndef count_spaces(str):\n    '''\n    Write a function that counts the number of spaces in a string.\n    \n    >>> count_spaces('go go go')\n    3\n    >>",
        "num_ids": 36
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "num_ids": 42
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [w for w in str if len(w) > n]\n",
        "num_ids": 19
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [x for x in str if len(x) > n]\n",
        "num_ids": 19
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #a magic square is a square matrix that is equal to the sum of each row, each column, and each of the diagonals\n    #this function takes the matrix as input and returns True if it is a magic square and False otherwise\n    #the magic square requirements are as follows:\n    #1. the sum of each row of the matrix must be equal to the sum of each column of the matrix\n    #2. the sum of each column of the matrix must be equal to the sum of each row of the matrix\n    #3. the sum of the main diagonal of the matrix must be equal to the sum of the secondary diagonal of the matrix\n    #4. the sum of the secondary diagonal of the matrix must be equal to the sum of each column of the matrix\n",
        "num_ids": 168
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= len(my_matrix[0]):\n        print \"Not a square matrix\"\n        return False\n    magic_sum = 0\n    for i in xrange(0, len(my_matrix)):\n        row_sum = 0\n        for j in xrange(0, len(my_matrix)):\n            row_sum += my_matrix[i][j]\n        if row_sum!= magic_sum:\n            print \"row sum: \", row_sum\n            print \"magic sum: \", magic_sum\n            print \"Not a magic square\"\n            return False\n        col_sum = 0\n        for j in xrange(0, len(my_matrix)):\n            col_sum += my_matrix[j][i]\n        if col_sum!= magic_sum:\n            print \"col sum: \", col_sum\n            print \"magic sum: \", magic_sum\n            print \"Not a magic square\"\n            return False\n    sum_of_diag = 0\n    for i in xrange(0, len(my_matrix)):\n        sum_of_diag += my_matrix[i][i]\n    if sum_of_diag!= magic_sum:\n        print \"sum of diagonal: \", sum_of_diag\n        print \"magic sum: \", magic_sum\n        print \"Not a magic square\"\n        return False\n    sum_of_anti_diag = 0\n    for i in xrange(0, len(my_matrix)):\n        sum_of_anti_diag += my_matrix[i][-i-1]\n    if sum_of_anti_diag!= magic_sum:\n        print \"sum of anti diagonal: \", sum_of_anti_diag\n        print \"magic sum: \", magic_sum\n        print \"Not a magic square\"\n        return False\n    print \"Matrix is a magic square\"\n    return True\n",
        "num_ids": 461
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    magic_numbers = [2,3,4,5,6,7,8,9]\n    my_matrix_len = len(my_matrix)\n    for row in my_matrix:\n        if len(row)!= my_matrix_len:\n            return False\n",
        "num_ids": 71
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    magic_number = 0\n    \n    if my_matrix == None:\n        return False\n    \n    elif len(my_matrix) == 0:\n        return False\n    \n    else:\n        for row in range(len(my_matrix)):\n            magic_number += my_matrix[row][row]\n            \n        if magic_number == 0:\n            return True\n        else:\n            return False\n        \n",
        "num_ids": 106
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n",
        "num_ids": 13
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    N = len(my_matrix)\n    magic = True\n    # check each row\n    for row in my_matrix:\n        if sum(row)!= N:\n            return False\n    # check each column\n    for i in range(N):\n        column = []\n        for row in my_matrix:\n            column.append(row[i])\n        if sum(column)!= N:\n            return False\n    # check each diagonal\n    for i in range(N):\n        diagonal = []\n        for row in range(N):\n            diagonal.append(my_matrix[row][row])\n        if sum(diagonal)!= N:\n            return False\n    for i in range(N):\n        diagonal = []\n        for row in range(N):\n            diagonal.append(my_matrix[row][N-1-row])\n        if sum(diagonal)!= N:\n            return False\n    return magic\n    \ndef main():\n    test_matrix1 = [\n        [4,3,8,4],\n        [9,5,1,6],\n        [2,7,6,2],\n        [7,3,9,3]\n    ]\n    test_matrix2 = [\n        [4,3,8,4],\n        [9,5,1,6],\n        [2,7,6,2],\n        [7,3,9,3]\n    ]\n    test_matrix3 = [\n        [4,3,8,4],\n        [9,5,1,6],\n        [2,7,6,2],\n        [7,3,9,3]\n    ]\n    test_matrix4 = [\n        [7,2,5,4],\n        [4,8,3,5],\n        [9,1,6,3],\n        [7,6,1,9]\n    ]\n    test_matrix5 = [\n        [7,2,5,4],\n        [4,8,3,5],\n        [9,1,6,3],\n        [8,7,1,9]\n    ]\n    test_matrix6 = [\n        [7,2,5,4],\n        [4,8,3,5],\n        [9,1,6,3],\n        [8,7,1,9]\n    ]\n    test_matrix7 = [\n        [9,8,1,6],\n        [6,1,4,5],\n        [7,3,8,2],\n        [4,9,7,3]\n    ]\n    test_matrix8 = [\n        [1,2,3,4,5,6,7,8,9],\n        [4,5,6,7,8,9,1,2,3],\n        [7,8,9,1,2,3,4,5,6],\n        [2,3,4,5,6,7,8,9,1],\n        [6,7,8,9,1,2,3,4,5],\n        [5,6,7,8,9,1,2,3,4],\n        [8,9,1,2,3,4,5,6,7],\n        [3,4,5,6,7,8,9,1,2],\n        [1,2,3,4,5,6,7,8,9]\n    ]\n    test_matrix9 = [\n        [1,2,3,4,5,6,7,8,9],\n        [4,5,6,7,8,9,1,2,3],\n        [7,8,9,1,2,3,4,5,6],\n        [2,3,4,5,6,7,8,9,1],\n        [6,7,8,9,1,2,3,4,5],\n        [5,6,7,8,9,1,2,3,4],\n        [8,9,1,2,3,4,5,6,7],\n        [3,4,5,6,7,8,9,1,2],\n        [1,2,3,4,5,6,7,8,9]\n    ]\n    test_matrix10 = [\n        [1,2,3,4,5,6,7,8,9],\n        [4,5,6,7,8,9,1,2,3],\n        [7,8,9,1,2,3,4,5,6],\n        [2,3,4,5,6,7,8,9,1],\n        [6,7,8,9,1,2,3,4,5],\n        [5,6,7,8,9,1,2,3,4],\n        [8,9,1,2,3,4,5,6,7],\n        [3,4,5,6,7,8,9,1,2],\n        [1,2,3,4,5,6,7,8,9]\n    ]\n    test_matrix11 = [\n        [1,2,3,4,5,6,7,8,9],\n        [4,5,6,7,8,9,1,2,3],\n        [7,8,9,1,2,3,4,5,6],\n        [2,3,4,5,6,7,8,9,1],\n        [6,7,8,9,1,2,3,4,5],\n        [5,6,7,8,9,1,2,3,4],\n        [8,9,1,2,3,4,5,6,7],\n        [3,4,5,6,7,8,9,1,2],\n        [1,2,3,4,5,6,7,8,9]\n    ]\n    test_matrix12 = [\n        [1,2,3,4,5,6,7,8,9],\n        [4,5,6,7,8,9,1,2,3],\n        [7,8,9,1,2,3,4,5,6],\n        [2,3,4,5,6,7,8,9,1],\n        [6,7,8,9,1,2,3,4,5],\n        [5,6,7,8,9,1,2,3,4],\n        [8,9,1,2,3,4,5,6,7],\n        [3,4,5,6,7,8,9,1,2],\n        [1,2,3,4,5,6,7,8,9]\n    ]\n    test_matrix13 = [\n        [1,2,3,4,5,6,7,8,9],\n        [4,5,6,7,8,9,1,2,3],\n        [7,8,9,1,2,3,4,5,6],\n        [2,3,4,5,6,7,8,9,1],\n        [6,7,8,9,1,2,3,4,5],\n        [5,6,7,8,9,1,2,3,4],\n        [8,9,1,2,3,4,5,6,7],\n        [3,4,5,6,7,8,9,1,2],\n        [1,2,3,4,5,6,7,8,9]\n    ]\n    test_matrix14 = [\n        [1,2,3,4,5,6,7,8,9],\n        [4,5,6,7,8,9,1,2,3],\n        [7,8,9,1,2,3,4,5,6],\n        [2,3,4,5,6,7,8,9,1],\n        [6,7,8,9,1,2,3,4,5],\n        [5,6,7,8,9,1,2,3,4],\n        [8,9,1,2,3,4,5,6,7],\n        [3,4,5,6,7,8,9,1,2],\n        [1,2,",
        "num_ids": 2013
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    '''\n    The below is the matrix that I got for the first test\n    matrix = [\n        [8, 3, 4, 6],\n        [1, 5, 9, 2],\n        [6, 7, 5, 9],\n        [7, 5, 3, 6]\n    ]\n    '''\n    row_sum = [0] * len(my_matrix)\n    col_sum = [0] * len(my_matrix)\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            row_sum[i] += my_matrix[i][j]\n            col_sum[i] += my_matrix[j][i]\n    diag_sum = 0\n    for i in range(len(my_matrix)):\n        diag_sum += my_matrix[i][i]\n    for i in range(len(my_matrix)):\n        diag_sum += my_matrix[i][-1-i]\n",
        "num_ids": 175
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate sum of each row, column and diagonal.\n    row_sum = sum(my_matrix[i][j] for i in range(len(my_matrix)) for j in range(len(my_matrix)))\n    col_sum = sum(my_matrix[i][j] for i in range(len(my_matrix)) for j in range(len(my_matrix)))\n",
        "num_ids": 98
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    #check if the number of rows is an even number\n    if len(my_matrix)%2!=0:\n        return False\n",
        "num_ids": 37
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    def is_magic_square(matrix):\n        n = len(matrix)\n        total = sum(matrix[0])\n        #print(total)\n        for i in range(n):\n            total -= matrix[i][0]\n        #print(total)\n        if total!= 0:\n            return False\n        \n        for i in range(1, n):\n            for j in range(1, n):\n                if matrix[i][j]!= matrix[0][j-1] + matrix[0][j] + matrix[i][0]:\n                    return False\n    \n        for i in range(1, n):\n            for j in range(1, n):\n                if matrix[0][0]!= matrix[i][j]:\n                    return False\n        return True\n    \n    return is_magic_square(my_matrix)\n",
        "num_ids": 207
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    nums_dict = defaultdict(int)\n    for i in nums:\n        nums_dict[i] += 1\n    max_value = max(nums_dict.values())\n    result = []\n    for i in nums_dict:\n        if nums_dict[i] == max_value:\n            result.append(i)\n    return result\n",
        "num_ids": 90
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    for item in nums:\n        count[item] += 1\n        if count[item] > max_freq:\n            max_freq = count[item]\n            max_item = item\n    return max_item\n",
        "num_ids": 79
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    m = defaultdict(int)\n    for num in nums:\n        m[num] += 1\n    return max(m, key=lambda k:m[k])\n",
        "num_ids": 43
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    nums_dict = defaultdict(int)\n    for num in nums:\n        nums_dict[num] += 1\n    max_freq = 0\n    max_num = None\n    for num,freq in nums_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_num = num\n    return max_num\n",
        "num_ids": 96
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # sort the list\n    nums = sorted(nums)\n    # find the max\n    max_val = 0\n    for i in range(len(nums)):\n        if nums[i] == nums[i-1]:\n            continue\n        if nums[i] > max_val:\n            max_val = nums[i]\n    return max_val\n",
        "num_ids": 93
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    for i in nums:\n        counts[i] += 1\n    return max(counts.items(), key=lambda x: x[1])[0]\n",
        "num_ids": 51
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    max_count = 0\n    max_item = None\n    for i in nums:\n        counts[i] += 1\n        if counts[i] > max_count:\n            max_count = counts[i]\n            max_item = i\n    return max_item\n",
        "num_ids": 78
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    occurence_dict = defaultdict(int)\n    for item in nums:\n        occurence_dict[item] += 1\n    max_item = None\n    max_count = 0\n    for item, count in occurence_dict.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n    return max_item\n",
        "num_ids": 93
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_frequency = 0\n    max_element = None\n    for num in nums:\n        if nums[num] > max_frequency:\n            max_frequency = nums[num]\n            max_element = num\n    return max_element\n",
        "num_ids": 61
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    return max(counts, key=lambda x: counts[x])\n",
        "num_ids": 46
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    string = str1.split(' ')\n    reverse_string = []\n    vowels = ['a','e','i','o','u']\n    for i in range(len(string)):\n        l = list(string[i])\n        for j in range(len(l)):\n            if l[j] in vowels and l[j]!= 'y':\n                l[j] = l[j].lower()\n        reverse_string.append(''.join(l))\n    return reverse_string\n",
        "num_ids": 123
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'AEIOUaeiou'\n    temp = list(str1)\n    i = 0\n    j = len(temp) - 1\n    while i < j:\n        if temp[i].lower() not in vowels:\n            i = i + 1\n        elif temp[j].lower() not in vowels:\n            j = j - 1\n        else:\n            temp[i], temp[j] = temp[j], temp[i]\n            i = i + 1\n            j = j - 1\n    return ''.join(temp)\n",
        "num_ids": 136
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    str1 = str1.lower()\n    str1_new = []\n    for c in str1:\n        if c in vowels:\n            str1_new.append(c)\n    str1_new.reverse()\n    str1_new = \"\".join(str1_new)\n    return str1_new\n",
        "num_ids": 106
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'AEIOUaeiou'\n    string = list(str1)\n    for i in xrange(0, len(string)):\n        if string[i] not in vowels:\n            string[i] = string[i]\n        elif string[i] in vowels:\n            string[i] = string[i].upper()\n            string[i] = string[i]\n    str1 = ''.join(string)\n    return str1\n",
        "num_ids": 115
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    list1 = list(str1)\n    vowel_str = \"\"\n    for i in range(len(list1)):\n        if list1[i] in vowels:\n            vowel_str += list1[i]\n    list2 = vowel_str[::-1]\n    for i in range(len(list1)):\n        if list1[i] in vowels:\n            list1[i] = list2[i]\n    return ''.join(list1)\n",
        "num_ids": 134
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    list1 = list(str1)\n    for i in range(len(list1)):\n        if list1[i] in vowels:\n            list1[i] = list1[i]\n        elif list1[i] is 'y':\n            list1[i] = 'Y'\n        else:\n            list1[i] = '$'\n    return ''.join(list1)\n",
        "num_ids": 113
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    s = list(str1)\n    i = 0\n    j = len(s) - 1\n    while i < j:\n        if s[i] in vowels and s[j] in vowels:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n        elif s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n    return ''.join(s)\n",
        "num_ids": 140
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    str2 = list(str1)\n    i, j = 0, len(str2)-1\n    while i < j:\n        if str2[i] not in vowels:\n            i += 1\n        elif str2[j] not in vowels:\n            j -= 1\n        else:\n            str2[i], str2[j] = str2[j], str2[i]\n            i += 1\n            j -= 1\n    return ''.join(str2)\n",
        "num_ids": 132
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    s = list(str1)\n    l, r = 0, len(s)-1\n    while l<r:\n        if s[l].lower() not in vowels:\n            l += 1\n        elif s[r].lower() not in vowels:\n            r -= 1\n        else:\n            s[l], s[r] = s[r], s[l]\n            l += 1\n            r -= 1\n    return \"\".join(s)\n",
        "num_ids": 123
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiou')\n    str2 = [i for i in str1 if i in vowels]\n    str2.reverse()\n    str2 = ''.join(str2)\n    return str2\n    \n    \n    ",
        "num_ids": 61
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    temp = ''\n    for i in tup1:\n        temp += str(i) +''\n    return temp\n",
        "num_ids": 30
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # print(str(tup1).replace('(','').replace(')','').replace('\\'','').replace(',',''))\n    return str(tup1).replace('(','').replace(')','').replace('\\'','').replace(',','')\n",
        "num_ids": 70
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "num_ids": 11
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string1 = ''\n    for i in tup1:\n        string1 = string1 + i\n    return string1\n",
        "num_ids": 31
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = \"\"\n    for i in range(len(tup1)):\n        s = s + tup1[i]\n    return s\n",
        "num_ids": 37
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    if type(tup1) == str:\n        return tup1\n    return ''.join(tup1)\ndef tup_int(tup1):\n    '''\n    Write a function to convert a tuple to an int.\n    '''\n    if type(tup1) == int:\n        return tup1\n    return sum(list(tup1))\ndef tup_bool(tup1):\n    '''\n    Write a function to convert a tuple to a bool.\n    '''\n    if type(tup1) == bool:\n        return tup1\n    return len(tup1)!= 0\ndef tup_slice(tup1):\n    '''\n    Write a function to convert a tuple to a slice object.\n    '''\n    if type(tup1) == slice:\n        return tup1\n    return slice(tup1[0], tup1[1], tup1[2])\ndef tup_len(tup1):\n    '''\n    Write a function to convert a tuple to a list.\n    '''\n    if type(tup1) == list:\n        return tup1\n    return list(tup1)\ndef tup_reverse(tup1):\n    '''\n    Write a function to convert a tuple to a reversed object.\n    '''\n    if type(tup1) == str:\n        return reversed(tup1)\n    return reversed(tup1[:])\ndef tup_reversed(tup1):\n    '''\n    Write a function to convert a tuple to a reversed object.\n    '''\n    if type(tup1) == str:\n        return tup1[::-1]\n    return tup1[::-1]\ndef tup_type(tup1):\n    '''\n    Write a function to convert a tuple to a list.\n    '''\n    if type(tup1) == str:\n        return str(tup1)\n    return type(tup1)\ndef tup_tuple(tup1):\n    '''\n    Write a function to convert a tuple to a list.\n    '''\n    if type(tup1) == tuple:\n        return tup1\n    return tuple(tup1)\ndef tup_set(tup1):\n    '''\n    Write a function to convert a tuple to a set.\n    '''\n    if type(tup1) == set:\n        return tup1\n    return set(tup1)\ndef tup_frozenset(tup1):\n    '''\n    Write a function to convert a tuple to a frozenset.\n    '''\n    if type(tup1) == frozenset:\n        return tup1\n    return frozenset(tup1)\ndef tup_cmp(tup1, tup2):\n    '''\n    Write a function to compare two tuples.\n    '''\n    if type(tup1)!= type(tup2):\n        return False\n    if type(tup1) == tuple:\n        return tup1 == tup2\n    return tuple(tup1) == tuple(tup2)\ndef tup_del(tup1, tup2):\n    '''\n    Write a function to delete the first element of a tuple.\n    '''\n    if type(tup1) == str:\n        return tup1[tup2:]\n    return tup1[tup2+1:]\ndef tup_del_last(tup1):\n    '''\n    Write a function to delete the last element of a tuple.\n    '''\n    if type(tup1) == str:\n        return tup1[:-1]\n    return tup1[:-1]\ndef tup_del_index(tup1, index):\n    '''\n    Write a function to delete an index of a tuple.\n    '''\n    if type(tup1) == str:\n        return tup1[:index] + tup1[index+1:]\n    return tup1[:index] + tup1[index+1:]\ndef tup_del_slice(tup1):\n    '''\n    Write a function to delete a slice of a tuple.\n    '''\n    if type(tup1) == str:\n        return tup1[tup1[0]:tup1[1]] + tup1[tup1[2]:]\n    return tup1[tup1[0]:tup1[1]] + tup1[tup1[2]:]\ndef tup_del_slice_len(tup1, index):\n    '''\n    Write a function to delete a slice of a tuple with a length of index.\n    '''\n    if type(tup1) == str:\n        return tup1[:index] + tup1[index+1:]\n    return tup1[:index] + tup1[index+1:]\ndef tup_del_slice_tuple(tup1, index):\n    '''\n    Write a function to delete a slice of a tuple with a tuple of index.\n    '''\n    if type(tup1) == str:\n        return tup1[:index] + tup1[index+1:]\n    return tup1[:index] + tup1[index+1:]\ndef tup_get(tup1, index):\n    '''\n    Write a function to get an index of a tuple.\n    '''\n    if type(tup1) == str:\n        return tup1[index]\n    return tup1[index]\ndef tup_set_get(tup1, index, val):\n    '''\n    Write a function to get set an index of a tuple.\n    '''\n    if type(tup1) == str:\n        return tup1[:index] + val + tup1[index+1:]\n    return tup1[:index] + val + tup1[index+1:]\ndef tup_set_get_len(tup1, index):\n    '''\n    Write a function to get a length of an index of a tuple.\n    '''\n    if type(tup1) == str:\n        return len(tup1[:index]) + 1 + len(tup1[index+1:])\n    return len(tup1[:index]) + 1 + len(tup1[index+1:])\ndef tup_set_len(tup1):\n    '''\n    Write a function to get the length of a tuple.\n    '''\n    if type(tup1) == str:\n        return len(tup1)\n    return len(tup1)\ndef tup_set_get_type(tup1, index):\n    '''\n    Write a function to get the type of an index of a tuple.\n    '''\n    if type(tup1) == str:\n        return str\n    return type(tup1[index])\ndef tup_get_index(tup1, val):\n    '''\n    Write a function to get index of a tuple.\n    '''\n    for i, x in enumerate(tup1):\n        if x == val:\n            return i\n    return None\ndef tup_set_type(tup1, index, type):\n    '''\n    Write a function to change the type of an index of a tuple.\n    '''\n    if type(tup1) == str:\n        return tup1[:index] + type(tup1[index]) + tup1[index+1:]\n    return tup1[:index] + type(tup1[index]) + tup1[index+1:]\ndef tup_insert(tup1, index, val):\n    '''\n    Write a function to insert a value to a tuple at a specific index.\n    '''\n    if type(tup1) == str:\n        return tup1[:index] + val + tup1[index:]\n    return tup1[:index] + val + tup1[index:]\ndef tup_insert_len(tup1, index, val):\n    '''\n    Write a function to insert a value to a tuple at a specific index with a length.\n    '''\n    if type(tup1) == str:\n        return tup1[:index] + val + tup1[index:]\n    return ",
        "num_ids": 36
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # String formatting\n    tup_str = ''.join(['%s' % tup1[i] for i in range(len(tup1))])\n    return tup_str\n",
        "num_ids": 48
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1).replace(',','').replace('(', '').replace(')', '')\n",
        "num_ids": 29
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    if isinstance(tup1, tuple):\n        string = \"(\"\n        for num in tup1:\n            string += str(num) + \", \"\n        string = string[:-2]\n        string += \")\"\n        return string\n    else:\n        return str(tup1)\n",
        "num_ids": 72
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # init\n    new_str = ''\n    # process\n    for elem in tup1:\n        new_str += str(elem) +''\n    # done\n    return new_str\n",
        "num_ids": 50
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([x for x in nums if x < 0])\n",
        "num_ids": 18
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # negative_sum = 0\n    # for num in nums:\n    #     if num < 0:\n    #         negative_sum += num\n",
        "num_ids": 37
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([n for n in nums if n < 0])\n",
        "num_ids": 18
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([x for x in nums if x < 0])\n",
        "num_ids": 18
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if nums == []:\n        return 0\n    else:\n        return -nums[0] + sum_negativenum(nums[1:])\n",
        "num_ids": 41
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    s = 0\n    for i in nums:\n        if i < 0:\n            s += i\n    return s\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    s = 0\n    for i in range(0, len(nums)):\n        if nums[i] < 0:\n            s = s + nums[i]\n    return s\n",
        "num_ids": 48
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for i in nums:\n        if i < 0:\n            total += i\n    return total\n    \n",
        "num_ids": 33
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            total += nums[i]\n    return total\n",
        "num_ids": 44
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(2*n + 1))/2\n",
        "num_ids": 17
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return hex_num(n)\n",
        "num_ids": 11
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int((2*n**2 - n) / 2)\n    \n    \ndef test_hexagonal_num():\n    assert hexagonal_num(1) == 0\n    assert hexagonal_num(2) == 1\n    assert hexagonal_num(3) == 4\n    assert hexagonal_num(4) == 6\n    assert hexagonal_num(5) == 10\n    assert hexagonal_num(6) == 15\n    assert hexagonal_num(7) == 22\n    assert hexagonal_num(8) == 30\n    assert hexagonal_num(9) == 36\n    assert hexagonal_num(10) == 42\n    assert hexagonal_num(11) == 48\n    assert hexagonal_num(12) == 54\n    assert hexagonal_num(13) == 60\n    assert hexagonal_num(14) == 66\n    assert hexagonal_num(15) == 72\n    assert hexagonal_num(16) == 78\n    assert hexagonal_num(17) == 84\n    assert hexagonal_num(18) == 90\n    assert hexagonal_num(19) == 96\n    assert hexagonal_num(20) == 102\n    assert hexagonal_num(21) == 108\n    assert hexagonal_num(22) == 114\n    assert hexagonal_num(23) == 120\n    assert hexagonal_num(24) == 126\n    assert hexagonal_num(25) == 132\n    assert hexagonal_num(26) == 138\n    assert hexagonal_num(27) == 144\n    assert hexagonal_num(28) == 150\n    assert hexagonal_num(29) == 156\n    assert hexagonal_num(30) == 162\n    assert hexagonal_num(31) == 168\n    assert hexagonal_num(32) == 174\n    assert hexagonal_num(33) == 180\n    assert hexagonal_num(34) == 186\n    assert hexagonal_num(35) == 192\n    assert hexagonal_num(36) == 198\n    assert hexagonal_num(37) == 204\n    assert hexagonal_num(38) == 210\n    assert hexagonal_num(39) == 216\n    assert hexagonal_num(40) == 222\n    assert hexagonal_num(41) == 228\n    assert hexagonal_num(42) == 234\n    assert hexagonal_num(43) == 240\n    assert hexagonal_num(44) == 246\n    assert hexagonal_num(45) == 252\n    assert hexagonal_num(46) == 258\n    assert hexagonal_num(47) == 264\n    assert hexagonal_num(48) == 270\n    assert hexagonal_num(49) == 276\n    assert hexagonal_num(50) == 282\n    assert hexagonal_num(51) == 288\n    assert hexagonal_num(52) == 294\n    assert hexagonal_num(53) == 300\n    assert hexagonal_num(54) == 306\n    assert hexagonal_num(55) == 312\n    assert hexagonal_num(56) == 318\n    assert hexagonal_num(57) == 324\n    assert hexagonal_num(58) == 330\n    assert hexagonal_num(59) == 336\n    assert hexagonal_num(60) == 342\n    assert hexagonal_num(61) == 348\n    assert hexagonal_num(62) == 354\n    assert hexagonal_num(63) == 360\n    assert hexagonal_num(64) == 366\n    assert hexagonal_num(65) == 372\n    assert hexagonal_num(66) == 378\n    assert hexagonal_num(67) == 384\n    assert hexagonal_num(68) == 390\n    assert hexagonal_num(69) == 396\n    assert hexagonal_num(70) == 402\n    assert hexagonal_num(71) == 408\n    assert hexagonal_num(72) == 414\n    assert hexagonal_num(73) == 420\n    assert hexagonal_num(74) == 426\n    assert hexagonal_num(75) == 432\n    assert hexagonal_num(76) == 438\n    assert hexagonal_num(77) == 444\n    assert hexagonal_num(78) == 450\n    assert hexagonal_num(79) == 456\n    assert hexagonal_num(80) == 462\n    assert hexagonal_num(81) == 468\n    assert hexagonal_num(82) == 474\n    assert hexagonal_num(83) == 480\n    assert hexagonal_num(84) == 486\n    assert hexagonal_num(85) == 492\n    assert hexagonal_num(86) == 498\n    assert hexagonal_num(87) == 504\n    assert hexagonal_num(88) == 510\n    assert hexagonal_num(89) == 516\n    assert hexagonal_num(90) == 522\n    assert hexagonal_num(91) == 528\n    assert hexagonal_num(92) == 534\n    assert hexagonal_num(93) == 540\n    assert hexagonal_num(94) == 546\n    assert hexagonal_num(95) == 552\n    assert hexagonal_num(96) == 558\n    assert hexagonal_num(97) == 564\n    assert hexagonal_num(98) == 570\n    assert hexagonal_num(99) == 576\n    assert hexagonal_num(100) == 582\n    assert hexagonal_num(101) == 588\n    assert hexagonal_num(102) == 594\n    assert hexagonal_num(103) == 600\n    assert hexagonal_num(104) == 606\n    assert hexagonal_num(105) == 612\n    assert hexagonal_num(106) == 618\n    assert hexagonal_num(107) == 624\n    assert hexagonal_num(108) == 630\n    assert hexagonal_num(109) == 636\n    assert hexagonal_num(110) == 642\n    assert hexagonal_num(111) == 648\n    assert hexagonal_num(112) == 654\n    assert hexagonal_num(113) == 660\n    assert hexagonal_num(114) == 666\n    assert hexagonal_num(115) == 672\n    assert hexagonal_num(116) == 678\n    assert hexagonal_num(117) == 684\n    assert hexagonal_num(118) == 690\n    assert hexagonal_num(119) == 696\n    assert hexagonal_num(120) == 702\n    assert hexagonal_num(121) == 708\n    assert hexagonal_num(122) == 714\n    assert hexagonal_num(123) == 720\n    assert hexagonal_num(124) == 726\n    assert hexagonal_num(125) == 732\n    assert hexagonal_num(126) == 738\n    assert hexagonal_num(127) == 744\n    assert hexagonal_num(128) == 750\n    assert hexagonal_num(129) == 756\n    assert hexagonal_num(130) == 762\n    assert hexagonal_num(131) == 768\n    assert hexagonal_num(132) == 774\n    assert hexagonal_num(133) == 780\n    assert hexagonal_num(134) == 786\n    assert hexagonal_num(135) == 792\n    assert hexagonal_num(136) == 798\n    assert hexagonal_num(137) == 804\n    assert hexagonal_num(138) == 810\n    assert hexagonal_num(139) == 816\n    assert hexagonal_num(140) == 822\n    assert hexagonal_num(141) == 828\n    assert hexagonal_num(142) == 834\n    assert hexagonal_num(143) == 840\n    assert hexagonal_num(144) == 846\n    assert hexagonal_num(145) == 852\n    assert hexagonal_num(146) == 858\n    assert hexagonal_num(147) == 864\n    assert hexagonal_num(148) == 870\n    assert hexagonal_num(149) == 876\n    assert hexagonal_num(150) == 882\n    assert hexagonal_num(151) == 888\n    assert hexagonal_num(152) == 894\n    assert hexagonal_num(153) == 900\n    assert hexagonal_num(154) == 906\n    assert hexagonal_num(155) == 912\n    assert hexagonal_num(156) == 918\n    assert hexagonal_num(157) == 924\n    assert hexagonal_num(158) == 930\n    assert hexagonal_num(159) == 936\n    assert hexagonal_num(160) == 942",
        "num_ids": 2017
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 0\n    n -= 1\n    while count < n:\n        count += 1\n        n -= 1\n        yield count * (2 * count + 1)\n",
        "num_ids": 42
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "num_ids": 14
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n*(2*n+1)/2)\n",
        "num_ids": 18
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "num_ids": 14
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n",
        "num_ids": 14
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n = n - 1\n    return n * (2 * n * n + n) // 2\n",
        "num_ids": 25
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n",
        "num_ids": 14
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeroes = 0\n    num_non_zeroes = 0\n    for number in nums:\n        if number == 0:\n            num_zeroes += 1\n        else:\n            num_non_zeroes += 1\n    return float(num_zeroes)/num_non_zeroes\n",
        "num_ids": 73
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count/len(nums)\n",
        "num_ids": 37
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    cnt = 0\n    for n in nums:\n        if n == 0:\n            cnt += 1\n    return cnt / len(nums)\ndef anagram(s1, s2):\n    '''\n    Given two strings s1 and s2, write a function to decide if s2 is a permutation of s1.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    s1_arr = array('c')\n    s2_arr = array('c')\n    for c in s1:\n        s1_arr.append(c)\n    for c in s2:\n        s2_arr.append(c)\n    s1_arr.sort()\n    s2_arr.sort()\n    return s1_arr == s2_arr\ndef add_string(num1, num2):\n    '''\n    You are given two numbers represented as strings, num1 and num2.\n",
        "num_ids": 19
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zero = 0\n    for n in nums:\n        if n == 0:\n            num_zero += 1\n    return float(num_zero) / len(nums)\n",
        "num_ids": 46
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return zeroes/non_zeroes\n",
        "num_ids": 46
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_non_zero = 0\n    count_zero = 0\n    for i in nums:\n        if i == 0:\n            count_zero += 1\n        else:\n            count_non_zero += 1\n    return float(count_zero)/float(count_non_zero)\ndef frequency_array(nums):\n    '''\n    Write a function that takes a non-empty array of integers and returns a new array of the same length that \n    sums the values in the original array. The values of the new array should be the number of times each \n    integer in the input array appears in the original array. For example, the array [5, 8, 11, 8] should \n    output [3, 2, 1, 2].\n    '''\n    freqs = [0 for i in range(max(nums) + 1)]\n    for i in nums:\n        freqs[i] += 1\n    return array('i', freqs)\ndef get_palindromes(str):\n    '''\n    Write a function that accepts a string and returns a list of all the palindromes in it.\n    '''\n    char_list = []\n    for i in str:\n        char_list.append(i)\n    char_list.sort()\n    str = ''\n    for i in char_list:\n        str += i\n    palindromes = []\n    for i in range(len(str)):\n        if str[i] == str[len(str)-1-i]:\n            palindromes.append(str[i:len(str)-1-i])\n    return palindromes\ndef sort_buble(nums):\n    '''\n    Write a function that sorts the numbers in an array in ascending order using bubble sort.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums)-1):\n            if nums[j] > nums[j+1]:\n                nums[j],nums[j+1] = nums[j+1],nums[j]\n    return nums\ndef merge_sort(nums):\n    '''\n    Write a function that accepts an array of integers and returns a new array that is sorted in ascending order.\n    '''\n    if len(nums) <= 1:\n        return nums\n    middle = int(len(nums)/2)\n    left = merge_sort(nums[:middle])\n    right = merge_sort(nums[middle:])\n    new_arr = []\n    while len(left) > 0 and len(right) > 0:\n        if left[0] <= right[0]:\n            new_arr.append(left.pop(0))\n        else:\n            new_arr.append(right.pop(0))\n    new_arr += left\n    new_arr += right\n    return new_arr\ndef merge_sort_recursive(nums):\n    '''\n    Write a function that accepts an array of integers and returns a new array that is sorted in ascending order.\n    '''\n    if len(nums) <= 1:\n        return nums\n    middle = int(len(nums)/2)\n    left = merge_sort_recursive(nums[:middle])\n    right = merge_sort_recursive(nums[middle:])\n    new_arr = []\n    while len(left) > 0 and len(right) > 0:\n        if left[0] <= right[0]:\n            new_arr.append(left.pop(0))\n        else:\n            new_arr.append(right.pop(0))\n    new_arr += left\n    new_arr += right\n    return new_arr\ndef binary_search(nums, target):\n    '''\n    Write a function that accepts a sorted array of integers and a target value and returns the index of the target \n    value in the array. If the target value is not found in the array, the function should return -1.\n    '''\n    first = 0\n    last = len(nums) - 1\n    while first <= last:\n        mid = (first+last)/2\n        if nums[mid] == target:\n            return mid\n        elif target > nums[mid]:\n            first = mid + 1\n        else:\n            last = mid - 1\n    return -1\ndef binary_search_recursive(nums, target):\n    '''\n    Write a function that accepts a sorted array of integers and a target value and returns the index of the target \n    value in the array. If the target value is not found in the array, the function should return -1.\n    '''\n    if len(nums) == 0:\n        return -1\n    first = 0\n    last = len(nums) - 1\n    mid = (first + last)/2\n    if nums[mid] == target:\n        return mid\n    elif target > nums[mid]:\n        return binary_search_recursive(nums[mid+1:], target)\n    else:\n        return binary_search_recursive(nums[:mid], target)\ndef find_first_unique(nums):\n    '''\n    Write a function that accepts a sorted array of integers and returns the index of the first unique integer in \n    the array. If there is no unique integer, the function should return -1.\n    '''\n    if len(nums) == 0:\n        return -1\n    first = 0\n    last = len(nums) - 1\n    while first <= last:\n        mid = (first+last)/2\n        if nums[mid] == nums[mid-1]:\n            first = mid + 1\n        else:\n            return mid\n    return -1\ndef count_val(nums, target):\n    '''\n    Write a function that accepts a sorted array of integers and a target value and returns the number of occurrences \n    of the target value in the array.\n    '''\n    first = 0\n    last = len(nums) - 1\n    count = 0\n    while first <= last:\n        mid = (first + last)/2\n        if nums[mid] == target:\n            count += 1\n            last = mid - 1\n        elif target > nums[mid]:\n            first = mid + 1\n        else:\n            last = mid - 1\n    return count\ndef count_val_recursive(nums, target):\n    '''\n    Write a function that accepts a sorted array of integers and a target value and returns the number of occurrences \n    of the target value in the array.\n    '''\n    if len(nums) == 0:\n        return 0\n    first = 0\n    last = len(nums) - 1\n    mid = (first + last)/2\n    if nums[mid] == target:\n        return 1 + count_val_recursive(nums[mid+1:], target)\n    elif target > nums[mid]:\n        return count_val_recursive(nums[mid+1:], target)\n    else:\n        return count_val_recursive(nums[:mid], target)\ndef search(nums, target):\n    '''\n    Write a function that accepts a sorted array of integers and a target value and returns the index of the target \n    value in the array. If the target value is not found in the array, the function should return -1.\n    '''\n    first = 0\n    last = len(nums) - 1\n    while first <= last:\n        mid = (first + last)/2\n        if nums[mid] == target:\n            return mid\n        elif target > nums[mid]:\n            first = mid + 1\n        else:\n            last = mid - 1\n    return -1\ndef search_recursive(nums, target):\n    '''\n    Write a function that accepts a sorted array of integers and a target value and returns the index of the target \n    value in the array. If the target value is not found in the array, the function should return -1.\n    '''\n    if len(nums) == 0:\n        return -1\n    first = 0\n    last = len(nums) - 1\n    mid = (first + last)/2\n    if nums[mid] == target:\n        return mid\n    elif target > nums[mid]:\n        return search_recursive(nums[mid+1:], target)\n    else:\n        return search_recursive(nums[:mid], target)\nde",
        "num_ids": 109
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return float(count)/float(len(nums))\n",
        "num_ids": 41
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeros = 0\n    num_non_zeros = 0\n    for num in nums:\n        if num == 0:\n            num_zeros += 1\n        else:\n            num_non_zeros += 1\n    return num_zeros / num_non_zeros\n",
        "num_ids": 71
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    \n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / (len(nums) + 0.0)\n",
        "num_ids": 45
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            count += 1\n    return zeros/count\n",
        "num_ids": 50
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    flag = False\n    if n == 0:\n        return True\n    while n > 0:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            if flag:\n                return False\n            n -= 1\n            flag = True\n    return True\n",
        "num_ids": 67
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    \n    while n > 0:\n        if n & 1 == 1:\n            return False\n        n = n >> 1\n    \n    return True\n",
        "num_ids": 61
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    for i in range(2,int(math.ceil(math.log(n,2)))+1):\n        if 2**(i-1) <= n and n < 2**i:\n            return True\n    return False\n",
        "num_ids": 56
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Your code here\n    count = 0\n    if n == 0:\n        return True\n    else:\n        while n!= 0:\n            if n % 2 == 0:\n                n /= 2\n                count += 1\n            else:\n                break\n    if count == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 82
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 1: \n        return False\n    else: \n        if n == 2: \n            return True\n        else: \n            while n > 2: \n                if n % 2 == 0: \n                    n /= 2\n                else: \n                    return False\n            return True\n",
        "num_ids": 73
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    log = math.log(n,2)\n    if log % 1 == 0:\n        return 1\n    else:\n        return 0\n        \ndef is_Power_Of_Two(n):\n    '''\n    Write a python function to check whether the given number is a power of 2 or not.\n    '''\n    if (n & (n-1)) == 0:\n        return 1\n    else:\n        return 0\n",
        "num_ids": 28
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def is_Power_Of_Two(n):\n        return (n & (n - 1) == 0)\n    def powers_of_two(n):\n        '''\n        Return list of powers of two from n-1 to 0\n        '''\n        return [2**i for i in xrange(n)]\n    def sum_of_powers(n):\n        '''\n        Return sum of all powers of two less than n\n        '''\n        return sum(powers_of_two(n - 1))\n    def is_sum_of_powers_of_two(n):\n        return (n >= sum_of_powers(n))\n    if (n == 0):\n        return True\n    if (n < 0):\n        return False\n    powers = powers_of_two(n)\n    return (is_sum_of_powers_of_two(n) and is_Power_Of_Two(powers[-1]) and is_Power_Of_Two(n - powers[-1]))\n",
        "num_ids": 133
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0:\n        return True\n    else:\n        while n%2==0:\n            n=n/2\n        if n%2!=0:\n            return False\n        else:\n            return is_Sum_Of_Powers_Of_Two(n-1)\n",
        "num_ids": 71
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return n and (n & (n - 1) == 0)\n",
        "num_ids": 18
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    #Base Case: 0 or negative number\n    if n <= 0:\n        return False\n    #Recursive Case: Return False if any of the base cases is True\n    if n==1 or n ==2:\n        return True\n    if n%2==0:\n        return is_Sum_Of_Powers_Of_Two(n/2)\n    return is_Sum_Of_Powers_Of_Two(n-1)\n",
        "num_ids": 104
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14\n    circumference = pi * (2 * r)\n    return circumference\n",
        "num_ids": 26
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # Your Code Here\n    return 2 * math.pi * r\n",
        "num_ids": 18
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    \n    return pi * 2 * r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n",
        "num_ids": 16
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n",
        "num_ids": 12
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n",
        "num_ids": 20
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [x for y in test_list for x in y]\n    ",
        "num_ids": 19
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [value for sublist in test_list for value in sublist]\n",
        "num_ids": 20
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    print(sum(test_list))\n",
        "num_ids": 14
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    def flatten(x,xs):\n        '''\n        flatten xs into a single list\n        '''\n        if xs == []:\n            return [x]\n        else:\n            return flatten(x,xs[0]) + flatten(x+xs[1:])\n    #\n    return flatten(0,test_list)\n",
        "num_ids": 58
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [element for sublist in test_list for element in sublist]\n",
        "num_ids": 20
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return set(reduce(lambda x, y: x+y, test_list))\n",
        "num_ids": 23
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if type(item) == type([]):\n            result.extend(item)\n        else:\n            result.append(item)\n    return result\n",
        "num_ids": 53
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    output_list = []\n    for sublist in test_list:\n        for item in sublist:\n            output_list.append(item)\n",
        "num_ids": 37
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    new_list = []\n    for list in test_list:\n        for element in list:\n            new_list.append(element)\n    return new_list\n",
        "num_ids": 41
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n, 1, -1):\n        pos = bin_search(nums, i)\n        if pos!= 0:\n            reverse(nums, pos)\n            reverse(nums, 0)\n    return nums\n",
        "num_ids": 69
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Edge Case\n    if nums == []:\n        return []\n    # Reset\n    nums = nums[::-1]\n    for i in xrange(len(nums)):\n        j = i\n        while j > 0 and nums[j] < nums[j-1]:\n            nums[j], nums[j-1] = nums[j-1], nums[j]\n            j -= 1\n    return nums[::-1]\n    \nassert pancake_sort([]) == []\nassert pancake_sort([1,3,4,5,2]) == [5,2,4,1,3]\nassert pancake_sort([1,2,4,5,6]) == [6,5,4,2,1]\nassert pancake_sort([1,4,5,2,3]) == [3,2,4,1,5]",
        "num_ids": 214
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def pancakesort(nums):\n        left, right = 0, len(nums) - 1\n        while left < right:\n            for i in range(right, left, -1):\n                if nums[i] < nums[i - 1]:\n                    nums[i], nums[i - 1] = nums[i - 1], nums[i]\n                    left += 1\n                    right -= 1\n            for i in range(left, right):\n                if nums[i] > nums[i + 1]:\n                    nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                    left += 1\n                    right -= 1\n        return nums\n",
        "num_ids": 169
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def find_max(nums):\n        '''\n        Return the index of the max element in a list\n        '''\n        max_index = 0\n        for i in range(1, len(nums)):\n            if nums[max_index] < nums[i]:\n                max_index = i\n        return max_index\n",
        "num_ids": 53
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(start, end):\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n    \n    def sort(start, end):\n        if start >= end:\n            return\n        # use end as pivot\n        pivot = end\n        # todo: note the problem that the last element is the largest\n        # and it has been sorted, so we do not need to worry about it\n        # this is actually a quick sort\n        i, j = start, start\n        while j < pivot:\n            if nums[j] > nums[pivot]:\n                nums[i], nums[j] = nums[j], nums[i]\n                i += 1\n            j += 1\n        # swap pivot to the middle\n        nums[i], nums[pivot] = nums[pivot], nums[i]\n        # sort the left part\n        sort(start, i-1)\n        # sort the right part\n        sort(i+1, end)\n        # flip the array\n        flip(start, end)\n    sort(0, len(nums)-1)\n    return nums\n",
        "num_ids": 292
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for x in range(len(nums), 1, -1):\n        for y in range(len(nums) - 1, 0, -1):\n            if nums[y] < nums[y - 1]:\n                nums[y], nums[y - 1] = nums[y - 1], nums[y]\n        print nums\n",
        "num_ids": 87
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        if nums[i] == i + 1:\n            continue\n        smallest = min(i + 1, len(nums) - (i + 1))\n        if nums[smallest - 1] > nums[i]:\n            if i + 1 == smallest:\n                continue\n            elif smallest == len(nums) - i:\n                temp = nums[i]\n                nums[i] = nums[smallest - 1]\n                nums[smallest - 1] = temp\n                continue\n            else:\n                temp = nums[i]\n                nums[i] = nums[smallest - 1]\n                nums[smallest - 1] = temp\n                nums[i + 1:] = reversed(nums[i + 1:])\n                continue\n        else:\n            temp = nums[i]\n            nums[i] = nums[smallest - 1]\n            nums[smallest - 1] = temp\n            nums[i + 1:] = reversed(nums[i + 1:])\n            continue\n",
        "num_ids": 264
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums), 1, -1):\n        max_idx = 0\n        for j in range(1, i):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        if max_idx!= 0:\n            nums = pancake_sort_helper(nums, i, max_idx)\n            nums = pancake_sort_helper(nums, i, max_idx+1)\n    return nums\n",
        "num_ids": 127
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    size = len(nums)\n    \n    #find max and min element and corresponding index\n    max_num = nums[0]\n    min_num = nums[-1]\n    max_index = 0\n    min_index = size - 1\n    \n    for i in xrange(size - 1):\n        if nums[i] > max_num:\n            max_num = nums[i]\n            max_index = i\n        if nums[i] < min_num:\n            min_num = nums[i]\n            min_index = i\n    \n    #flip the array to the right and to the left to the maximum element\n    nums = flip_array(nums, max_index, size - 1)\n    nums = flip_array(nums, 0, max_index - 1)\n    nums = flip_array(nums, min_index, size - 1)\n    nums = flip_array(nums, 0, min_index - 1)\n    \n    #return sorted array\n    return nums\n    \ndef flip_array(arr, start, end):\n    '''\n    Flip the array to the right and to the left to the maximum element\n    '''\n    while start < end:\n        tmp = arr[start]\n        arr[start] = arr[end]\n        arr[end] = tmp\n        start += 1\n        end -= 1\n    return arr\n    \ndef insertion_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    size = len(nums)\n    \n    #find max and min element and corresponding index\n    max_num = nums[0]\n    min_num = nums[-1]\n    max_index = 0\n    min_index = size - 1\n    \n    for i in xrange(size - 1):\n        if nums[i] > max_num:\n            max_num = nums[i]\n            max_index = i\n        if nums[i] < min_num:\n            min_num = nums[i]\n            min_index = i\n    \n    #sort to the right and to the left of the max element\n    nums = flip_array(nums, max_index + 1, size - 1)\n    nums = flip_array(nums, 0, max_index - 1)\n    nums = flip_array(nums, min_index + 1, size - 1)\n    nums = flip_array(nums, 0, min_index - 1)\n    \n    #return sorted array\n    return nums\n",
        "num_ids": 253
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1, 0, -1):\n        max_index = i\n        max_val = nums[i]\n",
        "num_ids": 39
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for index in range(len(list1)):\n        if list1[index] == list2[index] and list2[index] == list3[index]:\n            count += 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    num = 0\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return 0\n    else:\n        for i in range(len(list1)):\n            if list1[i] == list2[i] and list1[i] == list3[i]:\n                num += 1\n        return num\n",
        "num_ids": 89
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    from collections import Counter\n    c1=Counter(list1)\n    c2=Counter(list2)\n    c3=Counter(list3)\n    return sum(v == 2 for v in c1.values())*sum(v == 2 for v in c2.values())*sum(v == 2 for v in c3.values())\n",
        "num_ids": 82
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    if (list1[0] == list2[0] and list2[1] == list3[1]):\n        count = count + 1\n    elif (list1[0] == list3[0] and list2[1] == list3[1]):\n        count = count + 1\n    elif (list1[1] == list2[0] and list2[1] == list3[1]):\n        count = count + 1\n    elif (list1[1] == list3[0] and list2[1] == list3[1]):\n        count = count + 1\n    return count\n    \n",
        "num_ids": 156
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    i = 0\n    while i < len(list1):\n        if list1[i] == list2[i]:\n            if list3[i] == list1[i]:\n                i += 1\n            else:\n                i += 2\n        else:\n            i += 1\n    return i\n",
        "num_ids": 72
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(0,len(list1)):\n        if list1[i]==list2[i]:\n            if list3[i]==list2[i]:\n                count=count+1\n    print count\n    \ndef bubblesort(list1):\n    '''\n    Write a function that takes a list of numbers and returns a list sorted in ascending order\n    '''\n    for i in range(0,len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i]>list1[j]:\n                list1[i],list1[j]=list1[j],list1[i]\n    print list1\n    \ndef string_compression(s):\n    '''\n    Write a function that takes a string and returns the compressed string.\n    The string will be composed of letters and numbers.\n    '''\n    if len(s)==0:\n        return s\n    else:\n        s1=''\n        count=1\n        for i in range(1,len(s)):\n            if s[i]==s[i-1]:\n                count=count+1\n            else:\n                if count==1:\n                    s1=s1+s[i-1]\n                else:\n                    s1=s1+str(count)+s[i-1]\n                count=1\n        if count==1:\n            s1=s1+s[i-1]\n        else:\n            s1=s1+str(count)+s[i-1]\n        if len(s1)>len(s):\n            s=s1\n        return s\n    \ndef knap_sack(W,W1,W2,W3,V1,V2,V3):\n    '''\n    Write a function that takes two positive integers representing the size of a backpack\n    and three arrays of positive integers representing the amount of each item that the \n    backpack can hold. Determine how many ways it can be filled using the items that are available.\n    '''\n    if W1+W2+W3==W:\n        return 1\n    elif W1+W2+W3<W:\n        return knap_sack(W,W1,W2,W3,V1,V2,V3)+knap_sack(W,W1,W2,W3+V1,V1,V2,V3)\n    else:\n        return knap_sack(W,W1,W2,W3,V1,V2,V3)+knap_sack(W,W1,W2+V1,W3,V1,V2,V3)\n        \ndef permutations(s):\n    '''\n    Write a function to return all the permutations of a given string\n    '''\n    permu=[]\n    perms(s,permu,0)\n    print permu\n    \ndef perms(s,permu,index):\n    '''\n    Write a function to return all the permutations of a given string\n    '''\n    if index==len(s):\n        permu.append(''.join(s))\n    else:\n        for i in range(index,len(s)):\n            s[index],s[i]=s[i],s[index]\n            perms(s,permu,index+1)\n            s[index],s[i]=s[i],s[index]\n    \ndef find_missing_num(list1):\n    '''\n    Write a function that returns the first missing positive number from a list of \n    numbers.\n    '''\n    for i in range(1,len(list1)):\n        if list1[i]!=i+1:\n            return i+1\n    return len(list1)+1\n    \ndef find_missing_num_pairs(list1,list2):\n    '''\n    Write a function that returns the first missing positive number from a list of \n    numbers that pairs.\n    '''\n    for i in range(0,len(list1)):\n        if list1[i]!=list2[i]:\n            return list1[i]\n    return len(list1)+1\n    \ndef reverse_words(s):\n    '''\n    Write a function to reverse all the words in a string\n    '''\n    s2=s.split()\n    s3=''\n    for i in range(0,len(s2)):\n        s3=s3+s2[len(s2)-i-1]+' '\n    return s3[:-1]\n    \ndef anagrams(s):\n    '''\n    Write a function that returns a list of all the anagrams of a string\n    '''\n    s2=s.replace(' ','').lower()\n    s3=[]\n    for i in range(0,len(s2)):\n        s3.append(s2[i:len(s2)]+s2[0:i])\n    s3=list(set(s3))\n    return s3\n    \ndef is_palindrome(s):\n    '''\n    Write a function that returns True if a string is a palindrome\n    '''\n    s2=s.replace(' ','').lower()\n    if s2==s2[::-1]:\n        return True\n    else:\n        return False\n    \ndef is_palindrome_pairs(s):\n    '''\n    Write a function that returns True if a string is a palindrome pairs\n    '''\n    s2=s.replace(' ','').lower()\n    for i in range(0,len(s2)):\n        if s2[i]!=s2[len(s2)-i-1]:\n            return False\n    return True\n    \ndef longest_palindrome(s):\n    '''\n    Write a function that returns the longest palindrome from a given string\n    '''\n    s2=s.replace(' ','').lower()\n    ans=''\n    for i in range(0,len(s2)):\n        for j in range(i+1,len(s2)+1):\n            if s2[i:j]==s2[i:j][::-1]:\n                if len(s2[i:j])>len(ans):\n                    ans=s2[i:j]\n    return ans\n    \ndef longest_palindrome_pairs(s):\n    '''\n    Write a function that returns the longest palindrome pairs from a given string\n    '''\n    s2=s.replace(' ','').lower()\n    ans=[]\n    for i in range(0,len(s2)):\n        for j in range(i+1,len(s2)+1):\n            if s2[i:j]==s2[i:j][::-1]:\n                if len(s2[i:j])>len(ans):\n                    ans.append(s2[i:j])\n    return ans\n    \ndef is_pandigital(s):\n    '''\n    Write a function that returns True if a string is pandigital\n    '''\n    s2=s.replace(' ','').lower()\n    s3=[]\n    for i in range(1,10):\n        s3.append(str(i))\n    for i in range(0,len(s2)):\n        if s2[i] not in s3:\n            return False\n        if s2[i] in s3:\n            s3.remove(s2[i])\n    if len(s3)>0:\n        return False\n    return True\n    \ndef remove_duplicates(list1):\n    '''\n    Write a function that removes duplicates from a given list\n    '''\n    s3=[]\n    for i in range(0,len(list1)):\n        if list1[i] not in s3:\n            s3.append(list1[i])\n    return s3\n    \ndef max_of_three(a,b,c):\n    '''\n    Write a function that returns the maximum value of three numbers\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\n    \ndef sort_matrix(mat)",
        "num_ids": 51
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    samepair = 0\n    for i in xrange(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            samepair += 1\n    return samepair\n",
        "num_ids": 59
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    dic = {}\n    for i in range(len(list1)):\n        if list1[i] in dic:\n            dic[list1[i]] += 1\n        else:\n            dic[list1[i]] = 1\n    for j in range(len(list2)):\n        if list2[j] in dic:\n            dic[list2[j]] += 1\n        else:\n            dic[list2[j]] = 1\n    for k in range(len(list3)):\n        if list3[k] in dic:\n            dic[list3[k]] += 1\n        else:\n            dic[list3[k]] = 1\n    count = 0\n    for v in dic.values():\n        if v == 2:\n            count += 1\n    return count\n",
        "num_ids": 198
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count = count + 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    num = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            num += 1\n    return num\n",
        "num_ids": 49
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == type((1,2,3)):\n            count+=1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(list(filter(lambda x: isinstance(x,list), Input)))\n",
        "num_ids": 23
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    result = 0\n    if Input == ():\n        return result\n",
        "num_ids": 18
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    return tuple(list(Input))\n",
        "num_ids": 13
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(Input) - Input.count(())\n",
        "num_ids": 15
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # Code here\n    count = 0\n    if len(Input) == 0:\n        return 0\n    elif len(Input) == 1:\n        if type(Input[0]) == list:\n            return 1\n        else:\n            return 0\n    else:\n        for i in Input:\n            if type(i) == list:\n                count += 1\n    return count\n",
        "num_ids": 91
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    l = list(Input)\n    l.sort()\n    return l.count(l[0])\n",
        "num_ids": 27
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(Input) - Input.count(())\n",
        "num_ids": 15
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if isinstance(Input, tuple):\n        return len(Input) - Input.count(())\n    else:\n        return 'invalid type'\n",
        "num_ids": 37
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(Input)-1\n",
        "num_ids": 10
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    abs_diff = -sys.maxint - 1\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            abs_diff = max(abs_diff, abs(arr[i] - arr[j]))\n    return abs_diff \n",
        "num_ids": 76
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    n = len(arr)\n    return max(arr[n-1] - arr[0], arr[n-1] - arr[1], arr[n-2] - arr[0])\n",
        "num_ids": 54
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0 \n    for i in range(len(arr)-1): \n        for j in range(i+1,len(arr)): \n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff: \n                max_diff = diff \n    return max_diff \n",
        "num_ids": 81
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    max_diff = -1\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(arr[i]-arr[j]) > max_diff:\n                max_diff = abs(arr[i]-arr[j])\n    return max_diff\n",
        "num_ids": 80
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(abs(arr[i] - arr[i-1]) for i in range(1, len(arr)))\n",
        "num_ids": 31
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1]-arr[0]\n    for i in range(len(arr)-1):\n        curr_diff = arr[i+1]-arr[i]\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n    return max_diff\n",
        "num_ids": 74
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    diff = arr[1] - arr[0]\n    for i in range(len(arr)-1):\n        temp = abs(arr[i+1] - arr[i])\n        if temp > diff:\n            diff = temp\n    return diff\n",
        "num_ids": 67
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return abs(arr[-1]-arr[0])\n",
        "num_ids": 22
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    min_elem = arr[0]\n    max_elem = arr[0]\n    diff = 0\n    for i in range(1, len(arr)):\n        if arr[i]>max_elem:\n            max_elem = arr[i]\n        elif arr[i]<min_elem:\n            min_elem = arr[i]\n    return (max_elem-min_elem)\n",
        "num_ids": 106
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # local max and min\n    max_val = float('-inf')\n    min_val = float('inf')\n    for num in arr:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n",
        "num_ids": 69
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n // a + 1):\n        y = n - x * a\n        if y % b == 0:\n            return x, y // b\n    return None\n",
        "num_ids": 45
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    def get_solution(a, b, n):\n        if n == 0:\n            return (0, 0)\n        elif n % a == 0:\n            return (n // a, 0)\n        else:\n            div, mod = divmod(n, a)\n            return (div, a - mod)\n    x, y = get_solution(a, b, n)\n    if x == 0 or y == 0:\n        return None\n    return (x, y)\n",
        "num_ids": 118
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return (0, -1 * b) if b!= 0 else None\n    else:\n        return ((n - b * a) / a, -1 * a) if a * n - b * a!= 0 else None\n",
        "num_ids": 62
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = n - b\n    if x % a == 0:\n        return (x // a, b)\n    else:\n        return None\n",
        "num_ids": 36
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return 0, 1\n    if a == 0:\n        return None\n    if n % a!= 0:\n        return None\n    c = n / a\n    d = b - c * a\n    return int(c), int(d)\n",
        "num_ids": 67
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    soln = find_solution_naive(a, b, n)\n    if soln is None:\n        return None\n    return (soln[0] - soln[1]) % n\n",
        "num_ids": 50
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return (b, -1 * b)\n",
        "num_ids": 20
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # We can solve this using the Euclid's Algorithm, or the Extended Euclid's Algorithm.\n    # To find the gcd(a, b) of two numbers, we can use the Euclid's Algorithm to find the gcd(a, b) of a and b, or the Extended Euclid's Algorithm to find the gcd(a, b) of a and b\n    # We will assume that the gcd of a and b is the same for each possible solution, so we only need to find one\n    # First, find the gcd(a, b)\n    # If n % a!= 0, then a cannot be a solution\n    # If n % b!= 0, then b cannot be a solution\n    # If n == a * b, then there is no solution\n    # If n < a * b, then a cannot be a solution\n    # If n < a * b, then b cannot be a solution\n    # If n % a == 0 and n % b == 0, then a and b are solutions\n    # If n % a == 0 and n % b!= 0, then a cannot be a solution\n    # If n % a!= 0 and n % b == 0, then b cannot be a solution\n    # If n % a!= 0 and n % b!= 0, then neither a nor b can be a solution\n",
        "num_ids": 308
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n < a*b:\n        return None\n    if n % a == 0:\n        return (n / a, 0)\n    else:\n        x = (n - b) / a\n        return (x, a)\n",
        "num_ids": 57
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        for y in range(n+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None\n",
        "num_ids": 49
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    for item in list1:\n        if item not in list2:\n            result.append(item)\n    return result\n    \ndef return_unique_elements(list1, list2):\n    '''\n    Write a function to return all elements that occur in two lists, but not in both.\n    '''\n    return remove_elements(list1, list2) + remove_elements(list2, list1)\n    \ndef remove_duplicate_strings(list1):\n    '''\n    Write a function to remove duplicates from a given list.\n    '''\n    seen = []\n    result = []\n    for item in list1:\n        if item not in seen:\n            result.append(item)\n            seen.append(item)\n    return result\n    \ndef return_unique_strings(list1):\n    '''\n    Write a function to return all unique strings from a given list.\n    '''\n    seen = []\n    for item in list1:\n        if item not in seen:\n            seen.append(item)\n    return seen\n    \ndef odd_to_even(list1):\n    '''\n    Write a function to rearrange the odd numbers in a given list to the even numbers.\n    '''\n    result = []\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            result.append(list1[i])\n    for j in range(len(list1)):\n        if j % 2!= 0:\n            result.append(list1[j])\n    return result\n    \ndef even_to_odd(list1):\n    '''\n    Write a function to rearrange the even numbers in a given list to the odd numbers.\n    '''\n    result = []\n    for i in range(len(list1)):\n        if i % 2!= 0:\n            result.append(list1[i])\n    for j in range(len(list1)):\n        if j % 2 == 0:\n            result.append(list1[j])\n    return result\n    \ndef sum_of_squares(list1):\n    '''\n    Write a function to return the sum of the squares of a given list.\n    '''\n    result = 0\n    for item in list1:\n        result += item ** 2\n    return result\n    \ndef sum_of_odd_squares(list1):\n    '''\n    Write a function to return the sum of the squares of all the odd numbers in a given list.\n    '''\n    result = 0\n    for item in list1:\n        if item % 2 == 1:\n            result += item ** 2\n    return result\n    \ndef sum_of_even_squares(list1):\n    '''\n    Write a function to return the sum of the squares of all the even numbers in a given list.\n    '''\n    result = 0\n    for item in list1:\n        if item % 2 == 0:\n            result += item ** 2\n    return result\n    \ndef sum_of_odd_squares_below_n(list1, n):\n    '''\n    Write a function to return the sum of the squares of all the odd numbers below a given number n.\n    '''\n    result = 0\n    for item in list1:\n        if item < n:\n            if item % 2 == 1:\n                result += item ** 2\n    return result\n    \ndef sum_of_even_squares_below_n(list1, n):\n    '''\n    Write a function to return the sum of the squares of all the even numbers below a given number n.\n    '''\n    result = 0\n    for item in list1:\n        if item < n:\n            if item % 2 == 0:\n                result += item ** 2\n    return result\n    \ndef sum_of_perfect_squares(list1):\n    '''\n    Write a function to return the sum of the perfect squares in a given list.\n    '''\n    perfect_squares = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    result = 0\n    for item in list1:\n        if item in perfect_squares:\n            result += item\n    return result\n    \ndef sum_of_perfect_squares_below_n(list1, n):\n    '''\n    Write a function to return the sum of the perfect squares below a given number n.\n    '''\n    perfect_squares = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    result = 0\n    for item in list1:\n        if item < n:\n            if item in perfect_squares:\n                result += item\n    return result\n    \ndef sum_of_perfect_squares_and_perfect_squares(list1):\n    '''\n    Write a function to return the sum of the perfect squares and perfect squares in a given list.\n    '''\n    perfect_squares = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    result = 0\n    for item in list1:\n        if item in perfect_squares:\n            result += item\n    for item in perfect_squares:\n        if item in list1:\n            result += item\n    return result\n    \ndef sum_of_perfect_squares_below_n_and_perfect_squares_below_n(list1, n):\n    '''\n    Write a function to return the sum of the perfect squares and perfect squares below a given number n.\n    '''\n    perfect_squares = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    result = 0\n    for item in list1:\n        if item in perfect_squares:\n            result += item\n    for item in perfect_squares:\n        if item < n:\n            if item in list1:\n                result += item\n    return result\n    \ndef find_anagrams(list1, word):\n    '''\n    Write a function to find all the anagrams of a given word in a given list.\n    '''\n    result = []\n    for item in list1:\n        if sorted(item) == sorted(word):\n            result.append(item)\n    return result\n    \ndef find_anagrams_with_o(list1, word):\n    '''\n    Write a function to find all the anagrams of a given word in a given list, with 'o' in the word.\n    '''\n    result = []\n    for item in list1:\n        if sorted(item) == sorted(word) and 'o' in item:\n            result.append(item)\n    return result\n    \ndef find_anagrams_with_y(list1, word):\n    '''\n    Write a function to find all the anagrams of a given word in a given list, with 'y' in the word.\n    '''\n    result = []\n    for item in list1:\n        if sorted(item) == sorted(word) and 'y' in item:\n            result.append(item)\n    return result\n    \ndef find_anagrams_with_y_and_o(list1, word):\n    '''\n    Write a function to find all the anagrams of a given word in a given list, with 'y' and 'o' in the word.\n    '''\n    result = []\n    for item in list1:\n        if sorted(item) == sorted(word) and 'y' in item and 'o' in item:\n            result.append(item)\n    return result\n    \ndef find_anagrams_with_y_and_o_and_i(list1, word):\n    '''\n    Write a function to find all the anagrams of a given word in a given list, with 'y' and 'o' and 'i' in the word.\n    '''\n    result = []\n    for item in list1:\n        if sorted(item) == sorted(word) and 'y' in item and 'o' in item and 'i' in item:\n            result.append(item)\n    return result\n    \ndef find_anagrams_with_o_and_i(list1, word):\n    '''\n    Write a function to find all the anagrams of a given word in a given list, with 'o' and 'i' in the word.\n    '''\n    result = []\n    for item in list1:\n        if sorted(item) =",
        "num_ids": 22
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [i for i in list1 if i not in list2]\n",
        "num_ids": 19
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        list1.remove(element)\n",
        "num_ids": 19
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for num in list1:\n        if num in list2:\n            list1.remove(num)\n    return list1\n",
        "num_ids": 32
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        list1.remove(i)\n    return list1\n",
        "num_ids": 24
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [element for element in list1 if element not in list2]\n",
        "num_ids": 19
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1\n",
        "num_ids": 32
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [list1[i] for i in range(len(list1)) if list1[i] not in list2]\n",
        "num_ids": 32
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list2)):\n        if list1.count(list2[i]) > 0:\n            list1.remove(list2[i])\n    return list1\n",
        "num_ids": 48
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1.remove(list2)\n    return list1\n    \nprint remove_elements([5, 2, 4, 4, 3, 1], [4, 4, 3, 3])",
        "num_ids": 46
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return n + sum_series(n - 2)\n",
        "num_ids": 41
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n - 2)\n",
        "num_ids": 30
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + sum(range(n-2))\n",
        "num_ids": 15
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return n / 2 + sum_series(n - 2)\n    else:\n        return n / 2 + sum_series(n - 2)\n",
        "num_ids": 45
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    nums = [0 for i in range(n//2 + 1)]\n    # print(nums)\n    for i in range(n//2 + 1):\n        # print(i)\n        nums[i] = i + (n-2*i)\n    return nums\n    \ndef fibonacci(n):\n    '''\n    Write a function to calculate the nth number in the fibonacci sequence, so for example the third number in the sequence is 3.\n    '''\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n",
        "num_ids": 35
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    #\n    # Solution 1: recursion (Accepted, TLE)\n    #\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return sum_series(n - 2) + sum_series(n - 1)\n",
        "num_ids": 65
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n",
        "num_ids": 30
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 2:\n        return n\n    return (n - 2)*sum_series(n-2) + n\n",
        "num_ids": 31
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n\n    return (n-1)*n/2\n",
        "num_ids": 48
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + sum(range(n//2))\n",
        "num_ids": 15
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if (s <= 0) or (l <= 0):\n        raise ValueError\n    area = (s * l ** 2) / (4 * tan(pi / s))\n    return area\n",
        "num_ids": 46
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    import math\n    def polygon_area(s, l):\n        area = (0.25 * s * l) / (tan(pi/s))\n        return area\n",
        "num_ids": 43
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if l > 0:\n        return (0.5 * s * l)\n    else:\n        return 'This polygon has no area'\n",
        "num_ids": 36
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.5*s*l*tan(pi/s))\n",
        "num_ids": 20
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.0\n    for i in range(1, l + 1):\n        area += 0.5 * s * l * tan(pi / l)\n    return area\n",
        "num_ids": 44
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # (s**2)*(1/4*l)*tan(pi/l)\n    area = (s**2)*(1/4*l)*tan(pi/l)\n    return area\n",
        "num_ids": 49
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.5 * s * l) / tan(pi/l)\n    \ndef polygon_circle_intersection(a, b, c, d):\n    '''\n    A regular polygon has n sides. Each side has length a. \n    The polygon may be obtuse which means that one of the sides is longer than the hypotenuse. \n    Given the lengths of the sides and the hypotenuse, write a function to find the coordinates of the intersection point of the polygon and the circle centered at the origin with radius c.\n    '''\n    if a >= b:\n        m = a\n        a = b\n        b = m\n        \n    if a >= c:\n        m = a\n        a = c\n        c = m\n        \n    if b >= c:\n        m = b\n        b = c\n        c = m\n        \n    if a**2 + b**2 == c**2:\n        x = (a**2 + b**2 - c**2) / (2*a*b)\n        y = (a**2 - b**2 + c**2) / (2*a*b)\n        return (x, y)\n    \n    if a**2 + c**2 == b**2:\n        x = (a**2 + c**2 - b**2) / (2*a*c)\n        y = (a**2 - c**2 + b**2) / (2*a*c)\n        return (x, y)\n    \n    if b**2 + c**2 == a**2:\n        x = (b**2 + c**2 - a**2) / (2*b*c)\n        y = (b**2 - c**2 + a**2) / (2*b*c)\n        return (x, y)\n    \n    if a**2 + b**2 == d**2:\n        x = (a**2 + b**2 - d**2) / (2*a*b)\n        y = (a**2 - b**2 + d**2) / (2*a*b)\n        return (x, y)\n    \n    if a**2 + d**2 == b**2:\n        x = (a**2 + d**2 - b**2) / (2*a*d)\n        y = (a**2 - d**2 + b**2) / (2*a*d)\n        return (x, y)\n    \n    if b**2 + d**2 == c**2:\n        x = (b**2 + d**2 - c**2) / (2*b*d)\n        y = (b**2 - d**2 + c**2) / (2*b*d)\n        return (x, y)\n    \n    return (False)\n",
        "num_ids": 530
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (1.0/2.0)*(s**2)*(tan(pi/l))\n",
        "num_ids": 26
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*l) / 2 * tan(pi / l)\n    return area\n",
        "num_ids": 24
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    from math import sqrt, pi\n    if l<=0 or type(l)!=int:\n        raise ValueError(\"invalid number of sides\")\n    if l==1:\n        return 0\n    else:\n        a=s*(l-1)/2\n        return (l**2-l)*a\n    return 0\n",
        "num_ids": 80
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    nums = []\n    for i in range(1, n+1):\n        if n%i == 0:\n            nums.append(i)\n    if sum(nums) == n:\n        return True\n    else:\n        return False\n",
        "num_ids": 62
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    #take the max of the two \n    m = max(n, math.floor(n/2))\n    #if it is divisible by any single number\n    #return False \n    if n == 0:\n        return False\n    for i in range(2, m):\n        if n%i == 0:\n            return False\n    return True\ndef is_prime(n):\n    if n==0 or n==1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0:\n            return False\n    return True\ndef is_prime_array(n):\n    for i in range(2, n):\n        if n%i == 0:\n            return False\n    return True\ndef nth_prime(n):\n    #create a list of the prime numbers in order\n    primes = [2]\n    while len(primes) < n:\n        if is_prime(primes[-1]+1):\n            primes.append(primes[-1]+1)\n    return primes[n-1]\ndef sum_of_primes(n):\n    if n < 2:\n        return 0\n    primes = [2]\n    #find the number of primes\n    while len(primes) < n:\n        if is_prime(primes[-1]+1):\n            primes.append(primes[-1]+1)\n    #return the sum of the primes\n    return sum(primes)\ndef is_palindrome(n):\n    #reverse the number \n    rn = 0 \n    while n > 0:\n        rn = rn*10 + n%10\n        n = n//10\n    #if they are the same\n    if rn == n:\n        return True\n    return False\ndef is_palindrome_array(n):\n    rn = 0 \n    while n > 0:\n        rn = rn*10 + n%10\n        n = n//10\n    return rn == n\ndef is_pandigital(n):\n    nstr = str(n)\n    #if the length is not 9 or if the numbers are not in order\n    if len(nstr)!= 9 or not is_number(nstr):\n        return False\n    #find all the digits in the string \n    digits = []\n    for i in range(10):\n        digits.append(str(i))\n    #check if each number is in the string \n    for d in digits:\n        if d not in nstr:\n            return False\n    return True\ndef is_number(n):\n    try:\n        int(n)\n        return True\n    except ValueError:\n        return False\ndef is_quadratic(n):\n    if n == 0 or n == 1:\n        return False\n    sqrt = math.sqrt(n)\n    #if the difference is less than 1\n    if abs(sqrt-int(sqrt)) < 1:\n        return True\n    return False\ndef is_quadratic_array(n):\n    if n == 0 or n == 1:\n        return False\n    sqrt = math.sqrt(n)\n    #if the difference is less than 1\n    if abs(sqrt-int(sqrt)) < 1:\n        return True\n    return False\ndef is_self_number(n):\n    #if the number is 1\n    if n == 1:\n        return True\n    #convert the number to string\n    ns = str(n)\n    #if the number is divisible by any single number\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0:\n            return False\n    return True\ndef is_self_number_array(n):\n    #if the number is 1\n    if n == 1:\n        return True\n    #convert the number to string\n    ns = str(n)\n    #if the number is divisible by any single number\n    for i in range(2, len(ns)):\n        if ns[i-1] > ns[i]:\n            return False\n    return True\ndef is_sosu(n):\n    if n == 1:\n        return False\n    #find the prime factors of n\n    factors = []\n    while n%2 == 0:\n        factors.append(2)\n        n = n/2\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        while n%i == 0:\n            factors.append(i)\n            n = n/i\n    #if the number is 1\n    if len(factors) == 0:\n        return True\n    return False\ndef is_sosu_array(n):\n    if n == 1:\n        return False\n    #find the prime factors of n\n    factors = []\n    while n%2 == 0:\n        factors.append(2)\n        n = n/2\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        while n%i == 0:\n            factors.append(i)\n            n = n/i\n    #if the number is 1\n    if len(factors) == 0:\n        return True\n    return False\ndef is_superprime(n):\n    if is_prime(n):\n        return True\n    if n < 100:\n        return False\n    #make the list of primes from 2 to the max\n    primes = [2]\n    while len(primes) < 100:\n        if is_prime(primes[-1]+1):\n            primes.append(primes[-1]+1)\n    #start the search\n    for p in primes:\n        if n%p == 0:\n            return False\n    return True\ndef is_superprime_array(n):\n    if is_prime_array(n):\n        return True\n    if n < 100:\n        return False\n    #make the list of primes from 2 to the max\n    primes = [2]\n    while len(primes) < 100:\n        if is_prime_array(primes[-1]+1):\n            primes.append(primes[-1]+1)\n    #start the search\n    for p in primes:\n        if n%p == 0:\n            return False\n    return True\ndef get_digit_sum(n):\n    digitsum = 0\n    #loop through each digit\n    while n > 0:\n        #add the digit to the sum\n        digitsum = digitsum + n%10\n        #divide the number by 10 \n        n = n//10\n    return digitsum\ndef get_digit_sum_array(n):\n    digitsum = 0\n    #loop through each digit\n    while n > 0:\n        #add the digit to the sum\n        digitsum = digitsum + n%10\n        #divide the number by 10 \n        n = n//10\n    return digitsum\ndef factorial(n):\n    if n == 1:\n        return 1\n    return n*factorial(n-1)\ndef factorial_array(n):\n    if n == 1:\n        return 1\n    return n*factorial_array(n-1)\ndef is_triangle(n):\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n    return is_triangle_array(n)\ndef is_triangle_array(n):\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n    #if the last two numbers are greater than the sum of the two other numbers\n    if n[-1] > n[-2] + n[-3]:\n        return False\n    return is_triangle_array(n[:-1])\ndef is_trinagle_array(n):\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n    #if the last two numbers are greater than the sum of the two other numbers\n    if n[-1] > n[-2] + n[-3]:\n        return False\n    return is_trinagle_array(n[:-1])\ndef is_hexagon(n):\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return False\n    return i",
        "num_ids": 2007
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n <= 0: \n        return False \n    divisors = [] \n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            divisors.append(i)\n            divisors.append(int(n / i))\n    divisors.sort()\n    for i in range(len(divisors) - 1): \n        if divisors[i] == divisors[i + 1]: \n            return True\n    return False\ndef sh(n): \n    '''\n    A perfect number is a positive integer that is equal to the sum of its proper positive divisors. \n    Write a function that takes a positive integer and returns true if the number is a perfect number, otherwise false.\n    '''\n    if n <= 0: \n        return False \n    divisors = [] \n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            divisors.append(i)\n            divisors.append(int(n / i))\n    divisors.sort()\n    return sum(divisors) == n\ndef palindrome_permutation(s): \n    '''\n    Write a function to check whether a string is a permutation of a palindrome. \n    A palindrome is a word or phrase that is the same forwards and backwards. \n    A permutation is a rearrangement of letters. The palindrome does not need to be limited to just dictionary words.\n    '''\n    if len(s) <= 1: \n        return True \n    odd = False \n    char_count = {} \n    for char in s: \n        if char in char_count: \n            char_count[char] += 1\n        else: \n            char_count[char] = 1\n    for char in char_count.keys(): \n        if char_count[char] % 2 == 1 and odd == False: \n            odd = True \n        elif char_count[char] % 2 == 1 and odd == True: \n            return False \n    return True \ndef print_hi(name): \n    '''\n    Hi, programmer. How are you?\n    '''\n    print('''Hi, programmer. How are you?''')\ndef generate_primes(n): \n    '''\n    Write a function to generate a list of prime numbers. \n    If the number is a perfect number, put it in the list.\n    '''\n    if n <= 1: \n        return []\n    if n == 2: \n        return [2]\n    if n == 3: \n        return [2, 3]\n    if n % 2 == 0: \n        return [2]\n    if n % 3 == 0: \n        return [3]\n    if n < 9: \n        return [2, 3, 5, 7]\n    elif n < 929: \n        return [2, 3, 5, 7, 11, 13]\n    i = 11\n    primes = [2, 3]\n    while True: \n        if i * i <= n: \n            if n % i == 0: \n                break\n            else: \n                i += 2\n        else: \n            break \n    for j in range(i + 2, n + 1, 2): \n        primes.append(j)\n    return primes\ndef f(x): \n    '''\n    Write a function to compute the f(x) of an exponential decay function. \n    The function is given by f(x) = a * b * x^(a-1)\n    '''\n    a = x \n    b = 1 \n    return a * b * x ** (a - 1)\ndef test_solve(): \n    assert div_sum(100) == False \n    assert div_sum(14) == True \n    assert div_sum(101) == False \n    assert div_sum(12345) == True \n    assert div_sum(12) == False \n    assert div_sum(123) == True \n    assert div_sum(2) == True \n    assert div_sum(4) == True \n    assert div_sum(6) == False \n    assert div_sum(7) == True \n    assert div_sum(9) == True \n    assert div_sum(11) == False \n    assert div_sum(13) == True \n    assert div_sum(17) == False \n    assert div_sum(19) == True \n    assert div_sum(23) == False \n    assert div_sum(25) == True \n    assert div_sum(27) == False \n    assert div_sum(29) == True \n    assert div_sum(31) == False \n    assert div_sum(35) == True \n    assert div_sum(37) == False \n    assert div_sum(41) == True \n    assert div_sum(43) == False \n    assert div_sum(45) == True \n    assert div_sum(47) == False \n    assert div_sum(49) == True \n    assert div_sum(53) == False \n    assert div_sum(55) == True \n    assert div_sum(57) == False \n    assert div_sum(59) == True \n    assert div_sum(61) == False \n    assert div_sum(65) == True \n    assert div_sum(67) == False \n    assert div_sum(69) == True \n    assert div_sum(71) == False \n    assert div_sum(73) == True \n    assert div_sum(75) == False \n    assert div_sum(77) == True \n    assert div_sum(79) == False \n    assert div_sum(81) == True \n    assert div_sum(83) == False \n    assert div_sum(85) == True \n    assert div_sum(87) == False \n    assert div_sum(89) == True \n    assert div_sum(97) == False \n    assert div_sum(99) == True \n    assert div_sum(101) == False \n    assert div_sum(103) == True \n    assert div_sum(105) == False \n    assert div_sum(107) == True \n    assert div_sum(109) == False \n    assert div_sum(113) == True \n    assert div_sum(115) == False \n    assert div_sum(117) == True \n    assert div_sum(119) == False \n    assert div_sum(123) == True \n    assert div_sum(125) == False \n    assert div_sum(127) == True \n    assert div_sum(129) == False \n    assert div_sum(131) == True \n    assert div_sum(133) == False \n    assert div_sum(135) == True \n    assert div_sum(137) == False \n    assert div_sum(139) == True \n    assert div_sum(141) == False \n    assert div_sum(143) == True \n    assert div_sum(145) == False \n    assert div_sum(147) == True \n    assert div_sum(149) == False \n    assert div_sum(151) == True \n    assert div_sum(153) == False \n    assert div_sum(155) == True \n    assert div_sum(157) == False \n    assert div_sum(159) == True \n    assert div_sum(161) == False \n    assert div_sum(163) == True \n    assert div_sum(165) == False \n    assert div_sum(167) == True \n    assert div_sum(169) == False \n    assert div_sum(171) == True \n    assert div_sum(173) == False \n    assert div_sum(175) == True \n    assert div_sum(177) == False \n    assert div_sum(179) == True \n    assert div_sum(181) == False \n    assert div_sum(183) == True \n    assert div_sum(185) == False \n    assert div_sum(187) == True \n    assert div_sum(189) == False \n    assert div_sum(191",
        "num_ids": 1124
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def sf(x):\n        if x <= 1: return 0\n        if x == 2: return 1\n        a = []\n        for i in range(1, int(math.sqrt(x))+1):\n            if x % i == 0: a.append(i)\n        # if len(a) == 2: return 1\n        return sum(a)\n",
        "num_ids": 89
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Initialize a list of the divisors of the two input numbers.\n    divisors = []\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            divisors.append(i)\n        i += 1\n    \n    # Add the sum of the divisors to each other.\n    div_sum = sum(divisors)\n    if div_sum == (n + div_sum):\n        return True\n    return False\n",
        "num_ids": 114
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Determine the number of divisors\n    nDiv = 0\n    # Calculate the sum of the divisors of n\n    sDiv = 0\n    for i in range(1, n):\n        if n % i == 0:\n            nDiv += 1\n            sDiv += i\n    # Return the result\n    return nDiv == sDiv\n",
        "num_ids": 85
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    divisors = {}\n    \n    divs = []\n    for x in range(1,n+1):\n        if n%x == 0:\n            divs.append(x)\n            divisors[x] = 0\n    \n    #print(divs)\n    #print(divisors)\n    \n    sum1 = 0\n    for x in divs:\n        sum1 += x\n    \n    #print(sum1)\n    \n    sum2 = 0\n    for x in divisors:\n        if sum1%x == 0:\n            if x!= 1:\n                sum2 += int(sum1/x)\n                #print(sum2)\n    #print(sum2)\n    \n    if sum2 == sum1:\n        return True\n    else:\n        return False\n        \ndef find_factors(n):\n    '''\n    Write a function to determine if the sum of the divisors of a positive integer is equal to the number itself.\n    '''\n    #print(math.sqrt(n))\n    \n    factor = 1\n    divisors = []\n    while factor <= math.sqrt(n):\n        if n%factor == 0:\n            if factor!= n/factor:\n                divisors.append(factor)\n                divisors.append(int(n/factor))\n        factor += 1\n    \n    #print(divisors)\n    \n    sum1 = 0\n    for x in divisors:\n        sum1 += x\n    \n    #print(sum1)\n    \n    if sum1 == n:\n        return True\n    else:\n        return False\n        \ndef sum_prod(n):\n    '''\n    Write a function to compute the sum of the the even Fibonacci numbers.\n    '''\n    \n    fib1 = 0\n    fib2 = 1\n    fib = 0\n    \n    sum1 = 0\n    while fib < n:\n        if fib%2 == 0:\n            sum1 += fib\n        fib = fib1 + fib2\n        fib1 = fib2\n        fib2 = fib\n    \n    return sum1\n        \ndef fizzbuzz(n):\n    '''\n    Write a function to return the numbers from 1 to N where N is a multiple of 3 and 5.\n    If the number is a multiple of 3, print \"Fizz\" instead of the number. If it is a multiple of 5, print \"Buzz\".\n    If the number is a multiple of both 3 and 5, print \"FizzBuzz\".\n    '''\n    \n    i = 1\n    while i <= n:\n        if i%3 == 0 and i%5 == 0:\n            print(\"FizzBuzz\")\n        elif i%3 == 0:\n            print(\"Fizz\")\n        elif i%5 == 0:\n            print(\"Buzz\")\n        else:\n            print(i)\n        i += 1\n",
        "num_ids": 87
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for x in range(1, int(math.sqrt(n))+1):\n        if n % x == 0:\n            divisors.append(x)\n            divisors.append(n/x)\n    sum1 = 0\n    for x in divisors:\n        sum1 += x\n    if sum1 == n:\n        return 1\n    else:\n        return 0\n",
        "num_ids": 102
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    x = math.sqrt(n)\n    if x == int(x): \n        return x, int(x)\n    for i in xrange(1, int(x)):\n        if n % i == 0: \n            t = n / i\n            if t == int(t): \n                return i, int(t)\n    return None, None\n",
        "num_ids": 89
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def div_sum(n): \n        res = 0\n        for i in range(1, n + 1): \n            if n % i == 0: \n                res += i\n        return res\n    m = div_sum(n)\n    m1 = div_sum(m)\n    return m == m1\n",
        "num_ids": 78
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    #Code here\n    \n    char_position = [0 for i in range(26)]\n    \n    for i in str1:\n        index = ord(i) - 97\n        char_position[index] += 1\n    \n    return char_position\n",
        "num_ids": 64
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # define a dictionary to record the position of each char\n    pos = {}\n    for c in 'abcdefghijklmnopqrstuvwxyz':\n        pos[c] = 0\n",
        "num_ids": 51
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # make lowercase\n    str1 = str1.lower()\n    # initialize values\n    count_1 = 0\n    count_2 = 0\n    count_3 = 0\n    count_4 = 0\n    count_5 = 0\n    count_6 = 0\n    count_7 = 0\n    count_8 = 0\n    count_9 = 0\n    count_10 = 0\n    count_11 = 0\n    count_12 = 0\n    count_13 = 0\n    count_14 = 0\n    count_15 = 0\n    count_16 = 0\n    count_17 = 0\n    count_18 = 0\n    count_19 = 0\n    count_20 = 0\n    count_21 = 0\n    count_22 = 0\n    count_23 = 0\n    count_24 = 0\n    count_25 = 0\n    count_26 = 0\n    count_27 = 0\n    count_28 = 0\n    count_29 = 0\n    count_30 = 0\n    count_31 = 0\n    count_32 = 0\n    count_33 = 0\n    count_34 = 0\n    count_35 = 0\n    count_36 = 0\n    count_37 = 0\n    count_38 = 0\n    count_39 = 0\n    count_40 = 0\n    count_41 = 0\n    count_42 = 0\n    count_43 = 0\n    count_44 = 0\n    count_45 = 0\n    count_46 = 0\n    count_47 = 0\n    count_48 = 0\n    count_49 = 0\n    count_50 = 0\n    count_51 = 0\n    count_52 = 0\n    count_53 = 0\n    count_54 = 0\n    count_55 = 0\n    count_56 = 0\n    count_57 = 0\n    count_58 = 0\n    count_59 = 0\n    count_60 = 0\n    count_61 = 0\n    count_62 = 0\n    count_63 = 0\n    count_64 = 0\n    count_65 = 0\n    count_66 = 0\n    count_67 = 0\n    count_68 = 0\n    count_69 = 0\n    count_70 = 0\n    count_71 = 0\n    count_72 = 0\n    count_73 = 0\n    count_74 = 0\n    count_75 = 0\n    count_76 = 0\n    count_77 = 0\n    count_78 = 0\n    count_79 = 0\n    count_80 = 0\n    count_81 = 0\n    count_82 = 0\n    count_83 = 0\n    count_84 = 0\n    count_85 = 0\n    count_86 = 0\n    count_87 = 0\n    count_88 = 0\n    count_89 = 0\n    count_90 = 0\n    count_91 = 0\n    count_92 = 0\n    count_93 = 0\n    count_94 = 0\n    count_95 = 0\n    count_96 = 0\n    count_97 = 0\n    count_98 = 0\n    count_99 = 0\n    count_100 = 0\n    count_101 = 0\n    count_102 = 0\n    count_103 = 0\n    count_104 = 0\n    count_105 = 0\n    count_106 = 0\n    count_107 = 0\n    count_108 = 0\n    count_109 = 0\n    count_110 = 0\n    count_111 = 0\n    count_112 = 0\n    count_113 = 0\n    count_114 = 0\n    count_115 = 0\n    count_116 = 0\n    count_117 = 0\n    count_118 = 0\n    count_119 = 0\n    count_120 = 0\n    count_121 = 0\n    count_122 = 0\n    count_123 = 0\n    count_124 = 0\n    count_125 = 0\n    count_126 = 0\n    count_127 = 0\n    count_128 = 0\n    count_129 = 0\n    count_130 = 0\n    count_131 = 0\n    count_132 = 0\n    count_133 = 0\n    count_134 = 0\n    count_135 = 0\n    count_136 = 0\n    count_137 = 0\n    count_138 = 0\n    count_139 = 0\n    count_140 = 0\n    count_141 = 0\n    count_142 = 0\n    count_143 = 0\n    count_144 = 0\n    count_145 = 0\n    count_146 = 0\n    count_147 = 0\n    count_148 = 0\n    count_149 = 0\n    count_150 = 0\n    count_151 = 0\n    count_152 = 0\n    count_153 = 0\n    count_154 = 0\n    count_155 = 0\n    count_156 = 0\n    count_157 = 0\n    count_158 = 0\n    count_159 = 0\n    count_160 = 0\n    count_161 = 0\n    count_162 = 0\n    count_163 = 0\n    count_164 = 0\n    count_165 = 0\n    count_166 = 0\n    count_167 = 0\n    count_168 = 0\n    count_169 = 0\n    count_170 = 0\n    count_171 = 0\n    count_172 = 0\n    count_173 = 0\n    count_174 = 0\n    count_175 = 0\n    count_176 = 0\n    count_177 = 0\n    count_178 = 0\n    count_179 = 0\n    count_180 = 0\n    count_181 = 0\n    count_182 = 0\n    count_183 = 0\n    count_184 = 0\n    count_185 = 0\n    count_186 = 0\n    count_187 = 0\n    count_188 = 0\n    count_189 = 0\n    count_190 = 0\n    count_191 = 0\n    count_192 = 0\n    count_193 = 0\n    count_194 = 0\n    count_195 = 0\n    count_196 = 0\n    count_197 = 0\n    count_198 = 0\n    count_199 = 0\n    count_200 = 0\n    count_201 = 0\n    count_202 = 0\n    count_203 = 0\n    count_204 = 0\n    count_205 = 0\n    count_206 = 0\n    count_207 = 0\n    count_208 = 0\n    count_209 = 0\n    count_210 = 0\n    count_211 = 0\n    count_212 = 0\n    count_213 = 0\n    count_214 = 0\n    count_215 = 0\n    count_216 = 0\n    count_217 = 0\n    count_218 = 0\n    count_219 = 0\n    count_220 = 0\n    count_221 = 0\n    count_222 = 0\n    count_223 = 0\n    count_224 = 0\n    count_225 = 0\n    count_226 = 0\n    count_227 = 0\n    count_228 = 0\n    count_229 = 0\n    count_230 = 0\n    count_231 = 0\n    count_232 = 0\n    count_233 = 0\n    count_234 = 0\n    count_235 = 0\n    count_236 = 0\n    count_237 = 0\n    count_238 = 0\n    count_239 = 0\n    count_240 = 0\n    count_241 = 0\n    count_242 = 0\n    count_243 = 0\n    count_244 = 0\n    count_245 = 0\n    count_246 = 0\n    count_247 = 0\n    count_248 = 0\n    count_249 = 0\n    count_250 = 0\n    count_251 = 0\n    count_252 = 0\n    count_253 = 0\n    count_254 = 0\n    count_255 = 0\n    count_256 = 0\n    count_257 = 0\n    count_258 = 0\n    count_259 = 0\n    count_260 = 0\n    count_261 = 0\n    count_262 = 0\n    count_263 = 0\n    count_264 = 0\n    count_265 = 0\n    count_266 = 0\n    count_267 = 0\n    count_268 = 0\n    count_269 = 0\n    count_270 = 0\n    count_271 = 0\n    count_272 = 0\n    count_273 = 0\n    count_274 = 0\n    count_275 = 0\n    count_276 = 0\n    count_277 = 0\n    count_278 = 0\n    count_279 = 0\n    count_280 = 0\n    count_281 = 0\n    count_282 = 0\n",
        "num_ids": 1997
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    dict_letters = {}\n    for i in range(0,len(str1)):\n        if str1[i].isalpha():\n            key = str1[i].lower()\n            if key not in dict_letters:\n                dict_letters[key] = []\n            dict_letters[key].append(i)\n    result = {}\n    for key in dict_letters.keys():\n        for val in dict_letters[key]:\n            if val not in result:\n                result[val] = 1\n            else:\n                result[val] += 1\n    return result\n",
        "num_ids": 137
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(0, len(str1)):\n        if ord(str1[i]) >= 97 and ord(str1[i]) <= 122:\n            count = count + 1\n    return count\n",
        "num_ids": 56
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    dic = {}\n    for c in str1:\n        if c.islower():\n            dic[c] = dic.get(c, 0) + 1\n    return dic\n",
        "num_ids": 48
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    #dictionary for the char position\n    dict_char_pos = {}\n    for char in str1:\n        if char in dict_char_pos:\n            dict_char_pos[char] += 1\n        else:\n            dict_char_pos[char] = 1\n    count = 0\n    for key in dict_char_pos:\n        if dict_char_pos[key] > 1:\n            count += dict_char_pos[key] - 1\n    return count\n",
        "num_ids": 115
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    unique_char_pos = []\n    for i in range(len(str1)):\n        if str1[i].lower() not in unique_char_pos:\n            unique_char_pos.append(str1[i].lower())\n    return len(unique_char_pos)\n",
        "num_ids": 70
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_dict = dict()\n    for i in range(0, 26):\n        char_dict[chr(i+97)] = 0\n",
        "num_ids": 36
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    l=len(str1)\n    count=0\n    for i in range(l):\n        c=str1[i]\n        for j in range(26):\n            if c.lower()==chr(ord('a')+j):\n                count+=1\n                break\n    return count\n",
        "num_ids": 73
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # first check that list is long enough\n    if len(A) < 2:\n        return 0\n",
        "num_ids": 26
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    bit = 0\n    for elem in A:\n        bit ^= elem\n    return bit & 1\n",
        "num_ids": 28
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    def xor_even(A): \n        '''\n        Returns the xor of all the even integers in A\n        '''\n        def xor_int(A, n): \n            '''\n            Returns the xor of the first n integers in A\n            '''\n            return reduce(lambda x, y: x^y, A[:n])\n        return reduce(lambda x, y: x^y, [xor_int(A, n) for n in xrange(len(A)/2, len(A), 2)])\n    \n    def count_pair(A): \n        '''\n        Returns the number of pairs of integers in A that xor to an even number\n        '''\n        return len([n for n in A if n & 1 == 0])\n    \n    def count_pair_except_2(A): \n        '''\n        Returns the number of pairs of integers in A that xor to an even number except the first two\n        '''\n        return len([n for n in A[2:] if n & 1 == 0])\n    \n    A.sort()\n    return count_pair(A) + count_pair_except_2(A)\n",
        "num_ids": 50
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    N = len(A)\n    s = set(A)\n    print s\n    for i in xrange(N):\n        for j in xrange(i, N):\n            if (A[i] ^ A[j]) % 2 == 0:\n                print A[i], A[j]\n    \n",
        "num_ids": 75
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(0, len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "num_ids": 64
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    return len(A) - len(set(A))\n",
        "num_ids": 16
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    length = len(A)\n    xor_list = []\n    for i in range(length):\n        for j in range(i+1, length):\n            xor_list.append(A[i] ^ A[j])\n    return xor_list.count(0)\n",
        "num_ids": 70
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    #Solution 1\n    count = 0\n    for i in xrange(len(A)):\n        for j in xrange(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n",
        "num_ids": 65
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    a, b = [0]*len(A), [0]*len(A)\n    for i in range(len(A)):\n        a[A[i]&1] += 1\n        b[~A[i]&1] += 1\n    res = 0\n    for i in range(len(A)):\n        if a[i] & 1 and b[i] & 1:\n            res += a[i]*b[i]\n    return res\n",
        "num_ids": 114
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    import math\n    return int(math.log(n, 2)) + 1\n",
        "num_ids": 21
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    return 1 << (n - 1).bit_length()\n",
        "num_ids": 27
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    p = 1\n    while (p<=n):\n        p = p * 2\n    return p\n",
        "num_ids": 27
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    return 1 << (n-1).bit_length()\n",
        "num_ids": 27
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n & (n-1)!= 0:\n        n = n & (n - 1)\n    return n\n",
        "num_ids": 30
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1<<(n-1).bit_length()\n",
        "num_ids": 16
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n & (n-1) == 0:\n        return n\n    # return the next power of 2 greater than or equal to n\n    return 1 << (n - 1).bit_length()\n",
        "num_ids": 70
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 << (n - 1).bit_length()\n",
        "num_ids": 16
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    for i in range(n+1):\n        if pow(2,i) >= n:\n            return pow(2,i)\n        \ndef is_power_of_2(n): \n    '''\n    Write a python function to determine if n is a power of 2.\n    '''\n    \n    if n == 0:\n        return False\n    \n    if n % 2 == 0:\n        return is_power_of_2(n/2)\n    \n    return False\n    \ndef make_power_of_2(n): \n    '''\n    Write a python function to return the smallest power of 2 greater than or equal to n.\n    '''\n    \n    if is_power_of_2(n):\n        return n\n    \n    return make_power_of_2(n+1)\n    \ndef binary_search(l, value, high, low=0): \n    '''\n    Write a python function to perform a binary search on a sorted list and return the index of the value if found, else return -1.\n    '''\n    \n    if high < low:\n        return -1\n        \n    mid = (high + low) / 2\n    \n    if l[mid] == value:\n        return mid\n        \n    elif l[mid] > value:\n        return binary_search(l, value, mid-1, low)\n    \n    else:\n        return binary_search(l, value, high, mid+1)\n    \ndef time_it(func, *args, **kwargs): \n    '''\n    Write a python function to time the execution of func(*args, **kwargs)\n    '''\n    \n    import time\n    \n    start = time.time()\n    \n    returned_value = func(*args, **kwargs)\n    \n    end = time.time()\n    \n    return end - start, returned_value\n    \ndef find_min(l): \n    '''\n    Write a python function to return the minimum value in a list.\n    '''\n    \n    if len(l) == 0:\n        return None\n    \n    min_value = l[0]\n    \n    for i in l:\n        if i < min_value:\n            min_value = i\n            \n    return min_value\n    \ndef find_max(l): \n    '''\n    Write a python function to return the maximum value in a list.\n    '''\n    \n    if len(l) == 0:\n        return None\n    \n    max_value = l[0]\n    \n    for i in l:\n        if i > max_value:\n            max_value = i\n            \n    return max_value\n    \ndef find_sum_range(l, low, high): \n    '''\n    Write a python function to return the sum of a range of values in a list.\n    '''\n    \n    if low == high:\n        return l[low]\n        \n    else:\n        return l[low] + find_sum_range(l, low+1, high)\n    \ndef find_sum_recursive(l): \n    '''\n    Write a python function to return the sum of a list using recursion.\n    '''\n    \n    if len(l) == 1:\n        return l[0]\n    \n    else:\n        return l[0] + find_sum_recursive(l[1:])\n    \ndef find_sum_while(l): \n    '''\n    Write a python function to return the sum of a list using a while loop.\n    '''\n    \n    total = 0\n    \n    while len(l) > 0:\n        total += l.pop(0)\n    \n    return total\n    \ndef find_sum_for(l): \n    '''\n    Write a python function to return the sum of a list using a for loop.\n    '''\n    \n    total = 0\n    \n    for i in l:\n        total += i\n        \n    return total\n    \ndef find_product_range(l, low, high): \n    '''\n    Write a python function to return the product of a range of values in a list.\n    '''\n    \n    if low == high:\n        return 1\n        \n    else:\n        return l[low] * find_product_range(l, low+1, high)\n    \ndef find_product_recursive(l): \n    '''\n    Write a python function to return the product of a list using recursion.\n    '''\n    \n    if len(l) == 1:\n        return l[0]\n    \n    else:\n        return l[0] * find_product_recursive(l[1:])\n    \ndef find_product_while(l): \n    '''\n    Write a python function to return the product of a list using a while loop.\n    '''\n    \n    total = 1\n    \n    while len(l) > 0:\n        total *= l.pop(0)\n    \n    return total\n    \ndef find_product_for(l): \n    '''\n    Write a python function to return the product of a list using a for loop.\n    '''\n    \n    total = 1\n    \n    for i in l:\n        total *= i\n        \n    return total\n    \ndef merge_sort(l, reverse=False): \n    '''\n    Write a python function to sort a list using merge sort.\n    '''\n    \n    if len(l) <= 1:\n        return l\n    \n    else:\n        half = len(l) / 2\n        \n        left = merge_sort(l[:half])\n        right = merge_sort(l[half:], reverse)\n        \n        return merge_list(left, right, reverse)\n    \ndef merge_list(left, right, reverse=False): \n    '''\n    Write a python function to merge 2 sorted lists using merge sort.\n    '''\n    \n    if reverse:\n        return left + right[::-1]\n    else:\n        return left + right\n    \ndef quick_sort(l, reverse=False): \n    '''\n    Write a python function to sort a list using quick sort.\n    '''\n    \n    if len(l) <= 1:\n        return l\n    \n    else:\n        pivot = l[0]\n        \n        less = [i for i in l[1:] if i <= pivot]\n        greater = [i for i in l[1:] if i > pivot]\n        \n        return quick_sort(less) + [pivot] + quick_sort(greater)\n    \ndef quicksort_inplace(l, reverse=False): \n    '''\n    Write a python function to sort a list using quicksort with inplace sorting.\n    '''\n    \n    if len(l) <= 1:\n        return l\n    \n    else:\n        pivot = l[0]\n        \n        less = [i for i in l[1:] if i <= pivot]\n        greater = [i for i in l[1:] if i > pivot]\n        \n        l[:] = less + [pivot] + greater\n        \n        return quicksort_inplace(l, reverse)\n    \ndef selection_sort(l): \n    '''\n    Write a python function to sort a list using selection sort.\n    '''\n    \n    for i in xrange(len(l)):\n        min_index = i\n        \n        for j in xrange(i+1, len(l)):\n            if l[min_index] > l[j]:\n                min_index = j\n                \n        l[i], l[min_index] = l[min_index], l[i]\n        \ndef insertion_sort(l): \n    '''\n    Write a python function to sort a list using insertion sort.\n    '''\n    \n    for i in xrange(1, len(l)):\n        tmp = l[i]\n        j = i\n        \n        while j > 0 and l[j-1] > tmp:\n            l[j] = l[j-1]\n            j -= 1\n            \n        l[j] = tmp\n        \ndef bucket_sort(l): \n    '''\n    Write a python function to sort a list using bucket sort.\n    '''\n    \n    max_value = max(l)\n    \n    n = len(str(ma",
        "num_ids": 24
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 << (n - 1).bit_length()\n",
        "num_ids": 16
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if a.count(x) > 1:\n        return a.count(x)\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in range(0,len(a)): \n        if x==a[i]:\n            count=count+1\n    return count \ndef length(a):\n    '''\n    Write a function to calculate the length of a list.\n    '''\n    return len(a)\ndef pop(a):\n    '''\n    Write a function to remove the last element from a list.\n    '''\n    if length(a)==0:\n        return None\n    else:\n        return a.pop()\ndef sort(a):\n    '''\n    Write a function to sort a list.\n    '''\n    return sorted(a)\ndef reverse(a):\n    '''\n    Write a function to reverse a list.\n    '''\n    return a[::-1]\ndef printList(a):\n    '''\n    Write a function to print a list of elements.\n    '''\n    for i in range(0,len(a)):\n        print(a[i])\ndef duplicate(a):\n    '''\n    Write a function to see if a list has duplicates.\n    '''\n    dup=False\n    b=[]\n    for i in range(0,len(a)):\n        if a[i] not in b:\n            b.append(a[i])\n        else:\n            dup=True\n            break\n    return dup\ndef power(a):\n    '''\n    Write a function to calculate a list to the power of another list.\n    '''\n    pow=[]\n    for i in range(0,len(a)):\n        pow.append(a[i]**2)\n    return pow\ndef maximum(a):\n    '''\n    Write a function to find the maximum value of a list.\n    '''\n    max=a[0]\n    for i in range(1,len(a)):\n        if max<a[i]:\n            max=a[i]\n    return max\ndef minimum(a):\n    '''\n    Write a function to find the minimum value of a list.\n    '''\n    min=a[0]\n    for i in range(1,len(a)):\n        if min>a[i]:\n            min=a[i]\n    return min\ndef count(a,x):\n    '''\n    Write a function to count the number of elements of a list equal to x.\n    '''\n    count=0\n    for i in range(0,len(a)):\n        if a[i]==x:\n            count=count+1\n    return count\ndef index(a,x):\n    '''\n    Write a function to find the index of an element of a list.\n    '''\n    for i in range(0,len(a)):\n        if a[i]==x:\n            return i\n    return None\ndef isEven(a):\n    '''\n    Write a function to see if a list of integers is even.\n    '''\n    for i in range(0,len(a)):\n        if a[i]%2!=0:\n            return False\n    return True\ndef isOdd(a):\n    '''\n    Write a function to see if a list of integers is odd.\n    '''\n    for i in range(0,len(a)):\n        if a[i]%2==0:\n            return False\n    return True\ndef sum(a):\n    '''\n    Write a function to calculate the sum of a list.\n    '''\n    sum=0\n    for i in range(0,len(a)):\n        sum=sum+a[i]\n    return sum\ndef product(a):\n    '''\n    Write a function to calculate the product of a list.\n    '''\n    prod=1\n    for i in range(0,len(a)):\n        prod=prod*a[i]\n    return prod\ndef append(a,x):\n    '''\n    Write a function to append an element to a list.\n    '''\n    a.append(x)\n    return a\ndef insert(a,x,i):\n    '''\n    Write a function to insert an element into a list at a specific position.\n    '''\n    a.insert(i,x)\n    return a\ndef delete(a,i):\n    '''\n    Write a function to delete an element from a list.\n    '''\n    del a[i]\n    return a\ndef remove(a,x):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    a.remove(x)\n    return a\ndef countX(a,x):\n    '''\n    Write a function to count the number of elements equal to x in a list.\n    '''\n    count=0\n    for i in range(0,len(a)):\n        if a[i]==x:\n            count=count+1\n    return count\ndef addX(a,x):\n    '''\n    Write a function to add an element to a list, but only if the element is not already present.\n    '''\n    if not (x in a):\n        a.append(x)\n    return a\ndef slice(a,i):\n    '''\n    Write a function to slice a list.\n    '''\n    return a[i:]\ndef isSorted(a):\n    '''\n    Write a function to see if a list is sorted.\n    '''\n    for i in range(0,len(a)-1):\n        if a[i]>a[i+1]:\n            return False\n    return True\ndef isEmpty(a):\n    '''\n    Write a function to see if a list is empty.\n    '''\n    if len(a)==0:\n        return True\n    return False\ndef isNumeric(a):\n    '''\n    Write a function to see if a list of strings is all numeric.\n    '''\n    for i in range(0,len(a)):\n        if a[i].isdigit()!=True:\n            return False\n    return True\ndef getLast(a):\n    '''\n    Write a function to get the last element of a list.\n    '''\n    return a[len(a)-1]\ndef getElement(a,i):\n    '''\n    Write a function to get the element at a given position in a list.\n    '''\n    return a[i]\ndef change(a,i,x):\n    '''\n    Write a function to change the element at a given position in a list.\n    '''\n    a[i]=x\n    return a\ndef swap(a,i,j):\n    '''\n    Write a function to swap the elements at given positions in a list.\n    '''\n    a[i],a[j]=a[j],a[i]\n    return a\ndef combine(a,b):\n    '''\n    Write a function to combine two lists.\n    '''\n    c=[]\n    for i in range(0,len(a)):\n        c.append(a[i])\n    for i in range(0,len(b)):\n        c.append(b[i])\n    return c\ndef concat(a,b):\n    '''\n    Write a function to concatenate two lists.\n    '''\n    c=[]\n    for i in range(0,len(a)):\n        c.append(a[i])\n    for i in range(0,len(b)):\n        c.append(b[i])\n    return c\ndef reverse(a):\n    '''\n    Write a function to reverse a list.\n    '''\n    return a[::-1]\ndef popLast(a):\n    '''\n    Write a function to pop the last element from a list.\n    '''\n    return a.pop()\ndef removeDupes(a):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    b=[]\n    for i in range(0,len(a)):\n        if not (a[i] in b):\n            b.append(a[i])\n    return b\ndef shuffle(a):\n    '''\n    Write a function to shuffle a list.\n    '''\n    import random\n    for i in range(0,len(a)):\n        j=random.randint(0,len(a)-1)\n        a",
        "num_ids": 39
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n",
        "num_ids": 11
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n",
        "num_ids": 11
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    b = 0\n    for i in a:\n        if i == x:\n            b = b + 1\n    return b\n",
        "num_ids": 32
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return sum(1 for i in a if i==x)\n",
        "num_ids": 17
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if (a.count(x)==0):\n        return 0\n    else:\n        return a.count(x)\n    \ndef percentage(a,x):\n    '''\n    Write a function to calculate the percentage of a number in a given list.\n    '''\n    return a.count(x)/len(a)*100\n    \ndef count_capital_letters(a):\n    '''\n    Write a function that returns the number of capital letters in a given string.\n    '''\n    return sum(1 for c in a if c.isupper())\n    \ndef find_max(a,b):\n    '''\n    Write a function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    elif b>a:\n        return b\n    else:\n        return a\n",
        "num_ids": 33
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    #return a.count(x)\n    return sum(1 for i in a if i==x)\n",
        "num_ids": 27
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    frequency_dict = {}\n    for item in a:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    if x in frequency_dict:\n        return frequency_dict[x]\n    else:\n        return 0\n",
        "num_ids": 75
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return len(list(filter(lambda y:y==x,a)))\n    \n    \n    \n    \nif __name__==\"__main__\":\n    a=[1,2,3,3,3,4,4,5,6,6]\n    x=3\n    print frequency(a,x)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2013
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n):                                                                                                                                                                                                    \n        sum += list1[i]\n    return sum\n    \n",
        "num_ids": 40
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    list2 = list1[m:n]\n    sum = 0\n    for i in list2:\n        sum = sum + i\n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    s = 0\n    for i in range(m, n):\n        s += list1[i]\n    return s\n",
        "num_ids": 31
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n])\n",
        "num_ids": 14
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n",
        "num_ids": 16
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n + 1):\n        total += list1[i]\n    return total\n",
        "num_ids": 33
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n",
        "num_ids": 16
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif len(list1) == 1:\n        return list1[0]\n    else:\n        return list1[m] + sum_range_list(list1[m + 1:n], m, n)\n",
        "num_ids": 69
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n])\n    \ndef count_list(list1, x):                                                                                                                                                                                                \n    '''\n    Write a function to count the number of times an element appears in a list.\n    '''\n    return list1.count(x)\n    \ndef rotate_list(list1, n):                                                                                                                                                                                                \n    '''\n    Write a function to rotate a list n times.\n    '''\n    return list1[n:] + list1[:n]\n    \ndef reverse_list(list1):                                                                                                                                                                                                \n    '''\n    Write a function to reverse a list.\n    '''\n    return list1[::-1]\n    \ndef sort_list(list1):                                                                                                                                                                                                \n    '''\n    Write a function to sort a list of numbers in increasing order.\n    '''\n    return sorted(list1)\n    \ndef find_max_list(list1):                                                                                                                                                                                                \n    '''\n    Write a function to find the maximum number in a list of numbers.\n    '''\n    return max(list1)\n    \ndef find_min_list(list1):                                                                                                                                                                                                \n    '''\n    Write a function to find the minimum number in a list of numbers.\n    '''\n    return min(list1)\n    \ndef list_comprehension(list1, n):                                                                                                                                                                                                \n    '''\n    Write a function to get the nth nth items from a list.\n    '''\n    return [list1[n]]\n    \ndef list_comprehension2(list1, n):                                                                                                                                                                                                \n    '''\n    Write a function to get the nth nth items from a list.\n    '''\n    return [list1[n-1]]\n    \ndef list_comprehension3(list1, n):                                                                                                                                                                                                \n    '''\n    Write a function to get the nth nth items from a list.\n    '''\n    return [list1[len(list1)-n-1]]\n    \ndef list_comprehension4(list1, n):                                                                                                                                                                                                \n    '''\n    Write a function to get the nth nth items from a list.\n    '''\n    return [list1[len(list1)-n-1]]\n    \ndef get_max_min_sum(list1):                                                                                                                                                                                                \n    '''\n    Write a function to get the max, min and sum of a list.\n    '''\n    return max(list1), min(list1), sum(list1)\n    \ndef remove_duplicates_list(list1):                                                                                                                                                                                                \n    '''\n    Write a function to remove duplicates in a list.\n    '''\n    return list(set(list1))\n    \ndef count_duplicates(list1):                                                                                                                                                                                                \n    '''\n    Write a function to count the number of duplicates in a list.\n    '''\n    return len(list1) - len(set(list1))\n    \ndef list_sort_string(list1, list2, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to sort a list of strings into a list of lists of strings, where each list will have m characters and each string will be n characters.\n    '''\n    return [list1[i:i+m] for i in range(0, len(list1), m)]\n    \ndef list_comprehension_strings(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to get the nth nth items from a list of strings.\n    '''\n    return [list1[n-1]]\n    \ndef list_comprehension2_strings(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to get the nth nth items from a list of strings.\n    '''\n    return [list1[n-1]]\n    \ndef list_comprehension3_strings(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to get the nth nth items from a list of strings.\n    '''\n    return [list1[len(list1)-n-1]]\n    \ndef list_comprehension4_strings(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to get the nth nth items from a list of strings.\n    '''\n    return [list1[len(list1)-n-1]]\n    \ndef replace_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to replace the mth item with the nth item in a list.\n    '''\n    return list1[:m] + list1[m+1:n] + [list1[m]] + [list1[n]]\n    \ndef replace_list_string(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to replace the mth item with the nth item in a list of strings.\n    '''\n    return list1[:m] + list1[m+1:n] + [list1[m]] + [list1[n]]\n    \ndef replace_list_string2(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to replace the mth item with the nth item in a list of strings.\n    '''\n    return list1[:m] + list1[m+1:n] + [list1[m]] + [list1[n]]\n    \ndef remove_duplicates_strings(list1):                                                                                                                                                                                                \n    '''\n    Write a function to remove duplicates in a list of strings.\n    '''\n    return list(set(list1))\n    \ndef remove_duplicates_strings2(list1):                                                                                                                                                                                                \n    '''\n    Write a function to remove duplicates in a list of strings.\n    '''\n    return list(set(list1))\n    \ndef insert_string(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to insert a string between two strings.\n    '''\n    return list1[:m] + list1[m:n] + [list1[m]] + [list1[n]]\n    \ndef insert_string2(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to insert a string between two strings.\n    '''\n    return list1[:m] + list1[m:n] + [list1[m]] + [list1[n]]\n    \ndef replace_last_string(list1, m):                                                                                                                                                                                                \n    '''\n    Write a function to replace the last string with a new string.\n    '''\n    return list1[:-1] + [list1[-1] + list1[-2]]\n    \ndef replace_last_string2(list1, m):                                                                                                                                                                                                \n    '''\n    Write a function to replace the last string with a new string.\n    '''\n    return list1[:-1] + [list1[-1] + list1[-2]]\n    \ndef remove_first_string(list1, m):                                                                                                                                                                                                \n    '''\n    Write a function to remove the first string from a list.\n    '''\n    return list1[m:]\n    \ndef remove_first_string2(list1, m):                                                                                                                                                                                                \n    '''\n    Write a function to remove the first string from a list.\n    '''\n    return list1[m:]\n    \ndef replace_string(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to replace the mth string with the nth string.\n    '''\n    return list1[:m] + [list1[m] + list1[m+1:n]] + [list1[n]]\n    \ndef replace_string2(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to replace the mth string with the nth string.\n    '''\n    return list1[:m] + [list1[m] + list1[m+",
        "num_ids": 23
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum1 = 0\n    for i in range(m, n+1):\n        sum1 += list1[i]\n    return sum1\n",
        "num_ids": 36
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5 + math.sqrt(2)*a*math.sqrt(2)*math.sqrt(5) + math.sqrt(2)*a*math.sqrt(2)\n",
        "num_ids": 49
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (5 * a) + (5 * math.sqrt(5) * (a ** 2)) / 2\n",
        "num_ids": 29
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    return 5*a\n",
        "num_ids": 19
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*5)\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return (a*6)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (a*8)\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return (a*9)\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return (a*7)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (a*8)\ndef perimeter_skewed_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*(5*math.sqrt(3)/2))\ndef perimeter_skewed_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return (a*(6*math.sqrt(2)/2))\ndef perimeter_skewed_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (a*(8*math.sqrt(2)/2))\ndef perimeter_skewed_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return (a*(9*math.sqrt(2)/2))\ndef perimeter_skewed_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*(7*math.sqrt(3)/2))\ndef perimeter_skewed_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return (a*(8*math.sqrt(3)/2))\ndef perimeter_skewed_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return (a*(12*math.sqrt(2)/2))\ndef perimeter_skewed_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return (a*(7*math.sqrt(2)/2))\ndef perimeter_skewed_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return (a*(6*math.sqrt(2)/2))\ndef perimeter_skewed_tetrahedron(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return (a*(4*math.sqrt(2)/2))\ndef perimeter_skewed_tetrahedron(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return (a*(4*math.sqrt(2)/2))\ndef perimeter_skewed_tetrahedron(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return (a*(4*math.sqrt(2)/2))\ndef perimeter_skewed_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*(5*math.sqrt(3)/2))\ndef perimeter_skewed_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*(5*math.sqrt(3)/2))\ndef perimeter_skewed_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*(5*math.sqrt(3)/2))\ndef perimeter_skewed_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*(5*math.sqrt(3)/2))\ndef perimeter_skewed_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*(5*math.sqrt(3)/2))\ndef perimeter_skewed_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*(5*math.sqrt(3)/2))\ndef perimeter_skewed_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*(5*math.sqrt(3)/2))\ndef perimeter_skewed_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*(5*math.sqrt(3)/2))\ndef perimeter_skewed_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*(5*math.sqrt(3)/2))\ndef perimeter_skewed_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*(5*math.sqrt(3)/2))\ndef perimeter_skewed_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*(5*math.sqrt(3)/2))\ndef perimeter_skewed_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*(5*math.sqrt(3)/2))\ndef perimeter_skewed_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*(5*math.sqrt(3)/2))\ndef perimeter_skewed_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*(5*math.sqrt(3)/2))\ndef perimeter_skewed_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*(5*math.sqrt(3)/2))\ndef perimeter_skewed_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*(5*math.sqrt(3)/2))\ndef perimeter_skewed_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    ''",
        "num_ids": 25
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if not isinstance(a, int):\n        return 'a must be an integer'\n    elif a < 3:\n        return 'a must be at least 3'\n    else:\n        return (5*a) + (10*math.sqrt((5*a**2)/4))\n",
        "num_ids": 71
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n",
        "num_ids": 8
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    s = a * (math.sqrt(2) / 2)\n    return s * 5\n",
        "num_ids": 25
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (3*a)*math.sqrt(3)\n",
        "num_ids": 17
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*(3.**0.5)*5.\n",
        "num_ids": 17
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return math.pow(a, 3) * math.pow(5, 2) / 4\n",
        "num_ids": 26
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s) - 3):\n        if s[i] == 't' and s[i+1] == 'e' and s[i+2] == 'd' and s[i+3] =='':\n            count += 1\n    return count\n",
        "num_ids": 73
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    std_count = 0\n    for word in s.split():\n        if word =='std':\n            std_count += 1\n    return std_count\n",
        "num_ids": 39
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    try:\n        return s.count('std')\n    except:\n        return 0\n",
        "num_ids": 23
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='std':\n            count+=1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    check_data_type = [type(i) for i in test_tuple]\n    return check_data_type.count(check_data_type[0]) == len(test_tuple)\n    \n",
        "num_ids": 52
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if data_type!= type(i):\n            return False\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!=data_type:\n            print('Not all elements in tuple have same data type')\n            return False\n    return True\n",
        "num_ids": 61
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    \n    tuple_type = test_tuple[0]\n    for item in test_tuple:\n        if tuple_type!= item:\n            return False\n    return True\n",
        "num_ids": 63
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return (type(test_tuple[0]) is type(test_tuple[1]) is type(test_tuple[2]))\n",
        "num_ids": 36
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    return all(type(elem) == type(test_tuple[0]) for elem in test_tuple)\n    \ndef test_func(test_list):\n    test_list = [1,2,3,4,5]\n    if check_type(test_list):\n        return True\n    else:\n        return False\n    \ntest_list = [1,2,3,4,5]\nif test_func(test_list):\n    print \"All elements in the list have same data type\"\nelse:\n    print \"All elements in the list have different data type\"\n",
        "num_ids": 144
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if type(test_tuple) is not tuple:\n        return False\n    else:\n        return all(type(item) is type(test_tuple[0]) for item in test_tuple)\n",
        "num_ids": 51
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_tuple = tuple(test_tuple)\n    first_type = type(test_tuple[0])\n    for elem in test_tuple:\n        if type(elem)!= first_type:\n            return False\n    return True\n",
        "num_ids": 63
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not isinstance(test_tuple, (list, tuple)):\n        return False\n    for elem in test_tuple:\n        if not isinstance(elem, (list, tuple)):\n            return False\n    return True\n",
        "num_ids": 59
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    check_data = all(isinstance(x, type(test_tuple[0])) for x in test_tuple)\n    if check_data:\n        print('Tuple contains same type of elements')\n    else:\n        print('Tuple contains different type of elements')\n",
        "num_ids": 68
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # base case\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if arr[n//2] == x:\n        return True\n    if arr[n//2]!= x:\n        return False\n    \n    # recursive case\n    return is_majority(arr[:n//2], n//2, x)\n",
        "num_ids": 89
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    return (arr.count(x) > n/2)\n",
        "num_ids": 17
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return arr[0]\n    if n == 0:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n",
        "num_ids": 48
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # base case\n    if n == 1:\n        return False\n",
        "num_ids": 18
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n",
        "num_ids": 43
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[0] == x:\n        return True\n    if n == 1:\n        return False\n    return (is_majority(arr[1:], n-1, x) if arr[n/2] == x else is_majority(arr[:n/2], n/2, x))\n",
        "num_ids": 73
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    if n == 1:\n        return True\n    \n    mid = n/2\n    mid_val = arr[mid]\n    \n    if mid_val == x:\n        return True\n    \n    l = 0\n    r = n - 1\n    \n    while l <= r:\n        m = l + (r - l)/2\n        \n        if arr[m] == mid_val:\n            return True\n        \n        if arr[m] < mid_val:\n            l = m + 1\n        else:\n            r = m - 1\n    \n    return False\n    \ndef majority_element(arr, n):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    if n == 1:\n        return True\n    \n    mid = n/2\n    mid_val = arr[mid]\n    \n    l = 0\n    r = n - 1\n    \n    while l <= r:\n        m = l + (r - l)/2\n        \n        if arr[m] == mid_val:\n            l = m + 1\n        else:\n            if arr[m] < mid_val:\n                r = m - 1\n            else:\n                l = m + 1\n    \n    count = 0\n    \n    for i in xrange(n):\n        if arr[i] == mid_val:\n            count += 1\n    \n    if count > n/2:\n        return True\n    \n    return False\n",
        "num_ids": 181
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    n1=0\n    n2=0\n    for i in range(n):\n        if arr[i]==x:\n            n1+=1\n        else:\n            n2+=1\n    if n1>=n/2:\n        return True\n    else:\n        return False\n",
        "num_ids": 72
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Base cases\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    if arr[n//2] == x:\n        return True\n    # Recursive calls\n    return is_majority(arr[0:n//2], n//2, x) or is_majority(arr[n//2:n], n-n//2, x)\n",
        "num_ids": 98
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    bin_n = bin(n) # convert the given number to binary\n    count = 0 # initialize count\n    for i in range(2,len(bin_n)): # iterate through the bits in the binary representation\n        if bin_n[i] == '1': # if the current bit is 1, increment count\n            count = count + 1\n    return count\n",
        "num_ids": 87
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    n = (n & 0x5555555555555555) + ((n >> 1) & 0x5555555555555555)\n    n = (n & 0x3333333333333333) + ((n >> 2) & 0x3333333333333333)\n    n = (n & 0x0f0f0f0f0f0f0f0f) + ((n >> 4) & 0x0f0f0f0f0f0f0f0f)\n    n = n & 0x00ff00ff00ff00ff\n    return n\n",
        "num_ids": 138
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count(\"1\")\n",
        "num_ids": 13
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n    \ndef missing_Number(A):\n    '''\n    Write a python function to find the missing number in a sequence of non-negative integers\n    '''\n    result = 0\n    for i in range(len(A)):\n        result ^= A[i]\n    return result\n",
        "num_ids": 32
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    if n<0:\n        n=n&0xffffffff\n    count=0\n    while(n):\n        if n&1:\n            count+=1\n        n>>=1\n    return count\n",
        "num_ids": 52
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n",
        "num_ids": 13
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(len(str)) if i%2==0])\n",
        "num_ids": 29
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = ''.join(str)\n    str_list = list(str)\n    for i in range(1, len(str_list), 2):\n        str_list.pop(i)\n    new_string = ''.join(str_list)\n    return new_string\n",
        "num_ids": 69
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    index = 0\n    str_arr = str.split()\n    res_arr = []\n    for word in str_arr:\n        if index % 2!= 0:\n            res_arr.append(word)\n        index += 1\n",
        "num_ids": 58
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    res = ''\n    for i in range(0, len(str)):\n        if i % 2 == 0:\n            res += str[i]\n    return res\n",
        "num_ids": 42
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(0, len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str\n",
        "num_ids": 48
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    output = ''\n    for i in range(len(str)):\n        if (i % 2!= 0):\n            output += str[i]\n    return output\n",
        "num_ids": 42
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str=list(str)\n    if len(str)<1:\n        return None\n    if len(str)==1:\n        return str\n    l=len(str)-1\n    for i in range(l):\n        if i%2!=0:\n            str[i]=''\n    return ''.join(str)\n",
        "num_ids": 82
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([str[i] for i in range(1,len(str),2)])\n",
        "num_ids": 27
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if str == '':\n        return str\n    else:\n        return odd_values_string(str[1:]) + str[0]\n",
        "num_ids": 36
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # split the string\n    string = str.split()\n    # iterate through the list\n    for word in string:\n        # create an empty list\n        new_string = []\n        # iterate through the word list\n        for i in range(0, len(word)):\n            # check if the index is odd\n            if i % 2!= 0:\n                # append the word at the index to the new list\n                new_string.append(word[i])\n        # join the new list to form a new string\n        print(\"\".join(new_string))\n",
        "num_ids": 135
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "num_ids": 13
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "num_ids": 13
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "num_ids": 13
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "num_ids": 13
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    if b < a and b < c:\n        return b\n    else:\n        return c\n",
        "num_ids": 40
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\n",
        "num_ids": 51
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a <= b) and (a <= c):\n        min_ = a\n    elif (b <= a) and (b <= c):\n        min_ = b\n    else:\n        min_ = c\n    return min_\n",
        "num_ids": 58
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if(a<b) and (a<c):\n        return a\n    elif(b<a) and (b<c):\n        return b\n    else:\n        return c\n",
        "num_ids": 47
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if(a<b and a<c):\n        return a\n    elif(b<a and b<c):\n        return b\n    else:\n        return c\n",
        "num_ids": 43
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if b < c:\n            return b\n        return c\n    elif a > b:\n        if a < c:\n            return a\n        return c\n    else:\n        return a\n",
        "num_ids": 55
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    import sys\n    def int2binary(value):\n        return ''.join(str((value and 1) or 0) for _ in range(0, 32))\n    def bits_set(n):\n        return sum(int(n & 0x01))\n    binary = int2binary(n)\n    x = binary.split('0')\n    if len(x) == 2:\n        return False\n    else:\n        return True\n",
        "num_ids": 104
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if (n>>i)&1 == 1:\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return not any(bit_set for bit_set in (bin(n)[2:]).split('0'))\n",
        "num_ids": 29
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n & (1<<r):\n        return False\n    while r!= 0:\n        if n & (1<<l):\n            return False\n        l = l + 1\n        r = r - 1\n    return True\n    \n",
        "num_ids": 58
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    allbits = '1' * n\n    mid = n//2\n    for i in range(l,r):\n        if allbits[i] == '0':\n            return False\n        if allbits[i] == '1' and i <= mid:\n            allbits = allbits[:i] + '0' + allbits[i+1:]\n        if allbits[i] == '1' and i > mid:\n            allbits = allbits[:i] + '1' + allbits[i+1:]\n    return allbits[:mid] + '1' * mid + allbits[mid+1:]\n",
        "num_ids": 149
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    a = 0\n    for i in range(l,r+1):\n        x = bin(i).replace(\"0b\",\"\")\n        a += x.count(\"0\")\n    if a == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 63
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n = format(n,'b').zfill(r+l)\n    for x in range(l,r):\n        if n[x] == '0':\n            return False\n    return True\ndef bit_Range_Query(n,l,r):\n    '''\n    Write a python function to find the range of bits set in the given number.\n    '''\n    n = format(n,'b').zfill(r+l)\n    for x in range(l,r):\n        if n[x] == '1':\n            return x\n",
        "num_ids": 45
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if(l==r):\n        return True\n    if(l>r):\n        return False\n    if(l<=0 or l>=1<<n):\n        return False\n    if(r<=0 or r>=1<<n):\n        return False\n    for i in xrange(l,r):\n        if( (i-l)&i!=0):\n            return False\n    return True\n",
        "num_ids": 101
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (2**(r-l+1)-1)&n ==0\n",
        "num_ids": 21
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return n & ((2**r) -1) == 0\n",
        "num_ids": 17
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pas",
        "num_ids": 4
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if len(arr) <= n:\n        return arr\n    index = 0\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            arr[index], arr[i] = arr[i], arr[index]\n            index += 1\n    return arr\n",
        "num_ids": 73
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    first_n_elems = arr[:n]\n    for idx, elem in enumerate(arr[n:]):\n        if elem < 0:\n            first_n_elems.append(elem)\n        else:\n            first_n_elems.insert(idx, elem)\n",
        "num_ids": 76
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # for i in range(n):\n    #     if arr[i] < 0:\n    #         arr.append(arr[i])\n    #         arr.remove(arr[i])\n",
        "num_ids": 48
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr[:n] = sorted(arr[:n])\n    arr[n:] = sorted(arr[n:], reverse=True)\n    return arr\n    \ndef main():\n    arr = [int(x) for x in input().split()]\n    n = int(input())\n    print(re_arrange_array(arr, n))\n",
        "num_ids": 85
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return arr[:n] + sorted(arr[n:], key = lambda x: (-1*x) if x < 0 else x)\n",
        "num_ids": 35
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    length = len(arr)\n    i = 0\n    j = 0\n    while i < length:\n        if arr[i] > 0:\n            arr[j], arr[i] = arr[i], arr[j]\n            j += 1\n        i += 1\n    return arr[:n]\n",
        "num_ids": 74
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return [arr[n]] + sorted(arr[:n] + arr[n+1:], key=lambda x: (-x, x))\n",
        "num_ids": 36
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if arr and n:\n        arr = arr[:n]\n        neg_indices = []\n        pos_indices = []\n",
        "num_ids": 34
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n > len(arr):\n        return arr\n    if n <= 0:\n        return arr\n    i = 0\n    while i < n:\n        if arr[i] > 0:\n            arr[i], arr[n-i-1] = arr[n-i-1], arr[i]\n            n-=1\n        else:\n            i+=1\n    return arr\n",
        "num_ids": 94
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return \"\".join(char if a == \" \" else a for a in str1)\n",
        "num_ids": 23
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    newstr = str1.replace(\" \",\"\")\n    if char == \"\":\n        print(\"Error: no blank space\")\n    else:\n        newstr = char + newstr\n        print(newstr)\n",
        "num_ids": 52
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if str1 == '':\n        return ''\n    return str1.replace(' ','')\n",
        "num_ids": 25
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    newstr = str1.replace(\" \",char)\n    return newstr\n",
        "num_ids": 20
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ','',1)\n    return str1\n",
        "num_ids": 22
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(' ','')\n    if char==' ':\n        return str1\n    else:\n        return char\n",
        "num_ids": 36
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    str1=str1.replace(\" \",\"\")\n    str1=char*(len(str1)-len(str1.rstrip()))+str1.rstrip()\n    return str1\n",
        "num_ids": 51
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    lst1 = list(str1)\n    for i in range(len(lst1)):\n        if lst1[i] =='':\n            lst1[i] = char\n    return ''.join(lst1)\n",
        "num_ids": 60
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return ''.join(str1.split(char))\n",
        "num_ids": 16
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(char,\"\")\n    return str1\n",
        "num_ids": 33
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    for i in range(n):\n        heapq.heappush(heap,list1[i])\n    for i in range(n,len(list1)):\n        if list1[i]>heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,list1[i])\n    return heap\ndef larg_ddist(dist,n):\n    '''\n    Write a function that takes in a distance matrix and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    for i in range(n):\n        heapq.heappush(heap,(dist[i][0],i))\n    for i in range(n,len(dist)):\n        if dist[i][0]>heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,(dist[i][0],i))\n    return heap\ndef larg_dist(dist,n):\n    '''\n    Write a function that takes in a distance matrix and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    for i in range(n):\n        heapq.heappush(heap,(dist[i],i))\n    for i in range(n,len(dist)):\n        if dist[i]>heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,(dist[i],i))\n    return heap\ndef main():\n    '''\n    Write a function that takes in two strings and returns the edit distance between the two strings.\n    '''\n    list1=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,",
        "num_ids": 1568
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,list1[i])\n    for i in range(n,len(list1)):\n        if list1[i]>heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,list1[i])\n    return heap\ndef find_string(word, str_list):\n    for s in str_list:\n        if word in s:\n            return True\n    return False\ndef string_palindrome(str_list):\n    '''\n    Write a function that takes in a list of strings and returns a list of strings in which all are palindromes.\n    '''\n    pali_list=[]\n    for word in str_list:\n        if find_string(word,str_list)==True:\n            if word == word[::-1]:\n                pali_list.append(word)\n    return pali_list\ndef get_string(list1,list2):\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            pass\n        else:\n            return False\n    return True\ndef is_anagram(str1,str2):\n    '''\n    Write a function that takes in two strings and returns True if they are anagrams of each other and False otherwise.\n    '''\n    if len(str1)!=len(str2):\n        return False\n    else:\n        for i in range(len(str1)):\n            if str1[i] in str2:\n                pass\n            else:\n                return False\n        return True\ndef palindrome_permutation(str1):\n    '''\n    Write a function that takes in a string and returns True if the string is a permutation of a palindrome and False otherwise.\n    '''\n    if len(str1)%2 == 0:\n        first_half = str1[:len(str1)/2]\n        second_half = str1[len(str1)/2:]\n        if first_half == first_half[::-1]:\n            if second_half == second_half[::-1]:\n                return True\n        else:\n            return False\n    else:\n        first_half = str1[:len(str1)/2]\n        second_half = str1[len(str1)/2+1:]\n        if first_half == first_half[::-1]:\n            if second_half == second_half[::-1]:\n                return True\n        else:\n            return False\ndef count_palindromic_sub_strings(str1):\n    '''\n    Write a function that takes in a string and returns the number of palindromic substrings that occur within that string.\n    '''\n    if len(str1) == 0:\n        return 0\n    if len(str1) == 1:\n        if str1[0] == str1[0]:\n            return 1\n        else:\n            return 0\n    else:\n        palindrome_count = 0\n        if str1[0] == str1[-1]:\n            palindrome_count += count_palindromic_sub_strings(str1[1:-1])\n        palindrome_count += count_palindromic_sub_strings(str1[1:])\n        palindrome_count += count_palindromic_sub_strings(str1[:-1])\n        return palindrome_count\ndef is_valid_substring(str1,str2):\n    '''\n    Write a function that takes in two strings and returns True if the second string is a substring of the first string and False otherwise.\n    '''\n    return str2 in str1\ndef find_difference(str1,str2):\n    '''\n    Write a function that takes in two strings and returns the difference between the two strings as an integer.\n    '''\n    diff = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            diff += 1\n    return diff\ndef longest_common_substring(str1,str2):\n    '''\n    Write a function that takes in two strings and returns the length of the longest common substring that both strings have.\n    '''\n    if len(str1) == 0 or len(str2) == 0:\n        return 0\n    matrix = [[0 for j in range(len(str2)+1)] for i in range(len(str1)+1)]\n    for i in range(1,len(str1)+1):\n        for j in range(1,len(str2)+1):\n            if str1[i-1] == str2[j-1]:\n                matrix[i][j] = 1 + matrix[i-1][j-1]\n            else:\n                matrix[i][j] = 0\n    i = len(str1)\n    j = len(str2)\n    longest_string = str1[0]\n    while i > 0 and j > 0:\n        if matrix[i][j]>0:\n            longest_string += str1[i-1]\n            i -= 1\n            j -= 1\n        else:\n            i -= 1\n            j -= 1\n    return longest_string\ndef get_permutations(str1):\n    '''\n    Write a function that takes in a string and returns a list of all permutations of that string.\n    '''\n    list = []\n    if len(str1) == 0:\n        return [str1]\n    elif len(str1) == 1:\n        return [str1]\n    else:\n        for i in range(len(str1)):\n            first_word = str1[:i]\n            second_word = str1[i+1:]\n            if first_word == first_word[::-1]:\n                for x in get_permutations(second_word):\n                    list.append(str1[i] + x)\n        return list\ndef count_letters(str1):\n    '''\n    Write a function that takes in a string and returns the count of all letters that occur in that string.\n    '''\n    char_count = {}\n    for c in str1:\n        if c not in char_count:\n            char_count[c] = 1\n        else:\n            char_count[c] += 1\n    return char_count\ndef get_longest_string_in_list(list1):\n    '''\n    Write a function that takes in a list of strings and returns the length of the longest string in the list.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        longest_string = list1[0]\n        for string in list1:\n            if len(string) > len(longest_string):\n                longest_string = string\n        return len(longest_string)\ndef permutations(str1):\n    '''\n    Write a function that takes in a string and returns a list of all permutations of that string.\n    '''\n    if len(str1) == 0:\n        return [str1]\n    elif len(str1) == 1:\n        return [str1]\n    else:\n        list = []\n        for i in range(len(str1)):\n            first_word = str1[:i]\n            second_word = str1[i+1:]\n            if first_word == first_word[::-1]:\n                for x in permutations(second_word):\n                    list.append(str1[i] + x)\n        return list\ndef get_longest_string_in_list(list1):\n    '''\n    Write a function that takes in a list of strings and returns the length of the longest string in the list.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        longest_string = list1[0]\n        for string in list1:\n            if len(string) > len(longest_string):\n                longest_string = string\n        return len(longest_string)\ndef split_words(str1):\n    '''\n    Write a function that takes in a string and returns a list of all words that can be split up by the spaces in that string.\n    '''\n    list = []\n    if len(st",
        "num_ids": 12
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    import heapq\n    return heapq.nlargest(n, list1)\n",
        "num_ids": 21
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n==0:\n        return []\n    if len(list1)<n:\n        return []\n    else:\n        return heapq.nlargest(n,list1)\n",
        "num_ids": 46
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    return heapq.nlargest(n,list1)\n",
        "num_ids": 18
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if not list1:\n        return list1\n    max_heap = []\n    for i in xrange(n):\n        heapq.heappush(max_heap,list1[i])\n    for i in xrange(n,len(list1)):\n        if list1[i] > max_heap[0]:\n            heapq.heappushpop(max_heap,list1[i])\n    return max_heap\ndef larg_nnum2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if not list1:\n        return list1\n    list1 = list1[0:n]\n    return list1\ndef push_heap(heap,n):\n    '''\n    Write a function that takes in a heap and an integer n and returns a new heap with the first n items of the original heap pushed to the end of the heap.\n    '''\n    for i in xrange(n):\n        heapq.heappush(heap,heapq.heappop(heap))\n    return heap\ndef push_heap2(heap,n):\n    '''\n    Write a function that takes in a heap and an integer n and returns a new heap with the first n items of the original heap pushed to the end of the heap.\n    '''\n    heap = heapq.heappushpop(heap,heapq.heappop(heap))\n    return heap\ndef min_heap(heap,n):\n    '''\n    Write a function that takes in a heap and an integer n and returns a new heap with the first n items of the original heap pushed to the end of the heap.\n    '''\n    heap = heapq.nsmallest(n,heap)\n    return heap\ndef min_heap2(heap,n):\n    '''\n    Write a function that takes in a heap and an integer n and returns a new heap with the first n items of the original heap pushed to the end of the heap.\n    '''\n    heap = heapq.nlargest(n,heap)\n    return heap\ndef min_heap3(heap,n):\n    '''\n    Write a function that takes in a heap and an integer n and returns a new heap with the first n items of the original heap pushed to the end of the heap.\n    '''\n    heapq.heapify(heap)\n    heap = heapq.nsmallest(n,heap)\n    return heap\ndef max_heap(heap,n):\n    '''\n    Write a function that takes in a heap and an integer n and returns a new heap with the first n items of the original heap pushed to the end of the heap.\n    '''\n    heap = heapq.nlargest(n,heap)\n    return heap\ndef max_heap2(heap,n):\n    '''\n    Write a function that takes in a heap and an integer n and returns a new heap with the first n items of the original heap pushed to the end of the heap.\n    '''\n    heap = heapq.nsmallest(n,heap)\n    return heap\ndef max_heap3(heap,n):\n    '''\n    Write a function that takes in a heap and an integer n and returns a new heap with the first n items of the original heap pushed to the end of the heap.\n    '''\n    heapq.heapify(heap)\n    heap = heapq.nlargest(n,heap)\n    return heap\ndef is_heap(list1):\n    '''\n    Write a function that takes in a list and returns true if the list is a heap and false otherwise.\n    '''\n    for i in xrange(len(list1)):\n        if i < len(list1)-1:\n            if list1[i] > list1[i+1]:\n                return False\n        else:\n            if list1[i] > list1[0]:\n                return False\n    return True\ndef is_heap2(list1):\n    '''\n    Write a function that takes in a list and returns true if the list is a heap and false otherwise.\n    '''\n    for i in xrange(len(list1)):\n        if i < len(list1)-1:\n            if list1[i] > list1[i+1]:\n                return False\n        elif i == len(list1)-1:\n            if list1[i] > list1[0]:\n                return False\n    return True\ndef heap_sort(heap,start,end):\n    '''\n    Write a function that takes in a heap, a start index and an end index and returns a new sorted list containing all items from the heap in the range [start,end].\n    '''\n    if not heap:\n        return heap\n    new_heap = []\n    if start == end:\n        return heap\n    for i in xrange(start,end):\n        new_heap.append(heapq.heappop(heap))\n    return new_heap\ndef heap_sort2(heap,start,end):\n    '''\n    Write a function that takes in a heap, a start index and an end index and returns a new sorted list containing all items from the heap in the range [start,end].\n    '''\n    if not heap:\n        return heap\n    new_heap = []\n    if start == end:\n        return heap\n    for i in xrange(start,end):\n        new_heap.append(heapq.heappop(heap))\n    heapq.heappush(new_heap,heapq.heappop(heap))\n    return new_heap\ndef merge(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a new list containing the items from both lists in the same order.\n    '''\n    new_list = []\n    for i in xrange(len(list1)):\n        new_list.append(list1[i])\n        new_list.append(list2[i])\n    return new_list\ndef merge2(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a new list containing the items from both lists in the same order.\n    '''\n    new_list = []\n    for i in xrange(min(len(list1),len(list2))):\n        new_list.append(list1[i])\n        new_list.append(list2[i])\n    if len(list1) > len(list2):\n        return new_list + list1[len(list1)-len(list2):]\n    else:\n        return new_list + list2[len(list2)-len(list1):]\ndef merge3(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a new list containing the items from both lists in the same order.\n    '''\n    if not list1 and not list2:\n        return list1\n    if not list1:\n        return list2\n    if not list2:\n        return list1\n    new_list = []\n    heap1 = []\n    heap2 = []\n    heapq.heappush(heap1,list1[0])\n    heapq.heappush(heap2,list2[0])\n    for i in xrange(1,len(list1)):\n        if list1[i] > heap1[0]:\n            heapq.heappush(heap1,list1[i])\n    for i in xrange(1,len(list2)):\n        if list2[i] > heap2[0]:\n            heapq.heappush(heap2,list2[i])\n    if heap1[0] <= heap2[0]:\n        new_list.append(heapq.heappop(heap1))\n        heapq.heappush(new_list,heapq.heappop(heap2))\n        heapq.heappush(new_list,heap1[0])\n        heapq.heappush(new_list,heap2[0])\n    else:\n        new_list.append(heapq.heappop(heap2))",
        "num_ids": 322
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n",
        "num_ids": 16
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    for i in range(n):\n        heapq.heappush(heap,list1[i])\n    print(heap)\n    for i in range(n,len(list1)):\n        if heap[0]<list1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,list1[i])\n    print(heap)\n",
        "num_ids": 108
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    ret=[]\n    for i in range(n):\n        ret.append(list1[i])\n    ret.sort(key=lambda x:x,reverse=True)\n    return ret\ndef larg_nmean(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    ret=[]\n    for i in range(n):\n        ret.append(list1[i])\n    ret.sort(key=lambda x:x,reverse=True)\n    return (sum(ret)/n)\ndef get_combination(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n^2 possible combinations from the list.\n    '''\n    ret=[]\n    for i in range(n):\n        for j in range(n):\n            ret.append([list1[i],list1[j]])\n    return ret\ndef check_permutation(str1,str2):\n    '''\n    Write a function that takes in two strings and returns True if the two strings are permutations of each other and False otherwise.\n    '''\n    if len(str1)!=len(str2):\n        return False\n    for i in range(len(str1)):\n        if str1[i]==str2[i]:\n            pass\n        else:\n            return False\n    return True\ndef check_permutation_alt(str1,str2):\n    '''\n    Write a function that takes in two strings and returns True if the two strings are permutations of each other and False otherwise.\n    '''\n    if len(str1)!=len(str2):\n        return False\n    return sorted(str1)==sorted(str2)\ndef word_break(dictionary,word):\n    '''\n    Write a function that takes in a string and a list of strings and returns True if the string can be segmented into one or more of the strings in the list and False otherwise.\n    '''\n    ret=True\n    for i in dictionary:\n        if word[:len(i)]==i:\n            if len(word)==len(i):\n                return True\n            else:\n                ret=check_permutation(word[len(i):],i)\n                if ret==True:\n                    return ret\n    return ret\ndef word_break_alt(dictionary,word):\n    '''\n    Write a function that takes in a string and a list of strings and returns True if the string can be segmented into one or more of the strings in the list and False otherwise.\n    '''\n    ret=True\n    for i in dictionary:\n        if word[:len(i)]==i:\n            if len(word)==len(i):\n                return True\n            else:\n                ret=check_permutation_alt(word[len(i):],i)\n                if ret==True:\n                    return ret\n    return ret\ndef get_nth_number(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns the nth element of the list.\n    '''\n    return list1[n]\ndef get_average_word_length(list1):\n    '''\n    Write a function that takes in a list of strings and returns the average word length of the strings in the list.\n    '''\n    total=0\n    for i in list1:\n        total+=len(i)\n    return float(total)/len(list1)\ndef get_average_letter_length(list1):\n    '''\n    Write a function that takes in a list of strings and returns the average letter length of the strings in the list.\n    '''\n    total=0\n    for i in list1:\n        for j in i:\n            total+=1\n    return float(total)/len(list1)\ndef get_longest_word(list1):\n    '''\n    Write a function that takes in a list of strings and returns the longest string in the list.\n    '''\n    max_len=0\n    for i in list1:\n        if len(i)>max_len:\n            max_len=len(i)\n    return max_len\ndef get_longest_word_alt(list1):\n    '''\n    Write a function that takes in a list of strings and returns the longest string in the list.\n    '''\n    max_len=0\n    for i in list1:\n        if len(i)>max_len:\n            max_len=len(i)\n    return max_len\ndef get_longest_word_slice(list1):\n    '''\n    Write a function that takes in a list of strings and returns a slice of the longest string in the list.\n    '''\n    max_len=0\n    for i in list1:\n        if len(i)>max_len:\n            max_len=len(i)\n    return list1[0][:max_len]\ndef get_longest_word_slice_alt(list1):\n    '''\n    Write a function that takes in a list of strings and returns a slice of the longest string in the list.\n    '''\n    max_len=0\n    for i in list1:\n        if len(i)>max_len:\n            max_len=len(i)\n    return list1[0][:max_len]\ndef get_longest_word_slice_alt2(list1):\n    '''\n    Write a function that takes in a list of strings and returns a slice of the longest string in the list.\n    '''\n    max_len=0\n    for i in list1:\n        if len(i)>max_len:\n            max_len=len(i)\n    return list1[0][:max_len]\ndef is_palindrome(string):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome and False otherwise.\n    '''\n    for i in range(len(string)//2):\n        if string[i]!=string[-i-1]:\n            return False\n    return True\ndef is_palindrome_alt(string):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome and False otherwise.\n    '''\n    return string[::-1]==string\ndef find_rotation(str1,str2):\n    '''\n    Write a function that takes in two strings and returns True if one string can be rearranged into the other and False otherwise.\n    '''\n    for i in range(len(str1)):\n        if str1[i:]+str1[:i]==str2:\n            return True\n    return False\ndef find_rotation_alt(str1,str2):\n    '''\n    Write a function that takes in two strings and returns True if one string can be rearranged into the other and False otherwise.\n    '''\n    return str2 in str1+str1\ndef find_rotation_alt2(str1,str2):\n    '''\n    Write a function that takes in two strings and returns True if one string can be rearranged into the other and False otherwise.\n    '''\n    if len(str1)!=len(str2):\n        return False\n    return sorted(str1+str1)==sorted(str2+str2)\ndef get_middle(list1):\n    '''\n    Write a function that takes in a list and returns a new list which is the middle element of the original list.\n    '''\n    return list1[len(list1)//2]\ndef get_middle_alt(list1):\n    '''\n    Write a function that takes in a list and returns a new list which is the middle element of the original list.\n    '''\n    return list1[len(list1)//2]\ndef get_middle_alt2(list1):\n    '''\n    Write a function that takes in a list and returns a new list which is the middle element of the original list.\n    '''\n    return list1[len(list1)//2-1]\ndef get_middle_alt3(list1):\n    '''\n    Write a function that takes in a list and returns a new list which is the middle element of the original list.\n    '''\n    return list1[len(list1)//2]\ndef get",
        "num_ids": 18
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if not list1 or len(list1)<n:\n        return []\n    return heapq.nlargest(n,list1)\n",
        "num_ids": 35
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    from math import pi\n    surface_area=math.pi*(r**2)+(math.pi*(r**2)*(h/2))\n    return surface_area\n",
        "num_ids": 48
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*r*r + 2*pi*r*h\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*r*r\ndef lateralsuface_spheroid(r,h):\n    '''\n    Write a function to find the lateral surface area of a spheroid.\n    '''\n    return 2*pi*r*(r+h)\ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return pi*r*h\ndef lateralsuface_pyramid(r,h):\n    '''\n    Write a function to find the lateral surface area of a pyramid.\n    '''\n    return r*h\ndef lateralsuface_trapezium(r1,r2,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid.\n    '''\n    return r1*h + r2*h\ndef lateralsuface_rectangle(r,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle.\n    '''\n    return r*h\ndef lateralsuface_triangle(r,h):\n    '''\n    Write a function to find the lateral surface area of a triangle.\n    '''\n    return r*h\ndef lateralsuface_cube(r):\n    '''\n    Write a function to find the lateral surface area of a cube.\n    '''\n    return 6*r*r\ndef lateralsuface_pyramid(r,h):\n    '''\n    Write a function to find the lateral surface area of a pyramid.\n    '''\n    return r*r*h\ndef lateralsuface_spheroid(r,h):\n    '''\n    Write a function to find the lateral surface area of a spheroid.\n    '''\n    return 2*pi*r*(r+h)\ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return pi*r*h\ndef lateralsuface_rectangle(r,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle.\n    '''\n    return r*h\ndef lateralsuface_triangle(r,h):\n    '''\n    Write a function to find the lateral surface area of a triangle.\n    '''\n    return r*h\ndef lateralsuface_triangle(r,h):\n    '''\n    Write a function to find the lateral surface area of a triangle.\n    '''\n    return r*h\ndef lateralsuface_circular_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a circular cylinder.\n    '''\n    return (2*pi*r) + (2*pi*r*h)\ndef lateralsuface_circle(r):\n    '''\n    Write a function to find the lateral surface area of a circle.\n    '''\n    return 2*pi*r*r\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*r*r\ndef lateralsuface_circular_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a circular cone.\n    '''\n    return pi*r*h + (2*pi*r*h)\ndef lateralsuface_circle(r):\n    '''\n    Write a function to find the lateral surface area of a circle.\n    '''\n    return 2*pi*r*r\ndef lateralsuface_rectangle(r,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle.\n    '''\n    return r*h\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*r*r + 2*pi*r*h\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*r*r\ndef lateralsuface_triangle(r,h):\n    '''\n    Write a function to find the lateral surface area of a triangle.\n    '''\n    return r*h\ndef lateralsuface_spheroid(r,h):\n    '''\n    Write a function to find the lateral surface area of a spheroid.\n    '''\n    return 2*pi*r*(r+h)\ndef lateralsuface_pyramid(r,h):\n    '''\n    Write a function to find the lateral surface area of a pyramid.\n    '''\n    return r*r*h\ndef lateralsuface_triangle(r,h):\n    '''\n    Write a function to find the lateral surface area of a triangle.\n    '''\n    return r*h\ndef lateralsuface_pyramid(r,h):\n    '''\n    Write a function to find the lateral surface area of a pyramid.\n    '''\n    return r*r*h\ndef lateralsuface_triangle(r,h):\n    '''\n    Write a function to find the lateral surface area of a triangle.\n    '''\n    return r*h\ndef lateralsuface_cube(r):\n    '''\n    Write a function to find the lateral surface area of a cube.\n    '''\n    return 6*r*r\ndef lateralsuface_pyramid(r,h):\n    '''\n    Write a function to find the lateral surface area of a pyramid.\n    '''\n    return r*r*h\ndef lateralsuface_spheroid(r,h):\n    '''\n    Write a function to find the lateral surface area of a spheroid.\n    '''\n    return 2*pi*r*(r+h)\ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return pi*r*h\ndef lateralsuface_rectangle(r,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle.\n    '''\n    return r*h\ndef lateralsuface_triangle(r,h):\n    '''\n    Write a function to find the lateral surface area of a triangle.\n    '''\n    return r*h\ndef lateralsuface_rectangle(r,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle.\n    '''\n    return r*h\ndef lateralsuface_triangle(r,h):\n    '''\n    Write a function to find the lateral surface area of a triangle.\n    '''\n    return r*h\ndef lateralsuface_triangle(r,h):\n    '''\n    Write a function to find the lateral surface area of a triangle.\n    '''\n    return r*h\ndef lateralsuface_circular_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a circular cylinder.\n    '''\n    return (2*pi*r) + (2*pi*r*h)\ndef lateralsuface_circle(r):\n    '''\n    Write a function to find the lateral surface area of a circle.\n    '''\n    return 2*pi*r*r\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*r*r\ndef lateralsuface_circular_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a circular cone.\n    '''\n    return pi*r*h + (2*pi*r*h)\ndef lateralsuface_circle(r):\n    '''\n    Write a function to find the lateral surface area of a circle.\n    '''\n    return 2*pi*r*r\ndef lateralsuface_rectangle(r,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle.",
        "num_ids": 16
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    volume=pi*(r**2)*h\n    surf=2*(pi*(r**2))+(h*pi)*(2*r)\n    return surf\n    \ndef lateralsuface_sphere(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    volume=4/3*pi*(r**3)*h\n    surf=4*pi*(r**2)+(h*4*pi)*(r**2)\n    return surf\n    \ndef lateralsuface_cube(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cube.\n    '''\n    volume=l*w*h\n    surf=2*(l*w+l*h+w*h)\n    return surf\n",
        "num_ids": 35
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.141592653589793\n    return pi * (r**2) + pi * (r * h)\n",
        "num_ids": 32
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return np.pi * r * (r+h)\n",
        "num_ids": 16
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    s = r * h\n    print 'The area of the lateral surface is:'+ str(s)\n",
        "num_ids": 42
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Cylinder Area = 2*pi*radius*radius + 2*pi*radius*height\n    # Volume of a Cylinder = pi*radius*radius*height + pi*radius*radius*h\n    # lateral surface area = 2*pi*radius*radius + 2*pi*radius*height\n    # sf = pi*radius*radius + 2*pi*radius*height\n    # Volume of a Cylinder = pi*radius*radius*height\n    # sf = 2*pi*radius*radius*height\n    return 2*math.pi*r*r + 2*math.pi*r*h\n",
        "num_ids": 145
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Your code here\n    return (r**2)*math.pi*2+(r+h)**2*math.pi\n",
        "num_ids": 32
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    def inner_surface_cylinder(r,h):\n        '''\n        Write a function to find the inner surface area of a cylinder.\n        '''\n        pi = 3.14\n        return 2*pi*r*h + 2*pi*r**2\n    def base_surface_cylinder(r,h):\n        '''\n        Write a function to find the base surface area of a cylinder.\n        '''\n        pi = 3.14\n        return pi*r**2 + 2*pi*r*h\n    return base_surface_cylinder(r,h) + inner_surface_cylinder(r,h)\n",
        "num_ids": 51
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return math.pi * r * (r + h)\n",
        "num_ids": 16
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    #!/usr/bin/env python\n    # find_volume.py\n    # Author: Mauricio Matamoros\n    # Question 3.3\n    # Purpose: Find the volume of a cube\n    # Input: The length of each side of a cube (int)\n    # Output: The volume of the cube (float)\n    # Example: input: 5; output: 125\n    return l**3\n",
        "num_ids": 95
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    import math\n    return pow(l, 3)\n",
        "num_ids": 15
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l*l*l\n",
        "num_ids": 10
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    if l < 0:\n        raise ValueError(\"Cube side length must be non-negative.\")\n    return l**3\n",
        "num_ids": 30
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n",
        "num_ids": 8
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert n to binary string\n    binary_str = str(bin(n)[2:])\n    # Initialise an empty list to store binary string\n    binary_list = []\n    # Iterate through the string and if an '0' is found, append '0' to the list\n    for i in range(0, len(binary_str)):\n        if binary_str[i] == '0':\n            binary_list.append('0')\n        # If an '1' is found, append '1' to the list\n        else:\n            binary_list.append('1')\n    # Convert list to string\n    binary_str = ''.join(binary_list)\n    # Iterate through the string and if a '1' is found, increment the number of '1's\n    count = 0\n    for i in range(0, len(binary_str)):\n        if binary_str[i] == '1':\n            count = count + 1\n    # Return the number of '1's in the string\n    return count\n    \ndef is_palindrome(n): \n    '''\n    Write a python function to check whether a given number is palindrome or not.\n    '''\n    # Convert n to binary string\n    binary_str = str(bin(n)[2:])\n    # Initialise an empty list to store binary string\n    binary_list = []\n    # Iterate through the string and if an '1' is found, append '1' to the list\n    for i in range(0, len(binary_str)):\n        if binary_str[i] == '1':\n            binary_list.append('1')\n        # If an '0' is found, append '0' to the list\n        else:\n            binary_list.append('0')\n    # Convert list to string\n    binary_str = ''.join(binary_list)\n    # Check if the string is identical to its reverse\n    if binary_str == binary_str[::-1]:\n        return True\n    return False\n    \ndef is_equal(n): \n    '''\n    Write a python function to check whether two numbers are equal or not.\n    '''\n    # Check if the first number is equal to the second number\n    if n == n_2:\n        return True\n    return False\n    \ndef count_bit(n): \n    '''\n    Write a python function to count the number of 1 bits in a given number.\n    '''\n    # Convert n to binary string\n    binary_str = str(bin(n)[2:])\n    # Initialise an empty list to store binary string\n    binary_list = []\n    # Iterate through the string and if a '1' is found, increment the number of '1's\n    count = 0\n    for i in range(0, len(binary_str)):\n        if binary_str[i] == '1':\n            count = count + 1\n    # Return the number of '1's in the string\n    return count\n    \ndef set_bit(n, k): \n    '''\n    Write a python function to set kth bit in a given number.\n    '''\n    # Convert n to binary string\n    binary_str = str(bin(n)[2:])\n    # Initialise an empty list to store binary string\n    binary_list = []\n    # Iterate through the string and if a '1' is found, increment the number of '1's\n    for i in range(0, len(binary_str)):\n        if binary_str[i] == '1':\n            binary_list.append('1')\n        else:\n            binary_list.append('0')\n    # Convert list to string\n    binary_str = ''.join(binary_list)\n    # Iterate through the string and set the kth bit to '1'\n    for i in range(0, k):\n        if binary_str[i] == '1':\n            binary_str = binary_str[:i] + '1' + binary_str[i+1:]\n    # Return the number after converting it to binary string\n    return int(binary_str, 2)\n    \ndef unset_bit(n, k): \n    '''\n    Write a python function to unset kth bit in a given number.\n    '''\n    # Convert n to binary string\n    binary_str = str(bin(n)[2:])\n    # Initialise an empty list to store binary string\n    binary_list = []\n    # Iterate through the string and if a '1' is found, increment the number of '1's\n    for i in range(0, len(binary_str)):\n        if binary_str[i] == '1':\n            binary_list.append('1')\n        else:\n            binary_list.append('0')\n    # Convert list to string\n    binary_str = ''.join(binary_list)\n    # Iterate through the string and unset the kth bit to '0'\n    for i in range(0, k):\n        if binary_str[i] == '1':\n            binary_str = binary_str[:i] + '0' + binary_str[i+1:]\n    # Return the number after converting it to binary string\n    return int(binary_str, 2)\n    \ndef check_bit(n, k): \n    '''\n    Write a python function to check kth bit in a given number.\n    '''\n    # Convert n to binary string\n    binary_str = str(bin(n)[2:])\n    # Initialise an empty list to store binary string\n    binary_list = []\n    # Iterate through the string and if a '1' is found, increment the number of '1's\n    for i in range(0, len(binary_str)):\n        if binary_str[i] == '1':\n            binary_list.append('1')\n        else:\n            binary_list.append('0')\n    # Convert list to string\n    binary_str = ''.join(binary_list)\n    # Iterate through the string and check if the kth bit is '1'\n    if binary_str[k-1] == '1':\n        return True\n    return False\n    \ndef is_power_of_2(n): \n    '''\n    Write a python function to check whether a given number is a power of 2 or not.\n    '''\n    # Check if the first bit is 1\n    if n & (n-1) == 0:\n        return True\n    return False\n    \ndef is_power_of_3(n): \n    '''\n    Write a python function to check whether a given number is a power of 3 or not.\n    '''\n    # Check if the first bit is 1\n    if n & (n-1) == 0:\n        return False\n    # Check if the second bit is 1\n    if n & (n-2) == 0:\n        return False\n    # Check if the third bit is 1\n    if n & (n-4) == 0:\n        return False\n    # Check if the fourth bit is 1\n    if n & (n-8) == 0:\n        return False\n    # If none of the above conditions are satisfied, the number is a power of 3\n    return True\n    \ndef is_power_of_4(n): \n    '''\n    Write a python function to check whether a given number is a power of 4 or not.\n    '''\n    # Check if the first bit is 1\n    if n & (n-1) == 0:\n        return False\n    # Check if the second bit is 1\n    if n & (n-2) == 0:\n        return False\n    # Check if the third bit is 1\n    if n & (n-4) == 0:\n        return False\n    # Check if the fourth bit is 1\n    if n & (n-8) == 0:\n        return False\n    # Check if the fifth bit is 1\n    if n & (n-16) == 0:\n        return False\n    # If none of the above conditions are satisfied, the number is a power of 4\n    return True\n    \ndef is_power_of_5(n): \n    '''\n    Write a python function to check whether a given number is a power of 5 or not.\n    '''\n    # Check if the first bit is 1\n    if n & (n-1) == 0:\n        return False\n    # Check if the second bit is 1\n    if n & (n-2) == 0:\n        return False\n    # Check if the third bi",
        "num_ids": 63
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n_even_bits = 0\n    while(n > 0): \n        n_even_bits += n%2\n        n = n//2\n    return n_even_bits\n",
        "num_ids": 46
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    \n    return bin(n)[2:].count('1')\n",
        "num_ids": 18
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n-1) \n",
        "num_ids": 13
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return ((n & 0x5555555555555555) == 0)\n",
        "num_ids": 22
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return (n & 0x55555555) + (n & 0xAAAAAAAA) \n",
        "num_ids": 24
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xAAAAAAAA\n",
        "num_ids": 10
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n ^ (n & 0x55)\n",
        "num_ids": 14
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0x55555555\n",
        "num_ids": 13
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    x=n\n    x=x&~(x-1)\n    return x\n",
        "num_ids": 23
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = {}\n    for test_item in test_list:\n        test_dict[test_item] = test_dict.get(test_item, 0) + 1\n    return test_dict\n",
        "num_ids": 51
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    list_of_tuples = []\n    for elem in test_list:\n        list_of_tuples.append(elem[0:2])\n    counter = Counter(list_of_tuples)\n    return counter\n",
        "num_ids": 57
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\n",
        "num_ids": 11
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = {}\n    for i in test_list:\n        if i in test_dict:\n            test_dict[i] += 1\n        else:\n            test_dict[i] = 1\n    return test_dict\n",
        "num_ids": 57
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\ndef count_common_items(common_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(common_list)\n",
        "num_ids": 11
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for x in test_list:\n        if x[0] in occurences.keys():\n            occurences[x[0]] += 1\n        else:\n            occurences[x[0]] = 1\n    return occurences\n",
        "num_ids": 66
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = Counter(test_list)\n    print occurences\n",
        "num_ids": 20
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return counter\n",
        "num_ids": 16
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for x in test_list:\n        if x not in occurence_dict.keys():\n            occurence_dict[x] = 1\n        else:\n            occurence_dict[x] += 1\n    return occurence_dict\ndef find_missing(a_list):\n    '''\n    Write a function that takes in a list and returns the missing number\n    '''\n    occurence_dict = Counter(a_list)\n    total_num = len(a_list)\n    for i in range(total_num):\n        if occurence_dict[i]!= i+1:\n            return i+1\n    return None\ndef find_duplicates(a_list):\n    '''\n    Write a function that takes in a list and returns a list of duplicates found in the list\n    '''\n    duplicate_list = []\n    for x in a_list:\n        if a_list.count(x) > 1:\n            if x not in duplicate_list:\n                duplicate_list.append(x)\n    return duplicate_list\ndef find_range(a_list):\n    '''\n    Write a function that takes in a list of numbers and returns the range of the list\n    '''\n    if len(a_list) == 1:\n        return [a_list[0],a_list[0]]\n    range_list = []\n    range_list.append(a_list[0])\n    range_list.append(a_list[-1])\n    return range_list\ndef most_frequent(a_list):\n    '''\n    Write a function that takes in a list of numbers and returns the number with the highest frequency in the list\n    '''\n    if len(a_list) == 1:\n        return a_list[0]\n    occurence_dict = Counter(a_list)\n    max_occurence = occurence_dict.most_common(1)\n    return max_occurence[0][0]\ndef reverse_list(a_list):\n    '''\n    Write a function that takes in a list and returns a new list that is the reverse of the old list\n    '''\n    if len(a_list) == 1:\n        return a_list\n    a_list.reverse()\n    return a_list\ndef longest_word(a_list):\n    '''\n    Write a function that takes in a list of strings and returns the string with the longest length\n    '''\n    longest_word = a_list[0]\n    for word in a_list:\n        if len(longest_word) < len(word):\n            longest_word = word\n    return longest_word\ndef is_palindrome(a_string):\n    '''\n    Write a function that takes in a string and returns true if the string is a palindrome and false otherwise\n    '''\n    if a_string == a_string[::-1]:\n        return True\n    else:\n        return False\ndef is_anagram(a_list):\n    '''\n    Write a function that takes in a list of strings and returns true if the list is an anagram of each other and false otherwise\n    '''\n    if len(a_list) == 1:\n        return True\n    for word1 in a_list:\n        for word2 in a_list:\n            if word1 == word2:\n                a_list.remove(word1)\n                return False\n    return True\ndef is_rotated(a_list):\n    '''\n    Write a function that takes in a list of tuples and returns true if the list is a rotated version of itself and false otherwise\n    '''\n    if len(a_list) == 1:\n        return True\n    for i in range(len(a_list)-1):\n        if a_list[i] == a_list[i+1]:\n            return True\n    return False\ndef is_sorted(a_list):\n    '''\n    Write a function that takes in a list of numbers and returns true if the list is sorted and false otherwise\n    '''\n    if len(a_list) == 1:\n        return True\n    for i in range(len(a_list)-1):\n        if a_list[i] > a_list[i+1]:\n            return False\n    return True\ndef is_rotated_v2(a_list):\n    '''\n    Write a function that takes in a list of tuples and returns true if the list is a rotated version of itself and false otherwise\n    '''\n    if len(a_list) == 1:\n        return True\n    if a_list[0] == a_list[-1]:\n        return True\n    for i in range(len(a_list)-1):\n        if a_list[i] == a_list[i+1]:\n            return True\n    return False\ndef is_rotated_v3(a_list):\n    '''\n    Write a function that takes in a list of tuples and returns true if the list is a rotated version of itself and false otherwise\n    '''\n    if len(a_list) == 1:\n        return True\n    if a_list[0] == a_list[-1]:\n        return True\n    left = 0\n    right = len(a_list)-1\n    while left < right:\n        if a_list[left] == a_list[right]:\n            return True\n        left += 1\n        right -= 1\n    return False\ndef is_rotated_v4(a_list):\n    '''\n    Write a function that takes in a list of tuples and returns true if the list is a rotated version of itself and false otherwise\n    '''\n    if len(a_list) == 1:\n        return True\n    if a_list[0] == a_list[-1]:\n        return True\n    left = 0\n    right = len(a_list)-1\n    while left < right:\n        if a_list[left] == a_list[right]:\n            return True\n        left += 1\n        right -= 1\n    if left == right:\n        return True\n    return False\ndef rotate_matrix(a_list):\n    '''\n    Write a function that takes in a list of tuples and returns a new list that is the transpose of the old list\n    '''\n    if len(a_list) == 1:\n        return a_list\n    matrix = []\n    for i in range(len(a_list[0])):\n        row = []\n        for row in a_list:\n            row.insert(0,row.pop())\n        matrix.append(row)\n    return matrix\ndef spiral_diagonals(a_list):\n    '''\n    Write a function that takes in a list of tuples and returns a new list that is the transpose of the old list\n    '''\n    if len(a_list) == 1:\n        return a_list\n    matrix = []\n    for i in range(len(a_list[0])):\n        row = []\n        for row in a_list:\n            row.insert(0,row.pop())\n        matrix.append(row)\n    return matrix\ndef count_items(a_list):\n    '''\n    Write a function that takes in a list and returns a dictionary mapping each unique item in the list to the number of times it occurs in the list\n    '''\n    occurence_dict = {}\n    for x in a_list:\n        if x not in occurence_dict.keys():\n            occurence_dict[x] = 1\n        else:\n            occurence_dict[x] += 1\n    return occurence_dict\ndef get_squares(a_list):\n    '''\n    Write a function that takes in a list of tuples and returns a new list of tuples of the form (x_square,y_square,z_square) where x_square is the square of x, y_square is the square of y, and z_square is the square of z\n    '''\n    if len(a_list) == 1:\n        return a_list\n    for i in range(len(a_list)):\n        a_list[i] = (a_list[i][0]**2,a_list[i][1]**2,a_list[i][2]**2)\n    return a_list\nde",
        "num_ids": 84
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for item in test_list:\n        if item not in occurences:\n            occurences[item] = 0\n        occurences[item] += 1\n    return occurences\n",
        "num_ids": 54
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(str):\n        count += 1\n        if str[i] =='':\n            i += 1\n            continue\n        j = i + 1\n        while j < len(str) and str[j]!='':\n            j += 1\n        count += 1\n        i = j\n    return count\n",
        "num_ids": 88
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i:j+1]!= '':\n                count += 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    len_str = len(str)\n    len_substring = 0\n    for i in range(len_str):\n        count = 1\n        for j in range(i + 1, len_str):\n            if str[j] == str[i]:\n                count += 1\n            else:\n                break\n        if count > 1:\n            len_substring += 1\n    return len_substring\n",
        "num_ids": 97
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        if str[i]!='': \n            count += 1\n        else: \n            count += 2\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i]!='':\n            count += 1\n        else:\n            count += 1\n            for j in range(i+1,len(str)):\n                if str[j]!='':\n                    count += 1\n                else:\n                    count += 1\n                    break\n    print count\n    \nnumber_of_substrings('Hello world')\nnumber_of_substrings('Hi there!')\nnumber_of_substrings('the quick brown fox')",
        "num_ids": 129
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    # declare a 2D array to store the counts of substrings\n    count = [[0 for i in range(n)] for j in range(n)]\n    # mark the first column with 1, since there is one non-empty substring of all the characters\n    for i in range(n):\n        count[i][0] = 1\n    # mark the first row with 1, since there is one non-empty substring of all the characters\n    for i in range(1, n):\n        for j in range(i, n):\n            if str[i-1] == str[j]:\n                count[i][j] = count[i-1][j-1] + 1\n            else:\n                count[i][j] = 1\n    # print the count of non-empty substrings of a given string\n    print count\n",
        "num_ids": 201
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1]!= '':\n                count += 1\n    print count\n",
        "num_ids": 57
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # empty string\n    if str == '':\n        return 0\n    # initializing the count\n    count = 0\n    # i: current index, j: current length of the substring\n    i, j = 0, 1\n    # j is decremented, as string will start with char at index 0\n    while j <= len(str):\n        # if the current char is not a space, incremented the count and move to next index\n        if str[i]!='':\n            count = count + 1\n        # increment i, and then j\n        i = i + 1\n        j = j + 1\n    return count\n    # NOTE: \n    # The while loop is used to traverse the whole string and \n    # the if statement is used to keep the string within the bounds of the string\n    # i = 0\n    # j = 0\n    # while j < len(str) and i < len(str):\n    #     if str[i]!='':\n    #         j = j + 1\n    #     i = i + 1\n    #     j = j + 1\n    # return j - 1\n    # # NOTE: \n    # # If the while loop was not used, then we would need to traverse \n    # # the whole string from the beginning and increment j only when the condition is met\n    # while j < len(str):\n    #     if str[i]!='':\n    #         j = j + 1\n    #     i = i + 1\n    # return j\n",
        "num_ids": 353
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len([s for s in re.split(r'\\W+',str) if s])\n",
        "num_ids": 26
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    total = 0\n    for i in range(0, len(str)):\n        for j in range(i+1, len(str)):\n            if str[i] == str[j]:\n                total = total + 1\n    return total\n",
        "num_ids": 60
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #the size of the possible subsequences\n    k = n * (n+1)\n    #number of possible permutations\n    l = math.factorial(n)\n    #number of possible sequences\n    m = m + 1\n    return int(l / k / m)\n",
        "num_ids": 67
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return int(math.factorial(n)/(math.factorial(n-m)*math.factorial(m)))\n",
        "num_ids": 31
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # my solution\n    if m < 2 or n < 1:\n        return 0\n    elif m == 2 and n == 1:\n        return 1\n    elif m == 2 and n > 1:\n        return n\n    elif m < 2 and n > 1:\n        return 0\n",
        "num_ids": 72
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Input: An integer m, denoting the number of elements in a sequence, and another integer n, denoting the length of the sequence.\n    # Output: The number of sequences of length n such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    if m == 0:\n        return 0\n    elif m == 1:\n        return 1\n    elif m == 2:\n        return 2\n    elif m == 3:\n        return 4\n    else:\n        return get_total_number_of_sequences(m-1, n) + get_total_number_of_sequences(m-2, n-1) + get_total_number_of_sequences(m-3, n-2)\n",
        "num_ids": 184
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m == 1:\n        return 1\n    else:\n        return 2 * get_total_number_of_sequences(m-1,n)\n",
        "num_ids": 39
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return m**(n-1)\n",
        "num_ids": 12
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return reduce(lambda x, y: x * y, range(1, m)) / reduce(lambda x, y: x * y, range(2, n + 1))\n    \nassert get_total_number_of_sequences(10, 3) == 60\nassert get_total_number_of_sequences(10, 5) == 210\nassert get_total_number_of_sequences(10, 15) == 4290\nassert get_total_number_of_sequences(10, 16) == 25800\nassert get_total_number_of_sequences(10, 17) == 30450\nassert get_total_number_of_sequences(10, 19) == 25400\n",
        "num_ids": 162
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    result = 0\n    for i in range(1,n):\n        result += m - 2*i\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return m*(m+1)//2 - n*(n+1)//2\n",
        "num_ids": 24
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    result = list1\n    for i in range(0,len(list2)):\n        result[len(list1)-1] = list2[i]\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1)>len(list2):\n        for i in range(len(list2)):\n            list1[-1-i]=list2[i]\n    else:\n        for i in range(len(list1)):\n            list1[-1-i]=list2[i]\n    return list1\n",
        "num_ids": 81
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    \n    for i in range(len(list1)):\n        list1[i] = list1[i] + list2[i]\n        \n    return list1\n",
        "num_ids": 43
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n    \ndef remove_last(list1):\n    '''\n    Write a function that takes in a list of numbers and removes the last element of the list.\n    '''\n    del list1[-1:]\n    return list1\n    \ndef add_last(list1):\n    '''\n    Write a function that takes in a list of numbers and returns a new list that is the original list plus its last element.\n    '''\n    list1[-1:] = [len(list1)]\n    return list1\n    \ndef replace_last(list1):\n    '''\n    Write a function that takes in a list of numbers and returns a new list that is the original list with its last element replaced by the sum of the first and second last elements.\n    '''\n    list1[-1:] = [list1[-2] + list1[-3]]\n    return list1\n",
        "num_ids": 30
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == len(list2):\n        list1[-1:] = list2\n        return list1\n    else:\n        return False\n",
        "num_ids": 40
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1]=list2\n",
        "num_ids": 12
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    str1 = str1.lower()\n    str2 = str1\n    for ch in 'aeiou':\n        str2 = str2.replace(ch, '')\n    return len(str2)\n",
        "num_ids": 51
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count=0\n    for i in str1:\n        count+=1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    length = len(str1)\n    print(\"Number of characters in the string is: \" + str(length))\n",
        "num_ids": 29
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    sum = 0\n    for i in str1:\n        sum = sum + 1\n    return sum\n",
        "num_ids": 26
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count=0\n    for i in str1:\n        count+=1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    temp = int(math.sqrt(N))\n    if temp * temp == N:\n        return (temp + 1)**2\n    else:\n        return -1\ndef next_Power_of_2(N):\n    '''\n    Write a python function to find the next power of 2 greater than a given number.\n    '''\n    n = 1\n    while n <= N:\n        n = n << 1\n    return n\ndef next_Power_of_3(N):\n    '''\n    Write a python function to find the next power of 3 greater than a given number.\n    '''\n    n = 1\n    while n <= N:\n        n = n << 1\n    return n\ndef pythagoras(a, b):\n    '''\n    Write a python function to find the hypotenuse of a right angle triangle from the lengths of the opposite sides.\n    '''\n    return math.sqrt(a**2 + b**2)\ndef find_GCD(x, y):\n    '''\n    Write a python function to find the greatest common divisor.\n    '''\n    if x < y:\n        small = x\n    else:\n        small = y\n    for i in range(1, small+1):\n        if((x % i == 0) and (y % i == 0)):\n            gcd = i \n    return gcd\ndef LCM(x, y):\n    '''\n    Write a python function to find the least common multiple.\n    '''\n    if x > y:\n        greater = x\n    else:\n        greater = y\n    while (True):\n        if((greater % x == 0) and (greater % y == 0)):\n            lcm = greater\n            break\n        greater += 1\n    return lcm\ndef split_array(arr, n):\n    '''\n    Write a python function to split a array into parts of equal length.\n    '''\n    for i in range(0, len(arr), n):\n        yield arr[i:i+n]\ndef split_array2(arr, n):\n    '''\n    Write a python function to split a array into parts of equal length.\n    '''\n    res = []\n    if len(arr) % n == 0:\n        for i in range(0, len(arr), n):\n            res.append(arr[i:i+n])\n    else:\n        for i in range(0, len(arr)):\n            res.append(arr[i])\n        for i in range(n - len(arr) % n):\n            res.append(arr[-1])\n    return res\ndef find_Max_Size(arr):\n    '''\n    Write a python function to find the size of the largest sub-array with 0's and 1's.\n    '''\n    temp = 0\n    if len(arr) == 0:\n        return 0\n    else:\n        if arr[0] == 0:\n            temp += 1\n        elif arr[0] == 1:\n            temp += 2\n        for i in range(1, len(arr)):\n            if arr[i] == 1:\n                temp += 1\n            elif arr[i] == 0:\n                if temp == 0:\n                    temp = 2\n                else:\n                    temp = 0\n    return temp\ndef find_Max_Size2(arr):\n    '''\n    Write a python function to find the size of the largest sub-array with 0's and 1's.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        if arr[0] == 0:\n            if len(arr) == 1:\n                return 0\n            else:\n                return 1\n        elif arr[0] == 1:\n            if len(arr) == 1:\n                return 1\n            else:\n                return 2\n        else:\n            return 0\ndef find_Max_Size3(arr):\n    '''\n    Write a python function to find the size of the largest sub-array with 0's and 1's.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        if arr[0] == 0:\n            temp = 1\n        elif arr[0] == 1:\n            temp = 2\n        else:\n            temp = 0\n        for i in range(1, len(arr)):\n            if arr[i] == 0:\n                temp = 1\n            elif arr[i] == 1:\n                temp = 2\n            else:\n                temp = 0\n        return temp\ndef find_Max_Size4(arr):\n    '''\n    Write a python function to find the size of the largest sub-array with 0's and 1's.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        if arr[0] == 0:\n            temp = 1\n        elif arr[0] == 1:\n            temp = 2\n        else:\n            temp = 0\n        max_size = temp\n        for i in range(1, len(arr)):\n            if arr[i] == 0:\n                temp = 1\n            elif arr[i] == 1:\n                temp = 2\n            else:\n                temp = 0\n            max_size = max(temp, max_size)\n        return max_size\ndef find_Max_Size5(arr):\n    '''\n    Write a python function to find the size of the largest sub-array with 0's and 1's.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        if arr[0] == 0:\n            temp = 1\n        elif arr[0] == 1:\n            temp = 2\n        else:\n            temp = 0\n        max_size = temp\n        for i in range(1, len(arr)):\n            if arr[i] == 0:\n                temp = 1\n            elif arr[i] == 1:\n                temp = 2\n            else:\n                temp = 0\n            max_size = max(temp, max_size)\n        return max_size\ndef find_Max_Size6(arr):\n    '''\n    Write a python function to find the size of the largest sub-array with 0's and 1's.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        if arr[0] == 0:\n            temp = 1\n        elif arr[0] == 1:\n            temp = 2\n        else:\n            temp = 0\n        max_size = temp\n        for i in range(1, len(arr)):\n            if arr[i] == 0:\n                temp = 1\n            elif arr[i] == 1:\n                temp = 2\n            else:\n                temp = 0\n            if max_size < temp:\n                max_size = temp\n        return max_size\ndef find_Max_Size7(arr):\n    '''\n    Write a python function to find the size of the largest sub-array with 0's and 1's.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        if arr[0] == 0:\n            temp = 1\n        elif arr[0] == 1:\n            temp = 2\n        else:\n            temp = 0\n        max_size = temp\n        for i in range(1, len(arr)):\n            if arr[i] == 0:\n                temp = 1\n            elif arr[i] == 1:\n                temp = 2\n            else:\n                temp = 0\n            if max_size < temp:\n                max_size = temp\n        return max_size\ndef find_Max_Size8(arr):\n    '''\n    Write a python function to find the size of the largest sub-array with 0's and 1's.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        if arr[0] == 0:\n            temp = 1\n        elif arr[0] == 1:\n            temp = 2\n        else:\n            temp = 0\n        max_size = temp\n        for i in range(1, len(arr)):\n            if arr[i] == 0:\n                temp = 1\n            elif arr[i] == 1:\n                temp = 2\n            else:\n                temp = 0\n            if temp > max_size:\n                max_size = temp\n        return max_size\ndef find_Max_Size9(arr):\n    '''\n    Write a python functio",
        "num_ids": 9
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N)))\n    \ndef search_by_bounds(A, x):\n    '''\n    Write a python function to find the bounds (left and right) of an array (excluding the bounds)\n    such that the sum of elements in the array from the lower bound (inclusive) to the upper bound (exclusive) is equal to the given number.\n    '''\n    lo = 0\n    hi = len(A)\n    while lo < hi:\n        mid = lo + (hi-lo)/2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            hi = mid\n        else:\n            lo = mid+1\n    return lo\n",
        "num_ids": 79
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N<0:\n        N=N*(-1)\n    if N==0:\n        return 1\n    n=(math.ceil(math.sqrt(N)))**2\n    while(True):\n        n=n+1\n        i=2\n        while(i<=n):\n            if(n%i==0):\n                break\n            i=i+1\n        if(i>n):\n            return n\n",
        "num_ids": 106
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = int(math.sqrt(N))\n    root += 1\n    while (root*root <= N):\n        root += 1\n    return root * root\n",
        "num_ids": 41
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    i = 1\n    while i*i <= N:\n        i = i + 1\n    return i*i \ndef find_max_diff(ar):\n    '''\n    Write a python function to find the maximum difference between consecutive numbers.\n    '''\n    N = len(ar)\n    max_diff = 0\n    for i in range(N-1):\n        if ar[i+1] - ar[i] > max_diff:\n            max_diff = ar[i+1] - ar[i]\n    return max_diff\ndef find_sum_square_difference(arr):\n    '''\n    Write a python function to find the sum of the squares of a list of numbers and return the difference between the largest and smallest numbers.\n    '''\n    N = len(arr)\n    max_diff = 0\n    min_diff = 0\n    sum_arr = 0\n    for i in range(N):\n        sum_arr = sum_arr + arr[i]*arr[i]\n    for i in range(N):\n        min_diff = min(arr[i],arr[N-i-1])\n        max_diff = max(arr[i],arr[N-i-1])\n    return max_diff - min_diff\ndef find_missing_element(ar):\n    '''\n    Write a python function to find the element in a list is absent.\n    '''\n    N = len(ar)\n    for i in range(N):\n        if ar[i]!= i:\n            return i\n    return N+1\ndef find_min_max(ar):\n    '''\n    Write a python function to find the minimum and maximum number from a list.\n    '''\n    N = len(ar)\n    min_num = ar[0]\n    max_num = ar[0]\n    for i in range(N):\n        if ar[i] < min_num:\n            min_num = ar[i]\n        elif ar[i] > max_num:\n            max_num = ar[i]\n    return min_num,max_num\ndef find_largest_item(ar):\n    '''\n    Write a python function to find the largest number in a list.\n    '''\n    N = len(ar)\n    max_num = ar[0]\n    for i in range(N):\n        if ar[i] > max_num:\n            max_num = ar[i]\n    return max_num\ndef find_largest_item(ar):\n    '''\n    Write a python function to find the largest number in a list.\n    '''\n    N = len(ar)\n    max_num = ar[0]\n    for i in range(N):\n        if ar[i] > max_num:\n            max_num = ar[i]\n    return max_num\ndef find_smallest_item(ar):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    N = len(ar)\n    min_num = ar[0]\n    for i in range(N):\n        if ar[i] < min_num:\n            min_num = ar[i]\n    return min_num\ndef find_smallest_item(ar):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    N = len(ar)\n    min_num = ar[0]\n    for i in range(N):\n        if ar[i] < min_num:\n            min_num = ar[i]\n    return min_num\ndef find_smallest_item(ar):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    N = len(ar)\n    min_num = ar[0]\n    for i in range(N):\n        if ar[i] < min_num:\n            min_num = ar[i]\n    return min_num\ndef find_largest_item(ar):\n    '''\n    Write a python function to find the largest number in a list.\n    '''\n    N = len(ar)\n    max_num = ar[0]\n    for i in range(N):\n        if ar[i] > max_num:\n            max_num = ar[i]\n    return max_num\ndef find_largest_item(ar):\n    '''\n    Write a python function to find the largest number in a list.\n    '''\n    N = len(ar)\n    max_num = ar[0]\n    for i in range(N):\n        if ar[i] > max_num:\n            max_num = ar[i]\n    return max_num\ndef find_smallest_item(ar):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    N = len(ar)\n    min_num = ar[0]\n    for i in range(N):\n        if ar[i] < min_num:\n            min_num = ar[i]\n    return min_num\ndef find_smallest_item(ar):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    N = len(ar)\n    min_num = ar[0]\n    for i in range(N):\n        if ar[i] < min_num:\n            min_num = ar[i]\n    return min_num\ndef find_smallest_item(ar):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    N = len(ar)\n    min_num = ar[0]\n    for i in range(N):\n        if ar[i] < min_num:\n            min_num = ar[i]\n    return min_num\ndef find_largest_item(ar):\n    '''\n    Write a python function to find the largest number in a list.\n    '''\n    N = len(ar)\n    max_num = ar[0]\n    for i in range(N):\n        if ar[i] > max_num:\n            max_num = ar[i]\n    return max_num\ndef find_largest_item(ar):\n    '''\n    Write a python function to find the largest number in a list.\n    '''\n    N = len(ar)\n    max_num = ar[0]\n    for i in range(N):\n        if ar[i] > max_num:\n            max_num = ar[i]\n    return max_num\ndef find_largest_item(ar):\n    '''\n    Write a python function to find the largest number in a list.\n    '''\n    N = len(ar)\n    max_num = ar[0]\n    for i in range(N):\n        if ar[i] > max_num:\n            max_num = ar[i]\n    return max_num\ndef find_largest_item(ar):\n    '''\n    Write a python function to find the largest number in a list.\n    '''\n    N = len(ar)\n    max_num = ar[0]\n    for i in range(N):\n        if ar[i] > max_num:\n            max_num = ar[i]\n    return max_num\ndef find_largest_item(ar):\n    '''\n    Write a python function to find the largest number in a list.\n    '''\n    N = len(ar)\n    max_num = ar[0]\n    for i in range(N):\n        if ar[i] > max_num:\n            max_num = ar[i]\n    return max_num\ndef find_largest_item(ar):\n    '''\n    Write a python function to find the largest number in a list.\n    '''\n    N = len(ar)\n    max_num = ar[0]\n    for i in range(N):\n        if ar[i] > max_num:\n            max_num = ar[i]\n    return max_num\ndef find_largest_item(ar):\n    '''\n    Write a python function to find the largest number in a list.\n    '''\n    N = len(ar)\n    max_num = ar[0]\n    for i in range(N):\n        if ar[i] > max_num:\n            max_num = ar[i]\n    return max_num\ndef find_largest_item(ar):",
        "num_ids": 66
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return math.ceil(math.sqrt(N))\n",
        "num_ids": 17
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 0:\n        N = -N\n    sqrtN = math.ceil(math.sqrt(N))\n    return sqrtN * sqrtN\ndef get_factors(N):\n    '''\n    Write a python function to find all the factors of a number and sort them in ascending order.\n    '''\n    f = []\n    for i in range(1,N):\n        if N % i == 0:\n            f.append(i)\n    return f\ndef NextPerfectSquare(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N<0:\n        N = -N\n    n = math.ceil(math.sqrt(N))\n    sqrtN = n * n\n    return sqrtN\ndef Count_Digit_One(A):\n    '''\n    Write a python function to count the number of digits in the number which is given as an integer.\n    '''\n    n = len(str(A))\n    return n\ndef count_binary_strings(N):\n    '''\n    Write a python function to count the number of strings formed by taking\n    binary numbers from the decimal number N and counting the number of zeroes in each string.\n    '''\n    m = N\n    count = 0\n    while m > 0:\n        if m % 2 == 0:\n            m /= 2\n            count += 1\n        else:\n            m -= 1\n            count += 1\n    return count\ndef count_binary_strings_better(N):\n    '''\n    Write a python function to count the number of strings formed by taking\n    binary numbers from the decimal number N and counting the number of zeroes in each string.\n    '''\n    count = 0\n    while N > 0:\n        bit = N % 2\n        count += 1\n        N = N / 2\n    return count\ndef count_binary_strings_alternative(N):\n    '''\n    Write a python function to count the number of strings formed by taking\n    binary numbers from the decimal number N and counting the number of zeroes in each string.\n    '''\n    count = 0\n    while N > 0:\n        count += N % 2\n        N /= 2\n    return count\ndef is_prime(N):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if N == 1:\n        return False\n    elif N == 2:\n        return True\n    else:\n        for i in range(2,N):\n            if N % i == 0:\n                return False\n    return True\ndef is_prime_better(N):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if N == 1:\n        return False\n    elif N == 2:\n        return True\n    else:\n        for i in range(2,N):\n            if N % i == 0:\n                return False\n    return True\ndef is_prime_alternative(N):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if N == 1:\n        return False\n    elif N == 2:\n        return True\n    else:\n        for i in range(2,N):\n            if N % i == 0:\n                return False\n    return True\ndef prime_factors(N):\n    '''\n    Write a python function to find all the prime factors of a number and sort them in ascending order.\n    '''\n    f = []\n    for i in range(1,N):\n        if N % i == 0:\n            f.append(i)\n    return f\ndef Prime_factors(N):\n    '''\n    Write a python function to find all the prime factors of a number and sort them in ascending order.\n    '''\n    f = []\n    for i in range(1,N):\n        if N % i == 0:\n            f.append(i)\n    return f\ndef smallest_factor(N):\n    '''\n    Write a python function to find the smallest factor of a given number.\n    '''\n    f = []\n    for i in range(1,N):\n        if N % i == 0:\n            f.append(i)\n    return min(f)\ndef Smallest_factor(N):\n    '''\n    Write a python function to find the smallest factor of a given number.\n    '''\n    f = []\n    for i in range(1,N):\n        if N % i == 0:\n            f.append(i)\n    return min(f)\ndef Smallest_factor_better(N):\n    '''\n    Write a python function to find the smallest factor of a given number.\n    '''\n    for i in range(1,N):\n        if N % i == 0:\n            return i\n    return N\ndef Smallest_factor_alternative(N):\n    '''\n    Write a python function to find the smallest factor of a given number.\n    '''\n    for i in range(1,N):\n        if N % i == 0:\n            return i\n    return N\ndef is_perfect_number(N):\n    '''\n    Write a python function to check whether a given number is perfect or not.\n    '''\n    sum = 0\n    for i in range(1,N):\n        if N % i == 0:\n            sum += i\n    return sum == N\ndef is_perfect_number_better(N):\n    '''\n    Write a python function to check whether a given number is perfect or not.\n    '''\n    sum = 0\n    for i in range(1,N):\n        if N % i == 0:\n            sum += i\n    return sum == N\ndef is_perfect_number_alternative(N):\n    '''\n    Write a python function to check whether a given number is perfect or not.\n    '''\n    sum = 0\n    for i in range(1,N):\n        if N % i == 0:\n            sum += i\n    return sum == N\ndef get_factors(N):\n    '''\n    Write a python function to find all the factors of a number and sort them in ascending order.\n    '''\n    f = []\n    for i in range(1,N):\n        if N % i == 0:\n            f.append(i)\n    return f\ndef get_factors_better(N):\n    '''\n    Write a python function to find all the factors of a number and sort them in ascending order.\n    '''\n    f = []\n    for i in range(1,N):\n        if N % i == 0:\n            f.append(i)\n    return f\ndef get_factors_alternative(N):\n    '''\n    Write a python function to find all the factors of a number and sort them in ascending order.\n    '''\n    f = []\n    for i in range(1,N):\n        if N % i == 0:\n            f.append(i)\n    return f\ndef get_factors_alternative_better(N):\n    '''\n    Write a python function to find all the factors of a number and sort them in ascending order.\n    '''\n    f = []\n    for i in range(1,N):\n        if N % i == 0:\n            f.append(i)\n    return f\ndef get_factors_alternative_better_2(N):\n    '''\n    Write a python function to find all the factors of a number and sort them in ascending order.\n    '''\n    f = []\n    for i in range(1,N):\n        if N % i == 0:\n            f.append(i)\n    return f\ndef perfect_number_sum(N):\n    '''\n    Write a python function to find the sum of the perfect numbers up to a given number.\n    '''\n    sum = 0\n    for i in range(1,N):\n        if is_perfect_number(i):\n            sum += i\n    return sum\ndef perfect_number_sum_2(N):\n    '''\n    Write a python function to find the sum of the perfect numbers up to a given number.\n    '''\n    sum = 0\n    for i in range(1,N):\n        if is_perfect_number(i):\n            sum += i\n    return sum\ndef perfect_number_sum_alternative(N):\n    '''\n    Writ",
        "num_ids": 4
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.sqrt(N)+1)\n",
        "num_ids": 16
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    i = 1\n    while i*i <= N: \n        i = i + 1\n    return i*i\n",
        "num_ids": 30
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N)))\n",
        "num_ids": 19
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = arr[0]\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        # if both elements are negative we can just use the absolute value of the one that is positive\n        if arr[start] < 0 and arr[end] < 0:\n            start += 1\n        # if both elements are positive we can just use the absolute value of the one that is negative\n        elif arr[start] > 0 and arr[end] > 0:\n            end -= 1\n        # we've found the max value\n        else:\n            if max_sum < arr[start] + arr[end]:\n                max_sum = arr[start] + arr[end]\n            # because we've found the max sum we can move forward and backward in the array\n            start += 1\n            end -= 1\n    return max_sum\n",
        "num_ids": 200
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) < 2:\n        return arr[0]\n    \n    max_ending = arr[0]\n    max_so_far = arr[0]\n    for i in range(1,len(arr)):\n        max_ending = max(arr[i], max_ending + arr[i])\n        max_so_far = max(max_ending, max_so_far)\n    return max_so_far\n",
        "num_ids": 105
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    start = arr[0]\n    end = arr[-1]\n    output = [arr[0], arr[1], arr[2]]\n    \n    for i in range(len(arr)-2, -1, -1):\n        start, end = end, max(start+arr[i], end)\n        output.append(end)\n    return output[::-1]\n",
        "num_ids": 92
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    def max_sequence(arr): \n        '''\n        Use 2 pointers and move them until they reach the highest element or reach the end of the array\n        '''\n        pointer_1,pointer_2 = 0,1\n        max_sum = 0\n        #keep moving the pointer_1 until it reaches the end of the array\n        while pointer_1 < len(arr):\n            if arr[pointer_1] <= arr[pointer_2]: #when the pointer moves in the increasing direction, move the other pointer one step ahead\n                pointer_2 += 1\n            else: #when the pointer moves in the decreasing direction, move the other pointer two steps ahead\n                pointer_2 += 2\n            if pointer_2 == len(arr):\n                break #when the pointer reaches the end of the array, break\n            max_sum = max(max_sum, arr[pointer_1] + arr[pointer_2] - arr[pointer_1]) #update max_sum as the maximum sum that can be formed from the bitonic sequence\n            pointer_1 += 1 #move the pointer_1 one step ahead\n        return max_sum\n    return max_sequence(arr)\n    \narr = [1, 12, -5, -6, 50, 3]\nprint max_sum(arr)\n",
        "num_ids": 253
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    '''\n    Explanation:\n    The bitonic sequence is increasing and decreasing, like a mountain sequence.\n    So we can use a DP to store the maximum sum for the current subsequence.\n    If the current array is increasing, we can find the maximum sum for the current sequence by adding the max of the current subsequence with the maximum sum for the previous subsequence.\n    If the current array is decreasing, we can find the maximum sum for the current sequence by adding the max of the current subsequence with the maximum sum for the previous subsequence.\n    '''\n    global_max = -float('inf')\n    max_subseq = []\n",
        "num_ids": 21
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    t = [0]*len(arr)\n    t[0] = arr[0]\n    for i in range(1,len(arr)):\n        if i<3:\n            t[i] = max(t[i-1]+arr[i],arr[i])\n        else:\n            t[i] = max(t[i-1]+arr[i],t[i-3]+arr[i-1]+arr[i],t[i-2]+arr[i])\n    return t[len(arr)-1]\n",
        "num_ids": 129
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) < 3:\n        return max(arr)\n",
        "num_ids": 19
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max(arr[0], arr[1], arr[2], arr[3])\n",
        "num_ids": 23
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # edge case: array is empty\n    if len(arr) == 0:\n        return 0\n",
        "num_ids": 25
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    bitonic_arr = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i-1] < arr[i]:\n            bitonic_arr.append(arr[i])\n        elif arr[i-1] > arr[i]:\n            bitonic_arr.append(-arr[i])\n        else:\n            bitonic_arr.append(arr[i])\n",
        "num_ids": 100
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.00001\n    guess = number / 2\n    while abs(guess*guess - number) > epsilon:\n        guess = (guess + number / guess) / 2\n    return guess\n",
        "num_ids": 57
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.000001\n    guess = 1.0\n    while abs(guess**2 - number) >= epsilon:\n        guess = (guess + number / guess) / 2.0\n    return guess\n",
        "num_ids": 58
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2\n    count = 0\n    while abs(number - guess**2) >.001:\n        guess = (guess + number/guess)/2\n        count += 1\n    return count, guess\n",
        "num_ids": 56
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while guess * guess!= number:\n        guess = (guess + number / guess) / 2\n    return guess\n",
        "num_ids": 39
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while guess * guess!= number:\n        guess = (guess + number / guess) / 2\n    return guess\n",
        "num_ids": 39
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = 1\n    while True:\n        y = (y + x / y) / 2\n        if y == x:\n            break\n        x = y\n    return y\n",
        "num_ids": 49
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x0 = number/2.0\n    x = x0\n    y = 0.5 * (x - x0)**2\n    while abs(y - x) > 0.000001:\n        x = x0 - y/((2*x)*(1 - x))\n        y = 0.5 * (x - x0)**2\n    return x\n",
        "num_ids": 88
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Set up\n    guess = 1.0\n    counter = 0\n    number_of_attempts = 10\n    number_of_attempts_max = 10\n    # Main loop\n    while (guess**2 - number) > 0.01:\n        counter += 1\n        guess = (guess + number / guess) / 2\n        if counter >= number_of_attempts_max:\n            raise ValueError('Could not converge on square root')\n    return guess\n",
        "num_ids": 117
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2\n    #guess = 0.5 * number\n    i = 0\n    while abs(number - (guess ** 2)) > 0.000001:\n        guess = 0.5 * (guess + (number / guess))\n        i += 1\n    print i\n    print \"Square root of \", number, \" is \", guess\n",
        "num_ids": 86
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    import math\n    def main():\n        number = eval(input(\"Enter a number: \"))\n        assert (number >= 0), 'The number must be positive'\n        x = 1\n        while x**2 <= number:\n            x = x + 1\n        assert (x**2 > number), 'The number must be a perfect square'\n        print('The square root of', number, 'using the babylonian method is', x)\n    main()\n",
        "num_ids": 106
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if not str:\n        return 0\n    return max(lps(str[1:]), lps(str[:-1])) + 1\n",
        "num_ids": 36
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # table[i][j] is true if substring str[i..j] is a palindrome\n    # initialize table as true for all indexes\n    table = [[True]*len(str) for _ in range(len(str))]\n    \n    # initialize result and lps\n    res = 0\n    lps = 0\n    \n    # set all characters to false\n    for i in range(len(str)):\n        table[i][i] = True\n        res = 1\n        \n    # find all substrings of length between 1 and len(str)/2 \n    for length in range(1, len(str)//2+1):\n        # for each substring, check if it is a palindrome\n        for start in range(len(str)-length+1):\n            end = start+length\n            \n            if length == 1:\n                table[start][end] = True\n            else:\n                table[start][end] = (str[start] == str[end]) and table[start+1][end-1]\n                \n            # update result and lps if needed\n            if table[start][end]:\n                res += 2\n                if res > lps:\n                    lps = res\n                    \n    return lps\n    \ndef find_maximum_gold(arr):\n    '''\n    Given an integer array with even length, find the maximum sum of any \n    sequence of consecutive integers in it.\n    \n    For example, if the input is [10, 3, 7, 10, 1, 12], the output should be\n    13 because we can pick numbers 10, 3, 7, 10, 1, and 12.\n    '''\n    table = [[0]*len(arr) for _ in range(len(arr))]\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i == j:\n                table[i][j] = arr[i]\n            elif i == j+1:\n                table[i][j] = arr[i] + arr[j]\n            else:\n                table[i][j] = max(table[i][j-1], table[i-1][j])\n    \n    return table[len(arr)-1][len(arr)-1]\n    \ndef knapsack_0_1_problem(arr, max_weight):\n    '''\n    Given an array of items with associated weight and value,\n    and a max weight, find the maximum value array that \n    can be fit in the knapsack.\n    '''\n    table = [[0]*(max_weight+1) for _ in range(len(arr))]\n    \n    for i in range(len(arr)):\n        for j in range(max_weight+1):\n            if i == 0 or j == 0:\n                table[i][j] = 0\n            elif arr[i][1] <= j:\n                table[i][j] = max(table[i-1][j], table[i-1][j-arr[i][1]] + arr[i][0])\n            else:\n                table[i][j] = table[i-1][j]\n    \n    return table[len(arr)-1][max_weight]\n    \ndef knapsack_0_1_problem_bottom_up(arr, max_weight):\n    '''\n    Given an array of items with associated weight and value,\n    and a max weight, find the maximum value array that \n    can be fit in the knapsack.\n    '''\n    table = [[0]*(max_weight+1) for _ in range(len(arr))]\n    \n    # fill in the top row and column\n    for j in range(len(arr)):\n        for weight in range(max_weight+1):\n            if j == 0 or weight == 0:\n                table[j][weight] = 0\n            elif arr[j][1] <= weight:\n                table[j][weight] = max(table[j-1][weight], table[j-1][weight-arr[j][1]] + arr[j][0])\n            else:\n                table[j][weight] = table[j-1][weight]\n    \n    # fill in the bottom row\n    for j in range(len(arr)-1, -1, -1):\n        for weight in range(max_weight+1):\n            if arr[j][1] > weight:\n                table[j][weight] = table[j-1][weight]\n            else:\n                table[j][weight] = max(table[j-1][weight], table[j][weight-arr[j][1]] + arr[j][0])\n    \n    return table[len(arr)-1][max_weight]\n    \ndef longest_palindromic_substring(str):\n    '''\n    Given a string, find the longest palindromic substring.\n    '''\n    if len(str) <= 1:\n        return str\n    \n    table = [[0]*len(str) for _ in range(len(str))]\n    res = \"\"\n    \n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if i == j:\n                table[i][j] = 1\n                if len(res) < len(str[i:j+1]):\n                    res = str[i:j+1]\n            elif i == j-1:\n                table[i][j] = 2 if str[i] == str[j] else 1\n                if len(res) < len(str[i:j+1]):\n                    res = str[i:j+1]\n            else:\n                table[i][j] = table[i+1][j-1] + 2 if str[i] == str[j] else max(table[i+1][j], table[i][j-1])\n                if len(res) < len(str[i:j+1]):\n                    res = str[i:j+1]\n    \n    return res\n    \ndef longest_palindromic_substring_1(str):\n    '''\n    Given a string, find the longest palindromic substring.\n    '''\n    if len(str) <= 1:\n        return str\n    \n    table = [[0]*len(str) for _ in range(len(str))]\n    res = \"\"\n    \n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if i == j:\n                table[i][j] = 1\n            elif i == j-1:\n                table[i][j] = 2 if str[i] == str[j] else 1\n            else:\n                table[i][j] = table[i+1][j-1] + 2 if str[i] == str[j] else max(table[i+1][j], table[i][j-1])\n            if len(res) < len(str[i:j+1]):\n                res = str[i:j+1]\n    \n    return res\n    \ndef longest_palindromic_substring_2(str):\n    '''\n    Given a string, find the longest palindromic substring.\n    '''\n    if len(str) <= 1:\n        return str\n    \n    table = [[0]*len(str) for _ in range(len(str))]\n    res = \"\"\n    \n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if i == j:\n                table[i][j] = 1\n            elif i == j-1:\n                table[i][j] = 2 if str[i] == str[j] else 1\n            else:\n                table[i][j] = table[i+1][j-1] + 2 if str[i] == str[j] else max(table[i+1][j], table[i][j-1])\n            if table[i][j] == 2:\n                res = str[i:j+1]\n    \n    return res\n    \ndef longest_palindromic_substring_3(str):\n    '''\n    Given a string, find the longest palindromic substring.\n    '''\n    if len(str) <= 1:\n        return str\n    \n    table = [[0]*len(str) for _ in range(len(str))]",
        "num_ids": 39
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    L = [[0 for j in range(n)] for i in range(n)]\n    for i in range(n):\n        L[i][i] = 1\n    for cl in range(2,n+1):\n        for i in range(n-cl+1):\n            j = i+cl-1\n            if str[i] == str[j] and cl == 2:\n                L[i][j] = 2\n            elif str[i] == str[j]:\n                L[i][j] = L[i+1][j-1]+2\n            else:\n                L[i][j] = max(L[i][j-1],L[i+1][j])\n    return L[0][n-1]\n",
        "num_ids": 186
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) == 0:\n        return 0\n    n = len(str)\n    table = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        table[i][i] = 1\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                table[i][j] = 2 + table[i+1][j-1]\n            else:\n                table[i][j] = max(table[i+1][j], table[i][j-1])\n    return table[0][n-1]\n",
        "num_ids": 168
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def isPalindrome(str):\n        return str == str[::-1]\n    \n    def lps(str):\n        def findLPS(str, start, end):\n            if start > end:\n                return 0\n            if isPalindrome(str[start:end+1]):\n                return end - start + 1\n            mid = (start + end) / 2\n            l, r = findLPS(str, start, mid), findLPS(str, mid + 1, end)\n            if isPalindrome(str[start:mid+1]):\n                return max(l, r)\n            else:\n                return max(l, r)\n        return findLPS(str, 0, len(str)-1)\n    \n    return lps(str)\n",
        "num_ids": 187
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # dp[i][j] is the length of the longest palindromic subsequence from str[i] to str[j]\n    dp = [[0 for x in range(n)] for x in range(n)]\n",
        "num_ids": 62
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def lpsHelper(str, start, end):\n        if start>=end:\n            return 0\n        if str[start]==str[end]:\n            return 1 + lpsHelper(str, start+1, end-1)\n        else:\n            return max(lpsHelper(str, start+1, end), lpsHelper(str, start, end-1))\n    return lpsHelper(str, 0, len(str)-1)\n",
        "num_ids": 108
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    # base case\n    if len(str) < 2:\n        return len(str)\n    \n    n = len(str)\n    dp = [[0 for j in range(n)] for i in range(n)]\n",
        "num_ids": 56
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    n = len(str)\n    t = [[0 for i in xrange(n)] for j in xrange(n)]\n    \n    for i in xrange(n):\n        t[i][i] = 1\n    \n    max_len = 1\n    start = 0\n    for j in xrange(1, n):\n        for i in xrange(j):\n            if str[i]!= str[j]:\n                t[i][j] = min(t[i+1][j], t[i][j-1])\n            else:\n                t[i][j] = t[i+1][j-1] + 2\n            if t[i][j] > max_len:\n                max_len = t[i][j]\n                start = i\n    print t\n    return str[start:start+max_len]\n",
        "num_ids": 205
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str)<2:\n        return len(str)\n    \n    n=len(str)\n    \n    L=[[0 for i in range(n)] for j in range(n)]\n    \n    for i in range(n):\n        L[i][i]=1\n    \n    for cl in range(2,n+1):\n        for i in range(n-cl+1):\n            j=i+cl-1\n            if str[i]==str[j] and cl==2:\n                L[i][j]=2\n            elif str[i]==str[j]:\n                L[i][j]=L[i+1][j-1]+2\n            else:\n                L[i][j]=max(L[i][j-1],L[i+1][j])\n    \n    return L[0][n-1]\n    ",
        "num_ids": 210
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 + (harmonic_sum(n - 1))\n",
        "num_ids": 32
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n",
        "num_ids": 32
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    #harmonic_sum(1) == 1/1, harmonic_sum(2) == 1/2, harmonic_sum(3) == 1/3, etc.\n    if n == 1:\n        return 1\n    return 1/n + harmonic_sum(n-1)\n",
        "num_ids": 67
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1 + harmonic_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    assert isinstance(n, int)\n    assert n >= 0\n    return n/2 + 1\n",
        "num_ids": 26
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    #Fill this in.\n    return 1/n\n",
        "num_ids": 15
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return 1 + harmonic_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n + n/harmonic_sum(n-1)\n",
        "num_ids": 20
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n",
        "num_ids": 32
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    assert isinstance(n, int), 'n is not an integer.'\n    assert n > 0, 'n must be a positive integer.'\n",
        "num_ids": 34
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1 = set(array_nums1)\n    for element in array_nums2:\n        if element in array_nums1:\n            return element\n    return None\n",
        "num_ids": 48
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a hashtable to store the intersection\n    hashtable = {}\n    # loop over array 1\n    for num in array_nums1:\n        if num in hashtable:\n            hashtable[num] += 1\n        else:\n            hashtable[num] = 1\n",
        "num_ids": 67
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #array_nums1 = [1,2,3,4,5]\n    #array_nums2 = [4,5,6,7,8]\n    intersection = []\n    for item in array_nums1:\n        if item in array_nums2:\n            intersection.append(item)\n    return intersection\n",
        "num_ids": 83
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    inter = []\n    for i in array_nums1:\n        if i in array_nums2:\n            inter.append(i)\n    return inter\n",
        "num_ids": 41
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return [x for x in array_nums1 if x in array_nums2]\n    \nprint intersection_array([1,2,3],[1,2,3])\n",
        "num_ids": 44
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    nums1 = set(array_nums1)\n    nums2 = set(array_nums2)\n    return list(nums1 & nums2)\n",
        "num_ids": 43
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if not array_nums1 or not array_nums2:\n        return []\n",
        "num_ids": 23
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1 = sorted(array_nums1)\n    array_nums2 = sorted(array_nums2)\n    result = []\n    i = 0\n    j = 0\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            result.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] > array_nums2[j]:\n            j += 1\n        else:\n            i += 1\n    return result\n",
        "num_ids": 156
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    def find_intersection(a,b):\n        if len(a)!=len(b):\n            return None\n        intersection = []\n        for i in range(len(a)):\n            if a[i] == b[i]:\n                intersection.append(a[i])\n        return intersection\n",
        "num_ids": 75
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if not array_nums1 or not array_nums2:\n        return []\n    m = len(array_nums1)\n    n = len(array_nums2)\n    array_nums1.sort()\n    array_nums2.sort()\n    i = j = 0\n    result = []\n    while i < m and j < n:\n        if array_nums1[i] < array_nums2[j]:\n            i += 1\n        elif array_nums1[i] > array_nums2[j]:\n            j += 1\n        else:\n            result.append(array_nums1[i])\n            i += 1\n            j += 1\n    return result\n",
        "num_ids": 173
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # A generator that yields the index of the element in the tuple\n    index = (i for i, elt in enumerate(tup) if elt == x)\n    # the generator is exhausted once all of the elements in the tuple are gone through\n    count = sum(1 for _ in index)\n    return count\n",
        "num_ids": 75
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    if x not in tup:\n        return 0\n    return tup.count(x)\n",
        "num_ids": 25
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "num_ids": 12
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "num_ids": 12
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    \n    x_count = 0\n    for element in tup:\n        if element == x:\n            x_count += 1\n    return x_count\n    \ndef count_first(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    \n    for i in range(len(tup)):\n        if tup[i] == x:\n            return i\n            \ndef count_second(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    \n    return tup.index(x)\n    \ndef count_third(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    \n    return tup.count(x)\n    \n    ",
        "num_ids": 17
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n    \ndef count_Y(tup, y): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == y:\n            count += 1\n    return count\n    \ndef tuple_difference(tup1, tup2): \n    '''\n    Write a python function that takes in two tuples and returns a tuple that contains the elements that appear in the first tuple but not in the second.\n    '''\n    return tuple(tup1.difference(tup2))\n",
        "num_ids": 18
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0 \n    for x in tup:\n        if x == x:\n            count += 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for t in tup:\n        if t == x:\n            count = count + 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0 \n    for item in tup:\n        if item == x:\n            count += 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "num_ids": 12
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    \n    new_list = []\n    new_list.append(element)\n    \n    for i in range(len(list)):\n        new_list.append(list[i])\n        \n    return new_list\n    \ndef delete_element(list,element):\n    '''\n    Write a function that takes in a list and an element and deletes the element before each element in the list, and returns the resulting list.\n    '''\n    \n    new_list = []\n    for i in range(len(list)):\n        if list[i]!= element:\n            new_list.append(list[i])\n            \n    return new_list\n    \ndef replace_element(list,element,new_element):\n    '''\n    Write a function that takes in a list, an element, and a new element and replaces each element with the new element in the list, and returns the resulting list.\n    '''\n    \n    new_list = []\n    for i in range(len(list)):\n        if list[i]!= element:\n            new_list.append(list[i])\n        else:\n            new_list.append(new_element)\n            \n    return new_list\n    \ndef count_element(list,element):\n    '''\n    Write a function that takes in a list and an element and returns the number of times the element appears in the list.\n    '''\n    \n    count = 0\n    for i in range(len(list)):\n        if list[i] == element:\n            count += 1\n            \n    return count\n    \ndef index_of_element(list,element):\n    '''\n    Write a function that takes in a list and an element and returns the index of the element in the list.\n    '''\n    \n    for i in range(len(list)):\n        if list[i] == element:\n            return i\n            \ndef union(list_1,list_2):\n    '''\n    Write a function that takes in two lists and returns a list that contains the elements that appear in either list, but not both.\n    '''\n    \n    return list(set(list_1) ^ set(list_2))\n    \ndef intersection(list_1,list_2):\n    '''\n    Write a function that takes in two lists and returns a list that contains the elements that appear in both list, but not in both.\n    '''\n    \n    return list(set(list_1) & set(list_2))\n    \ndef diff(list_1,list_2):\n    '''\n    Write a function that takes in two lists and returns a list that contains the elements that appear in one list but not the other.\n    '''\n    \n    return list(set(list_1) - set(list_2))\n    \ndef is_subset(list_1,list_2):\n    '''\n    Write a function that takes in two lists and returns a boolean that indicates whether one list is a subset of the other.\n    '''\n    \n    for i in range(len(list_1)):\n        if list_1[i] not in list_2:\n            return False\n        \n    return True\n    \ndef is_superset(list_1,list_2):\n    '''\n    Write a function that takes in two lists and returns a boolean that indicates whether one list is a superset of the other.\n    '''\n    \n    for i in range(len(list_2)):\n        if list_2[i] not in list_1:\n            return False\n            \n    return True\n    \ndef is_proper_subset(list_1,list_2):\n    '''\n    Write a function that takes in two lists and returns a boolean that indicates whether one list is a proper subset of the other.\n    '''\n    \n    for i in range(len(list_1)):\n        if list_1[i] not in list_2:\n            return False\n            \n    for i in range(len(list_2)):\n        if list_2[i] not in list_1:\n            return False\n            \n    return True\n    \ndef is_proper_superset(list_1,list_2):\n    '''\n    Write a function that takes in two lists and returns a boolean that indicates whether one list is a proper superset of the other.\n    '''\n    \n    for i in range(len(list_2)):\n        if list_2[i] not in list_1:\n            return False\n            \n    for i in range(len(list_1)):\n        if list_1[i] not in list_2:\n            return False\n            \n    return True\n    \ndef are_disjoint(list_1,list_2):\n    '''\n    Write a function that takes in two lists and returns a boolean that indicates whether they are disjoint.\n    '''\n    \n    for i in range(len(list_1)):\n        if list_1[i] in list_2:\n            return False\n            \n    for i in range(len(list_2)):\n        if list_2[i] in list_1:\n            return False\n            \n    return True\n    \ndef cartesian(list_1,list_2):\n    '''\n    Write a function that takes in two lists and returns a list of tuples that are each a cartesian product of the two lists.\n    '''\n    \n    cartesian_list = []\n    for i in list_1:\n        for j in list_2:\n            cartesian_list.append((i,j))\n            \n    return cartesian_list\n    \ndef inverse_dict(d):\n    '''\n    Write a function that takes in a dictionary and returns a dictionary with the values as the keys and the keys as the values.\n    '''\n    \n    inv_dict = {}\n    for key, value in d.items():\n        inv_dict[value] = key\n        \n    return inv_dict\n    \ndef is_member(list,element):\n    '''\n    Write a function that takes in a list and an element and returns a boolean that indicates whether the element is in the list.\n    '''\n    \n    for i in range(len(list)):\n        if list[i] == element:\n            return True\n            \n    return False\n    \ndef is_member_list(list,list_1):\n    '''\n    Write a function that takes in a list and a list and returns a boolean that indicates whether each element in the list is in the list.\n    '''\n    \n    for i in range(len(list)):\n        if list[i] not in list_1:\n            return False\n            \n    return True\n    \ndef max_list(list):\n    '''\n    Write a function that takes in a list and returns the maximum element in the list.\n    '''\n    \n    return max(list)\n    \ndef min_list(list):\n    '''\n    Write a function that takes in a list and returns the minimum element in the list.\n    '''\n    \n    return min(list)\n    \ndef remove_duplicates(list):\n    '''\n    Write a function that takes in a list and returns a list that contains only the unique elements of the original list, and without any elements that are duplicates.\n    '''\n    \n    return list(set(list))\n    \ndef largest_common_substring(str_1,str_2):\n    '''\n    Write a function that takes in two strings and returns the length of the longest common substring.\n    '''\n    \n    if len(str_1) < len(str_2):\n        str_1,str_2 = str_2,str_1\n        \n    lcs_table = [[0 for i in range(len(str_2))] for j in range(len(str_1))]\n    \n    for i in range(len(str_1)):\n        for j in range(len(str_2)):\n            if str_1[i] == str_2[j]:\n                if i == 0 or j == 0:\n                    lcs_table[i][j] = 1\n                else:\n                    lcs_table[i][j] = lcs_table[i-1][j-1]+1\n            else:\n                lcs_table[i][j] = 0\n    \n    lcs_length = max(lcs_table[len(str_1)-1])\n",
        "num_ids": 213
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list\n",
        "num_ids": 10
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    try:\n        return list[0:list.index(element)] + [element] + list[list.index(element)+1:]\n    except ValueError:\n        return list\n",
        "num_ids": 44
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [x for x in list[1:] + [list[0]] if x!= element]\n",
        "num_ids": 26
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    \n    result = []\n    for i in range(len(list)):\n        result.insert(i,element)\n    \n    return result\n    \n    \n    \ndef run_test_code():\n    '''\n    Write a function that tests the above code and displays the results of the tests.\n    '''\n    list = [1,2,3,4]\n    print(insert_element(list,5))\n    print(insert_element(list,6))\n    print(insert_element(list,7))\n    print(insert_element(list,8))\n    \n    \nrun_test_code(",
        "num_ids": 73
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(0,len(list)):\n        result.append(list[i])\n        result.append(element)\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in list:\n        list.insert(i,element)\n    return list\n    \ndef insert_element_reversed(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n    \ndef insert_element_chained(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    newlist = [element]\n    newlist.extend(list)\n    return newlist\n    \ndef remove_element_at(list,idx):\n    '''\n    Write a function that takes in a list and an element and removes the element at the specified index in the list, and returns the resulting list.\n    '''\n    newlist = list[:idx]\n    newlist.extend(list[idx+1:])\n    return newlist\n    \ndef remove_element_at_reversed(list,idx):\n    '''\n    Write a function that takes in a list and an element and removes the element at the specified index in the list, and returns the resulting list.\n    '''\n    newlist = list[:idx]\n    newlist.extend(list[idx+1:])\n    return newlist\n    \ndef remove_element_at_chained(list,idx):\n    '''\n    Write a function that takes in a list and an element and removes the element at the specified index in the list, and returns the resulting list.\n    '''\n    newlist = list[:idx]\n    newlist.extend(list[idx+1:])\n    return newlist\n    \ndef remove_element_at_every(list,idx):\n    '''\n    Write a function that takes in a list and an element and removes the element at the specified index in the list, and returns the resulting list.\n    '''\n    newlist = []\n    for i in range(idx):\n        newlist.append(list[i])\n    newlist.extend(list[idx+1:])\n    return newlist\n    \ndef remove_element_at_every_reversed(list,idx):\n    '''\n    Write a function that takes in a list and an element and removes the element at the specified index in the list, and returns the resulting list.\n    '''\n    newlist = []\n    for i in range(idx+1,len(list)):\n        newlist.append(list[i])\n    newlist.extend(list[:idx])\n    return newlist\n    \ndef remove_element_at_every_chained(list,idx):\n    '''\n    Write a function that takes in a list and an element and removes the element at the specified index in the list, and returns the resulting list.\n    '''\n    newlist = []\n    for i in range(idx):\n        newlist.append(list[i])\n    newlist.extend(list[idx+1:])\n    return newlist\n    \ndef remove_duplicates(list):\n    '''\n    Write a function that takes in a list and removes any duplicate elements in the list, and returns the resulting list.\n    '''\n    newlist = []\n    for i in list:\n        if i not in newlist:\n            newlist.append(i)\n    return newlist\n    \ndef remove_duplicates_reversed(list):\n    '''\n    Write a function that takes in a list and removes any duplicate elements in the list, and returns the resulting list.\n    '''\n    newlist = []\n    for i in range(len(list)-1):\n        if list[i] == list[i+1]:\n            newlist.append(list[i])\n    return newlist\n    \ndef remove_duplicates_chained(list):\n    '''\n    Write a function that takes in a list and removes any duplicate elements in the list, and returns the resulting list.\n    '''\n    newlist = []\n    for i in range(len(list)-1):\n        if list[i]!= list[i+1]:\n            newlist.append(list[i])\n    return newlist\n    \ndef is_palindrome(list):\n    '''\n    Write a function that takes in a list and determines whether the elements of the list are a palindrome or not, and returns the result.\n    '''\n    for i in range(len(list)//2):\n        if list[i]!= list[len(list)-1-i]:\n            return False\n    return True\n    \ndef is_palindrome_reversed(list):\n    '''\n    Write a function that takes in a list and determines whether the elements of the list are a palindrome or not, and returns the result.\n    '''\n    for i in range(len(list)//2):\n        if list[i]!= list[len(list)-1-i]:\n            return False\n    return True\n    \ndef is_palindrome_chained(list):\n    '''\n    Write a function that takes in a list and determines whether the elements of the list are a palindrome or not, and returns the result.\n    '''\n    for i in range(len(list)//2):\n        if list[i]!= list[len(list)-1-i]:\n            return False\n    return True\n    \ndef is_palindrome_every(list):\n    '''\n    Write a function that takes in a list and determines whether the elements of the list are a palindrome or not, and returns the result.\n    '''\n    for i in range(len(list)//2):\n        if list[i]!= list[len(list)-1-i]:\n            return False\n    return True\n    \ndef is_palindrome_every_reversed(list):\n    '''\n    Write a function that takes in a list and determines whether the elements of the list are a palindrome or not, and returns the result.\n    '''\n    for i in range(len(list)//2):\n        if list[i]!= list[len(list)-1-i]:\n            return False\n    return True\n    \ndef is_palindrome_every_chained(list):\n    '''\n    Write a function that takes in a list and determines whether the elements of the list are a palindrome or not, and returns the result.\n    '''\n    for i in range(len(list)//2):\n        if list[i]!= list[len(list)-1-i]:\n            return False\n    return True\n    \ndef find_greater_than(list,value):\n    '''\n    Write a function that takes in a list and an element and returns the indices of the elements in the list that are greater than the element, and returns the result.\n    '''\n    result = []\n    for i in range(len(list)):\n        if list[i] > value:\n            result.append(i)\n    return result\n    \ndef find_greater_than_reversed(list,value):\n    '''\n    Write a function that takes in a list and an element and returns the indices of the elements in the list that are greater than the element, and returns the result.\n    '''\n    result = []\n    for i in range(len(list)-1,-1,-1):\n        if list[i] > value:\n            result.append(i)\n    return result\n    \ndef find_greater_than_chained(list,value):\n    '''\n    Write a function that takes in a list and an element and returns the indices of the elements in the list that are greater than the element, and returns the result.\n    '''\n    result = []\n    for i in range(len(list)-1,-1,-1):\n        if list[i] > value:\n            result.append(i)\n    return result\n    \ndef find_greater_than_every(list,value):\n    '''\n    Write a function that takes in a list and an element and returns the indices of the elements in the list that are greater than the element, and returns the result.\n    '''\n    result = []\n    for i in range(len(list)):\n        if list[i] ",
        "num_ids": 26
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list[:0] + [element] + list[0:]\n    \ndef prefix_average(list):\n    '''\n    Write a function that takes in a list of numbers and returns a list of the prefix sums of the list.\n    '''\n    if len(list) == 0:\n        return [0]\n    return [sum(list[0:x]) for x in range(0,len(list))]\n",
        "num_ids": 42
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if not list:\n        return []\n    if not isinstance(list,list):\n        return []\n    if not isinstance(element,(int,float)):\n        return []\n    return [element]+list\n",
        "num_ids": 53
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    \n    #if you don't know what list.insert() does, or if you don't need to modify the original list, then you can just do the following. \n    #list = [1,2,3]\n    #list.insert(1,element)\n    #print(list)\n    #return list\n    \n    #you can also do the following, which is equivalent to the above statement. \n    #list = [1,2,3]\n    #list = list.insert(0,element)\n    #print(list)\n    #return list\n    \n    #we can also insert elements at any index of the list. \n    #list = [1,2,3]\n    #list.insert(1,element)\n    #print(list)\n    #list.insert(2,element)\n    #print(list)\n    #list.insert(3,element)\n    #print(list)\n    #return list\n    \n    #we can also insert elements at any index of the list. \n    #list = [1,2,3]\n    #list.insert(2,element)\n    #print(list)\n    #list.insert(2,element)\n    #print(list)\n    #list.insert(2,element)\n    #print(list)\n    #return list\n    \n    #the above can also be written as: \n    #list = [1,2,3]\n    #list.insert(2,element)\n    #list.insert(2,element)\n    #list.insert(2,element)\n    #print(list)\n    #return list\n    \n    #if you don't know what the insert() method does, or if you don't need to modify the original list, then you can just do the following: \n    #list = [1,2,3]\n    #list = list.insert(0,element)\n    #list = list.insert(1,element)\n    #list = list.insert(2,element)\n    #print(list)\n    #return list\n    \n    #you can also do the following, which is equivalent to the above statement. \n    #list = [1,2,3]\n    #list = list.insert(0,element)\n    #list = list.insert(1,element)\n    #list = list.insert(2,element)\n    #print(list)\n    #return list\n    \n    #we can also insert elements at any index of the list. \n    #list = [1,2,3]\n    #list = list.insert(2,element)\n    #list = list.insert(2,element)\n    #list = list.insert(2,element)\n    #print(list)\n    #return list\n    \n    #we can also insert elements at any index of the list. \n    #list = [1,2,3]\n    #list = list.insert(2,element)\n    #list = list.insert(2,element)\n    #list = list.insert(2,element)\n    #print(list)\n    #return list\n    \n    #if you don't know what the insert() method does, or if you don't need to modify the original list, then you can just do the following: \n    #list = [1,2,3]\n    #list = list.insert(0,element)\n    #list = list.insert(1,element)\n    #list = list.insert(2,element)\n    #print(list)\n    #return list\n    \n    #you can also do the following, which is equivalent to the above statement. \n    #list = [1,2,3]\n    #list = list.insert(0,element)\n    #list = list.insert(1,element)\n    #list = list.insert(2,element)\n    #print(list)\n    #return list\n    \n    #we can also insert elements at any index of the list. \n    #list = [1,2,3]\n    #list = list.insert(2,element)\n    #list = list.insert(2,element)\n    #list = list.insert(2,element)\n    #print(list)\n    #return list\n    \n    #we can also insert elements at any index of the list. \n    #list = [1,2,3]\n    #list = list.insert(2,element)\n    #list = list.insert(2,element)\n    #list = list.insert(2,element)\n    #print(list)\n    #return list\n    \n    #the above can also be written as: \n    #list = [1,2,3]\n    #list = list.insert(2,element)\n    #list = list.insert(2,element)\n    #list = list.insert(2,element)\n    #print(list)\n    #return list\n    \n    #if you don't know what the insert() method does, or if you don't need to modify the original list, then you can just do the following: \n    #list = [1,2,3]\n    #list = list.insert(0,element)\n    #list = list.insert(1,element)\n    #list = list.insert(2,element)\n    #print(list)\n    #return list\n    \n    #you can also do the following, which is equivalent to the above statement. \n    #list = [1,2,3]\n    #list = list.insert(0,element)\n    #list = list.insert(1,element)\n    #list = list.insert(2,element)\n    #print(list)\n    #return list\n    \n    #we can also insert elements at any index of the list. \n    #list = [1,2,3]\n    #list = list.insert(2,element)\n    #list = list.insert(2,element)\n    #list = list.insert(2,element)\n    #print(list)\n    #return list\n    \n    #we can also insert elements at any index of the list. \n    #list = [1,2,3]\n    #list = list.insert(2,element)\n    #list = list.insert(2,element)\n    #list = list.insert(2,element)\n    #print(list)\n    #return list\n    \n    #the above can also be written as: \n    #list = [1,2,3]\n    #list = list.insert(2,element)\n    #list = list.insert(2,element)\n    #list = list.insert(2,element)\n    #print(list)\n    #return list\n    \n    #if you don't know what the insert() method does, or if you don't need to modify the original list, then you can just do the following: \n    #list = [1,2,3]\n    #list = list.insert(0,element)\n    #list = list.insert(1,element)\n    #list = list.insert(2,element)\n    #print(list)\n    #return list\n    \n    #you can also do the following, which is equivalent to the above statement. \n    #list = [1,2,3]\n    #list = list.insert(0,element)\n    #list = list.insert(1,element)\n    #list = list.insert(2,element)\n    #print(list)\n    #return list\n    \n    #we can also insert elements at any index of the list. \n    #list = [1,2,3]\n    #list = list.insert(2,element)\n    #list = list.insert(2,element)\n    #list = list.insert(2,element)\n    #print(list)\n    #return list\n    \n    #we can also insert elements at any index of the list. \n    #list = [1,2,3]\n    #list = list.insert(2,element)\n    #list = list.insert(2,element)\n    #list = list.insert(2,element)\n    #print(list)\n    #return list\n    \n    #the above can also be written as: \n    #list = [1,2,3]\n    #list = list.insert(2,element)\n    #list = list.insert(2,element)\n    #list = list.insert(2,element)\n    #print(list)\n    #return list\n",
        "num_ids": 2001
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return cmath.polar(numbers)\n    \ndef test_convert():\n    assert convert((1,2)) == (1.7320508075688772, 2.0)\n    assert convert((3,4)) == (2.5320508075688773, 2.0)\n    assert convert((1,5)) == (1.7320508075688772, 2.5)\n    assert convert((2,-3)) == (2.5320508075688773, -2.0)\n    assert convert((1,1)) == (1.7320508075688772, 1.0)\n    \ndef is_integer(num):\n    '''\n    Write a python function to check if a number is an integer or not.\n    '''\n    return num.is_integer()\n    \ndef test_is_integer():\n    assert is_integer(1)\n    assert is_integer(3.1)\n    assert is_integer(-3)\n    assert not is_integer(-3.1)\n    assert is_integer(3.1+4.9)\n    assert not is_integer(3.1+4.9+0.1)\n    assert is_integer(3.1+4.9+0.1+1)\n    assert not is_integer(3.1+4.9+0.1+1+1)\n    assert is_integer(3.1+4.9-1.1)\n    assert not is_integer(3.1+4.9-1.1+1)\n    assert is_integer(3.1+4.9-1.1+1+1)\n    assert not is_integer(3.1+4.9-1.1+1+1+1)\n    \ndef is_real(n):\n    '''\n    Write a python function to check if a number is a real number or not.\n    '''\n    return n.is_real()\n    \ndef test_is_real():\n    assert is_real(1)\n    assert is_real(3.1)\n    assert is_real(-3)\n    assert is_real(-3.1)\n    assert not is_real(-3.1+4.9)\n    assert is_real(3.1+4.9)\n    assert is_real(3.1+4.9+0.1)\n    assert is_real(3.1+4.9-1.1)\n    assert is_real(3.1+4.9-1.1+1)\n    assert not is_real(3.1+4.9-1.1+1+1)\n    assert is_real(3.1+4.9-1.1+1+1+1)\n    assert not is_real(3.1+4.9+0.1+1)\n    assert not is_real(3.1+4.9+0.1+1+1)\n    assert is_real(3.1+4.9+0.1-1)\n    assert not is_real(3.1+4.9+0.1-1+1)\n    assert is_real(3.1+4.9+0.1+1-1)\n    assert not is_real(3.1+4.9+0.1+1+1)\n    \ndef is_complex(n):\n    '''\n    Write a python function to check if a number is a complex number or not.\n    '''\n    return n.is_complex()\n    \ndef test_is_complex():\n    assert is_complex(1)\n    assert is_complex(3.1)\n    assert is_complex(-3)\n    assert is_complex(-3.1)\n    assert not is_complex(-3.1+4.9)\n    assert is_complex(3.1+4.9)\n    assert is_complex(3.1+4.9+0.1)\n    assert is_complex(3.1+4.9-1.1)\n    assert is_complex(3.1+4.9-1.1+1)\n    assert not is_complex(3.1+4.9-1.1+1+1)\n    assert is_complex(3.1+4.9-1.1+1+1+1)\n    assert not is_complex(3.1+4.9+0.1+1)\n    assert not is_complex(3.1+4.9+0.1+1+1)\n    assert is_complex(3.1+4.9+0.1-1)\n    assert not is_complex(3.1+4.9+0.1-1+1)\n    assert is_complex(3.1+4.9+0.1+1-1)\n    assert not is_complex(3.1+4.9+0.1+1+1)\n    \ndef is_finite(n):\n    '''\n    Write a python function to check if a number is finite or not.\n    '''\n    return n.is_finite()\n    \ndef test_is_finite():\n    assert is_finite(1)\n    assert is_finite(3.1)\n    assert is_finite(-3)\n    assert is_finite(-3.1)\n    assert not is_finite(-3.1+4.9)\n    assert is_finite(3.1+4.9)\n    assert is_finite(3.1+4.9+0.1)\n    assert is_finite(3.1+4.9-1.1)\n    assert is_finite(3.1+4.9-1.1+1)\n    assert not is_finite(3.1+4.9-1.1+1+1)\n    assert is_finite(3.1+4.9-1.1+1+1+1)\n    assert not is_finite(3.1+4.9+0.1+1)\n    assert not is_finite(3.1+4.9+0.1+1+1)\n    assert is_finite(3.1+4.9+0.1-1)\n    assert not is_finite(3.1+4.9+0.1-1+1)\n    assert is_finite(3.1+4.9+0.1+1-1)\n    assert not is_finite(3.1+4.9+0.1+1+1)\n    \ndef is_signed(n):\n    '''\n    Write a python function to check if a number is signed or not.\n    '''\n    return n.is_signed()\n    \ndef test_is_signed():\n    assert is_signed(1)\n    assert is_signed(3.1)\n    assert is_signed(-3)\n    assert is_signed(-3.1)\n    assert not is_signed(-3.1+4.9)\n    assert is_signed(3.1+4.9)\n    assert is_signed(3.1+4.9+0.1)\n    assert is_signed(3.1+4.9-1.1)\n    assert is_signed(3.1+4.9-1.1+1)\n    assert not is_signed(3.1+4.9-1.1+1+1)\n    assert is_signed(3.1+4.9-1.1+1+1+1)\n    assert not is_signed(3.1+4.9+0.1+1)\n    assert not is_signed(3.1+4.9+0.1+1+1)\n    assert is_signed(3.1+4.9+0.1-1)\n    assert not is_signed(3.1+4.9+0.1-1+1)\n    assert is_signed(3.1+4.9+0.1+1-1)\n    assert not is_signed(3.1+4.9+0.1+1+1)\n    \ndef is_polar(n):\n    '''\n    Write a python function to check if a number is polar or not.\n    '''\n    return n.is_polar()\n    \ndef test_is_polar():\n    assert is_polar(1)\n    assert is_polar(3.1)\n    assert is_polar(-3)\n    assert is_polar(-3",
        "num_ids": 63
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if type(numbers) == str:\n        numbers = numbers.split(',')\n    elif type(numbers) == int:\n        numbers = [numbers]\n    elif type(numbers) == float:\n        numbers = [numbers]\n    \n    if not isinstance(numbers[0], complex):\n        raise Exception('Complex numbers are not supported.')\n    \n    ans = []\n    for i in numbers:\n        ans.append([i.real, i.imag])\n    return ans\n",
        "num_ids": 127
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def to_polar(numbers):\n        def angle(z):\n            return cmath.phase(z)\n        def magnitude(z):\n            return cmath.polar(z)[0]\n        return [(magnitude(z), angle(z)) for z in numbers]\n    return to_polar(numbers)\n",
        "num_ids": 80
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    c1=complex(numbers[0],numbers[1])\n    r=abs(c1)\n    phi=cmath.phase(c1)\n    return r,phi\n    \nif __name__ == '__main__':\n    numbers=[5,5]\n    print convert(numbers",
        "num_ids": 74
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    r = cmath.polar(numbers)\n    return r\n    \ndef convert2(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return cmath.polar(numbers)\n    \ndef test_convert():\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    assert convert(1+2j) == convert2(1+2j)\n    assert convert(1+2j) == (1.0, 2.0)\n    assert convert(3+2j) == (3.0, 2.0)\n    assert convert(5+6j) == (5.0, 6.0)\n    assert convert(7+8j) == (7.0, 8.0)\n    assert convert(9+10j) == (9.0, 10.0)\n    assert convert(11+12j) == (11.0, 12.0)\n    assert convert(13+14j) == (13.0, 14.0)\n    \n    \nif __name__ == \"__main__\":\n    test_convert()",
        "num_ids": 182
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar = []\n    for c in numbers:\n        a = cmath.polar(c)\n        polar.append(a)\n    return polar\n",
        "num_ids": 40
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    x=abs(numbers)\n    y=cmath.phase(numbers)\n    print(\"x=\"+str(x))\n    print(\"y=\"+str(y))\n",
        "num_ids": 45
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for i in range(len(numbers)):\n        a = numbers[i][0]\n        b = numbers[i][1]\n        r = cmath.polar(complex(a,b))\n        polar_coordinates.append(r)\n    return polar_coordinates\n",
        "num_ids": 79
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return (abs(numbers.real),abs(numbers.imag))\n",
        "num_ids": 20
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def convert(a):\n        if a.imag == 0:\n            return (a.real, 0)\n        else:\n            return (a.real, cmath.phase(a))\n    return [convert(complex(a,b)) for a,b in numbers]\n",
        "num_ids": 67
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    n=0\n    for i in list1:\n        if type(i)==int:\n            n+=1\n    return n\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    counter = 0\n    for i in list1:\n        if type(i) == int:\n            counter += 1\n    return counter\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return sum([1 for i in list1 if type(i)==int])\n    \ndef count_list(list1):\n    '''\n    Write a python function that returns the number of list elements in a given list.\n    '''\n    return sum([1 for i in list1 if type(i)==list])\n    \ndef count_set(list1):\n    '''\n    Write a python function that returns the number of set elements in a given list.\n    '''\n    return sum([1 for i in list1 if type(i)==set])\n    \ndef count_dict(list1):\n    '''\n    Write a python function that returns the number of dictionary elements in a given list.\n    '''\n    return sum([1 for i in list1 if type(i)==dict])\n    \ndef count_tuple(list1):\n    '''\n    Write a python function that returns the number of tuple elements in a given list.\n    '''\n    return sum([1 for i in list1 if type(i)==tuple])\n",
        "num_ids": 22
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if i.isdigit() is True:\n            count += 1\n    return count\n",
        "num_ids": 36
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item,int):\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([i for i in list1 if isinstance(i, int)])\n",
        "num_ids": 22
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count = count + 1\n    return count\n    \ndef count_string(list1):\n    '''\n    Write a python function that returns the number of string elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, str):\n            count = count + 1\n    return count\n    \ndef count_string_and_integer(list1):\n    '''\n    Write a python function that returns the number of string and integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count = count + 1\n        elif isinstance(i, str):\n            count = count + 1\n    return count\n    \ndef index_integer(list1):\n    '''\n    Write a python function that returns the index of first occurrence of integer element in a given list.\n    '''\n    for i in list1:\n        if isinstance(i, int):\n            return list1.index(i)\n    \ndef index_string(list1):\n    '''\n    Write a python function that returns the index of first occurrence of string element in a given list.\n    '''\n    for i in list1:\n        if isinstance(i, str):\n            return list1.index(i)\n    \ndef index_string_and_integer(list1):\n    '''\n    Write a python function that returns the index of first occurrence of string and integer elements in a given list.\n    '''\n    for i in list1:\n        if isinstance(i, int):\n            return list1.index(i)\n        elif isinstance(i, str):\n            return list1.index(i)\n            \ndef all_string(list1):\n    '''\n    Write a python function that returns True if all the elements of a given list are string elements,\n    and False otherwise.\n    '''\n    for i in list1:\n        if isinstance(i, str) is False:\n            return False\n    return True\n    \ndef all_integer(list1):\n    '''\n    Write a python function that returns True if all the elements of a given list are integer elements,\n    and False otherwise.\n    '''\n    for i in list1:\n        if isinstance(i, int) is False:\n            return False\n    return True\n    \ndef test_count_integer():\n    '''\n    This function tests the count_integer function.\n    '''\n    list1 = ['a', 1, 2, 'a', 3, 'a']\n    assert count_integer(list1) == 4\n    \ndef test_count_string():\n    '''\n    This function tests the count_string function.\n    '''\n    list1 = ['a', 'a', 1, 'a', 2, 'a']\n    assert count_string(list1) == 3\n    \ndef test_count_string_and_integer():\n    '''\n    This function tests the count_string_and_integer function.\n    '''\n    list1 = ['a', 1, 'a', 2, 'a']\n    assert count_string_and_integer(list1) == 4\n    \ndef test_index_integer():\n    '''\n    This function tests the index_integer function.\n    '''\n    list1 = ['a', 1, 2, 'a', 3, 'a']\n    assert index_integer(list1) == [1, 2, 4]\n    \ndef test_index_string():\n    '''\n    This function tests the index_string function.\n    '''\n    list1 = ['a', 'a', 1, 'a', 2, 'a']\n    assert index_string(list1) == [0, 1, 3, 4]\n    \ndef test_index_string_and_integer():\n    '''\n    This function tests the index_string_and_integer function.\n    '''\n    list1 = ['a', 1, 'a', 2, 'a']\n    assert index_string_and_integer(list1) == [0, 1, 3, 4]\n    \ndef test_all_string():\n    '''\n    This function tests the all_string function.\n    '''\n    list1 = ['a', 'a', 1, 'a', 2, 'a']\n    assert all_string(list1) == True\n    \ndef test_all_integer():\n    '''\n    This function tests the all_integer function.\n    '''\n    list1 = [1, 2, 'a', 'a', 2, 'a']\n    assert all_integer(list1) == True\n    \ndef all_strings_and_integers(list1):\n    '''\n    Write a python function that returns True if all the elements of a given list are string and integer elements,\n    and False otherwise.\n    '''\n    for i in list1:\n        if isinstance(i, int) is False:\n            return False\n    return True\n    \ndef test_all_strings_and_integers():\n    '''\n    This function tests the all_strings_and_integers function.\n    '''\n    list1 = ['a', 1, 'a', 2, 'a']\n    assert all_strings_and_integers(list1) == False\n    \ndef main():\n    '''\n    This function tests the functions in this module.\n    '''\n    test_count_integer()\n    test_count_string()\n    test_count_string_and_integer()\n    test_index_integer()\n    test_index_string()\n    test_index_string_and_integer()\n    test_all_string()\n    test_all_integer()\n    test_all_strings_and_integers()\n    \nif __name__ == \"__main__\":\n    main(",
        "num_ids": 103
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l,n))\n",
        "num_ids": 19
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(l) for k in range(n+1) for l in combinations_with_replacement(l, k)]\n",
        "num_ids": 34
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(l[i:i + n]) for i in range(len(l))]\n",
        "num_ids": 27
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n    pass\n",
        "num_ids": 22
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [list(comb) for comb in combinations_with_replacement(l, n)]\n",
        "num_ids": 24
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(comb) for comb in combinations_with_replacement(l, n)]\n",
        "num_ids": 25
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "num_ids": 19
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "num_ids": 19
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(i) for i in combinations_with_replacement(l, n)]\n",
        "num_ids": 25
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    for item in combinations_with_replacement(l, n):\n        yield tuple(item)",
        "num_ids": 25
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    primes = [True for i in range(n + 1)]\n    primes[0] = False\n    primes[1] = False\n",
        "num_ids": 47
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 0 or n == 1:\n        return 0\n",
        "num_ids": 17
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 0:\n        print \"Error, negative numbers not allowed\"\n        return\n    count = 0\n    i = 2\n    while i < n:\n        if is_Prime(i):\n            count = count + 1\n        i = i + 1\n    return count\n",
        "num_ids": 67
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # define a function that returns True or False if a given number is a prime number\n    def is_Prime(n):\n        # a prime number is greater than 1 and less than it's square root\n        # and if its greater than 2, a number divisible by 2, is not a prime number\n        # if it's less than 2, it's neither prime nor composite\n        if n < 2:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 124
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = 0\n    num = 2\n    while num < n:\n        if num_is_Prime(num):\n            primes = primes + 1\n        num = num + 1\n    return primes\n",
        "num_ids": 52
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for x in range(2,n+1):\n        for y in range(2,x):\n            if x%y == 0:\n                break\n            elif y == x-1:\n                count +=1\n    return count\n",
        "num_ids": 62
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # if n < 2, return 0\n    if n < 2:\n        return 0\n    # else, make list of numbers 0 to n-1\n    # count the number of prime numbers <= n\n    count = 0\n    prime_list = [True] * n\n    for i in range(2, n):\n        # if a number is not a prime number,\n        # then its multiples will not be prime numbers\n        if prime_list[i] == True:\n            j = 2\n            while i * j < n:\n                prime_list[i * j] = False\n                j += 1\n            count += 1\n    return count\n",
        "num_ids": 151
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 0 or n == 1:\n        return 0\n    count = 0\n    for i in range(2, n+1):\n        if is_Prime(i) == True:\n            count += 1\n    return count\n",
        "num_ids": 56
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    # check to see if n is 0 or 1\n    if n < 2:\n        return 0\n    \n    # else, we need to start by counting the 2 cases\n    prime_count = 2\n    prime_nums = [2]\n    \n    # and now we need to check for all the numbers in between 2 and n-1\n    for i in range(3, n):\n        for prime_num in prime_nums:\n            if i % prime_num == 0:\n                break\n            \n        # if we have not broken out of the loop yet, we can add the number to the list of primes\n        else:\n            prime_count += 1\n            prime_nums.append(i)\n    \n    return prime_count\n",
        "num_ids": 176
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # -1 because 0, 1, and 2 are not primes\n    nums = [0]*(n+1)\n    nums[0] = -1\n    nums[1] = -1\n    nums[2] = -1\n    for i in range(3, n+1):\n        if nums[i] == -1:\n            # If nums[i] is -1, then we already know that nums[:i] contains all the primes, and we don't need to check them again\n            # So we can set nums[:i] to -2 and no need to check them\n            nums[i] = i\n            for j in range(i*i, n+1, i):\n                nums[j] = -1\n",
        "num_ids": 184
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a, b = b, a\n    return a, b\n",
        "num_ids": 17
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b,a)\n",
        "num_ids": 10
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if not len(test_tup1) == len(test_tup2):\n        return None\n    else:\n        return tuple(max(a,b) for a,b in zip(test_tup1, test_tup2))\n",
        "num_ids": 61
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1, test_tup2)\n",
        "num_ids": 19
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return tuple(max(test_tup1, test_tup2, key=lambda x: x[i]) for i in range(len(test_tup1)))\n",
        "num_ids": 43
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return tuple(map(max, zip(test_tup1, test_tup2)))\n",
        "num_ids": 25
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup2\n    else:\n        return test_tup1\n",
        "num_ids": 42
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    m1 = min(test_tup1)\n    m2 = min(test_tup2)\n    l1 = len(test_tup1)\n    l2 = len(test_tup2)\n    n1 = len(test_tup1)\n    n2 = len(test_tup2)\n    n3 = len(test_tup1)\n    n4 = len(test_tup2)\n    if l1 > l2:\n        return (m2, m1)\n    elif l1 < l2:\n        return (m1, m2)\n    elif l1 == l2:\n        if m1 > m2:\n            return (m2, m1)\n        elif m1 < m2:\n            return (m1, m2)\n        elif m1 == m2:\n            return (m1, m2)\n    return 0\n",
        "num_ids": 218
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2\n",
        "num_ids": 42
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    #test_tup1 = (1,3,5)\n    #test_tup2 = (2,4,6)\n    #length1 = len(test_tup1)\n    #length2 = len(test_tup2)\n    \n    max_length = max(len(test_tup1),len(test_tup2))\n    #print max_length\n    \n    #get the maximum length\n    length1 = len(test_tup1)\n    length2 = len(test_tup2)\n    \n    max_elements = []\n    \n    if length1 > length2:\n        for i in range(length1):\n            max_elements.append(test_tup1[i])\n    \n    if length2 > length1:\n        for i in range(length2):\n            max_elements.append(test_tup2[i])\n    \n    return max_elements\n",
        "num_ids": 225
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    a = max(test_tup1)\n    b = max(test_tup2)\n    if a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 45
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    s_tup1 = sorted(test_tup1, reverse=True)\n    s_tup2 = sorted(test_tup2, reverse=True)\n",
        "num_ids": 42
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    n = int(n)\n    if n == 1:\n        return 2\n    a = 2\n    s = 1\n    while True:\n        a = a + 1\n        for j in range(1, n):\n            if gcd(j, a - 1) == 1:\n                s = s + 1\n        if s == n:\n            return a\n        else:\n            s = 1\n",
        "num_ids": 96
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # d is the nth element of the sequence\n    # x is the prime that forms the nth element of the sequence\n    # y is the next prime to be used in the sequence\n    # x must be odd\n    d = 1\n    x = 2\n    y = 3\n    while d!= n:\n        # modulus is the remainder of the equation\n        # (((x^2-1)^2) * y) / x\n        modulus = (((x**2) - 1)**2) * y / x\n        # the next prime is the square root of the modulus\n        y = math.floor(math.sqrt(modulus))\n        # if the square root is not a perfect square then the\n        # next prime is the square root of the modulus\n        if math.sqrt(modulus) - y**2!= 0:\n            y = y + 1\n        # x is the next odd number that is coprime to y\n        x = coprime(y)\n        d = d + 1\n    return y\n",
        "num_ids": 245
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # check if n is even\n    if n % 2 == 0:\n        return 2\n    # check if n is 1\n    if n == 1:\n        return 3\n    # first find the s value according to the n-1 s value\n    s = (n - 1) // 3\n    # get the first newman\u2013williams prime number\n    x = newman_williams(s)\n    # iterate s to find the nth newman\u2013williams prime number\n    while s < n:\n        x = (x * x + 2) % n\n        s += 1\n    return x\n",
        "num_ids": 144
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 3\n    else:\n        return newman_prime(n-1) + (2*n-1)\n",
        "num_ids": 49
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = [2,3]\n    for i in range(len(prime)):\n        if n == 1:\n            return prime[i]\n        elif n % prime[i] == 0:\n            return newman_prime(n / prime[i]) * prime[i]\n        elif n % prime[i]!= 0:\n            prime.append(newman_prime(n))\n            return prime[len(prime)-1]\n",
        "num_ids": 107
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 2:\n        return None\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    s = 1\n    r = 2\n    p = 3\n    q = 0\n    while True:\n        if (p-1) % r == 0:\n            p = r * p + 1\n            s = -s\n        else:\n            q = r\n            r = p % r\n            p = p + 2 * q * q\n            s = -s\n        if r == 0:\n            if p == n:\n                break\n            else:\n                return None\n    return p\n",
        "num_ids": 152
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n",
        "num_ids": 13
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def newman_williams_prime(n):\n        '''\n        Returns the nth newman\u2013shanks\u2013williams prime number\n        '''\n        def is_prime(num):\n            '''\n            Returns true if num is prime, false if not\n            '''\n            if num == 1:\n                return False\n            elif num == 2:\n                return True\n            else:\n                for i in range(2, num):\n                    if (num % i) == 0:\n                        return False\n            return True\n        def gcd(a, b):\n            '''\n            Returns the greatest common divisor of two numbers\n            '''\n            while(b!= 0):\n                a, b = b, a % b\n            return a\n        def euler_phi(num):\n            '''\n            Returns the number of prime numbers below num\n            '''\n            l = 0\n            for i in range(1, num):\n                if is_prime(i):\n                    l += 1\n            return l\n        def get_range(num):\n            '''\n            Returns the range of a number\n            '''\n            return (num - euler_phi(num) + 1)\n        def get_next(num):\n            '''\n            Returns the next number in the nth row of the newman\u2013shanks\u2013williams table\n            '''\n            return ((num * num + 1) // 2) % n\n        def get_column(num):\n            '''\n            Returns the nth column of the newman\u2013shanks\u2013williams table\n            '''\n            return ((num * num + 1) // 2) % n + 1\n        def get_row(num):\n            '''\n            Returns the nth row of the newman\u2013shanks\u2013williams table\n            '''\n            return (num * num + 1) // 2 % n\n        def get_diagonal(num):\n            '''\n            Returns the nth diagonal of the newman\u2013shanks\u2013williams table\n            '''\n            return (num * num - 1) // 2 % n + 1\n        def get_num_diagonals(num):\n            '''\n            Returns the number of diagonals in the newman\u2013shanks\u2013williams table\n            '''\n            return get_range(num) - get_column(num)\n        def get_num_columns(num):\n            '''\n            Returns the number of columns in the newman\u2013shanks\u2013williams table\n            '''\n            return get_range(num) - 1\n        def get_num_rows(num):\n            '''\n            Returns the number of rows in the newman\u2013shanks\u2013williams table\n            '''\n            return get_range(num) - 1\n        def get_num_diagonals_in_row(num):\n            '''\n            Returns the number of diagonals in the nth row of the newman\u2013shanks\u2013williams table\n            '''\n            return euler_phi(get_row(num))\n        def get_num_columns_in_row(num):\n            '''\n            Returns the number of columns in the nth row of the newman\u2013shanks\u2013williams table\n            '''\n            return get_num_rows(num) - get_num_diagonals_in_row(num)\n        def get_num_rows_in_row(num):\n            '''\n            Returns the number of rows in the nth row of the newman\u2013shanks\u2013williams table\n            '''\n            return get_range(num) - get_num_columns_in_row(num)\n        def get_num_diagonals_in_column(num):\n            '''\n            Returns the number of diagonals in the nth column of the newman\u2013shanks\u2013williams table\n            '''\n            return get_num_columns(num) - get_num_rows_in_row(num)\n        def get_num_columns_in_column(num):\n            '''\n            Returns the number of columns in the nth column of the newman\u2013shanks\u2013williams table\n            '''\n            return get_num_rows_in_row(num) - get_num_diagonals_in_column(num)\n        def get_num_rows_in_column(num):\n            '''\n            Returns the number of rows in the nth column of the newman\u2013shanks\u2013williams table\n            '''\n            return get_range(num) - get_num_columns_in_column(num)\n        def get_num_diagonals_in_diagonal(num):\n            '''\n            Returns the number of diagonals in the nth diagonal of the newman\u2013shanks\u2013williams table\n            '''\n            return get_num_rows_in_column(num) - get_num_columns_in_row(num)\n        def get_num_columns_in_diagonal(num):\n            '''\n            Returns the number of columns in the nth diagonal of the newman\u2013shanks\u2013williams table\n            '''\n            return get_num_rows_in_row(num) - get_num_diagonals_in_diagonal(num)\n        def get_num_rows_in_diagonal(num):\n            '''\n            Returns the number of rows in the nth diagonal of the newman\u2013shanks\u2013williams table\n            '''\n            return get_range(num) - get_num_columns_in_diagonal(num)\n        def get_num_diagonals_in_diagonal(num):\n            '''\n            Returns the number of diagonals in the nth diagonal of the newman\u2013shanks\u2013williams table\n            '''\n            return get_num_rows_in_row(num) - get_num_columns_in_row(num)\n        def get_num_rows_in_column(num):\n            '''\n            Returns the number of rows in the nth column of the newman\u2013shanks\u2013williams table\n            '''\n            return get_num_rows(num) - get_num_diagonals_in_column(num)\n        def get_num_columns_in_column(num):\n            '''\n            Returns the number of columns in the nth column of the newman\u2013shanks\u2013williams table\n            '''\n            return get_num_columns(num) - get_num_rows_in_column(num)\n        def get_num_diagonals_in_diagonal(num):\n            '''\n            Returns the number of diagonals in the nth diagonal of the newman\u2013shanks\u2013williams table\n            '''\n            return get_num_diagonals_in_row(num) - get_num_rows_in_diagonal(num)\n        def get_num_rows_in_diagonal(num):\n            '''\n            Returns the number of rows in the nth diagonal of the newman\u2013shanks\u2013williams table\n            '''\n            return get_num_rows(num) - get_num_diagonals_in_diagonal(num)\n        def get_num_diagonals_in_diagonal(num):\n            '''\n            Returns the number of diagonals in the nth diagonal of the newman\u2013shanks\u2013williams table\n            '''\n            return get_num_rows_in_diagonal(num) - get_num_columns_in_row(num)\n        def get_num_rows_in_row(num):\n            '''\n            Returns the number of rows in the nth row of the newman\u2013shanks\u2013williams table\n            '''\n            return get_range(num) - get_num_rows_in_column(num)\n        def get_num_columns_in_row(num):\n            '''\n            Returns the number of columns in the nth row of the newman\u2013shanks\u2013williams table\n            '''\n            return get_num_rows_in_column(num) - get_num_diagonals_in_row(num)\n        def get_num_rows_in_column(num):\n            '''\n            Returns the number of rows in the nth column of the newman\u2013shanks\u2013williams table\n            '''\n            return get_range(num) - get_num_columns_in_row(num)\n        def get_num_diagonal",
        "num_ids": 33
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    else:\n        a = newman_prime(n/2)\n        if n%2 == 0:\n            return (a**2 - 1) / (2*a)\n        else:\n            return a**2 + 1\n",
        "num_ids": 67
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    test_num1, test_num2 = test_tup1[0], test_tup2[0]\n    \n    if test_num2 == 0:\n        return test_tup1\n    else:\n        return (test_num1 / test_num2, test_tup2[1])\n",
        "num_ids": 78
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # print test_tup1\n    # print test_tup2\n    # print test_tup1[0] / test_tup2[0]\n    # print test_tup1[1] / test_tup2[1]\n    return tuple([a / b for a, b in zip(test_tup1, test_tup2)])\n",
        "num_ids": 90
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    assert type(test_tup1) == tuple and type(test_tup2) == tuple\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    \n    for i in range(len(test_tup1)):\n        try:\n            test_tup1[i] / test_tup2[i]\n        except ZeroDivisionError:\n            return (False, 'Division by zero!')\n        except TypeError:\n            return (False, 'One of the elements is not an int, float, or long.')\n        except:\n            return (False, 'Something unexpected happened')\n    return True\n",
        "num_ids": 167
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_list = []\n    for i, j in zip(test_tup1, test_tup2):\n        test_list.append(i / j)\n    return tuple(test_list)\n",
        "num_ids": 51
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (((test_tup1[0] / test_tup2[0]), test_tup1[1] / test_tup2[1]), test_tup1[2] / test_tup2[2])\n",
        "num_ids": 58
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    # default\n    def div_elem(num1, num2):\n        '''\n        takes in two numbers and returns the result of dividing them\n        '''\n        \n        return num1 / num2\n    \n    # test\n    assert div_elem(test_tup1[0], test_tup1[1]) == 3\n    assert div_elem(test_tup2[0], test_tup2[1]) == 3\n    assert div_elem(test_tup1[0], test_tup2[1]) == 2\n    assert div_elem(test_tup2[0], test_tup1[1]) == 1\n    assert div_elem(0, 10) == 0\n    assert div_elem(4, 10) == 4\n    assert div_elem(-10, 10) == -1\n    assert div_elem(2, 0) == \"Can't divide by zero\"\n    assert div_elem(3, 0) == \"Can't divide by zero\"\n    assert div_elem(\"\", 0) == \"Can't divide by zero\"\n    assert div_elem(0, \"\") == \"Can't divide by zero\"\n    assert div_elem(\"\", \"\") == \"Can't divide by zero\"\n    assert div_elem(\"\", \" \") == \"Can't divide by zero\"\n    assert div_elem(1, \" \") == 1\n    assert div_elem(2, \" \") == 2\n    assert div_elem(3, \" \") == 3\n    assert div_elem(4, \" \") == 4\n    assert div_elem(5, \" \") == 5\n    assert div_elem(6, \" \") == 6\n    assert div_elem(7, \" \") == 7\n    assert div_elem(8, \" \") == 8\n    assert div_elem(9, \" \") == 9\n    assert div_elem(10, \" \") == 10\n    assert div_elem(11, \" \") == 11\n    assert div_elem(12, \" \") == 12\n    assert div_elem(13, \" \") == 13\n    assert div_elem(14, \" \") == 14\n    assert div_elem(15, \" \") == 15\n    assert div_elem(16, \" \") == 16\n    assert div_elem(17, \" \") == 17\n    assert div_elem(18, \" \") == 18\n    assert div_elem(19, \" \") == 19\n    assert div_elem(20, \" \") == 20\n    assert div_elem(21, \" \") == 21\n    assert div_elem(22, \" \") == 22\n    assert div_elem(23, \" \") == 23\n    assert div_elem(24, \" \") == 24\n    assert div_elem(25, \" \") == 25\n    assert div_elem(26, \" \") == 26\n    assert div_elem(27, \" \") == 27\n    assert div_elem(28, \" \") == 28\n    assert div_elem(29, \" \") == 29\n    assert div_elem(30, \" \") == 30\n    assert div_elem(31, \" \") == 31\n    assert div_elem(32, \" \") == 32\n    assert div_elem(33, \" \") == 33\n    assert div_elem(34, \" \") == 34\n    assert div_elem(35, \" \") == 35\n    assert div_elem(36, \" \") == 36\n    assert div_elem(37, \" \") == 37\n    assert div_elem(38, \" \") == 38\n    assert div_elem(39, \" \") == 39\n    assert div_elem(40, \" \") == 40\n    assert div_elem(41, \" \") == 41\n    assert div_elem(42, \" \") == 42\n    assert div_elem(43, \" \") == 43\n    assert div_elem(44, \" \") == 44\n    assert div_elem(45, \" \") == 45\n    assert div_elem(46, \" \") == 46\n    assert div_elem(47, \" \") == 47\n    assert div_elem(48, \" \") == 48\n    assert div_elem(49, \" \") == 49\n    assert div_elem(50, \" \") == 50\n    assert div_elem(51, \" \") == 51\n    assert div_elem(52, \" \") == 52\n    assert div_elem(53, \" \") == 53\n    assert div_elem(54, \" \") == 54\n    assert div_elem(55, \" \") == 55\n    assert div_elem(56, \" \") == 56\n    assert div_elem(57, \" \") == 57\n    assert div_elem(58, \" \") == 58\n    assert div_elem(59, \" \") == 59\n    assert div_elem(60, \" \") == 60\n    assert div_elem(61, \" \") == 61\n    assert div_elem(62, \" \") == 62\n    assert div_elem(63, \" \") == 63\n    assert div_elem(64, \" \") == 64\n    assert div_elem(65, \" \") == 65\n    assert div_elem(66, \" \") == 66\n    assert div_elem(67, \" \") == 67\n    assert div_elem(68, \" \") == 68\n    assert div_elem(69, \" \") == 69\n    assert div_elem(70, \" \") == 70\n    assert div_elem(71, \" \") == 71\n    assert div_elem(72, \" \") == 72\n    assert div_elem(73, \" \") == 73\n    assert div_elem(74, \" \") == 74\n    assert div_elem(75, \" \") == 75\n    assert div_elem(76, \" \") == 76\n    assert div_elem(77, \" \") == 77\n    assert div_elem(78, \" \") == 78\n    assert div_elem(79, \" \") == 79\n    assert div_elem(80, \" \") == 80\n    assert div_elem(81, \" \") == 81\n    assert div_elem(82, \" \") == 82\n    assert div_elem(83, \" \") == 83\n    assert div_elem(84, \" \") == 84\n    assert div_elem(85, \" \") == 85\n    assert div_elem(86, \" \") == 86\n    assert div_elem(87, \" \") == 87\n    assert div_elem(88, \" \") == 88\n    assert div_elem(89, \" \") == 89\n    assert div_elem(90, \" \") == 90\n    assert div_elem(91, \" \") == 91\n    assert div_elem(92, \" \") == 92\n    assert div_elem(93, \" \") == 93\n    assert div_elem(94, \" \") == 94\n    assert div_elem(95, \" \") == 95\n    assert div_elem(96, \" \") == 96\n    assert div_elem(97, \" \") == 97\n    assert div_elem(98, \" \") == 98\n    assert div_elem(99, \" \") == 99\n    assert div_elem(100, \" \") == 100\n    assert div_elem(101, \" \") == 101\n    assert div_elem(102, \" \") == 102\n    assert div_elem(103, \" \") == 103\n    assert div_elem(104, \" \") == 104\n    assert div_elem(105, \" \") == 105\n    assert div_elem(106, \" \") == 106\n    assert div_elem(107, \" \") == 107\n    assert div_elem(108, \" \") == 108\n    assert div_elem(109, \" \") == 109\n    assert div_elem(110, \" \") == 110\n    assert div_elem(111, \" \") == 111\n    assert div_elem(11",
        "num_ids": 1956
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = tuple()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] / test_tup2[i],)\n    return result\n",
        "num_ids": 51
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1], test_tup1[2]/test_tup2[2])\n",
        "num_ids": 57
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    new_tup1 = ()\n    new_tup2 = ()\n    if len(test_tup1) == len(test_tup2):\n        for i in range(0, len(test_tup1)):\n            new_tup1 += (test_tup1[i]/test_tup2[i],)\n    elif len(test_tup1) < len(test_tup2):\n        new_tup2 = tuple(t/2 for t in test_tup2)\n        new_tup1 = division_elements(test_tup1, new_tup2)\n    else:\n        new_tup1 = tuple(t/2 for t in test_tup1)\n        new_tup2 = division_elements(new_tup1, test_tup2)\n    return new_tup1\n",
        "num_ids": 212
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return [a / b for a, b in zip(test_tup1, test_tup2)]\n",
        "num_ids": 28
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1)==0 or L == 0:\n        return ([], [])\n    elif len(list1)<L:\n        return (list1, [])\n    elif len(list1)==L:\n        return ([], list1)\n    else:\n        return ([list1[:L]], [list1[L:]])\n",
        "num_ids": 88
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    mid = len(list1) // 2\n    list1_1 = list1[:mid]\n    list1_2 = list1[mid:]\n    return (list1_1, list1_2)\n",
        "num_ids": 52
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list2 = []\n    list3 = []\n    for i in range(L):\n        list2.append(list1[i])\n    for i in range(L,len(list1)):\n        list3.append(list1[i])\n    return (list2, list3)\n    \n",
        "num_ids": 74
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]\n",
        "num_ids": 16
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        raise ValueError(\"The list you passed in is not long enough to split into two parts.\")\n",
        "num_ids": 34
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = []\n    second_part = []\n    for i in range(0,L):\n        first_part.append(list1[i])\n    for i in range(L,len(list1)):\n        second_part.append(list1[i])\n    return (first_part, second_part)\n",
        "num_ids": 80
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    return (list1[:L], list1[L:])\n    \n    \ndef remove_duplicates(list1):\n    '''\n    Write a function that takes in a list and returns a new list with duplicates removed from the given list. The elements of the new list should be in the same order as the old list.\n    '''\n    \n    new_list = []\n    for item in list1:\n        if item not in new_list:\n            new_list.append(item)\n    return new_list\n    \n    \ndef count_letters(string1, string2):\n    '''\n    Write a function that takes in two strings and returns the number of times each letter occurs in the first string, ignoring any case.\n    '''\n    \n    dict1 = {}\n    for item in string1:\n        if item not in dict1.keys():\n            dict1[item] = 1\n        else:\n            dict1[item] += 1\n    for item in string2:\n        if item not in dict1.keys():\n            dict1[item] = 1\n        else:\n            dict1[item] += 1\n    return dict1\n    \n    \ndef make_dict(list1):\n    '''\n    Write a function that takes in a list of strings and returns a dictionary with the words as the keys and the counts as the values.\n    '''\n    \n    dict1 = {}\n    for item in list1:\n        if item not in dict1.keys():\n            dict1[item] = 1\n        else:\n            dict1[item] += 1\n    return dict1\n    \n    \ndef product_of_list(list1):\n    '''\n    Write a function that takes in a list and returns the product of the values in that list.\n    '''\n    \n    product1 = 1\n    for item in list1:\n        product1 *= item\n    return product1\n    \n    \ndef remove_duplicates_in_place(list1):\n    '''\n    Write a function that takes in a list and returns the list with duplicates removed. Do this in place.\n    '''\n    \n    list1 = set(list1)\n    return list1\n    \n    \ndef compute_gcd(num1, num2):\n    '''\n    Write a function that takes in two integers and returns their greatest common divisor.\n    '''\n    \n    gcd1 = 1\n    while num1!= 0 and num2!= 0:\n        if num1 > num2:\n            num1 %= num2\n        else:\n            num2 %= num1\n    return gcd1\n    \n    \ndef compute_lcm(num1, num2):\n    '''\n    Write a function that takes in two integers and returns their least common multiple.\n    '''\n    \n    return num1 * num2 / compute_gcd(num1, num2)\n    \n    \ndef convert_from_binary(binary_string):\n    '''\n    Write a function that takes in a string of 0's and 1's and returns the decimal equivalent of the binary string.\n    '''\n    \n    decimal = 0\n    for digit in binary_string:\n        decimal = 2 * decimal + int(digit)\n    return decimal\n    \n    \ndef convert_to_binary(decimal_num):\n    '''\n    Write a function that takes in a decimal number and returns the binary equivalent of that number.\n    '''\n    \n    binary_string = ''\n    while decimal_num!= 0:\n        if decimal_num % 2 == 0:\n            binary_string += '0'\n        else:\n            binary_string += '1'\n        decimal_num = decimal_num / 2\n    if len(binary_string) % 2 == 0:\n        binary_string += '0'\n    else:\n        binary_string += '1'\n    return binary_string[::-1]\n    \n    \ndef is_palindrome(string1):\n    '''\n    Write a function that takes in a string and returns whether or not that string is a palindrome. A palindrome is a string that reads the same backwards and forwards. Ignore any spaces.\n    '''\n    \n    string1 = string1.lower().replace(' ','')\n    return string1 == string1[::-1]\n    \n    \ndef rotate_alphabets(string1, shift_value):\n    '''\n    Write a function that takes in a string and a number and returns a string that is the rotational shift of the given string by the given number.\n    '''\n    \n    return string1[shift_value % 26:] + string1[:shift_value % 26]\n    \n    \ndef encode_morse(string1):\n    '''\n    Write a function that takes in a string of characters and returns a string of morse code equivalent of those characters.\n    '''\n    \n    string1 = string1.lower()\n    morse_string = ''\n    for item in string1:\n        if item == 'a':\n            morse_string += '.-'\n        elif item == 'b':\n            morse_string += '-...'\n        elif item == 'c':\n            morse_string += '-.-.'\n        elif item == 'd':\n            morse_string += '-..'\n        elif item == 'e':\n            morse_string += '.'\n        elif item == 'f':\n            morse_string += '..-.'\n        elif item == 'g':\n            morse_string += '--.'\n        elif item == 'h':\n            morse_string += '....'\n        elif item == 'i':\n            morse_string += '..'\n        elif item == 'j':\n            morse_string += '.---'\n        elif item == 'k':\n            morse_string += '-.-'\n        elif item == 'l':\n            morse_string += '.-..'\n        elif item =='m':\n            morse_string += '--'\n        elif item == 'n':\n            morse_string += '-.'\n        elif item == 'o':\n            morse_string += '---'\n        elif item == 'p':\n            morse_string += '.--.'\n        elif item == 'q':\n            morse_string += '--.-'\n        elif item == 'r':\n            morse_string += '.-.'\n        elif item =='s':\n            morse_string += '...'\n        elif item == 't':\n            morse_string += '-'\n        elif item == 'u':\n            morse_string += '..-'\n        elif item == 'v':\n            morse_string += '...-'\n        elif item == 'w':\n            morse_string += '.--'\n        elif item == 'x':\n            morse_string += '-..-'\n        elif item == 'y':\n            morse_string += '-.--'\n        elif item == 'z':\n            morse_string += '--..'\n        else:\n            morse_string += item\n    return morse_string\n    \n    \ndef decode_morse(string1):\n    '''\n    Write a function that takes in a string of morse code and returns a string of characters equivalent of those code.\n    '''\n    \n    string1 = string1.lower()\n    char_string = ''\n    for item in string1:\n        if item == '.':\n            char_string += 'a'\n        elif item == '-':\n            char_string += 'b'\n        elif item == '--':\n            char_string += 'c'\n        elif item == '...':\n            char_string += 'd'\n        elif item == '..-':\n            char_string += 'e'\n        elif item == '...-':\n            char_string += 'f'\n        elif item == '-..-':\n            char_string += 'g'\n        elif item == '..--':\n            char_string += 'h'\n        elif item == '....':\n            char_string += 'i'\n        elif item == '..':\n            char_string += 'j'\n        elif item == '.---':\n            char_string += 'k'\n        elif item == '-.-':\n            char",
        "num_ids": 243
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = len(list1)\n    return (list1[0:L], list1[L:n])\n",
        "num_ids": 29
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = []\n    second_part = []\n    for i in range(L):\n        first_part.append(list1[i])\n    for i in range(L, len(list1)):\n        second_part.append(list1[i])\n    return (first_part, second_part)\n",
        "num_ids": 78
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n",
        "num_ids": 18
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age_in_years = float(h_age) * 7\n    return age_in_years\n",
        "num_ids": 26
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "num_ids": 10
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        return 'Invalid age'\n    elif h_age == 1:\n        return '1 dog year'\n    else:\n        return '%s dog years' % str(h_age * 7)\n",
        "num_ids": 58
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = 11 * h_age\n    return age\n    \ndef dog_years(w_age, m_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = w_age + m_age\n    return years\n    \ndef dog_months(w_age, m_age):\n    '''\n    Write a function to calculate a dog's age in dog's months.\n    '''\n    months = w_age * 12 + m_age\n    return months\n    \ndef dog_weeks(w_age, m_age):\n    '''\n    Write a function to calculate a dog's age in dog's weeks.\n    '''\n    weeks = w_age * 52 + m_age * 4\n    return weeks\n    \ndef dog_days(w_age, m_age):\n    '''\n    Write a function to calculate a dog's age in dog's days.\n    '''\n    days = w_age * 365 + m_age * 5\n    return days\n    \ndef dog_hours(w_age, m_age):\n    '''\n    Write a function to calculate a dog's age in dog's hours.\n    '''\n    hours = w_age * 24 + m_age * 7\n    return hours\n    \ndef dog_minutes(w_age, m_age):\n    '''\n    Write a function to calculate a dog's age in dog's minutes.\n    '''\n    minutes = w_age * 1440 + m_age * 1440\n    return minutes\n    \ndef dog_seconds(w_age, m_age):\n    '''\n    Write a function to calculate a dog's age in dog's seconds.\n    '''\n    seconds = w_age * 86400 + m_age * 86400\n    return seconds\n    \ndef dog_microseconds(w_age, m_age):\n    '''\n    Write a function to calculate a dog's age in dog's microseconds.\n    '''\n    microseconds = w_age * 86400000000 + m_age * 86400000000\n    return microseconds\n    \ndef dog_weekday(w_age, m_age):\n    '''\n    Write a function to calculate a dog's age in dog's weekday.\n    '''\n    weekday = w_age * 7 + m_age\n    return weekday\n    \ndef dog_weekend(w_age, m_age):\n    '''\n    Write a function to calculate a dog's age in dog's weekend.\n    '''\n    weekend = w_age * 6 + m_age * 1\n    return weekend\n    \ndef dog_month(w_age, m_age):\n    '''\n    Write a function to calculate a dog's age in dog's month.\n    '''\n    month = w_age * 12 + m_age\n    return month\n    \ndef dog_year(w_age, m_age):\n    '''\n    Write a function to calculate a dog's age in dog's year.\n    '''\n    year = w_age * 13 + m_age\n    return year\n    \ndef dog_decade(w_age, m_age):\n    '''\n    Write a function to calculate a dog's age in dog's decade.\n    '''\n    decade = w_age * 10 + m_age\n    return decade\n    \ndef dog_century(w_age, m_age):\n    '''\n    Write a function to calculate a dog's age in dog's century.\n    '''\n    century = w_age * 100 + m_age\n    return century\n    \ndef dog_millenium(w_age, m_age):\n    '''\n    Write a function to calculate a dog's age in dog's millennium.\n    '''\n    millenium = w_age * 1000 + m_age\n    return millennium\n    \ndef dog_millennium(w_age, m_age):\n    '''\n    Write a function to calculate a dog's age in dog's millennium.\n    '''\n    millennium = w_age * 10000 + m_age\n    return millennium\n    \ndef dog_s(w_age, m_age):\n    '''\n    Write a function to calculate a dog's age in dog's million.\n    '''\n    s = w_age * 1000000 + m_age\n    return s\n    \ndef dog_millions(w_age, m_age):\n    '''\n    Write a function to calculate a dog's age in dog's billion.\n    '''\n    millions = w_age * 1000000000 + m_age\n    return millions\n    \ndef dog_billions(w_age, m_age):\n    '''\n    Write a function to calculate a dog's age in dog's trillion.\n    '''\n    billions = w_age * 1000000000000 + m_age\n    return billions\n    \ndef dog_petal(w_age, m_age):\n    '''\n    Write a function to calculate a dog's age in dog's petal.\n    '''\n    petal = w_age * 1000000000000000 + m_age\n    return petal\n    \ndef dog_liter(w_age, m_age):\n    '''\n    Write a function to calculate a dog's age in dog's liter.\n    '''\n    liter = w_age * 100000000000000000 + m_age\n    return liter\n    \ndef dog_stone(w_age, m_age):\n    '''\n    Write a function to calculate a dog's age in dog's stone.\n    '''\n    stone = w_age * 100000000000000000 + m_age\n    return stone\n    \ndef dog_vacuum(w_age, m_age):\n    '''\n    Write a function to calculate a dog's age in dog's vacuum.\n    '''\n    vacuum = w_age * 100000000000000000 + m_age\n    return vacuum\n    \ndef dog_yearly(w_age, m_age):\n    '''\n    Write a function to calculate a dog's age in dog's yearly.\n    '''\n    yearly = w_age * 10000000000000000 + m_age\n    return yearly\n    \ndef dog_annual(w_age, m_age):\n    '''\n    Write a function to calculate a dog's age in dog's annual.\n    '''\n    annual = w_age * 1000000000000000 + m_age\n    return annual\n    \ndef dog_calendar(w_age, m_age):\n    '''\n    Write a function to calculate a dog's age in dog's calendar.\n    '''\n    calendar = w_age * 100000000000000000 + m_age\n    return calendar\n    \ndef dog_millennia(w_age, m_age):\n    '''\n    Write a function to calculate a dog's age in dog's millennium.\n    '''\n    millennia = w_age * 100000000000000 + m_age\n    return millennium\n    \ndef dog_century(w_age, m_age):\n    '''\n    Write a function to calculate a dog's age in dog's century.\n    '''\n    century = w_age * 100 + m_age\n    return century\n    \ndef dog_century(w_age, m_age):\n    '''\n    Write a function to calculate a dog's age in dog's century.\n    '''\n    century = w_age * 100 + m_age\n    return century\n    \ndef dog_millennium(w_age, m_age):\n    '''\n    Write a function to calculate a dog's age in dog's millennium.\n    '''\n    millennium = w_age * 1000 + m_age\n    return millennium\n    \ndef dog_millennium(w_age, m_age):\n    '''\n    Write a function to calculate a dog's age in dog's millennium.\n    '''\n    millennium = w_age * 1000 + m_age\n    return millennium\n    \ndef dog_millennium(w_age, m_age):\n    '''\n    Write a function to calculate a dog's age in dog's millennium.\n    '''\n    millennium = w_age * 1000 + m_age\n    return millennium\n    \ndef dog_millennium(w_age, m_age):\n    '''\n    Write a function to calculate a dog's age in dog's millennium.\n    '''\n    millennium = w_age * 1000 + m_age\n    return millennium\n    \ndef dog_millennium(w_age, m_age):\n    '''",
        "num_ids": 1
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    from datetime import date\n",
        "num_ids": 9
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    year = 0\n    months = 0\n    days = 0\n    \n    while True:\n        if months == 0:\n            years = year + 1\n        else:\n            years = 0\n        if months > 0:\n            months = months - 5\n        if days > 30:\n            months = months + 1\n            days = days - 30\n        if days == 30:\n            months = months + 1\n            days = 0\n        if months == 0 and days == 0:\n            break\n    \n    if years == 0:\n        return \"%s years old\" %years\n    else:\n        return \"%s years and %s months old\" %(years, months)\n",
        "num_ids": 156
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "num_ids": 10
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "num_ids": 10
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    import math\n",
        "num_ids": 6
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return round(h_age * 7)\n",
        "num_ids": 13
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Your Code Here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # import random\n    return [S[x:x+step] for x in range(0, len(S), step)]\n    # return [S[x:x+step] for x in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(0, len(S), step)]\n    # return [S[i:i+step] for i in range(",
        "num_ids": 1999
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n",
        "num_ids": 27
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) == 0:\n        return S\n    if step == 1:\n        return S\n    else:\n        i = 0\n        L = []\n        while i < len(S):\n            L += [S[i:i+step]]\n            i += step\n        return L\n",
        "num_ids": 72
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) == 0:\n        return [S]\n    else:\n        if len(S)%step == 0:\n            return [S[i:i+step] for i in range(0, len(S), step)]\n        else:\n            return [S[i:i+step] for i in range(0, len(S), step)] + [[]]\n",
        "num_ids": 91
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    #    1. Define some constants\n    side = float(l)\n    area_of_square = side**2\n    side_area = side*4\n    side_surface_area = side_area*3\n    lateral_surface_area = side_surface_area + 2*area_of_square\n    return lateral_surface_area\n",
        "num_ids": 83
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    side = float(l)\n    volume = side ** 3\n    surface_area = (6 * volume) + (6 * side * side)\n    return surface_area\n",
        "num_ids": 42
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Your code goes here\n    return 6\ndef lateralsurface_cuboid(l):\n    '''\n    Write a function to find the lateral surface area of a cuboid given its side length.\n    '''\n    # Your code goes here\n    return 6*(l**2)\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # Your code goes here\n    return l**3\ndef volume_cuboid(l):\n    '''\n    Write a function to find the volume of a cuboid given its side length.\n    '''\n    # Your code goes here\n    return l**3\ndef surface_area_cylinder(r,l):\n    '''\n    Write a function to find the lateral surface area of a cylinder given the radius and length of its base.\n    '''\n    # Your code goes here\n    return 3.14*r*(r+l)\ndef volume_cylinder(r,l):\n    '''\n    Write a function to find the volume of a cylinder given the radius and length of its base.\n    '''\n    # Your code goes here\n    return 3.14*r*(r+l)\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given the radius of its sphere.\n    '''\n    # Your code goes here\n    return 4*3.14*r\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given the radius of its sphere.\n    '''\n    # Your code goes here\n    return 4/3.14*(r**3)\ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given the radius of its base and the height of its top.\n    '''\n    # Your code goes here\n    return 3.14*r*(r+h)\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given the radius of its base and the height of its top.\n    '''\n    # Your code goes here\n    return 3.14*r*(r+h)\ndef surface_area_torus(r,l):\n    '''\n    Write a function to find the lateral surface area of a torus given the radius of its base and the length of its side.\n    '''\n    # Your code goes here\n    return 6*3.14*(r**2+l**2)\ndef volume_torus(r,l):\n    '''\n    Write a function to find the volume of a torus given the radius of its base and the length of its side.\n    '''\n    # Your code goes here\n    return 6*3.14*(r**2)*l/3\ndef surface_area_paralelepiped(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a paralelepiped given the lengths of its sides.\n    '''\n    # Your code goes here\n    return 2*(a+b+c)\ndef volume_paralelepiped(a,b,c):\n    '''\n    Write a function to find the volume of a paralelepiped given the lengths of its sides.\n    '''\n    # Your code goes here\n    return a*b*c\ndef surface_area_prism(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a prism given the lengths of its top, bottom, sides and height.\n    '''\n    # Your code goes here\n    return (a+b+c)*d\ndef volume_prism(a,b,c,d):\n    '''\n    Write a function to find the volume of a prism given the lengths of its top, bottom, sides and height.\n    '''\n    # Your code goes here\n    return d*a*b*c/3\ndef surface_area_trapezoid(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given the lengths of its top, bottom, sides and height.\n    '''\n    # Your code goes here\n    return ((a+b)*(c+d))/2\ndef volume_trapezoid(a,b,c,d):\n    '''\n    Write a function to find the volume of a trapezoid given the lengths of its top, bottom, sides and height.\n    '''\n    # Your code goes here\n    return (a*b*d)/2\ndef area_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle given the lengths of its sides.\n    '''\n    # Your code goes here\n    return a*b\ndef volume_rectangle(a,b):\n    '''\n    Write a function to find the volume of a rectangle given the lengths of its sides.\n    '''\n    # Your code goes here\n    return a*b\ndef area_polygon(n,r):\n    '''\n    Write a function to find the area of a polygon given the number of sides and the length of each side.\n    '''\n    # Your code goes here\n    return (n*r**2)/2\ndef volume_polygon(n,r):\n    '''\n    Write a function to find the volume of a polygon given the number of sides and the length of each side.\n    '''\n    # Your code goes here\n    return n*r**2/2\ndef area_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle given the lengths of its sides.\n    '''\n    # Your code goes here\n    return (a+b+c)/2\ndef volume_triangle(a,b,c):\n    '''\n    Write a function to find the volume of a triangle given the lengths of its sides.\n    '''\n    # Your code goes here\n    return (a*b*c)/3\ndef surface_area_rectangularprism(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a rectangular prism given the lengths of its sides.\n    '''\n    # Your code goes here\n    return 2*(a+b+c)\ndef volume_rectangularprism(a,b,c):\n    '''\n    Write a function to find the volume of a rectangular prism given the lengths of its sides.\n    '''\n    # Your code goes here\n    return a*b*c\ndef surface_area_ellipsoidalprism(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of an ellipsoidal prism given the lengths of its sides.\n    '''\n    # Your code goes here\n    return 2*(a+b+c)*d\ndef volume_ellipsoidalprism(a,b,c,d):\n    '''\n    Write a function to find the volume of an ellipsoidal prism given the lengths of its sides.\n    '''\n    # Your code goes here\n    return (a*b*c)*d/3\ndef surface_area_conicalprism(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a conical prism given the lengths of its sides.\n    '''\n    # Your code goes here\n    return 2*(a+b+c)*d\ndef volume_conicalprism(a,b,c,d):\n    '''\n    Write a function to find the volume of a conical prism given the lengths of its sides.\n    '''\n    # Your code goes here\n    return (a*b*c)*d/3\ndef surface_area_cone(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a cone given the radius of its base and the length of its side.\n    '''\n    # Your code goes here\n    return 3.14*a*(a+b)\ndef volume_cone(a,b,c):\n    '''\n    Write a function to find the volume of a cone given the radius of its base and the length of its side.\n    '''\n    # Your code goes here\n    return 3.14*a*(a+b)\ndef surface_area_cylinder(r,l):\n    '''\n    Write a function to find the lateral surface area of a cylinder given the radius and lengt",
        "num_ids": 21
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import math\n    l = l*l\n    return l*l*6\n",
        "num_ids": 21
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\ndef lateralsurface_cuboid(l1,l2):\n    '''\n    Write a function to find the lateral surface area of a cuboid given its side lengths.\n    '''\n    return 2*(l1*l2 + l1*l2)\n",
        "num_ids": 20
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    s = 2 * l ** 2\n    return s\n",
        "num_ids": 15
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2\n",
        "num_ids": 8
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def lateral_surface(l):\n        return 6*l**2\n    return lateral_surface\n",
        "num_ids": 25
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n < 0:\n        print('Error: n must be non-negative')\n        return -1\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i**2\n    return sum\n",
        "num_ids": 58
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    num_sum = 0\n    for num in range(1, n+1, 2):\n        num_sum += num**2\n    return num_sum\n",
        "num_ids": 41
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        if i % 2!= 0:\n            total += i**2\n    return total\n",
        "num_ids": 37
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([x**2 for x in range(1,n+1) if x%2==1])\n",
        "num_ids": 28
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1,2):\n        sum = sum + i**2\n    return sum\n    \ndef cube_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the cubes of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1,2):\n        sum = sum + i**3\n    return sum\n    \ndef sum_of_cubes(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the cubes of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1,2):\n        sum = sum + i**3\n    return sum\n    \ndef sum_of_square(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1,2):\n        sum = sum + i**2\n    return sum\n    \ndef sum_of_cubes(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the cubes of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1,2):\n        sum = sum + i**3\n    return sum\n    \ndef sum_of_square(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1,2):\n        sum = sum + i**2\n    return sum\n    \ndef sum_of_cubes(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the cubes of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1,2):\n        sum = sum + i**3\n    return sum\n    \ndef sum_of_square(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1,2):\n        sum = sum + i**2\n    return sum\n    \ndef sum_of_cubes(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the cubes of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1,2):\n        sum = sum + i**3\n    return sum\n    \ndef sum_of_square(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1,2):\n        sum = sum + i**2\n    return sum\n    \ndef sum_of_cubes(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the cubes of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1,2):\n        sum = sum + i**3\n    return sum\n    \ndef sum_of_square(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1,2):\n        sum = sum + i**2\n    return sum\n    \ndef sum_of_cubes(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the cubes of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1,2):\n        sum = sum + i**3\n    return sum\n    \ndef sum_of_square(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1,2):\n        sum = sum + i**2\n    return sum\n    \ndef sum_of_cubes(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the cubes of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1,2):\n        sum = sum + i**3\n    return sum\n    \ndef sum_of_square(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1,2):\n        sum = sum + i**2\n    return sum\n    \ndef sum_of_cubes(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the cubes of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1,2):\n        sum = sum + i**3\n    return sum\n    \ndef sum_of_square(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1,2):\n        sum = sum + i**2\n    return sum\n    \ndef sum_of_cubes(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the cubes of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1,2):\n        sum = sum + i**3\n    return sum\n    \ndef sum_of_square(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1,2):\n        sum = sum + i**2\n    return sum\n    \ndef sum_of_cubes(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the cubes of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1,2):\n        sum = sum + i**3\n    return sum\n    \ndef sum_of_square(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1,2):\n        sum = sum + i**2\n    return sum\n    \ndef sum_of_cubes(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the cubes of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1,2):\n        sum = sum + i**3\n    return sum\n    \ndef sum_of_square(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1,2):\n        sum = sum + i**2\n    return sum\n    \ndef sum_of_cubes(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the cubes of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1,2):\n        sum = sum + i**3\n    return sum\n    \ndef sum_of_square(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural number",
        "num_ids": 27
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    total = 0\n    for i in range(1, n+1, 2):\n        total += i**2\n",
        "num_ids": 31
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(0,n):\n        total += (i+1)*(i+1)\n    return total\n",
        "num_ids": 36
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    def square_Sum2(n):\n        s = 0\n        for i in range(1, n+1, 2):\n            s = s + i**2\n        return s\n    return square_Sum2(n)\ndef odd_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the odd numbers from 1 to n.\n    '''\n    def odd_Sum2(n):\n        s = 0\n        for i in range(1, n+1, 2):\n            s = s + i\n        return s\n    return odd_Sum2(n)\ndef even_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the even numbers from 1 to n.\n    '''\n    def even_Sum2(n):\n        s = 0\n        for i in range(2, n+1, 2):\n            s = s + i\n        return s\n    return even_Sum2(n)\ndef comp_Fact(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the proper divisors of n (excluding 1 and n)\n    '''\n    def comp_Fact2(n):\n        s = 0\n        for i in range(1, n):\n            if n % i == 0:\n                s = s + i\n        return s\n    return comp_Fact2(n)\ndef sum_Fact(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the proper divisors of n (excluding 1 and n)\n    '''\n    def sum_Fact2(n):\n        s = 0\n        for i in range(1, n+1):\n            if n % i == 0:\n                s = s + i\n        return s\n    return sum_Fact2(n)\ndef div_Fact(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the proper divisors of n (excluding 1 and n)\n    '''\n    def div_Fact2(n):\n        s = 0\n        for i in range(1, n+1):\n            if n % i == 0:\n                s = s + i\n        return s\n    return div_Fact2(n)\ndef is_Prime(n):\n    '''\n    Write a python function that takes in a positive integer n and returns True if n is prime and False otherwise.\n    '''\n    def is_Prime2(n):\n        s = 0\n        for i in range(1, n+1):\n            if n % i == 0:\n                s = s + 1\n        if s == 2:\n            return True\n        else:\n            return False\n    return is_Prime2(n)\ndef is_Perfect(n):\n    '''\n    Write a python function that takes in a positive integer n and returns True if n is a perfect number and False otherwise.\n    '''\n    def is_Perfect2(n):\n        s = 0\n        for i in range(1, n):\n            if n % i == 0:\n                s = s + i\n        if s == n:\n            return True\n        else:\n            return False\n    return is_Perfect2(n)\ndef is_Abundant(n):\n    '''\n    Write a python function that takes in a positive integer n and returns True if n is an abundant number and False otherwise.\n    '''\n    def is_Abundant2(n):\n        s = 0\n        for i in range(1, n):\n            if n % i == 0:\n                s = s + i\n        if s > n:\n            return True\n        else:\n            return False\n    return is_Abundant2(n)\ndef is_Deficient(n):\n    '''\n    Write a python function that takes in a positive integer n and returns True if n is a deficient number and False otherwise.\n    '''\n    def is_Deficient2(n):\n        s = 0\n        for i in range(1, n):\n            if n % i == 0:\n                s = s + i\n        if s < n:\n            return True\n        else:\n            return False\n    return is_Deficient2(n)\ndef is_Perfect_Power(n):\n    '''\n    Write a python function that takes in a positive integer n and returns True if n is a perfect power and False otherwise.\n    '''\n    def is_Perfect_Power2(n):\n        s = 0\n        for i in range(1, n):\n            if n % i == 0:\n                s = s + i\n        if s == n:\n            return True\n        else:\n            return False\n    return is_Perfect_Power2(n)\ndef is_Fibonacci(n):\n    '''\n    Write a python function that takes in a positive integer n and returns True if n is a Fibonacci number and False otherwise.\n    '''\n    def is_Fibonacci2(n):\n        if n == 0 or n == 1:\n            return True\n        else:\n            s = 1\n            f = 1\n            for i in range(1, n):\n                s = f\n                f = f + s\n            if n == f:\n                return True\n            else:\n                return False\n    return is_Fibonacci2(n)\ndef is_Tribonacci(n):\n    '''\n    Write a python function that takes in a positive integer n and returns True if n is a Tribonacci number and False otherwise.\n    '''\n    def is_Tribonacci2(n):\n        if n == 0 or n == 1 or n == 2:\n            return True\n        else:\n            s = 1\n            t = 2\n            u = 3\n            for i in range(3, n):\n                s = t\n                t = u\n                u = t + s\n            if n == u:\n                return True\n            else:\n                return False\n    return is_Tribonacci2(n)\ndef is_HCF(n, m):\n    '''\n    Write a python function that takes in two positive integers n and m and returns True if n and m are coprime and False otherwise.\n    '''\n    def is_HCF2(n, m):\n        if n % m == 0:\n            return True\n        else:\n            return False\n    return is_HCF2(n, m)\ndef is_LCM(n, m):\n    '''\n    Write a python function that takes in two positive integers n and m and returns True if n and m are co-prime and False otherwise.\n    '''\n    def is_LCM2(n, m):\n        if n * m == (n + m):\n            return True\n        else:\n            return False\n    return is_LCM2(n, m)\ndef is_Nth_Power(n, m):\n    '''\n    Write a python function that takes in two positive integers n and m and returns True if m is a power of n and False otherwise.\n    '''\n    def is_Nth_Power2(n, m):\n        if m % n == 0:\n            return True\n        else:\n            return False\n    return is_Nth_Power2(n, m)\ndef is_Nth_Root(n, m):\n    '''\n    Write a python function that takes in two positive integers n and m and returns True if m is a power of n and False otherwise.\n    '''\n    def is_Nth_Root2(n, m):\n        if m == n**(1/m):\n            return True\n        else:\n            return False\n    return is_Nth_Root2(n, m)\ndef is_Prime_power(n):\n    '''\n    Write a python function that takes in a positive integer n and returns True if n is a prime power and False otherwise.\n    '''\n    def is_Prime_power2(n):\n        s = 0\n        for i in range(1, n):\n            if n % i == 0:\n                s = s + i\n        if s == n:\n            return True\n        else:\n            return False\n    return is_Prime_power2(n)\ndef is_Prime_power_2(n):\n    '''\n    Write a python function that takes in a positive integer n and returns True if n is a power of a prime number and False otherwise.\n    '''\n    def is",
        "num_ids": 5
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(n+1):\n        if(i%2==1):\n            sum=sum+i**2\n    return sum\n",
        "num_ids": 41
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return (n*(n+1))/2\n",
        "num_ids": 41
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    result = 1\n    for i in range(n):\n        result = result * (i+1)\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n*(n+1)//2\n",
        "num_ids": 14
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return int(5*n*(5*n + 4) / 2)\n",
        "num_ids": 21
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 5\n    return find_star_num(n-1) + (n-1)*4\n",
        "num_ids": 44
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return find_star_num(n-1) + (n-1)\n",
        "num_ids": 36
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n * (n + 1) / 2\n",
        "num_ids": 14
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return (n-1)*n\n",
        "num_ids": 11
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    num = 0\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        for x in range(1, n):\n            num += find_star_num(x)\n        return num\n",
        "num_ids": 61
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    count = 0\n    for i in range(0, n): \n        count += i + 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 5\n    return 5 * find_star_num(n - 1) + 5 * find_star_num(n - 2) + 5 * find_star_num(n - 3)\n",
        "num_ids": 76
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k) - 96\n",
        "num_ids": 11
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef convert_to_ascii(s):\n    '''\n    Write a function to convert a string to ascii.\n    '''\n    l = []\n    for i in s:\n        l.append(ord(i))\n    return l\n",
        "num_ids": 28
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    try:\n        return ord(k)\n    except:\n        return -1\n",
        "num_ids": 22
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if ord(k)>=ord('a') and ord(k)<=ord('z'):\n        return ord(k) - ord('a') + ord('A')\n    elif ord(k)>=ord('0') and ord(k)<=ord('9'):\n        return ord(k) - ord('0') + ord('10')\n    else:\n        return ord(k)\n",
        "num_ids": 98
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if(ord(k)>=65 and ord(k)<=90):\n        return ord(k)-65\n    elif(ord(k)>=97 and ord(k)<=122):\n        return ord(k)-97\n    else:\n        return -1\n",
        "num_ids": 68
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        return arr[0] + sum_even_and_even_index(arr[2:])\n",
        "num_ids": 61
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0,len(arr),2):\n        sum += arr[i]\n    return sum\n",
        "num_ids": 34
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            total += arr[i]\n    return total\n",
        "num_ids": 46
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(arr[0::2])\n",
        "num_ids": 13
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(arr[0::2])\n    \ndef max_product(arr):\n    '''\n    Write a python function to find the product of maximum and minimum elements in a list.\n    '''\n    return arr[0]*arr[-1]\n    \ndef find_n_to_m(arr,n,m):\n    '''\n    Write a python function to find the Nth smallest number in a list.\n    '''\n    arr.sort()\n    return arr[n-1]\n    \ndef find_first_duplicate(arr):\n    '''\n    Write a python function to find the first duplicate element in a list.\n    '''\n    dic = {}\n    for i in arr:\n        if i in dic:\n            return i\n        else:\n            dic[i] = 1\n    return 0\n    \ndef find_second_duplicate(arr):\n    '''\n    Write a python function to find the second duplicate element in a list.\n    '''\n    dic = {}\n    for i in arr:\n        if i in dic:\n            return i\n        else:\n            dic[i] = 1\n    return 0\n    \ndef find_second_largest_number(arr):\n    '''\n    Write a python function to find the second largest number in a list.\n    '''\n    arr.sort()\n    return arr[-2]\n    \ndef find_top_n_smallest_numbers(arr,n):\n    '''\n    Write a python function to find the top N smallest numbers in a list.\n    '''\n    arr.sort()\n    return arr[:n]\n    \ndef reverse_string(string):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return string[::-1]\n    \ndef remove_duplicates(arr):\n    '''\n    Write a python function to remove duplicates in a list.\n    '''\n    arr = list(set(arr))\n    return arr\n    \ndef palindrome(string):\n    '''\n    Write a python function to check if a string is a palindrome.\n    '''\n    if string == string[::-1]:\n        return True\n    return False\n    \ndef palindrome_sentence(string):\n    '''\n    Write a python function to check if a string is a palindrome.\n    '''\n    string = string.lower()\n    string = re.sub('[^a-z0-9]','',string)\n    return palindrome(string)\n    \ndef palindrome_sentence_2(string):\n    '''\n    Write a python function to check if a string is a palindrome.\n    '''\n    string = string.lower()\n    string = re.sub('[^a-z0-9]','',string)\n    string = re.sub('[^a-z0-9]+', '', string)\n    return string == string[::-1]\n    \ndef anagram(string1,string2):\n    '''\n    Write a python function to check if two strings are anagrams or not.\n    '''\n    string1 = string1.lower()\n    string2 = string2.lower()\n    string1 = re.sub('[^a-z0-9]','',string1)\n    string2 = re.sub('[^a-z0-9]','',string2)\n    return sorted(string1) == sorted(string2)\n    \ndef get_sentence_length_list(sentence):\n    '''\n    Write a python function to get the length of each sentence in a list of sentences.\n    '''\n    return [len(i) for i in sentence]\n    \ndef get_words_list(sentence):\n    '''\n    Write a python function to get the words in a sentence as a list.\n    '''\n    return sentence.split()\n    \ndef count_words_in_sentence(sentence):\n    '''\n    Write a python function to count the number of words in a sentence.\n    '''\n    return len(sentence.split())\n    \ndef count_letters_in_sentence(sentence):\n    '''\n    Write a python function to count the number of letters in a sentence.\n    '''\n    return len(sentence)\n    \ndef count_letters_in_string(string):\n    '''\n    Write a python function to count the number of letters in a string.\n    '''\n    return len(string)\n    \ndef count_uppercase_in_string(string):\n    '''\n    Write a python function to count the number of uppercase characters in a string.\n    '''\n    return sum(1 for c in string if c.isupper())\n    \ndef count_uppercase_in_list(arr):\n    '''\n    Write a python function to count the number of uppercase characters in a list.\n    '''\n    return sum(1 for i in arr if i.isupper())\n    \ndef print_pairs(arr,n):\n    '''\n    Write a python function to find the N pairs of two numbers whose sum is equal to a given number.\n    '''\n    for i in arr:\n        for j in arr:\n            if i + j == n and i!= j:\n                print i,j\n    \ndef multiply_list(arr):\n    '''\n    Write a python function to multiply all elements in a list.\n    '''\n    return reduce(lambda x,y:x*y,arr)\n    \ndef is_even_number(number):\n    '''\n    Write a python function to check if a number is even or not.\n    '''\n    return number%2 == 0\n    \ndef is_prime_number(number):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if number > 1:\n        for i in range(2,number):\n            if number%i == 0:\n                return False\n    return True\n    \ndef count_primes(number):\n    '''\n    Write a python function to count the number of primes in a list.\n    '''\n    return len([i for i in range(1,number+1) if is_prime_number(i)])\n    \ndef sum_list(arr):\n    '''\n    Write a python function to get the sum of all elements in a list.\n    '''\n    return sum(arr)\n    \ndef sum_list_comprehension(arr):\n    '''\n    Write a python function to get the sum of all elements in a list using a list comprehension.\n    '''\n    return sum([i for i in arr])\n    \ndef mult_list(arr):\n    '''\n    Write a python function to get the product of all elements in a list.\n    '''\n    return reduce(lambda x,y:x*y,arr)\n    \ndef multiply_list_comprehension(arr):\n    '''\n    Write a python function to get the product of all elements in a list using a list comprehension.\n    '''\n    return reduce(lambda x,y:x*y,arr)\n    \ndef power_list(arr,n):\n    '''\n    Write a python function to get the power of all elements in a list.\n    '''\n    return [i**n for i in arr]\n    \ndef add_list(arr):\n    '''\n    Write a python function to get the sum of all elements in a list.\n    '''\n    return sum(arr)\n    \ndef subtract_list(arr,n):\n    '''\n    Write a python function to get the sum of all elements in a list.\n    '''\n    return sum(arr) - n\n    \ndef sum_list_index(arr,index):\n    '''\n    Write a python function to get the sum of all elements in a list.\n    '''\n    return sum(arr[index])\n    \ndef sum_list_slice(arr,start_index,end_index):\n    '''\n    Write a python function to get the sum of all elements in a list.\n    '''\n    return sum(arr[start_index:end_index])\n    \ndef remove_duplicate(arr):\n    '''\n    Write a python function to get the sum of all elements in a list.\n    '''\n    return list(set(arr))\n    \ndef remove_duplicate_with_index(ar",
        "num_ids": 25
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for index, value in enumerate(arr):\n        if (index%2 == 0 and value%2 == 0):\n            total += value\n    return total\n",
        "num_ids": 44
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(arr[::2])\n",
        "num_ids": 12
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_of_even = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum_of_even += arr[i]\n    return sum_of_even\n",
        "num_ids": 58
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(arr[::2])\n",
        "num_ids": 12
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(arr[0::2])\n",
        "num_ids": 13
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return even_Power_Sum(n-1) + n**5\n",
        "num_ids": 34
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(0, n):\n        if (i**5) % 2 == 0:\n            total += i**5\n    return total\n",
        "num_ids": 42
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum(x**5 for x in range(n+1) if x%2==0)\n",
        "num_ids": 26
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for i in range(2,n+1,2):\n        result = result + (i**5)\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2,n+1):\n        if i%2 == 0:\n            sum += i**5\n    return sum\n",
        "num_ids": 40
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum(2**i for i in range(1, n+1) if i%2 == 0)\n",
        "num_ids": 28
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([x**5 for x in range(1,n) if x%2==0])\n",
        "num_ids": 26
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    powerSum = 0\n    for num in range(2, n+1, 2):\n        powerSum += num**5\n    return powerSum\n",
        "num_ids": 38
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    power = 1\n    total = 0\n    while power <= n:\n        if power % 2 == 0:\n            total = total + power**5\n        power += 1\n    return total\n",
        "num_ids": 46
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum(2**i for i in range(n) if i%2==0)\n",
        "num_ids": 24
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[-1] for x in test_list]\n",
        "num_ids": 18
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[-1] for tup in test_list]\n",
        "num_ids": 20
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[-1] for x in test_list]\n",
        "num_ids": 18
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for i in test_list:\n        result.append(i[1])\n    return result\n",
        "num_ids": 30
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # return [item[-1] for item in test_list]\n    return [t[-1] for t in test_list]\n",
        "num_ids": 35
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[-1] for x in test_list]\n",
        "num_ids": 18
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        result.append(item[1])\n    return result\n",
        "num_ids": 30
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [item[-1] for item in test_list]\n",
        "num_ids": 18
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    \n    return [x[-1] for x in test_list]\n",
        "num_ids": 20
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    results = []\n    for tup in test_list:\n        results.append(tup[1])\n    return results\n",
        "num_ids": 32
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1_diff = (test_tup1[i] - test_tup2[i] for i in range(len(test_tup1)))\n    return tuple(test_tup1_diff)\n",
        "num_ids": 56
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    \n    #TEST 1\n    #substract_elements((2, 1, 3), (1, 1, 1))\n    \n    #TEST 2\n    #substract_elements((2, 1, 3), (1, 1, 3))\n    \n    #TEST 3\n    #substract_elements((2, 1, 3, 4, 5), (1, 1, 1, 1, 1))\n    \n    #TEST 4\n    #substract_elements((2, 1, 3, 4, 5, 6), (1, 1, 1, 1, 1, 1))\n    \n    return (test_tup1[0] - test_tup2[0], test_tup1[1] - test_tup2[1], test_tup1[2] - test_tup2[2])\n",
        "num_ids": 199
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup = new_tup + (test_tup1[i] - test_tup2[i],)\n    return new_tup\n",
        "num_ids": 64
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(map(operator.sub, test_tup1, test_tup2))\n",
        "num_ids": 25
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    answer = []\n    for i in range(0, len(test_tup1)):\n        answer.append(test_tup1[i] - test_tup2[i])\n    return tuple(answer)\n",
        "num_ids": 55
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Elements do not have the same length\")\n    return tuple(a-b for a,b in zip(test_tup1,test_tup2))\n",
        "num_ids": 64
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    try:\n        if len(test_tup1) == len(test_tup2):\n            res = tuple(subtract(x, y) for x, y in zip(test_tup1, test_tup2))\n            return res\n    except:\n        raise ValueError('Tuples must have the same length.')\n    raise ValueError('Tuples must have the same length.')\n",
        "num_ids": 97
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] - test_tup2[i],)\n    return new_tup\n",
        "num_ids": 59
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = tuple(list(test_tup1) + [x-y for x,y in zip(test_tup1, test_tup2)])\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(a-b for a, b in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 1:\n        return 1\n    return 2 * even_binomial_Coeff_Sum(n - 1) + n\n",
        "num_ids": 35
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_sum = 0\n    for i in range(n+1):\n        binomial_sum += binomial(n,i)\n    return binomial_sum\n",
        "num_ids": 42
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0,n):\n        if ( (i%2) == 0):\n            sum = sum + math.factorial(n)/(math.factorial(i)*math.factorial(n-i))\n    return sum\n    \ndef odd_binomial_Coeff_Sum( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0,n):\n        if ( (i%2)!= 0):\n            sum = sum + math.factorial(n)/(math.factorial(i)*math.factorial(n-i))\n    return sum\n",
        "num_ids": 64
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    Coeff_sum = 0\n    if n==1:\n        Coeff_sum = 1\n    else:\n        Coeff_sum = n * (n+1) / 2\n    return Coeff_sum\ndef even_binomial_Coeff_Factorial( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    Factorial_sum = 1\n    if n==0 or n==1:\n        Factorial_sum = 1\n    else:\n        Factorial_sum = n * even_binomial_Coeff_Factorial(n-1)\n    return Factorial_sum\ndef binomial_coefficient(n,k):\n    '''\n    Write a python function that takes in two positive integers n and k and finds the binomial coefficient.\n    '''\n    if k > n:\n        return 0\n    else:\n        return math.factorial(n) / (math.factorial(k) * math.factorial(n-k))\ndef count_combinations(n,k):\n    '''\n    Write a python function that takes in two positive integers n and k and finds the binomial coefficient.\n    '''\n    if k > n:\n        return 0\n    else:\n        return binomial_coefficient(n,k)\ndef Even_Index_Combination(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index combinations.\n    '''\n    Coeff_sum = 0\n    if n == 1:\n        Coeff_sum = 1\n    else:\n        if n%2 == 0:\n            Coeff_sum = (2*n-1) * Even_Index_Combination(n-1)\n        else:\n            Coeff_sum = (n) * Even_Index_Combination(n-1)\n    return Coeff_sum\ndef Even_Index_Combination_Factorial(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index combinations.\n    '''\n    Factorial_sum = 1\n    if n == 0 or n == 1:\n        Factorial_sum = 1\n    else:\n        if n%2 == 0:\n            Factorial_sum = (2*n-1) * Even_Index_Combination_Factorial(n-1)\n        else:\n            Factorial_sum = (n) * Even_Index_Combination_Factorial(n-1)\n    return Factorial_sum\ndef factorial(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the factorial of n.\n    '''\n    Factorial_n = 1\n    if n == 0 or n == 1:\n        Factorial_n = 1\n    else:\n        Factorial_n = n * factorial(n-1)\n    return Factorial_n\ndef count_combinations_recursive(n,k):\n    '''\n    Write a python function that takes in two positive integers n and k and finds the binomial coefficient.\n    '''\n    if k > n:\n        return 0\n    else:\n        return binomial_coefficient(n,k) + count_combinations_recursive(n,k+1)\ndef Even_Index_Combination_Recursive(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index combinations.\n    '''\n    Coeff_sum = 0\n    if n == 1:\n        Coeff_sum = 1\n    else:\n        if n%2 == 0:\n            Coeff_sum = (2*n-1) * Even_Index_Combination_Recursive(n-1)\n        else:\n            Coeff_sum = (n) * Even_Index_Combination_Recursive(n-1)\n    return Coeff_sum\ndef count_combinations_factorial(n,k):\n    '''\n    Write a python function that takes in two positive integers n and k and finds the binomial coefficient.\n    '''\n    Factorial_n = 1\n    Factorial_k = 1\n    Factorial_nk = 1\n    if n == 0 or n == 1:\n        Factorial_n = 1\n    else:\n        Factorial_n = factorial(n)\n    if k == 0 or k == 1:\n        Factorial_k = 1\n    else:\n        Factorial_k = factorial(k)\n    if n < k:\n        Factorial_nk = 0\n    else:\n        Factorial_nk = factorial(n-k)\n    return Factorial_n * Factorial_k * Factorial_nk\ndef Even_Index_Combination_Factorial(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index combinations.\n    '''\n    Factorial_n = 1\n    Factorial_k = 1\n    Factorial_nk = 1\n    if n == 0 or n == 1:\n        Factorial_n = 1\n    else:\n        Factorial_n = factorial(n)\n    if n%2 == 0:\n        Factorial_n = (2*n-1) * Even_Index_Combination_Factorial(n-1)\n    else:\n        Factorial_n = (n) * Even_Index_Combination_Factorial(n-1)\n    return Factorial_n\ndef is_power(n):\n    '''\n    Write a python function that takes in a positive integer n and returns True if n is a power of 2.\n    '''\n    if n == 1:\n        return True\n    if n%2 == 0:\n        return is_power(n/2)\n    return False\ndef is_power_recursive(n,k):\n    '''\n    Write a python function that takes in a positive integer n and returns True if n is a power of 2.\n    '''\n    if n == 1:\n        return True\n    if n%2 == 0:\n        return is_power_recursive(n/2,k)\n    return False\ndef is_power_factorial(n):\n    '''\n    Write a python function that takes in a positive integer n and returns True if n is a power of 2.\n    '''\n    Factorial_n = 1\n    if n == 0 or n == 1:\n        Factorial_n = 1\n    else:\n        Factorial_n = factorial(n)\n    if n%2 == 0:\n        return is_power_factorial(n/2)\n    return False\ndef is_power_recursive_factorial(n,k):\n    '''\n    Write a python function that takes in a positive integer n and returns True if n is a power of 2.\n    '''\n    if n == 1:\n        return True\n    if n%2 == 0:\n        return is_power_recursive_factorial(n/2,k)\n    return False\ndef is_power_factorial_recursive(n):\n    '''\n    Write a python function that takes in a positive integer n and returns True if n is a power of 2.\n    '''\n    Factorial_n = 1\n    Factorial_k = 1\n    Factorial_nk = 1\n    if n == 0 or n == 1:\n        Factorial_n = 1\n    else:\n        Factorial_n = factorial(n)\n    if n%2 == 0:\n        Factorial_n = (2*n-1) * Factorial_n_recursive(n-1)\n    else:\n        Factorial_n = (n) * Factorial_n_recursive(n-1)\n    return Factorial_n\ndef is_power_factorial_factorial(n):\n    '''\n    Write a python function that takes in a positive integer n and returns True if n is a power of 2.\n    '''\n    Factorial_n = 1\n    Factorial_k = 1\n    Factorial_nk = 1\n    if n == 0 or n == 1:\n        Factorial_n = 1\n    else:\n        Factorial_n = factorial(n)\n    if n%2 == 0:\n        Factorial_n = (2*n-1) * Factorial_n_factorial(n-1)\n    else:\n        Factorial_",
        "num_ids": 106
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    C = [0] * (n + 1)\n    C[0] = 1\n    C[1] = 1\n    for i in range(2, n + 1):\n        C[i] = C[i - 1] + 2 * i * C[i - 2]\n    return C[n]\n",
        "num_ids": 75
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Step 1: Initialize the final sum\n    final_sum = 0\n    # Step 2: Compute each term of the sum\n    for index in xrange(0, n, 2):\n        final_sum += factorial(n) / (factorial(index) * factorial(n - index))\n    # Step 3: Return the final sum\n    return final_sum\n",
        "num_ids": 89
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return (n-1)*even_binomial_Coeff_Sum(n-1)+even_binomial_Coeff_Sum(n-2)\n",
        "num_ids": 66
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        result += binomial_coefficient(n,i)*i\n    return result\n",
        "num_ids": 39
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    if n == 0 or n == 1:\n        return 1\n",
        "num_ids": 19
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n % 2 == 0) or (n < 0):\n        return \"Not possible\"\n    else:\n        return (n / 2) * (math.factorial(n) / (2 * math.factorial(n / 2)))\n",
        "num_ids": 59
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v=math.pi*r**2*h\n    return v\n",
        "num_ids": 19
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (3.1415926) * (r**2) * h\n",
        "num_ids": 20
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (math.pi * math.pow(r, 2) * h)\n",
        "num_ids": 22
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159265359*r**2*h\n",
        "num_ids": 17
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = pi*r**2*h\n    return V\n    \ndef area_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the surface area.\n    '''\n    A = pi*r**2+2*pi*r*h\n    return A\n    \ndef main():\n    '''\n    Write a main function that prompts the user to enter the radius and height of the cylinder and prints out the volume and surface area.\n    '''\n    r = eval(input(\"Enter the radius of a cylinder: \"))\n    h = eval(input(\"Enter the height of a cylinder: \"))\n    \n    V = volume_cylinder(r,h)\n    A = area_cylinder(r,h)\n    \n    print(\"The volume of a cylinder with a radius of %.2f and height of %.2f is %.2f\"%(r,h,V))\n    print(\"The surface area of a cylinder with a radius of %.2f and height of %.2f is %.2f\"%(r,h,A))\n    \nmain()\n",
        "num_ids": 148
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return pi*r**2*h\n",
        "num_ids": 12
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    #cylinder = 2*math.pi*r*h + math.pi*r**2\n    cylinder = math.pi*r**2*h\n    return cylinder\n",
        "num_ids": 43
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v=math.pi*r**2*h\n    return v\n",
        "num_ids": 19
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pass\n    \n",
        "num_ids": 7
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # 3/8pi*r^2*h\n    return (3.0/8.0)*pi*(r**2)*h\n",
        "num_ids": 35
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict={}\n    for k,v in dict.items():\n        if v >= n:\n            new_dict[k] = v\n    return new_dict\n",
        "num_ids": 43
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    #y=list(dict.values())\n    #y.sort()\n    #y=y[::-1]\n    #y=y[:n]\n    #y=y[::-1]\n    #for i in y:\n    #    print(i)\n    #    \n    #return y\n    #print(y)\n    #return list(dict.items())[-n:]\n    for j in dict:\n        if dict[j]>=n:\n            print(j)\n    #return [i for i in dict if i>=n]\n",
        "num_ids": 138
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    #write your function here\n    return {k:v for k,v in dict.items() if v>=n}\n",
        "num_ids": 31
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # new_dict = {k:v for (k,v) in dict.items() if v >= n}\n    new_dict = [k for (k,v) in dict.items() if v >= n]\n    return new_dict\n",
        "num_ids": 59
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for i in dict:\n        if dict[i]<n:\n            del dict[i]\n    return dict\n    \ndef last_n_words(string,n):\n    '''\n    Write a function that takes in a string and an integer n and returns the last n words in the string (separated by spaces).\n    '''\n    # Break the string into a list of words.\n    string_split=string.split()\n    # Return the last n elements in the list.\n    return \" \".join(string_split[-n:])\n",
        "num_ids": 51
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}\n",
        "num_ids": 24
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for (k,v) in dict.iteritems() if v >= n}\n",
        "num_ids": 26
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_filtered = {}\n    for key in dict:\n        if dict[key] >= n:\n            dict_filtered[key] = dict[key]\n    return dict_filtered\n",
        "num_ids": 48
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key in dict:\n        if dict[key] >= n:\n            new_dict[key] = dict[key]\n    return new_dict\n",
        "num_ids": 45
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_filt = {k:v for k,v in dict.items() if v >= n}\n    return dict_filt\n",
        "num_ids": 34
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    num_dict = {}\n    for elem in test_tup:\n        if elem in num_dict:\n            num_dict[elem] += 1\n        else:\n            num_dict[elem] = 1\n    return num_dict\n",
        "num_ids": 62
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    result = 0\n    for x in test_tup:\n        if x[0] == '0':\n            result += 1\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[0]:\n            count += 1\n        else:\n            break\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    s = len(test_tup)\n    first_elements = {}\n    for i in range(s):\n        if test_tup[i] in first_elements:\n            first_elements[test_tup[i]] += 1\n        else:\n            first_elements[test_tup[i]] = 1\n    return first_elements\n",
        "num_ids": 89
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if type(test_tup) == tuple:\n        return sum(1 for i in test_tup if i == test_tup[0])\n    else:\n        return 0\n",
        "num_ids": 46
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    n=len(test_tup)\n    temp_list=list(test_tup)\n    temp_list.sort()\n    for i in range(n):\n        for j in range(i,n):\n            if temp_list[i]==temp_list[j]:\n                return i\n    return 0\n",
        "num_ids": 78
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len(test_tup) - test_tup[0]\n",
        "num_ids": 20
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len(test_tup) - test_tup.index(sorted(test_tup)[0])\n",
        "num_ids": 30
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    num = 0\n    for x in test_tup:\n        num += 1\n        if x == 1:\n            return num\n    return num\n",
        "num_ids": 37
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num_list = [1, 10, 91, 100, 999, 991, 900, 899, 898, 897, 896, 895, 894, 893, 892, 891, 890, 889, 888, 887, 886, 885, 884, 883, 882, 881, 880, 879, 878, 877, 876, 875, 874, 873, 872, 871, 870, 869, 868, 867, 866, 865, 864, 863, 862, 861, 860, 859, 858, 857, 856, 855, 854, 853, 852, 851, 850, 849, 848, 847, 846, 845, 844, 843, 842, 841, 840, 839, 838, 837, 836, 835, 834, 833, 832, 831, 830, 829, 828, 827, 826, 825, 824, 823, 822, 821, 820, 819, 818, 817, 816, 815, 814, 813, 812, 811, 810,809, 808, 807, 806, 805, 804, 803, 802, 801, 800, 799, 798, 797, 796, 795, 794, 793, 792, 791, 790, 789, 788, 787, 786, 785, 784, 783, 782, 781, 780, 779, 778, 777, 776, 775, 774, 773, 772, 771, 770, 769, 768, 767, 766, 765, 764, 763, 762, 761, 760, 759, 758, 757, 756, 755, 754, 753, 752, 751, 750, 749, 748, 747, 746, 745, 744, 743, 742, 741, 740, 739, 738, 737, 736, 735, 734, 733, 732, 731, 730, 729, 728, 727, 726, 725, 724, 723, 722, 721, 720, 719, 718, 717, 716, 715, 714, 713, 712, 711, 710,709, 708, 707,706,705,704,703,702,701,700,699,698,697,696,695,694,693,692,691,690,689,688,687,686,685,684,683,682,681,680,679,678,677,676,675,674,673,672,671,670,669,668,667,666,665,664,663,662,661,660,659,658,657,656,655,654,653,652,651,650,649,648,647,646,645,644,643,642,641,640,639,638,637,636,635,634,633,632,631,630,629,628,627,626,625,624,623,622,621,620,619,618,617,616,615,614,613,612,611,610,609,608,607,606,605,604,603,602,601,600,599,598,597,596,595,594,593,592,591,590,589,588,587,586,585,584,583,582,581,580,579,578,577,576,575,574,573,572,571,570,569,568,567,566,565,564,563,562,561,560,559,558,557,556,555,554,553,552,551,550,549,548,547,546,545,544,543,542,541,540,539,538,537,536,535,534,533,532,531,530,529,528,527,526,525,524,523,522,521,520,519,518,517,516,515,514,513,512,511,510,509,508,507,506,505,504,503,502,501,500,499,498,497,496,495,494,493,492,491,490,489,488,487,486,485,484,483,482,481,480,479,478,477,476,475,474,473,472,471,470,469,468,467,466,465,464,463,462,461,460,459,458,457,456,455,454,453,452,451,450,449,448,447,446,445,444,443,442,441,440,439,438,437,436,435,434,433,432,431,430,429,428,427,426,425,424,423,422,421,420,419,418,417,416,415,414,413,412,411,410,409,408,407,406,405,404,403,402,401,400,399,398,397,396,395,394,393,392,391,390,389,388,387,386,385,384,383,382,381,380,379,378,377,376,375,374,373,372,371,370,369,368,367,366,365,364,363,362,361,360,359,358,357,356,355,354,353,352,351,350,349,348,347,346,345,344,343,342,341,340,339,338,337,336,335,334,333,332,331,330,329,328,327,326,325,324,323,322,321,320,319,318,317,316,315,314,313,312,311,310,309,308,307,306,305,304,303,302,301,300,299,298,297,296,295,294,293,292,291,290,289,288,287,286,285,284,283,282,281,280,279,278,277,276,275,274,273,272,271,270,269,268,267,266,265,264,263,262,261,260,259,258,257,256,255,254,253,252,251,250,249,248,247,246,245,244,243,242,241,240,239,238,237,236,235,234,233,232,231,230,229,228,227,226,225,224,223,222,221,220,219,218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198,197,196,195,194,193,192,191,190,189,188,187,186,185,184,183,182,181,180,179,178,177,176,175,174,173,172,171,170,169,168,167,166,165,164,163,162,161,160,159,158,157,156,155,154,153,152,151,150,149,148,147,146,145,144,143,142,141,140,139,138,137,136,135,134,133,132,131,130,129,128,127,126,125,124,123,122,121,120,119,118,117,116,115,114,113,112,111,110,109,108,107,106,105,104,103,102,101,100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6",
        "num_ids": 2014
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return sum(list(map(lambda x: int(x)**2, str(n)))) == n\n",
        "num_ids": 27
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize nth_decagonal to 0\n    nth_decagonal = 0\n    # Initialize sum of all previous decagonals to 0\n    decagonals_sum = 0\n    # Initialize nth_decagonal to 0\n    nth_decagonal = 0\n    # Initialize n to 1\n    n = 1\n    # Loop through number of decagonals\n    while (nth_decagonal < n):\n        # Increment nth_decagonal\n        nth_decagonal += n\n        # Increment n\n        n += 1\n        # Increment decagonals_sum\n        decagonals_sum += n\n    # If nth_decagonal is the nth decagonal, return True\n    if nth_decagonal == n:\n        return True\n    else:\n        return False\n",
        "num_ids": 192
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # if n is 0, the decagonal number is 0\n    if n == 0:\n        return 0\n",
        "num_ids": 27
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 1\n    n -= 1\n    x = 1\n    i = 2\n    while True:\n        i += 1\n        x += i\n        if n == x:\n            return x\n        elif n > x:\n            i += 1\n            x += i\n            if n == x:\n                return x\n            elif n > x:\n                return False\n            \ndef is_num_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    if n == 1:\n        return 1\n    n -= 1\n    x = 1\n    i = 2\n    while True:\n        i += 1\n        x += i\n        if n == x:\n            return x\n        elif n > x:\n            i += 1\n            x += i\n            if n == x:\n                return x\n            elif n > x:\n                return False\n            \ndef is_num_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    n -= 1\n    x = 1\n    i = 2\n    while True:\n        i += 1\n        x += i\n        if n == x:\n            return x\n        elif n > x:\n            i += 1\n            x += i\n            if n == x:\n                return x\n            elif n > x:\n                return False\n",
        "num_ids": 95
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = n + 1\n    num = 0\n    count = 1\n    while True:\n        num += count\n        count += 2\n        if count == n:\n            return num\n        if count > n:\n            return -1\n",
        "num_ids": 57
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int((n**2 - n) / 2)\n",
        "num_ids": 16
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # initialize the decagonal\n    dec_num = 0\n",
        "num_ids": 16
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    result = 0\n    n = n - 1\n    while n >= 0:\n        result += n\n        n -= 1\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    else:\n        num_digs = 1\n        divisor = 1\n        while True:\n            divisor += 1\n            if num_digs % divisor == 0:\n                num_digs += 1\n            else:\n                if (10**(num_digs/divisor)) % (num_digs - divisor + 1) == 0:\n                    if n == num_digs - divisor + 1:\n                        return True\n                else:\n                    if (10**(num_digs/divisor + 1)) % (num_digs - divisor + 1) == 0:\n                        if n == num_digs - divisor + 1:\n                            return True\n                    else:\n                        return False\n",
        "num_ids": 200
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    idx = 0\n    flag = False\n    while idx < len(dlist) and not flag:\n        if dlist[idx] == item:\n            flag = True\n        else:\n            idx = idx + 1\n    return flag, idx\n",
        "num_ids": 65
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n",
        "num_ids": 39
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "num_ids": 43
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            return True, i\n    return False, -1\n",
        "num_ids": 38
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n",
        "num_ids": 39
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index, elm in enumerate(dlist):\n        if item == elm:\n            return True, index\n    return False, -1\n",
        "num_ids": 37
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, val in enumerate(dlist):\n        if val == item:\n            return True, i\n    return False, -1\n",
        "num_ids": 35
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if len(dlist) == 0:\n        return False, -1\n    \n    return item == dlist[0], 0\n",
        "num_ids": 33
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            return True, i\n    return False, -1\n",
        "num_ids": 38
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "num_ids": 45
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) > len(set(test_list)):\n        print(\"List is not unique\")\n    else:\n        print(\"List is unique\")\n",
        "num_ids": 42
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # for i in test_list:\n    #     if test_list.count(i) > 1:\n    #         return False\n    #     else:\n    #         return True\n",
        "num_ids": 46
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) > len(set(test_list)):\n        return False\n    else:\n        return True\n",
        "num_ids": 33
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #using set()\n    for value in test_list:\n        if value in test_list:\n            return False\n    return True\n",
        "num_ids": 34
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for x in test_list:\n        for y in test_list:\n            if(x == y):\n                return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                return False\n    return True\n",
        "num_ids": 58
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == 0:\n        return True\n    if len(test_list) == 1:\n        return True\n    if len(test_list) == 2:\n        if test_list[0] == test_list[1]:\n            return False\n        else:\n            return True\n    return all_unique(test_list[1:])\n",
        "num_ids": 88
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in range(0,len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i]==test_list[j]:\n                return False\n    return True\n",
        "num_ids": 60
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # initialize a null list\n    unique_list = []\n",
        "num_ids": 16
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n",
        "num_ids": 20
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) < len(nums2):\n        return [e1 - e2 for e1, e2 in zip(nums1, nums2)]\n    if len(nums2) < len(nums1):\n        return [e2 - e1 for e1, e2 in zip(nums1, nums2)]\n",
        "num_ids": 86
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [i - j for i, j in zip(nums1, nums2)]\n",
        "num_ids": 24
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
        "num_ids": 28
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) > len(nums2):\n        return sub_list(nums2,nums1)\n    s = []\n    for x,y in zip(nums1,nums2):\n        s.append(x-y)\n    return s\n",
        "num_ids": 69
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    list_result=[]\n    len_nums1 = len(nums1)\n    len_nums2 = len(nums2)\n    if len_nums1 > len_nums2:\n        for i in range(0,len_nums2):\n            list_result.append(nums1[i]-nums2[i])\n    else:\n        for i in range(0,len_nums1):\n            list_result.append(nums1[i]-nums2[i])\n    return list_result\n",
        "num_ids": 132
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    assert len(nums1) == len(nums2), \"Length of lists must be the same\"\n    #declare a list to store the result\n    result = [0] * len(nums1)\n    for i in range(len(nums1)):\n        result[i] = nums1[i] - nums2[i]\n    return result\n",
        "num_ids": 90
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Your Code Here\n    return [nums1[i]-nums2[i] for i in range(len(nums1))]\n",
        "num_ids": 36
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [nums1[i]-nums2[i] for i in range(len(nums1))]\n",
        "num_ids": 30
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] - nums2[i]\n    return nums1\n",
        "num_ids": 44
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] - nums2[i]\n    return nums1\n",
        "num_ids": 44
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    a = set([int(i) for i in str(n)])\n    for i in a:\n        if (n%i)!= 0:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if (n < 10):\n        return True\n    else:\n        if (n%10 == 0):\n            return False\n        else:\n            return validate(n/10)\n",
        "num_ids": 45
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    for i in str(n): \n        if(int(i)>int(n)): \n            return False\n    return True\n",
        "num_ids": 35
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # for i in range(10):\n    #     count = 0\n    #     for j in str(n):\n    #         if int(j) == i:\n    #             count += 1\n    #     if count > int(j):\n    #         return False\n    # return True\n    return True\n",
        "num_ids": 75
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n < 0:\n        n = n*-1\n    a = list(str(n))\n    dict = {}\n    for x in a:\n        if x not in dict.keys():\n            dict[x] = 1\n        else:\n            dict[x] += 1\n    for x in dict.keys():\n        if dict[x] > int(x):\n            return False\n    return True\n",
        "num_ids": 98
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    def helper(n, i):\n        if i == len(str(n)):\n            return True\n        elif str(n)[i] in frequency:\n            return helper(n, i+1)\n        else:\n            return False\n    \n    return helper(n, 0)\n",
        "num_ids": 70
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = str(n)\n    freq = {}\n    for dig in digits:\n        if dig not in freq:\n            freq[dig] = 1\n        else:\n            freq[dig] += 1\n    return freq\n    \ndef check(n):\n    '''\n    Write a python function checks if the input integer is a valid PIN or not.\n    '''\n    counts = validate(n)\n    max_freq = max(counts.values())\n    for key in counts:\n        if counts[key] > max_freq:\n            return False\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    frequency = {}\n    for digit in str(n):\n        frequency[digit] = frequency.get(digit, 0) + 1\n",
        "num_ids": 33
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n = str(n)\n    for i in n:\n        if int(n.count(i)) > int(i):\n            return False\n    return True\n    \nif __name__=='__main__':\n    if validate(12345):\n        print 'True'\n    else:\n        print 'False'",
        "num_ids": 77
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # set up an empty list to store the frequency of each digit in the input integer\n    digits = []\n    \n    # loop through the integer and calculate the frequency of each digit\n    for i in str(n):\n        if i not in digits:\n            digits.append(i)\n            \n    # return the true/false whether the frequency of each digit in the input integer is less than or equal to the digit itself\n    return all(map(lambda x: x <= int(x), digits))\n    \n    \n    \ndef test_validate():\n    '''\n    Write a python function that takes in a list of integers and check whether the list of integers is a valid solution to the problem.\n    '''\n    \n    # define the list of integers\n    L = [0, 1, 2, 3, 4]\n    \n    # return the true/false whether the list of integers is a valid solution to the problem\n    return validate(L)\n    \n    \ndef test_validate_1():\n    '''\n    Write a python function that takes in a list of integers and check whether the list of integers is a valid solution to the problem.\n    '''\n    \n    # define the list of integers\n    L = [0, 1, 2, 3, 4]\n    \n    # return the true/false whether the list of integers is a valid solution to the problem\n    return not validate(L)\n    \n    \ndef test_validate_2():\n    '''\n    Write a python function that takes in a list of integers and check whether the list of integers is a valid solution to the problem.\n    '''\n    \n    # define the list of integers\n    L = [0, 1, 2, 3, 4]\n    \n    # return the true/false whether the list of integers is a valid solution to the problem\n    return not validate(L)\n    \n    \ndef test_validate_3():\n    '''\n    Write a python function that takes in a list of integers and check whether the list of integers is a valid solution to the problem.\n    '''\n    \n    # define the list of integers\n    L = [0, 1, 2, 3, 4, 5]\n    \n    # return the true/false whether the list of integers is a valid solution to the problem\n    return not validate(L)\n    \n    \ndef test_validate_4():\n    '''\n    Write a python function that takes in a list of integers and check whether the list of integers is a valid solution to the problem.\n    '''\n    \n    # define the list of integers\n    L = [0, 1, 2, 3, 4, 5, 6]\n    \n    # return the true/false whether the list of integers is a valid solution to the problem\n    return not validate(L)\n    \n    \n    \ndef test_validate_5():\n    '''\n    Write a python function that takes in a list of integers and check whether the list of integers is a valid solution to the problem.\n    '''\n    \n    # define the list of integers\n    L = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \n    # return the true/false whether the list of integers is a valid solution to the problem\n    return not validate(L)\n    \n    \ndef test_validate_6():\n    '''\n    Write a python function that takes in a list of integers and check whether the list of integers is a valid solution to the problem.\n    '''\n    \n    # define the list of integers\n    L = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    \n    # return the true/false whether the list of integers is a valid solution to the problem\n    return not validate(L)\n    \n    \ndef test_validate_7():\n    '''\n    Write a python function that takes in a list of integers and check whether the list of integers is a valid solution to the problem.\n    '''\n    \n    # define the list of integers\n    L = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    \n    # return the true/false whether the list of integers is a valid solution to the problem\n    return not validate(L)\n    \n    \ndef test_validate_8():\n    '''\n    Write a python function that takes in a list of integers and check whether the list of integers is a valid solution to the problem.\n    '''\n    \n    # define the list of integers\n    L = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    \n    # return the true/false whether the list of integers is a valid solution to the problem\n    return not validate(L)\n    \n    \ndef test_validate_9():\n    '''\n    Write a python function that takes in a list of integers and check whether the list of integers is a valid solution to the problem.\n    '''\n    \n    # define the list of integers\n    L = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    \n    # return the true/false whether the list of integers is a valid solution to the problem\n    return not validate(L)\n    \n    \ndef test_validate_10():\n    '''\n    Write a python function that takes in a list of integers and check whether the list of integers is a valid solution to the problem.\n    '''\n    \n    # define the list of integers\n    L = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n    \n    # return the true/false whether the list of integers is a valid solution to the problem\n    return not validate(L)\n    \n    \ndef test_validate_11():\n    '''\n    Write a python function that takes in a list of integers and check whether the list of integers is a valid solution to the problem.\n    '''\n    \n    # define the list of integers\n    L = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    \n    # return the true/false whether the list of integers is a valid solution to the problem\n    return not validate(L)\n    \n    \ndef test_validate_12():\n    '''\n    Write a python function that takes in a list of integers and check whether the list of integers is a valid solution to the problem.\n    '''\n    \n    # define the list of integers\n    L = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n    \n    # return the true/false whether the list of integers is a valid solution to the problem\n    return not validate(L)\n    \n    \ndef test_validate_13():\n    '''\n    Write a python function that takes in a list of integers and check whether the list of integers is a valid solution to the problem.\n    '''\n    \n    # define the list of integers\n    L = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68",
        "num_ids": 153
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item == element:\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 31
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item == element:\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 31
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list == []:\n        return True\n    elif list[0]!= element:\n        return False\n    else:\n        return check_element(list[1:],element)\n",
        "num_ids": 47
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n",
        "num_ids": 21
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x==element for x in list)\n",
        "num_ids": 15
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if type(list)!= list:\n        raise TypeError('list is not list')\n    for i in list:\n        if i!= element:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(item == element for item in list)\n",
        "num_ids": 15
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n    \nprint(check_element([1,1,1],1))\nprint(check_element([1,2,3],1))\nprint(check_element(['a','b','c'],'a'))",
        "num_ids": 74
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item == element:\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 31
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # define the regular expression\n    pattern = re.compile(r'ab{2,3}')\n",
        "num_ids": 27
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a{2,3}b', text):\n        return 'Found'\n    else:\n        return 'Not Found'\n",
        "num_ids": 38
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[ab]*'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n",
        "num_ids": 37
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'ab*')\n    if pattern.search(text):\n        return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # return re.search('^a.*b{2,3}$', text)\n    return bool(re.search('^a.*b{2,3}$', text))\n    # return bool(re.search('^a.*b{2,3}$', text))\ndef text_match_two_three_re(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search('^a.*b{2,3}$', text))\ndef text_match_two_three_reg(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search('^a.*b{2,3}$', text))\n",
        "num_ids": 24
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(\"[ab]{2,3}\", text):\n        return True\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.match('[a]{2}b', text):\n        return True\n    else:\n        return False\n",
        "num_ids": 31
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search(r\"(ab{2,3})\", text) is not None\n    \n",
        "num_ids": 25
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'(a.{2,3})b')\n    return re.search(pattern,text)\n",
        "num_ids": 34
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search(r'a([ab]{2}|[ab]{3})',text)\n",
        "num_ids": 28
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n < k:\n        return 0\n    max_sum = -sys.maxint\n    for i in range(0, n - k + 1):\n        max_sum = max(max_sum, sum(a[i:i + k]))\n    return max_sum\n",
        "num_ids": 68
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Since the array is of odd size\n    if n % 2!= 0: \n        mid = (n + 1) / 2 \n        start = mid - k\n        end = mid + k - 1\n    else: \n        mid = n / 2\n        start = mid - k\n        end = mid + k - 1\n    \n    return max(a[start:end + 1])\n",
        "num_ids": 94
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    left = max_sub_array_sum_repeated(a, n-1, k)\n    if k > 1:\n        return left\n    elif k == 1:\n        return max(a[n-1], a[n-1]*k)\n    else:\n        return max(left, max_sub_array_sum_repeated(a, n-2, k-1) + a[n-1])\n",
        "num_ids": 103
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    res = [0] * n \n    for i in range(n): \n        curr_max = 0 \n        for j in range(k): \n            if i + j >= n: \n                break \n            curr_max += a[i + j] \n        res[i] = curr_max \n    return max(res) \n",
        "num_ids": 89
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    for i in xrange(n):\n        max_sum += max_sub_array_sum_repeated_helper(a, i, k)\n    return max_sum\n",
        "num_ids": 51
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    for _ in range(k):\n        a = compute_max_sub_array(a, n)\n    return a\n",
        "num_ids": 31
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Find the contiguous subarray within the given array (a) \n    # that has the maximum sum. \n    result = current = 0\n    for i in range(0, n): \n        current = max(0, current + a[i]) \n        result = max(result, current) \n    \n    # Starting from the second element, calculate maximum sum \n    # in the modified array by repeating the above process. \n    start = 1\n    for i in range(0, n): \n        for j in range(start, k): \n            if (i + j < n): \n                current = max(0, current + a[i + j]) \n                result = max(result, current) \n        start += 1\n    \n    return result\n",
        "num_ids": 181
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    for i in range(n):\n        if a[i] > 0:\n            return max(a)\n",
        "num_ids": 28
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    if k == 1:\n        return sum(a)\n    elif k == 2:\n        return max(a)\n    else:\n        for i in range(n-k+1):\n            max_sum = max(max_sum, max_sum + sum(a[i:i+k]))\n    return max_sum\n",
        "num_ids": 88
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return a[0]\n    if k == 1:\n        return max(a)\n",
        "num_ids": 41
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum(map(lambda x: x**2, range(n+1)[2::2]))\n",
        "num_ids": 27
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n<0:\n        return \"n must be a positive integer\"\n    elif n==1:\n        return 2\n    else:\n        sum = 2\n        while n>0:\n            if n%2==0:\n                sum += n**2\n            n-=1\n        return sum\n",
        "num_ids": 74
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    i = 0\n    sum = 0\n    while i < n:\n        if i % 2 == 0:\n            sum += (i ** 2)\n        i += 1\n    return sum\n",
        "num_ids": 46
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n**2) + square_Sum(n-1)\n",
        "num_ids": 34
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n**2+square_Sum(n-2)\n    \nprint square_Sum(4)\n",
        "num_ids": 42
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum(i**2 for i in range(n) if i%2 ==0)\n",
        "num_ids": 24
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += (i**2)\n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return n**2\n",
        "num_ids": 8
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i * i\n    return sum\n",
        "num_ids": 36
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2!= 0:\n        return n * (n + 1) * n / 2\n    else:\n        return (n + 1) * n / 2\n",
        "num_ids": 66
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    lengths = []\n    for i in list1:\n        lengths.append(len(i))\n    for i in lengths:\n        if i > max_len:\n            max_len = i\n    return max_len\n",
        "num_ids": 63
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length=len(list1)\n    list1_len=[]\n    for i in range(length):\n        list1_len.append(len(list1[i]))\n    return max(list1_len)\n",
        "num_ids": 55
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # maxLen = 0\n    # maxLenList = []\n    # for sublist in list1:\n    #     if len(sublist) > maxLen:\n    #         maxLen = len(sublist)\n    #         maxLenList = sublist\n    # return maxLenList\n    return max(map(len, list1))\n    # return len(max(list1, key=len))\n",
        "num_ids": 97
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    longest_length = len(list1[0])\n    longest_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > longest_length:\n            longest_length = len(list1[i])\n            longest_list = list1[i]\n    return longest_list\n",
        "num_ids": 84
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for l in list1:\n        max_len = max(max_len,len(l))\n    return max_len\n",
        "num_ids": 39
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    max_length_list = []\n    for i in list1:\n        if max_length < len(i):\n            max_length = len(i)\n            max_length_list = i\n    return max_length_list\n",
        "num_ids": 64
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for l in list1:\n        if max_list == []:\n            max_list = l\n        elif len(max_list) < len(l):\n            max_list = l\n    return max_list\n",
        "num_ids": 61
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for item in list1:\n        max_list.append(len(item))\n    return max(max_list)\n",
        "num_ids": 38
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = -1\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n    return max_len\n",
        "num_ids": 49
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    result = []\n    for i in list1:\n        result.append(len(i))\n    return result\n    \nprint max_length([[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "num_ids": 58
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    cache = [0] * (k + 1)\n    cache[0] = 1\n    for i in range(1, n + 1): \n        j = 0\n        while j <= k:\n            if j == 0: \n                cache[j] = cache[j] + cache[j + 1]\n            elif j == k: \n                cache[j] = cache[j] + cache[j - 1]\n            else: \n                cache[j] = cache[j] + cache[j - 1] + cache[j + 1]\n            j += 1\n    return cache[k]\n",
        "num_ids": 144
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    table = [[0 for _ in range(k+1)] for _ in range(n+1)] \n    for i in range(1, n+1): \n        for j in range(1, k+1): \n            if i == 1: \n                table[i][j] = j \n            elif j == 1: \n                table[i][j] = 1 \n            else: \n                table[i][j] = table[i-1][j] + table[i-1][j-1] \n    return table[n][k] \n",
        "num_ids": 138
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # base case is when n==0\n    if n==0:\n        return 1\n",
        "num_ids": 23
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # If the number of colors is more than 2, there is no such way to paint the fence\n    if n < 2 or k > 2:\n        return 0\n    # If the number of colors is 1, there is only one way to paint the fence\n    if n == 1:\n        return 1\n    if n == 2:\n        return k\n    return (count_no_of_ways(n-2, k) + count_no_of_ways(n-1, k-1))\n",
        "num_ids": 116
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    result = []\n    for i in range(k+1):\n        result.append([0 for i in range(n+1)])\n    result[0][0] = 1\n    for i in range(1, n+1):\n        result[1][i] = result[0][i-1]\n        for j in range(2, k+1):\n            result[j][i] = result[j-1][i-1] + result[j][i-1]\n    return result[k][n]\n",
        "num_ids": 125
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k < 1 or n < 0:\n        return 0\n",
        "num_ids": 17
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k > n:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 1 or k < 1:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * (k - 1) / 2\n    if k == 1:\n        return n\n    return (n - 1) * count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k - 1)\n",
        "num_ids": 98
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    memo = {}\n    def helper(n, k):\n        if (n, k) in memo:\n            return memo[(n, k)]\n        if n <= 0 or k == 0:\n            return 0\n        if n == 1:\n            return k\n        if k == 1:\n            return 1\n        if n < k:\n            return 0\n        memo[(n, k)] = helper(n-2, k) + helper(n-1, k-1)\n        return memo[(n, k)]\n    return helper(n, k)\n",
        "num_ids": 135
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    return int(n / m)\n",
        "num_ids": 13
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==m:\n        return int(n/m)\n    elif n<m:\n        return n//m\n    else:\n        return m//n\n",
        "num_ids": 42
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n % m == 0:\n        return m\n    else:\n        return find(n,m+1)\n",
        "num_ids": 30
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    try:\n        return int(n / m)\n    except ZeroDivisionError as e:\n        return \"Cannot divide by zero\"\n",
        "num_ids": 35
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n>m:\n        return n//m\n    else:\n        return m//n\ndef find_in_row(r,c):\n    '''\n    Write a python function to find the element at given row and column of a 2d array.\n    '''\n    return r*c+c\ndef find_in_col(r,c):\n    '''\n    Write a python function to find the element at given row and column of a 2d array.\n    '''\n    return r*c+r\ndef find_in_grid(r,c):\n    '''\n    Write a python function to find the element at given row and column of a 2d array.\n    '''\n    return r*c+c+r\ndef find_max_in_grid(grid):\n    '''\n    Write a python function to find the maximum value in a 2d array.\n    '''\n    row_len=len(grid)\n    col_len=len(grid[0])\n    for i in range(row_len):\n        for j in range(col_len):\n            if grid[i][j]>max_value:\n                max_value=grid[i][j]\n    return max_value\ndef find_max_in_grid(grid):\n    '''\n    Write a python function to find the maximum value in a 2d array.\n    '''\n    row_len=len(grid)\n    col_len=len(grid[0])\n    max_value=0\n    for i in range(row_len):\n        for j in range(col_len):\n            if grid[i][j]>max_value:\n                max_value=grid[i][j]\n    return max_value\ndef find_max_in_grid(grid):\n    '''\n    Write a python function to find the maximum value in a 2d array.\n    '''\n    row_len=len(grid)\n    col_len=len(grid[0])\n    max_value=0\n    for i in range(row_len):\n        for j in range(col_len):\n            if grid[i][j]>max_value:\n                max_value=grid[i][j]\n    return max_value\ndef find_max_in_grid(grid):\n    '''\n    Write a python function to find the maximum value in a 2d array.\n    '''\n    row_len=len(grid)\n    col_len=len(grid[0])\n    max_value=0\n    for i in range(row_len):\n        for j in range(col_len):\n            if grid[i][j]>max_value:\n                max_value=grid[i][j]\n    return max_value\ndef find_max_in_grid(grid):\n    '''\n    Write a python function to find the maximum value in a 2d array.\n    '''\n    row_len=len(grid)\n    col_len=len(grid[0])\n    max_value=0\n    for i in range(row_len):\n        for j in range(col_len):\n            if grid[i][j]>max_value:\n                max_value=grid[i][j]\n    return max_value\ndef find_max_in_grid(grid):\n    '''\n    Write a python function to find the maximum value in a 2d array.\n    '''\n    row_len=len(grid)\n    col_len=len(grid[0])\n    max_value=0\n    for i in range(row_len):\n        for j in range(col_len):\n            if grid[i][j]>max_value:\n                max_value=grid[i][j]\n    return max_value\ndef find_max_in_grid(grid):\n    '''\n    Write a python function to find the maximum value in a 2d array.\n    '''\n    row_len=len(grid)\n    col_len=len(grid[0])\n    max_value=0\n    for i in range(row_len):\n        for j in range(col_len):\n            if grid[i][j]>max_value:\n                max_value=grid[i][j]\n    return max_value\ndef find_max_in_grid(grid):\n    '''\n    Write a python function to find the maximum value in a 2d array.\n    '''\n    row_len=len(grid)\n    col_len=len(grid[0])\n    max_value=0\n    for i in range(row_len):\n        for j in range(col_len):\n            if grid[i][j]>max_value:\n                max_value=grid[i][j]\n    return max_value\ndef find_max_in_grid(grid):\n    '''\n    Write a python function to find the maximum value in a 2d array.\n    '''\n    row_len=len(grid)\n    col_len=len(grid[0])\n    max_value=0\n    for i in range(row_len):\n        for j in range(col_len):\n            if grid[i][j]>max_value:\n                max_value=grid[i][j]\n    return max_value\ndef find_max_in_grid(grid):\n    '''\n    Write a python function to find the maximum value in a 2d array.\n    '''\n    row_len=len(grid)\n    col_len=len(grid[0])\n    max_value=0\n    for i in range(row_len):\n        for j in range(col_len):\n            if grid[i][j]>max_value:\n                max_value=grid[i][j]\n    return max_value\ndef find_max_in_grid(grid):\n    '''\n    Write a python function to find the maximum value in a 2d array.\n    '''\n    row_len=len(grid)\n    col_len=len(grid[0])\n    max_value=0\n    for i in range(row_len):\n        for j in range(col_len):\n            if grid[i][j]>max_value:\n                max_value=grid[i][j]\n    return max_value\ndef find_max_in_grid(grid):\n    '''\n    Write a python function to find the maximum value in a 2d array.\n    '''\n    row_len=len(grid)\n    col_len=len(grid[0])\n    max_value=0\n    for i in range(row_len):\n        for j in range(col_len):\n            if grid[i][j]>max_value:\n                max_value=grid[i][j]\n    return max_value\ndef find_max_in_grid(grid):\n    '''\n    Write a python function to find the maximum value in a 2d array.\n    '''\n    row_len=len(grid)\n    col_len=len(grid[0])\n    max_value=0\n    for i in range(row_len):\n        for j in range(col_len):\n            if grid[i][j]>max_value:\n                max_value=grid[i][j]\n    return max_value\ndef find_max_in_grid(grid):\n    '''\n    Write a python function to find the maximum value in a 2d array.\n    '''\n    row_len=len(grid)\n    col_len=len(grid[0])\n    max_value=0\n    for i in range(row_len):\n        for j in range(col_len):\n            if grid[i][j]>max_value:\n                max_value=grid[i][j]\n    return max_value\ndef find_max_in_grid(grid):\n    '''\n    Write a python function to find the maximum value in a 2d array.\n    '''\n    row_len=len(grid)\n    col_len=len(grid[0])\n    max_value=0\n    for i in range(row_len):\n        for j in range(col_len):\n            if grid[i][j]>max_value:\n                max_value=grid[i][j]\n    return max_value\ndef find_max_in_grid(grid):\n    '''\n    Write a python function to find the maximum value in a 2d array.\n    '''\n    row_len=len(gri",
        "num_ids": 11
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n",
        "num_ids": 8
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return 0\n    else:\n        return n // m\n",
        "num_ids": 23
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n",
        "num_ids": 8
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n",
        "num_ids": 8
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n/m\n",
        "num_ids": 8
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if h==w or w==0 or h==0:\n        return 1\n    else:\n        return ((w*w)+(h*h))**(1/2)\ndef secondangle(w,h):\n    '''\n    Write a function to find the second angle of a right angled triangle.\n    '''\n    if h==w or w==0 or h==0:\n        return 1\n    else:\n        return math.degrees(math.atan(w/h))\ndef thirdangle(w,h):\n    '''\n    Write a function to find the third angle of a right angled triangle.\n    '''\n    if h==w or w==0 or h==0:\n        return 1\n    else:\n        return math.degrees(math.atan(w/h))\ndef extra_sixside(w,h):\n    '''\n    Write a function to find the fourth side of a right angled triangle.\n    '''\n    if h==w or w==0 or h==0:\n        return 1\n    else:\n        return (w*w+h*h)**(1/2)\ndef isosceles_area(s,w,h):\n    '''\n    Write a function to find the area of an isosceles right angled triangle.\n    '''\n    if h==w or h==0:\n        return 1\n    else:\n        return (s*s)/(2*w)\ndef semi_circle_area(r):\n    '''\n    Write a function to find the area of a semi circle.\n    '''\n    return math.pi*(r*r)\ndef radius_of_a_circle(area):\n    '''\n    Write a function to find the radius of a circle.\n    '''\n    return (area/(math.pi))**(1/2)\ndef perimeter_of_a_circle(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    return 2*math.pi*r\ndef smallest_x(w,h):\n    '''\n    Write a function to find the smallest value of x for a right angled triangle\n    '''\n    return ((w*w)+(h*h))**(1/2)\ndef largest_x(w,h):\n    '''\n    Write a function to find the largest value of x for a right angled triangle\n    '''\n    return (w*w)-(h*h)**(1/2)\ndef distance_from_a_point(x,y,x0,y0):\n    '''\n    Write a function to find the distance from a point to a line\n    '''\n    return (((x-x0)*(x-x0)) + ((y-y0)*(y-y0)))**(1/2)\ndef smallest_x_on_a_line(w,h,x0,y0):\n    '''\n    Write a function to find the smallest value of x for a line\n    '''\n    return (w*w)-(h*h)**(1/2)\ndef distance_from_a_line(w,h,x0,y0):\n    '''\n    Write a function to find the distance from a line to a point\n    '''\n    return (w*w)+(h*h)**(1/2)\ndef smallest_x_on_a_line_segment(w,h,x0,y0):\n    '''\n    Write a function to find the smallest value of x for a line segment\n    '''\n    return x0+(w*w)-(h*h)**(1/2)\ndef distance_from_a_line_segment(w,h,x0,y0):\n    '''\n    Write a function to find the distance from a line segment to a point\n    '''\n    return (w*w)+(h*h)**(1/2)\ndef k_nearest_points(x,y,k,x0,y0):\n    '''\n    Write a function to find k closest points to a point\n    '''\n    points = [((x-x0)*(x-x0)) + ((y-y0)*(y-y0))**(1/2),x,y]\n    return sorted(points,reverse=True)[0:k]\ndef distance_from_a_line_segment(w,h,x0,y0):\n    '''\n    Write a function to find the distance from a line segment to a point\n    '''\n    return (w*w)+(h*h)**(1/2)\ndef smallest_x_on_a_line_segment(w,h,x0,y0):\n    '''\n    Write a function to find the smallest value of x for a line segment\n    '''\n    return x0+(w*w)-(h*h)**(1/2)\ndef smallest_x_on_a_line_segment(w,h,x0,y0):\n    '''\n    Write a function to find the smallest value of x for a line segment\n    '''\n    return x0+(w*w)-(h*h)**(1/2)\ndef biggest_x_on_a_line_segment(w,h,x0,y0):\n    '''\n    Write a function to find the biggest value of x for a line segment\n    '''\n    return x0+(w*w)+(h*h)**(1/2)\ndef distance_from_a_line_segment(w,h,x0,y0):\n    '''\n    Write a function to find the distance from a line segment to a point\n    '''\n    return (w*w)+(h*h)**(1/2)\ndef biggest_x_on_a_line_segment(w,h,x0,y0):\n    '''\n    Write a function to find the biggest value of x for a line segment\n    '''\n    return (w*w)+(h*h)**(1/2)\ndef midpoint(x1,y1,x2,y2):\n    '''\n    Write a function to find the midpoint of a line segment\n    '''\n    return (x1+x2)/2,(y1+y2)/2\ndef midpoint(x1,y1,x2,y2):\n    '''\n    Write a function to find the midpoint of a line segment\n    '''\n    return (x1+x2)/2,(y1+y2)/2\ndef midpoint(x1,y1,x2,y2):\n    '''\n    Write a function to find the midpoint of a line segment\n    '''\n    return (x1+x2)/2,(y1+y2)/2\ndef line_intersection(w,h,x1,y1,x2,y2):\n    '''\n    Write a function to find the intersection of a line segment and a line\n    '''\n    x_p = (((x1*y2)-y1*x2)+(w*h))/(w*h+(h*w))\n    y_p = (((x1*y2)-y1*x2)+(h*w))/(w*h+(h*w))\n    return x_p,y_p\ndef line_intersection(w,h,x1,y1,x2,y2):\n    '''\n    Write a function to find the intersection of a line segment and a line\n    '''\n    x_p = (((x1*y2)-y1*x2)+(w*h))/(w*h+(h*w))\n    y_p = (((x1*y2)-y1*x2)+(h*w))/(w*h+(h*w))\n    return x_p,y_p\ndef line_intersection(w,h,x1,y1,x2,y2):\n    '''\n    Write a function to find the intersection of a line segment and a line\n    '''\n    x_p = (((x1*y2)-y1*x2)+(w*h))/(w*h+(h*w))\n    y_p = (((x1*y2)-y1*x2)+(h*w))/(w*h+(h*w))\n    return x_p,y_p\ndef line_intersection(w,h,x1,y1,x2,y2):\n    '''\n    Write ",
        "num_ids": 5
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)\n",
        "num_ids": 18
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    hypotenuse = (w**2+h**2)**.5\n    return hypotenuse\n    \ndef first_aid_letter(side):\n    '''\n    Write a function that takes in the width and height of a right angled triangle and \n    returns the length of the first aid rail.\n    '''\n    return (2*side)/math.sqrt(3)\n    \ndef possible_answer(side):\n    '''\n    Write a function to find all the answers that can be given to the question,\n    that is, all the pairs of the lengths of the rails of a right angled triangle \n    that when added to the side of the triangle equals the length of the other two \n    sides of the triangle.\n    '''\n    possible_solutions = []\n    for i in range(1,side):\n        for j in range(1,side):\n            if(i+j == side):\n                possible_solutions.append((i,j))\n    return possible_solutions\n    \ndef maximum_number_of_rails(side):\n    '''\n    Write a function that takes in a side of a right angled triangle and \n    returns the maximum number of rails that can fit into that side of the triangle.\n    '''\n    return int(math.ceil((side**2-side)/2))\n    \ndef connect_intervals(intervals):\n    '''\n    Write a function that takes in a list of intervals and returns the \n    intersection of those intervals.\n    '''\n    sorted_intervals = sorted(intervals)\n    new_intervals = []\n    last_interval = sorted_intervals[0]\n    for interval in sorted_intervals:\n        if interval[0] <= last_interval[1] and interval[1] >= last_interval[0]:\n            last_interval = (last_interval[0], interval[1])\n        else:\n            new_intervals.append(last_interval)\n            last_interval = interval\n    new_intervals.append(last_interval)\n    return new_intervals\n    \ndef number_of_triangles(side,r):\n    '''\n    Write a function that takes in a side of a right angled triangle and \n    a value between 0 and 1 (inclusive) and returns the number of triangles \n    that can be formed by cutting the right angled triangle with the given side \n    and having the ratio r.\n    '''\n    n = 0\n    while(n*r <= side):\n        n += 1\n    return n\n    \ndef number_of_possible_triangles(side,r):\n    '''\n    Write a function that takes in a side of a right angled triangle and \n    a value between 0 and 1 (inclusive) and returns the number of triangles \n    that can be formed by cutting the right angled triangle with the given side \n    and having the ratio r.\n    '''\n    sides = []\n    for n in range(int(math.ceil(r*side)),int(math.floor(r*side))+1):\n        if(n*r <= side):\n            sides.append(n)\n    return len(sides)\n    \ndef angle_between_triangles(side1,side2,side3):\n    '''\n    Write a function that takes in the lengths of three sides of a right-angled triangle\n    and returns the angle between them.\n    '''\n    hypotenuse = (side1**2+side2**2+side3**2)**.5\n    return math.acos(round((hypotenuse**2-side1**2-side2**2)/(2*hypotenuse*side1),4))\n    \ndef string_array_to_int(arr):\n    '''\n    Write a function that takes in an array of integers and returns an integer \n    that represents all the integers in the array.\n    '''\n    return int(\"\".join([str(x) for x in arr]))\n    \ndef length_of_longest_subarray(arr):\n    '''\n    Write a function that takes in an array of integers and returns the length of the \n    longest subarray that consists of a contiguous run of integers.\n    '''\n    longest = 0\n    start = 0\n    current = 1\n    for i in range(1,len(arr)):\n        if arr[i] - arr[i-1] == 1:\n            current += 1\n            if current > longest:\n                longest = current\n                start = i-current+1\n        else:\n            current = 1\n    return (longest, start)\n    \ndef sum_of_digits_of_number(number):\n    '''\n    Write a function that takes in an integer and returns the sum of the digits of \n    the number.\n    '''\n    return sum(int(x) for x in str(number))\n    \ndef average_of_digits(number):\n    '''\n    Write a function that takes in an integer and returns the average of the digits \n    of the number.\n    '''\n    return sum(int(x) for x in str(number))/len(str(number))\n    \ndef return_first_occurrence_of_integer(arr, number):\n    '''\n    Write a function that takes in an array of integers and returns the first \n    index of the number in the array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == number:\n            return i\n    return -1\n    \ndef find_first_occurrence_of_integer(arr, number):\n    '''\n    Write a function that takes in an array of integers and returns the first \n    index of the number in the array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == number:\n            return i\n    return -1\n    \ndef return_first_occurrence_of_integer_2(arr, number):\n    '''\n    Write a function that takes in an array of integers and returns the first \n    index of the number in the array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == number:\n            return i\n        elif arr[i] > number:\n            return -1\n    return -1\n    \ndef return_first_occurrence_of_integer_3(arr, number):\n    '''\n    Write a function that takes in an array of integers and returns the first \n    index of the number in the array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == number:\n            return i\n        elif arr[i] > number:\n            return -1\n    return -1\n    \ndef return_first_occurrence_of_integer_4(arr, number):\n    '''\n    Write a function that takes in an array of integers and returns the first \n    index of the number in the array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == number:\n            return i\n        elif arr[i] > number:\n            return -1\n    return -1\n    \ndef return_first_occurrence_of_integer_5(arr, number):\n    '''\n    Write a function that takes in an array of integers and returns the first \n    index of the number in the array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == number:\n            return i\n        elif arr[i] > number:\n            return -1\n    return -1\n    \ndef return_first_occurrence_of_integer_6(arr, number):\n    '''\n    Write a function that takes in an array of integers and returns the first \n    index of the number in the array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == number:\n            return i\n        elif arr[i] > number:\n            return -1\n    return -1\n    \ndef return_first_occurrence_of_integer_7(arr, number):\n    '''\n    Write a function that takes in an array of integers and returns the first \n    index of the number in the array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == number:\n            return i\n        elif arr[i] > number:\n            return ",
        "num_ids": 42
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w == 0 or h == 0:\n        return 0\n    elif h == w:\n        return 0\n    else:\n        return math.sqrt(w**2 + h**2)\ndef otherside_triangle(w,h):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    if w == 0 or h == 0:\n        return 0\n    elif h == w:\n        return 0\n    else:\n        return math.sqrt(w**2 + h**2)\ndef factor_of_2(n):\n    '''\n    Write a function to find a factor of 2\n    '''\n    i = 1\n    while i < n:\n        if n % i == 0:\n            return i\n        i += 1\n    return n\ndef factor_of_3(n):\n    '''\n    Write a function to find a factor of 3\n    '''\n    i = 1\n    while i < n:\n        if n % i == 0 and i % 3 == 0:\n            return i\n        i += 1\n    return n\ndef factor_of_5(n):\n    '''\n    Write a function to find a factor of 5\n    '''\n    i = 1\n    while i < n:\n        if n % i == 0 and i % 5 == 0:\n            return i\n        i += 1\n    return n\ndef factor_of_15(n):\n    '''\n    Write a function to find a factor of 15\n    '''\n    i = 1\n    while i < n:\n        if n % i == 0 and i % 15 == 0:\n            return i\n        i += 1\n    return n\ndef find_cube_root(n):\n    '''\n    Write a function to find the cube root of a number\n    '''\n    if n < 0:\n        return -1\n    i = 0\n    n_int = int(n)\n    while i < n_int:\n        if n_int ** (1/3) == i:\n            return i\n        i += 1\n    return -1\ndef find_square_root(n):\n    '''\n    Write a function to find the square root of a number\n    '''\n    if n < 0:\n        return -1\n    i = 0\n    n_int = int(n)\n    while i < n_int:\n        if n_int ** (1/2) == i:\n            return i\n        i += 1\n    return -1\ndef find_square_root2(n):\n    '''\n    Write a function to find the square root of a number\n    '''\n    if n < 0:\n        return -1\n    i = 0\n    n_int = int(n)\n    while i < n_int:\n        if n_int ** (1/4) == i:\n            return i\n        i += 1\n    return -1\ndef find_square_root3(n):\n    '''\n    Write a function to find the square root of a number\n    '''\n    if n < 0:\n        return -1\n    i = 0\n    n_int = int(n)\n    while i < n_int:\n        if n_int ** (1/8) == i:\n            return i\n        i += 1\n    return -1\ndef find_power(x,n):\n    '''\n    Write a function to find the power of a number\n    '''\n    if x == 0:\n        return 0\n    i = 0\n    n_int = int(n)\n    while i < n_int:\n        if n_int == i:\n            return i\n        i += 1\n    return -1\ndef find_sine(x):\n    '''\n    Write a function to find the sine of a number\n    '''\n    if x < 0:\n        return -1\n    i = 0\n    x_int = int(x)\n    while i < x_int:\n        if x_int == i:\n            return i\n        i += 1\n    return -1\ndef find_cosine(x):\n    '''\n    Write a function to find the cosine of a number\n    '''\n    if x < 0:\n        return -1\n    i = 0\n    x_int = int(x)\n    while i < x_int:\n        if x_int == i:\n            return i\n        i += 1\n    return -1\ndef find_tan(x):\n    '''\n    Write a function to find the tangent of a number\n    '''\n    if x < 0:\n        return -1\n    i = 0\n    x_int = int(x)\n    while i < x_int:\n        if x_int == i:\n            return i\n        i += 1\n    return -1\ndef find_cotan(x):\n    '''\n    Write a function to find the cotangent of a number\n    '''\n    if x < 0:\n        return -1\n    i = 0\n    x_int = int(x)\n    while i < x_int:\n        if x_int == i:\n            return i\n        i += 1\n    return -1\ndef find_percent(x):\n    '''\n    Write a function to find the percent of a number\n    '''\n    if x < 0:\n        return -1\n    i = 0\n    x_int = int(x)\n    while i < x_int:\n        if x_int == i:\n            return i\n        i += 1\n    return -1\ndef find_divisor(x):\n    '''\n    Write a function to find the divisor of a number\n    '''\n    if x < 0:\n        return -1\n    i = 1\n    x_int = int(x)\n    while i <= x_int:\n        if x_int % i == 0:\n            return i\n        i += 1\n    return -1\ndef find_divisor2(x):\n    '''\n    Write a function to find the divisor of a number\n    '''\n    if x < 0:\n        return -1\n    i = 1\n    x_int = int(x)\n    while i < x_int:\n        if x_int % i == 0:\n            return i\n        i += 1\n    return -1\ndef find_divisor3(x):\n    '''\n    Write a function to find the divisor of a number\n    '''\n    if x < 0:\n        return -1\n    i = 1\n    x_int = int(x)\n    while i < x_int:\n        if x_int % i == 0:\n            return i\n        i += 1\n    return -1\ndef find_power3(x,n):\n    '''\n    Write a function to find the power of a number\n    '''\n    if x == 0:\n        return 0\n    i = 0\n    n_int = int(n)\n    while i < n_int:\n        if n_int == i:\n            return i\n        i += 1\n    return -1\ndef find_power2(x,n):\n    '''\n    Write a function to find the power of a number\n    '''\n    if x == 0:\n        return 0\n    i = 0\n    n_int = int(n)\n    while i < n_int:\n        if n_int == i:\n            return i\n        i += 1\n    return -1\ndef find_power5(x,n):\n    '''\n    Write a function to find the power of a number\n    '''\n    if x == 0:\n        return 0\n    i = 0\n    n_int = int(n)\n    while i < n_int:\n        if n_int == i:\n            return i\n        i += 1\n    return -1\ndef find_power4(x,n):\n    '''\n    Write a function to find the power of a number\n    '''\n    if x == 0:\n        return 0\n    i = 0\n    n_int = int(n)\n    while i < n_int:\n        if n_int == i:\n            return i\n        i += 1\n    return -1\ndef find_power3(x,n):\n    '''\n    Write a function to find the power of a number\n    '''\n    if x == 0:\n        return 0\n    i = 0\n    n_int = int(n",
        "num_ids": 26
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\n",
        "num_ids": 18
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n",
        "num_ids": 18
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    r = math.sqrt(w**2+h**2)\n    return r\n",
        "num_ids": 23
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    return math.sqrt(w**2 + h**2)\n",
        "num_ids": 20
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w*w + h*h)\ndef ispythagorean(a, b, c):\n    '''\n    Write a function to determine if a triangle is right angled.\n    '''\n    hyp = otherside_rightangle(a, b)\n    return hyp*hyp == c*c\ndef test_ispythagorean():\n    assert ispythagorean(3,4,5)\n    assert not ispythagorean(2,5,7)\n    assert not ispythagorean(3,4,6)\ndef max_product(n, m):\n    '''\n    Write a function to find the maximum product of two integers in a list.\n    '''\n    return max(n*m, m*n)\ndef test_max_product():\n    assert max_product(3,4) == 12\n    assert max_product(1,5) == 5\n    assert max_product(9,5) == 125\ndef add_digits(n):\n    '''\n    Write a function to add two digits together.\n    '''\n    return n + n % 10\ndef test_add_digits():\n    assert add_digits(1) == 1\n    assert add_digits(2) == 3\n    assert add_digits(9) == 9\ndef print_middle(s):\n    '''\n    Write a function to find the middle of a string.\n    '''\n    if len(s) % 2 == 0:\n        return s[int(len(s)/2-1):int(len(s)/2+1)]\n    else:\n        return s[int(len(s)/2)]\ndef test_print_middle():\n    assert print_middle('Python') == 'Py'\n    assert print_middle('Hello World') =='World'\n    assert print_middle('A') == 'A'\ndef count_vowels(s):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    return len([x for x in s if x in 'aeiou'])\ndef test_count_vowels():\n    assert count_vowels('Hello World') == 5\n    assert count_vowels('Aardvark') == 2\n    assert count_vowels('Why not?') == 0\ndef is_palindrome(s):\n    '''\n    Write a function that returns True if the string is a palindrome (a word or phrase that reads the same backwards as forwards).\n    '''\n    return s == s[::-1]\ndef test_is_palindrome():\n    assert is_palindrome('Hello')\n    assert not is_palindrome('Hello World')\n    assert is_palindrome('Never Odd or Even')\n    assert is_palindrome('A man, a plan, a canal: Panama')\ndef is_anagram(s1, s2):\n    '''\n    Write a function that returns True if the two strings are anagrams.\n    '''\n    return sorted(s1) == sorted(s2)\ndef test_is_anagram():\n    assert is_anagram('Never odd or even', 'Never e odv e')\n    assert not is_anagram('Never odd or even', 'Never odd or even')\n    assert is_anagram('Never odd or even', 'Never even or odd')\n    assert not is_anagram('Never odd or even', 'Never even')\ndef is_permutation(s1, s2):\n    '''\n    Write a function to check if two strings are permutations of one another.\n    '''\n    return sorted(s1) == sorted(s2)\ndef test_is_permutation():\n    assert is_permutation('Never odd or even', 'Even or odd')\n    assert is_permutation('Never odd or even', 'Never even or odd')\n    assert not is_permutation('Never odd or even', 'Not even or odd')\n    assert not is_permutation('Never odd or even', 'Never odd or even')\ndef base36encode(number):\n    '''\n    Write a function to convert a number to a string encoded in base36 (a numeric system with 36 characters).\n    '''\n    if number == 0:\n        return '0'\n    digits = []\n    while number:\n        number, i = divmod(number, 36)\n        digits.append('0123456789abcdefghijklmnopqrstuvwxyz'.index(str(i)))\n    return ''.join(reversed(digits))\ndef test_base36encode():\n    assert base36encode(0) == '0'\n    assert base36encode(1) == '1'\n    assert base36encode(12) == '12'\n    assert base36encode(2738) == 'qkir'\n    assert base36encode(35) == 'y'\ndef base36decode(number):\n    '''\n    Write a function to convert a string encoded in base36 (a numeric system with 36 characters) to a number.\n    '''\n    return int(number, 36)\ndef test_base36decode():\n    assert base36decode('0') == 0\n    assert base36decode('1') == 1\n    assert base36decode('12') == 12\n    assert base36decode('qkir') == 2738\n    assert base36decode('y') == 35\ndef rotate_matrix_one_way(m):\n    '''\n    Write a function to rotate a matrix 90 degrees clockwise.\n    '''\n    pass\ndef test_rotate_matrix_one_way():\n    assert rotate_matrix_one_way([[1,2],[3,4]]) == [[3,1],[4,2]]\n    assert rotate_matrix_one_way([[1,2,3],[4,5,6],[7,8,9]]) == [[7,4,1],[8,5,2],[9,6,3]]\n    assert rotate_matrix_one_way([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]) == [[13,9,5,1],[14,10,6,2],[15,11,7,3],[16,12,8,4]]\ndef rotate_matrix_90(m):\n    '''\n    Write a function to rotate a matrix 90 degrees counter-clockwise.\n    '''\n    pass\ndef test_rotate_matrix_90():\n    assert rotate_matrix_90([[1,2],[3,4]]) == [[2,4],[6,8]]\n    assert rotate_matrix_90([[1,2,3],[4,5,6],[7,8,9]]) == [[3,6,9],[2,5,8],[1,4,7]]\n    assert rotate_matrix_90([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]) == [[4,8,12,16],[2,6,10,14],[3,7,11,15],[1,5,9,13]]\ndef rotate_matrix_180(m):\n    '''\n    Write a function to rotate a matrix 180 degrees.\n    '''\n    pass\ndef test_rotate_matrix_180():\n    assert rotate_matrix_180([[1,2],[3,4]]) == [[1,2],[4,3]]\n    assert rotate_matrix_180([[1,2,3],[4,5,6],[7,8,9]]) == [[7,4,1],[8,5,2],[9,6,3]]\n    assert rotate_matrix_180([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]) == [[13,9,5,1],[14,10,6,2],[15,11,7,3],[16,12,8,4]]\ndef rotate_matrix_270(m):\n    '''\n    Write a function to rotate a matrix 270 degrees counter-clockwise.\n    '''\n    pass\ndef test_rotate_matrix_270():\n    assert rotate_matrix_270([[1,2],[3,4]]) == [[3,1],[4,2]]\n    assert rotate_matrix_270([[1,2,3],[4,5,6],",
        "num_ids": 69
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w*w+h*h-2*w*h*math.cos(math.radians(30)))\n",
        "num_ids": 35
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        return max(listval[0], max_val(listval[1:]))\n",
        "num_ids": 61
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval)==1:\n        return listval[0]\n    else:\n        return max_val(listval[1:]) if listval[0]<max_val(listval[1:]) else listval[0]\n",
        "num_ids": 61
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if listval == []:\n        return None\n    else:\n        maxval = listval[0]\n        for i in listval:\n            if i > maxval:\n                maxval = i\n        return maxval\n",
        "num_ids": 55
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if listval == []:\n        return 0\n    else:\n        maxval = listval[0]\n        for val in listval:\n            if val > maxval:\n                maxval = val\n        return maxval\n",
        "num_ids": 55
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # sort the list of values\n    listval.sort()\n    # get the max value\n    return listval[-1]\n",
        "num_ids": 33
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return False\n    else:\n        return max(listval)\n",
        "num_ids": 29
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if listval == []:\n        return None\n    return max(listval)\n    \ndef max_val_mixed(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if listval == []:\n        return None\n    if len(listval) == 1:\n        return listval[0]\n    if listval[0] > listval[1]:\n        return listval[0]\n    return listval[1]\n",
        "num_ids": 63
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return 'None'\n    return max(listval)\n",
        "num_ids": 23
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxv = listval[0]\n    for i in listval:\n        if i > maxv:\n            maxv = i\n    return maxv\n",
        "num_ids": 39
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return\n    else:\n        return listval[0]\n",
        "num_ids": 28
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    s = 0\n    for i in range(1, number):\n        if number % i == 0:\n            s += i\n    return s\n",
        "num_ids": 36
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div = 0\n    for i in range(1, number):\n        if number % i == 0:\n            div += i\n    return div\n",
        "num_ids": 36
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    divisor = 1\n    while divisor <= number:\n        if number % divisor == 0:\n            divisors.append(divisor)\n        divisor += 1\n    return sum(divisors)\n",
        "num_ids": 64
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    i = 1\n    sum = 0\n    while i < number:\n        if number % i == 0:\n            sum += i\n        i += 1\n    return sum\n",
        "num_ids": 42
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divs = [1]\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            divs.extend([i, int(number / i)])\n    return sum(divs)\n",
        "num_ids": 64
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divs = []\n    for x in range(1, number + 1):\n        if number % x == 0:\n            divs.append(x)\n    return sum(divs)\n",
        "num_ids": 47
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n",
        "num_ids": 9
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number // 2 + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "num_ids": 52
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 1\n    for i in range(2,number):\n        if number%i == 0:\n            sum += i\n    return sum\n",
        "num_ids": 36
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return get_Inv_Count_rec(arr, 0, len(arr)-1)\n",
        "num_ids": 23
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n",
        "num_ids": 56
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    arr = sorted(arr)\n    return sum(a<b for a,b in zip(arr,arr[1:]))\n",
        "num_ids": 32
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) == 1:\n        return 0, arr\n    else:\n        sorted_arr = [arr[0]]\n        sorted_arr += get_Inv_Count(arr[1:])\n        return sorted_arr\n",
        "num_ids": 58
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if arr == []:\n        return 0\n    else:\n        return get_Inv_Count(arr[1:]) + get_Inv_Count(arr[:-1]) + (arr[0] < arr[-1])\n",
        "num_ids": 55
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    arr.sort()\n    arr_len = len(arr)\n    inversion_count = 0\n",
        "num_ids": 26
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    Inv_Count = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1, len(arr)):\n            if(arr[i] > arr[j]):\n                Inv_Count += 1\n    return Inv_Count\n",
        "num_ids": 66
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversions = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                inversions = inversions + 1\n    return inversions\n",
        "num_ids": 62
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (arr[i]>arr[j]):\n                count += 1\n    return count\n",
        "num_ids": 61
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return arr, 0\n    mid = n/2\n    left, cnt = get_Inv_Count(arr[:mid])\n    right, cnt = get_Inv_Count(arr[mid:])\n    inv_count = cnt + merge(left, right)\n    return arr, inv_count\n    \ndef merge(arr1, arr2):\n    '''\n    Write a python function to merge two arrays.\n    '''\n    inv_count = 0\n    arr = []\n    l1, l2 = len(arr1), len(arr2)\n    i, j = 0, 0\n    while i < l1 and j < l2:\n        if arr1[i] <= arr2[j]:\n            arr.append(arr1[i])\n            i += 1\n        else:\n            arr.append(arr2[j])\n            inv_count += l1 - i\n            j += 1\n    while i < l1:\n        arr.append(arr1[i])\n        i += 1\n    while j < l2:\n        arr.append(arr2[j])\n        j += 1\n    return inv_count\n",
        "num_ids": 168
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    res = []\n    for item in list1:\n        if isinstance(item, list):\n            res.extend(flatten_list(item))\n        else:\n            res.append(item)\n    return res\n",
        "num_ids": 55
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [x for y in list1 for x in y]\n",
        "num_ids": 17
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if list1 == []:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
        "num_ids": 74
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) < 1:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
        "num_ids": 77
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    output = []\n    for sublist in list1:\n        if isinstance(sublist, list):\n            output.extend(flatten_list(sublist))\n        else:\n            output.append(sublist)\n    return output\n",
        "num_ids": 59
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    res = []\n    for item in list1:\n        if type(item) == list:\n            res.extend(flatten_list(item))\n        else:\n            res.append(item)\n    return res\n",
        "num_ids": 55
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    def _flatten(list1):\n        res = []\n        for item in list1:\n            if isinstance(item, list):\n                res.extend(_flatten(item))\n            else:\n                res.append(item)\n        return res\n    return _flatten(list1)\n",
        "num_ids": 73
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return list1\n",
        "num_ids": 14
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    def flat_recursion(list1, list2):\n        for i in range(0, len(list1)):\n            if isinstance(list1[i], list):\n                list2 += flat_recursion(list1[i], [])\n            else:\n                list2.append(list1[i])\n        return list2\n    return flat_recursion(list1, [])\n",
        "num_ids": 95
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return []\n    return flatten_list(list1[0]) + flatten_list(list1[1:])\n",
        "num_ids": 38
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Sort the tuples in the list by the second element of the tuple\n    stdata.sort(key=lambda x: x[1],reverse=True)\n    # The new aggregate is the sum of the first element of each tuple\n    new_aggregate = 0\n    for tup in stdata:\n        new_aggregate += tup[0]\n    return new_aggregate\n",
        "num_ids": 91
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg_dict = defaultdict(int)\n    max_agg_dict[0] = 0\n    max_agg_dict[1] = stdata[0][1]\n    max_agg_dict[2] = max(stdata[0][1],stdata[1][1],stdata[2][1])\n    \n    for x in range(len(stdata)):\n        for y in range(x+1,len(stdata)):\n            for z in range(y+1,len(stdata)):\n                max_agg_dict[max(max_agg_dict[x],max_agg_dict[y],max_agg_dict[z])+1] += stdata[x][1] + stdata[y][1] + stdata[z][1]\n    return max(max_agg_dict.values())\n    \ndef min_aggregate(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    min_agg_dict = defaultdict(int)\n    min_agg_dict[0] = 0\n    min_agg_dict[1] = stdata[0][1]\n    min_agg_dict[2] = min(stdata[0][1],stdata[1][1],stdata[2][1])\n    \n    for x in range(len(stdata)):\n        for y in range(x+1,len(stdata)):\n            for z in range(y+1,len(stdata)):\n                min_agg_dict[min(min_agg_dict[x],min_agg_dict[y],min_agg_dict[z])+1] += stdata[x][1] + stdata[y][1] + stdata[z][1]\n    return min(min_agg_dict.values())\n",
        "num_ids": 202
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = defaultdict(int)\n    for data in stdata:\n        for k, v in data.items():\n            aggregate[k] += v\n    return aggregate\n",
        "num_ids": 44
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_count = 0\n    for st in stdata:\n        if(st[1] > max_count):\n            max_count = st[1]\n    return max_count\n",
        "num_ids": 46
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    if not stdata:\n        return 0\n    if len(stdata) == 1:\n        return stdata[0][0]\n    \n    # find the pivot\n    pivot = stdata[len(stdata)//2]\n    left_max = max_aggregate(stdata[:len(stdata)//2])\n    right_max = max_aggregate(stdata[len(stdata)//2:])\n",
        "num_ids": 104
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    for i in range(len(stdata)):\n        stdata[i] = list(stdata[i])\n        for j in range(len(stdata[i])):\n            if j == 0:\n                stdata[i][j] = sum(stdata[i][j])\n            else:\n                stdata[i][j] = sum(stdata[i][j])/len(stdata[i][j])\n    return stdata\n    \ndef most_popular(stdata, m):\n    '''\n    Write a function that takes in a list of tuples and returns the most popular m tuples.\n    If there are less than m tuples, return the full list of tuples.\n    For example, most_popular([(1,2), (2,3), (3,4), (4,5)], 2) should return [(1, 2), (3, 4)]\n    '''\n    \n    d = defaultdict(list)\n    for i in stdata:\n        d[i[0]].append(i)\n    d2 = {}\n    for i in d.values():\n        if len(i) > m:\n            d2[i[0]] = i[len(i)-m:]\n    return d2.values()\n    \ndef best_grades(stdata, classes, best_grades, student_grades, best_students):\n    '''\n    Write a function that takes in a list of tuples, a list of classes, a dictionary where the key is a class name and the value is a list of students in that class, \n    a list of student grades, and a dictionary where the key is a student name and the value is a list of grades for that student.\n    The function should return a dictionary where the key is the student name and the value is a list of the student's grades for the classes that best represented by the list of classes.\n    For example, best_grades([('Tina', 'C'), ('Gerald', 'A'), ('Edward', 'B'), ('Sarah', 'A')], ['C', 'A', 'B'], {'C': (5, 2, 2, 4), 'A': (2, 4, 4, 4), 'B': (1, 3, 3, 3)}, {'Tina': (1, 3, 5, 4), 'Gerald': (2, 3, 2, 4), 'Edward': (4, 4, 3, 4)}) should return {'Gerald': ['A', 'B'], 'Edward': ['C', 'B'], 'Tina': ['C', 'A']}\n    '''\n    for i in stdata:\n        i[0] = i[0].replace(\" \", \"\")\n        i[1] = i[1].replace(\" \", \"\")\n    for i in stdata:\n        i.sort()\n    for i in classes:\n        if i not in student_grades:\n            student_grades[i] = []\n    for i in student_grades:\n        student_grades[i] = [0]*len(stdata)\n        for j in student_grades[i]:\n            student_grades[i][j] = 0\n    for i in stdata:\n        for j in student_grades[i[1]]:\n            student_grades[i[0]][j] += i[2]\n    d = {}\n    for i in student_grades.values():\n        for j in range(len(i)):\n            if i[j] == max(i):\n                if i[j] not in d:\n                    d[i[j]] = [j]\n                else:\n                    d[i[j]].append(j)\n    for i in d:\n        if len(d[i]) == len(classes):\n            if d[i] not in best_students:\n                best_students[d[i]] = i\n    return best_students\n    \ndef all_distinct(stdata):\n    '''\n    Write a function that takes in a list of tuples and returns True if all the values in the tuples are distinct, and False if any two tuples are equal.\n    For example, all_distinct([(1, 2), (2, 3), (3, 4), (4, 4)]) should return True, and all_distinct([(1, 1), (2, 3), (3, 1), (4, 4)]) should return False.\n    '''\n    d = set()\n    for i in stdata:\n        if i in d:\n            return False\n        else:\n            d.add(i)\n    return True\n    \ndef all_equal(stdata):\n    '''\n    Write a function that takes in a list of tuples and returns True if all the values in the tuples are the same, and False if any two tuples are not the same.\n    For example, all_equal([(1, 2), (2, 3), (3, 4), (4, 4)]) should return True, and all_equal([(1, 1), (2, 3), (3, 1), (4, 4)]) should return False.\n    '''\n    d = set()\n    for i in stdata:\n        if i in d:\n            return False\n        else:\n            d.add(i)\n    return True\n    \ndef max_key(stdata):\n    '''\n    Write a function that takes in a list of tuples and returns the tuple with the maximum value. If the list is empty, return None.\n    For example, max_key([(1, 2), (2, 3), (3, 4), (4, 5)]) should return (4, 5).\n    '''\n    m = -100\n    d = {}\n    for i in stdata:\n        d[i[1]] = i[0]\n    for i in d.keys():\n        if d[i] > m:\n            m = d[i]\n    if m == -100:\n        return None\n    return m\n    \ndef mean(stdata):\n    '''\n    Write a function that takes in a list of tuples and returns the mean.\n    For example, mean([(1, 2), (2, 3), (3, 4), (4, 5)]) should return 2.5.\n    '''\n    s = 0\n    for i in stdata:\n        s += i[1]\n    return s/len(stdata)\n    \ndef median(stdata):\n    '''\n    Write a function that takes in a list of tuples and returns the median.\n    If there are an odd number of tuples, then the median is the value in the middle of the list. If there are an even number of tuples, then the median is the average of the two values in the middle of the list.\n    For example, median([(1, 2), (2, 3), (3, 4), (4, 5)]) should return 3.\n    '''\n    s = 0\n    for i in stdata:\n        s += i[1]\n    if len(stdata) % 2 == 0:\n        return (stdata[len(stdata)/2-1][1] + stdata[len(stdata)/2][1]) / 2\n    else:\n        return stdata[len(stdata)/2][1]\n    \ndef variance(stdata):\n    '''\n    Write a function that takes in a list of tuples and returns the variance.\n    The variance is the average of the squared differences between each value and the mean.\n    For example, variance([(1, 2), (2, 3), (3, 4), (4, 5)]) should return 1.5.\n    '''\n    s = 0\n    for i in stdata:\n        s += (i[1] - mean(stdata))**2\n    return s/len(stdata)\n    \ndef variance_uncertainty(stdata):\n    '''\n    Write a function that takes in a list of tuples and returns the variance.\n    The variance is the average of the squared differences between each value and the mean.\n    For example, variance_uncertainty([(1, 2), (2, 3), (3, 4), (4, 5)]) should return 1.25.\n    '''\n    return variance(stdata)**0.5\n    \ndef standard_deviation(stdata):\n    '''\n    Write a function that takes in a list of tuples and returns the standard deviation.\n    The standard deviation is the square root of the variance.\n    For example, standard_deviation([(1, 2), (2, 3), (3, 4), (",
        "num_ids": 59
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stats = defaultdict(float)\n    for start, end, value in stdata:\n        stats[start] += value\n        stats[end] -= value\n    max_val = float('-inf')\n    for i in sorted(stats):\n        max_val = max(stats[i], max_val)\n    return max_val\n",
        "num_ids": 81
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #this is the key function that you should be able to call by using max_aggregate(iterable).\n    #and write the recursive definition for this function\n    def max_aggregate_rec(stdata):\n        if len(stdata) == 0:\n            return 0\n        else:\n            return max(stdata[0], max_aggregate_rec(stdata[1:]))\n    return max_aggregate_rec(stdata)\n",
        "num_ids": 106
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggr = [defaultdict(int) for i in range(len(stdata))]\n    max_aggr[0]['sum'] = stdata[0][1]\n    max_aggr[0]['min'] = stdata[0][1]\n    max_aggr[0]['max'] = stdata[0][1]\n    max_aggr[0]['avg'] = stdata[0][1]\n    for i in range(1, len(stdata)):\n        max_aggr[i]['sum'] = max_aggr[i-1]['sum'] + stdata[i][1]\n        if max_aggr[i]['sum'] < stdata[i][1]:\n            max_aggr[i]['sum'] = stdata[i][1]\n        if max_aggr[i]['max'] < stdata[i][1]:\n            max_aggr[i]['max'] = stdata[i][1]\n        if max_aggr[i]['min'] > stdata[i][1]:\n            max_aggr[i]['min'] = stdata[i][1]\n        max_aggr[i]['avg'] = max_aggr[i-1]['avg'] + ((stdata[i][1] - max_aggr[i-1]['avg']) / (i+1))\n",
        "num_ids": 335
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    if not stdata:\n        return 0\n    \n    cur_sum = 0\n    max_sum = 0\n    for tup in stdata:\n        cur_sum += tup[0]\n        if cur_sum > max_sum:\n            max_sum = cur_sum\n    return max_sum\n",
        "num_ids": 75
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return len([1 for i in xrange(2**n) if bin(i)[2:].count(\"1\") == n])\n",
        "num_ids": 33
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def rec(i, n, s):\n        if i == n:\n            return 1\n        elif s == 0:\n            return 0\n        elif s > 0:\n            return rec(i+1, n, s) + rec(i+1, n-1, s-1)\n        else:\n            return rec(i+1, n, s) + rec(i+1, n-1, s+1)\n",
        "num_ids": 104
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    if n == 1:\n        return 1\n    count = 0\n    for i in xrange(2,n+1):\n        count += count_binary_seq(i-1)\n    return count\n",
        "num_ids": 52
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    a = int(pow(2,n))\n    count = 0\n    for i in range(a):\n        s = bin(i)\n        if bin_to_dec(s[2:]) == bin_to_dec(s[2:len(s)-2]) and bin_to_dec(s[2:len(s)-2]) == 0:\n            count += 1\n    return count\n",
        "num_ids": 97
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # number of bits = 2n\n    bit = 2*n\n    # for 1 <= n <= 30, maximum sum of first n bits will be 31\n    memo = [0 for i in range(bit+1)]\n    memo[0] = 1\n    for i in range(1,bit+1):\n        # for i=1, 2, 3,..., 2n\n        for j in range(i, 0, -1):\n            # for j=1, 2, 3,..., i-1\n            # if jth bit of i-th bit is 0, then use the i-1th bit to carry out the calculation \n            # and the j-1th bit to carry out the calculation\n            memo[i] += memo[j-1]\n",
        "num_ids": 178
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    #base case\n    if n == 0:\n        return 1\n    #else recursive case\n    else:\n        total = 0\n        for i in range(2**n):\n            #if sum of first n bits is same as sum of last n bits\n            if bin(i)[2:].zfill(n).count('1') == n:\n                total += count_binary_seq(n-1)\n        return total\n",
        "num_ids": 101
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    assert isinstance(n, int) and n >= 0, 'n must be a non-negative integer'\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return count_binary_seq(n-1) + count_binary_seq(n-2)\n",
        "num_ids": 78
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    table = [[0 for j in range(2**n)] for i in range(2**n)]\n    # table[i][j] is the number of sequences ending with the ith digit of length 2n ending with the jth digit\n    for k in range(n):\n        table[0][k] = 1\n    for i in range(1, 2**n):\n        for j in range(n):\n            if j == 0:\n                table[i][j] = table[i - 1][j + 1]\n            elif j == n - 1:\n                table[i][j] = table[i - 1][j - 1]\n            else:\n                table[i][j] = table[i - 1][j - 1] + table[i - 1][j + 1]\n    return sum(table[2**n - 1])\n",
        "num_ids": 199
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, (1<<n)):\n        s1, s2 = bin(i)[2:], bin(i)[-n:][::-1]\n        if s1 == s2:\n            count += 1\n    return count\n",
        "num_ids": 67
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n<2:\n        return 0\n    cnt = 0\n    for i in range(2,n+1):\n        cnt += (n-1) * (i-1)\n    return cnt\n",
        "num_ids": 53
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(map(dict_depth, d.values()))\n    else:\n        return 0",
        "num_ids": 37
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return max(dict_depth(v) for v in d.itervalues()) + 1\n",
        "num_ids": 40
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is not dict:\n        raise TypeError('dict_depth() arg must be a dictionary')\n    depths = []\n    for key in d:\n        depths.append(dict_depth(d[key]))\n    return 1 + max(depths)\n",
        "num_ids": 68
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 1\n    for key in d:\n        if type(d[key]) is dict:\n            depth += dict_depth(d[key])\n    return depth\n",
        "num_ids": 42
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if type(d[key]) == dict:\n            depth = max(depth, 1 + dict_depth(d[key]))\n    return depth\n",
        "num_ids": 49
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return max(dict_depth(v) for v in d.itervalues()) + 1\n",
        "num_ids": 40
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return max(dict_depth(v) for v in d.values()) + 1\n",
        "num_ids": 37
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, 1 + dict_depth(d[key]))\n    return depth\n",
        "num_ids": 49
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return len(d)\n",
        "num_ids": 9
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n",
        "num_ids": 40
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    arr = [i for i in arr]\n    for i in range(len(ranges)) :\n        for j in range(ranges[i]) :\n            arr = rotate(arr,rotations[i])\n    return arr[index]\n",
        "num_ids": 59
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    no_of_rotations = len(ranges)\n    \n    #Base Case\n    if index > no_of_rotations :\n        return -1\n    \n    #Sub-Case 1\n    if ranges[index] == -1 :\n        return rotations[index]\n    \n    #Sub-Case 2\n    elif ranges[index] == 1 :\n        return rotations[index] - 1\n    \n    #Sub-Case 3\n    else :\n        return find_Element(arr,ranges[:index],rotations,index+1)\n    \n    \ndef rotations_required(arr,ranges) :\n    '''\n    Write a python function to calculate rotations required to find an element at a given index after number of rotations.\n    '''\n    no_of_rotations = len(ranges)\n    \n    rotations = [0]*no_of_rotations\n    \n    for i in range(no_of_rotations) :\n        rotations[i] = find_Element(arr,ranges,rotations,i)\n    \n    return rotations\n",
        "num_ids": 79
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for k in range(index+rotations) : \n        if ranges[k] <= arr[0] :\n            continue \n        elif ranges[k] > arr[0] :\n            return ranges[k]\n",
        "num_ids": 54
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(ranges)) : \n        if ranges[i][1] - ranges[i][0] == index : \n            return rotations[i]\n    return -1 \n",
        "num_ids": 50
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # print(arr,ranges,rotations,index)\n    if index == 0 :\n        return arr[0]\n    else :\n        if ranges[index] == ranges[index-1] :\n            # print(index,ranges[index],rotations[index])\n            if rotations[index] == 0 :\n                return find_Element(arr,ranges,rotations,index-1)\n            else :\n                return find_Element(arr,ranges,rotations,index-1)\n        else :\n            return find_Element(arr,ranges,rotations,index-1)\n",
        "num_ids": 143
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(ranges)) :\n        if index <= ranges[i] :\n            return arr[i]\n        index -= ranges[i]\n    \ndef search_element(arr,ranges,rotations) :\n    '''\n    Write a python function to search element in a rotated array.\n    '''\n    len_arr = len(arr)\n    \n    for i in range(len_arr) :\n        if arr[i] >= rotations :\n            return i\n    \n    return -1\n    \ndef find_rotation_point(arr,ranges,rotations) :\n    '''\n    Write a python function to find rotation point in a rotated array.\n    '''\n    index = search_element(arr,ranges,rotations)\n    \n    if index == -1 :\n        return -1\n    \n    len_arr = len(arr)\n    \n    if index == len_arr-1 :\n        return -1\n    \n    return arr[index+1]\n",
        "num_ids": 74
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    return arr[index] + (rotations * ranges)\n    \n    \ndef create_List(list_size) :\n    '''\n    Write a python function to create list of size list_size\n    '''\n    return [random.randrange(-1*list_size,list_size+1,1) for x in range(0,list_size)]\n    \n    \ndef get_Max_Index_Value(arr,rotations) :\n    '''\n    Write a python function to return the index of maximum value after rotations.\n    '''\n    return arr.index(max(arr))\n    \n    \ndef get_Min_Index_Value(arr,rotations) :\n    '''\n    Write a python function to return the index of maximum value after rotations.\n    '''\n    return arr.index(min(arr))\n    \n    \ndef swap_element(arr,pos1,pos2,rotations) :\n    '''\n    Write a python function to swap element at position pos1 and pos2 after rotations.\n    '''\n    arr[pos1],arr[pos2] = arr[pos2],arr[pos1]\n    return arr\n    \n    \ndef perform_Rotation(arr,rotations) :\n    '''\n    Write a python function to perform rotations on array.\n    '''\n    return arr[rotations:] + arr[:rotations]\n    \n    \ndef print_List(arr) :\n    '''\n    Write a python function to print list of array.\n    '''\n    print arr\n    \n    \ndef get_Rotation_Count(arr) :\n    '''\n    Write a python function to return the number of rotations done on array.\n    '''\n    count = 0\n    while(arr[0]!= arr[len(arr)-1]) :\n        arr = perform_Rotation(arr,1)\n        count += 1\n    return count\n    \n    \ndef get_Rotated_List(arr,ranges) :\n    '''\n    Write a python function to return the rotated array after ranges rotations.\n    '''\n    for i in range(0,ranges) :\n        arr = perform_Rotation(arr,1)\n    return arr\n    \n    \ndef test_find_Element() :\n    arr = [2,4,6,8,10,11,13,15]\n    ranges = 5\n    rotations = 3\n    assert find_Element(arr,ranges,rotations,1) == 13\n    assert find_Element(arr,ranges,rotations,2) == 15\n    assert find_Element(arr,ranges,rotations,3) == 2\n    assert find_Element(arr,ranges,rotations,4) == 10\n    assert find_Element(arr,ranges,rotations,5) == 4\n    \n    \ndef test_create_List() :\n    list_size = 3\n    arr = create_List(list_size)\n    assert type(arr) == list\n    assert len(arr) == list_size\n    assert min(arr) >= -1*list_size\n    assert max(arr) <= list_size\n    \n    \ndef test_get_Max_Index_Value() :\n    arr = [2,3,4,5,6,7,8]\n    ranges = 3\n    rotations = 0\n    assert get_Max_Index_Value(arr,ranges,rotations) == 7\n    \n    \ndef test_get_Min_Index_Value() :\n    arr = [1,2,3,4,5,6,7]\n    ranges = 3\n    rotations = 0\n    assert get_Min_Index_Value(arr,ranges,rotations) == 4\n    \n    \ndef test_swap_element() :\n    arr = [2,4,6,8,10,11,13,15]\n    pos1 = 3\n    pos2 = 6\n    rotations = 1\n    assert swap_element(arr,pos1,pos2,rotations) == [4,2,6,8,10,11,13,15]\n    assert swap_element(arr,pos1,pos2,rotations) == [2,4,6,8,10,11,13,15]\n    assert swap_element(arr,pos1,pos2,rotations) == [4,2,6,8,10,11,13,15]\n    assert swap_element(arr,pos1,pos2,rotations) == [4,2,6,8,10,11,13,15]\n    assert swap_element(arr,pos1,pos2,rotations) == [2,4,6,8,10,11,13,15]\n    assert swap_element(arr,pos1,pos2,rotations) == [4,2,6,8,10,11,13,15]\n    \n    \ndef test_perform_Rotation() :\n    arr = [2,4,6,8,10,11,13,15]\n    rotations = 3\n    assert perform_Rotation(arr,rotations) == [15,2,6,8,10,11,13,4]\n    assert perform_Rotation(arr,rotations) == [13,4,6,8,10,11,2,15]\n    assert perform_Rotation(arr,rotations) == [11,2,6,8,10,13,4,15]\n    assert perform_Rotation(arr,rotations) == [10,13,4,6,8,11,2,15]\n    assert perform_Rotation(arr,rotations) == [8,11,2,6,10,13,4,15]\n    assert perform_Rotation(arr,rotations) == [6,8,10,13,4,11,2,15]\n    assert perform_Rotation(arr,rotations) == [4,11,2,6,8,10,13,15]\n    \n    \ndef test_get_Rotation_Count() :\n    arr = [2,4,6,8,10,11,13,15]\n    assert get_Rotation_Count(arr) == 3\n    assert get_Rotation_Count(arr) == 3\n    assert get_Rotation_Count(arr) == 3\n    assert get_Rotation_Count(arr) == 3\n    assert get_Rotation_Count(arr) == 3\n    \n    \ndef test_get_Rotated_List() :\n    arr = [2,4,6,8,10,11,13,15]\n    ranges = 3\n    assert get_Rotated_List(arr,ranges) == [2,4,6,8,10,11,13,15]\n    assert get_Rotated_List(arr,ranges) == [2,4,6,8,10,11,13,15]\n    assert get_Rotated_List(arr,ranges) == [2,4,6,8,10,11,13,15]\n    assert get_Rotated_List(arr,ranges) == [2,4,6,8,10,11,13,15]\n    assert get_Rotated_List(arr,ranges) == [2,4,6,8,10,11,13,15]\n    \n    \ndef test_print_List() :\n    arr = [2,4,6,8,10,11,13,15]\n    print_List(arr)\n    assert arr == [2,4,6,8,10,11,13,15]\n    assert arr == [2,4,6,8,10,11,13,15]\n    assert arr == [2,4,6,8,10,11,13,15]\n    assert arr == [2,4,6,8,10,11,13,15]\n    assert arr == [2,4,6,8,10,11,13,15]\n    \n    \ndef test_get_Max_Index_Value() :\n    arr = [2,4,6,8,10,11,13,15]\n    assert get_Max_Index_Value(arr,0) == 15\n    assert get_Max_Index_Value(arr,1) == 13\n    assert get_Max_Index_Value(arr,2) == 11\n    assert get_Max_Index_Value(arr,3) == 9\n    assert get_Max_Index_Value(arr,4) == 7\n    \n    \ndef tes",
        "num_ids": 1513
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    print(index,ranges)\n    if ranges[index][1] == -1 :\n        return index\n    # if we have not reached the last element of the array, then we traverse the array\n    if ranges[index][1] > ranges[index][0] :\n        if arr[index] > arr[ranges[index][1]] :\n            return find_Element(arr,ranges,rotations,index+1)\n        return find_Element(arr,ranges,rotations,index+1)\n    # if we have reached the last element of the array, then we compare the element with the element at the rotation point\n    if arr[index] == arr[ranges[index][0]] :\n        return ranges[index][0]\n    return ranges[index][1]\n    \n    \ndef find_rotation_point(arr,l,r) :\n    '''\n    Write a python function to find the rotation point in the given array arr between l and r.\n    The rotation point is the index where arr[l] < arr[r].\n    '''\n    if arr[l] < arr[r] :\n        return -1\n    if l == r :\n        return l\n    if l > r :\n        return -1\n    mid = (r - l)//2 + l\n    if arr[mid] > arr[l] :\n        return find_rotation_point(arr,l,mid-1)\n    if arr[mid] < arr[r] :\n        return find_rotation_point(arr,mid+1,r)\n    return mid\n",
        "num_ids": 122
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(ranges)) :\n        if ranges[i] == index :\n            return rotations[i]\n    return -1\n",
        "num_ids": 38
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotation_ranges = [ranges[i] for i in rotations]\n    #print(rotation_ranges)\n    rotation_ranges.sort()\n    #print(rotation_ranges)\n    #print(rotation_ranges)\n    #print(rotation_ranges)\n    for i in range(len(rotation_ranges)) :\n        if index<rotation_ranges[i] :\n            return arr[i]\n    return arr[-1]\n",
        "num_ids": 121
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    \n    for word in words:\n        if word[0] == 'p':\n            return word\n",
        "num_ids": 26
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    lst=[]\n    for i in words:\n        if re.match(r'[a-z]+p[a-z]*',i):\n            lst.append(i)\n    return lst\n",
        "num_ids": 53
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    new_list = []\n    for word in words:\n        if word[0] == 'p':\n            new_list.append(word)\n    return new_list\n",
        "num_ids": 43
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = [word for word in words if word[0] == 'p']\n    return result\n",
        "num_ids": 25
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_list = []\n    for word in words:\n        if word[0] == 'p':\n            p_list.append(word)\n    return p_list\n",
        "num_ids": 43
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    new_list = []\n    for word in words:\n        if word[0] == 'p':\n            new_list.append(word)\n    return new_list\n",
        "num_ids": 43
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word for word in words if word[0]=='p']\n    #return [item for item in words if item[0]=='p']\n",
        "num_ids": 39
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    f = [word for word in words if word.startswith('p')]\n    return f\n",
        "num_ids": 26
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    new_words = []\n    for word in words:\n        if word.startswith('p'):\n            new_words.append(word)\n    return new_words\n",
        "num_ids": 44
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == 0:\n        return a[0]\n",
        "num_ids": 16
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    if (index, k) in dp:\n        return dp[(index, k)]\n    result = max_sum_increasing_subseq(a, n, index + 1, k)\n    if a[index] < k:\n        result = max(result, max_sum_increasing_subseq(a, n, index + 1, k) + a[index])\n    dp[(index, k)] = result\n    return result\n",
        "num_ids": 116
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    if k == 0:\n        return 0\n    if dp[index][k]!= -1:\n        return dp[index][k]\n    if a[index] < k:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    else:\n        return max(max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k-1) + a[index])\n",
        "num_ids": 135
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    if k > index:\n        return 0\n    # base case\n    if k == index:\n        return a[index]\n    # recursive case\n    res = max(a[index], max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1))\n    return res\n",
        "num_ids": 102
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > n:\n        return 0\n    if index == n:\n        return a[k]\n    if index > n:\n        return 0\n",
        "num_ids": 38
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == index:\n        return a[index] + k\n    elif n < index:\n        return -1\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + a[index]) + a[index])\n",
        "num_ids": 83
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    if k > index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n",
        "num_ids": 90
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k < 0:\n        return -1\n    if index == n:\n        return k\n    if a[index] > k:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    else:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index])\n",
        "num_ids": 111
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k <= index:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return k\n    else:\n        if k < a[index]:\n            return max_sum_increasing_subseq(a, n, index+1, k)\n        else:\n            return max(a[index]+max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k))\n",
        "num_ids": 99
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex = deepcopy(tuplex)\n    for i in range(n):\n        tuplex.append(0)\n    for i in range(m-n):\n        tuplex[i] = 0\n    return tuplex\n",
        "num_ids": 61
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:n]\n",
        "num_ids": 13
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    assert type(tuplex)==tuple\n    assert m>=0 and n>=0\n    if m==0:\n        return ()\n    elif m==1:\n        return (tuplex[n-1],)\n    else:\n        return (tuplex[n-1],) + colon_tuplex(tuplex,m-1,n-1)\ndef dict_remove_key(d,k):\n    assert type(d)==dict\n    assert type(k)==str\n    del d[k]\ndef get_tup_max_len(tup):\n    return max(len(tup[i]) for i in range(len(tup)))\ndef slice_tup(tup,m,n):\n    assert type(tup)==tuple\n    assert m>=0 and n>=0\n    if m==n:\n        return tup\n    elif m==0:\n        return tup[n:]\n    elif n==0:\n        return tup[:m]\n    else:\n        return tup[m:n]\ndef slice_tup_with_empties(tup,m,n):\n    assert type(tup)==tuple\n    assert m>=0 and n>=0\n    return (tup[:m],) + (slice_tup(tup,m,n),) + (tup[n:],)\ndef tup_slice_dict(tup,d,m,n):\n    assert type(tup)==tuple\n    assert type(d)==dict\n    assert m>=0 and n>=0\n    if m==0:\n        return d\n    elif m==1:\n        return d[tup[n-1]]\n    else:\n        return d[tup[n-1]] + tup_slice_dict(tup,d,m-1,n-1)\ndef get_tup_min_len(tup):\n    return min(len(tup[i]) for i in range(len(tup)))\ndef tup_slice_dict_with_empties(tup,d,m,n):\n    assert type(tup)==tuple\n    assert type(d)==dict\n    assert m>=0 and n>=0\n    if m==n:\n        return d\n    elif m==0:\n        return d\n    elif n==0:\n        return d\n    else:\n        return d[tup[m]] + tup_slice_dict_with_empties(tup,d,m-1,n-1)\ndef get_min_max_len(lst):\n    return min(len(lst[i]) for i in range(len(lst)))\ndef get_all_len_from_lst(lst):\n    return [get_min_max_len(lst[i]) for i in range(len(lst))]\ndef get_all_len_from_tup(tup):\n    return get_all_len_from_lst(tup)\ndef change_tup_to_min_len(tup):\n    assert type(tup)==tuple\n    assert len(tup)>0\n    return tup[:min(len(tup[i]) for i in range(len(tup)))]\ndef get_tup_len(tup):\n    return len(tup)\ndef get_tup_len_with_empties(tup):\n    return len(tup) - get_tup_min_len(tup)\ndef split_lst_by_len(lst,n):\n    assert type(lst)==list\n    assert n>=0\n    return [lst[i:i+n] for i in range(0,len(lst),n)]\ndef split_tup_by_len(tup,n):\n    assert type(tup)==tuple\n    assert n>=0\n    return (tup[i:i+n] for i in range(0,len(tup),n))\ndef flatten_lst(lst):\n    assert type(lst)==list\n    return [item for sublist in lst for item in sublist]\ndef flatten_tup(tup):\n    assert type(tup)==tuple\n    return (item for sublist in tup for item in sublist)\ndef add_dict_list_to_dict(d,lst):\n    assert type(d)==dict\n    assert type(lst)==list\n    assert len(lst)>0\n    for i in range(len(lst)):\n        d[lst[i]] = i\ndef add_tup_list_to_tup(tup,lst):\n    assert type(tup)==tuple\n    assert type(lst)==list\n    assert len(lst)>0\n    for i in range(len(lst)):\n        tup = tup + (lst[i],)\n    return tup\ndef add_tup_tup_to_tup(tup1,tup2):\n    assert type(tup1)==tuple\n    assert type(tup2)==tuple\n    return tup1 + tup2\ndef get_tup_min_len_with_empties(tup):\n    return min(len(tup[i]) for i in range(len(tup)))\ndef get_tup_max_len_with_empties(tup):\n    return max(len(tup[i]) for i in range(len(tup)))\ndef get_tup_len_with_empties(tup):\n    return get_tup_min_len_with_empties(tup) + get_tup_max_len_with_empties(tup)\ndef get_tup_len_with_empties_list(lst):\n    return [get_tup_len_with_empties(lst[i]) for i in range(len(lst))]\ndef get_tup_len_with_empties_tup(tup):\n    return get_tup_len_with_empties_list(tup)\ndef get_lst_max_len_with_empties(lst):\n    return max(get_tup_len_with_empties_list(lst[i]) for i in range(len(lst)))\ndef get_tup_max_len(tup):\n    return max(len(tup[i]) for i in range(len(tup)))\ndef get_tup_max_len_list(lst):\n    return [get_tup_max_len(lst[i]) for i in range(len(lst))]\ndef get_tup_max_len_tup(tup):\n    return get_tup_max_len_list(tup)\ndef get_lst_min_len(lst):\n    return min(len(lst[i]) for i in range(len(lst)))\ndef get_lst_min_len_list(lst):\n    return [get_lst_min_len(lst[i]) for i in range(len(lst))]\ndef get_lst_min_len_tup(tup):\n    return get_lst_min_len_list(tup)\ndef get_lst_max_len(lst):\n    return max(len(lst[i]) for i in range(len(lst)))\ndef get_lst_max_len_list(lst):\n    return [get_lst_max_len(lst[i]) for i in range(len(lst))]\ndef get_lst_max_len_tup(tup):\n    return get_lst_max_len_list(tup)\ndef get_lst_len(lst):\n    return len(lst)\ndef get_lst_len_list(lst):\n    return [get_lst_len(lst[i]) for i in range(len(lst))]\ndef get_lst_len_tup(tup):\n    return get_lst_len_list(tup)\ndef remove_tup_from_lst(lst,tup):\n    assert type(",
        "num_ids": 2006
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex) == 1:\n        return tuplex\n    else:\n        return tuplex[m]+tuplex[n]\n",
        "num_ids": 39
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    a=tuplex[m]\n    b=tuplex[n]\n    c=list(a)\n    c.insert(len(c)-1,b)\n    c=''.join(c)\n    return c\n",
        "num_ids": 57
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #if isinstance(tuplex, tuple):\n    #    return tuplex[m], tuplex[n]\n    #else:\n    return tuplex[m], tuplex[n]\n    \n",
        "num_ids": 54
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m-1:n]\ndef comma_tuple(tuplex,k,m):\n    '''\n    Write a function to get a comma of a tuple.\n    '''\n    return tuplex[k:m]\ndef main():\n    lst=input('Enter a list of tuples: ')\n    print(lst)\n    print(lst[0])\n    print(lst[1])\n    print(lst[2])\n    print(lst[3])\n    print(lst[4])\n    print(lst[5])\n    print(lst[6])\n    print(lst[7])\n    print(lst[8])\n    print(lst[9])\n    print(lst[10])\n    print(lst[11])\n    print(lst[12])\n    print(lst[13])\n    print(lst[14])\n    print(lst[15])\n    print(lst[16])\n    print(lst[17])\n    print(lst[18])\n    print(lst[19])\n    print(lst[20])\n    print(lst[21])\n    print(lst[22])\n    print(lst[23])\n    print(lst[24])\n    print(lst[25])\n    print(lst[26])\n    print(lst[27])\n    print(lst[28])\n    print(lst[29])\n    print(lst[30])\n    print(lst[31])\n    print(lst[32])\n    print(lst[33])\n    print(lst[34])\n    print(lst[35])\n    print(lst[36])\n    print(lst[37])\n    print(lst[38])\n    print(lst[39])\n    print(lst[40])\n    print(lst[41])\n    print(lst[42])\n    print(lst[43])\n    print(lst[44])\n    print(lst[45])\n    print(lst[46])\n    print(lst[47])\n    print(lst[48])\n    print(lst[49])\n    print(lst[50])\n    print(lst[51])\n    print(lst[52])\n    print(lst[53])\n    print(lst[54])\n    print(lst[55])\n    print(lst[56])\n    print(lst[57])\n    print(lst[58])\n    print(lst[59])\n    print(lst[60])\n    print(lst[61])\n    print(lst[62])\n    print(lst[63])\n    print(lst[64])\n    print(lst[65])\n    print(lst[66])\n    print(lst[67])\n    print(lst[68])\n    print(lst[69])\n    print(lst[70])\n    print(lst[71])\n    print(lst[72])\n    print(lst[73])\n    print(lst[74])\n    print(lst[75])\n    print(lst[76])\n    print(lst[77])\n    print(lst[78])\n    print(lst[79])\n    print(lst[80])\n    print(lst[81])\n    print(lst[82])\n    print(lst[83])\n    print(lst[84])\n    print(lst[85])\n    print(lst[86])\n    print(lst[87])\n    print(lst[88])\n    print(lst[89])\n    print(lst[90])\n    print(lst[91])\n    print(lst[92])\n    print(lst[93])\n    print(lst[94])\n    print(lst[95])\n    print(lst[96])\n    print(lst[97])\n    print(lst[98])\n    print(lst[99])\n    print(lst[100])\n    print(lst[101])\n    print(lst[102])\n    print(lst[103])\n    print(lst[104])\n    print(lst[105])\n    print(lst[106])\n    print(lst[107])\n    print(lst[108])\n    print(lst[109])\n    print(lst[110])\n    print(lst[111])\n    print(lst[112])\n    print(lst[113])\n    print(lst[114])\n    print(lst[115])\n    print(lst[116])\n    print(lst[117])\n    print(lst[118])\n    print(lst[119])\n    print(lst[120])\n    print(lst[121])\n    print(lst[122])\n    print(lst[123])\n    print(lst[124])\n    print(lst[125])\n    print(lst[126])\n    print(lst[127])\n    print(lst[128])\n    print(lst[129])\n    print(lst[130])\n    print(lst[131])\n    print(lst[132])\n    print(lst[133])\n    print(lst[134])\n    print(lst[135])\n    print(lst[136])\n    print(lst[137])\n    print(lst[138])\n    print(lst[139])\n    print(lst[140])\n    print(lst[141])\n    print(lst[142])\n    print(lst[143])\n    print(lst[144])\n    print(lst[145])\n    print(lst[146])\n    print(lst[147])\n    print(lst[148])\n    print(lst[149])\n    print(lst[150])\n    print(lst[151])\n    print(lst[152])\n    print(lst[153])\n    print(lst[154])\n    print(lst[155])\n    print(lst[156])\n    print(lst[157])\n    print(lst[158])\n    print(lst[159])\n    print(lst[160])\n    print(lst[161])\n    print(lst[162])\n    print(lst[163])\n    print(lst[164])\n    print(lst[165])\n    print(lst[166])\n    print(lst[167])\n    print(lst[168])\n    print(lst[169])\n    print(lst[170])\n    print(lst[171])\n    print(lst[172])\n    print(lst[173])\n    print(lst[174])\n    print(lst[175])\n    print(lst[176])\n    print(lst[177])\n    print(lst[178])\n    print(lst[179])\n    print(lst[180])\n    print(lst[181])\n    print(lst[182])\n    print(lst[183])\n    print(lst[184])\n    print(lst[185])\n    print(lst[186])\n    print(lst[187])\n    print(lst[188])\n    print(lst[189])\n    print(lst[190])\n    print(lst[191])\n    print(lst[192])\n    print(lst[193])\n    print(lst[194])\n    print(lst[195])\n    print(lst[196])\n    print(lst[197])\n    print(lst[198])\n    print(lst[199])\n    print(lst[200])\n    print(lst[201])\n    print(lst[202])\n    print(lst[203])\n    print(lst[204])\n    print(lst[205])\n    print(lst[206])\n    print(lst[207])\n    print(lst[208])\n    print(lst[209])\n    print(lst[210])\n    print(lst[211])\n    print(lst[212])\n",
        "num_ids": 1957
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    result = ''\n    for i in range(0,m):\n        result += tuplex[i]+':'\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m == 0:\n        return (tuplex[0],)\n    else:\n        return tuplex[:m] + (tuplex[m],) + colon_tuplex(tuplex,m-1,n-1)\ndef add_element(tuplex,lst):\n    '''\n    Write a function to add a list to a tuple.\n    '''\n    if len(tuplex) > len(lst):\n        return (tuplex[0],)+lst\n    elif len(lst) > len(tuplex):\n        return (tuplex[0],)+lst\n    else:\n        return tuplex[:len(lst)]+lst\ndef reverse_list(lst):\n    '''\n    Write a function to reverse a list.\n    '''\n    if len(lst) == 1:\n        return lst\n    else:\n        return reverse_list(lst[1:])+[lst[0]]\ndef count_digits(n):\n    '''\n    Write a function to count the number of digits in a number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 1 + count_digits(n/10)\ndef first_digit(n):\n    '''\n    Write a function to get the first digit of a number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n%10\ndef is_palindrome(n):\n    '''\n    Write a function to determine if a number is a palindrome.\n    '''\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    elif n > 0:\n        if n%10 == 0:\n            return is_palindrome(n/10)\n        else:\n            return n%10 == first_digit(n) and is_palindrome(n/10)\ndef is_prime(n):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n%2 == 0:\n        return False\n    elif n > 3:\n        if n%3 == 0:\n            return False\n        else:\n            return is_prime(n/3)\n    elif n%3 == 0:\n        return False\n    else:\n        return True\ndef swap_string(strx,i,j):\n    '''\n    Write a function to swap the characters of a string.\n    '''\n    if i > len(strx) or j > len(strx):\n        return\n    strx = strx[:i]+strx[j]+strx[i+1:j]+strx[i]+strx[j+1:]\n    return strx\ndef list_to_string(lst):\n    '''\n    Write a function to convert a list to a string.\n    '''\n    if len(lst) == 0:\n        return \"\"\n    else:\n        return str(lst[0]) + list_to_string(lst[1:])\ndef factorial(n):\n    '''\n    Write a function to find the factorial of a number.\n    '''\n    if n == 1:\n        return n\n    else:\n        return n*factorial(n-1)\ndef merge_sorted_list(lst1,lst2):\n    '''\n    Write a function to merge two sorted lists.\n    '''\n    if len(lst1) == 0:\n        return lst2\n    elif len(lst2) == 0:\n        return lst1\n    else:\n        if lst1[0] > lst2[0]:\n            return [lst2[0]] + merge_sorted_list(lst1,lst2[1:])\n        else:\n            return [lst1[0]] + merge_sorted_list(lst1[1:],lst2)\ndef count_vowels(strx):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    if len(strx) == 0:\n        return 0\n    else:\n        if strx[0] in 'aeiouAEIOU':\n            return 1 + count_vowels(strx[1:])\n        else:\n            return count_vowels(strx[1:])\ndef is_abecedarian(strx):\n    '''\n    Write a function to determine if a string is in alphabetical order.\n    '''\n    if len(strx) == 0:\n        return True\n    elif len(strx) == 1:\n        return True\n    else:\n        if strx[0] > strx[1]:\n            return False\n        else:\n            return is_abecedarian(strx[1:])\ndef reverse_tuple(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    if len(tuplex) == 0:\n        return tuplex\n    else:\n        return reverse_tuple(tuplex[1:]) + (tuplex[0],)\ndef search_list(lst,item):\n    '''\n    Write a function to search a list for an item.\n    '''\n    if len(lst) == 0:\n        return False\n    else:\n        if lst[0] == item:\n            return True\n        else:\n            return search_list(lst[1:],item)\ndef search_list_item_count(lst,item):\n    '''\n    Write a function to search a list for an item and return the count.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        if lst[0] == item:\n            return 1 + search_list_item_count(lst[1:],item)\n        else:\n            return search_list_item_count(lst[1:],item)\ndef search_list_max_item(lst):\n    '''\n    Write a function to search a list for the maximum item.\n    '''\n    if len(lst) == 0:\n        return None\n    else:\n        if lst[0] > search_list_max_item(lst[1:]):\n            return lst[0]\n        else:\n            return search_list_max_item(lst[1:])\ndef search_list_min_item(lst):\n    '''\n    Write a function to search a list for the minimum item.\n    '''\n    if len(lst) == 0:\n        return None\n    else:\n        if lst[0] < search_list_min_item(lst[1:]):\n            return lst[0]\n        else:\n            return search_list_min_item(lst[1:])\ndef search_list_median(lst):\n    '''\n    Write a function to search a list for the median item.\n    '''\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        if search_list_median(lst[:len(lst)/2]) > search_list_median(lst[len(lst)/2:]):\n            return search_list_median(lst[:len(lst)/2])\n        else:\n            return search_list_median(lst[len(lst)/2:])\ndef search_list_range(lst):\n    '''\n    Write a function to search a list for the range of items.\n    '''\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return (lst[0],lst[0])\n    else:\n        if search_list_range(lst[:len(lst)/2])[1] > search_list_range(lst[len(lst)/2:])[0]:\n            return search_list_range(lst[:len(lst)/2])\n        else:\n            return search_list_range(lst[len(lst)/2:])\ndef is_sorted",
        "num_ids": 140
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[:m] + (n,) + tuplex[m:]\ndef dot_product(u,v):\n    '''\n    Write a function to compute the dot product of two vectors.\n    '''\n    return sum(x*y for x,y in zip(u,v))\ndef convert_pig_latin(sentence):\n    '''\n    Write a function to convert sentence to pig latin.\n    '''\n    words = sentence.split()\n    pig_latin = []\n    for word in words:\n        if word[0] in 'aeiou':\n            pig_latin.append(word + 'yay')\n        else:\n            pig_latin.append(word[1:] + word[0] + 'ay')\n    return''.join(pig_latin)\ndef cigar_party(cigars, is_weekend):\n    '''\n    Write a function to check if a person can go to the party.\n    '''\n    return (cigars >= 40) and (is_weekend == False)\ndef count_binary_substrings(string):\n    '''\n    Write a function to compute the number of substrings that have\n      exactly K distinct characters\n    '''\n    if len(string) < 2:\n        return 0\n    substr_counts = {}\n    start = 0\n    curr_count = 0\n    for i, char in enumerate(string):\n        if char in substr_counts:\n            curr_count += 1\n        else:\n            if curr_count > 0:\n                substr_counts[string[start:i]] = curr_count\n            curr_count = 0\n            start = i\n    if curr_count > 0:\n        substr_counts[string[start:]] = curr_count\n    return sum([substr_counts[substr] for substr in substr_counts])\ndef divisible_by_ten(nums):\n    '''\n    Write a function to check if all the numbers in a list are divisible by 10\n    '''\n    return all([n % 10 == 0 for n in nums])\ndef get_ten_subtracted(n):\n    '''\n    Write a function to subtract 10 from a given number.\n    '''\n    return n - 10\ndef get_next_pos_neg(num_list, target):\n    '''\n    Write a function to get the first positive and first negative number in a list\n    '''\n    pos_idx, neg_idx = -1, -1\n    for i, num in enumerate(num_list):\n        if target - num > 0:\n            pos_idx = i\n        elif target - num < 0:\n            neg_idx = i\n    return (pos_idx, neg_idx)\ndef make_middle(str1, str2):\n    '''\n    Write a function to make a string of length 5 from another string.\n    '''\n    return str1[:2] + str2[2:] + str1[2:] + str2[:2]\ndef over_the_road(road, pos):\n    '''\n    Write a function to check if a vehicle on a road is over the crossroads.\n    '''\n    return road[pos] == '#'\ndef is_anagram(str1, str2):\n    '''\n    Write a function to check if a word is an anagram of another word.\n    '''\n    return sorted(str1) == sorted(str2)\ndef is_anagram_hash(str1, str2):\n    '''\n    Write a function to check if a word is an anagram of another word.\n    '''\n    str1, str2 = sorted(str1), sorted(str2)\n    return str1 == str2\ndef is_anagram_sort(str1, str2):\n    '''\n    Write a function to check if a word is an anagram of another word.\n    '''\n    return sorted(str1) == sorted(str2)\ndef is_anagram_sort_pythonic(str1, str2):\n    '''\n    Write a function to check if a word is an anagram of another word.\n    '''\n    return sorted(str1) == sorted(str2)\ndef is_anagram_dict(str1, str2):\n    '''\n    Write a function to check if a word is an anagram of another word.\n    '''\n    str1_counts, str2_counts = {}, {}\n    for char in str1:\n        if char in str1_counts:\n            str1_counts[char] += 1\n        else:\n            str1_counts[char] = 1\n    for char in str2:\n        if char in str2_counts:\n            str2_counts[char] += 1\n        else:\n            str2_counts[char] = 1\n    return str1_counts == str2_counts\ndef is_anagram_dict_pythonic(str1, str2):\n    '''\n    Write a function to check if a word is an anagram of another word.\n    '''\n    str1_counts = {}\n    for char in str1:\n        if char in str1_counts:\n            str1_counts[char] += 1\n        else:\n            str1_counts[char] = 1\n    str2_counts = {}\n    for char in str2:\n        if char in str2_counts:\n            str2_counts[char] += 1\n        else:\n            str2_counts[char] = 1\n    return str1_counts == str2_counts\ndef first_half(word):\n    '''\n    Write a function to get the first half of a word\n    '''\n    return word[:len(word)//2]\ndef first_half_pythonic(word):\n    '''\n    Write a function to get the first half of a word\n    '''\n    return word[:len(word)//2]\ndef first_half_dict(word):\n    '''\n    Write a function to get the first half of a word\n    '''\n    return {x: word.count(x) for x in word[:len(word)//2]}\ndef non_start(str1, str2):\n    '''\n    Write a function to check if a string is a non-start string of another string.\n    '''\n    return str1.startswith(str2)\ndef non_start_pythonic(str1, str2):\n    '''\n    Write a function to check if a string is a non-start string of another string.\n    '''\n    return str1.startswith(str2)\ndef non_start_dict(str1, str2):\n    '''\n    Write a function to check if a string is a non-start string of another string.\n    '''\n    return str1.startswith(str2)\ndef non_start_dict_pythonic(str1, str2):\n    '''\n    Write a function to check if a string is a non-start string of another string.\n    '''\n    return str1.startswith(str2)\ndef max_end3(nums):\n    '''\n    Write a function to get the maximum value at the end of a list of numbers.\n    '''\n    return max(nums[-3:])\ndef max_end3_pythonic(nums):\n    '''\n    Write a function to get the maximum value at the end of a list of numbers.\n    '''\n    return max(nums[-3:])\ndef over_limit(limit):\n    '''\n    Write a function to get the first value over a limit.\n    '''\n    return {x for x in range(limit)} - {x for x in range(limit - 10, limit)}\ndef over_limit_pythonic(limit):\n    '''\n    Write a function to get the first value over a limit.\n    '''\n    return {x for x in range(limit)} - {x for x in range(limit - 10, limit)}\ndef list_overlap(l1, l2):\n    '''\n    Write a function to check if two lists overlap.\n    '''\n    return len(set(l1).intersection(set(l2))) > 0\ndef list_overlap_pythonic(l1, l2)",
        "num_ids": 37
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    assert N <= len(nums1) * len(nums2)\n    nums1.sort()\n    nums2.sort(reverse=True)\n    max_p = 1\n    max_len = 1\n    res = []\n    for i in xrange(len(nums1)):\n        for j in xrange(len(nums2)):\n            if i * len(nums2) + j + 1 <= N:\n                prod = nums1[i] * nums2[j]\n                res.append(prod)\n                if prod > max_p:\n                    max_p = prod\n                    max_len = i + 1\n    return res[:max_len]\n",
        "num_ids": 169
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(N):\n        product = nums1[i]*nums2[i]\n        products.append(product)\n    return max(products)\n",
        "num_ids": 48
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    return [max(nums1)*max(nums2[:N]) for nums2 in nums2]\n",
        "num_ids": 30
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = 1\n    product = 1\n    \n    for i in range(N):\n        if nums1[i] >= nums2[i]:\n            product *= nums1[i]\n        else:\n            product *= nums2[i]\n        \n        if product > max_product:\n            max_product = product\n    \n    return max_product\n    \n    \n",
        "num_ids": 97
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N > len(nums1) or N > len(nums2):\n        return -1\n    products = []\n    for i in xrange(N):\n        products.append(nums1[i] * nums2[i])\n    return products\n",
        "num_ids": 65
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    products = []\n    for i in range(0, N):\n        products.append(max(nums1[i], nums2[i]))\n    return products\n",
        "num_ids": 68
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # product = 1\n    # for i in range(len(nums1)):\n    #     product *= nums1[i]\n    # for i in range(len(nums2)):\n    #     product *= nums2[i]\n    # return product\n",
        "num_ids": 69
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    results = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(str(num1)) + len(str(num2)) > N:\n                break\n            results.append(num1 * num2)\n    return results\n",
        "num_ids": 67
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) < N or len(nums2) < N:\n        return -1\n",
        "num_ids": 28
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return 0\n    if N > 0:\n        nums1.sort(reverse=True)\n        nums2.sort(reverse=True)\n        max_product = 0\n        for i in range(0, N):\n            max_product = max_product * nums1[i] * nums2[i]\n        return max_product\n",
        "num_ids": 105
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return \"The numbers are equal\"\n",
        "num_ids": 38
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    \n    if a>b:\n        return a\n    else:\n        return b\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    \n    if a<b:\n        return a\n    else:\n        return b\n        \n    \ndef remove_duplicate(a_list):\n    '''\n    Write a python function to remove duplicate elements from a list.\n    '''\n    \n    a_list_without_duplicates = []\n    \n    for element in a_list:\n        if element not in a_list_without_duplicates:\n            a_list_without_duplicates.append(element)\n    \n    return a_list_without_duplicates\n    \ndef power(a,b):\n    '''\n    Write a python function to find the power of a number.\n    '''\n    \n    result = 1\n    \n    for element in range(b):\n        result = result * a\n    \n    return result\n    \ndef check_anagram(a,b):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    \n    a = a.lower()\n    b = b.lower()\n    \n    if sorted(a) == sorted(b):\n        return True\n    else:\n        return False\n        \ndef check_pangram(a):\n    '''\n    Write a python function to check whether a string is a pangram or not.\n    '''\n    \n    a = a.lower()\n    a = a.replace(' ','')\n    \n    for element in range(97,123):\n        if chr(element) not in a:\n            return False\n    \n    return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1649
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n    \ndef minmax(x, y):\n    '''\n    Write a python function to find the minimum and maximum of two numbers.\n    '''\n    if x > y:\n        max = x\n        min = y\n    else:\n        max = y\n        min = x\n    return max, min\n    \n    \ndef mult(a,b):\n    '''\n    Write a python function to find the product of two numbers.\n    '''\n    prod = a*b\n    return prod\n    \ndef factors(x):\n    '''\n    Write a python function to find all factors of a number.\n    '''\n    factors = []\n    for i in range(1,x+1):\n        if x % i == 0:\n            factors.append(i)\n    return factors\n    \ndef is_even(x):\n    '''\n    Write a python function to check if a number is even or not.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n    \ndef fibonacci(n):\n    '''\n    Write a python function to find nth fibonacci term.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n        \ndef count(word, letter):\n    '''\n    Write a python function to count the number of occurances of a letter in a string.\n    '''\n    count = 0\n    for x in word:\n        if x == letter:\n            count += 1\n    return count\n    \ndef merge(a,b):\n    '''\n    Write a python function to merge two lists.\n    '''\n    merged = a + b\n    return merged\n    \ndef is_anagram(a,b):\n    '''\n    Write a python function to check whether two strings are anagram or not.\n    '''\n    if sorted(a) == sorted(b):\n        return True\n    else:\n        return False\n    \ndef to_power(a,b):\n    '''\n    Write a python function to compute the power of a number.\n    '''\n    power = 1\n    for i in range(b):\n        power = power * a\n    return power\n    \ndef is_pangram(text):\n    '''\n    Write a python function to check whether a string is pangram or not.\n    '''\n    for x in 'abcdefghijklmnopqrstuvwxyz':\n        if x not in text:\n            return False\n    return True\n    \ndef has_duplicates(list):\n    '''\n    Write a python function to check whether a list has duplicates or not.\n    '''\n    for x in list:\n        if list.count(x) > 1:\n            return True\n    return False\n    \ndef find_missing(list):\n    '''\n    Write a python function to find the missing element of a list.\n    '''\n    missing = []\n    for i in range(len(list)):\n        if list[i]!= i+1:\n            missing.append(i+1)\n    return missing\n    \ndef find_duplicates(list):\n    '''\n    Write a python function to find the duplicate element of a list.\n    '''\n    dup = []\n    for i in range(len(list)):\n        if list.count(i) > 1:\n            dup.append(i)\n    return dup\n    \ndef is_perfect(n):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    s = 0\n    for i in range(1,n):\n        if n % i == 0:\n            s += i\n    if s == n:\n        return True\n    else:\n        return False\n    \ndef find_perfect(list):\n    '''\n    Write a python function to find the perfect numbers in a list.\n    '''\n    perfect = []\n    for x in list:\n        if is_perfect(x):\n            perfect.append(x)\n    return perfect\n    \ndef is_odd(n):\n    '''\n    Write a python function to check whether a number is odd or not.\n    '''\n    if n % 2 == 1:\n        return True\n    else:\n        return False\n    \ndef is_positive(n):\n    '''\n    Write a python function to check whether a number is positive or not.\n    '''\n    if n > 0:\n        return True\n    else:\n        return False\n    \ndef is_even(n):\n    '''\n    Write a python function to check whether a number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n    \ndef is_negative(n):\n    '''\n    Write a python function to check whether a number is negative or not.\n    '''\n    if n < 0:\n        return True\n    else:\n        return False\n    \ndef is_perfect_square(n):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if n == int(n**0.5)**2:\n        return True\n    else:\n        return False\n    \ndef is_prime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n    return True\n    \ndef factorial(n):\n    '''\n    Write a python function to compute the factorial of a number.\n    '''\n    factorial = 1\n    if n == 0:\n        return 1\n    else:\n        for i in range(1,n+1):\n            factorial = factorial * i\n        return factorial\n    \ndef find_even(n):\n    '''\n    Write a python function to find all the even numbers in a range.\n    '''\n    even = []\n    for x in range(n):\n        if x % 2 == 0:\n            even.append(x)\n    return even\n    \ndef find_odd(n):\n    '''\n    Write a python function to find all the odd numbers in a range.\n    '''\n    odd = []\n    for x in range(n):\n        if x % 2!= 0:\n            odd.append(x)\n    return odd\n    \ndef find_multiple(n,m):\n    '''\n    Write a python function to find all the multiple of m in a range.\n    '''\n    multiple = []\n    for x in range(n):\n        if x % m == 0:\n            multiple.append(x)\n    return multiple\n    \ndef find_prime(n):\n    '''\n    Write a python function to find all the prime numbers in a range.\n    '''\n    prime = []\n    for x in range(n):\n        if is_prime(x) == True:\n            prime.append(x)\n    return prime\n    \ndef find_perfect_squares(n):\n    '''\n    Write a python function to find all the perfect squares in a range.\n    '''\n    perfect_squares = []\n    for x in range(n):\n        if is_perfect_square(x) == True:\n            perfect_squares.append(x)\n    return perfect_squares\n    \ndef find_perfect_squares_in_range(n):\n    '''\n    Write a python function to find all the perfect squares in a range.\n    '''\n    perfect_squares = []\n    for x in range(n):\n        if is_perfect_square(x) == True:\n            perfect_squares.append(x)\n    return perfect_squares\n    \ndef find_divisors(n):\n    '''\n    Write a python function to find all the divisors of a number.\n    '''\n    divisors = []\n    for i in range(1,n):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n    \ndef find_perfect_divisors(n):\n    '''\n    Write a python function to find all the perfec",
        "num_ids": 13
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \nprint maximum(5,7)\n",
        "num_ids": 31
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n        \nprint maximum(3,5)\nprint maximum(5,3)\nprint maximum(5,4)\n",
        "num_ids": 47
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \n",
        "num_ids": 23
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1[1:-1]\n    return tuple(str1.split(','))\n",
        "num_ids": 26
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n    pass\n",
        "num_ids": 13
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    list1 = []\n    for x in str1:\n        list1.append(x)\n    return tuple(list1)\n",
        "num_ids": 33
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str2 = str1\n    tuple2 = ()\n    for x in str2:\n        tuple2 = tuple2 + (x,)\n    return tuple2\n",
        "num_ids": 41
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    result = []\n    for c in str1:\n        result.append(c)\n    return tuple(result)\n",
        "num_ids": 30
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n: \n        n ^= n & n - 1\n        return n\n",
        "num_ids": 22
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n & (n - 1) == 0:\n        return n\n    return n & (n - 1)\n",
        "num_ids": 29
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = n & (n - 1)\n    return n\n",
        "num_ids": 17
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # To get the bitwise right shift operator. \n    return n << 1 | 1\n",
        "num_ids": 23
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n &= ~(n & n - 1)\n    return n\n    \ndef set_right_most_unset_bit(n): \n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    n |= (1 << (len(bin(n)) - 2))\n    return n\n    \ndef has_perfect_binary(n): \n    '''\n    Write a python function to check if n is a perfect binary number.\n    '''\n    s = str(bin(n))\n    for i in range(2,len(s)):\n        if s[i] == '0':\n            return False\n    return True\n    \ndef get_perfect_binary_count(n): \n    '''\n    Write a python function to count the number of perfect binary numbers from 1 to n.\n    '''\n    count = 0\n    for i in range(1,n):\n        if has_perfect_binary(i):\n            count += 1\n    return count\n    \ndef get_prime_numbers(n): \n    '''\n    Write a python function to find all the prime numbers from 1 to n.\n    '''\n    primes = []\n    n += 1\n    for i in range(2,n):\n        is_prime = True\n        for j in range(2,i):\n            if i % j == 0:\n                is_prime = False\n        if is_prime:\n            primes.append(i)\n    return primes\n    \ndef get_perfect_binary_primes(n): \n    '''\n    Write a python function to find all the perfect binary numbers from 1 to n.\n    '''\n    primes = []\n    for i in range(1,n):\n        if has_perfect_binary(i):\n            primes.append(i)\n    return primes\n    \ndef get_perfect_binary_factors(n): \n    '''\n    Write a python function to find all the perfect binary factors of n.\n    '''\n    factors = []\n    for i in get_perfect_binary_primes(n):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n    \ndef is_power_of_two(n): \n    '''\n    Write a python function to check if n is a power of two.\n    '''\n    return n!= 0 and (n & (n - 1)) == 0\n    \ndef get_power_of_two(n): \n    '''\n    Write a python function to find the power of two for a given number.\n    '''\n    if is_power_of_two(n):\n        return n\n    else:\n        return get_power_of_two(n & n - 1)\n        \ndef get_factors(n): \n    '''\n    Write a python function to find all the factors of n.\n    '''\n    factors = []\n    for i in get_perfect_binary_primes(n):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n    \ndef is_prime(n): \n    '''\n    Write a python function to check if n is a prime number.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3,int(sqrt(n)) + 1,2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef get_prime_factors(n): \n    '''\n    Write a python function to find all the prime factors of n.\n    '''\n    factors = []\n    for i in range(1,n):\n        if n % i == 0 and is_prime(i):\n            factors.append(i)\n    return factors\n    \ndef get_perfect_power_of_two(n): \n    '''\n    Write a python function to find the perfect power of two for a given number.\n    '''\n    p = get_power_of_two(n)\n    factors = get_factors(p)\n    if len(factors) > 1:\n        return False\n    if len(factors) == 1:\n        return True\n    return False\n    \ndef get_perfect_power_of_two_factors(n): \n    '''\n    Write a python function to find the factors of the perfect power of two for a given number.\n    '''\n    factors = []\n    if not get_perfect_power_of_two(n):\n        return factors\n    p = get_power_of_two(n)\n    factors = get_prime_factors(p)\n    return factors\n    \ndef has_unique_factors(n): \n    '''\n    Write a python function to check if n has unique factors.\n    '''\n    factors = get_factors(n)\n    if len(factors) == len(set(factors)):\n        return True\n    else:\n        return False\n    \ndef is_abundant_number(n): \n    '''\n    Write a python function to check if n is an abundant number.\n    '''\n    if n < 12:\n        return False\n    if n == 12:\n        return True\n    if n % 12 == 0:\n        return False\n    factors = get_factors(n)\n    if sum(factors) > n:\n        return True\n    else:\n        return False\n    \ndef get_abundant_numbers(n): \n    '''\n    Write a python function to find all the abundant numbers upto n.\n    '''\n    abundant_numbers = []\n    for i in range(1,n):\n        if is_abundant_number(i):\n            abundant_numbers.append(i)\n    return abundant_numbers\n    \ndef get_all_perfect_squares(n): \n    '''\n    Write a python function to find all the perfect squares upto n.\n    '''\n    perfect_squares = []\n    for i in range(1,n):\n        perfect_squares.append(i**2)\n    return perfect_squares\n    \ndef get_all_perfect_cubes(n): \n    '''\n    Write a python function to find all the perfect cubes upto n.\n    '''\n    perfect_cubes = []\n    for i in range(1,n):\n        perfect_cubes.append(i**3)\n    return perfect_cubes\n    \ndef is_perfect_cube(n): \n    '''\n    Write a python function to check if n is a perfect cube.\n    '''\n    if n == (n**(1/3))**3:\n        return True\n    else:\n        return False\n    \ndef get_perfect_cubes_upto(n): \n    '''\n    Write a python function to find all the perfect cubes upto n.\n    '''\n    perfect_cubes = []\n    for i in range(1,n):\n        if is_perfect_cube(i):\n            perfect_cubes.append(i)\n    return perfect_cubes\n    \ndef get_perfect_cubes_from(n): \n    '''\n    Write a python function to find all the perfect cubes from n.\n    '''\n    perfect_cubes = []\n    for i in range(n+1,(n**(1/3))**3+1):\n        if is_perfect_cube(i):\n            perfect_cubes.append(i)\n    return perfect_cubes\n    \ndef get_prime_factors_upto(n): \n    '''\n    Write a python function to find all the prime factors upto n.\n    '''\n    prime_factors = []\n    for i in range(1,n+1):\n        if is_prime(i):\n            prime_factors.append(i)\n    return prime_factors\n    \ndef get_prime_factors_from(n): \n    '''\n    Write a python function to find all the prime factors from n.\n    '''\n    prime_factors = []\n    for i in range(n+1,(n**(1/3))**3+1):\n        if is_prime(i):\n            prime_factors.append(i)\n    return prime_factor",
        "num_ids": 59
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n &= ~(n & (n-1))\n    return n\n",
        "num_ids": 20
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    a = n\n    while a & 1 == 0:\n        a >>= 1\n    return a\n",
        "num_ids": 26
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # find the rightmost unset bit\n    t = 0\n    bit = 1\n    while bit <= n:\n        bit = bit << 1\n    bit >>= 1\n    t = (n & (~bit)) \n    return t\ndef count_bits(n):\n    '''\n    Write a python function to count the number of bits in a non negative integer\n    '''\n    # count the number of 1s in the number\n    # divide the number by 2 and find out the count of 1s\n    # find the count of 1s and multiply it by 2\n    count = 0\n    while n:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n    return count\ndef print_binary_number(n):\n    '''\n    Write a python function to print a binary number.\n    '''\n    bin_num = ''\n    while n:\n        bin_num = str(n % 2) + bin_num\n        n = n >> 1\n    return bin_num\ndef insert_number(n):\n    '''\n    Write a python function to insert a number at a specific index.\n    '''\n    # convert the number to binary\n    bin_num = ''\n    while n:\n        bin_num = str(n % 2) + bin_num\n        n = n >> 1\n    return bin_num\ndef swap_bits(n, i, j):\n    '''\n    Write a python function to swap two bits.\n    '''\n    # perform the swap\n    n = n ^ (1 << i) | (1 << j)\n    return n\ndef count_set_bits(n):\n    '''\n    Write a python function to count the number of set bits in an integer.\n    '''\n    # count the number of set bits in the number\n    # divide the number by 2 and find out the count of 1s\n    # find the count of 1s and multiply it by 2\n    count = 0\n    while n:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n    return count\ndef power_of_two(n):\n    '''\n    Write a python function to check if a number is power of two\n    '''\n    # check if the number is power of 2\n    # divide the number by 2 and find out the count of 1s\n    # find the count of 1s and multiply it by 2\n    if n == 1:\n        return True\n    elif n == 0:\n        return False\n    elif n & (n-1)!= 0:\n        return False\n    return True\ndef bit_count(n):\n    '''\n    Write a python function to count the number of bits in a non negative integer\n    '''\n    # count the number of 1s in the number\n    # divide the number by 2 and find out the count of 1s\n    # find the count of 1s and multiply it by 2\n    count = 0\n    while n:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n    return count\ndef right_shift(n, i):\n    '''\n    Write a python function to right shift a number by i bits\n    '''\n    # perform the right shift\n    n = (n % (1 << i)) >> i\n    return n\ndef left_shift(n, i):\n    '''\n    Write a python function to left shift a number by i bits\n    '''\n    # perform the left shift\n    n = n << i\n    return n\ndef is_power_of_2(n):\n    '''\n    Write a python function to check if a number is power of 2\n    '''\n    # check if the number is power of 2\n    # divide the number by 2 and find out the count of 1s\n    # find the count of 1s and multiply it by 2\n    if n == 1:\n        return True\n    elif n == 0:\n        return False\n    elif n & (n-1)!= 0:\n        return False\n    return True\ndef is_power_of_2_2(n):\n    '''\n    Write a python function to check if a number is power of 2\n    '''\n    # check if the number is power of 2\n    # divide the number by 2 and find out the count of 1s\n    # find the count of 1s and multiply it by 2\n    if n == 1:\n        return True\n    elif n == 0:\n        return False\n    elif n & (n-1)!= 0:\n        return False\n    t = (n & (n-1))\n    return t == 0\ndef is_power_of_2_3(n):\n    '''\n    Write a python function to check if a number is power of 2\n    '''\n    # check if the number is power of 2\n    # divide the number by 2 and find out the count of 1s\n    # find the count of 1s and multiply it by 2\n    if n == 1:\n        return True\n    elif n == 0:\n        return False\n    elif n & (n-1)!= 0:\n        return False\n    t = n & -n\n    return t == n\ndef is_power_of_2_4(n):\n    '''\n    Write a python function to check if a number is power of 2\n    '''\n    # check if the number is power of 2\n    # divide the number by 2 and find out the count of 1s\n    # find the count of 1s and multiply it by 2\n    if n == 1:\n        return True\n    elif n == 0:\n        return False\n    elif n & (n-1)!= 0:\n        return False\n    t = (n & (n-1))\n    return t == 0\ndef is_power_of_2_5(n):\n    '''\n    Write a python function to check if a number is power of 2\n    '''\n    # check if the number is power of 2\n    # divide the number by 2 and find out the count of 1s\n    # find the count of 1s and multiply it by 2\n    if n == 1:\n        return True\n    elif n == 0:\n        return False\n    elif n & (n-1)!= 0:\n        return False\n    t = n & -n\n    return t == n\ndef is_power_of_2_6(n):\n    '''\n    Write a python function to check if a number is power of 2\n    '''\n    # check if the number is power of 2\n    # divide the number by 2 and find out the count of 1s\n    # find the count of 1s and multiply it by 2\n    if n == 1:\n        return True\n    elif n == 0:\n        return False\n    elif n & (n-1)!= 0:\n        return False\n    t = n & -n\n    return t == n\ndef is_power_of_2_7(n):\n    '''\n    Write a python function to check if a number is power of 2\n    '''\n    # check if the number is power of 2\n    # divide the number by 2 and find out the count of 1s\n    # find the count of 1s and multiply it by 2\n    if n == 1:\n        return True\n    elif n == 0:\n        return False\n    elif n & (n-1)!= 0:\n        return False\n    t = n & -n\n    return t == n\ndef is_power_of_2_8(n):\n    '''\n    Write a python function to check if a number is power of 2\n    '''\n    # check if the number is power of 2\n    # divide the number by 2 and find out the count of 1s\n    # find the count of 1s and multiply it by 2\n    if n == 1:\n        return True\n    elif n == 0:\n        return False\n    elif n & (n-1)!= 0:\n        return False\n    t = n & -n\n    return t == n\ndef is_power_of_2_9(n):\n    '''\n    Write a python function to check if a number is power of 2\n    '''\n    # check if the number is power of 2\n    # divide the number by 2 and find out the count of 1s\n    # find the count of 1s and multiply it by 2\n    if n == 1:\n        return True\n    elif n == 0:\n        return False\n    elif n & (n-1)!= 0:\n        return False\n    t = n & -n",
        "num_ids": 91
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return 1\n    return n & (n - 1)\n",
        "num_ids": 23
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # use n & (n-1) to find the left most unset bit.\n    # a = 0b1111101\n    # print(bin(a & (a-1)))\n    # # 0b11111001\n    # print(bin(a & (a-1))[2:])\n    # # [2:] get rid of the leading '0b'\n    # print(bin(a & (a-1))[2:][::-1])\n    # # [::-1] reverse the string\n    # print(bin(n & (n-1))[2:][::-1])\n    # # [2:] get rid of the leading '0b'\n    # # [::-1] reverse the string\n    # # print(bin(n & (n-1)))\n    return (n & (n-1)) >> 1\n",
        "num_ids": 199
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi=3.1415\n    return pi*r*r*h/3\n",
        "num_ids": 22
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*r**2*h\n    \n    \ndef prime(n):\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n            \n    return True\n            \n",
        "num_ids": 61
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r*r*h/3.0\n",
        "num_ids": 18
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3) * math.pi * (r**2) * h\n",
        "num_ids": 22
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * r**2 * h / 3\n    print(\"Volume of cone with radius r = %.2f is %.2f\" % (r, v))\n    return v\n    \ndef volume_prism(l,b,h):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    v = l * b * h\n    print(\"Volume of prism with length l = %.2f and width b = %.2f and height h = %.2f is %.2f\" % (l, b, h, v))\n    return v\n    \ndef area_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle\n    '''\n    s = (a + b + c)/2\n    print(\"Area of triangle with sides %.2f, %.2f, %.2f is %.2f\" % (a, b, c, (s*(s-a)*(s-b)*(s-c))**0.5))\n    return (s*(s-a)*(s-b)*(s-c))**0.5\n    \ndef area_rectangle(l,w):\n    '''\n    Write a function to find the area of a rectangle\n    '''\n    print(\"Area of rectangle with length %.2f and width %.2f is %.2f\" % (l,w,l*w))\n    return l*w\n    \ndef area_trapezoid(a,b,c,d):\n    '''\n    Write a function to find the area of a trapezoid\n    '''\n    print(\"Area of a trapezoid with area a = %.2f, b = %.2f, c = %.2f, d = %.2f is %.2f\" % (a,b,c,d,(a+b+c+d)/2))\n    return (a+b+c+d)/2\n    \ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    print(\"Area of circle with radius r = %.2f is %.2f\" % (r, math.pi*r**2))\n    return math.pi*r**2\n    \ndef area_sphere(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    print(\"Area of sphere with radius r = %.2f is %.2f\" % (r, 4*math.pi*r**2/3))\n    return 4*math.pi*r**2/3\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    print(\"Volume of cylinder with radius r = %.2f and height h = %.2f is %.2f\" % (r,h,math.pi*r**2*h/3))\n    return math.pi*r**2*h/3\n    \ndef area_prism_2(l,b,h):\n    '''\n    Write a function to find the area of a prism.\n    '''\n    print(\"Area of prism with length l = %.2f and width b = %.2f and height h = %.2f is %.2f\" % (l,b,h,l*b*h))\n    return l*b*h\n    \ndef area_square(l,w):\n    '''\n    Write a function to find the area of a square.\n    '''\n    print(\"Area of square with side l = %.2f and width w = %.2f is %.2f\" % (l,w,l*w))\n    return l*w\n    \ndef area_parallelogram(b,h):\n    '''\n    Write a function to find the area of a square.\n    '''\n    print(\"Area of a parallelogram with base b = %.2f and height h = %.2f is %.2f\" % (b,h,b*h))\n    return b*h\n    \ndef area_triangle_2(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    print(\"Area of a triangle with sides %.2f, %.2f, %.2f is %.2f\" % (a,b,c,0.5*a*b))\n    return 0.5*a*b\n    \ndef area_rectangle_2(l,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(\"Area of rectangle with length %.2f and width %.2f is %.2f\" % (l,w,l*w))\n    return l*w\n    \ndef area_trapezoid_2(a,b,c,d):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    print(\"Area of a trapezoid with area a = %.2f, b = %.2f, c = %.2f, d = %.2f is %.2f\" % (a,b,c,d,0.5*(a+b+c+d)))\n    return 0.5*(a+b+c+d)\n    \ndef area_circle_2(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    print(\"Area of circle with radius r = %.2f is %.2f\" % (r, math.pi*r**2))\n    return math.pi*r**2\n    \ndef volume_cylinder_2(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    print(\"Volume of cylinder with radius r = %.2f and height h = %.2f is %.2f\" % (r,h,math.pi*r**2*h/3))\n    return math.pi*r**2*h/3\n    \ndef area_prism_3(l,b,h):\n    '''\n    Write a function to find the area of a prism.\n    '''\n    print(\"Area of prism with length l = %.2f and width b = %.2f and height h = %.2f is %.2f\" % (l,b,h,l*b*h))\n    return l*b*h\n    \ndef area_square_3(l,w):\n    '''\n    Write a function to find the area of a square.\n    '''\n    print(\"Area of square with side l = %.2f and width w = %.2f is %.2f\" % (l,w,l*w))\n    return l*w\n    \ndef area_parallelogram_3(b,h):\n    '''\n    Write a function to find the area of a square.\n    '''\n    print(\"Area of a parallelogram with base b = %.2f and height h = %.2f is %.2f\" % (b,h,b*h))\n    return b*h\n    \ndef area_triangle_3(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    print(\"Area of a triangle with sides %.2f, %.2f, %.2f is %.2f\" % (a,b,c,0.5*a*b))\n    return 0.5*a*b\n    \ndef area_rectangle_3(l,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(\"Area of rectangle with length %.2f and width %.2f is %.2f\" % (l,w,l*w))\n    return l*w\n    \ndef area_trapezoid_3(a,b,c,d):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    print(\"Area of a trapezoid with area a = %.2f, b = %.2f, c = %.2f, d = %.2f is %.2f\" % (a,b,c,d,0.5*(a+b+c+d)))\n    return 0.5*(a+b+c+d)\n    \ndef area_circl",
        "num_ids": 94
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*(r**2)*(h**2)/3\n",
        "num_ids": 20
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = (1/3.0)*math.pi*math.pow(r,2)*h\n    return v\n",
        "num_ids": 31
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*(math.pi)*(r**2)*(h)\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (1/3)*(math.pi)*(r**2)*(h)\n",
        "num_ids": 23
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #if h<=r:\n    #    return math.pi*r**2*h/3\n    #else:\n    #    return math.pi*r**2*h/3+math.pi*(r**2-h**2)\n    return math.pi*r**2*h/3+math.pi*(r**2-h**2)\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\ndef surface_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r**2*h\ndef surface_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return math.pi*r**2+2*math.pi*r*h\ndef volume_spherical_shell(r,h):\n    '''\n    Write a function to find the volume of a spherical shell.\n    '''\n    return 4/3*math.pi*(r**2+r*h+h**2)\ndef surface_spherical_shell(r,h):\n    '''\n    Write a function to find the surface area of a spherical shell.\n    '''\n    return 4*math.pi*(r+h)\ndef volume_torus(r,h):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    return 2*math.pi*r*h\ndef surface_torus(r,h):\n    '''\n    Write a function to find the surface area of a torus.\n    '''\n    return 2*math.pi*(r+h)\ndef volume_parallelepiped(l,w,h):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    return l*w*h\ndef surface_parallelepiped(l,w,h):\n    '''\n    Write a function to find the surface area of a parallelepiped.\n    '''\n    return 4*l*w+2*l*h+2*w*h\ndef volume_cone_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone and a sphere.\n    '''\n    return volume_cone(r,h) + volume_sphere(r)\ndef surface_cone_sphere(r,h):\n    '''\n    Write a function to find the surface area of a cone and a sphere.\n    '''\n    return surface_cone(r,h)+surface_sphere(r)\ndef volume_cylinder_sphere(r,h):\n    '''\n    Write a function to find the volume of a cylinder and a sphere.\n    '''\n    return volume_cylinder(r,h)+volume_sphere(r)\ndef surface_cylinder_sphere(r,h):\n    '''\n    Write a function to find the surface area of a cylinder and a sphere.\n    '''\n    return surface_cylinder(r,h)+surface_sphere(r)\ndef volume_spherical_shell_sphere(r,h):\n    '''\n    Write a function to find the volume of a spherical shell and a sphere.\n    '''\n    return volume_spherical_shell(r,h)+volume_sphere(r)\ndef surface_spherical_shell_sphere(r,h):\n    '''\n    Write a function to find the surface area of a spherical shell and a sphere.\n    '''\n    return surface_spherical_shell(r,h)+surface_sphere(r)\ndef volume_torus_sphere(r,h):\n    '''\n    Write a function to find the volume of a torus and a sphere.\n    '''\n    return volume_torus(r,h)+volume_sphere(r)\ndef surface_torus_sphere(r,h):\n    '''\n    Write a function to find the surface area of a torus and a sphere.\n    '''\n    return surface_torus(r,h)+surface_sphere(r)\ndef volume_cone_torus(r,h):\n    '''\n    Write a function to find the volume of a cone and a torus.\n    '''\n    return volume_cone(r,h)+volume_torus(r,h)\ndef surface_cone_torus(r,h):\n    '''\n    Write a function to find the surface area of a cone and a torus.\n    '''\n    return surface_cone(r,h)+surface_torus(r,h)\ndef volume_cone_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cone and a cylinder.\n    '''\n    return volume_cone(r,h)+volume_cylinder(r,h)\ndef surface_cone_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cone and a cylinder.\n    '''\n    return surface_cone(r,h)+surface_cylinder(r,h)\ndef volume_cone_spherical_shell(r,h):\n    '''\n    Write a function to find the volume of a cone and a spherical shell.\n    '''\n    return volume_cone(r,h)+volume_spherical_shell(r,h)\ndef surface_cone_spherical_shell(r,h):\n    '''\n    Write a function to find the surface area of a cone and a spherical shell.\n    '''\n    return surface_cone(r,h)+surface_spherical_shell(r,h)\ndef volume_cylinder_spherical_shell(r,h):\n    '''\n    Write a function to find the volume of a cylinder and a spherical shell.\n    '''\n    return volume_cylinder(r,h)+volume_spherical_shell(r,h)\ndef surface_cylinder_spherical_shell(r,h):\n    '''\n    Write a function to find the surface area of a cylinder and a spherical shell.\n    '''\n    return surface_cylinder(r,h)+surface_spherical_shell(r,h)\ndef volume_cone_spherical_shell(r,h):\n    '''\n    Write a function to find the volume of a cone and a spherical shell.\n    '''\n    return volume_cone(r,h)+volume_spherical_shell(r,h)\ndef surface_cone_spherical_shell(r,h):\n    '''\n    Write a function to find the surface area of a cone and a spherical shell.\n    '''\n    return surface_cone(r,h)+surface_spherical_shell(r,h)\ndef volume_torus_cylinder(r,h):\n    '''\n    Write a function to find the volume of a torus and a cylinder.\n    '''\n    return volume_torus(r,h)+volume_cylinder(r,h)\ndef surface_torus_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a torus and a cylinder.\n    '''\n    return surface_torus(r,h)+surface_cylinder(r,h)\ndef volume_torus_sphere(r,h):\n    '''\n    Write a function to find the volume of a torus and a sphere.\n    '''\n    return volume_torus(r,h)+volume_sphere(r)\ndef surface_torus_sphere(r,h):\n    '''\n    Write a function to find the surface area of a torus and a sphere.\n    '''\n    return surface_torus(r,h)+surface_sphere(r)\ndef volume_torus_cone(r,h):\n    '''\n    Write a function to find the volume of a torus and a cone.\n    '''\n    return volume_torus(r,h)+volume_cone(r,h)\ndef surface_torus_cone(r,h):\n    '''\n    Write a function to find the surface area of a torus and a cone.\n    '''\n    return surface_torus(r,h)+surface_cone(r,",
        "num_ids": 19
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * (r**2) * h\n    return volume\n",
        "num_ids": 27
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return int(log(n,2))+1\n",
        "num_ids": 15
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    if n <= 1:\n        return 0\n    \n    while n!= 1:\n        if n & 1:\n            n = n * 3 + 1\n        else:\n            n >>= 1\n    \n    return n\n    \n",
        "num_ids": 59
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    assert isinstance(n, int) and n >= 0, 'n must be a non-negative integer'\n    p = 1\n    while p <= n: \n        p *= 2\n    return p // 2\n",
        "num_ids": 52
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max_exponent = 0\n    while n > 0:\n        n = n // 2\n        max_exponent = max_exponent + 1\n",
        "num_ids": 37
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    #num_of_bits = 0\n    #while True:\n    #    if 2**num_of_bits > n:\n    #        break\n    #    else:\n    #        num_of_bits += 1\n    #return num_of_bits - 1\n    return len(bin(n)[2:]) - 1\n",
        "num_ids": 80
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # HINT: use n&(n-1) to find the highest power of 2 that is less than n\n    power = 0\n    while(n>=2**power):\n        power = power+1\n    return power\n    \n    \nprint(highest_Power_of_2(32))\nprint(highest_Power_of_2(8))\nprint(highest_Power_of_2(14))\nprint(highest_Power_of_2(0))\nprint(highest_Power_of_2(1))\nprint(highest_Power_of_2(2))\nprint(highest_Power_of_2(5))\nprint(highest_Power_of_2(10))\nprint(highest_Power_of_2(20))\n",
        "num_ids": 176
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while (1 << power) <= n:\n        power += 1\n    return power - 1\n",
        "num_ids": 29
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    pow_of_2 = 1\n    while pow_of_2 <= n:\n        pow_of_2 = pow_of_2 * 2\n    return pow_of_2\n",
        "num_ids": 47
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    Pow = 1\n    while(Pow < n):\n        Pow = Pow * 2\n    return Pow\n",
        "num_ids": 29
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    p = 1\n    while (p < n):\n        p *= 2\n    return p\n",
        "num_ids": 25
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    lucas_nums = [2,1]\n    for i in range(2, n):\n        lucas_nums.append(lucas_nums[-2] + lucas_nums[-1])\n    return lucas_nums[-1]\n",
        "num_ids": 92
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return find_lucas(n-1) + find_lucas(n-2)\n",
        "num_ids": 26
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return find_lucas(n/2) + find_lucas(n/2)\n    else:\n        return find_lucas(n-1) + find_lucas(n-1)\n",
        "num_ids": 85
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return (find_lucas(n - 1) + find_lucas(n - 2))\n",
        "num_ids": 54
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return find_lucas(n/2) + find_lucas(n/2)\n    else:\n        return find_lucas((n-1)/2) + find_lucas((n-1)/2) + find_lucas((n+1)/2)\n",
        "num_ids": 102
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "num_ids": 53
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return (find_lucas(n-1) + find_lucas(n-2)) % 10\n",
        "num_ids": 56
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n    \ndef find_fibonacci(n):\n    '''\n    Write a function to find then'th fibonacci number.\n    '''\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return find_fibonacci(n - 1) + find_fibonacci(n - 2)\n",
        "num_ids": 47
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "num_ids": 53
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = [1, 2]\n    for i in range(2, n):\n        lucas.append(lucas[i - 2] + lucas[i - 1])\n    return lucas[n - 1]\n",
        "num_ids": 58
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % list_[i]\n    return list_\n",
        "num_ids": 35
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]\n",
        "num_ids": 18
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n",
        "num_ids": 37
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = [string % elem for elem in list_]\n    return list_\n",
        "num_ids": 24
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]\n",
        "num_ids": 20
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string % elem for elem in list_]\n",
        "num_ids": 17
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n    \ndef add_string(list_, string):\n    '''\n    Write a function to apply a given forma",
        "num_ids": 12
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    str_ = '%'\n    for i, item in enumerate(list_):\n        list_[i] = string % item\n    return list_\n",
        "num_ids": 39
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]\n",
        "num_ids": 18
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for index, element in enumerate(list_):\n        list_[index] = string % element\n    return list_\n",
        "num_ids": 31
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {l1[i]: {l2[i]: {l3[i]: l3[i+1]}}}\n",
        "num_ids": 31
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1, l2, l3 = set(l1), set(l2), set(l3)\n    d = {}\n    for i in l1:\n        d[i] = {}\n    for i in l2:\n        d[i]['email'] = {}\n    for i in l3:\n        d[i]['email']['current'] = i\n        d[i]['email']['previous'] = i\n    return d\n",
        "num_ids": 111
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    for i in range(len(l1)):\n        dictionary[l1[i]] = l2[i]\n        dictionary[l1[i]+l3[i]] = l3[i]\n    return dictionary\n",
        "num_ids": 62
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # nested dict\n    dict1 = {}\n    dict2 = {}\n    dict3 = {}\n    # if more than one list\n    if len(l1) > 0:\n        for i in l1:\n            dict1[i[0]] = [i[1], i[2], i[3]]\n    if len(l2) > 0:\n        for i in l2:\n            dict2[i[0]] = [i[1], i[2], i[3]]\n    if len(l3) > 0:\n        for i in l3:\n            dict3[i[0]] = [i[1], i[2], i[3]]\n    return [dict1, dict2, dict3]\n",
        "num_ids": 172
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {l1[i]:{l2[i]:l3[i]} for i in range(len(l1))}\n",
        "num_ids": 33
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create new list to store each list's index\n    l1_index = [i for i in range(len(l1))]\n    # create new list to store each list's value\n    l2_value = [l2[i] for i in range(len(l2))]\n    # create new list to store each list's key\n    l3_key = [l3[i] for i in range(len(l3))]\n    # create nested dictionary\n    return {l3_key[i]: {l1_index[i]: l2_value[i]} for i in range(len(l3))}\n",
        "num_ids": 149
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {l1[i]: {l2[i]: {l3[i]: l3[i+1] for i in range(0, len(l3), 2)}} for i in range(0, len(l1), 2)}\n",
        "num_ids": 59
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1 = zip(l1, l2, l3)\n    return dict(l1)\n",
        "num_ids": 26
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1 = [i for i in l1]\n    l2 = [i for i in l2]\n    l3 = [i for i in l3]\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = {l2[i]: l3[i]}\n    return d\n",
        "num_ids": 84
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return [{l1[i]:l2[i], l3[i]:l3[i+1]} for i in range(0,len(l1),2)]\n",
        "num_ids": 43
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if (n == 1):\n        return 1\n    elif (n % 2 == 0):\n        return max(n // 2, get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))\n    elif (n % 3 == 0):\n        return max(n // 3, get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))\n    elif (n % 4 == 0):\n        return max(n // 4, get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))\n    elif (n % 5 == 0):\n        return max(n // 5, get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))\n    else:\n        return n\n",
        "num_ids": 274
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return max(n/2, n/3, n/4, n/5) + n\n",
        "num_ids": 25
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return get_max_sum (n/2) + get_max_sum (n/3) + get_max_sum (n/4) + get_max_sum (n/5)\n    else:\n        return get_max_sum (n/2) + get_max_sum (n/3) + get_max_sum (n/4) + get_max_sum (n/5) + 1\n",
        "num_ids": 121
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    n = int(n)\n    max_sum = 0\n    while n > 0:\n        max_sum += max(n % 4, n % 3, n % 2, n)\n        n = n // 4\n    return max_sum\n",
        "num_ids": 59
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max(n, n/2 + get_max_sum (n/2), n/3 + get_max_sum (n/3), n/4 + get_max_sum (n/4), n/5 + get_max_sum (n/5))\n",
        "num_ids": 92
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    elif n == 2:\n        return n + 1\n    else:\n        return max(n + get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n",
        "num_ids": 83
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    f = [0 for _ in range(n + 1)]\n    f[1] = 0\n    for i in range(2, n + 1):\n        f[i] = max(f[i - 2] + i, i)\n        \n    return max(f)\n",
        "num_ids": 67
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    for i in range(1, n+1):\n        temp_sum = max(i / 2, i / 3, i / 4, i / 5)\n        max_sum = max(temp_sum, max_sum)\n    return max_sum\n",
        "num_ids": 68
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    else:\n        return max(get_max_sum(n/2)+get_max_sum(n/3)+get_max_sum(n/4)+get_max_sum(n/5),n)\n",
        "num_ids": 75
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    else:\n        return get_max_sum(n-1) + get_max_sum(n+1) + get_max_sum(n*2) + get_max_sum(n*3) + get_max_sum(n*4) + get_max_sum(n*5)\n",
        "num_ids": 141
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length = len(input_list)\n    max_length = 0\n    max_length_list = []\n    for i in range(length):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_length_list = []\n            max_length_list.append(input_list[i])\n        elif len(input_list[i]) == max_length:\n            max_length_list.append(input_list[i])\n",
        "num_ids": 125
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list[0])\n    max_list = input_list[0]\n    for index in range(1, len(input_list)):\n        if len(input_list[index]) > max_len:\n            max_list = input_list[index]\n            max_len = len(max_list)\n    return max_list\n",
        "num_ids": 90
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    len_list = []\n    for val in input_list:\n        len_list.append(len(val))\n    return len_list\n",
        "num_ids": 36
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for element in input_list:\n        if max_len < len(element):\n            max_len = len(element)\n    return max_len\n",
        "num_ids": 45
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_index = -1\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_len:\n            max_len = len(input_list[i])\n            max_index = i\n    return max_index\n",
        "num_ids": 74
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_len:\n            max_len = len(input_list[i])\n            max_list = [i]\n        elif len(input_list[i]) == max_len:\n            max_list.append(i)\n    return max_list\n",
        "num_ids": 102
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list[0])\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n",
        "num_ids": 53
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n",
        "num_ids": 40
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    input_list
        "num_ids": 2017
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_length_list = input_list[0]\n    for item in input_list[1:]:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_length_list = item\n    return max_length_list\n",
        "num_ids": 81
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    #return len(test_tup) == len(set(test_tup))\n    return len(test_tup) == len(set(test_tup))\n",
        "num_ids": 43
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_list = list(test_tup)\n    test_set = set(test_list)\n    if len(test_set) == len(test_list):\n        return True\n    else:\n        return False\n",
        "num_ids": 55
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    a, b = test_tup\n    if a == b:\n        return False\n    else:\n        return True\n",
        "num_ids": 31
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    temp = {}\n    for c in str1:\n        temp[c] = temp.get(c, 0) + 1\n    for c in str1:\n        if temp[c] == 1:\n            return c\n    return -1\n",
        "num_ids": 59
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict = {}\n    for each in str1:\n        if each in dict:\n            dict[each] += 1\n        else:\n            dict[each] = 1\n    for each in str1:\n        if dict[each] == 1:\n            return each\n    return None\n",
        "num_ids": 68
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # For each character in the string, create a hashmap with key as the character and value as 0\n    hashmap = {}\n    for character in str1:\n        if character in hashmap:\n            hashmap[character] += 1\n        else:\n            hashmap[character] = 1\n    \n    # for each character in the string, check if the value of the character is 1 and if it is not the first occurrence of that character\n    # in the string return that character\n    for character in str1:\n        if hashmap[character] == 1 and character!= str1[0]:\n            return character\n    # if no character in the string is 1, return None\n    return None\n",
        "num_ids": 159
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Initialize a dict\n    dict_char_count = {}\n    # Initialize a list\n    list_char_count = []\n    # Loop through the string, increment count of each char\n    for char in str1:\n        if dict_char_count.has_key(char):\n            dict_char_count[char] += 1\n        else:\n            dict_char_count[char] = 1\n            list_char_count.append(char)\n    # Find the first non-repeated char\n    for char in str1:\n        if dict_char_count[char] == 1:\n            return char\n    # If no character is found to be non-repeated, return '_'\n    return '_'\n",
        "num_ids": 172
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    new_str = ''\n    for i in str1:\n        if str1.count(i) == 1:\n            new_str += i\n            break\n        else:\n            new_str += '_'\n    return new_str\n",
        "num_ids": 59
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) == 1:\n            return i\n    return '-'\n    ",
        "num_ids": 33
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        count=0\n        for j in range(len(str1)):\n            if str1[i]==str1[j]:\n                count+=1\n        if count==1:\n            return str1[i]\n            break\n    return str1[0]\n",
        "num_ids": 78
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    #set up dictionary\n    char_dict = {}\n",
        "num_ids": 17
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    char_set = set()\n    for char in str1:\n        if char not in char_set:\n            char_set.add(char)\n            return char\n    return \"No non repeating character found\"\n",
        "num_ids": 54
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    d = {}\n    for char in str1:\n        if char not in d:\n            d[char] = 1\n        else:\n            d[char] += 1\n            \n    for char in str1:\n        if d[char] == 1:\n            return char\n            \n    return None\n",
        "num_ids": 75
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) == 0:\n        return False\n    if len(string) == 1:\n        return True\n    if string[0]!= string[-1]:\n        return False\n    return check_char(string[1:-1])\n",
        "num_ids": 61
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if (string[0] == string[-1]) and (re.search(regex, string)): \n        print 'True'\n    else: \n        print 'False' \n",
        "num_ids": 47
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) == 0:\n        return False\n    elif re.match(regex, string[0]):\n        if re.match(regex, string[-1]):\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 68
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string)\n",
        "num_ids": 14
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not re.match(regex, string):\n        return False\n    elif string[0]!= string[-1]:\n        return False\n    else:\n        return True\n",
        "num_ids": 46
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) < 2:\n        return False\n    return True if re.match(regex, string) else False\n",
        "num_ids": 32
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string)\nprint check_char('aa')\nprint check_char('ab')\nprint check_char('ba')\nprint check_char('1234567890')\nprint check_char('aabbccddeeffgghhiii')\nprint check_char('aabbccddeeffggghh')\n",
        "num_ids": 82
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex,string)\n",
        "num_ids": 14
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string == '':\n        return True\n    elif len(string) == 1:\n        return True\n    else:\n        first = string[0]\n        last = string[-1]\n        return first == last\ndef check_char_range(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character in the range between lower and upper case characters.\n    '''\n    if string == '':\n        return True\n    elif len(string) == 1:\n        return True\n    else:\n        first = string[0]\n        last = string[-1]\n        return first.isalpha() and last.isalpha() and first.islower() and last.isupper()\ndef check_substring(string):\n    '''\n    Write a function to check whether the given string contains all the characters of another given string.\n    '''\n    if string == '':\n        return False\n    else:\n        for char in string:\n            if char not in string:\n                return False\n        return True\ndef check_substring_regex(string):\n    '''\n    Write a function to check whether the given string contains all the characters of another given string using regular expression.\n    '''\n    return re.match(regex, string)\ndef check_double(string):\n    '''\n    Write a function to check whether the given string contains two identical characters next to each other.\n    '''\n    if len(string) < 2:\n        return False\n    else:\n        if string[0] == string[1]:\n            return True\n        else:\n            return False\ndef check_double_regex(string):\n    '''\n    Write a function to check whether the given string contains two identical characters next to each other using regular expression.\n    '''\n    return re.match(r'[a-z]{2}', string)\ndef check_double_char(string):\n    '''\n    Write a function to check whether the given string contains two identical characters next to each other.\n    '''\n    if len(string) < 3:\n        return False\n    else:\n        if string[0] == string[2]:\n            return True\n        else:\n            return False\ndef check_double_char_regex(string):\n    '''\n    Write a function to check whether the given string contains two identical characters next to each other using regular expression.\n    '''\n    return re.match(r'(.)\\1', string)\ndef check_string_rotation(string1, string2):\n    '''\n    Write a function to check whether two strings are identical or not after rotation.\n    '''\n    if string1 == string2:\n        return True\n    elif string1 == string2[::-1]:\n        return True\n    return False\ndef check_string_rotation_regex(string1, string2):\n    '''\n    Write a function to check whether two strings are identical or not after rotation using regular expression.\n    '''\n    return (re.match(r'^[a-z].*[a-z]$', string1) and re.match(r'^[a-z].*[a-z]$', string2)) or (re.match(r'^[a-z][a-z].*[a-z][a-z]$', string1) and re.match(r'^[a-z][a-z].*[a-z][a-z]$', string2))\ndef check_palindrome(string):\n    '''\n    Write a function to check whether the given string is palindrome or not.\n    '''\n    if len(string) < 2:\n        return True\n    else:\n        if string[0] == string[-1]:\n            return check_palindrome(string[1:-1])\n        else:\n            return False\ndef check_palindrome_regex(string):\n    '''\n    Write a function to check whether the given string is palindrome or not using regular expression.\n    '''\n    return re.match(r'^[a-z]+$', string)\ndef check_palindrome_length(string):\n    '''\n    Write a function to check whether the given string is palindrome or not.\n    '''\n    if len(string) == 0:\n        return True\n    else:\n        return string[0] == string[-1] and check_palindrome_length(string[1:-1])\ndef check_palindrome_length_regex(string):\n    '''\n    Write a function to check whether the given string is palindrome or not using regular expression.\n    '''\n    return re.match(r'^[a-z]+$', string)\ndef check_anagram(string1, string2):\n    '''\n    Write a function to check whether the two strings are anagram or not.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    else:\n        return sorted(string1) == sorted(string2)\ndef check_anagram_regex(string1, string2):\n    '''\n    Write a function to check whether the two strings are anagram or not using regular expression.\n    '''\n    return (re.match(r'^[a-z]+$', string1) and re.match(r'^[a-z]+$', string2))\ndef check_anagram_length(string1, string2):\n    '''\n    Write a function to check whether the two strings are anagram or not.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    else:\n        return sorted(string1) == sorted(string2)\ndef check_anagram_length_regex(string1, string2):\n    '''\n    Write a function to check whether the two strings are anagram or not using regular expression.\n    '''\n    return (re.match(r'^[a-z]+$', string1) and re.match(r'^[a-z]+$', string2))\ndef check_anagram_permutation(string1, string2):\n    '''\n    Write a function to check whether the two strings are anagram or not.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    else:\n        return sorted(string1) == sorted(string2)\ndef check_anagram_permutation_regex(string1, string2):\n    '''\n    Write a function to check whether the two strings are anagram or not using regular expression.\n    '''\n    return (re.match(r'^[a-z]+$', string1) and re.match(r'^[a-z]+$', string2))\ndef check_anagram_permutation_length(string1, string2):\n    '''\n    Write a function to check whether the two strings are anagram or not.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    else:\n        return sorted(string1) == sorted(string2)\ndef check_anagram_permutation_length_regex(string1, string2):\n    '''\n    Write a function to check whether the two strings are anagram or not using regular expression.\n    '''\n    return (re.match(r'^[a-z]+$', string1) and re.match(r'^[a-z]+$', string2))\ndef check_anagram_permutation_mixed(string1, string2):\n    '''\n    Write a function to check whether the two strings are anagram or not.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    else:\n        return sorted(string1) == sorted(string2)\ndef check_anagram_permutation_mixed_regex(string1, string2):\n    '''\n    Write a function to check whether the two strings are anagram or not using regular expression.\n    '''\n    return (re.match(r'^[a-z]+$', string1) and re.match(r'^[a-z]+$', string2))\ndef check_anagram_permutation_mixed_length(string1, string2):\n    '''\n    Write a function to check whether the two strings are anagram or not.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # if all three numbers are equal, then median is the number\n    if (a==b==c):\n        return (a)\n    # if there is a tie, then the median is the average of the two numbers\n    elif (a==b) or (a==c) or (b==c):\n        return ((a+b+c)/2)\n    # if there is no tie, then median is the larger of the two numbers\n    elif (a>b) and (a>c):\n        return (a)\n    elif (b>a) and (b>c):\n        return (b)\n    elif (c>a) and (c>b):\n        return (c)\n",
        "num_ids": 166
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if a>c:\n            if b>c:\n                return b\n            else:\n                return c\n        else:\n            return a\n    else:\n        if b>c:\n            if a>c:\n                return a\n            else:\n                return c\n        else:\n            return b\n",
        "num_ids": 81
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if a > c:\n            return a\n        elif b > c:\n            return b\n        else:\n            return c\n    elif b > a:\n        if b > c:\n            return b\n        elif c > a:\n            return c\n        else:\n            return a\n    else:\n        if c > a:\n            return c\n        elif a > b:\n            return a\n        else:\n            return b\n",
        "num_ids": 114
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        a,b = b,a\n    if a>c:\n        a,c = c,a\n    if b>c:\n        b,c = c,b\n    \n    return (a+b+c)/2\n",
        "num_ids": 63
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    nums = [a,b,c]\n    nums.sort()\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return (nums[0] + nums[1]) / 2\n    else:\n        return nums[1]\n",
        "num_ids": 80
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    def find_median(x,y):\n        if x >= y:\n            return x\n        elif y >= x:\n            return y\n",
        "num_ids": 37
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if b > c:\n            return b\n        elif c > b:\n            return c\n        else:\n            return a\n    elif a > c:\n        if b > c:\n            return c\n        else:\n            return a\n    else:\n        return b\n",
        "num_ids": 75
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if (a > b and a > c):\n        return a\n    elif (b > a and b > c):\n        return b\n    else:\n        return c\n",
        "num_ids": 43
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    import operator\n    if a>b and a<c:\n        return a\n    elif b>a and b<c:\n        return b\n    elif c>a and c<b:\n        return c\n    else:\n        return max(a,b,c)\n        \n",
        "num_ids": 70
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return (a+b+c)/2\n",
        "num_ids": 13
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(sum, nums))\n",
        "num_ids": 14
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in nums])\n",
        "num_ids": 17
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # sum = 0\n    # for num in nums:\n    #     sum += sum_of_digits(num)\n    # return sum\n    return sum([sum_of_digits(num) for num in nums])\n",
        "num_ids": 57
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    \n    return sum(map(int,str(nums)))\n    ",
        "num_ids": 19
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [sum(int(i) for i in str(n)) for n in nums]\n",
        "num_ids": 25
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(int, nums))\n",
        "num_ids": 14
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(num) for num in nums])\n",
        "num_ids": 17
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    res = 0\n    for num in nums:\n        res += sum(int(i) for i in str(num))\n    return res\n",
        "num_ids": 36
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in nums])\n",
        "num_ids": 17
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    if not nums:\n        return None\n    return sum(int(i) for i in str(nums))\n",
        "num_ids": 30
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([x1 ^ x2 for x1,x2 in zip(test_tup1, test_tup2)])\n",
        "num_ids": 34
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([tup1[i] ^ tup2[i] for i in range(0, len(tup1))])\n",
        "num_ids": 34
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([tup1[i]^tup2[i] for i in range(len(tup1))])\n",
        "num_ids": 32
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            xor_tup += (1,)\n        else:\n            xor_tup += (0,)\n    return xor_tup\n",
        "num_ids": 82
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    a, b = test_tup1\n    c, d = test_tup2\n    return (a,b)\n",
        "num_ids": 32
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print('ERROR: length mismatch')\n        return\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            result.append(0)\n        else:\n            result.append(1)\n    return result\n",
        "num_ids": 99
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # test_tup1 = (1, 3, 4, 5, 6)\n    # test_tup2 = (2, 4, 5, 7, 9)\n    a = test_tup1\n    b = test_tup2\n    n = len(a)\n    d = 0\n    for i in range(n):\n        d += a[i] ^ b[i]\n    return d\n",
        "num_ids": 99
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    bitwise_xor_tup = []\n    for num1, num2 in zip(test_tup1, test_tup2):\n        bitwise_xor_tup.append(num1 ^ num2)\n    return bitwise_xor_tup\n",
        "num_ids": 67
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for word in test_list:\n        freq[word] = freq.get(word, 0) + 1\n    return len(freq)\n",
        "num_ids": 44
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Get a sorted list of the tuples in the test list\n    test_list = sorted(test_list, key = lambda x: x[0])\n    # Initialize a list of unique tuples\n    unique_list = []\n    # Iterate over the list of tuples in the sorted list\n    for tup in test_list:\n        # If the current tuple is not in the unique list\n        if not tup in unique_list:\n            # Add the current tuple to the unique list\n            unique_list.append(tup)\n    # Return the number of unique tuples\n    return len(unique_list)\n",
        "num_ids": 146
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for x in test_list:\n        if x not in freq_dict:\n            freq_dict[x] = 1\n        else:\n            freq_dict[x] += 1\n    return freq_dict\n",
        "num_ids": 63
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    import collections\n    #seen = set()\n    #for i in test_list:\n    #    if i in seen:\n    #        pass\n    #    seen.add(i)\n    print(collections.Counter(test_list))\n    return len(collections.Counter(test_list))\n",
        "num_ids": 74
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n",
        "num_ids": 13
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    if not test_list:\n        return 0\n    else:\n        return len(set([tuple(x) for x in test_list]))\n",
        "num_ids": 38
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n",
        "num_ids": 13
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    temp_list = []\n    for i in test_list:\n        if i not in temp_list:\n            count += 1\n            temp_list.append(i)\n    return count\n",
        "num_ids": 52
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    from collections import Counter\n    return len(Counter(test_list).keys())\n",
        "num_ids": 21
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    set_list = []\n    for item in test_list:\n        set_list.append(tuple(item))\n    return len(set(set_list))\n",
        "num_ids": 42
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    res = []\n    for i in range(len(test_tup1)):\n        res.append(tuple(x+y for x,y in zip(test_tup1[i], test_tup2[i])))\n    return tuple(res)\n",
        "num_ids": 66
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = ()\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            new_tup += (test_tup1[i] + test_tup2[i],)\n        return new_tup\n    elif len(test_tup1) > len(test_tup2):\n        return (test_tup1[0] + test_tup2[0],) + add_nested_tuples(test_tup1[1:], test_tup2[1:])\n    else:\n        return (test_tup1[0] + test_tup2[0],) + add_nested_tuples(test_tup1[1:], test_tup2[1:])\n",
        "num_ids": 202
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # test_tup1 = (10,20,30,40)\n    # test_tup2 = (1,2,3,4)\n    # return ((a + b) for a, b in zip(test_tup1, test_tup2))\n    # result = ((i + j) for i, j in zip(test_tup1, test_tup2))\n    # return ((a,b) for a,b in zip(result, result))\n    # return (tuple(i + j for i, j in zip(test_tup1, test_tup2)))\n    return tuple(zip(test_tup1, test_tup2))\n",
        "num_ids": 164
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # test_tup1 = (1, 2, (3, 4, 5))\n    # test_tup2 = (6, 7, (8, 9, 10))\n    \n    \n    \n    add = ()\n    # for i in range(len(test_tup1)):\n    #     add += (test_tup1[i] + test_tup2[i], )\n    # print(add)\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1], )\n",
        "num_ids": 143
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return ((test_tup1[0] + test_tup2[0]), (test_tup1[1] + test_tup2[1]))\n",
        "num_ids": 42
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return tuple(test_tup1[i] + test_tup2[i] for i in range(len(test_tup1)))\n    elif len(test_tup1) == 1:\n        return (test_tup1[0], test_tup2[0])\n    elif len(test_tup2) == 1:\n        return (test_tup1[0], test_tup2[0])\n    else:\n        return None\n",
        "num_ids": 135
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = ()\n    for tup1_idx, tup1_ele in enumerate(test_tup1):\n        for tup2_idx, tup2_ele in enumerate(test_tup2):\n            new_tup += (tup1_ele + tup2_ele,)\n    return new_tup\n",
        "num_ids": 87
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup3 = (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n    return test_tup3\n",
        "num_ids": 53
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    return tuple(x + y for x, y in zip(test_tup1, test_tup2))\n",
        "num_ids": 49
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] + test_tup2[i]\n    return test_tup1\n",
        "num_ids": 54
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return b\n    else:\n        return a\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef modulus(a,b):\n    '''\n    Write a python function to find the modulus of two numbers.\n    '''\n    if a > b:\n        return a%b\n    else:\n        return b%a\n        \ndef greaterthan(a,b):\n    '''\n    Write a python function to find the greater than of two numbers.\n    '''\n    if a > b:\n        return 1\n    else:\n        return 0\n        \ndef equalto(a,b):\n    '''\n    Write a python function to find the equal to of two numbers.\n    '''\n    if a == b:\n        return 1\n    else:\n        return 0\n        \ndef mult(a,b):\n    '''\n    Write a python function to find the product of two numbers.\n    '''\n    if a > b:\n        return a*b\n    else:\n        return b*a\n        \ndef find_max(a,b,c):\n    '''\n    Write a python function to find the max between three numbers.\n    '''\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n        \ndef find_min(a,b,c):\n    '''\n    Write a python function to find the min between three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n        \ndef find_max_in_list(a):\n    '''\n    Write a python function to find the max of a list.\n    '''\n    max = 0\n    for x in a:\n        if x > max:\n            max = x\n    return max\n        \ndef find_min_in_list(a):\n    '''\n    Write a python function to find the min of a list.\n    '''\n    min = 0\n    for x in a:\n        if x < min:\n            min = x\n    return min\n        \ndef sum_of_list(a):\n    '''\n    Write a python function to find the sum of a list.\n    '''\n    sum = 0\n    for x in a:\n        sum += x\n    return sum\n        \ndef factorial(a):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if a == 1:\n        return 1\n    else:\n        return a * factorial(a - 1)\n        \ndef gcd(a,b):\n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    if a == 0:\n        return b\n    else:\n        return gcd(b % a, a)\n        \ndef lcm(a,b):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    return (a*b) / gcd(a,b)\n        \ndef count_digits(a):\n    '''\n    Write a python function to count the number of digits of a number.\n    '''\n    if a == 0:\n        return 1\n    else:\n        return 1 + count_digits(a/10)\n        \ndef sum_digits(a):\n    '''\n    Write a python function to sum the digits of a number.\n    '''\n    sum = 0\n    while a:\n        sum += a % 10\n        a /= 10\n    return sum\n        \ndef reverse(a):\n    '''\n    Write a python function to reverse a number.\n    '''\n    rev = 0\n    while a:\n        rev = rev * 10 + a % 10\n        a /= 10\n    return rev\n        \ndef palindrome(a):\n    '''\n    Write a python function to check if a number is a palindrome.\n    '''\n    return a == reverse(a)\n        \ndef divisibleby(a,b):\n    '''\n    Write a python function to check if a number is divisible by another number.\n    '''\n    if a % b == 0:\n        return 1\n    else:\n        return 0\n        \ndef add_digits(a):\n    '''\n    Write a python function to add all the digits of a number.\n    '''\n    sum = 0\n    while a:\n        sum += a % 10\n        a /= 10\n    return sum\n        \ndef is_prime(a):\n    '''\n    Write a python function to check if a number is prime.\n    '''\n    if a == 1:\n        return 0\n    elif a == 2:\n        return 1\n    elif a > 2 and a % 2 == 0:\n        return 0\n    else:\n        i = 3\n        while i < a:\n            if a % i == 0:\n                return 0\n            i += 2\n    return 1\n        \ndef fibonacci(a):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    if a == 1 or a == 2:\n        return 1\n    else:\n        return fibonacci(a - 1) + fibonacci(a - 2)\n        \ndef fibonacci_iter(a):\n    '''\n    Write a python function to find the nth fibonacci number iteratively.\n    '''\n    n1 = 1\n    n2 = 1\n    if a == 1 or a == 2:\n        return 1\n    else:\n        for i in range(2,a):\n            n1, n2 = n2, n1 + n2\n        return n2\n        \ndef sum_of_squares(a):\n    '''\n    Write a python function to find the sum of the squares of the digits of a number.\n    '''\n    sum = 0\n    while a:\n        sum += (a % 10)**2\n        a /= 10\n    return sum\n        \ndef pythagorean_triple(a):\n    '''\n    Write a python function to find the pythagorean triple.\n    '''\n    for m in range(1,1000):\n        for n in range(1,1000):\n            c = m**2 + n**2\n            if c == a**2:\n                return m, n, a\n                \ndef pythagorean_triple_recur(a):\n    '''\n    Write a python function to find the pythagorean triple recursively.\n    '''\n    for m in range(1,1000):\n        for n in range(1,1000):\n            if m**2 + n**2 == a**2:\n                return m, n, a\n                \ndef pythagorean_triple_iter(a):\n    '''\n    Write a python function to find the pythagorean triple iteratively.\n    '''\n    for m in range(1,1000):\n        for n in range(1,1000):\n            c = m**2 + n**2\n            if c == a**2:\n                return m, n, a\n                \ndef sum_of_digit_squares(a):\n    '''\n    Write a python function to find the sum of the digits of a number squared.\n    '''\n    sum = 0\n    while a:\n        sum += (a % 10)**2\n        a /= 10\n    return sum\n        \ndef sum_of_digit_squares_recur(a):\n    '''\n    Write a python function to find the sum of the digits of a number squared recursively.\n    '''\n    if a == 0:\n        return 0\n    else:\n        return (a % 10)**2 + sum_of_digit_squares_recur(a/10)\n        \ndef sum_of_digit_squares_iter(a):\n    '''\n    Write a python function to find the sum of the digits of a number squared iteratively.\n    '''\n    sum = 0\n    while a:\n        sum += (a % 10)**2\n        a /= 10\n    return sum\n        \ndef sum_of_digits(a):\n    ''",
        "num_ids": 48
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a<b):\n        return a\n    else:\n        return b\n",
        "num_ids": 22
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a<b):\n        return a\n    else:\n        return b\n",
        "num_ids": 22
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for tup in tuplex:\n        if(tuple1==tup):\n            return True\n    return False\n",
        "num_ids": 31
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    \n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if (tuplex[0]==tuple1[0]):\n        return True\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if (tuplex.count(tuple1)):\n        return True\n    return False\n",
        "num_ids": 25
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        print(\"Element %s exists in %s\" %(tuple1,tuplex))\n    else:\n        print(\"Element %s is not present in %s\" %(tuple1,tuplex))\n",
        "num_ids": 62
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # your code goes here\n    # if tuplex[i] == tuple1:\n    #     return True\n    # else:\n    #     return False\n    return tuple1 in tuplex\n",
        "num_ids": 49
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex.count(tuple1) > 0: \n        return True\n    else: \n        return False\n    \ndef check_in_list(in_list, item):\n    '''\n    Write a function to check whether an item exists within a list.\n    '''\n    if item in in_list:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    y = 0\n    \n    while(x > 0):\n        y = y + x%2\n        x = x/2\n        \n    if y%2 == 0:\n        return 1\n    else:\n        return 0\n    \ndef isPowerOfTwo(n):\n    '''\n    Write a python function to check whether a given number is power of two.\n    '''\n    \n    return ((n!= 0) and (n & (n-1) == 0))\n    \ndef find_MinSwaps(a):\n    '''\n    Write a python function to find the minimum number of swaps required to make an array non-decreasing.\n    '''\n    \n    n = len(a)\n    \n    a = [0] + a\n    \n    f = [0]*n\n    \n    f[0] = a[1] - a[0]\n    \n    for i in range(1,n):\n        f[i] = max(f[i-1],a[i] - a[i-1])\n        \n    count = 0\n    \n    for i in range(1,n):\n        if f[i]!= 0:\n            j = i\n            while j > 0 and a[j] < a[j-1]:\n                a[j],a[j-1] = a[j-1],a[j]\n                j = j-1\n                count = count + 1\n                \n    return count\n    \ndef kth_smallest(a,l,r,k):\n    '''\n    Write a python function to find the kth smallest element in a list.\n    '''\n    \n    if l<r:\n        j = partition(a,l,r)\n        if k < j - l + 1:\n            return kth_smallest(a,l,j-1,k)\n        elif k > j - l + 1:\n            return kth_smallest(a,j+1,r,k-j+l-1)\n        else:\n            return a[j-1]\n        \ndef partition(a,l,r):\n    '''\n    Write a python function to partition the array using quick sort.\n    '''\n    \n    pivot = a[r]\n    i = l-1\n    for j in range(l,r):\n        if a[j] <= pivot:\n            i = i + 1\n            a[i],a[j] = a[j],a[i]\n    a[i+1],a[r] = a[r],a[i+1]\n    return i + 1\n    \ndef find_sum_of_left_side(a,m):\n    '''\n    Write a python function to find the sum of left side elements of a given matrix.\n    '''\n    \n    ans = 0\n    \n    for i in range(len(m)):\n        ans = ans + m[i][0]\n    \n    return ans\n    \ndef find_sum_of_right_side(a,m):\n    '''\n    Write a python function to find the sum of right side elements of a given matrix.\n    '''\n    \n    ans = 0\n    \n    for i in range(len(m)):\n        ans = ans + m[i][-1]\n    \n    return ans\n    \ndef find_sum_of_columns(a,m):\n    '''\n    Write a python function to find the sum of columns elements of a given matrix.\n    '''\n    \n    ans = [0]*len(m[0])\n    \n    for i in range(len(m)):\n        for j in range(len(m[0])):\n            ans[j] = ans[j] + m[i][j]\n    \n    return ans\n    \ndef find_sum_of_row(a,m):\n    '''\n    Write a python function to find the sum of row elements of a given matrix.\n    '''\n    \n    ans = [0]*len(m)\n    \n    for i in range(len(m)):\n        for j in range(len(m[0])):\n            ans[i] = ans[i] + m[i][j]\n    \n    return ans\n    \ndef find_max_square(a):\n    '''\n    Write a python function to find the maximum square subarray in a given array.\n    '''\n    \n    n = len(a)\n    \n    max_square = 0\n    \n    t = [0]*n\n    t[0] = 1\n    \n    for i in range(1,n):\n        if a[i] == 0:\n            t[i] = 0\n        else:\n            t[i] = t[i-1] + 1\n            \n    for i in range(n):\n        for j in range(i,n):\n            k = j - i + 1\n            if k == 1:\n                t[j] = t[j] + 1\n            else:\n                if a[i] == 0:\n                    t[j] = 0\n                else:\n                    for kk in range(k/2):\n                        if (a[i+kk] == 0) and (a[j-kk] == 0):\n                            t[j] = t[j] + 1\n                        else:\n                            break\n            if t[j] > max_square:\n                max_square = t[j]\n    \n    return max_square\n    \ndef find_max_square_with_obstacles(a):\n    '''\n    Write a python function to find the maximum square subarray with obstacles in a given array.\n    '''\n    \n    n = len(a)\n    \n    t = [0]*n\n    \n    max_square = 0\n    \n    for i in range(n):\n        for j in range(i,n):\n            k = j - i + 1\n            if a[i] == 1:\n                t[j] = 0\n            else:\n                t[j] = t[j-1] + 1\n                \n    for i in range(n):\n        for j in range(i,n):\n            k = j - i + 1\n            if a[i] == 1:\n                t[j] = 0\n            else:\n                t[j] = t[j] + 1\n            if t[j] > max_square:\n                max_square = t[j]\n    \n    return max_square\n    \ndef find_smallest_subarray_with_given_sum(a,s):\n    '''\n    Write a python function to find the smallest subarray with given sum.\n    '''\n    \n    ans = -1\n    \n    n = len(a)\n    \n    sum_now = 0\n    \n    i = 0\n    \n    while(sum_now <= s):\n        if sum_now == s:\n            ans = i\n            break\n        sum_now = sum_now + a[i]\n        i = i + 1\n    \n    if ans == -1:\n        return -1\n    \n    min_len = n + 1\n    \n    for j in range(n):\n        if sum_now - a[j] >= s:\n            min_len = min(j - i + 1, min_len)\n            break\n    \n    return min_len\n    \ndef find_the_maximum_value_in_grid(a):\n    '''\n    Write a python function to find the maximum value in a grid.\n    '''\n    \n    n = len(a)\n    \n    m = len(a[0])\n    \n    max_value = 0\n    \n    for i in range(n):\n        for j in range(m):\n            if a[i][j] > max_value:\n                max_value = a[i][j]\n    \n    return max_value\n    \ndef find_largest_rectangle(a):\n    '''\n    Write a python function to find the area of the largest rectangle with horizontal, vertical, and diagonal lines.\n    '''\n    \n    n = len(a)\n    \n    m = len(a[0])\n    \n    max_area = 0\n    \n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                if i == 0 or j == 0:\n                    a[i][j] = a[i][j] + a[i-1][j] + a",
        "num_ids": 101
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x&1:\n        return 1\n    else:\n        return 0\n",
        "num_ids": 21
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x % 2 == 1\n",
        "num_ids": 10
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x&1)\n",
        "num_ids": 10
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x & 1:\n        return 1\n    else:\n        return 0\n",
        "num_ids": 21
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        return x\n    else:\n        return -1\n",
        "num_ids": 24
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    while(x!=0):\n        x = x & (x-1)\n    return 1\n",
        "num_ids": 26
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        return False\n    else:\n        return True\n",
        "num_ids": 23
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 0x1) == 0\n",
        "num_ids": 14
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    count = 0\n    while x:\n        count += 1\n        x &= x - 1\n    return (count%2)\n    \ndef find_Parity_Trap(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x&1)\n    \ndef find_Parity_Rec(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x == 0:\n        return 0\n    else:\n        return find_Parity_Rec(x>>1)\n",
        "num_ids": 31
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    a = str(n)\n    n_len = len(a)\n    new_n = ''\n    for i in range(n_len-1):\n        max_i = i\n        for j in range(i+1,n_len):\n            if int(a[j])>int(a[max_i]):\n                max_i = j\n        if max_i!=i:\n            temp = a[i]\n            a[i] = a[max_i]\n            a[max_i] = temp\n        new_n += a[i]\n    return int(new_n)\n",
        "num_ids": 148
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    l = list(str(n))\n    #print l\n    if len(l) == 1:\n        return n\n    elif len(l) % 2 == 0:\n        new_l = sorted(l[1:])\n        new_l.append(l[0])\n        return int(''.join(new_l))\n    else:\n        new_l = sorted(l[1:])\n        new_l.append(l[0])\n        return int(''.join(new_l))\n",
        "num_ids": 122
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = str(n)\n    i = 0\n    while i < len(s)-1:\n        if s[i] < s[i+1]:\n            if int(s[i+1]) > int(s[i]):\n                temp = s[i]\n                s = s[:i] + s[i+1] + s[i] + s[i+2:]\n                s = s[:i+1] + temp + s[i+1:]\n                break\n        i+=1\n    return int(s)\n",
        "num_ids": 130
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    '''\n    Example:\n    Input:\n    56\n    Output:\n    77\n",
        "num_ids": 20
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n < 10:\n        return -1\n    i = len(str(n)) - 1\n    j = i\n    while i > 0 and str(n)[i-1] >= str(n)[j]:\n        i -= 1\n        j = i\n    str_n = str(n)\n    for i in xrange(i, len(str_n)):\n        if str_n[i] > str_n[j]:\n            str_n = str_n[:i] + str_n[i-1] + str_n[i:j] + str_n[j] + str_n[i:]\n            j = i\n    if int(str_n) == n:\n        return -1\n    else:\n        return int(str_n)\n",
        "num_ids": 186
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n < 10:\n        return -1\n    if n == 10:\n        return 9\n    num_list = list(str(n))\n    num_list = num_list[::-1]\n    for i in range(len(num_list)):\n        if num_list[i] > num_list[i+1]:\n            return int(''.join(num_list[i:len(num_list)]) + '0'*(len(num_list) - i))\n    return -1\n",
        "num_ids": 124
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    l = list(str(n))\n    l.sort()\n    return int(''.join(l))\n",
        "num_ids": 28
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    if len(n) == 1: return n\n",
        "num_ids": 22
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    ans = 0\n    if n < 0:\n        return -1\n    # if n is zero, return zero\n    if n == 0:\n        return 0\n    # initialize a list to store the digits of the number\n    digits = []\n    while n:\n        digits.append(n % 10)\n        n = n / 10\n    # sort the digits\n    digits.sort()\n    # traverse the digits, and replace the first digit to the new greater digit\n    for i in range(len(digits)):\n        if i == 0:\n            ans += digits[i] * (10 ** (len(digits) - 1))\n        else:\n            ans += digits[i] * (10 ** (i - 1))\n    return ans\n",
        "num_ids": 178
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(str(n))\n    \n    j = len(n) - 1\n    while j > 0 and n[j] <= n[j - 1]:\n        j -= 1\n    \n    if j == 0:\n        n.sort()\n    else:\n        n[j - 1], n[j] = n[j], n[j - 1]\n        n[j:] = n[j:][::-1]\n        \n    return int(''.join(n))\n    \n    \ndef rotate_matrix(matrix):\n    '''\n    Rotate an array of arrays such that it becomes the transpose of the original array.\n    '''\n    return list(zip(*matrix[::-1]))\n    \n    \ndef pancake_sort(nums):\n    '''\n    Given a list of positive integers, arrange them in a way that they form the largest number.\n    '''\n    for i in range(len(nums), 1, -1):\n        index = nums.index(i)\n        nums[:i][::-1] = nums[:i]\n        nums[:index][::-1] = nums[:index][::-1] + nums[:index][:index][::-1]\n        nums[:index][:index][::-1] = nums[:index][:index][::-1] + nums[:index][index:][::-1]\n        nums[:index][index:] = nums[:index][index:][::-1]\n        \n    return nums\n    \n    \ndef minimum_sum_partition(nums):\n    '''\n    Find the minimum sum of a partitioning of nums.\n    '''\n    sums = [0]\n    for i in nums:\n        sums.append(sums[-1] + i)\n    \n    n = len(nums)\n    dp = [[float('inf')] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n    \n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = min(dp[i][j - 1], dp[i - 1][j])\n            if i > j:\n                dp[i][j] = min(dp[i][j], sums[i] - sums[j])\n            \n    return dp[n][n]\n    \n    \ndef four_sum(nums, target):\n    '''\n    Given an array of n integers nums and a target, find four integers in nums such that the sum is closest to target.\n    Return the sum of the four integers.\n    \n    The result should be rounded to a scale of 1 decimal place (e.g. 1.234 or 123.4).\n    '''\n    n = len(nums)\n    nums.sort()\n    \n    def find_sum(i, j):\n        left, right = j + 1, n - 1\n        while left < right:\n            s = nums[i] + nums[left] + nums[right] + nums[j]\n            if s < target:\n                left += 1\n            elif s > target:\n                right -= 1\n            else:\n                return s\n        \n        return target\n        \n    result = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            result = min(result, find_sum(i, j))\n            \n    return result\n    \n    \ndef valid_palindrome(s):\n    '''\n    Given a string s, check if it is a palindrome.\n    \n    A string is a palindrome when it reads the same backward as forward.\n    Example: \"racecar\" is a palindrome.\n    \n    Have you met this question in a real interview? Yes\n    '''\n    def is_palindrome(s):\n        if not s:\n            return True\n        i, j = 0, len(s) - 1\n        while i < j:\n            if s[i]!= s[j]:\n                return False\n            i += 1\n            j -= 1\n        return True\n        \n    if not s:\n        return True\n    \n    if len(s) == 1:\n        return True\n        \n    i = 0\n    j = len(s) - 1\n    \n    while i < j:\n        if s[i]!= s[j]:\n            return is_palindrome(s[i:j]) or is_palindrome(s[i + 1:j + 1])\n        i += 1\n        j -= 1\n        \n    return True\n    \n    \ndef count_strings(n, m):\n    '''\n    Given two integers m and n, return the number of strings of length n that can be made from the alphabet letters of length m.\n    \n    Return the answer modulo 10^9 + 7.\n    '''\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(m + 1):\n            dp[i][j] = (dp[i - 1][j] if j < m else 0) + (dp[i][j - 1] if j > 0 else 0)\n            \n    return dp[n][m]\n    \n    \ndef find_subsets(nums):\n    '''\n    Given an integer array nums of unique elements, return all possible subsets (the power set).\n    \n    The solution set must not contain duplicate subsets. Return the solution in any order.\n    \n    Example 1:\n    Input: nums = [1,2,3]\n    Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n    \n    Example 2:\n    Input: nums = [0]\n    Output: [[],[0]]\n    '''\n    result = [[]]\n    n = len(nums)\n    \n    def helper(i):\n        if i == n:\n            return\n        for j in range(len(result[-1]) + 1):\n            result.append(result[-1][:j] + [nums[i]] + result[-1][j:])\n            helper(i + 1)\n            result.pop()\n    \n    helper(0)\n    return result\n    \n    \ndef subsets(nums):\n    '''\n    Given an integer array nums of unique elements, return all possible subsets (the power set).\n    \n    The solution set must not contain duplicate subsets. Return the solution in any order.\n    \n    Example 1:\n    Input: nums = [1,2,3]\n    Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n    \n    Example 2:\n    Input: nums = [0]\n    Output: [[],[0]]\n    '''\n    result = [[]]\n    n = len(nums)\n    \n    def helper(i):\n        if i == n:\n            return\n        for j in range(len(result)):\n            result.append(result[j] + [nums[i]])\n            helper(i + 1)\n            result.pop()\n    \n    helper(0)\n    return result\n    \n    \ndef permute_unique(nums):\n    '''\n    Given an integer array nums, return all possible permutations. You may return the answer in any order.\n    \n    Example 1:\n    Input: nums = [1,1,2]\n    Output: [[1,1,2], [1,2,1], [2,1,1]]\n    \n    Example 2:\n    Input: nums = [1,2,3]\n    Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n    '''\n    result = [[]]\n    n = len(nums)\n    \n    def helper(i):\n        if i == n:\n            return\n        \n        for j in range(len(result)):\n            for k in range(len(result[j]) + 1):\n                result.append(result[j]",
        "num_ids": 75
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k < 0 or k > len(nums1) or k > len(nums2):\n        return\n    minheap = []\n    for i in range(k):\n        heapq.heappush(minheap, (nums1[i] + nums2[0], i, 0))\n    result = []\n    while minheap:\n        (_, i, j) = heapq.heappop(minheap)\n        result.append((nums1[i], nums2[j]))\n        if j + 1 < len(nums2):\n            heapq.heappush(minheap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return result\n",
        "num_ids": 181
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0 or k > len(nums1) * len(nums2):\n        return []\n    res = []\n    for i in xrange(len(nums1)):\n        for j in xrange(len(nums2)):\n            heapq.heappush(res, (nums1[i] + nums2[j], (i, j)))\n            if len(res) > k:\n                heapq.heappop(res)\n    return [x[1] for x in res]\n",
        "num_ids": 143
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2 or k > len(nums1) * len(nums2):\n        return []\n",
        "num_ids": 34
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) > len(nums2):\n        return k_smallest_pairs(nums2,nums1,k)\n    pairs = []\n    smallestPairs = []\n    for i in range(min(k,len(nums1))):\n        pairs.append((nums1[i],nums2[0]))\n    for i in range(min(k,len(nums2))):\n        pairs.append((nums1[0],nums2[i]))\n    # pairs.sort(key = lambda x:x[0])\n    # pairs.sort(key = lambda x:x[1])\n    heapq.heapify(pairs)\n    if k > len(pairs):\n        return pairs\n    else:\n        for i in range(k-1):\n            heapq.heappush(smallestPairs, pairs[0])\n            heapq.heappop(pairs)\n            heapq.heappush(pairs, pairs[0])\n            heapq.heappop(pairs)\n        return smallestPairs\n",
        "num_ids": 271
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # https://www.youtube.com/watch?v=SD8a9uXw1uY\n    n1 = len(nums1)\n    n2 = len(nums2)\n    result = []\n    for i in xrange(n1):\n        for j in xrange(n2):\n            if len(result) == k:\n                break\n            if i == 0:\n                result.append([nums1[i], nums2[j]])\n                continue\n            if nums1[i] < nums1[result[0][0]]:\n                result.insert(0, [nums1[i], nums2[j]])\n                continue\n            if nums1[i] > nums1[result[-1][0]]:\n                result.append([nums1[i], nums2[j]])\n                continue\n            left = 0\n            right = len(result)\n            while left < right:\n                mid = left + (right - left)/2\n                if nums1[i] == nums1[result[mid][0]]:\n                    result[mid].append(nums2[j])\n                    right = mid\n                    break\n                elif nums1[i] < nums1[result[mid][0]]:\n                    right = mid\n                else:\n                    left = mid + 1\n            if len(result) == k:\n                break\n    return result\n",
        "num_ids": 338
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n",
        "num_ids": 27
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (nums1[i] + nums2[j], i, j))\n            elif nums1[i] + nums2[j] < min_heap[0][0]:\n                heapq.heapreplace(min_heap, (nums1[i] + nums2[j], i, j))\n    result = []\n    for _ in range(k):\n        result.append(min_heap[0])\n        heapq.heappop(min_heap)\n    return result\n",
        "num_ids": 198
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def ksmallestpairs(nums1, nums2, k):\n        h = []\n        for num1 in nums1:\n            for num2 in nums2:\n                if len(h) < k:\n                    heapq.heappush(h, (abs(num1 - num2), num1, num2))\n                elif abs(num1 - num2) < h[0][0]:\n                    heapq.heappushpop(h, (abs(num1 - num2), num1, num2))\n        return h\n    pairs = []\n    for pair in ksmallestpairs(nums1, nums2, k):\n        pairs.append((pair[1], pair[2]))\n    return pairs\n",
        "num_ids": 181
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    arr1 = []\n    for num1 in nums1:\n        arr1.append((num1, num1))\n    arr2 = []\n    for num2 in nums2:\n        arr2.append((num2, num2))\n    \n    arr1 = sorted(arr1, key=lambda x: x[1])\n    arr2 = sorted(arr2, key=lambda x: x[1])\n    \n    pairs = []\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i][1] <= arr2[j][1]:\n            pairs.append((arr1[i][0], arr2[j][0]))\n            i += 1\n        else:\n            j += 1\n    if i == len(arr1):\n        for j in range(j, len(arr2)):\n            pairs.append((arr2[j][0], arr2[j][0]))\n    else:\n        for i in range(i, len(arr1)):\n            pairs.append((arr1[i][0], arr1[i][0]))\n    \n    if k > len(pairs):\n        return pairs\n    else:\n        return pairs[:k]\n",
        "num_ids": 306
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    n = len(nums1)\n    pairs = []\n    for i in xrange(n):\n        for j in xrange(len(nums2)):\n            if len(pairs) < k and (nums1[i], nums2[j]) not in pairs:\n                heapq.heappush(pairs, (nums1[i], nums2[j]))\n            if len(pairs) == k:\n                heapq.heappop(pairs)\n    return pairs\n",
        "num_ids": 126
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 0\n    if not list1:\n        return 0\n",
        "num_ids": 20
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    tuple_list = list(set(tuple(sorted(x)) for x in list1))\n    return tuple(min(tuple(x)) for x in tuple_list)\n",
        "num_ids": 46
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    pairs = zip(list1, list1[1:])\n    return min(a * b for a, b in pairs)\n",
        "num_ids": 33
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1)<2:\n        return None\n    min_prod = list1[0][0]*list1[1][1]\n    for i in range(0,len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i][0]*list1[j][1] < min_prod:\n                min_prod = list1[i][0]*list1[j][1]\n    return min_prod\n",
        "num_ids": 124
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return reduce(lambda x,y:x*y, min(list1,key=lambda x:x[0]*x[1]))\n",
        "num_ids": 36
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return min([t[0] * t[1] for t in list1])\n",
        "num_ids": 22
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    max_num = max(list1, key = lambda x: x[0]*x[1])\n    min_num = min(list1, key = lambda x: x[0]*x[1])\n    return min_num[0]*min_num[1]\n",
        "num_ids": 68
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    if len(list1) < 1:\n        raise ValueError(\"empty list\")\n        \n    if len(list1) == 1:\n        return list1[0]\n        \n    min_val = list1[0]\n    for i in range(1,len(list1)):\n        if list1[i][0] < min_val[0]:\n            min_val = list1[i]\n        elif list1[i][0] == min_val[0]:\n            if list1[i][1] < min_val[1]:\n                min_val = list1[i]\n    \n    return min_val\n",
        "num_ids": 155
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = None\n    min_pair = None\n    for pair in list1:\n        if min_prod is None:\n            min_prod = pair[0] * pair[1]\n            min_pair = pair\n        else:\n            if min_prod > pair[0] * pair[1]:\n                min_prod = pair[0] * pair[1]\n                min_pair = pair\n    return min_pair\n",
        "num_ids": 108
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2=[]\n    for i in range(0,len(list1)):\n        for j in range(i,len(list1)):\n            list2.append(list1[i][0]*list1[j][1])\n    return min(list2)\n",
        "num_ids": 68
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n",
        "num_ids": 10
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 1:\n        return listval[0]\n    if listval[0]<listval[1]:\n        return listval[0]\n    else:\n        return min_val(listval[1:])\n",
        "num_ids": 60
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    minimum = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < minimum:\n            minimum = listval[i]\n    return minimum\n",
        "num_ids": 63
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n",
        "num_ids": 10
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min:\n            min = listval[i]\n    return min\n",
        "num_ids": 50
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        raise ValueError('Empty list')\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        return min(listval[0], min_val(listval[1:]))\n",
        "num_ids": 62
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n",
        "num_ids": 10
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = None\n    for item in listval:\n        if minval == None or item < minval:\n            minval = item\n    return minval\n",
        "num_ids": 40
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    for i in range(len(listval)):\n        if listval[i] < minval:\n            minval = listval[i]\n    return minval\n",
        "num_ids": 42
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n",
        "num_ids": 10
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub(r'[0-9]+', '', word)\n    print word\n    if word[0].isupper():\n        word = word[0].lower() + word[1:].capitalize()\n    else:\n        word = word[0].upper() + word[1:]\n    return word\n",
        "num_ids": 78
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if(not word):\n        return \"\"\n    elif(word.isupper()):\n        return word\n    else:\n        temp = \"\"\n        for i in word:\n            if(i == \"_\"):\n                i = \"_\" + temp.lower()\n            temp = temp + i\n        return temp\n",
        "num_ids": 75
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word == '':\n        return word\n    if word[0] == '_':\n        word = word[1:]\n        word = word.capitalize()\n    for i in word:\n        if i.isupper():\n            word = word.replace(i, '_'+i)\n    return word\n",
        "num_ids": 76
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word == \"\":\n        return \"\"\n    word = word.split(\"_\")\n    string = \"\"\n    for word_ in word:\n        if word_!= \"\":\n            string = string + word_[0].upper() + word_[1:]\n    return string\n",
        "num_ids": 68
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    first = True\n    camel = ''\n    for l in word:\n        if first:\n            camel += l.upper()\n            first = False\n        else:\n            camel += l.lower()\n    return camel\n",
        "num_ids": 56
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    first = words[0]\n    if len(words) == 1:\n        return first\n    return first.lower() + ''.join([w.title() for w in words[1:]])\n",
        "num_ids": 59
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not word:\n        return \"\"\n",
        "num_ids": 12
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not word:\n        return ''\n    word = word.split('_')\n    return ''.join(word[:1]+[w.capitalize() for w in word[1:]])\n",
        "num_ids": 49
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # pre = re.compile('[A-Z]+')\n    # pre = re.compile('[A-Z]+')\n    # word = word.split('_')\n    # print(word)\n    # word = word[0].capitalize()\n    # for i in range(1, len(word)):\n    #     word[i] = word[i].capitalize()\n    # word = ''.join(word)\n    # print(word)\n    # word = pre.sub('', word)\n    # print(word)\n    # return word\n    return re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word)\n",
        "num_ids": 166
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # I just can't get it to work, yet...\n    # Also, I don't know how to return the output object in the same class, so I have to save it in the global variable.\n    # I think I will have to use a better solution.\n    global camel_case_string\n    camel_case_string = \"\"\n",
        "num_ids": 79
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l1=[]\n    for i in l:\n        if i%2!=0:\n            l1.append(i)\n    return l1\n",
        "num_ids": 39
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = list(l)\n    # l = list(filter(lambda x: x%2==0, l))\n    # print(l)\n    return [x for x in l if x%2==0]\n",
        "num_ids": 53
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n",
        "num_ids": 18
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_l = []\n    for num in l:\n        if num % 2!= 0:\n            new_l.append(num)\n    return new_l\n",
        "num_ids": 42
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = [x for x in l if x%2 == 0]\n    return l\n",
        "num_ids": 23
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [item for item in l if item % 2 == 0]\n",
        "num_ids": 18
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if l[i]%2!= 0:\n            l.remove(l[i])\n    return l\n",
        "num_ids": 41
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_l = []\n    for i in l:\n        if i % 2 == 0:\n            new_l.append(i)\n    return new_l\n",
        "num_ids": 41
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for n in l:\n        if n%2==1:\n            l.remove(n)\n    print(l)\nremove_odd([1,2,3,4,5,6,7,8,9,10,11])\n",
        "num_ids": 59
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [item[n] for item in list1]\n",
        "num_ids": 16
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n][1]\n",
        "num_ids": 12
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [t[n] for t in list1]\n",
        "num_ids": 16
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [y[n] for y in list1]\n",
        "num_ids": 16
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [x[n] for x in list1]\n",
        "num_ids": 16
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [list1[i][n] for i in range(len(list1))]\n",
        "num_ids": 24
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [t[n] for t in list1]\n",
        "num_ids": 16
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [item[n] for item in list1]\n",
        "num_ids": 16
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    \n    for i in range(0, len(list1)):\n        if i == n:\n            return list1[i]\n",
        "num_ids": 34
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return bool(set(list1) & set(list2))\n    \n",
        "num_ids": 20
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for x in list1:\n        if x in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    #for value in list1:\n        #if value in list2:\n            #return True\n    #return False\n    #return len(set(list1)&set(list2))!=0\n    return len(list(set(list1)&set(list2)))>0\n",
        "num_ids": 70
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    temp=[]\n    for i in list1:\n        if i in list2:\n            temp.append(i)\n    return temp\ndef unique(list1):\n    '''\n    Write a python function to check whether a sequence contains all the unique elements.\n    '''\n    temp=[]\n    for i in list1:\n        if i not in temp:\n            temp.append(i)\n    return temp\ndef distinct(list1):\n    '''\n    Write a python function to check whether a sequence contains all the distinct elements.\n    '''\n    temp=[]\n    for i in list1:\n        if i not in temp:\n            temp.append(i)\n    return temp\ndef minimum(list1):\n    '''\n    Write a python function to find the minimum element in a list.\n    '''\n    return min(list1)\ndef maximum(list1):\n    '''\n    Write a python function to find the maximum element in a list.\n    '''\n    return max(list1)\ndef median(list1):\n    '''\n    Write a python function to find the median element in a list.\n    '''\n    return (list1[len(list1)//2]+list1[len(list1)//2-1])/2\ndef mean(list1):\n    '''\n    Write a python function to find the mean element in a list.\n    '''\n    return sum(list1)/len(list1)\ndef mode(list1):\n    '''\n    Write a python function to find the mode element in a list.\n    '''\n    temp=[]\n    for i in list1:\n        if i not in temp:\n            temp.append(i)\n    return temp[mode(temp)]\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\ndef sum(list1):\n    '''\n    Write a python function to find the sum of all elements in a list.\n    '''\n    return sum(list1)\ndef sort(list1):\n    '''\n    Write a python function to sort a list.\n    '''\n    temp=[]\n    for i in list1:\n        temp.append(i)\n    temp.sort()\n    return temp\ndef reversed(list1):\n    '''\n    Write a python function to reverse a list.\n    '''\n    return list1[::-1]\ndef count(list1,element):\n    '''\n    Write a python function to count the number of times an element appears in a list.\n    '''\n    return list1.count(element)\ndef remove(list1,element):\n    '''\n    Write a python function to remove an element from a list.\n    '''\n    return list1.remove(element)\ndef delete(list1,index):\n    '''\n    Write a python function to remove a range of elements from a list.\n    '''\n    del list1[index]\n    return list1\ndef insert(list1,element,index):\n    '''\n    Write a python function to insert an element at a specific index in a list.\n    '''\n    list1.insert(index,element)\n    return list1\ndef extend(list1,list2):\n    '''\n    Write a python function to merge two lists.\n    '''\n    return list1+list2\ndef pop(list1,index):\n    '''\n    Write a python function to remove a range of elements from a list.\n    '''\n    del list1[index]\n    return list1\ndef remove(list1,element):\n    '''\n    Write a python function to remove an element from a list.\n    '''\n    for i in range(len(list1)):\n        if list1[i]==element:\n            del list1[i]\n    return list1\ndef insert(list1,element,index):\n    '''\n    Write a python function to insert an element at a specific index in a list.\n    '''\n    list1.insert(index,element)\n    return list1\ndef range(start,stop,step=1):\n    '''\n    Write a python function to generate a list of numbers from a given range.\n    '''\n    return range(start,stop,step)\ndef index(list1,element):\n    '''\n    Write a python function to find the index of an element in a list.\n    '''\n    return list1.index(element)\ndef count(list1,element):\n    '''\n    Write a python function to find the frequency of an element in a list.\n    '''\n    return list1.count(element)\ndef index(list1,element):\n    '''\n    Write a python function to find the index of an element in a list.\n    '''\n    return list1.index(element)\ndef count(list1,element):\n    '''\n    Write a python function to find the frequency of an element in a list.\n    '''\n    return list1.count(element)\ndef count(list1,element):\n    '''\n    Write a python function to find the frequency of an element in a list.\n    '''\n    return list1.count(element)\ndef count(list1,element):\n    '''\n    Write a python function to find the frequency of an element in a list.\n    '''\n    return list1.count(element)\ndef count(list1,element):\n    '''\n    Write a python function to find the frequency of an element in a list.\n    '''\n    return list1.count(element)\ndef count(list1,element):\n    '''\n    Write a python function to find the frequency of an element in a list.\n    '''\n    return list1.count(element)\ndef count(list1,element):\n    '''\n    Write a python function to find the frequency of an element in a list.\n    '''\n    return list1.count(element)\ndef count(list1,element):\n    '''\n    Write a python function to find the frequency of an element in a list.\n    '''\n    return list1.count(element)\ndef count(list1,element):\n    '''\n    Write a python function to find the frequency of an element in a list.\n    '''\n    return list1.count(element)\ndef count(list1,element):\n    '''\n    Write a python function to find the frequency of an element in a list.\n    '''\n    return list1.count(element)\ndef count(list1,element):\n    '''\n    Write a python function to find the frequency of an element in a list.\n    '''\n    return list1.count(element)\ndef count(list1,element):\n    '''\n    Write a python function to find the frequency of an element in a list.\n    '''\n    return list1.count(element)\ndef count(list1,element):\n    '''\n    Write a python function to find the frequency of an element in a list.\n    '''\n    return list1.count(element)\ndef count(list1,element):\n    '''\n    Write a python function to find the frequency of an element in a list.\n    '''\n    return list1.count(element)\ndef count(list1,element):\n    '''\n    Write a python function to find the frequency of an element in a list.\n    '''\n    return list1.count(element)\ndef count(list1,element):\n    '''\n    Write a python function to find the frequency of an element in a list.\n    '''\n    return list1.count(element)\ndef count(list1,element):\n    '''\n    Write a python function to find the frequency of an element in a list.\n    '''\n    return list1.count(element)\ndef count(list1,element):\n    '''\n    Write a python function to find the frequency of an element in a list.\n    '''\n    return list1.count(element)\ndef count(list1,element):\n    '''\n    Write a python function to find the frequency of an element in a list.\n    '''\n    return list1.count(element)\ndef count(list1,element):\n    '''\n    Write a python function to find the frequency of an element in a list.\n    '''\n    return list1.count(element)\ndef coun",
        "num_ids": 14
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in range(len(list1)):\n        if list2.count(list1[i]) > 0:\n            return True\n    return False\n",
        "num_ids": 39
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return bool(set(list1) & set(list2))\n",
        "num_ids": 18
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\ndef common(list1,list2):\n    '''\n    Write a python function to check if all the values in a sequence are present in a sequence or not.\n    '''\n    for i in list1:\n        if i not in list2:\n            return False\n    return True\ndef all_unique(s):\n    '''\n    Write a python function to check if all the values in a sequence are present in a sequence or not.\n    '''\n    d={}\n    for i in s:\n        if i not in d.keys():\n            d[i]=1\n        else:\n            return False\n    return True\ndef uncommon(list1,list2):\n    '''\n    Write a python function to check if all the values in a sequence are present in a sequence or not.\n    '''\n    d={}\n    for i in list1:\n        if i not in d.keys():\n            d[i]=1\n        else:\n            d[i]+=1\n    for i in list2:\n        if i in d.keys():\n            d[i]-=1\n    for i in d.keys():\n        if d[i]!=0:\n            return False\n    return True\ndef generate(n,start,end):\n    '''\n    Write a python function to generate all the possible permutations of a given string\n    '''\n    final=[]\n    if n==1:\n        for i in range(start,end+1):\n            final.append(i)\n    else:\n        for i in range(start,end+1):\n            for j in generate(n-1,i+1,end):\n                final.append(j)\n    return final\ndef binary_search(list1,number):\n    '''\n    Write a python function to search for an element in a sorted list using binary search\n    '''\n    list2=sorted(list1)\n    list3=[]\n    l=0\n    h=len(list2)-1\n    while l<=h:\n        mid=(l+h)//2\n        if list2[mid]==number:\n            return True\n        elif list2[mid]<number:\n            l=mid+1\n        else:\n            h=mid-1\n    return False\ndef selection_sort(list1):\n    '''\n    Write a python function to sort a list using selection sort\n    '''\n    for i in range(len(list1)-1):\n        min_index=i\n        for j in range(i+1,len(list1)):\n            if list1[j]<list1[min_index]:\n                min_index=j\n        if min_index!=i:\n            list1[i],list1[min_index]=list1[min_index],list1[i]\n    return list1\ndef bubble_sort(list1):\n    '''\n    Write a python function to sort a list using bubble sort\n    '''\n    for i in range(len(list1)-1):\n        for j in range(len(list1)-i-1):\n            if list1[j]>list1[j+1]:\n                list1[j],list1[j+1]=list1[j+1],list1[j]\n    return list1\ndef merge_sort(list1):\n    '''\n    Write a python function to sort a list using merge sort\n    '''\n    if len(list1)>1:\n        mid=len(list1)//2\n        left=list1[:mid]\n        right=list1[mid:]\n        merge_sort(left)\n        merge_sort(right)\n        i=0\n        j=0\n        k=0\n        while i<len(left) and j<len(right):\n            if left[i]<=right[j]:\n                list1[k]=left[i]\n                i+=1\n            else:\n                list1[k]=right[j]\n                j+=1\n            k+=1\n        while i<len(left):\n            list1[k]=left[i]\n            i+=1\n            k+=1\n        while j<len(right):\n            list1[k]=right[j]\n            j+=1\n            k+=1\n    return list1\ndef quick_sort(list1,start,end):\n    '''\n    Write a python function to sort a list using quick sort\n    '''\n    if start<end:\n        pivot=list1[end]\n        pivot_index=start\n        for i in range(start,end):\n            if list1[i]<pivot:\n                list1[i],list1[pivot_index]=list1[pivot_index],list1[i]\n                pivot_index+=1\n        list1[pivot_index],list1[end]=list1[end],list1[pivot_index]\n        quick_sort(list1,start,pivot_index-1)\n        quick_sort(list1,pivot_index+1,end)\n    return list1\ndef exchange_sort(list1):\n    '''\n    Write a python function to sort a list using exchange sort\n    '''\n    for i in range(len(list1)-1):\n        for j in range(len(list1)-i-1):\n            if list1[j]>list1[j+1]:\n                list1[j],list1[j+1]=list1[j+1],list1[j]\n    return list1\ndef shell_sort(list1):\n    '''\n    Write a python function to sort a list using shell sort\n    '''\n    h=1\n    while h<len(list1)//3:\n        h=3*h+1\n    while h>0:\n        for i in range(h,len(list1)):\n            temp=list1[i]\n            j=i-h\n            while j>=0 and list1[j]>temp:\n                list1[j+h]=list1[j]\n                j-=h\n            list1[j+h]=temp\n        h=h//3\n    return list1\ndef random_list(n,start,end):\n    '''\n    Write a python function to generate a random list of n elements\n    '''\n    import random\n    list1=[]\n    for i in range(n):\n        list1.append(random.randrange(start,end))\n    return list1\ndef hash_table(list1,number):\n    '''\n    Write a python function to search for an element in a hash table using hash function\n    '''\n    hash_value=number%len(list1)\n    if list1[hash_value]==number:\n        return True\n    return False\ndef hash_function(key,size):\n    '''\n    Write a python function to generate a hash function\n    '''\n    return key%size\ndef hash_table_sort(list1):\n    '''\n    Write a python function to sort a list using hash table sort\n    '''\n    hash_table=[]\n    for i in range(len(list1)):\n        hash_table.append([])\n    for i in list1:\n        hash_value=hash_function(i,len(list1))\n        hash_table[hash_value].append(i)\n    for i in range(len(list1)):\n        hash_table[i]=sorted(hash_table[i])\n    list2=[]\n    for i in range(len(list1)):\n        for j in range(len(hash_table[i])):\n            list2.append(hash_table[i][j])\n    return list2\ndef heap_sort(list1):\n    '''\n    Write a python function to sort a list using heap sort\n    '''\n    import heapq\n    heapq.heapify(list1)\n    return list1\ndef merge_sort(list1,start,end):\n    '''\n    Write a python function to sort a list using merge sort\n    '''\n    if start<end:\n        mid=start+end//2\n        merge_sort(list1,start,mid)\n        merge_sort(list1,mid+1,end)\n        l=[]\n        i=start\n        j=mid+1\n        while i<=mid and j<=en",
        "num_ids": 76
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(x in list1 for x in list2)\ndef common_chars(list1):\n    '''\n    Write a python function to find common characters in a list.\n    '''\n    lst=[]\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if len(set(list1[i]).intersection(set(list1[j])))>0:\n                lst.append(set(list1[i]).intersection(set(list1[j])))\n    return lst\ndef rot(str,num):\n    '''\n    Write a python function to rotate a string by a given number of characters.\n    '''\n    if num>0:\n        return str[-num:] + str[:-num]\n    else:\n        return str[num:] + str[:num]\ndef rev(str):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return str[::-1]\ndef remove_chars(str,chars):\n    '''\n    Write a python function to remove a given set of characters from a string.\n    '''\n    for i in chars:\n        str=str.replace(i,'')\n    return str\ndef count_vowels(str):\n    '''\n    Write a python function to count number of vowels in a string.\n    '''\n    count=0\n    vowels=['a','e','i','o','u']\n    for i in range(len(str)):\n        if str[i] in vowels:\n            count+=1\n    return count\ndef count_consonants(str):\n    '''\n    Write a python function to count number of consonants in a string.\n    '''\n    count=0\n    consonants=['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','x','z','w','y','B','C','D','F','G','H','J','K','L','M','N','P','Q','R','S','T','V','X','Z','W','Y']\n    for i in range(len(str)):\n        if str[i] in consonants:\n            count+=1\n    return count\ndef count_digits(str):\n    '''\n    Write a python function to count number of digits in a string.\n    '''\n    count=0\n    for i in range(len(str)):\n        if str[i].isdigit():\n            count+=1\n    return count\ndef count_uppercase_letters(str):\n    '''\n    Write a python function to count number of uppercase letters in a string.\n    '''\n    count=0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count+=1\n    return count\ndef count_lowercase_letters(str):\n    '''\n    Write a python function to count number of lowercase letters in a string.\n    '''\n    count=0\n    for i in range(len(str)):\n        if str[i].islower():\n            count+=1\n    return count\ndef count_capital_letters(str):\n    '''\n    Write a python function to count number of capital letters in a string.\n    '''\n    count=0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count+=1\n    return count\ndef count_letters(str):\n    '''\n    Write a python function to count number of alphabetic letters in a string.\n    '''\n    count=0\n    for i in range(len(str)):\n        if str[i].isalpha():\n            count+=1\n    return count\ndef count_special_chars(str):\n    '''\n    Write a python function to count number of special characters in a string.\n    '''\n    count=0\n    for i in range(len(str)):\n        if str[i]==' ':\n            count+=1\n    return count\ndef is_palindrome(str):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return str==str[::-1]\ndef count_words(str):\n    '''\n    Write a python function to count number of words in a string.\n    '''\n    return len(str.split())\ndef last_nth_char(str,n):\n    '''\n    Write a python function to return the nth last character in a string.\n    '''\n    return str[-n]\ndef first_nth_char(str,n):\n    '''\n    Write a python function to return the nth first character in a string.\n    '''\n    return str[n]\ndef word_count(str):\n    '''\n    Write a python function to count number of words in a string.\n    '''\n    return len(str.split())\ndef char_frequency(str):\n    '''\n    Write a python function to count frequency of each character in a string.\n    '''\n    lst=[]\n    for i in range(len(str)):\n        lst.append([str[i],str.count(str[i])])\n    return lst\ndef count_vowels_in_string(str):\n    '''\n    Write a python function to count number of vowels in a string.\n    '''\n    count=0\n    vowels=['a','e','i','o','u']\n    for i in range(len(str)):\n        if str[i] in vowels:\n            count+=1\n    return count\ndef count_consonants_in_string(str):\n    '''\n    Write a python function to count number of consonants in a string.\n    '''\n    count=0\n    consonants=['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','x','z','w','y','B','C','D','F','G','H','J','K','L','M','N','P','Q','R','S','T','V','X','Z','W','Y']\n    for i in range(len(str)):\n        if str[i] in consonants:\n            count+=1\n    return count\ndef count_digits_in_string(str):\n    '''\n    Write a python function to count number of digits in a string.\n    '''\n    count=0\n    for i in range(len(str)):\n        if str[i].isdigit():\n            count+=1\n    return count\ndef count_uppercase_letters_in_string(str):\n    '''\n    Write a python function to count number of uppercase letters in a string.\n    '''\n    count=0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count+=1\n    return count\ndef count_lowercase_letters_in_string(str):\n    '''\n    Write a python function to count number of lowercase letters in a string.\n    '''\n    count=0\n    for i in range(len(str)):\n        if str[i].islower():\n            count+=1\n    return count\ndef count_capital_letters_in_string(str):\n    '''\n    Write a python function to count number of capital letters in a string.\n    '''\n    count=0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count+=1\n    return count\ndef count_letters_in_string(str):\n    '''\n    Write a python function to count number of alphabetic letters in a string.\n    '''\n    count=0\n    for i in range(len(str)):\n        if str[i].isalpha():\n            count+=1\n    return count\ndef count_special_chars_in_string(str):\n    '''\n    Write a python function to count number of special characters in a string.\n    '''\n    count=0\n    for i in range(len(str)):\n        if str[i]==' ':\n            count+=1\n    return count\ndef count_spaces(str):\n    '''\n    Write a python function to count number of spaces in a strin",
        "num_ids": 16
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize variables\n    m = arr[0]\n    n = arr[1]\n    max_product = arr[0]*arr[1]\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            product = arr[i]*arr[j]\n            if product > max_product:\n                max_product = product\n                #print max_product, arr[i], arr[j]\n    return max_product\n",
        "num_ids": 120
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0]*arr[1]*arr[2]\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if(arr[i]*arr[j]>max_product):\n                max_product = arr[i]*arr[j]\n    return max_product\n",
        "num_ids": 89
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if arr[i] * arr[j] > result: \n                result = arr[i] * arr[j]\n                pair = (arr[i], arr[j])\n    return pair \n",
        "num_ids": 79
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    left_max = [0]*(len(arr))\n    right_max = [0]*(len(arr))\n    left_max[0] = arr[0]\n    right_max[len(arr)-1] = arr[len(arr)-1]\n    for i in xrange(1, len(arr)):\n        left_max[i] = max(arr[i], left_max[i-1]*arr[i])\n    for i in reversed(xrange(len(arr)-1)):\n        right_max[i] = max(arr[i], right_max[i+1]*arr[i])\n    for i in xrange(len(arr)):\n        if left_max[i]*right_max[i] > max_product:\n            max_product = left_max[i]*right_max[i]\n    return max_product\n",
        "num_ids": 213
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    n = len(arr)\n    max_product = -1\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if (arr[i]*arr[j]) > max_product:\n                max_product = arr[i]*arr[j]\n                pair = (arr[i],arr[j])\n    return pair\n",
        "num_ids": 98
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    #Initialize the variables\n    min_product = arr[0]*arr[1]\n    max_product = arr[0]*arr[1]\n    min_num = arr[0]\n    max_num = arr[0]\n",
        "num_ids": 59
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # basic idea is to sort the array and for each subarray find the max and min elements. \n    # the product of both these elements is the largest product.\n    # we keep track of two pointers and max_product. We can move one pointer from each array \n    # and the other pointer moves towards the other array. If the next element of the next array\n    # is greater than the current element, the min_product value will be updated to the current element. \n    # The other pointer will move towards the next element and so on. \n    # At the end, the max_product will be the maximum of the max_product and min_product.\n    # time complexity - O(nlogn)\n    # space complexity - O(n)\n    arr.sort()\n    max_product = 1\n    min_product = 1\n    for i in range(len(arr)-1):\n        if arr[i] < 0:\n            max_product = max(max_product, arr[i]*arr[i+1])\n            min_product = min(min_product, arr[i]*arr[i+1])\n        else:\n            max_product = max(max_product, arr[i]*arr[i+1])\n            min_product = min(min_product, arr[i]*arr[i+1])\n    return max_product\n",
        "num_ids": 315
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    n=len(arr)\n    a=arr[0]\n    b=arr[n-1]\n    maxp=0\n    for i in range(n):\n        for j in range(n-1,i,-1):\n            if a*arr[i]*arr[j]>maxp:\n                maxp=a*arr[i]*arr[j]\n                a,b=arr[i],arr[j]\n    return a,b,maxp\n",
        "num_ids": 121
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    import sys\n    max_value = max(arr)\n    min_value = min(arr)\n    max_product = 1\n    for i in arr:\n        max_product *= i\n    for i in arr:\n        if (i == max_value) or (i == min_value):\n            arr.remove(i)\n            max_product /= i\n    return max_product\n",
        "num_ids": 95
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    if n < 2:\n        return None\n    if n == 2:\n        return (arr[0], arr[1])\n    if n == 3:\n        return (arr[1], arr[2]) if arr[0] * arr[1] > arr[0] * arr[2] else (arr[0], arr[2])\n    else:\n        p = [arr[0]]\n        max_prod = arr[0]\n        for i in range(1, n):\n            p.append(arr[i] * p[i - 1])\n            max_prod = max(max_prod, p[i])\n        print max_prod\n        return (max_prod, p)\n",
        "num_ids": 177
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if Input:\n        common = Input[0]\n        for x in Input:\n            common = list(set(common) & set(x))\n            if common:\n                return common\n    return None\n",
        "num_ids": 50
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    for a, b in Input: \n        if a in result: \n            result.append(b)\n    return result\n    \n    \nif __name__ == '__main__':\n    Input = [(\"A\", \"B\"), (\"C\", \"D\"), (\"E\", \"F\"), (\"G\", \"H\")]\n    print(group_tuples(Input))\n    \n    \n    \n    \n    ",
        "num_ids": 102
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Input = [('a', 5), ('a', 6), ('b', 7), ('b', 8), ('c', 9)]\n    Output = []\n    for tup in Input:\n        Output.append(tup[0])\n    # print (Output)\n    # Output = ['a', 'b', 'c']\n    return Output\n",
        "num_ids": 82
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # your code here\n    list_=[]\n    for i in Input:\n        list_.append(i[0])\n    return list_\n    \nInput = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6)]\nprint group_tuples(Input)",
        "num_ids": 80
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input.sort()\n    Output = []\n    for i in Input:\n        Output.append(i[0])\n    Output = set(Output)\n    return Output\n",
        "num_ids": 42
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return set(Input[0][0])\n",
        "num_ids": 13
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Time Complexity: O(n^2)\n    # Space Complexity: O(n)\n    # Input: List of Tuple\n    # Return: List of Tuple\n    # Assumptions: List of Tuple is sorted\n",
        "num_ids": 57
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # your code goes here\n",
        "num_ids": 9
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    def common_first_element(input):\n        if input:\n            return min(input, key = lambda x:x[0])[0]\n        else:\n            return None\n",
        "num_ids": 45
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Dict={}\n    for i in Input:\n        if i[0] in Dict:\n            Dict[i[0]]+=1\n        else:\n            Dict[i[0]]=1\n    return Dict\n",
        "num_ids": 57
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if not lst:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        first = lst[0]\n        second = lst[1]\n        if len(first) > len(second):\n            return first\n        elif len(second) > len(first):\n            return second\n        else:\n            return first\n            \n    \ndef Min_Length(lst):\n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    if not lst:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        first = lst[0]\n        second = lst[1]\n        if len(first) < len(second):\n            return first\n        elif len(second) < len(first):\n            return second\n        else:\n            return first\n            \n            \ndef Find_Min(lst):\n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    if not lst:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        first = lst[0]\n        second = lst[1]\n        if len(first) < len(second):\n            return first\n        elif len(second) < len(first):\n            return second\n        else:\n            return first\n            \n            \ndef Count_Occurrences(lst, elem):\n    '''\n    Write a python function to find the number of occurrences of an element in a list.\n    '''\n    if not lst:\n        return None\n    elif len(lst) == 1:\n        return 0\n    else:\n        first = lst[0]\n        second = lst[1]\n        if first == elem:\n            return 1 + Count_Occurrences(lst[1:], elem)\n        else:\n            return Count_Occurrences(lst[1:], elem)\n            \n            \ndef Replace(lst, elem, newelem):\n    '''\n    Write a python function to replace the element with a new element in a list.\n    '''\n    if not lst:\n        return None\n    elif len(lst) == 1:\n        return lst\n    else:\n        first = lst[0]\n        second = lst[1]\n        if first == elem:\n            return [newelem] + lst[1:]\n        else:\n            return [first] + Replace(lst[1:], elem, newelem)\n        \n            \ndef Swap(lst, elem1, elem2):\n    '''\n    Write a python function to swap elements in a list.\n    '''\n    if not lst:\n        return None\n    elif len(lst) == 1:\n        return lst\n    else:\n        first = lst[0]\n        second = lst[1]\n        if first == elem1:\n            return [second, elem1] + lst[2:]\n        elif first == elem2:\n            return [second, elem2] + lst[2:]\n        else:\n            return [first] + Swap(lst[1:], elem1, elem2)\n            \n            \ndef Reverse(lst):\n    '''\n    Write a python function to reverse a list.\n    '''\n    if not lst:\n        return None\n    elif len(lst) == 1:\n        return lst\n    else:\n        first = lst[0]\n        second = lst[1]\n        return [second] + Reverse(lst[1:])\n        \n        \ndef Merge(lst1, lst2):\n    '''\n    Write a python function to merge two sorted lists.\n    '''\n    if not lst1:\n        return lst2\n    elif not lst2:\n        return lst1\n    else:\n        first = lst1[0]\n        second = lst2[0]\n        if first < second:\n            return [first] + Merge(lst1[1:], lst2)\n        else:\n            return [second] + Merge(lst1, lst2[1:])\n            \n            \ndef Merge_Sort(lst):\n    '''\n    Write a python function to sort a list using merge sort.\n    '''\n    if not lst:\n        return None\n    elif len(lst) == 1:\n        return lst\n    else:\n        first = lst[0]\n        second = lst[1]\n        if first < second:\n            return [first] + Merge_Sort(lst[1:])\n        else:\n            return [second] + Merge_Sort(lst[1:])\n            \n            \ndef Remove_Duplicates(lst):\n    '''\n    Write a python function to remove duplicates in a list.\n    '''\n    if not lst:\n        return None\n    elif len(lst) == 1:\n        return lst\n    else:\n        first = lst[0]\n        second = lst[1]\n        if first == second:\n            return [first] + Remove_Duplicates(lst[1:])\n        else:\n            return [first] + Remove_Duplicates(lst[1:])\n            \n            \ndef Copy_List(lst):\n    '''\n    Write a python function to copy a list.\n    '''\n    if not lst:\n        return None\n    elif len(lst) == 1:\n        return lst\n    else:\n        first = lst[0]\n        second = lst[1]\n        return [first] + Copy_List(lst[1:])\n            \n            \ndef Intersection(lst1, lst2):\n    '''\n    Write a python function to find the intersection of two sorted lists.\n    '''\n    if not lst1:\n        return None\n    elif not lst2:\n        return None\n    else:\n        first = lst1[0]\n        second = lst2[0]\n        if first == second:\n            return [first] + Intersection(lst1[1:], lst2[1:])\n        else:\n            return Intersection(lst1[1:], lst2[1:])\n            \n            \ndef Union(lst1, lst2):\n    '''\n    Write a python function to find the union of two sorted lists.\n    '''\n    if not lst1:\n        return lst2\n    elif not lst2:\n        return lst1\n    else:\n        first = lst1[0]\n        second = lst2[0]\n        if first < second:\n            return [first] + Union(lst1[1:], lst2)\n        else:\n            return [second] + Union(lst1, lst2[1:])\n            \n            \ndef Pop_List(lst):\n    '''\n    Write a python function to remove the last element of a list.\n    '''\n    if not lst:\n        return None\n    elif len(lst) == 1:\n        return lst\n    else:\n        first = lst[0]\n        second = lst[1]\n        if first == second:\n            return [first] + Pop_List(lst[1:])\n        else:\n            return [first] + Pop_List(lst[1:])\n            \n            \ndef Remove(lst, elem):\n    '''\n    Write a python function to remove the element from a list.\n    '''\n    if not lst:\n        return None\n    elif len(lst) == 1:\n        return lst\n    else:\n        first = lst[0]\n        second = lst[1]\n        if first == elem:\n            return lst[1:]\n        else:\n            return [first] + Remove(lst[1:], elem)\n            \n            \ndef Insert(lst, elem, pos):\n    '''\n    Write a python function to insert an element in a list at a specified position.\n    '''\n    if not lst:\n        return None\n    elif len",
        "num_ids": 17
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max=0\n    for i in lst:\n        if len(i)>max:\n            max=len(i)\n    print(\"maximum is :\",max)\n",
        "num_ids": 43
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in lst:\n        if len(i)>max:\n            max = len(i)\n            max_value = i\n    return max_value\n",
        "num_ids": 46
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    n = len(lst)\n    max_len = 1\n    for i in range(0,n):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n            max_index = i\n    return lst[max_index]\n",
        "num_ids": 74
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_item = None\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_item = i\n    return max_item\n",
        "num_ids": 59
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for item in lst:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_element = item\n    return max_element\n",
        "num_ids": 59
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0])\n    max_element = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n            max_element = lst[i]\n    return max_element, max_len\n",
        "num_ids": 90
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_item = None\n    for item in lst:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_item = item\n    return max_item\n",
        "num_ids": 59
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = max(len(i) for i in lst) \n    return [i for i in lst if len(i) == max_len] \n",
        "num_ids": 42
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maxlen = len(lst[0])\n    for i in lst:\n        if len(i) > maxlen:\n            maxlen = len(i)\n            m = i\n    return m\n    \nlst = []\nn = int(input(\"Enter the number of elements in the list: \"))\nfor i in range(0,n):\n    ele = input()\n    lst.append(ele)\nprint(Find_Max(lst))",
        "num_ids": 110
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        rounded = round(i)\n        total = total + rounded\n    return total * len(list1)\n",
        "num_ids": 40
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for num in list1:\n        sum += round(num,1)\n    print(sum*len(list1))\n",
        "num_ids": 36
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1 = [round(x) for x in list1]\n    return sum(list1) * len(list1)\n",
        "num_ids": 32
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # make sure your list is a list of numbers\n    for i in list1:\n        try:\n            i = float(i)\n            list1.remove(i)\n            list1.append(round(i))\n        except ValueError:\n            print('Please enter only numbers in your list!')\n            sys.exit()\n    print(sum(list1) * len(list1))\n",
        "num_ids": 94
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return round(sum(list1) * len(list1))\n",
        "num_ids": 18
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        sum += round(i)\n    return (sum, len(list1))\n",
        "num_ids": 34
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    if len(list1) == 0:\n        return \"Cannot sum a empty list!\"\n    else:\n        total = 0\n        for item in list1:\n            total += round(item)\n        return total*len(list1)\n",
        "num_ids": 59
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    n = 0\n    for x in list1:\n        n += round(x)\n    return n * len(list1)\n",
        "num_ids": 33
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    def round(num):\n        return round(num)\n    return sum(map(round, list1)) * len(list1)\n",
        "num_ids": 34
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for item in list1:\n        rounded = round(item)\n        total = total + rounded\n    print \"Total is \" + str(total) + \" and total length is \" + str(len(list1))\n",
        "num_ids": 57
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    c=0\n    for i in range(1,n+1,2):\n        c+=i**3\n    return c\n",
        "num_ids": 33
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    c = 0\n    for x in range(0,n):\n        if x % 2 == 0:\n            c += x ** 3\n    return c\n",
        "num_ids": 38
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(2,n+1,2): \n        total = total + i**3 \n    return total \n",
        "num_ids": 38
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n**3 + cube_Sum(n-2)\n",
        "num_ids": 32
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n<0:\n        return 0\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 4\n    return  4*(n**3) + (n**2) + n \n",
        "num_ids": 77
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(n):\n        if i % 2 == 0:\n            result += i * i * i\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum(range(2,n+1,2))**3\n",
        "num_ids": 19
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([i**3 for i in xrange(1,n,2)])\n",
        "num_ids": 23
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if i%2 ==0:\n            count = count + i**3\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(n):\n        s = s + (2*i+1)**3\n    return s\n",
        "num_ids": 35
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    return delimiter.join(test_tup)\n",
        "num_ids": 22
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    new_str = ''\n    for i in test_tup:\n        new_str += str(i) + '-'\n    return new_str[:-1]\n",
        "num_ids": 42
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n    \n    \ndef concatenate_list(test_list):\n    '''\n    Write a function to concatenate each element of list by the delimiter.\n    '''\n    return delimiter.join(test_list)\n    \n    \ndef concatenate_dict(test_dict):\n    '''\n    Write a function to concatenate each key and value of dict by the delimiter.\n    '''\n    return delimiter.join([f'{key}={value}' for key, value in test_dict.items()])\n    \n    \ndef concatenate_dict2(test_dict):\n    '''\n    Write a function to concatenate each key and value of dict by the delimiter.\n    '''\n    return delimiter.join(f'{key}={value}' for key, value in test_dict.items())\n    \n    \ndef concatenate_dict3(test_dict):\n    '''\n    Write a function to concatenate each key and value of dict by the delimiter.\n    '''\n    return delimiter.join(f'{key}={value}' for key, value in test_dict.items())\n    \n    \ndef concatenate_dict4(test_dict):\n    '''\n    Write a function to concatenate each key and value of dict by the delimiter.\n    '''\n    return delimiter.join(f'{key}={value}' for key, value in test_dict.items() if key == 'key')\n    \n    \ndef concatenate_dict5(test_dict):\n    '''\n    Write a function to concatenate each key and value of dict by the delimiter.\n    '''\n    return delimiter.join(f'{key}={value}' for key, value in test_dict.items() if key == 'key' and value == 'value')\n    \n    \ndef concatenate_dict6(test_dict):\n    '''\n    Write a function to concatenate each key and value of dict by the delimiter.\n    '''\n    return delimiter.join(f'{key}={value}' for key, value in test_dict.items() if key == 'key' and value == 'value' or key == 'value')\n    \n    \ndef concatenate_dict7(test_dict):\n    '''\n    Write a function to concatenate each key and value of dict by the delimiter.\n    '''\n    return delimiter.join(f'{key}={value}' for key, value in test_dict.items() if key == 'key' or key == 'value')\n    \n    \ndef concatenate_dict8(test_dict):\n    '''\n    Write a function to concatenate each key and value of dict by the delimiter.\n    '''\n    return delimiter.join(f'{key}={value}' for key, value in test_dict.items() if key == 'key' or key == 'value' or value == 'value')\n    \n    \ndef concatenate_dict9(test_dict):\n    '''\n    Write a function to concatenate each key and value of dict by the delimiter.\n    '''\n    return delimiter.join(f'{key}={value}' for key, value in test_dict.items() if key == 'key' or key == 'value' or value == 'value' or value == 'value')\n    \n    \ndef concatenate_dict10(test_dict):\n    '''\n    Write a function to concatenate each key and value of dict by the delimiter.\n    '''\n    return delimiter.join(f'{key}={value}' for key, value in test_dict.items() if key == 'key' or key == 'value' or value == 'value' or value == 'value' or key == 'value')\n    \n    \ndef concatenate_dict11(test_dict):\n    '''\n    Write a function to concatenate each key and value of dict by the delimiter.\n    '''\n    return delimiter.join(f'{key}={value}' for key, value in test_dict.items() if key == 'key' or key == 'value' or value == 'value' or value == 'value' or key == 'value' or value == 'value')\n    \n    \ndef concatenate_dict12(test_dict):\n    '''\n    Write a function to concatenate each key and value of dict by the delimiter.\n    '''\n    return delimiter.join(f'{key}={value}' for key, value in test_dict.items() if key == 'key' or key == 'value' or value == 'value' or value == 'value' or key == 'value' or value == 'value' or key == 'value' or value == 'value')\n    \n    \ndef concatenate_dict13(test_dict):\n    '''\n    Write a function to concatenate each key and value of dict by the delimiter.\n    '''\n    return delimiter.join(f'{key}={value}' for key, value in test_dict.items() if key == 'key' or key == 'value' or value == 'value' or value == 'value' or key == 'value' or value == 'value' or key == 'value' or value == 'value' or key == 'value' or value == 'value')\n    \n    \ndef concatenate_dict14(test_dict):\n    '''\n    Write a function to concatenate each key and value of dict by the delimiter.\n    '''\n    return delimiter.join(f'{key}={value}' for key, value in test_dict.items() if key == 'key' or key == 'value' or value == 'value' or value == 'value' or key == 'value' or value == 'value' or key == 'value' or value == 'value' or key == 'value' or value == 'value' or key == 'value')\n    \n    \ndef concatenate_dict15(test_dict):\n    '''\n    Write a function to concatenate each key and value of dict by the delimiter.\n    '''\n    return delimiter.join(f'{key}={value}' for key, value in test_dict.items() if key == 'key' or key == 'value' or value == 'value' or value == 'value' or key == 'value' or value == 'value' or key == 'value' or value == 'value' or key == 'value' or value == 'value' or key == 'value')\n    \n    \ndef concatenate_dict16(test_dict):\n    '''\n    Write a function to concatenate each key and value of dict by the delimiter.\n    '''\n    return delimiter.join(f'{key}={value}' for key, value in test_dict.items() if key == 'key' or key == 'value' or value == 'value' or value == 'value' or key == 'value' or value == 'value' or key == 'value' or value == 'value' or key == 'value' or value == 'value' or key == 'value')\n    \n    \ndef concatenate_dict17(test_dict):\n    '''\n    Write a function to concatenate each key and value of dict by the delimiter.\n    '''\n    return delimiter.join(f'{key}={value}' for key, value in test_dict.items() if key == 'key' or key == 'value' or value == 'value' or value == 'value' or key == 'value' or value == 'value' or key == 'value' or value == 'value' or key == 'value' or value == 'value' or key == 'value')\n    \n    \ndef concatenate_dict18(test_dict):\n    '''\n    Write a function to concatenate each key and value of dict by the delimiter.\n    '''\n    return delimiter.join(f'{key}={value}' for key, value in test_dict.items() if key == 'key' or key == 'value' or value == 'value' or value == 'value' or key == 'value' or value == 'value' or key == 'value' or value == 'value' or key == 'value' or value == 'value' or key == 'value')\n    \n    \ndef concatenate_dict19(test_dict):\n    '''\n    Write a function to concatenate each key and valu",
        "num_ids": 15
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    output = ''\n    for t in test_tup:\n        output = output + str(t) + ','\n    return output[:-1]\n    \n",
        "num_ids": 40
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \"\".join(test_tup)\n",
        "num_ids": 14
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # Your code here\n    new_tup = tuple()\n    for i in test_tup:\n        new_tup += i\n    return new_tup\n",
        "num_ids": 42
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    tuple_len = len(test_tup)\n    res = ''\n    for i in range(tuple_len):\n        res += test_tup[i]\n        if i!= tuple_len - 1:\n            res += delimiter\n    return res\n",
        "num_ids": 66
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    if len(test_tup) < 1:\n        return '()'\n    else:\n        result = ''\n        for i in test_tup:\n            result += str(i) + ', '\n        result = result[:-2]\n        return '(' + result + ')'\n    \ndef concatenate_tuple_with_delimiter(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter,\n    without using built-in functions.\n    '''\n    if len(test_tup) < 1:\n        return '()'\n    else:\n        result = test_tup[0]\n        for i in test_tup[1:]:\n            result += ','+ str(i)\n        return result\n    \ndef alternate_concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter,\n    without using built-in functions.\n    '''\n    if len(test_tup) < 1:\n        return '()'\n    else:\n        result = test_tup[0]\n        for i in test_tup[1:]:\n            result += ','+ str(i)\n        return result\n",
        "num_ids": 64
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return sum([n**3 for n in range(n)])/n\n    \ndef find_Average_Of_Square(n):  \n    '''\n    Write a python function to find the average of squares of first n natural numbers.\n    '''\n    return sum([n**2 for n in range(n)])/n\n    \ndef find_Average_Of_Cube_Square(n):  \n    '''\n    Write a python function to find the average of cube and square of first n natural numbers.\n    '''\n    return sum([n**3,n**2])/n\n    \ndef find_Average_Of_Cube_Square_Cube(n):  \n    '''\n    Write a python function to find the average of cube, square and cube of first n natural numbers.\n    '''\n    return sum([n**3,n**2,n])/n\n    \ndef find_Average_Of_Cube_Square_Square_Cube(n):  \n    '''\n    Write a python function to find the average of cube, square, square and cube of first n natural numbers.\n    '''\n    return sum([n**3,n**2,n,n])/n\n    \ndef find_Average_Of_Cube_Square_Square_Square_Cube(n):  \n    '''\n    Write a python function to find the average of cube, square, square, square and cube of first n natural numbers.\n    '''\n    return sum([n**3,n**2,n,n,n])/n\n    \ndef find_Average_Of_Cube_Square_Square_Square_Square_Cube(n):  \n    '''\n    Write a python function to find the average of cube, square, square, square, square and cube of first n natural numbers.\n    '''\n    return sum([n**3,n**2,n,n,n,n])/n\n    \ndef find_Average_Of_Cube_Square_Square_Square_Square_Square_Cube(n):  \n    '''\n    Write a python function to find the average of cube, square, square, square, square and square of first n natural numbers.\n    '''\n    return sum([n**3,n**2,n,n,n,n,n])/n\n    \ndef find_Average_Of_Cube_Square_Square_Square_Square_Square_Square_Cube(n):  \n    '''\n    Write a python function to find the average of cube, square, square, square, square and square of first n natural numbers.\n    '''\n    return sum([n**3,n**2,n,n,n,n,n,n])/n\n    \ndef find_Average_Of_Cube_Square_Square_Square_Square_Square_Square_Square_Cube(n):  \n    '''\n    Write a python function to find the average of cube, square, square, square, square and square of first n natural numbers.\n    '''\n    return sum([n**3,n**2,n,n,n,n,n,n,n])/n\n    \ndef find_Average_Of_Cube_Square_Square_Square_Square_Square_Square_Square_Square_Cube(n):  \n    '''\n    Write a python function to find the average of cube, square, square, square, square and square of first n natural numbers.\n    '''\n    return sum([n**3,n**2,n,n,n,n,n,n,n,n])/n\n    \ndef find_Average_Of_Cube_Square_Square_Square_Square_Square_Square_Square_Square_Square_Cube(n):  \n    '''\n    Write a python function to find the average of cube, square, square, square, square and square of first n natural numbers.\n    '''\n    return sum([n**3,n**2,n,n,n,n,n,n,n,n,n])/n\n    \ndef find_Average_Of_Cube_Square_Square_Square_Square_Square_Square_Square_Square_Square_Square_Cube(n):  \n    '''\n    Write a python function to find the average of cube, square, square, square, square and square of first n natural numbers.\n    '''\n    return sum([n**3,n**2,n,n,n,n,n,n,n,n,n,n])/n\n    \ndef find_Average_Of_Cube_Square_Square_Square_Square_Square_Square_Square_Square_Square_Square_Square_Cube(n):  \n    '''\n    Write a python function to find the average of cube, square, square, square, square and square of first n natural numbers.\n    '''\n    return sum([n**3,n**2,n,n,n,n,n,n,n,n,n,n,n])/n\n    \ndef find_Average_Of_Cube_Square_Square_Square_Square_Square_Square_Square_Square_Square_Square_Square_Square_Cube(n):  \n    '''\n    Write a python function to find the average of cube, square, square, square, square and square of first n natural numbers.\n    '''\n    return sum([n**3,n**2,n,n,n,n,n,n,n,n,n,n,n,n,n])/n\n    \ndef find_Average_Of_Cube_Square_Square_Square_Square_Square_Square_Square_Square_Square_Square_Square_Square_Square_Cube(n):  \n    '''\n    Write a python function to find the average of cube, square, square, square, square and square of first n natural numbers.\n    '''\n    return sum([n**3,n**2,n,n,n,n,n,n,n,n,n,n,n,n,n,n])/n\n    \ndef find_Average_Of_Cube_Square_Square_Square_Square_Square_Square_Square_Square_Square_Square_Square_Square_Square_Cube(n):  \n    '''\n    Write a python function to find the average of cube, square, square, square, square and square of first n natural numbers.\n    '''\n    return sum([n**3,n**2,n,n,n,n,n,n,n,n,n,n,n,n,n,n])/n\n    \ndef find_Average_Of_Cube_Square_Square_Square_Square_Square_Square_Square_Square_Square_Square_Square_Square_Square_Cube(n):  \n    '''\n    Write a python function to find the average of cube, square, square, square, square and square of first n natural numbers.\n    '''\n    return sum([n**3,n**2,n,n,n,n,n,n,n,n,n,n,n,n,n,n])/n\n    \ndef find_Average_Of_Cube_Square_Square_Square_Square_Square_Square_Square_Square_Square_Square_Square_Square_Square_Cube(n):  \n    '''\n    Write a python function to find the average of cube, square, square, square, square and square of first n natural numbers.\n    '''\n    return sum([n**3,n**2,n,n,n,n,n,n,n,n,n,n,n,n,n,n])/n\n    \ndef find_Average_Of_Cube_Square_Square_Square_Square_Square_Square_Square_Square_Square_Square_Square_Square_Square_Cube(n):  \n    '''\n    Write a python function to find the average of cube, square, square, square, square and square of first n natural numbers.\n    '''\n    return sum([n**3,n**2,n,n,n,n,n,n,n,n,n,n,n,n,n,n])/n\n    \ndef find_Average_Of_Cube_Square_Square_Square_Square_Square_Square_Square_Square_Square_Square_Square_Square_Square_Cube(n):  \n    '''\n    Write a python function to find the average of cube, square, square, square, square and square of first n natural numbers.\n    '''\n    return sum([n**3,n**2,n,n,n,n,n,n,n,n,n,n,n,n,n,n])/n\n    \ndef find_Average_Of_Cube_Square_Square_Square_Square_Square_Squar",
        "num_ids": 68
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    average = sum / n\n    return average\n",
        "num_ids": 40
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # Initialize sum and count as 0.\n    sum = 0\n    count = 0\n    # Iterate i from 1 to n.\n    for i in range(1, n+1):\n        # Update sum and count in every iteration.\n        sum = sum + i*i*i\n        count = count + 1\n    # Return average of the sum and count.\n    return float(sum/count)\n",
        "num_ids": 96
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + i * i * i\n    \n    average = sum/n\n    return average\n",
        "num_ids": 46
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    #take input\n    n = int(n)\n    #initialize the list\n    list = []\n    #loop through the list to add the cubes\n    for i in range(1,n+1):\n        list.append(i**3)\n    #find the sum of the list\n    sum = 0\n    for i in list:\n        sum = sum + i\n    #find the average of the list\n    average = sum / (n*n*n)\n    #print the result\n    print(\"The average of cubes of first\",n,\"natural numbers is\",average)\n    ",
        "num_ids": 137
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    #Initialize an array\n    sum_of_cubes = []\n    #Initialize a variable\n    i = 1\n    #Calculate the Sum\n    while i <= n:\n        sum_of_cubes.append(i**3)\n        i += 1\n    #Calculate the Average\n    average_of_cubes = sum(sum_of_cubes) / len(sum_of_cubes)\n    #Return the average\n    return average_of_cubes\n",
        "num_ids": 117
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes=[]\n    for x in range(1,n+1):\n        cubes.append(x**3)\n    return sum(cubes)/len(cubes)\n",
        "num_ids": 45
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    avg = 0\n    for i in range(1,n+1):\n        avg += (i**3)\n    return (avg/n)\n",
        "num_ids": 40
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    import math\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + math.pow(i,3)\n    avg = sum/n\n    return avg\n",
        "num_ids": 51
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    result = 0\n    for i in range(n):\n        result += (i+1)**3\n    return result/n\n",
        "num_ids": 33
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([char for i,char in enumerate(test_tuple) if i == len(test_tuple) - 1])\n",
        "num_ids": 34
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [word[-1] for word in test_tuple]\n",
        "num_ids": 19
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [i[-1] for i in test_tuple]\n",
        "num_ids": 19
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # print(test_tuple)\n    return [el[-1] for el in test_tuple]\n",
        "num_ids": 29
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([t[-1] for t in test_tuple])\n",
        "num_ids": 20
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_el = []\n    for i in test_tuple:\n        rear_el.append(i[-1])\n    return rear_el\n",
        "num_ids": 40
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # Should return a list of strings, each element of which is the rear element of the corresponding string\n    # in the given tuple\n    # e.g. for the tuple (('hello', 'hi', 'Howdy!'), ('Hello', 'Hi', 'Howdy!'), ('HELLO', 'HI', 'HOWDY!'), ('HELLO', 'HI', 'HOWDY!')), the returned list should be:\n    # [('h', 'hi', 'Howdy!'), ('H', 'Hi', 'Howdy!'), ('H', 'HI', 'Howdy!'), ('H', 'HI', 'Howdy!')]\n    return map(lambda a: a[-1], test_tuple)\n    \ndef extract_rear_v2(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # Should return a list of strings, each element of which is the rear element of the corresponding string\n    # in the given tuple\n    # e.g. for the tuple (('hello', 'hi', 'Howdy!'), ('Hello', 'Hi', 'Howdy!'), ('HELLO', 'HI', 'HOWDY!'), ('HELLO', 'HI', 'HOWDY!')), the returned list should be:\n    # [('h', 'hi', 'Howdy!'), ('H', 'Hi', 'Howdy!'), ('H', 'HI', 'Howdy!'), ('H', 'HI', 'Howdy!')]\n    #\n    # Hint: can you use the built in function map()\n    return map(lambda a: a[-1], test_tuple)\n",
        "num_ids": 184
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return (test_tuple[i][-1] for i in range(len(test_tuple)))\n",
        "num_ids": 28
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [x[-1] for x in test_tuple]\n",
        "num_ids": 19
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    test_list = list(test_tuple)\n    test_list = [x[-1] for x in test_list]\n    return tuple(test_list)\n",
        "num_ids": 43
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    num = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            num += 1\n    return num\n",
        "num_ids": 39
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    list_count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            list_count += 1\n    return list_count\n",
        "num_ids": 45
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return len([i for i in list1 if i == x])\n    \nprint count_element_in_list([2,3,4,5],3)\nprint count_element_in_list([1,2,3,4,5],3)",
        "num_ids": 61
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            counter += 1\n    return counter\n",
        "num_ids": 40
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    list2 = [list1[i:i+1] for i in range(0, len(list1), 1)] \n    count = 0\n    for i in list2:\n        if x in i:\n            count += 1\n    return count\n",
        "num_ids": 61
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    list_len = len(list1)\n    count = 0\n    for i in range(list_len):\n        if x in list1[i]:\n            count += 1\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in nums:\n        if i%2!= 0:\n            nums.remove(i)\n    return nums\n",
        "num_ids": 34
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x%2, nums)\n",
        "num_ids": 17
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [n for n in nums if n % 2!= 0]\n",
        "num_ids": 20
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in nums:\n        if i%2!=0:\n            nums.remove(i)\n    return nums\n    \ndef filter_numbers(nums):\n    '''\n    Write a function to filter numbers in a list.\n    '''\n    for i in nums:\n        if i%2==0:\n            nums.remove(i)\n    return nums\n    \ndef filter_letters(string):\n    '''\n    Write a function to filter letters in a string.\n    '''\n    for i in string:\n        if i.isalpha()==True:\n            string.replace(i, '')\n    return string\n    \ndef filter_no_vowels(string):\n    '''\n    Write a function to remove all the vowels from a string.\n    '''\n    for i in string:\n        if i in 'aeiouAEIOU':\n            string.replace(i, '')\n    return string\n    \ndef filter_punctuation(string):\n    '''\n    Write a function to remove all the punctuation from a string.\n    '''\n    for i in string:\n        if i in '.?!,;:()[]{}':\n            string.replace(i, '')\n    return string\n    \ndef filter_only_numbers(string):\n    '''\n    Write a function to remove all the characters in a string that aren't numbers.\n    '''\n    for i in string:\n        if i not in '0123456789':\n            string.replace(i, '')\n    return string\n    \ndef filter_words(string):\n    '''\n    Write a function to remove all the words in a string.\n    '''\n    for i in string:\n        if i not in ',;:()[]{}!?':\n            string.replace(i,'')\n    return string.split()\n    \ndef create_spam_dict():\n    '''\n    Write a function to create a spam dictionary from a list of words.\n    '''\n    spam_dict = {}\n    for word in spam_words:\n        if word not in spam_dict:\n            spam_dict[word] = 1\n        else:\n            spam_dict[word] += 1\n    return spam_dict\n    \ndef create_ham_dict():\n    '''\n    Write a function to create a ham dictionary from a list of words.\n    '''\n    ham_dict = {}\n    for word in ham_words:\n        if word not in ham_dict:\n            ham_dict[word] = 1\n        else:\n            ham_dict[word] += 1\n    return ham_dict\n    \ndef calculate_percentage():\n    '''\n    Write a function to calculate the percentage of spam and ham messages.\n    '''\n    ham_dict = create_ham_dict()\n    spam_dict = create_spam_dict()\n    total_spam = len(spam_words)\n    total_ham = len(ham_words)\n    \n    total_ham = 0\n    total_spam = 0\n    for word in ham_dict:\n        total_ham += ham_dict[word]\n    for word in spam_dict:\n        total_spam += spam_dict[word]\n    \n    for word in ham_dict:\n        if word in spam_dict:\n            ham_dict[word] = ham_dict[word]*100/total_ham\n    for word in spam_dict:\n        if word in ham_dict:\n            spam_dict[word] = spam_dict[word]*100/total_spam\n    \n    for word in spam_dict:\n        spam_dict[word] = spam_dict[word]/total_spam*100\n    for word in ham_dict:\n        ham_dict[word] = ham_dict[word]/total_ham*100\n    return spam_dict, ham_dict\n    \ndef calculate_bayes_probability():\n    '''\n    Write a function to calculate the probability of a given word\n    given a spam/ham email message.\n    '''\n    spam_dict, ham_dict = calculate_percentage()\n    \n    spam_probability = 1\n    ham_probability = 1\n    \n    for word in spam_dict:\n        if word in ham_dict:\n            spam_probability = spam_probability*spam_dict[word]\n            ham_probability = ham_probability*ham_dict[word]\n    \n    print 'Spam: ', spam_probability, '\\nHam: ', ham_probability\n    \ndef calculate_information_gain():\n    '''\n    Write a function to calculate the information gain, or the difference\n    between the entropy of a set and the entropy of the remaining set.\n    '''\n    spam_dict, ham_dict = calculate_percentage()\n    \n    spam_entropy = 0\n    ham_entropy = 0\n    \n    for word in spam_dict:\n        if word in ham_dict:\n            spam_entropy += -1*(spam_dict[word]*spam_dict[word]*math.log(spam_dict[word],2))\n    for word in ham_dict:\n        if word in spam_dict:\n            ham_entropy += -1*(ham_dict[word]*ham_dict[word]*math.log(ham_dict[word],2))\n    print 'Spam: ', spam_entropy, '\\nHam: ', ham_entropy\n    \ndef calculate_bayes_gain():\n    '''\n    Write a function to calculate the information gain, or the difference\n    between the entropy of a set and the entropy of the remaining set.\n    '''\n    spam_dict, ham_dict = calculate_percentage()\n    \n    spam_bayes = 1\n    ham_bayes = 1\n    \n    for word in spam_dict:\n        if word in ham_dict:\n            spam_bayes = spam_bayes*spam_dict[word]\n            ham_bayes = ham_bayes*ham_dict[word]\n    \n    print 'Spam: ', spam_bayes, '\\nHam: ', ham_bayes\n    \ndef create_word_dict():\n    '''\n    Write a function to create a word dictionary from a list of words.\n    '''\n    for word in word_list:\n        if word not in word_dict:\n            word_dict[word] = 1\n        else:\n            word_dict[word] += 1\n    return word_dict\n    \ndef calculate_word_probability(word):\n    '''\n    Write a function to calculate the probability of a given word\n    given a spam/ham email message.\n    '''\n    word_dict = create_word_dict()\n    total = 0\n    for word in word_dict:\n        total += word_dict[word]\n    if word not in word_dict:\n        return 0\n    else:\n        return (word_dict[word]+1)/(total+2)\n    \ndef calculate_information_gain():\n    '''\n    Write a function to calculate the information gain, or the difference\n    between the entropy of a set and the entropy of the remaining set.\n    '''\n    spam_dict, ham_dict = calculate_percentage()\n    \n    spam_entropy = 0\n    ham_entropy = 0\n    \n    for word in spam_dict:\n        if word in ham_dict:\n            spam_entropy += -1*(spam_dict[word]*spam_dict[word]*math.log(spam_dict[word],2))\n    for word in ham_dict:\n        if word in spam_dict:\n            ham_entropy += -1*(ham_dict[word]*ham_dict[word]*math.log(ham_dict[word],2))\n    print 'Spam: ', spam_entropy, '\\nHam: ', ham_entropy\n    \ndef calculate_bayes_gain():\n    '''\n    Write a function to calculate the information gain, or the difference\n    between the entropy of a set and the entropy of the remaining set.\n    '''\n    spam_dict, ham_dict = calculate_percentage()\n    \n    spam_bayes = 1\n    ham_bayes = 1\n    \n    for word in spam_dict:\n        if word in ham_dict:\n            spam_ba",
        "num_ids": 62
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x % 2]\n",
        "num_ids": 17
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # return [x for x in nums if x % 2 == 0]\n    return list(filter(lambda x: x % 2 == 0, nums))\n",
        "num_ids": 39
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    if isinstance(nums, list) == True:\n        print 'Filtering numbers'\n        for i in range(len(nums)):\n            if nums[i] % 2!= 0:\n                del nums[i]\n        return nums\n    else:\n        print 'Error: Input must be a list'\n",
        "num_ids": 80
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            yield num\n",
        "num_ids": 25
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x:x%2 == 1, nums))\n",
        "num_ids": 21
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_nums = []\n    for num in nums:\n        if num % 2 == 0:\n            new_nums.append(num)\n    return new_nums\n",
        "num_ids": 45
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    d,m,y = dt.split('-')\n    m = convert_month(m)\n    y = change_year(y)\n    return str(y) + '-' + str(m) + '-' + str(d)\n",
        "num_ids": 60
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.strip()\n    dt = dt.split('-')\n    return '{}-{}-{}'.format(dt[2],dt[1],dt[0])\n",
        "num_ids": 49
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    new_dt = re.sub(r'[^0-9]', '', dt)\n    return new_dt[6:] + new_dt[:2] + new_dt[3:5] + new_dt[:2]\n",
        "num_ids": 60
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    ans = dt.split('-')\n    return '-'.join(ans[::-1])\n",
        "num_ids": 27
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[6:] + '-' + dt[3:5] + '-' + dt[:2]\n",
        "num_ids": 31
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[6:8]+'-'+dt[4:6]+'-'+dt[0:4]\n",
        "num_ids": 30
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return \"%d-%d-%d\" %(dt[2:4],dt[5:7],dt[0:2])\ndef load_data(path):\n    '''\n    Load data from a file and return a list\n    '''\n    with open(path) as f:\n        data = f.readlines()\n        data = [x.strip() for x in data]\n        data = [x.split(',') for x in data]\n        data = [[x.strip() for x in y] for y in data]\n    return data\n",
        "num_ids": 74
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[6:10]+\"-\"+dt[3:5]+\"-\"+dt[0:2]\n",
        "num_ids": 30
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # split date into day, month, year\n    day, month, year = dt.split('-')\n    # reverse month and year\n    month = str(int(month) * -1)\n    year = str(int(year) * -1)\n    # replace month and year with corresponding english words\n    if int(month) == 1:\n        month = \"January\"\n    elif int(month) == 2:\n        month = \"February\"\n    elif int(month) == 3:\n        month = \"March\"\n    elif int(month) == 4:\n        month = \"April\"\n    elif int(month) == 5:\n        month = \"May\"\n    elif int(month) == 6:\n        month = \"June\"\n    elif int(month) == 7:\n        month = \"July\"\n    elif int(month) == 8:\n        month = \"August\"\n    elif int(month) == 9:\n        month = \"September\"\n    elif int(month) == 10:\n        month = \"October\"\n    elif int(month) == 11:\n        month = \"November\"\n    elif int(month) == 12:\n        month = \"December\"\n    else:\n        month = \"No Month\"\n    # replace day with english words\n    if int(day) == 1:\n        day = \"First\"\n    elif int(day) == 2:\n        day = \"Second\"\n    elif int(day) == 3:\n        day = \"Third\"\n    elif int(day) == 4:\n        day = \"Fourth\"\n    elif int(day) == 5:\n        day = \"Fifth\"\n    elif int(day) == 6:\n        day = \"Sixth\"\n    elif int(day) == 7:\n        day = \"Seventh\"\n    elif int(day) == 8:\n        day = \"Eighth\"\n    elif int(day) == 9:\n        day = \"Ninth\"\n    elif int(day) == 10:\n        day = \"Tenth\"\n    elif int(day) == 11:\n        day = \"Eleventh\"\n    elif int(day) == 12:\n        day = \"Twelfth\"\n    elif int(day) == 13:\n        day = \"Thirteenth\"\n    elif int(day) == 14:\n        day = \"Fourteenth\"\n    elif int(day) == 15:\n        day = \"Fifteenth\"\n    elif int(day) == 16:\n        day = \"Sixteenth\"\n    elif int(day) == 17:\n        day = \"Seventeenth\"\n    elif int(day) == 18:\n        day = \"Eighteenth\"\n    elif int(day) == 19:\n        day = \"Nineteenth\"\n    elif int(day) == 20:\n        day = \"Twentieth\"\n    elif int(day) == 21:\n        day = \"Twenty-First\"\n    elif int(day) == 22:\n        day = \"Twenty-Second\"\n    elif int(day) == 23:\n        day = \"Twenty-Third\"\n    elif int(day) == 24:\n        day = \"Twenty-Fourth\"\n    elif int(day) == 25:\n        day = \"Twenty-Fifth\"\n    elif int(day) == 26:\n        day = \"Twenty-Sixth\"\n    elif int(day) == 27:\n        day = \"Twenty-Seventh\"\n    elif int(day) == 28:\n        day = \"Twenty-Eighth\"\n    elif int(day) == 29:\n        day = \"Twenty-Ninth\"\n    elif int(day) == 30:\n        day = \"Thirty\"\n    elif int(day) == 31:\n        day = \"Thirty-First\"\n    else:\n        day = \"No Day\"\n    # join day and month into a single string\n    dt_out = day +'' + month + ','+ year\n    return dt_out\n",
        "num_ids": 956
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    match = re.search(r'(\\d{4})-(\\d{2})-(\\d{2})',dt)\n    month = {'01':'Jan', '02':'Feb', '03':'Mar', '04':'Apr', '05':'May', '06':'Jun', '07':'Jul', '08':'Aug', '09':'Sep', '10':'Oct', '11':'Nov', '12':'Dec'}\n    dt = dt.replace(match.group(1),month[match.group(2)]+'-'+match.group(3))\n    return dt\n",
        "num_ids": 148
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    h = len(my_list)//2\n    while h > 0:\n        for i in range(h, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > temp:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = temp\n        h //= 2\n    return my_list\n    \n",
        "num_ids": 116
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "num_ids": 114
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            current = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current\n        gap //= 2\n",
        "num_ids": 108
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def gap_insertion(my_list, start, gap):\n        for i in range(start+gap, len(my_list), gap):\n            val = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > val:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = val\n    def shell_sort_helper(my_list, start, gap):\n        if start+gap >= len(my_list):\n            return\n        gap_insertion(my_list, start, gap)\n        shell_sort_helper(my_list, start+gap, gap)\n    shell_sort_helper(my_list, 0, int(len(my_list)/2))\n    return my_list\n",
        "num_ids": 201
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    len_of_list = len(my_list)\n    gap = len_of_list/2\n    while gap > 0:\n        for i in range(gap, len_of_list):\n            current_value = my_list[i]\n            position = i\n            while position >= gap and my_list[position-gap] > current_value:\n                my_list[position] = my_list[position-gap]\n                position = position - gap\n            my_list[position] = current_value\n        gap = gap/2\n    return my_list\n",
        "num_ids": 135
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    sublistcount = len(my_list)//2\n    while sublistcount > 0:\n    \n        for start in range(sublistcount):\n            #Selection Sort\n            for i in range(start, len(my_list), sublistcount):\n                currentValue = my_list[i]\n                holePosition = i\n                \n                while holePosition >= sublistcount and my_list[holePosition-sublistcount] > currentValue:\n                    my_list[holePosition] = my_list[holePosition-sublistcount]\n                    holePosition = holePosition - sublistcount\n                \n                my_list[holePosition] = currentValue\n        \n        sublistcount = sublistcount//2\n    return my_list\n    \ndef selectionSort(my_list):\n    '''\n    Write a function to sort the given array by using selection sort.\n    '''\n    for i in range(len(my_list)):\n        min = i\n        for j in range(i+1, len(my_list)):\n            if my_list[j] < my_list[min]:\n                min = j\n        if min!= i:\n            temp = my_list[i]\n            my_list[i] = my_list[min]\n            my_list[min] = temp\n    return my_list\n    \ndef insertionSort(my_list):\n    '''\n    Write a function to sort the given array by using insertion sort.\n    '''\n    for i in range(len(my_list)):\n        for j in range(i+1, len(my_list)):\n            if my_list[i] > my_list[j]:\n                temp = my_list[i]\n                my_list[i] = my_list[j]\n                my_list[j] = temp\n    return my_list\n    \ndef mergeSort(my_list):\n    '''\n    Write a function to sort the given array by using merge sort.\n    '''\n    if len(my_list) > 1:\n        mid = len(my_list)//2\n        left = my_list[:mid]\n        right = my_list[mid:]\n        mergeSort(left)\n        mergeSort(right)\n        i = j = k = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                my_list[k] = left[i]\n                i += 1\n            else:\n                my_list[k] = right[j]\n                j += 1\n            k += 1\n        while i < len(left):\n            my_list[k] = left[i]\n            i += 1\n            k += 1\n        while j < len(right):\n            my_list[k] = right[j]\n            j += 1\n            k += 1\n    return my_list\n    \ndef quickSort(my_list):\n    '''\n    Write a function to sort the given array by using quick sort.\n    '''\n    if len(my_list) <= 1:\n        return my_list\n    else:\n        pivot = my_list[0]\n        less = [i for i in my_list[1:] if i < pivot]\n        greater = [i for i in my_list[1:] if i >= pivot]\n        return quickSort(less) + [pivot] + quickSort(greater)\n        \ndef countSort(my_list):\n    '''\n    Write a function to sort the given array by using count sort.\n    '''\n    max_val = max(my_list)\n    min_val = min(my_list)\n    range_val = max_val - min_val + 1\n    buckets = [0]*range_val\n    for i in my_list:\n        buckets[i - min_val] += 1\n    for i in range(1, len(buckets)):\n        buckets[i] += buckets[i-1]\n    sorted_list = [0]*len(my_list)\n    for i in my_list:\n        sorted_list[buckets[i - min_val] - 1] = i\n        buckets[i - min_val] -= 1\n    return sorted_list\n    \ndef radixSort(my_list):\n    '''\n    Write a function to sort the given array by using radix sort.\n    '''\n    max_len = max(len(str(i)) for i in my_list)\n    for i in range(1, max_len+1):\n        count = [0] * 10\n        for j in my_list:\n            num = (j // (10 ** (max_len - i))) % 10\n            count[num] += 1\n        start = 0\n        for j in range(10):\n            count[j] += count[j-1]\n        new_list = [0] * len(my_list)\n        for j in range(len(my_list)-1, -1, -1):\n            num = (my_list[j] // (10 ** (max_len - i))) % 10\n            new_list[count[num]-1] = my_list[j]\n            count[num] -= 1\n        my_list = new_list\n    return my_list\n    \ndef shellSort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    sublistcount = len(my_list)//2\n    while sublistcount > 0:\n        for start in range(sublistcount):\n            for i in range(start, len(my_list), sublistcount):\n                currentValue = my_list[i]\n                holePosition = i\n                \n                while holePosition >= sublistcount and my_list[holePosition-sublistcount] > currentValue:\n                    my_list[holePosition] = my_list[holePosition-sublistcount]\n                    holePosition = holePosition - sublistcount\n                \n                my_list[holePosition] = currentValue\n        sublistcount = sublistcount//2\n    return my_list\n    \ndef heapify(unsorted, index, heap_size):\n    largest = index\n    left = 2*index + 1\n    right = 2*index + 2\n    if left < heap_size and unsorted[largest] < unsorted[left]:\n        largest = left\n    if right < heap_size and unsorted[largest] < unsorted[right]:\n        largest = right\n    if largest!= index:\n        unsorted[largest], unsorted[index] = unsorted[index], unsorted[largest]\n        heapify(unsorted, largest, heap_size)\n        \ndef heapSort(my_list):\n    '''\n    Write a function to sort the given array by using heap sort.\n    '''\n    n = len(my_list)\n    for i in range(n//2, -1, -1):\n        heapify(my_list, i, n)\n    for i in range(n-1, 0, -1):\n        my_list[i], my_list[0] = my_list[0], my_list[i]\n        heapify(my_list, 0, i)\n    return my_list\n    \ndef heapPush(my_list, item):\n    '''\n    Write a function to push an item into a heap.\n    '''\n    my_list.append(item)\n    i = len(my_list) - 1\n    parent = (i - 1)//2\n    while parent >= 0 and my_list[i] < my_list[parent]:\n        my_list[i], my_list[parent] = my_list[parent], my_list[i]\n        i = parent\n        parent = (i - 1)//2\n    \ndef heapPop(my_list):\n    '''\n    Write a function to pop an item from a heap.\n    '''\n    if len(my_list) == 0:\n        return None\n    item = my_list[0]\n    my_list[0] = my_list[-1]\n    my_list.pop()\n    heapify(my_list, 0, len(my_list))\n    return item\n    \ndef heapifyHelper(my_list, index, heap_size):\n    '''\n    Write a function to sort the given array by using heap sort.\n    '''\n    largest = index\n    left = 2*index + 1\n    right ",
        "num_ids": 19
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def gap_insertion_sort(nums, start, gap):\n        for i in range(start + gap, len(nums), gap):\n            cur = nums[i]\n            pos = i\n            while pos >= gap and nums[pos - gap] > cur:\n                nums[pos] = nums[pos - gap]\n                pos -= gap\n            nums[pos] = cur\n",
        "num_ids": 97
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    h = len(my_list) // 2\n    while h > 0:\n        for i in range(h, len(my_list)):\n            val = my_list[i]\n            j = i\n            while j >= h and my_list[j - h] > val:\n                my_list[j] = my_list[j - h]\n                j -= h\n            my_list[j] = val\n        h = h // 2\n",
        "num_ids": 109
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "num_ids": 114
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list)//2\n    while gap > 0:\n        i = 0\n        j = gap\n        while j < len(my_list):\n            if my_list[j] < my_list[i]:\n                temp = my_list[j]\n                my_list[j] = my_list[i]\n                my_list[i] = temp\n            i += 1\n            j += 1\n        gap = gap//2\n    return my_list\n",
        "num_ids": 116
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    new_tup = []\n    for i in test_tup1:\n        new_tup.append(i)\n    for j in test_tup2:\n        new_tup.append(j)\n    return new_tup\n",
        "num_ids": 61
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    a = list(zip(test_tup1, test_tup2))\n    return a\n",
        "num_ids": 26
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple([x and y for x, y in zip(test_tup1, test_tup2)])\n    \ndef test_and_tuples():\n    assert (3,5) == and_tuples((3,5,1,0), (1,0,1,0))\n    assert (1,0) == and_tuples((3,5,1,0), (1,0,0,0))\n    assert (3,5) == and_tuples((3,5,0,0), (1,0,1,0))\n    assert (3,5) == and_tuples((3,5,0,0), (0,0,0,0))\n    assert (0,0) == and_tuples((3,5,0,0), (0,0,0,0))\n    assert (3,5) == and_tuples((3,5,0,0), (0,0,0,0))\n    assert (3,5) == and_tuples((0,0,0,0), (0,0,0,0))\n    assert (0,0) == and_tuples((0,0,0,0), (0,0,0,0))\n    assert (0,0) == and_tuples((0,0,0,0), (0,0,0,0))\n    assert (0,0) == and_tuples((0,0,0,0), (0,0,0,0))\n    \n    print(\"tests pass\")\n    \ntest_and_tuples(",
        "num_ids": 369
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return [(x, y) for x, y in zip(test_tup1, test_tup2)]\n",
        "num_ids": 29
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] and test_tup2[0], test_tup1[1] and test_tup2[1])\n",
        "num_ids": 40
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tuple(map(operator.and_, test_tup1, test_tup2)) for test_tup1, test_tup2 in zip(test_tup1, test_tup2))\n",
        "num_ids": 55
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(a1 + a2 for a1, a2 in zip(test_tup1, test_tup2))\n",
        "num_ids": 33
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return [(a and b) for a, b in zip(test_tup1, test_tup2)]\n",
        "num_ids": 29
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(map(operator.and_, test_tup1, test_tup2))\n    pass\n    ",
        "num_ids": 30
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    for x in tup1:\n        if x in tup2:\n            tup1 = tup1[x]\n            tup2 = tup2[x]\n    tup3 = tup1 + tup2\n    return tup3\ndef and_tuple(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    for x in tup1:\n        if x in tup2:\n            tup1 = tup1[x]\n            tup2 = tup2[x]\n    return tup1 + tup2\ndef and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    for x in tup1:\n        if x in tup2:\n            tup1 = tup1[x]\n            tup2 = tup2[x]\n    return tup1 + tup2\ndef and_tuple(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    for x in tup1:\n        if x in tup2:\n            tup1 = tup1[x]\n            tup2 = tup2[x]\n    return tup1 + tup2\ndef and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    for x in tup1:\n        if x in tup2:\n            tup1 = tup1[x]\n            tup2 = tup2[x]\n    return tup1 + tup2\ndef and_tuple(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    for x in tup1:\n        if x in tup2:\n            tup1 = tup1[x]\n            tup2 = tup2[x]\n    return tup1 + tup2\ndef and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    for x in tup1:\n        if x in tup2:\n            tup1 = tup1[x]\n            tup2 = tup2[x]\n    return tup1 + tup2\ndef and_tuple(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    for x in tup1:\n        if x in tup2:\n            tup1 = tup1[x]\n            tup2 = tup2[x]\n    return tup1 + tup2\ndef and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    for x in tup1:\n        if x in tup2:\n            tup1 = tup1[x]\n            tup2 = tup2[x]\n    return tup1 + tup2\ndef and_tuple(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    for x in tup1:\n        if x in tup2:\n            tup1 = tup1[x]\n            tup2 = tup2[x]\n    return tup1 + tup2\ndef and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    for x in tup1:\n        if x in tup2:\n            tup1 = tup1[x]\n            tup2 = tup2[x]\n    return tup1 + tup2\ndef and_tuple(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    for x in tup1:\n        if x in tup2:\n            tup1 = tup1[x]\n            tup2 = tup2[x]\n    return tup1 + tup2\ndef and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    for x in tup1:\n        if x in tup2:\n            tup1 = tup1[x]\n            tup2 = tup2[x]\n    return tup1 + tup2\ndef and_tuple(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    for x in tup1:\n        if x in tup2:\n            tup1 = tup1[x]\n            tup2 = tup2[x]\n    return tup1 + tup2\ndef and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    for x in tup1:\n        if x in tup2:\n            tup1 = tup1[x]\n            tup2 = tup2[x]\n    return tup1 + tup2\ndef and_tuple(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    for x in tup1:\n        if x in tup2:\n            tup1 = tup1[x]\n            tup2 = tup2[x]\n    return tup1 + tup2\ndef and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    for x in tup1:\n        if x in tup2:\n            tup1 = tup1[x]\n            tup",
        "num_ids": 57
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4 * a * c \n    return (-b + math.sqrt(delta)) / (2 * a)\n    \n    \ndef parabola_vertex(a, b, c):\n    '''\n    Write a function to find the vertex of a parabola.\n    '''\n    return -b / (2 * a)\n",
        "num_ids": 13
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -b/(2*a)\n",
        "num_ids": 12
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-b + sqrt((b**2) - (4 * a * c)))/2 * a\n    \nassert parabola_directrix(2, 3, 1) == 2\nassert parabola_directrix(1, -3, 2) == 1\nassert parabola_directrix(1, 2, -3) == -1\n",
        "num_ids": 83
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # https://stackoverflow.com/questions/2230206/finding-the-vertex-of-a-parabola-given-a-and-b-and-c\n    # z^2 = a x^2 + b x + c\n    # http://math.stackexchange.com/questions/268618/finding-the-vertex-of-a-parabola-given-a-and-b-and-c\n    # z^2 = a x^2 + b x + c\n    # z = ((-b + sqrt(b^2 - 4ac)) / 2a)\n",
        "num_ids": 149
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if c == 0:\n        return (-b / (2 * a))\n    else:\n        return (-b + (c * (-b + (b ** 2 - 4 * a * c) ** 0.5)) / (2 * a)) / (2 * c)\n",
        "num_ids": 64
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    def parabola(x): \n        return a*x**2 + b*x + c \n    delta = b**2 - 4*a*c \n    if delta < 0: \n        print 'The parabola does not have any real solutions' \n        return \n    x1 = (-b + math.sqrt(delta))/(2*a) \n    x2 = (-b - math.sqrt(delta))/(2*a) \n    return [x1, x2] \n    \ndef intersect_line_parabola(a, b, c, x1, x2): \n    '''\n    Write a function to find the coordinates of a point in the form of a line and a parabola.\n    '''\n    y1 = a*(x1**2) + b*x1 + c \n    y2 = a*(x2**2) + b*x2 + c \n    if y1 == y2: \n        return [x1, y1] \n    else: \n        slope = (y1 - y2)/(x1 - x2) \n        x = (y2 - c)/slope \n        return [x, y1] \n        \ndef is_parallel(a1, b1, c1, a2, b2, c2): \n    '''\n    Write a function to determine if two lines are parallel to each other.\n    '''\n    return a1*b2 - a2*b1 == 0 \n    \ndef is_perpendicular(a1, b1, c1, a2, b2, c2): \n    '''\n    Write a function to determine if two lines are perpendicular to each other.\n    '''\n    return a1*b2 - a2*b1 == 0 and a1*c2 - a2*c1 == 0 \n    \ndef is_colinear(a1, b1, c1, a2, b2, c2): \n    '''\n    Write a function to determine if two lines are colinear.\n    '''\n    return a1*b2 - a2*b1 == 0 and a1*c2 - a2*c1 == 0 \n    \ndef is_intersect(a1, b1, c1, a2, b2, c2): \n    '''\n    Write a function to determine if two lines are intersecting each other.\n    '''\n    return is_parallel(a1, b1, c1, a2, b2, c2) or is_perpendicular(a1, b1, c1, a2, b2, c2) or is_colinear(a1, b1, c1, a2, b2, c2) \n    \ndef intersect_line_line(a1, b1, c1, a2, b2, c2): \n    '''\n    Write a function to determine the intersection point of two lines.\n    '''\n    if is_intersect(a1, b1, c1, a2, b2, c2): \n        delta = b1*c2 - b2*c1 \n        if delta!= 0: \n            x = (b1*c2 - b2*c1)/delta \n            y = (a1*c2 - a2*c1)/delta \n            return [x, y] \n        else: \n            return None \n    else: \n        return None \n    \ndef are_parallel(a1, b1, c1, a2, b2, c2): \n    '''\n    Write a function to determine if two lines are parallel.\n    '''\n    return a1*b2 - a2*b1 == 0 \n    \ndef are_perpendicular(a1, b1, c1, a2, b2, c2): \n    '''\n    Write a function to determine if two lines are perpendicular.\n    '''\n    return a1*b2 - a2*b1 == 0 and a1*c2 - a2*c1 == 0 \n    \ndef are_colinear(a1, b1, c1, a2, b2, c2): \n    '''\n    Write a function to determine if two lines are colinear.\n    '''\n    return a1*b2 - a2*b1 == 0 and a1*c2 - a2*c1 == 0 \n    \ndef are_intersect(a1, b1, c1, a2, b2, c2): \n    '''\n    Write a function to determine if two lines are intersecting each other.\n    '''\n    return are_parallel(a1, b1, c1, a2, b2, c2) or are_perpendicular(a1, b1, c1, a2, b2, c2) or are_colinear(a1, b1, c1, a2, b2, c2) \n    \ndef intersect_line_line_2d(a1, b1, c1, a2, b2, c2): \n    '''\n    Write a function to determine the intersection point of two lines.\n    '''\n    if are_parallel(a1, b1, c1, a2, b2, c2): \n        delta = b1*c2 - b2*c1 \n        if delta!= 0: \n            x = (b1*c2 - b2*c1)/delta \n            y = (a1*c2 - a2*c1)/delta \n            return [x, y] \n        else: \n            return None \n    elif are_perpendicular(a1, b1, c1, a2, b2, c2): \n        delta = a1*b2 - a2*b1 \n        if delta!= 0: \n            x = (a1*b2 - a2*b1)/delta \n            y = (a1*c2 - a2*c1)/delta \n            return [x, y] \n        else: \n            return None \n    else: \n        return None \n    \ndef are_parallel_2d(a1, b1, c1, a2, b2, c2): \n    '''\n    Write a function to determine if two lines are parallel.\n    '''\n    return a1*b2 - a2*b1 == 0 \n    \ndef are_perpendicular_2d(a1, b1, c1, a2, b2, c2): \n    '''\n    Write a function to determine if two lines are perpendicular.\n    '''\n    return a1*b2 - a2*b1 == 0 and a1*c2 - a2*c1 == 0 \n    \ndef are_colinear_2d(a1, b1, c1, a2, b2, c2): \n    '''\n    Write a function to determine if two lines are colinear.\n    '''\n    return a1*b2 - a2*b1 == 0 and a1*c2 - a2*c1 == 0 \n    \ndef are_intersect_2d(a1, b1, c1, a2, b2, c2): \n    '''\n    Write a function to determine if two lines are intersecting each other.\n    '''\n    return are_parallel_2d(a1, b1, c1, a2, b2, c2) or are_perpendicular_2d(a1, b1, c1, a2, b2, c2) or are_colinear_2d(a1, b1, c1, a2, b2, c2) \n    \ndef is_within_2d(x, a1, b1, c1): \n    '''\n    Write a function to determine if a point is within the bounds of a parabola.\n    '''\n    x1 = x[0] \n    x2 = x[1] \n    y1 = a1*x1**2 + b1*x1 + c1 \n    y2 = a1*x2**2 + b1*x2 + c1 \n    if y1 < x1: \n        return False \n    elif y2 < x2: \n        return False \n    else: \n        retur",
        "num_ids": 105
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # directrix = -b / (2 * a)\n    return -b / (2 * a)\n",
        "num_ids": 27
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # if f(x) = 0 then f'(x) = 0\n    # if f(x) = 0 then f'(x) = 0\n    # if f(x) = 0 then f'(x) = 0\n    # if f(x) = 0 then f'(x) = 0\n    # if f(x) = 0 then f'(x) = 0\n    #\n    # if f(x) = 0 then f'(x) = 0\n    # if f(x) = 0 then f'(x) = 0\n    # if f(x) = 0 then f'(x) = 0\n    # if f(x) = 0 then f'(x) = 0\n    # if f(x) = 0 then f'(x) = 0\n    #\n    # x1 = -b/2a\n    # x2 = -b/4a\n    #\n    # if a = 0 then it's a line\n    #\n    # if a = 0 then the line is at x = -b/2a\n    # x1 = -b/2a\n    # x2 = -b/4a\n    #\n    # if a = 0 then it's a line\n    #\n    # if a = 0 then the line is at x = -b/2a\n    # x1 = -b/2a\n    # x2 = -b/4a\n    #\n    # if a = 0 then it's a line\n    #\n    # if a = 0 then the line is at x = -b/2a\n    # x1 = -b/2a\n    # x2 = -b/4a\n    #\n    # if a = 0 then it's a line\n    #\n    # if a = 0 then the line is at x = -b/2a\n    # x1 = -b/2a\n    # x2 = -b/4a\n    #\n    # if a = 0 then it's a line\n    #\n    # if a = 0 then the line is at x = -b/2a\n    # x1 = -b/2a\n    # x2 = -b/4a\n    #\n    # if a = 0 then it's a line\n    #\n    # if a = 0 then the line is at x = -b/2a\n    # x1 = -b/2a\n    # x2 = -b/4a\n    #\n    # if a = 0 then it's a line\n    #\n    # if a = 0 then the line is at x = -b/2a\n    # x1 = -b/2a\n    # x2 = -b/4a\n    #\n    # if a = 0 then it's a line\n    #\n    # if a = 0 then the line is at x = -b/2a\n    # x1 = -b/2a\n    # x2 = -b/4a\n    #\n    # if a = 0 then it's a line\n    #\n    # if a = 0 then the line is at x = -b/2a\n    # x1 = -b/2a\n    # x2 = -b/4a\n    #\n    # if a = 0 then it's a line\n    #\n    # if a = 0 then the line is at x = -b/2a\n    # x1 = -b/2a\n    # x2 = -b/4a\n    #\n    # if a = 0 then it's a line\n    #\n    # if a = 0 then the line is at x = -b/2a\n    # x1 = -b/2a\n    # x2 = -b/4a\n    #\n    # if a = 0 then it's a line\n    #\n    # if a = 0 then the line is at x = -b/2a\n    # x1 = -b/2a\n    # x2 = -b/4a\n    #\n    # if a = 0 then it's a line\n    #\n    # if a = 0 then the line is at x = -b/2a\n    # x1 = -b/2a\n    # x2 = -b/4a\n    #\n    # if a = 0 then it's a line\n    #\n    # if a = 0 then the line is at x = -b/2a\n    # x1 = -b/2a\n    # x2 = -b/4a\n    #\n    # if a = 0 then it's a line\n    #\n    # if a = 0 then the line is at x = -b/2a\n    # x1 = -b/2a\n    # x2 = -b/4a\n    #\n    # if a = 0 then it's a line\n    #\n    # if a = 0 then the line is at x = -b/2a\n    # x1 = -b/2a\n    # x2 = -b/4a\n    #\n    # if a = 0 then it's a line\n    #\n    # if a = 0 then the line is at x = -b/2a\n    # x1 = -b/2a\n    # x2 = -b/4a\n    #\n    # if a = 0 then it's a line\n    #\n    # if a = 0 then the line is at x = -b/2a\n    # x1 = -b/2a\n    # x2 = -b/4a\n    #\n    # if a = 0 then it's a line\n    #\n    # if a = 0 then the line is at x = -b/2a\n    # x1 = -b/2a\n    # x2 = -b/4a\n    #\n    # if a = 0 then it's a line\n    #\n    # if a = 0 then the line is at x = -b/2a\n    # x1 = -b/2a\n    # x2 = -b/4a\n    #\n    # if a = 0 then it's a line\n    #\n    # if a = 0 then the line is at x = -b/2a\n    # x1 = -b/2a\n    # x2 = -b/4a\n    #\n    # if a = 0 then it's a line\n    #\n    # if a = 0 then the line is at x = -b/2a\n    # x1 = -b/2a\n    # x2 = -b/4a\n    #\n    # if a = 0 then it's a line\n    #\n    # if a = 0 then the line is at x = -b/2a\n    # x1 = -b/2a\n    # x2 = -b/4a\n    #\n    # if a = 0 then it's a line\n    #\n    # if a = 0 then the line is at x = -b/2a\n    # x1 = -b/2a\n    # x2 = -b/4a\n    #\n    # if a = 0 then it's a line\n    #\n    # if a = 0 then the line is at x = -b/2a\n    # x1 = -b/2a\n    # x2 = -b/4a\n    #\n    # if a = 0 then it's a line\n    #\n    # if a = 0 then the line is at x = -b/2a\n    # x1 = -b/2a\n    # x2 = -b/4a\n    #\n    # if a = 0 then it's a line\n    #\n    # if a = 0 then the line is at x = -b/2a\n    # x1 = -b/2a\n    # x2 = -b/4a\n    #\n    # if a = 0 then it's a line\n    #\n    # if a = 0 then the line is at x = -b/2a\n    # x1 = -b/2a\n    # x2 = -b/4a\n    #\n    # if a = 0 then it's a line\n    #\n    # if a = 0 then the line is at x = -b/2a\n    # x1 = -b/2a\n    # x2 = -b/4a\n    #\n    # if a = 0 then it's a line\n    #\n    # if a = 0 then the line is at x = -b/2a\n    # x1 = -b/2a\n    # x2 = -b/4a\n    #\n    # if a = 0 then it's a line\n    #\n    # if a = 0 then the line is at ",
        "num_ids": 2010
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Define a function that, given the coefficients of the line, will solve for the\n    # solution of the equation\n    def line(x):\n        return a*x + b*y + c\n    \n    # Now, solve the equation for y \n    y = (c - b**2/4*a) / (2*a)\n    \n    # Return the solution of the equation\n    return y \n",
        "num_ids": 98
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for num1 in list1:\n        for num2 in list2:\n            if num1 == num2:\n                return True\n    return False\n",
        "num_ids": 37
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False\n",
        "num_ids": 28
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    set1 = set(list1)\n    set2 = set(list2)\n    \n    if len(set1.intersection(set2)) > 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 55
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for num1 in list1:\n        for num2 in list2:\n            if num1 == num2:\n                return True\n    return False\n",
        "num_ids": 37
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(set(list1) & set(list2)) > 0\n    # return len(set(list1) & set(list2)) > 0\n",
        "num_ids": 39
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for x in list1:\n        for y in list2:\n            if x == y:\n                return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(list1)!= len(list2) and len(set(list1).intersection(list2)) > 0\n    \ndef if_first_item_repeated(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if the first item in the second list is the same as the first item in the first list.\n    '''\n    return list2[0] == list1[0]\n",
        "num_ids": 16
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(set(list1) & set(list2)) > 0\n",
        "num_ids": 20
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n",
        "num_ids": 15
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1 + base2) / 2) * height\n",
        "num_ids": 17
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 1.0/2.0*(base1+base2)*height\n",
        "num_ids": 21
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 0.5 * (base1 + base2) * height\n",
        "num_ids": 18
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 1/2 * (base1 + base2) * height\n    \n    ",
        "num_ids": 21
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n",
        "num_ids": 15
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 1.0*(base1+base2)*height/2.0\n",
        "num_ids": 21
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2)/2\n",
        "num_ids": 13
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Check inputs\n    assert(base1>0 and base2>0 and height>0),'Negative base lengths are not allowed'\n    # Obtain the median lengths\n    median = (base1+base2)/2\n    # Return the median\n    return median\n",
        "num_ids": 65
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1 + base2)/2) * height\n",
        "num_ids": 16
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[-1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return True\n    if arr[-1] < number:\n        return True\n    return False\n",
        "num_ids": 35
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n",
        "num_ids": 32
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False\n",
        "num_ids": 24
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    flag = 0\n    for i in range(0, len(arr)):\n        if arr[i] > number:\n            flag = 1\n            break\n    if flag == 1:\n        return True\n    return False\n",
        "num_ids": 54
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False\n",
        "num_ids": 24
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr[0] > number:\n        return True\n    elif arr[-1] > number:\n        return True\n    return False\n",
        "num_ids": 36
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for x in arr:\n        if x > number:\n            return True\n        else:\n            pass\n    return False\n",
        "num_ids": 31
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n        else:\n            return False\n",
        "num_ids": 28
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a+b')\n    if pattern.match(text):\n        return True\n    else:\n        return False\n",
        "num_ids": 38
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.match(r'.*a+b.*', text)\n",
        "num_ids": 19
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('ab+', text)\n",
        "num_ids": 14
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match_a_b = re.search(r'ab+', text)\n    if match_a_b:\n        print(match_a_b.group())\n    else:\n        print(\"No match\")\n",
        "num_ids": 53
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a.*?b+', text)\n",
        "num_ids": 17
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if 'ab' in text:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    result = pattern.search(text)\n    if result:\n        print(\"Found: \" + result.group())\n    else:\n        print(\"Didn't find match.\")\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab*')\n    result = pattern.search(text)\n    if result:\n        print(\"Found: \" + result.group())\n    else:\n        print(\"Didn't find match.\")\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+?')\n    result = pattern.search(text)\n    if result:\n        print(\"Found: \" + result.group())\n    else:\n        print(\"Didn't find match.\")\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab{3}')\n    result = pattern.search(text)\n    if result:\n        print(\"Found: \" + result.group())\n    else:\n        print(\"Didn't find match.\")\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab{3,5}')\n    result = pattern.search(text)\n    if result:\n        print(\"Found: \" + result.group())\n    else:\n        print(\"Didn't find match.\")\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab{2,3}?')\n    result = pattern.search(text)\n    if result:\n        print(\"Found: \" + result.group())\n    else:\n        print(\"Didn't find match.\")\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'^a')\n    result = pattern.search(text)\n    if result:\n        print(\"Found: \" + result.group())\n    else:\n        print(\"Didn't find match.\")\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a$')\n    result = pattern.search(text)\n    if result:\n        print(\"Found: \" + result.group())\n    else:\n        print(\"Didn't find match.\")\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a{2}')\n    result = pattern.search(text)\n    if result:\n        print(\"Found: \" + result.group())\n    else:\n        print(\"Didn't find match.\")\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a{3}')\n    result = pattern.search(text)\n    if result:\n        print(\"Found: \" + result.group())\n    else:\n        print(\"Didn't find match.\")\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a{3,}')\n    result = pattern.search(text)\n    if result:\n        print(\"Found: \" + result.group())\n    else:\n        print(\"Didn't find match.\")\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a{,5}')\n    result = pattern.search(text)\n    if result:\n        print(\"Found: \" + result.group())\n    else:\n        print(\"Didn't find match.\")\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a{5,}')\n    result = pattern.search(text)\n    if result:\n        print(\"Found: \" + result.group())\n    else:\n        print(\"Didn't find match.\")\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'^a{2,3}')\n    result = pattern.search(text)\n    if result:\n        print(\"Found: \" + result.group())\n    else:\n        print(\"Didn't find match.\")\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a{3,4}?')\n    result = pattern.search(text)\n    if result:\n        print(\"Found: \" + result.group())\n    else:\n        print(\"Didn't find match.\")\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a{2,5}?')\n    result = pattern.search(text)\n    if result:\n        print(\"Found: \" + result.group())\n    else:\n        print(\"Didn't find match.\")\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a{2,}')\n    result = pattern.search(text)\n    if result:\n        print(\"Found: \" + result.group())\n    else:\n        print(\"Didn't find match.\")\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'^a{3,}')\n    result = pattern.search(text)\n    if result:\n        print(\"Found: \" + result.group())\n    else:\n        print(\"Didn't find match.\")\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a{,7}?')\n    result = pattern.search(text)\n    if result:\n        print(\"Found: \" + result.group())\n    else:\n        print(\"Didn't find match.\")\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'^a{3,}')\n    result = pattern.search(text)\n    if result:\n        print(\"Found: \" + result.group())\n    else:\n        print(\"Didn't find match.\")\ndef text_match_twenty_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a{3,}?')\n    result = pattern.search(text)\n    if result:\n        print(\"Found: \" + result.group())\n    else:\n        print(\"Didn't find matc",
        "num_ids": 60
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # NOTE: this only handles a single 'a' and 'b'\n    return re.match(r'a.*b', text)\n",
        "num_ids": 34
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a(.+?)b')\n    return re.findall(pattern, text)\n",
        "num_ids": 32
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    matcher = re.compile(r'ab*')\n    m = matcher.match(text)\n    if m:\n        return m.group()\n    return None\n",
        "num_ids": 44
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n<10 :\n        return n\n    return last_Digit(n/10)\n",
        "num_ids": 25
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n",
        "num_ids": 14
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    \n    if n == 0 :\n        return 0\n    else :\n        return (n%10)\n",
        "num_ids": 27
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return last_Digit(n//10)\n",
        "num_ids": 29
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "num_ids": 8
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    return n%10\n",
        "num_ids": 19
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = str(n)\n    if len(n) == 1 :\n        return int(n)\n    else :\n        return int(n[-1])\n",
        "num_ids": 41
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = abs(n)\n    if n < 10 :\n        return n\n    else :\n        return last_Digit(n/10)\n",
        "num_ids": 37
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0 :\n        return -1\n    if n == 0 :\n        return 0\n    return int(n % 10)\n",
        "num_ids": 34
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n==0 :\n        return 0\n    else :\n        return n%10\n",
        "num_ids": 23
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    l = []\n    for i in list1:\n        if i < 0:\n            l.append(i)\n    return l\n",
        "num_ids": 34
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x<0]\n",
        "num_ids": 17
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [i for i in list1 if i < 0]\n",
        "num_ids": 17
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos_list=[]\n    for x in list1:\n        if x<0:\n            neg_nos_list.append(x)\n    return neg_nos_list\nprint neg_nos([1,2,3,4,5,6,-7,-8,-9,-10])\n",
        "num_ids": 72
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]\n",
        "num_ids": 17
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = [x for x in list1 if x < 0]\n    return list2\n",
        "num_ids": 24
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]\n",
        "num_ids": 17
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]\n",
        "num_ids": 17
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in list1:\n        if i < 0:\n            print i\n    return\n",
        "num_ids": 24
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in list1:\n        if i < 0:\n            list1.remove(i)\n    return list1\n",
        "num_ids": 31
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            str2 += str1[i]\n    return str2\n",
        "num_ids": 45
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if str1 is None:\n        return None\n    if len(str1) == 0:\n        return None\n    if len(str1) == 1:\n        return str1\n    else:\n        list1 = []\n        for i in range(len(str1)):\n            if i % 2 == 0:\n                list1.append(str1[i])\n        return ''.join(list1)\n",
        "num_ids": 99
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new = \"\"\n    for i in str1:\n        if ord(i) % 2 == 1:\n            continue\n        else:\n            new += i\n    return new\n",
        "num_ids": 43
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    output = []\n    for i in str1:\n        if (ord(i) % 2) == 0:\n            output.append(i)\n    return ''.join(output)\n",
        "num_ids": 46
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for i in range(0,len(str1)):\n        if i % 2 == 0:\n            new_str = new_str + str1[i]\n    return new_str\n",
        "num_ids": 54
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if len(str1) == 0:\n        return \"\"\n    if len(str1) == 1:\n        return str1\n",
        "num_ids": 33
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if not str1:\n        return ''\n    else:\n        result = ''\n        for i in xrange(len(str1)):\n            if i % 2 == 0:\n                result += str1[i]\n        return result\n",
        "num_ids": 58
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for i in range(len(str1)):\n        if i%2==0:\n            result += str1[i]\n    return result\n",
        "num_ids": 42
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    \n    str1 = str1.replace('a','e')\n    str1 = str1.replace('o','e')\n    str1 = str1.replace('A','E')\n    str1 = str1.replace('O','E')\n    return str1\n",
        "num_ids": 65
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for s in str1:\n        if ord(s) % 2 == 0:\n            str1 = str1.replace(s, '', 1)\n    return str1\n",
        "num_ids": 43
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    result = 0\n    #iterate through test_list\n    for i in xrange(len(test_list)):\n        for j in xrange(len(test_list)):\n            #if i and j are not the same index and there is a\n            #matching pair then increment result\n            if i!= j and test_list[i][1] == test_list[j][1]:\n                result += 1\n    return result\n",
        "num_ids": 105
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    def count_tuple(tup1, tup2):\n        if len(tup1)!= len(tup2):\n            return 0\n        \n        count = 0\n        for i in range(len(tup1)):\n            if tup1[i] == tup2[i]:\n                count += 1\n        return count\n    \n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                if count_tuple(test_list[i], test_list[j]) == 2:\n                    count += 1\n    return count\n",
        "num_ids": 161
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    # dic = {}\n    # for i in range(len(test_list)):\n    #     dic[test_list[i]] = i\n    \n    # res = 0\n    # for i in range(len(test_list)):\n    #     if dic[test_list[i]]-1 >= 0 and dic[test_list[i]-1] >= 0:\n    #         res += 1\n    \n    # return res\n    \n    # res = 0\n    # for i in range(len(test_list)):\n    #     for j in range(i+1,len(test_list)):\n    #         if test_list[j] - test_list[i] == 0:\n    #             res += 1\n    # return res\n    \n    # res = 0\n    # for i in range(len(test_list)):\n    #     if test_list[i] - 1 >= 0 and test_list[i-1] - 1 >= 0:\n    #         res += 1\n    # return res\n    \n    # res = 0\n    # for i in range(len(test_list)):\n    #     j = len(test_list) - 1\n    #     while j >= 0:\n    #         if test_list[j] - test_list[i] == 0:\n    #             res += 1\n    #         j -= 1\n    # return res\n    \n    # res = 0\n    # for i in range(len(test_list)):\n    #     if test_list[i] - 1 >= 0 and test_list[i-1] - 1 >= 0:\n    #         if test_list[i-1]!= test_list[i]:\n    #             res += 1\n    # return res\n    \n    # dic = {}\n    # for i in range(len(test_list)):\n    #     dic[test_list[i]] = i\n    \n    # res = 0\n    # for i in range(len(test_list)):\n    #     if dic[test_list[i]] - 1 >= 0 and dic[test_list[i]-1] >= 0:\n    #         if test_list[i]!= test_list[dic[test_list[i]-1]]:\n    #             res += 1\n    # return res\n    \n    # res = 0\n    # for i in range(len(test_list)):\n    #     if test_list[i] - 1 >= 0 and test_list[i-1] - 1 >= 0:\n    #         if test_list[i-1]!= test_list[i]:\n    #             res += 1\n    # return res\n    \n    # res = 0\n    # for i in range(len(test_list)):\n    #     if test_list[i] - 1 >= 0 and test_list[i-1] - 1 >= 0:\n    #         if test_list[i]!= test_list[dic[test_list[i]-1]]:\n    #             res += 1\n    # return res\n    \n    # res = 0\n    # for i in range(len(test_list)):\n    #     if test_list[i] - 1 >= 0 and test_list[i-1] - 1 >= 0:\n    #         if test_list[i-1]!= test_list[i]:\n    #             res += 1\n    # return res\n    \n    res = 0\n    dic = {}\n    for i in range(len(test_list)):\n        dic[test_list[i]] = i\n    for i in range(len(test_list)):\n        if dic[test_list[i]] - 1 >= 0:\n            res += 1\n            if dic[test_list[dic[test_list[i]-1]]] - 1 >= 0:\n                res += 1\n    return res\n",
        "num_ids": 933
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # initialize a dict to store the number of pairs\n    pair_count = {}\n    # iterate over test_list\n    for i in range(0,len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                pair = tuple(sorted([test_list[i],test_list[j]]))\n                pair_count[pair] = pair_count.get(pair,0) + 1\n    return pair_count\n",
        "num_ids": 129
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    import collections\n    from collections import Counter\n    \n    bidirectional_count = 0\n    \n    for pair in test_list:\n        for item in pair:\n            if item[0] > item[1]:\n                bidirectional_count += 1\n    \n    print bidirectional_count\n    \ndef count_unidirectional(test_list):\n    '''\n    Write a function to count unidirectional tuple pairs.\n    '''\n    \n    import collections\n    from collections import Counter\n    \n    unidirectional_count = 0\n    \n    for pair in test_list:\n        for item in pair:\n            if item[0] < item[1]:\n                unidirectional_count += 1\n    \n    print unidirectional_count\n",
        "num_ids": 77
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    assert len(test_list) == 2, \"count_bidirectional() needs exactly 2 elements\"\n    bidirectional = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if (test_list[i] == test_list[j]):\n                bidirectional = bidirectional + 1\n    return bidirectional\n",
        "num_ids": 100
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return len(test_list) // 2\n",
        "num_ids": 13
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(0, len(test_list) - 1):\n        if test_list[i] > test_list[i+1]:\n            count += 1\n    return count\n",
        "num_ids": 52
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    if test_list == None:\n        return 0\n    list_len = len(test_list)\n    if list_len == 0:\n        return 0\n    if list_len == 1:\n        return 0\n    if list_len == 2:\n        return 0\n    # naive solution\n    # count = 0\n    # for i in xrange(0,list_len-1):\n    #     if test_list[i] == test_list[i+1]:\n    #         count += 1\n    # for i in xrange(list_len-1,0,-1):\n    #     if test_list[i] == test_list[i-1]:\n    #         count += 1\n    # return count\n    # one-pass solution\n    num_pairs = 0\n    test_list.sort()\n    for i in xrange(0,list_len-1):\n        if test_list[i] == test_list[i+1]:\n            num_pairs += 1\n    for i in xrange(list_len-1,0,-1):\n        if test_list[i] == test_list[i-1]:\n            num_pairs += 1\n    return num_pairs\n",
        "num_ids": 288
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(int) for int in L))\n",
        "num_ids": 19
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(a) for a in L]))\n",
        "num_ids": 20
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str, L)))\n",
        "num_ids": 16
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    if len(L) == 1:\n        return L[0]\n    res = 0\n    for i in L:\n        res = res * 10 + i\n    return res\n",
        "num_ids": 58
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if not isinstance(L, list):\n        return 0\n    elif len(L) == 0:\n        return 0\n    else:\n        return int(\"\".join([str(x) for x in L]))\n",
        "num_ids": 54
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    #def join(L):\n    #    return ''.join(L)\n",
        "num_ids": 21
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return reduce(lambda a,b: a*10+b,L)\n",
        "num_ids": 20
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in range(len(L)):\n        result = result * 10 + L[i]\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    def increment(S):\n        if not S:\n            return 1\n        return S[-1] + 1\n    return int(''.join(str(x) for x in L))\n",
        "num_ids": 46
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if L == []:\n        return 0\n    else:\n        return L[0] + multiple_to_single(L[1:])\n",
        "num_ids": 36
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = re.findall(r'adv\\w*',text)\n    return result\ndef word_freq(text):\n    '''\n    Write a function to count the frequency of words in a given sentence.\n    '''\n    word_dict = {}\n    words = re.findall(r'\\w+',text)\n    for word in words:\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    return word_dict\ndef frequent_words(text):\n    '''\n    Write a function to find the top N frequently occurring words in a given sentence.\n    '''\n    word_dict = {}\n    words = re.findall(r'\\w+',text)\n    for word in words:\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    top_n = sorted(word_dict,key=word_dict.get,reverse=True)[:3]\n    return top_n\ndef extract_full_names(text):\n    '''\n    Write a function to extract all full names from a given text.\n    '''\n    full_names = re.findall(r'[A-Z][a-z]+\\s[A-Z][a-z]+',text)\n    return full_names\ndef extract_details(text):\n    '''\n    Write a function to extract all details from a given text.\n    '''\n    details = re.findall(r'[A-Z][a-z]+\\s[A-Z][a-z]+',text)\n    return details\ndef extract_skill_sets(text):\n    '''\n    Write a function to extract all skill sets from a given text.\n    '''\n    skill_sets = re.findall(r'[A-Z][a-z]+',text)\n    return skill_sets\ndef extract_skills(text):\n    '''\n    Write a function to extract all skills from a given text.\n    '''\n    skills = re.findall(r'[A-Z][a-z]*',text)\n    return skills\ndef extract_skills(text):\n    '''\n    Write a function to extract all skills from a given text.\n    '''\n    skills = re.findall(r'[A-Z][a-z]*',text)\n    return skills\ndef extract_skills(text):\n    '''\n    Write a function to extract all skills from a given text.\n    '''\n    skills = re.findall(r'[A-Z][a-z]*',text)\n    return skills\ndef extract_skills(text):\n    '''\n    Write a function to extract all skills from a given text.\n    '''\n    skills = re.findall(r'[A-Z][a-z]*',text)\n    return skills\ndef extract_skills(text):\n    '''\n    Write a function to extract all skills from a given text.\n    '''\n    skills = re.findall(r'[A-Z][a-z]*',text)\n    return skills\ndef extract_skills(text):\n    '''\n    Write a function to extract all skills from a given text.\n    '''\n    skills = re.findall(r'[A-Z][a-z]*',text)\n    return skills\ndef extract_skills(text):\n    '''\n    Write a function to extract all skills from a given text.\n    '''\n    skills = re.findall(r'[A-Z][a-z]*',text)\n    return skills\ndef extract_skills(text):\n    '''\n    Write a function to extract all skills from a given text.\n    '''\n    skills = re.findall(r'[A-Z][a-z]*',text)\n    return skills\ndef extract_skills(text):\n    '''\n    Write a function to extract all skills from a given text.\n    '''\n    skills = re.findall(r'[A-Z][a-z]*',text)\n    return skills\ndef extract_skills(text):\n    '''\n    Write a function to extract all skills from a given text.\n    '''\n    skills = re.findall(r'[A-Z][a-z]*',text)\n    return skills\ndef extract_skills(text):\n    '''\n    Write a function to extract all skills from a given text.\n    '''\n    skills = re.findall(r'[A-Z][a-z]*',text)\n    return skills\ndef extract_skills(text):\n    '''\n    Write a function to extract all skills from a given text.\n    '''\n    skills = re.findall(r'[A-Z][a-z]*',text)\n    return skills\ndef extract_skills(text):\n    '''\n    Write a function to extract all skills from a given text.\n    '''\n    skills = re.findall(r'[A-Z][a-z]*',text)\n    return skills\ndef extract_skills(text):\n    '''\n    Write a function to extract all skills from a given text.\n    '''\n    skills = re.findall(r'[A-Z][a-z]*',text)\n    return skills\ndef extract_skills(text):\n    '''\n    Write a function to extract all skills from a given text.\n    '''\n    skills = re.findall(r'[A-Z][a-z]*',text)\n    return skills\ndef extract_skills(text):\n    '''\n    Write a function to extract all skills from a given text.\n    '''\n    skills = re.findall(r'[A-Z][a-z]*',text)\n    return skills\ndef extract_skills(text):\n    '''\n    Write a function to extract all skills from a given text.\n    '''\n    skills = re.findall(r'[A-Z][a-z]*',text)\n    return skills\ndef extract_skills(text):\n    '''\n    Write a function to extract all skills from a given text.\n    '''\n    skills = re.findall(r'[A-Z][a-z]*',text)\n    return skills\ndef extract_skills(text):\n    '''\n    Write a function to extract all skills from a given text.\n    '''\n    skills = re.findall(r'[A-Z][a-z]*',text)\n    return skills\ndef extract_skills(text):\n    '''\n    Write a function to extract all skills from a given text.\n    '''\n    skills = re.findall(r'[A-Z][a-z]*',text)\n    return skills\ndef extract_skills(text):\n    '''\n    Write a function to extract all skills from a given text.\n    '''\n    skills = re.findall(r'[A-Z][a-z]*',text)\n    return skills\ndef extract_skills(text):\n    '''\n    Write a function to extract all skills from a given text.\n    '''\n    skills = re.findall(r'[A-Z][a-z]*',text)\n    return skills\ndef extract_skills(text):\n    '''\n    Write a function to extract all skills from a given text.\n    '''\n    skills = re.findall(r'[A-Z][a-z]*',text)\n    return skills\ndef extract_skills(text):\n    '''\n    Write a function to extract all skills from a given text.\n    '''\n    skills = re.findall(r'[A-Z][a-z]*',text)\n    return skills\ndef extract_skills(text):\n    '''\n    Write a function to extract all skills from a given text.\n    '''\n    skills = re.findall(r'[A-Z][a-z]*',text)\n    return skills\ndef extract_skills(text):\n    '''\n    Write a function to extract all skills from a given text.\n    '''\n    skills = re.findall(r'[",
        "num_ids": 14
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pos_list = []\n    for word in text.split():\n        if word.endswith(\"ly\") or word.endswith(\"ing\") or word.endswith(\"ed\") or word.endswith(\"ive\") or word.endswith(\"ize\"):\n            pos_list.append(text.find(word))\n    return pos_list\n",
        "num_ids": 86
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    return re.findall(r\"adverb\", text)\n",
        "num_ids": 17
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    tokens=text.split()\n    for i in xrange(0,len(tokens)):\n        if tokens[i] in ['le','les','se','les','se','sans','sans','a','le','les','se','les','se','sans','sans']:\n            return i\ndef find_verb_position(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    tokens=text.split()\n    for i in xrange(0,len(tokens)):\n        if tokens[i] in ['est','a','ce','chaque','toute','tous','tout','ce','chaque','toute','tous','tout']:\n            return i\ndef find_subject_position(text):\n    '''\n    Write a function to find the first subject and their positions in a given sentence.\n    '''\n    tokens=text.split()\n    for i in xrange(0,len(tokens)):\n        if tokens[i] in ['elle','il','il','elle','il','elle','il','elle','il','il','il']:\n            return i\ndef find_adjective_position(text):\n    '''\n    Write a function to find the first adjective and their positions in a given sentence.\n    '''\n    tokens=text.split()\n    for i in xrange(0,len(tokens)):\n        if tokens[i] in ['l']:\n            return i\ndef find_noun_position(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    tokens=text.split()\n    for i in xrange(0,len(tokens)):\n        if tokens[i] in ['la','les','ce','cette','cette']:\n            return i\ndef find_noun_position2(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    tokens=text.split()\n    for i in xrange(0,len(tokens)):\n        if tokens[i] in ['un','une','du','de','dans','dans','du','de','au','aux','dans']:\n            return i\ndef find_prepositional_position(text):\n    '''\n    Write a function to find the first prepositional phrase and their positions in a given sentence.\n    '''\n    tokens=text.split()\n    for i in xrange(0,len(tokens)):\n        if tokens[i] in ['dans','du','de','dans','dans','au','aux','dans','du','de','dans','dans','au','aux','dans','du','de','dans','dans','au','aux']:\n            return i\ndef find_prepositional_position2(text):\n    '''\n    Write a function to find the first prepositional phrase and their positions in a given sentence.\n    '''\n    tokens=text.split()\n    for i in xrange(0,len(tokens)):\n        if tokens[i] in ['sur','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en','dans','dans','devant','en',",
        "num_ids": 1276
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = re.search(r'\\s[a-z]+\\s', text)\n    if result:\n        print(\"The first adverb is \", result.group(), \"and the position is \", result.start())\n    else:\n        print(\"There are no adverbs in this sentence.\")\n",
        "num_ids": 70
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    a_pos_list = []\n    a_pos_list = [m.start() for m in re.finditer('\\sadverb\\s', text)]\n    return a_pos_list\n    \ndef find_adverb(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    a_pos_list = []\n    a_pos_list = [m.start() for m in re.finditer('\\sadverb\\s', text)]\n    return a_pos_list\n",
        "num_ids": 49
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #regex pattern for adverb\n    adverb_re = re.compile(r'''(?x)\n        ^.*?\n        (to|about|by|as|with|of|at|on|from|into|towards|out of|over|until|while|before|behind|beside|upon|behind|across|beside|between|through|throughout|till|behind|beneath|beside|besides|onto|upon|toward|beside|besides|apart|upon|besides|till|instead of|aside from|aside|apart from|out of|besides|over|toward|beside|along with|beneath|across|beside|besides|apart from|apart|besides|towards|toward|along with|beside|beneath|across|beside|besides|beside|instead of|apart from|apart|besides|apart|besides|beside|beside|apart from|apart|besides|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|beside|be",
        "num_ids": 1983
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs=re.findall(r'adverb',text,re.IGNORECASE)\n    if adverbs==[]:\n        print('No adverb found.')\n    else:\n        print('Adverb found at position:')\n        print(adverbs)\n",
        "num_ids": 66
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    find_noun = re.compile(r\"\\w+n\")\n    find_verbs = re.compile(r\"\\w+s\")\n    find_preps = re.compile(r\"\\w+\\s+prep\")\n    find_adverb = re.compile(r\"\\w+\\s+adv\")\n    find_noun_pos = []\n    find_verbs_pos = []\n    find_preps_pos = []\n    find_adverb_pos = []\n    n = re.findall(find_noun,text)\n    v = re.findall(find_verbs,text)\n    p = re.findall(find_preps,text)\n    a = re.findall(find_adverb,text)\n    if len(n) == 0:\n        return None\n    else:\n        for i in range(len(n)):\n            if n[i] in text:\n                find_noun_pos.append(text.index(n[i]))\n        if len(find_noun_pos) == 0:\n            return None\n        else:\n            for i in range(len(v)):\n                if v[i] in text:\n                    find_verbs_pos.append(text.index(v[i]))\n            if len(find_verbs_pos) == 0:\n                return None\n            else:\n                for i in range(len(p)):\n                    if p[i] in text:\n                        find_preps_pos.append(text.index(p[i]))\n                if len(find_preps_pos) == 0:\n                    return None\n                else:\n                    for i in range(len(a)):\n                        if a[i] in text:\n                            find_adverb_pos.append(text.index(a[i]))\n                    if len(find_adverb_pos) == 0:\n                        return None\n                    else:\n                        return [find_noun_pos,find_verbs_pos,find_preps_pos,find_adverb_pos]\n",
        "num_ids": 492
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #define a method to find the first adverb\n    def find_adverb(text):\n        #define a list to store the first adverb position\n        adverb_positions = []\n        #search for the position of adverb\n        adverb_position = re.search(\"(.) adverb\",text)\n        # if adverb found\n        if adverb_position:\n            #set the position as the index of adverb\n            adverb_positions.append(adverb_position.start())\n            #return the adverb positions\n            return adverb_positions\n        #if adverb not found\n        else:\n            #return the position of adverb\n            return False\n    #call the method to find the adverb\n    adverb_positions = find_adverb(text)\n    #print the positions of the adverb\n    if adverb_positions:\n        print adverb_positions\n    else:\n        print \"No adverb found\"\n",
        "num_ids": 225
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l ** 3\n",
        "num_ids": 8
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n",
        "num_ids": 10
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count/len(nums)\n",
        "num_ids": 43
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    p = 0\n    for n in nums:\n        if n > 0:\n            p += 1\n    return p / len(nums)\n",
        "num_ids": 37
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if not nums:\n        return 0\n    pos = 0\n    neg = 0\n    for n in nums:\n        if n > 0:\n            pos += 1\n        elif n < 0:\n            neg += 1\n    return float(pos)/(pos+neg)\n",
        "num_ids": 68
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for i in nums:\n        if i > 0:\n            positive_count += 1\n    return positive_count/len(nums)\n",
        "num_ids": 43
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos=0\n    neg=0\n    for i in nums:\n        if i>0:\n            pos+=1\n        elif i<0:\n            neg+=1\n    print(pos/len(nums))\n    \ndef sum_pairs(nums, target):\n    '''\n    Given an array of integers and a target integer, find a pair in the array whose sum is equal to the target.\n    '''\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            if nums[i]+nums[j]==target:\n                print(nums[i],nums[j])\n                \ndef sum_pairs_hashtable(nums, target):\n    '''\n    Given an array of integers and a target integer, find a pair in the array whose sum is equal to the target.\n    '''\n    map = {}\n    for i in range(len(nums)):\n        if target-nums[i] in map:\n            print(nums[i],target-nums[i])\n        else:\n            map[nums[i]]=True\n            \ndef rotate(arr, k):\n    '''\n    Given an array, rotate the array to the right by k steps, where k is non-negative.\n    '''\n    return arr[k:len(arr)]+arr[0:k]\n    \ndef reverse(arr, start, end):\n    '''\n    Given an array, reverse the subarray arr[start...end].\n    '''\n    while start<end:\n        temp = arr[start]\n        arr[start] = arr[end]\n        arr[end] = temp\n        start+=1\n        end-=1\n        \ndef reverse_words(s):\n    '''\n    Given a string, reverse all the words within it.\n    '''\n    arr=s.split(' ')\n    for i in range(len(arr)):\n        arr[i] = arr[i][::-1]\n    print(\" \".join(arr))\n    \ndef max_consecutive_ones(arr):\n    '''\n    Given a binary array, find the maximum number of consecutive 1s in this array.\n    '''\n    pos=0\n    neg=0\n    for i in arr:\n        if i==1:\n            pos+=1\n        elif i==0:\n            neg+=1\n    print(pos)\n    \ndef max_consecutive_ones_2(arr):\n    '''\n    Given a binary array, find the maximum number of consecutive 1s in this array.\n    '''\n    pos=0\n    neg=0\n    for i in range(len(arr)):\n        if arr[i]==0:\n            pos=0\n        else:\n            pos+=1\n            neg=max(pos,neg)\n    print(pos)\n    \ndef swap_pairs(arr):\n    '''\n    Given an array of integers, write a function that moves all zeroes to the end of the array and returns the new array.\n    '''\n    pos=0\n    neg=0\n    for i in range(len(arr)):\n        if arr[i]==0:\n            if i>pos:\n                temp = arr[i]\n                arr[i]=arr[pos]\n                arr[pos]=temp\n            pos+=1\n        elif arr[i]<0:\n            neg+=1\n    print(arr)\n    \ndef swap_pairs_2(arr):\n    '''\n    Given an array of integers, write a function that moves all zeroes to the end of the array and returns the new array.\n    '''\n    pos=0\n    neg=0\n    for i in range(len(arr)):\n        if arr[i]==0:\n            if i>pos:\n                temp = arr[i]\n                arr[i]=arr[pos]\n                arr[pos]=temp\n            pos+=1\n        elif arr[i]<0:\n            neg+=1\n    for i in range(neg):\n        arr.append(0)\n    print(arr)\n    \ndef balanced_string(s):\n    '''\n    Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n    '''\n    temp=''\n    for i in s:\n        if i.isalnum():\n            temp+=i\n    temp=temp.lower()\n    temp_2=temp[::-1]\n    if temp==temp_2:\n        return True\n    else:\n        return False\n        \ndef balanced_string_2(s):\n    '''\n    Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n    '''\n    temp=''\n    for i in s:\n        if i.isalnum():\n            temp+=i\n    temp=temp.lower()\n    return temp==temp[::-1]\n        \ndef longest_substring(str1, str2):\n    '''\n    Given two strings, find the length of the longest common substring.\n    '''\n    length=0\n    for i in range(len(str1)):\n        for j in range(len(str2)):\n            temp=0\n            for k in range(i,len(str1)):\n                if str1[k]==str2[j]:\n                    temp+=1\n            if temp>length:\n                length=temp\n    return length\n    \ndef find_substring(str1, str2):\n    '''\n    Given two strings, find the length of the longest common substring.\n    '''\n    length=0\n    for i in range(len(str1)):\n        for j in range(len(str2)):\n            temp=0\n            for k in range(i,len(str1)):\n                if str1[k]==str2[j]:\n                    temp+=1\n            if temp>length:\n                length=temp\n    return length\n        \ndef find_substring_2(str1, str2):\n    '''\n    Given two strings, find the length of the longest common substring.\n    '''\n    dict={}\n    for i in str1:\n        if i in dict:\n            dict[i]+=1\n        else:\n            dict[i]=1\n    temp=0\n    for j in str2:\n        if j in dict:\n            temp+=1\n            dict[j]-=1\n        if temp>0:\n            return temp\n    return temp\n    \ndef find_substring_3(str1, str2):\n    '''\n    Given two strings, find the length of the longest common substring.\n    '''\n    dict={}\n    for i in str1:\n        if i in dict:\n            dict[i]+=1\n        else:\n            dict[i]=1\n    temp=0\n    for j in str2:\n        if j in dict:\n            temp+=1\n            dict[j]-=1\n    return temp\n    \ndef check_permutation(str1, str2):\n    '''\n    Given two strings, write a method to decide if one is a permutation of the other.\n    '''\n    if len(str1)==len(str2):\n        map = {}\n        for i in str1:\n            if i in map:\n                map[i]+=1\n            else:\n                map[i]=1\n        for j in str2:\n            if j in map:\n                map[j]-=1\n        for k in map:\n            if map[k]!=0:\n                return False\n        return True\n    else:\n        return False\n        \ndef is_unique_1(str1):\n    '''\n    Given a string, write a function to check if it is a permutation of a palindrome.\n    '''\n    arr=[0]*256\n    for i in str1:\n        arr[ord(i)]+=1\n    for i in arr:\n        if i%2!=0:\n            return False\n    return True\n    \ndef is_unique_2(str1):\n    '''\n    Given a string, write a function to check if it is a permutation of a palindrome.\n    '''\n    map = {}\n    for i in str1:\n        if i in map:\n            return False\n        else:\n            map[i]=1\n    return True",
        "num_ids": 40
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_pos = 0\n    for x in nums:\n        if x > 0:\n            num_pos += 1\n    return float(num_pos)/len(nums)\n",
        "num_ids": 45
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if not nums: return 0\n    count = 0\n    for i in nums:\n        if i > 0: count += 1\n    return float(count) / len(nums)\n",
        "num_ids": 47
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    sum = 0\n    for i in nums:\n        if i > 0:\n            sum += 1\n    return float(sum) / len(nums)\n",
        "num_ids": 40
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count/len(nums)\n",
        "num_ids": 43
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    negative_count = 0\n    for num in nums:\n        if num < 0:\n            negative_count += 1\n    return float(negative_count) / len(nums)\n",
        "num_ids": 46
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -1000000\n    for num in list1: \n        if num < 0 and num > largest: \n            largest = num\n    return largest\n",
        "num_ids": 39
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    i = 0\n    for i in list1:\n        if i < 0:\n            return i\n    return -1\n",
        "num_ids": 31
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1) == 0:\n        return None\n",
        "num_ids": 17
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = 0\n    for num in list1: \n        if num < 0:\n            if num > max_num: \n                max_num = num \n    return max_num \n",
        "num_ids": 50
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max=list1[0]\n    for i in list1:\n        if i < max:\n            max = i\n    return max\n",
        "num_ids": 35
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg_num = min(list1)\n    return largest_neg_num\n",
        "num_ids": 23
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    \n    large = -1\n    for i in list1:\n        if i < 0 and i > large:\n            large = i\n    return large\n    \n    \n    \ndef num_primes(n): \n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n == 0 or n == 1:\n        return False\n    if n == 2:\n        return True\n    if n > 2 and n % 2 == 0:\n        return False\n    for i in range(3, n):\n        if n % i == 0:\n            return False\n    return True\n    \n    \n    \ndef all_primes(list2): \n    '''\n    Write a python function to check whether a given list is a prime number or not.\n    '''\n    if len(list2) == 0:\n        return True\n    else:\n        return all_primes(list2[:-1]) and num_primes(list2[-1])\n    \n    \n    \ndef rotate_matrix(matrix): \n    '''\n    Write a python function to rotate a matrix by 90 degrees\n    '''\n    l = len(matrix)\n    \n    #we need to get the number of columns and rows\n    m = l//2\n    \n    #we can use the zip and zip_longest function to create a pair of indices\n    #for each column and row\n    for i,j in zip(range(0,m), range(m,l)):\n        matrix[i][:], matrix[j][:] = matrix[j][:], matrix[i][:]\n    \n    #the rotation is always done by rotating the matrix about the top left corner\n    #so we need to rotate the matrix about the top left corner to rotate it \n    #in the right direction\n    for i in range(m):\n        for j in range(i):\n            matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n    return matrix\n    \n    \n    \ndef sort_list(list1): \n    '''\n    Write a python function to sort a list using insertion sort algorithm\n    '''\n    for i in range(1,len(list1)):\n        value = list1[i]\n        j = i - 1\n        while j >= 0 and value < list1[j]:\n            list1[j+1] = list1[j]\n            j -= 1\n        list1[j+1] = value\n    return list1\n    \n    \n    \ndef permute(n): \n    '''\n    Write a python function to permute a list using the permutation algorithm\n    '''\n    if len(n) == 1:\n        return [n]\n    else:\n        temp = permute(n[1:])\n        r = []\n        for i in temp:\n            r.append([n[0]]+i)\n        return r\n    \n    \n    \ndef bin_permute(n): \n    '''\n    Write a python function to permute a list using the permutation algorithm\n    using bitwise operators\n    '''\n    if len(n) == 1:\n        return [n]\n    else:\n        temp = bin_permute(n[1:])\n        r = []\n        for i in temp:\n            r.append([n[0]]+i)\n        return r\n    \n    \n    \ndef rotate_matrix(matrix): \n    '''\n    Write a python function to rotate a matrix by 90 degrees\n    '''\n    l = len(matrix)\n    \n    #we need to get the number of columns and rows\n    m = l//2\n    \n    #we can use the zip and zip_longest function to create a pair of indices\n    #for each column and row\n    for i,j in zip(range(0,m), range(m,l)):\n        matrix[i][:], matrix[j][:] = matrix[j][:], matrix[i][:]\n    \n    #the rotation is always done by rotating the matrix about the top left corner\n    #so we need to rotate the matrix about the top left corner to rotate it \n    #in the right direction\n    for i in range(m):\n        for j in range(i):\n            matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n    return matrix\n    \n    \n    \ndef sort_list(list1): \n    '''\n    Write a python function to sort a list using insertion sort algorithm\n    '''\n    for i in range(1,len(list1)):\n        value = list1[i]\n        j = i - 1\n        while j >= 0 and value < list1[j]:\n            list1[j+1] = list1[j]\n            j -= 1\n        list1[j+1] = value\n    return list1\n    \n    \n    \ndef permute(n): \n    '''\n    Write a python function to permute a list using the permutation algorithm\n    '''\n    if len(n) == 1:\n        return [n]\n    else:\n        temp = permute(n[1:])\n        r = []\n        for i in temp:\n            r.append([n[0]]+i)\n        return r\n    \n    \n    \ndef bin_permute(n): \n    '''\n    Write a python function to permute a list using the permutation algorithm\n    using bitwise operators\n    '''\n    if len(n) == 1:\n        return [n]\n    else:\n        temp = bin_permute(n[1:])\n        r = []\n        for i in temp:\n            r.append([n[0]]+i)\n        return r\n    \n    \n    \ndef rotate_matrix(matrix): \n    '''\n    Write a python function to rotate a matrix by 90 degrees\n    '''\n    l = len(matrix)\n    \n    #we need to get the number of columns and rows\n    m = l//2\n    \n    #we can use the zip and zip_longest function to create a pair of indices\n    #for each column and row\n    for i,j in zip(range(0,m), range(m,l)):\n        matrix[i][:], matrix[j][:] = matrix[j][:], matrix[i][:]\n    \n    #the rotation is always done by rotating the matrix about the top left corner\n    #so we need to rotate the matrix about the top left corner to rotate it \n    #in the right direction\n    for i in range(m):\n        for j in range(i):\n            matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n    return matrix\n    \n    \n    \ndef sort_list(list1): \n    '''\n    Write a python function to sort a list using insertion sort algorithm\n    '''\n    for i in range(1,len(list1)):\n        value = list1[i]\n        j = i - 1\n        while j >= 0 and value < list1[j]:\n            list1[j+1] = list1[j]\n            j -= 1\n        list1[j+1] = value\n    return list1\n    \n    \n    \ndef permute(n): \n    '''\n    Write a python function to permute a list using the permutation algorithm\n    '''\n    if len(n) == 1:\n        return [n]\n    else:\n        temp = permute(n[1:])\n        r = []\n        for i in temp:\n            r.append([n[0]]+i)\n        return r\n    \n    \n    \ndef bin_permute(n): \n    '''\n    Write a python function to permute a list using the permutation algorithm\n    using bitwise operators\n    '''\n    if len(n) == 1:\n        return [n]\n    else:\n        temp = bin_permute(n[1:])\n        r = []\n        for i in temp:\n            r.append([n[0]]+i)\n        return r\n    \n    \n    \ndef rotate_matrix(matrix): \n    '''\n    Write a python function to rotate a matrix by 90 degrees\n    '''\n    l = len(matrix)\n    \n    #we need to get the number of columns and rows\n    m = l//2",
        "num_ids": 32
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if(list1[i]<list1[j]):\n                list1[i],list1[j] = list1[j],list1[i]\n    return list1[-1]\n    ",
        "num_ids": 77
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    size = len(list1)\n    \n    # Initialize index for max and min values\n    max_index = 0\n    min_index = 0\n    \n    for i in range(size):\n        if list1[i] < 0:\n            # store index value of the negative number\n            min_index = i\n        if list1[i] > 0:\n            # store index value of the positive number\n            max_index = i\n    # Return index of the min value\n    return min_index\n",
        "num_ids": 120
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -1\n    for number in list1:\n        if number < 0:\n            max_neg = number\n    return max_neg\n",
        "num_ids": 38
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return tuple(i[:K] for i in test_list)\n",
        "num_ids": 19
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(t[0:K]) for t in test_list]\n",
        "num_ids": 22
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trim_list = []\n    for i in test_list:\n        if len(i) == K:\n            trim_list.append(i)\n    return trim_list\n",
        "num_ids": 46
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: tuple(x[:K]), test_list))\n",
        "num_ids": 23
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for tup in test_list:\n        if len(tup) > K:\n            return tup[K:]\n",
        "num_ids": 31
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    i = 0\n    while i < len(test_list):\n        if test_list[i][K] == '(':\n            test_list[i] = test_list[i][1:len(test_list[i])-1]\n            test_list.remove(test_list[i])\n        else:\n            i += 1\n    return test_list\n",
        "num_ids": 89
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return tuple([x[K:] for x in test_list])\n",
        "num_ids": 18
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_tuple_list = []\n    for i in test_list:\n        trimmed_tuple_list.append(i[K:])\n    return trimmed_tuple_list\n",
        "num_ids": 50
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if not test_list:\n        return test_list\n    elif len(test_list) == K:\n        return test_list\n    else:\n        return test_list[:K]\n",
        "num_ids": 49
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for ele in test_list:\n        ele = ele[0:K]\n    return test_list\n",
        "num_ids": 27
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Invalid Tuple\"\n    output_tup = []\n    for i in range(len(test_tup1)):\n        output_tup.append(test_tup1[i] * test_tup2[i])\n    return output_tup\n",
        "num_ids": 87
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError\n    else:\n        return tuple([test_tup1[i] * test_tup2[i] for i in range(len(test_tup1))])\n",
        "num_ids": 67
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    #len1 = len(test_tup1)\n    #len2 = len(test_tup2)\n    #res = [()]*len1\n    #for i in range(0,len1):\n    #    res[i] = tuple(map(lambda x,y:x*y,test_tup1[i],test_tup2[i]))\n    #return tuple(res)\n",
        "num_ids": 101
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    mult_tup = tuple()\n    for i, j in zip(test_tup1, test_tup2):\n        mult_tup = mult_tup + (i*j,)\n    return mult_tup\n",
        "num_ids": 58
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    try:\n        result = tuple()\n        for tup1_item, tup2_item in zip(test_tup1, test_tup2):\n            result += (tup1_item*tup2_item,)\n        return result\n    except Exception as e:\n        print(e)\n        \nif __name__ == '__main__':\n    # creating 2 tuples\n    tup1 = (1,2,3,4,5)\n    tup2 = (6,7,8,9,10)\n    \n    # testing index wise multiplication\n    print(index_multiplication(tup1, tup2))",
        "num_ids": 154
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    print result\n",
        "num_ids": 50
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    assert type(test_tup1) == tuple and type(test_tup2) == tuple\n    assert len(test_tup1) == len(test_tup2)\n    index_tup = tuple(0 for x in range(len(test_tup1)))\n    return tuple(map(lambda x, y: x * y, test_tup1, test_tup2))\n    \n",
        "num_ids": 99
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return [(a,b) for a in test_tup1 for b in test_tup2]\n",
        "num_ids": 27
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return [(test_tup1[i]*test_tup2[i]) for i in range(len(test_tup1))]\n",
        "num_ids": 37
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple([test_tup1[x] * test_tup2[x] for x in range(len(test_tup1))])\n",
        "num_ids": 38
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    d = Counter(lst) \n    for key, value in d.items(): \n        print (key, value) \n        if key not in tup: \n            return\n        elif key in tup: \n            if value > 1: \n                return\n            else: \n                return key \n",
        "num_ids": 77
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup = tuple(tup)\n    return Counter(lst) & Counter(tup)\n",
        "num_ids": 26
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\n",
        "num_ids": 13
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(tup) & Counter(lst)\n",
        "num_ids": 16
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter() \n    for i in lst: \n        c[i] += 1\n    return tuple(c.items())\n",
        "num_ids": 35
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if i in tup:\n            count += 1\n    return count\n    \ndef find_All_Permutation(lst):\n    '''\n    Write a python function to find the all permutation of a list\n    '''\n    result = []\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    result += find_All_Permutation([x for x in lst[1:]])\n    result += [lst[0] + x for x in find_All_Permutation([x for x in lst[1:] if x!= lst[0]])]\n    return result\n    \ndef find_Substring(str1, str2):\n    '''\n    Write a python function to find the common substring of two strings\n    '''\n    if len(str1) < len(str2):\n        return find_Substring(str2, str1)\n    if len(str2) == 0:\n        return \"\"\n    if str1[:len(str2)] == str2:\n        return str2\n    return find_Substring(str2, str1[1:])\n    \ndef find_Duplicate(lst):\n    '''\n    Write a python function to find the duplicate number in a list\n    '''\n    if len(lst) == 1:\n        return None\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return lst[0]\n        else:\n            return None\n    \n    lst = sorted(lst)\n    if lst[-1] == lst[-2]:\n        return lst[-2]\n    return find_Duplicate([x for x in lst[1:-1] if x == lst[-2]])\n",
        "num_ids": 125
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    ct = Counter(tup)\n    return ct[lst]\n",
        "num_ids": 20
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(tup) & Counter(lst) \n    \n",
        "num_ids": 19
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = {}\n    for item in lst:\n        counter[item] = counter.get(item,0) + 1\n    for item in tup:\n        print \"%d: %d\"%(item, counter[item])\n    return None\n",
        "num_ids": 61
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    d = Counter(tup)\n    for x in lst:\n        if x in d:\n            print (x, d[x])\n            d[x] = d[x] - 1\n            if d[x] == 0:\n                del d[x]\n        else:\n            print ('Not present')\n",
        "num_ids": 77
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for i in nums:\n        cubes.append(i**3)\n    return cubes\n",
        "num_ids": 31
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for item in nums:\n        cubes.append(item**3)\n    return cubes\n",
        "num_ids": 31
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for num in nums:\n        cube_list.append(num ** 3)\n    return cube_list\n",
        "num_ids": 35
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes\n",
        "num_ids": 31
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**3)\n",
        "num_ids": 18
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return cal_sum(n-1) + n\n    ",
        "num_ids": 43
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    def helper(n):\n        if n == 1:\n            return 1\n        return n + helper(n - 1)\n    \n    if n == 0:\n        return 0\n    return helper(n) + helper(n - 1)\n",
        "num_ids": 58
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1,n):\n        total += i\n    return total\n",
        "num_ids": 27
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n < 1:\n        return 0\n    return n + cal_sum(n-1)\n",
        "num_ids": 26
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return cal_sum(n-1) + cal_sum(n-2)\n",
        "num_ids": 49
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    return n + cal_sum(n-1)\n",
        "num_ids": 26
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(n+1):\n        if i % 3 == 0:\n            s += i\n        elif i % 5 == 0:\n            s += i\n    return s\n",
        "num_ids": 51
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n < 4:\n        return 2\n    else:\n        return 2*cal_sum(n-1) + 3\n    \n",
        "num_ids": 46
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    return cal_sum(n-1) + (n-1)*(n)\n",
        "num_ids": 33
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return cal_sum(n-1) + n\n",
        "num_ids": 42
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l < len(str):\n        return str[l]\n    else:\n        return None\n",
        "num_ids": 26
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    i = 0\n    while i < l:\n        if len(str) < l:\n            break\n        print str[:l]\n        str = str[l:]\n        i += 1\n",
        "num_ids": 48
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    \n    print(\"\\n\" + str + \"\\n\")\n    \n    if not isinstance(l, list):\n        print(\"List not provided\")\n        return\n    \n    if len(l) < 1:\n        print(\"List is empty\")\n        return\n    \n    print(\"Given list is: \" + str(l))\n    \n    i = 0\n    \n    while i < len(l):\n        if not isinstance(l[i], str):\n            print(\"List element is not a string\")\n            print(\"Removing element at index \" + str(i) + \" from list\")\n            del l[i]\n            continue\n        i += 1\n    \n    print(\"\\nProcessed list is: \" + str(l))\n    \n    size = int(input(\"Enter size of string to extract: \"))\n    \n    i = 0\n    \n    if size > len(l):\n        print(\"Size of string to extract exceeds size of list\")\n        return\n    \n    if size < 1:\n        print(\"Size of string to extract is invalid\")\n        return\n    \n    while i < len(l):\n        if len(l[i]) < size:\n            print(\"String length is less than size of string to extract\")\n            print(\"Removing element at index \" + str(i) + \" from list\")\n            del l[i]\n            continue\n        i += 1\n    \n    print(\"\\nProcessed list is: \" + str(l))\n    \n    return l\n",
        "num_ids": 352
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted = []\n    for i in l:\n        extracted.append(str[i:i+l])\n    return extracted\n    \ndef find_longest_string(l):\n    '''\n    Write a function to find the longest string in a list of strings.\n    '''\n    max_length = 0\n    max_string = ''\n    for i in l:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_string = i\n    return max_string\n    \ndef get_hobbies(l):\n    '''\n    Write a function to extract hobbies from a list of dictionaries.\n    '''\n    hobbies = []\n    for i in l:\n        hobbies.append(i['Hobbies'])\n    return hobbies\n    \ndef get_url_filenames(l):\n    '''\n    Write a function to extract URLs from a list of dictionaries.\n    '''\n    urls = []\n    for i in l:\n        urls.append(i['URL'])\n    return urls\n    \ndef get_email_domains(l):\n    '''\n    Write a function to extract domains from a list of dictionaries.\n    '''\n    domains = []\n    for i in l:\n        domains.append(i['Email'].split('@')[1])\n    return domains\n    \ndef get_skills(l):\n    '''\n    Write a function to extract skills from a list of dictionaries.\n    '''\n    skills = []\n    for i in l:\n        skills.append(i['Skills'])\n    return skills\n    \ndef get_job_titles(l):\n    '''\n    Write a function to extract job titles from a list of dictionaries.\n    '''\n    job_titles = []\n    for i in l:\n        job_titles.append(i['Title'])\n    return job_titles\n    \ndef get_years_experience(l):\n    '''\n    Write a function to extract years of experience from a list of dictionaries.\n    '''\n    years = []\n    for i in l:\n        years.append(i['Experience'])\n    return years\n    \ndef get_employer_names(l):\n    '''\n    Write a function to extract employer names from a list of dictionaries.\n    '''\n    employer_names = []\n    for i in l:\n        employer_names.append(i['Employer'])\n    return employer_names\n    \ndef get_dob(l):\n    '''\n    Write a function to extract DOB from a list of dictionaries.\n    '''\n    dob = []\n    for i in l:\n        dob.append(i['DOB'])\n    return dob\n    \ndef get_locations(l):\n    '''\n    Write a function to extract locations from a list of dictionaries.\n    '''\n    locations = []\n    for i in l:\n        locations.append(i['Location'])\n    return locations\n    \ndef get_job_descriptions(l):\n    '''\n    Write a function to extract job descriptions from a list of dictionaries.\n    '''\n    job_descriptions = []\n    for i in l:\n        job_descriptions.append(i['Description'])\n    return job_descriptions\n    \ndef get_job_categories(l):\n    '''\n    Write a function to extract job categories from a list of dictionaries.\n    '''\n    job_categories = []\n    for i in l:\n        job_categories.append(i['Category'])\n    return job_categories\n    \ndef get_job_types(l):\n    '''\n    Write a function to extract job types from a list of dictionaries.\n    '''\n    job_types = []\n    for i in l:\n        job_types.append(i['Job Type'])\n    return job_types\n    \ndef get_job_function(l):\n    '''\n    Write a function to extract job functions from a list of dictionaries.\n    '''\n    job_function = []\n    for i in l:\n        job_function.append(i['Job Function'])\n    return job_function\n    \ndef get_job_specializations(l):\n    '''\n    Write a function to extract job specializations from a list of dictionaries.\n    '''\n    job_specializations = []\n    for i in l:\n        job_specializations.append(i['Specialization'])\n    return job_specializations\n    \ndef get_job_responsibilities(l):\n    '''\n    Write a function to extract job responsibilities from a list of dictionaries.\n    '''\n    job_responsibilities = []\n    for i in l:\n        job_responsibilities.append(i['Responsibilities'])\n    return job_responsibilities\n    \ndef get_job_requirements(l):\n    '''\n    Write a function to extract job requirements from a list of dictionaries.\n    '''\n    job_requirements = []\n    for i in l:\n        job_requirements.append(i['Requirements'])\n    return job_requirements\n    \ndef get_job_prerequisites(l):\n    '''\n    Write a function to extract job prerequisites from a list of dictionaries.\n    '''\n    job_prerequisites = []\n    for i in l:\n        job_prerequisites.append(i['Prerequisites'])\n    return job_prerequisites\n    \ndef get_job_recommendations(l):\n    '''\n    Write a function to extract job recommendations from a list of dictionaries.\n    '''\n    job_recommendations = []\n    for i in l:\n        job_recommendations.append(i['Recommendations'])\n    return job_recommendations\n    \ndef get_job_awards(l):\n    '''\n    Write a function to extract job awards from a list of dictionaries.\n    '''\n    job_awards = []\n    for i in l:\n        job_awards.append(i['Awards'])\n    return job_awards\n    \ndef get_job_contacts(l):\n    '''\n    Write a function to extract job contacts from a list of dictionaries.\n    '''\n    job_contacts = []\n    for i in l:\n        job_contacts.append(i['Contacts'])\n    return job_contacts\n    \ndef get_jobs_from_category(category, l):\n    '''\n    Write a function to extract jobs from a given category.\n    '''\n    category_jobs = []\n    for i in l:\n        if i['Category'] == category:\n            category_jobs.append(i)\n    return category_jobs\n    \ndef get_jobs_from_subcategory(subcategory, l):\n    '''\n    Write a function to extract jobs from a given subcategory.\n    '''\n    subcategory_jobs = []\n    for i in l:\n        if i['Category'] == 'Skills' and i['Subcategory'] == subcategory:\n            subcategory_jobs.append(i)\n    return subcategory_jobs\n    \ndef get_jobs_from_skill(skill, l):\n    '''\n    Write a function to extract jobs from a given skill.\n    '''\n    skill_jobs = []\n    for i in l:\n        if i['Category'] == 'Skills' and i['Skill'] == skill:\n            skill_jobs.append(i)\n    return skill_jobs\n    \ndef get_jobs_from_location(location, l):\n    '''\n    Write a function to extract jobs from a given location.\n    '''\n    location_jobs = []\n    for i in l:\n        if i['Location'] == location:\n            location_jobs.append(i)\n    return location_jobs\n    \ndef get_jobs_from_employer(employer, l):\n    '''\n    Write a function to extract jobs from a given employer.\n    '''\n    employer_jobs = []\n    for i in l:\n        if i['Employer'] == employer:\n            employer_jobs.append(i)\n    return employer_jobs\n    \ndef get_jobs_from_title(title, l):\n    '''\n    Write a function to extract jobs from a given title.\n    '''\n    title_jobs = []\n    for ",
        "num_ids": 12
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    start = l.index(str)\n    end = start + len(str)\n    return ''.join(l[start:end])\n",
        "num_ids": 35
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    dic = {}\n    # ['h', 'e', 'l', 'l', 'o']\n    # ['a', 'p', 'p', 'a','m']\n",
        "num_ids": 43
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    count = len(str)\n    if count == 0:\n        return '','',''\n    elif count < l:\n        return '', '', str\n    else:\n        string = str[:l]\n        return string, str[l:], '...'\n",
        "num_ids": 66
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return \"\".join(l[:l[0]]), \"\".join(l[l[0]:])\n",
        "num_ids": 28
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    import re\n    strs = re.findall(r'(?<=\\b%s\\b)\\w+' % l, str)\n    return strs\n",
        "num_ids": 42
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    l = l*2\n    out = []\n    for s in str:\n        for i in range(len(s)):\n            if i + l < len(s):\n                out.append(s[i:i+l])\n    return out\n",
        "num_ids": 62
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    res=\"\"\n    for i in text1:\n        if(i!=' '):\n            res=res+i\n    return res\n",
        "num_ids": 34
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace(\" \", \"\")\n    return text1\n",
        "num_ids": 20
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(\"\\s\\s*\", \"\", text1)\n    return text2\n",
        "num_ids": 27
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(\"\\s+\", \"\", text1)\n",
        "num_ids": 18
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub('\\s+', '', text1)\n    return text2\n    \ndef my_abs(x):\n    '''\n    Write a function that returns the absolute value of a number.\n    '''\n    if not isinstance(x, (int, float)):\n        raise TypeError('bad operand type')\n    if x >= 0:\n        return x\n    else:\n        return -x\n    \ndef my_max(x, y):\n    '''\n    Write a function that returns the max of two numbers.\n    '''\n    if not isinstance(x, (int, float)) or not isinstance(y, (int, float)):\n        raise TypeError('bad operand type')\n    if x > y:\n        return x\n    else:\n        return y\n",
        "num_ids": 59
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    new_text1 = text1.replace(' ','')\n    return new_text1\ndef replace_abbreviations(text1):\n    '''\n    Replace Abbreviations in the given string\n    '''\n    text2 = re.sub(r'(?<!\\w\\.\\w.)(?<![A-Z]\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<!\\w\\.\\w.)(?<![A-Z][a-z]\\.)(?<![A-Z]\\.)(?<=\\.)(?<!\\w\\.\\w.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![A-Z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![A-Z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)(?<=\\.)(?<![a-z]\\.)(?<=\\.)(?<![A-Z][a-z]\\.)",
        "num_ids": 1958
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    str1=text1\n    lst=[]\n    for elem in str1:\n        if(elem!=' '):\n            lst.append(elem)\n    return ''.join(lst)\n",
        "num_ids": 54
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+', '', text1)\n",
        "num_ids": 18
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(\"[\\s+]*\",' ',text1)\n",
        "num_ids": 21
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(\"\\s+\",\"\",text1)\n",
        "num_ids": 17
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = sale_amount-actual_cost\n    if loss_amount<0:\n        loss_amount=0\n    return loss_amount\n",
        "num_ids": 37
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return sale_amount - actual_cost\n    \n",
        "num_ids": 14
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    #pass #remove this line\n    return round(actual_cost - sale_amount,2)\n",
        "num_ids": 25
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return sale_amount-actual_cost\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return abs(actual_cost-sale_amount) if sale_amount>actual_cost else 0\n",
        "num_ids": 25
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = actual_cost - sale_amount\n    return loss\n",
        "num_ids": 17
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if (actual_cost-sale_amount)<0:\n        return 0\n    else:\n        return actual_cost-sale_amount\n    \n",
        "num_ids": 37
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss=float(sale_amount-actual_cost)\n    if loss<0:\n        loss=0\n    return loss\n",
        "num_ids": 32
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    res = 0\n    for i in range(1,n):\n        if n % i == 0:\n            if i % 2 == 0:\n                res = res + i\n    return res\n    \ndef isPrime(n):\n    '''\n    Write a python function to check if a number is prime or not\n    '''\n    if n == 2:\n        return True\n    if n == 3 or n == 5:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef isPalindrome(n):\n    '''\n    Write a python function to check if a number is palindrome or not\n    '''\n    s = str(n)\n    length = len(s)\n    i = 0\n    j = length - 1\n    while i<j:\n        if s[i]!= s[j]:\n            return False\n        i = i + 1\n        j = j - 1\n    return True\n    \ndef closestPalindrome(n):\n    '''\n    Write a python function to find the closest palindrome greater than n.\n    '''\n    if n < 10:\n        return n\n    if (n % 10 == 0):\n        return n\n    digits = int(math.log10(n)) + 1\n    # print digits\n    # print n\n    if n % 10 == 1:\n        lower = n + 9\n        upper = n - 1\n    elif n % 10 == 2 or n % 10 == 3 or n % 10 == 4:\n        lower = n + 8\n        upper = n - 2\n    else:\n        lower = n + 7\n        upper = n - 3\n    while (lower > n):\n        lower = lower / 10\n    while (upper > n):\n        upper = upper / 10\n    # print upper\n    # print lower\n    if (abs(lower - n) < abs(upper - n)):\n        return lower\n    else:\n        return upper\n        \ndef isPerfect(n):\n    '''\n    Write a python function to check if a number is perfect or not\n    '''\n    div = 2\n    s = 0\n    while n > div:\n        if (n % div == 0):\n            s = s + div\n        div = div + 1\n    if s == n:\n        return True\n    else:\n        return False\n        \ndef isPandigital(n):\n    '''\n    Write a python function to check if a number is pandigital or not\n    '''\n    digits = set()\n    for i in range(1, len(str(n)) + 1):\n        digits.add(str(i))\n    s = str(n)\n    if len(s) == len(digits):\n        for i in range(1, len(s) + 1):\n            if s[i - 1] not in digits:\n                return False\n        return True\n    else:\n        return False\n        \ndef isPanlindrom(n):\n    '''\n    Write a python function to check if a number is palindrome or not\n    '''\n    rev = 0\n    temp = n\n    while n > 0:\n        dig = n % 10\n        rev = rev * 10 + dig\n        n = n / 10\n    if temp == rev:\n        return True\n    else:\n        return False\n        \ndef isPrimeFraction(x, y):\n    '''\n    Write a python function to check if a number is prime fraction or not\n    '''\n    a = x / y\n    if (a == int(a)):\n        return True\n    return False\n        \ndef isFraction(x, y):\n    '''\n    Write a python function to check if a number is fraction or not\n    '''\n    a = x / y\n    if (a == int(a)):\n        return True\n    return False\n    \ndef isFractional(n):\n    '''\n    Write a python function to check if a number is fractional or not\n    '''\n    i = n\n    while i > 0:\n        if i % 10 == 0:\n            return False\n        i = i / 10\n    return True\n    \ndef isKaprekarNumber(n):\n    '''\n    Write a python function to check if a number is Kaprekar Number or not\n    '''\n    sq = n * n\n    rev = 0\n    while n > 0:\n        dig = n % 10\n        rev = rev * 10 + dig\n        n = n / 10\n    if sq == rev:\n        return True\n    return False\n        \ndef isKaprekarSquare(n):\n    '''\n    Write a python function to check if a number is Kaprekar Square or not\n    '''\n    sq = n * n\n    rev = 0\n    while n > 0:\n        dig = n % 10\n        rev = rev * 10 + dig\n        n = n / 10\n    if sq == rev:\n        return True\n    return False\n    \ndef isSumofSquares(n):\n    '''\n    Write a python function to check if a number is sum of squares or not\n    '''\n    sum = 0\n    while n > 0:\n        dig = n % 10\n        sum = sum + dig * dig\n        n = n / 10\n    return sum == n\n    \ndef isPentagonal(n):\n    '''\n    Write a python function to check if a number is pentagonal or not\n    '''\n    a = (1 + math.sqrt(1 + 24 * n)) / 6\n    if a == int(a):\n        return True\n    return False\n    \ndef isHexagonal(n):\n    '''\n    Write a python function to check if a number is hexagonal or not\n    '''\n    a = (1 + math.sqrt(1 + 8 * n)) / 4\n    if a == int(a):\n        return True\n    return False\n        \ndef isHeptagonal(n):\n    '''\n    Write a python function to check if a number is heptagonal or not\n    '''\n    a = (1 + math.sqrt(1 + 8 * n)) / 4\n    if a == int(a):\n        return True\n    return False\n    \ndef isOctagonal(n):\n    '''\n    Write a python function to check if a number is octagonal or not\n    '''\n    a = (1 + math.sqrt(1 + 8 * n)) / 4\n    if a == int(a):\n        return True\n    return False\n    \ndef isIcosagonal(n):\n    '''\n    Write a python function to check if a number is icosagonal or not\n    '''\n    a = (1 + math.sqrt(1 + 24 * n)) / 6\n    if a == int(a):\n        return True\n    return False\n    \ndef isTrinagular(n):\n    '''\n    Write a python function to check if a number is trinagular or not\n    '''\n    a = (1 + math.sqrt(1 + 8 * n)) / 4\n    if a == int(a):\n        return True\n    return False\n    \ndef isArithmetic(n):\n    '''\n    Write a python function to check if a number is arithmetic or not\n    '''\n    a = (1 + math.sqrt(1 + 8 * n)) / 4\n    if a == int(a):\n        return True\n    return False\n    \ndef isArmstrong(n):\n    '''\n    Write a python function to check if a number is armstrong or not\n    '''\n    s = 0\n    while n > 0:\n        d = n % 10\n        s = s + pow(d, len(str(n)))\n        n = n / 10\n    if s == n:\n        return True\n    return False\n    \ndef isHarshad(n):\n    '''\n    Write a python function to check if a number is harshad or not\n    '''\n    if n < 0:\n        return False\n    sum = 0\n    while n > 0:\n        dig = n % 10\n        sum = sum + dig\n        n = n / 10\n    if sum % 2 == 0:\n        return True\n    return False\n    \ndef isPermutation(n1, n2):\n    '''\n    Write a python function to check if a number is permutation or not\n    '''\n    if len(st",
        "num_ids": 7
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    numFactors = 0\n    for i in range(1,n) :\n        if n % i == 0 and i % 2 == 0 :\n            numFactors = numFactors + i\n    return numFactors\n",
        "num_ids": 53
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return (sum([i for i in range(1,n) if n%i == 0 and i%2==0]))\n",
        "num_ids": 32
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 2 : \n        return 0\n    if n == 2 :\n        return 2\n    if n%2 == 0 : \n        return 2 + sumofFactors(n/2)\n    else :\n        return sumofFactors(n-1)\ndef sumofFibonacciNumbers(n) :\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 2 : \n        return 0\n    if n == 2 :\n        return 2\n    if n%2 == 0 : \n        return 2 + sumofFibonacciNumbers(n/2)\n    else :\n        return sumofFibonacciNumbers(n-1) + sumofFibonacciNumbers(n-2)\ndef sumofPrimes(n) :\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 2 : \n        return 0\n    if n == 2 :\n        return 2\n    if n%2 == 0 : \n        return 2 + sumofPrimes(n/2)\n    else :\n        return sumofPrimes(n-1)\ndef sumofDigits(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 10 : \n        return n\n    else : \n        return (n%10) + sumofDigits(n/10)\ndef sumofDigitsPrime(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 10 : \n        return n\n    else : \n        if n%10 == 2 or n%10 == 3 or n%10 == 5 : \n            return (n%10) + sumofDigitsPrime(n/10)\n        else : \n            return sumofDigitsPrime(n/10)\ndef sumofDigitsPrime(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 10 : \n        return n\n    else : \n        if n%10 == 2 or n%10 == 3 or n%10 == 5 : \n            return (n%10) + sumofDigitsPrime(n/10)\n        else : \n            return sumofDigitsPrime(n/10)\ndef sumofDigitsEven(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 10 : \n        return n\n    else : \n        if n%2 == 0 : \n            return (n%10) + sumofDigitsEven(n/10)\n        else : \n            return sumofDigitsEven(n/10)\ndef sumofDigitsPrime(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 10 : \n        return n\n    else : \n        if n%10 == 2 or n%10 == 3 or n%10 == 5 : \n            return (n%10) + sumofDigitsPrime(n/10)\n        else : \n            return sumofDigitsPrime(n/10)\ndef sumofDigitsPrime(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 10 : \n        return n\n    else : \n        if n%10 == 2 or n%10 == 3 or n%10 == 5 : \n            return (n%10) + sumofDigitsPrime(n/10)\n        else : \n            return sumofDigitsPrime(n/10)\ndef sumofDigitsPrime(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 10 : \n        return n\n    else : \n        if n%10 == 2 or n%10 == 3 or n%10 == 5 : \n            return (n%10) + sumofDigitsPrime(n/10)\n        else : \n            return sumofDigitsPrime(n/10)\ndef sumofDigitsPrime(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 10 : \n        return n\n    else : \n        if n%10 == 2 or n%10 == 3 or n%10 == 5 : \n            return (n%10) + sumofDigitsPrime(n/10)\n        else : \n            return sumofDigitsPrime(n/10)\ndef sumofDigitsPrime(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 10 : \n        return n\n    else : \n        if n%10 == 2 or n%10 == 3 or n%10 == 5 : \n            return (n%10) + sumofDigitsPrime(n/10)\n        else : \n            return sumofDigitsPrime(n/10)\ndef sumofDigitsPrime(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 10 : \n        return n\n    else : \n        if n%10 == 2 or n%10 == 3 or n%10 == 5 : \n            return (n%10) + sumofDigitsPrime(n/10)\n        else : \n            return sumofDigitsPrime(n/10)\ndef sumofDigitsPrime(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 10 : \n        return n\n    else : \n        if n%10 == 2 or n%10 == 3 or n%10 == 5 : \n            return (n%10) + sumofDigitsPrime(n/10)\n        else : \n            return sumofDigitsPrime(n/10)\ndef sumofDigitsPrime(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 10 : \n        return n\n    else : \n        if n%10 == 2 or n%10 == 3 or n%10 == 5 : \n            return (n%10) + sumofDigitsPrime(n/10)\n        else : \n            return sumofDigitsPrime(n/10)\ndef sumofDigitsPrime(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 10 : \n        return n\n    else : \n        if n%10 == 2 or n%10 == 3 or n%10 == 5 : \n            return (n%10) + sumofDigitsPrime(n/10)\n        else : \n            return sumofDigitsPrime(n/10)\ndef sumofDigitsPrime(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 10 : \n        return n\n    else : \n        if n%10 == 2 or n%10 == 3 or n%10 == 5 : \n            return (n%10) + sumofDigitsPrime(n/10)\n        else : \n            return sumofDigitsPrime(n/10)\ndef sumofDigitsPrime(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 10 : \n        return n\n    else : \n        if n%10 == 2 or n%10 == 3 or n%10 == 5 : \n            return (n%10) + sumofDigitsPrime(n/10)\n        else : \n            return sumofDigitsPrime(n/10)\ndef sumofDigitsPrime(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 10 : \n        return n\n    else : \n        if n%10 == 2 or n%10 == 3 or n%10 == 5 : \n            return (n%10) + sumo",
        "num_ids": 51
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            factors.append(i)\n    s = 0\n    for i in factors:\n        if i%2==0:\n            s = s+i\n    return s\n",
        "num_ids": 71
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    # One by one consider all the divisors \n    for i in range(1, n) : \n    \n        # If divisor is a factor and divisor is even, \n        if (n % i == 0) : \n            \n            # Sum of factors \n            sum += i \n    return sum\n",
        "num_ids": 84
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = []\n    for i in range(1, (int)(math.sqrt(n))+1):\n        if n % i == 0:\n            factors.append(i)\n            if i * i!= n:\n                factors.append(int(n / i))\n    return sum(factors)\n",
        "num_ids": 79
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Initialize result\n    result = 0\n    # Calculate factors and if even add to result\n    for i in range(1, (n // 2) + 1) :\n        if n % i == 0 :\n            if i % 2 == 0 :\n                result = result + i\n    # Return final result\n    return result\ndef sumofSquareFactors(n) : \n    '''\n    Write a python function to find the sum of square of even factors of a number.\n    '''\n    # Initialize result\n    result = 0\n    # Calculate factors and if even add to result\n    for i in range(1, (n // 2) + 1) :\n        if n % i == 0 :\n            if i % 2 == 0 :\n                result = result + pow(i, 2)\n    # Return final result\n    return result\ndef countDigitOne(n) : \n    '''\n    Write a python function to count the number of digits 1 in a given number\n    '''\n    # Initialize count\n    count = 0\n    # Count the number of 1's in the number\n    while n :\n        if n % 10 == 1 :\n            count = count + 1\n        n = n // 10\n    # Return the count\n    return count\ndef sumofDigits(n) : \n    '''\n    Write a python function to find the sum of digits in a given number\n    '''\n    # Initialize result\n    result = 0\n    # Traverse the number\n    while n :\n        rem = n % 10\n        result = result + rem\n        n = n // 10\n    # Return the result\n    return result\ndef countDigitNines(n) : \n    '''\n    Write a python function to count the number of digits 9 in a given number\n    '''\n    # Initialize count\n    count = 0\n    # Count the number of 9's in the number\n    while n :\n        if n % 10 == 9 :\n            count = count + 1\n        n = n // 10\n    # Return the count\n    return count\ndef swapDigits(num) : \n    '''\n    Write a python function to swap the digits in a given number\n    '''\n    # Initialize nums\n    nums = []\n    # Initialize swapped num\n    swappedNum = 0\n    # Traverse the number\n    while num :\n        rem = num % 10\n        nums.append(rem)\n        num = num // 10\n    # Traverse the list\n    for i in range(len(nums)) :\n        # If i is even\n        if i % 2 == 0 :\n            # Swap with (i+1)th element\n            nums[i], nums[i+1] = nums[i+1], nums[i]\n    # Initialize swapped num\n    swappedNum = 0\n    # Traverse the list again\n    for i in range(len(nums)) :\n        # Add the ith element\n        swappedNum = swappedNum + (nums[i] * pow(10, (len(nums)-1-i)))\n    # Return the result\n    return swappedNum\ndef findPower(num) : \n    '''\n    Write a python function to find the nth power of a given number\n    '''\n    # Initialize result\n    result = 1\n    # Initialize n\n    n = 2\n    # Traverse the number\n    while n <= num :\n        result = result * n\n        n = n + 1\n    # Return the result\n    return result\ndef findPowerList(num) : \n    '''\n    Write a python function to find the nth power of a given number\n    '''\n    # Initialize result\n    result = []\n    # Initialize n\n    n = 2\n    # Traverse the number\n    while n <= num :\n        result.append(n)\n        n = n + 1\n    # Return the result\n    return result\ndef findFactors(n) : \n    '''\n    Write a python function to find the factors of a given number\n    '''\n    # Initialize result\n    result = []\n    # Initialize n\n    n = 2\n    # Traverse the number\n    while n <= n :\n        if n % n == 0 :\n            result.append(n)\n        n = n + 1\n    # Return the result\n    return result\ndef factors(n) : \n    '''\n    Write a python function to find the factors of a given number\n    '''\n    # Initialize result\n    result = []\n    # Initialize n\n    n = 2\n    # Traverse the number\n    while n <= n :\n        if n % n == 0 :\n            result.append(n)\n        n = n + 1\n    # Return the result\n    return result\ndef findNumberOfDigits(n) : \n    '''\n    Write a python function to find the number of digits in a given number\n    '''\n    # Initialize count\n    count = 0\n    # Count the number of digits in the number\n    while n :\n        n = n // 10\n        count = count + 1\n    # Return the count\n    return count\ndef findSumofDigits(n) : \n    '''\n    Write a python function to find the sum of digits in a given number\n    '''\n    # Initialize result\n    result = 0\n    # Traverse the number\n    while n :\n        rem = n % 10\n        result = result + rem\n        n = n // 10\n    # Return the result\n    return result\ndef findCountofDigits(n) : \n    '''\n    Write a python function to find the count of digits in a given number\n    '''\n    # Initialize count\n    count = 0\n    # Count the number of digits in the number\n    while n :\n        if n % 10 == 0 :\n            count = count + 1\n        n = n // 10\n    # Return the count\n    return count\ndef isPerfect(n) : \n    '''\n    Write a python function to find whether a given number is a perfect number\n    '''\n    # Initialize result\n    result = 0\n    # Find the sum of the divisors\n    result = sumofFactors(n)\n    # If sum of divisors is equal to the number itself\n    if result == n :\n        return True\n    # Else\n    return False\ndef isPerfectSquare(n) : \n    '''\n    Write a python function to find whether a given number is a perfect square\n    '''\n    # Initialize result\n    result = 0\n    # Find the sum of the divisors\n    result = sumofSquareFactors(n)\n    # If sum of divisors is equal to the square of the number itself\n    if result == pow(n, 2) :\n        return True\n    # Else\n    return False\ndef isPrime(n) : \n    '''\n    Write a python function to find whether a given number is a prime number\n    '''\n    # Initialize result\n    result = True\n    # Initialize n\n    n = 2\n    # Traverse the number\n    while n < n :\n        if n % n == 0 :\n            result = False\n            break\n        n = n + 1\n    # Return the result\n    return result\ndef isFibonacci(n) : \n    '''\n    Write a python function to find whether a given number is a Fibonacci number\n    '''\n    # Initialize result\n    result = True\n    # Initialize n1 and n2\n    n1 = 1\n    n2 = 1\n    # Traverse the number\n    while n1 < n :\n        # Check if n1 is equal to n2\n        if n1 == n2 :\n            # If n1 is equal to n2\n            # It is a fibonacci number\n            # Otherwise\n            # It is not a fibonacci number\n            result = False\n            break\n        # Update n1 and n2\n        n1 = n2\n        n2 = n1 + n2\n    # Return the result\n    return result\ndef isPalindrome(n) : \n    '''\n    Write a python function to find whether a given number is a palindrome number\n    '''\n    # Initialize result\n    result = True\n    # Initialize n\n    n = 2\n    # Traverse the number\n    while n <= n :\n        # If n is equal to its reverse\n        if n == int(str(n)[::-1]) :\n            # It is a palindrome number\n            # Otherwis",
        "num_ids": 79
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if (n == 1) : \n        return 1\n    if (n == 2) : \n        return 2\n    if (n == 3) : \n        return 6\n    sum = 1\n    for i in range(2,int(math.sqrt(n))+1) : \n        if (n%i == 0) :\n            if (n/i == i) : \n                sum += i\n            else : \n                sum += i + n/i\n    return sum\n",
        "num_ids": 118
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    t = 0\n    for i in range(2, n) : \n        if (n % i == 0) : \n            if (i % 2 == 0) : \n                t = t + i\n    return t\n",
        "num_ids": 55
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #Your code here\n    return re.search('z', text)\n",
        "num_ids": 19
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-z]*z[a-z]*')\n    return pattern.findall(text)\n",
        "num_ids": 39
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r\"\\bz.{3,}\\b\")\n    pattern.findall(text)\n    return pattern.findall(text)\n",
        "num_ids": 42
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[z]+\\b'\n    result = re.search(pattern, text)\n    return result!= None\n",
        "num_ids": 35
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'\\b\\w*z\\b',text,flags=re.IGNORECASE)\ndef text_match_z(text):\n    '''\n    Write a function that matches a word ending in 'z'.\n    '''\n    return re.findall(r'\\b\\w*z$',text,flags=re.IGNORECASE)\ndef text_match_z2(text):\n    '''\n    Write a function that matches a word ending in 'z'.\n    '''\n    return re.findall(r'\\b\\w*z\\b',text,flags=re.IGNORECASE)\ndef text_match_z3(text):\n    '''\n    Write a function that matches a word ending in 'z'.\n    '''\n    return re.findall(r'\\b\\w*z\\b',text,flags=re.IGNORECASE)\ndef text_match_z4(text):\n    '''\n    Write a function that matches a word ending in 'z'.\n    '''\n    return re.findall(r'\\b\\w*z\\b',text,flags=re.IGNORECASE)\ndef text_match_z5(text):\n    '''\n    Write a function that matches a word ending in 'z'.\n    '''\n    return re.findall(r'\\b\\w*z\\b',text,flags=re.IGNORECASE)\ndef text_match_z6(text):\n    '''\n    Write a function that matches a word ending in 'z'.\n    '''\n    return re.findall(r'\\b\\w*z\\b',text,flags=re.IGNORECASE)\ndef text_match_z7(text):\n    '''\n    Write a function that matches a word ending in 'z'.\n    '''\n    return re.findall(r'\\b\\w*z\\b',text,flags=re.IGNORECASE)\ndef text_match_z8(text):\n    '''\n    Write a function that matches a word ending in 'z'.\n    '''\n    return re.findall(r'\\b\\w*z\\b',text,flags=re.IGNORECASE)\ndef text_match_z9(text):\n    '''\n    Write a function that matches a word ending in 'z'.\n    '''\n    return re.findall(r'\\b\\w*z\\b',text,flags=re.IGNORECASE)\ndef text_match_z10(text):\n    '''\n    Write a function that matches a word ending in 'z'.\n    '''\n    return re.findall(r'\\b\\w*z\\b',text,flags=re.IGNORECASE)\ndef text_match_z11(text):\n    '''\n    Write a function that matches a word ending in 'z'.\n    '''\n    return re.findall(r'\\b\\w*z\\b',text,flags=re.IGNORECASE)\ndef text_match_z12(text):\n    '''\n    Write a function that matches a word ending in 'z'.\n    '''\n    return re.findall(r'\\b\\w*z\\b',text,flags=re.IGNORECASE)\ndef text_match_z13(text):\n    '''\n    Write a function that matches a word ending in 'z'.\n    '''\n    return re.findall(r'\\b\\w*z\\b',text,flags=re.IGNORECASE)\ndef text_match_z14(text):\n    '''\n    Write a function that matches a word ending in 'z'.\n    '''\n    return re.findall(r'\\b\\w*z\\b',text,flags=re.IGNORECASE)\ndef text_match_z15(text):\n    '''\n    Write a function that matches a word ending in 'z'.\n    '''\n    return re.findall(r'\\b\\w*z\\b',text,flags=re.IGNORECASE)\ndef text_match_z16(text):\n    '''\n    Write a function that matches a word ending in 'z'.\n    '''\n    return re.findall(r'\\b\\w*z\\b',text,flags=re.IGNORECASE)\ndef text_match_z17(text):\n    '''\n    Write a function that matches a word ending in 'z'.\n    '''\n    return re.findall(r'\\b\\w*z\\b',text,flags=re.IGNORECASE)\ndef text_match_z18(text):\n    '''\n    Write a function that matches a word ending in 'z'.\n    '''\n    return re.findall(r'\\b\\w*z\\b',text,flags=re.IGNORECASE)\ndef text_match_z19(text):\n    '''\n    Write a function that matches a word ending in 'z'.\n    '''\n    return re.findall(r'\\b\\w*z\\b',text,flags=re.IGNORECASE)\ndef text_match_z20(text):\n    '''\n    Write a function that matches a word ending in 'z'.\n    '''\n    return re.findall(r'\\b\\w*z\\b',text,flags=re.IGNORECASE)\ndef text_match_z21(text):\n    '''\n    Write a function that matches a word ending in 'z'.\n    '''\n    return re.findall(r'\\b\\w*z\\b',text,flags=re.IGNORECASE)\ndef text_match_z22(text):\n    '''\n    Write a function that matches a word ending in 'z'.\n    '''\n    return re.findall(r'\\b\\w*z\\b',text,flags=re.IGNORECASE)\ndef text_match_z23(text):\n    '''\n    Write a function that matches a word ending in 'z'.\n    '''\n    return re.findall(r'\\b\\w*z\\b',text,flags=re.IGNORECASE)\ndef text_match_z24(text):\n    '''\n    Write a function that matches a word ending in 'z'.\n    '''\n    return re.findall(r'\\b\\w*z\\b',text,flags=re.IGNORECASE)\ndef text_match_z25(text):\n    '''\n    Write a function that matches a word ending in 'z'.\n    '''\n    return re.findall(r'\\b\\w*z\\b',text,flags=re.IGNORECASE)\ndef text_match_z26(text):\n    '''\n    Write a function that matches a word ending in 'z'.\n    '''\n    return re.findall(r'\\b\\w*z\\b',text,flags=re.IGNORECASE)\ndef text_match_z27(text):\n    '''\n    Write a function that matches a word ending in 'z'.\n    '''\n    return re.findall(r'\\b\\w*z\\b',text,flags=re.IGNORECASE)\ndef text_match_z28(text):\n    '''\n    Write a function that matches a word ending in 'z'.\n    '''\n    return re.findall(r'\\b\\w*z\\b',text,flags=re.IGNORECASE)\ndef text_match_z29(text):\n    '''\n    Write a function that matches a word ending in 'z'.\n    '''\n    return re.findall(r'\\b\\w*z\\b',text,flags=re.IGNORECASE)\ndef text_match_z30(text):\n    '''\n    Write a function that matches a word ending in 'z'.\n    '''\n    return re.findall(r'\\b\\w*z\\b',text,flags=re.IGNORECASE)\ndef text_match_z31(text):\n    '''\n    Write a function that matches a word ending in 'z'.\n    '''\n    return re.findall(r'\\b\\w*z\\b',text,flags=re.IGNORECASE)\ndef text_match_z32(text):\n    '''\n    Write a function that matches a word ending in 'z'.\n    ''",
        "num_ids": 18
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'\\bz\\b', text)\n",
        "num_ids": 19
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(r'\\w*z\\w*', text, re.IGNORECASE)\n",
        "num_ids": 28
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    z = re.compile(r'\\b\\w*z\\w*\\b')\n    m = z.search(text)\n    if m:\n        print m.group()\n    else:\n        print 'No match found'\n",
        "num_ids": 59
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    result = re.findall('\\w*z\\w*', text)\n    return result\n",
        "num_ids": 25
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pat = re.compile(r'\\b\\w*z\\w*\\b', re.I)\n    m = re.match(pat, text)\n    if m:\n        print(m.group(0))\n",
        "num_ids": 56
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 in (4, 6, 9, 11):\n        return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if(monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12):\n        return True\n    else:\n        return False\n    \ndef check_leap_year(year2):\n    '''\n    Write a function to check whether the given year is leap year or not.\n    '''\n    if(year2 % 4 == 0):\n        if(year2 % 100 == 0):\n            if(year2 % 400 == 0):\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n",
        "num_ids": 63
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return 31\n    else:\n        return 30\n",
        "num_ids": 36
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    else:\n        return False\n    \ndef leap_year(year2):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year2 % 4 == 0:\n        if year2 % 100 == 0:\n            if year2 % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n",
        "num_ids": 60
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    else:\n        return 30\n",
        "num_ids": 59
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    elif monthnum2 == 2:\n        if year_number % 4 == 0:\n            if year_number % 100 == 0:\n                if year_number % 400 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 130
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        return True\n    elif monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            return True\n        else:\n            return False\n    elif monthnum2 == 3:\n        return True\n    elif monthnum2 == 4:\n        return True\n    elif monthnum2 == 5:\n        return True\n    elif monthnum2 == 6:\n        return True\n    elif monthnum2 == 7:\n        return True\n    elif monthnum2 == 8:\n        return True\n    elif monthnum2 == 9:\n        return True\n    elif monthnum2 == 10:\n        return True\n    elif monthnum2 == 11:\n        return True\n    elif monthnum2 == 12:\n        return True\n    else:\n        return False\n",
        "num_ids": 210
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return 31\n    elif monthnum2 in [4, 6, 9, 11]:\n        return 30\n    elif monthnum2 == 2:\n        return 29\n    else:\n        return None\n",
        "num_ids": 71
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return map(lambda x: x[::-1], stringlist)\n    \n",
        "num_ids": 21
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    #strings = [s.strip() for s in stringlist]\n    strings = [s.strip('\"') for s in stringlist]\n    #strings = [s[::-1] for s in strings]\n    strings = [s[::-1] for s in strings]\n    return strings\n",
        "num_ids": 72
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [s[::-1] for s in stringlist]\n",
        "num_ids": 18
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [str[::-1] for str in stringlist]\n",
        "num_ids": 18
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for i in stringlist:\n        newlist.append(i[::-1])\n    return newlist\n",
        "num_ids": 34
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for x in range(0, len(stringlist)):\n        stringlist[x] = stringlist[x][::-1]\n    return stringlist\n",
        "num_ids": 39
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for eachstring in stringlist:\n        newlist.append(eachstring[::-1])\n    return newlist\n",
        "num_ids": 36
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for string in stringlist:\n        newlist.append(string[::-1])\n    return newlist\n",
        "num_ids": 34
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    revstringlist = []\n    for string in stringlist:\n        revstringlist.append(string[::-1])\n    return revstringlist\n",
        "num_ids": 37
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [x[::-1] for x in stringlist]\n",
        "num_ids": 18
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) == 1:\n        return lst\n    else:\n        if lst[0][0] > lst[1][0]:\n            return Find_Min(lst[1:])\n        else:\n            return Find_Min(lst[1:])\n",
        "num_ids": 70
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    #first, check the length of sublist\n    for i in range(len(lst)):\n        if len(lst[i]) == minlen:\n            minlst = i\n            break\n        else:\n            minlst = -1\n",
        "num_ids": 62
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    Min = lst[0]\n    i = 1\n    while i < len(lst):\n        if len(lst[i]) < len(Min):\n            Min = lst[i]\n        i = i + 1\n    return Min\n",
        "num_ids": 61
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0][1]\n    index = 0\n    for i in range(0,len(lst)):\n        if lst[i][1] < min:\n            min = lst[i][1]\n            index = i\n    return lst[index]\n",
        "num_ids": 70
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = 9999999\n    min_list = []\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) < min_len:\n                min_len = len(lst[i:j+1])\n                min_list = lst[i:j+1]\n    return min_list\n",
        "num_ids": 103
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minlen = len(lst[0]) \n    res = lst[0] \n    for i in lst: \n        if minlen > len(i): \n            minlen = len(i) \n            res = i \n    return res\n",
        "num_ids": 65
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = len(lst[0])\n    for x in lst:\n        if len(x) < min:\n            min = len(x)\n            res = x\n    return res\n",
        "num_ids": 48
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    m=len(lst[0])\n    n=len(lst)\n    for i in range(n):\n        for j in range(n-i):\n            if len(lst[j])<m:\n                m=len(lst[j])\n    return m\n",
        "num_ids": 70
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    length = len(lst)\n    sublist = lst[0]\n    for i in range(1, length):\n        if len(sublist) > len(lst[i]):\n            sublist = lst[i]\n    return sublist\n",
        "num_ids": 66
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    l = len(lst)\n    minlen = l\n    minl = [0]\n    for i in range(0,l):\n        if lst[i] in minl:\n            continue\n        else:\n            sl = Find_Sublist(lst,i)\n            if len(sl) < minlen:\n                minlen = len(sl)\n                minl = sl\n    print \"minimum length is\", minlen\n    print \"minimum sublist is\", minl\n",
        "num_ids": 116
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n    \ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2*(l+b)\n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\n    \ndef circle_perimeter(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    return math.pi*2*r\n    \ndef triangle_area(b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return.5*b*h\n    \ndef triangle_perimeter(b,h):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    return b+h+math.sqrt(b**2+h**2)\n    \ndef pyramid_area(b,h):\n    '''\n    Write a function to find the area of a pyramid.\n    '''\n    return (b*h)/2\n    \ndef pyramid_perimeter(b,h):\n    '''\n    Write a function to find the perimeter of a pyramid.\n    '''\n    return b+h+math.sqrt(b**2+h**2)\n    \ndef grid_area(r,c):\n    '''\n    Write a function to find the area of a grid.\n    '''\n    return r*c\n    \ndef grid_perimeter(r,c):\n    '''\n    Write a function to find the perimeter of a grid.\n    '''\n    return r*2+c*2\n    \ndef rhombus_area(a,b):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    return a*b/2\n    \ndef rhombus_perimeter(a,b):\n    '''\n    Write a function to find the perimeter of a rhombus.\n    '''\n    return a*2+b*2\n    \ndef pentagon_area(a):\n    '''\n    Write a function to find the area of a pentagon.\n    '''\n    return math.sqrt(5*a**2/2)\n    \ndef pentagon_perimeter(a):\n    '''\n    Write a function to find the perimeter of a pentagon.\n    '''\n    return 5*a\n    \ndef hexagon_area(a):\n    '''\n    Write a function to find the area of a hexagon.\n    '''\n    return math.sqrt(3)*a**2/2\n    \ndef hexagon_perimeter(a):\n    '''\n    Write a function to find the perimeter of a hexagon.\n    '''\n    return 6*a\n    \ndef heptagon_area(a):\n    '''\n    Write a function to find the area of a heptagon.\n    '''\n    return math.sqrt(7*a**2/2)\n    \ndef heptagon_perimeter(a):\n    '''\n    Write a function to find the perimeter of a heptagon.\n    '''\n    return 7*a\n    \ndef octagon_area(a):\n    '''\n    Write a function to find the area of an octagon.\n    '''\n    return math.sqrt(2)*a**2/2\n    \ndef octagon_perimeter(a):\n    '''\n    Write a function to find the perimeter of an octagon.\n    '''\n    return 8*a\n    \ndef nonagon_area(a):\n    '''\n    Write a function to find the area of a nonagon.\n    '''\n    return math.sqrt(2)*a**2/2\n    \ndef nonagon_perimeter(a):\n    '''\n    Write a function to find the perimeter of a nonagon.\n    '''\n    return 8*a\n    \ndef octahedron_area(a):\n    '''\n    Write a function to find the area of an octahedron.\n    '''\n    return 4*a**2/3\n    \ndef octahedron_perimeter(a):\n    '''\n    Write a function to find the perimeter of an octahedron.\n    '''\n    return 6*a\n    \ndef dodecahedron_area(a):\n    '''\n    Write a function to find the area of a dodecahedron.\n    '''\n    return 10*a**2/9\n    \ndef dodecahedron_perimeter(a):\n    '''\n    Write a function to find the perimeter of a dodecahedron.\n    '''\n    return 12*a\n    \ndef icosahedron_area(a):\n    '''\n    Write a function to find the area of an icosahedron.\n    '''\n    return 6*a**2/5\n    \ndef icosahedron_perimeter(a):\n    '''\n    Write a function to find the perimeter of an icosahedron.\n    '''\n    return 12*a\n    \ndef tetrahedron_area(a):\n    '''\n    Write a function to find the area of a tetrahedron.\n    '''\n    return 4*a**2/4\n    \ndef tetrahedron_perimeter(a):\n    '''\n    Write a function to find the perimeter of a tetrahedron.\n    '''\n    return 6*a\n    \ndef cube_volume(a):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return a**3\n    \ndef cube_surface_area(a):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6*a**2\n    \ndef cube_surface_area_2(a):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 4*a**2\n    \ndef cube_volume_2(a):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return a**3\n    \ndef hypercube_volume(a):\n    '''\n    Write a function to find the volume of a hypercube.\n    '''\n    return a**3\n    \ndef hypercube_surface_area(a):\n    '''\n    Write a function to find the surface area of a hypercube.\n    '''\n    return 6*a**2\n    \ndef hypercube_surface_area_2(a):\n    '''\n    Write a function to find the surface area of a hypercube.\n    '''\n    return 6*a**2\n    \ndef hypercube_volume_2(a):\n    '''\n    Write a function to find the volume of a hypercube.\n    '''\n    return a**3\n    \ndef ellipsoid_volume(a,b,c):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    return (4/3)*math.pi*a*b*c\n    \ndef ellipsoid_surface_area(a,b,c):\n    '''\n    Write a function to find the surface area of an ellipsoid.\n    '''\n    return 4*math.pi*a*b*c\n    \ndef ellipsoid_surface_area_2(a,b,c):\n    '''\n    Write a function to find the surface area of an ellipsoid.\n    '''\n    return 4*math.pi*a*b*c\n    \ndef ellipsoid_volume_2(a,b,c):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    return 4/3*math.pi*a*b*c\n    \ndef cube_area(a):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6*a\n    \ndef cube_perimeter(a):\n    '''\n    Write a function to find the perimeter of a cube.\n    '''\n    return 12*a\n    \ndef cylinder_surface_area(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*(r+h)\n    \ndef cylinder_volume(r,h)",
        "num_ids": 29
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n",
        "num_ids": 13
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    newstr=''\n    newstr=re.sub('[A-Z]+','',str1)\n    return newstr\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    newstr=''\n    newstr=re.sub('[a-z]+','',str1)\n    return newstr\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    newstr=''\n    newstr=re.sub('[0-9]+','',str1)\n    return newstr\ndef remove_spaces(str1):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    newstr=''\n    newstr=re.sub('[\\s]+','',str1)\n    return newstr\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuations from a given string.\n    '''\n    newstr=''\n    newstr=re.sub('[^\\w\\s]','',str1)\n    return newstr\ndef remove_chars(str1,chars):\n    '''\n    Write a function to remove specific characters from a given string.\n    '''\n    newstr=''\n    newstr=re.sub('['+chars+']','',str1)\n    return newstr\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    newstr=''\n    newstr=re.sub('[0-9]+','',str1)\n    return newstr\ndef remove_spaces(str1):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    newstr=''\n    newstr=re.sub('[\\s]+','',str1)\n    return newstr\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    newstr=''\n    newstr=re.sub('[0-9]+','',str1)\n    return newstr\ndef remove_spaces(str1):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    newstr=''\n    newstr=re.sub('[\\s]+','',str1)\n    return newstr\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    newstr=''\n    newstr=re.sub('[0-9]+','',str1)\n    return newstr\ndef remove_spaces(str1):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    newstr=''\n    newstr=re.sub('[\\s]+','',str1)\n    return newstr\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    newstr=''\n    newstr=re.sub('[0-9]+','',str1)\n    return newstr\ndef remove_spaces(str1):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    newstr=''\n    newstr=re.sub('[\\s]+','',str1)\n    return newstr\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuations from a given string.\n    '''\n    newstr=''\n    newstr=re.sub('[^\\w\\s]','',str1)\n    return newstr\ndef remove_chars(str1,chars):\n    '''\n    Write a function to remove specific characters from a given string.\n    '''\n    newstr=''\n    newstr=re.sub('['+chars+']','',str1)\n    return newstr\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    newstr=''\n    newstr=re.sub('[0-9]+','',str1)\n    return newstr\ndef remove_spaces(str1):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    newstr=''\n    newstr=re.sub('[\\s]+','',str1)\n    return newstr\ndef remove_spaces(str1):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    newstr=''\n    newstr=re.sub('[\\s]+','',str1)\n    return newstr\ndef remove_chars(str1,chars):\n    '''\n    Write a function to remove specific characters from a given string.\n    '''\n    newstr=''\n    newstr=re.sub('['+chars+']','',str1)\n    return newstr\ndef remove_chars(str1,chars):\n    '''\n    Write a function to remove specific characters from a given string.\n    '''\n    newstr=''\n    newstr=re.sub('['+chars+']','',str1)\n    return newstr\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    newstr=''\n    newstr=re.sub('[0-9]+','',str1)\n    return newstr\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    newstr=''\n    newstr=re.sub('[0-9]+','',str1)\n    return newstr\ndef remove_chars(str1,chars):\n    '''\n    Write a function to remove specific characters from a given string.\n    '''\n    newstr=''\n    newstr=re.sub('['+chars+']','',str1)\n    return newstr\ndef remove_chars(str1,chars):\n    '''\n    Write a function to remove specific characters from a given string.\n    '''\n    newstr=''\n    newstr=re.sub('['+chars+']','',str1)\n    return newstr\ndef remove_chars(str1,chars):\n    '''\n    Write a function to remove specific characters from a given string.\n    '''\n    newstr=''\n    newstr=re.sub('['+chars+']','',str1)\n    return newstr\ndef remove_chars(str1,chars):\n    '''\n    Write a function to remove specific characters from a given string.\n    '''\n    newstr=''\n    newstr=re.sub('['+chars+']','',str1)\n    return newstr\ndef remove_chars(str1,chars):\n    '''\n    Write a function to remove specific characters from a given string.\n    '''\n    newstr=''\n    newstr=re.sub('['+chars+']','',str1)\n    return newstr\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    newstr=''\n    newstr=re.sub('[0-9]+','',str1)\n    return newstr\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    newstr=''\n    newstr=re.sub('[0-9]+','',str1)\n    return newstr\ndef remove_chars(str1,chars):\n    '''\n    Write a function to remove specific characters from a given string.\n    '''\n    newstr=''\n    newstr=re.sub('['+chars+']','',str1)\n    return newstr\ndef remove_chars(str1,chars):\n    '''\n    Write a function to remove specific characters from a given string.\n    '''\n    newstr=''\n    newstr=re.sub('['+chars+']','',str1)\n    return newstr\ndef remove_chars(str1,chars):\n    '''\n    Write a function to remove specific characters from a given strin",
        "num_ids": 15
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    result = re.sub('[A-Z]', '', str1)\n    return result\n",
        "num_ids": 25
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.upper().lower()\n",
        "num_ids": 12
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]', \"\", str1)\n",
        "num_ids": 22
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return ''.join(str1.split(str1.upper())[1:])\n",
        "num_ids": 23
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)\n",
        "num_ids": 22
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_str = re.sub(r'[A-Z]+', '', str1)\n    return new_str\n    \ndef find_word(str1, word):\n    '''\n    Write a function that finds the word in the string and returns the index of the word.\n    '''\n    return str1.find(word)\n    \ndef find_digit(str1):\n    '''\n    Write a function to find the digit in the string and returns the index of the digit.\n    '''\n    return re.findall('\\d+', str1)\n    \ndef num_split(str1):\n    '''\n    Write a function to split the given string on the numbers and return a list.\n    '''\n    return re.split('\\d+', str1)\n    \ndef even_index_iter(str1):\n    '''\n    Write a function that given a string, returns the characters at even index.\n    '''\n    list1 = []\n    for i in range(0, len(str1), 2):\n        list1.append(str1[i])\n    return ''.join(list1)\n    \ndef even_index_iter2(str1):\n    '''\n    Write a function to return the even indexed characters in the string.\n    '''\n    list1 = []\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            list1.append(str1[i])\n    return ''.join(list1)\n    \ndef find_occurence(str1, word):\n    '''\n    Write a function to find the occurence of word in the given string.\n    '''\n    return str1.count(word)\n    \ndef sort_strip(list1):\n    '''\n    Write a function to sort the list and return the sorted list\n    '''\n    return sorted(list1)\n    \ndef sort_dict(dict1):\n    '''\n    Write a function to sort the dict and return the sorted dict.\n    '''\n    return sorted(dict1.items())\n    \ndef reverse_string(str1):\n    '''\n    Write a function to reverse the string and return the reversed string.\n    '''\n    return str1[::-1]\n    \ndef count_vowels(str1):\n    '''\n    Write a function to count the vowels in the given string.\n    '''\n    count = 0\n    for i in str1:\n        if i in 'aeiouAEIOU':\n            count = count + 1\n    return count\n    \ndef count_consonants(str1):\n    '''\n    Write a function to count the consonants in the given string.\n    '''\n    count = 0\n    for i in str1:\n        if i not in 'aeiouAEIOU':\n            count = count + 1\n    return count\n    \ndef count_consonants_iter(str1):\n    '''\n    Write a function to count the consonants in the given string.\n    '''\n    count = 0\n    for i in str1:\n        if i not in 'aeiouAEIOU':\n            count = count + 1\n    return count\n    \ndef change_vowels(str1, change_to):\n    '''\n    Write a function to change the vowels in a given string to a different letter.\n    '''\n    for i in str1:\n        if i in 'aeiouAEIOU':\n            str1 = str1.replace(i, change_to)\n    return str1\n    \ndef lowercase_first_letter(str1):\n    '''\n    Write a function to change the first letter of the string to lowercase.\n    '''\n    return str1[0].lower() + str1[1:]\n    \ndef remove_vowels(str1):\n    '''\n    Write a function to remove the vowels from the given string.\n    '''\n    for i in str1:\n        if i in 'aeiouAEIOU':\n            str1 = str1.replace(i, '')\n    return str1\n    \ndef fizzbuzz(number):\n    '''\n    Write a function to print the output when number is divisible by 3 and 5.\n    '''\n    if number % 3 == 0 and number % 5 == 0:\n        return 'Fizz Buzz'\n    elif number % 3 == 0:\n        return 'Fizz'\n    elif number % 5 == 0:\n        return 'Buzz'\n    else:\n        return number\n        \ndef fizzbuzz_iter(number):\n    '''\n    Write a function to print the output when number is divisible by 3 and 5.\n    '''\n    if number % 3 == 0 and number % 5 == 0:\n        return 'Fizz Buzz'\n    elif number % 3 == 0:\n        return 'Fizz'\n    elif number % 5 == 0:\n        return 'Buzz'\n    else:\n        return number\n        \ndef word_count(str1):\n    '''\n    Write a function to return the word count in the given string.\n    '''\n    return len(str1.split())\n    \ndef word_count_iter(str1):\n    '''\n    Write a function to return the word count in the given string.\n    '''\n    return len(str1.split())\n    \ndef count_words_iter(str1):\n    '''\n    Write a function to return the word count in the given string.\n    '''\n    return len(str1.split())\n    \ndef word_count_iter2(str1):\n    '''\n    Write a function to return the word count in the given string.\n    '''\n    dict1 = {}\n    for i in str1.split():\n        dict1[i] = dict1.get(i, 0) + 1\n    return dict1\n    \ndef top_n_words(str1, n):\n    '''\n    Write a function to return the top n words in the given string.\n    '''\n    list1 = str1.split()\n    list1.sort()\n    return list1[-n:]\n    \ndef top_n_words_iter(str1, n):\n    '''\n    Write a function to return the top n words in the given string.\n    '''\n    dict1 = {}\n    for i in str1.split():\n        dict1[i] = dict1.get(i, 0) + 1\n    list1 = sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    return list1[-n:]\n    \ndef frequency(str1):\n    '''\n    Write a function to return the frequency of each word in the given string.\n    '''\n    dict1 = {}\n    for i in str1.split():\n        dict1[i] = dict1.get(i, 0) + 1\n    return dict1\n    \ndef frequency_iter(str1):\n    '''\n    Write a function to return the frequency of each word in the given string.\n    '''\n    dict1 = {}\n    for i in str1.split():\n        dict1[i] = dict1.get(i, 0) + 1\n    return dict1\n    \ndef compare_string(str1):\n    '''\n    Write a function to compare the string with the given pattern.\n    '''\n    pattern = 'is'\n    if pattern == str1:\n        return True\n    else:\n        return False\n    \ndef compare_string_iter(str1):\n    '''\n    Write a function to compare the string with the given pattern.\n    '''\n    pattern = 'is'\n    if pattern == str1:\n        return True\n    else:\n        return False\n    \ndef check_string(str1):\n    '''\n    Write a function to check the given string is palindrome or not.\n    '''\n    return str1 == str1[::-1]\n    \ndef check_string_iter(str1):\n    '''\n    Write a function to check the given string is palindrome or not.\n    '''\n    return str1 == str1[::-1]\n    \ndef most_occured_word(str1):\n    '''\n    Write a function to return the most occured word in the given string.\n    '''\n    dict1 = {}\n    for i in str1.split():\n        dict1[i] = dict1.get(i",
        "num_ids": 31
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[A-Z]+','',str1)\n    return str1\n",
        "num_ids": 28
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    result = re.sub('[A-Z]', '', str1)\n    return result\n",
        "num_ids": 25
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    #initialize a list\n    lst = []\n    #iterate over the string\n    for i in str1:\n        #check whether it is uppercase\n        if i.isupper():\n            #keep only lowercase letters\n            lst.append(i.lower())\n    #return the resultant string\n    return ''.join(lst)\n",
        "num_ids": 85
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_list = []\n    for sublist in lst:\n        new_list.append(sublist[0])\n    return new_list\n",
        "num_ids": 37
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return [item[0] for item in lst]\n",
        "num_ids": 43
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for i in range(len(lst)):\n        res.append(lst[i][0])\n    return res\n",
        "num_ids": 37
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    i=0\n    lst2 = []\n    while i<len(lst):\n        lst2.append(lst[i][0])\n        i=i+1\n    return lst2\n",
        "num_ids": 52
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = [lst[0]]\n    for ele in lst:\n        res.append(ele[0])\n    return res\n",
        "num_ids": 34
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return map(lambda x:x[0], lst) \n    ",
        "num_ids": 19
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # first = lambda x: x[0]\n    # return list(map(first, lst))\n    return [lst[0] for lst in lst]\n",
        "num_ids": 43
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return([item[0] for item in lst])\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sub[0] for sub in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst] \n    \n    \ndef Remove_Consecutive(lst):\n    '''\n    Write a python function to remove consecutive duplicates in a list.\n    '''\n    \n    res = []\n    for i in lst:\n        if i not in res:\n            res.append(i)\n    return res\n    \n    \ndef Replace_Duplicates(lst):\n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    \n    res = []\n    [res.append(i) for i in lst if i not in res]\n    return res\n    \n    \ndef Count_Duplicates(lst):\n    '''\n    Write a python function to count the number of duplicates in a list.\n    '''\n    \n    res = []\n    [res.append(i) for i in lst if i not in res]\n    return len(res)\n    \n    \ndef Remove_Element(lst, ele):\n    '''\n    Write a python function to remove a specified element from a list.\n    '''\n    \n    res = []\n    [res.append(i) for i in lst if i!= ele]\n    return res\n    \n    \ndef Permutation(lst):\n    '''\n    Write a python function to get the permutation of a list.\n    '''\n    \n    res = []\n    [res.append(i) for i in lst if i not in res]\n    return res\n    \n    \ndef Combination(lst):\n    '''\n    Write a python function to get the combination of a list.\n    '''\n    \n    res = []\n    [res.append(i) for i in lst if i not in res]\n    return res\n    \n    \ndef Combination_with_replacement(lst):\n    '''\n    Write a python function to get the combination with replacement of a list.\n    '''\n    \n    res = []\n    [res.append(i) for i in lst if i not in res]\n    return res\n    \n    \ndef Nth_Fibonacci(n):\n    '''\n    Write a python function to get the nth number in the fibonacci series.\n    '''\n    \n    a = 0\n    b = 1\n    res = 0\n    for i in range(n):\n        res = a + b\n        a = b\n        b = res\n    return res\n    \n    \ndef Nth_Prime(n):\n    '''\n    Write a python function to get the nth prime number.\n    '''\n    \n    def isprime(x):\n        if x < 2:\n            return False\n        if x == 2:\n            return True\n        for i in range(2,x):\n            if x%i == 0:\n                return False\n        return True\n        \n    res = 2\n    c = 2\n    while n > 0:\n        res = c\n        c += 1\n        while not isprime(c):\n            c += 1\n        n -= 1\n    return res\n    \n    \ndef Nth_Digits(n, d):\n    '''\n    Write a python function to get the nth number in the the range of 10^d to 10^(d+1).\n    '''\n    \n    res = 0\n    for i in range(10**d, 10**(d+1)):\n        res += 1\n        if res == n:\n            return i\n    return 0\n    \n    \ndef Nth_Fibonacci_Digits(n, d):\n    '''\n    Write a python function to get the nth number in the the range of 10^d to 10^(d+1).\n    '''\n    \n    res = 0\n    a = 0\n    b = 1\n    for i in range(d):\n        res = a + b\n        a = b\n        b = res\n    for i in range(10**d, 10**(d+1)):\n        res = a + b\n        a = b\n        b = res\n        while res < 10**d:\n            res = a + b\n            a = b\n            b = res\n        if res == 10**d:\n            return i\n    return 0\n    \n    \ndef Fibonacci_Digits(d):\n    '''\n    Write a python function to get the nth number in the the range of 10^d to 10^(d+1).\n    '''\n    \n    a = 0\n    b = 1\n    res = 0\n    for i in range(10**d, 10**(d+1)):\n        res = a + b\n        a = b\n        b = res\n    return res\n    \n    \ndef Fibonacci_Digits_Prime(d):\n    '''\n    Write a python function to get the nth number in the the range of 10^d to 10^(d+1).\n    '''\n    \n    a = 0\n    b = 1\n    res = 0\n    for i in range(10**d, 10**(d+1)):\n        res = a + b\n        a = b\n        b = res\n        while not isprime(res):\n            res = a + b\n            a = b\n            b = res\n    return res\n    \n    \ndef Strobogrammatic(n):\n    '''\n    Write a python function to get the strobogrammatic of a given number.\n    '''\n    \n    res = ['0','1','8','6','9']\n    res.extend(['6','9','8','1','0'])\n    res.extend(['9','6','1','8','0'])\n    res.extend(['1','8','0','9','6'])\n    res.extend(['8','1','0','9','6'])\n    res.extend(['0','9','6','1','8'])\n    res.extend(['8','0','1','9','6'])\n    res.extend(['9','0','6','8','1'])\n    res.extend(['6','1','8','0','9'])\n    res.extend(['1','6','9','8','0'])\n    res.extend(['8','0','9','1','6'])\n    res.extend(['0','9','6','1','8'])\n    res.extend(['9','1','6','0','8'])\n    res.extend(['1','0','8','9','6'])\n    res.extend(['6','8','0','1','9'])\n    res.extend(['8','0','9','1','6'])\n    res.extend(['0','1','9','6','8'])\n    res.extend(['6','9','8','0','1'])\n    res.extend(['1','6','9','8','0'])\n    res.extend(['8','0','1','9','6'])\n    res.extend(['9','0','6','8','1'])\n    res.extend(['1','8','0','9','6'])\n    res.extend(['6','1','8','0','9'])\n    res.extend(['9','0','6','8','1'])\n    res.extend(['1','6','9','8','0'])\n    res.extend(['8','0','9','1','6'])\n    res.extend(['0','1','6','9','8'])\n    res.extend(['6','8','0','1','9'])\n    res.extend(['1','6','9','8','0'])\n    res.extend(['8','0','1','6','9'])\n    res.extend(['9','0','6','8','1'])\n    res.extend(['1','8','0','9','6'])\n    res.extend(['6','1','8','0','9'])\n    res.extend(['9','0','6','8','1'])\n    res.extend(['1','6','9','8','0'])\n    res.extend(['8','0','9','1','6'])\n    res.extend(['6','1','8','0','9'])\n    res.extend(['1','6','9','8','",
        "num_ids": 718
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isupper():\n            ctr += 1\n    return ctr\n",
        "num_ids": 32
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    n_upper_ctr = 0\n    for c in str:\n        if c.isupper():\n            n_upper_ctr += 1\n    return n_upper_ctr\n",
        "num_ids": 43
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    if(str.isupper()):\n        return 1\n    else:\n        return 0\n",
        "num_ids": 24
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\ndef lower_ctr(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.islower():\n            count += 1\n    return count\ndef space_ctr(str):\n    '''\n    Write a python function to count the white spaces in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isspace():\n            count += 1\n    return count\ndef digit_ctr(str):\n    '''\n    Write a python function to count the digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\ndef word_ctr(str):\n    '''\n    Write a python function to count the words in a given string.\n    '''\n    count = 0\n    for i in str.split():\n        count += 1\n    return count\ndef char_len(str):\n    '''\n    Write a python function to calculate the length of a given string.\n    '''\n    return len(str)\ndef count_occurrences(str, substr):\n    '''\n    Write a python function to count the number of occurrences of a substring in a given string.\n    '''\n    return str.count(substr)\ndef substr_occur(str, substr):\n    '''\n    Write a python function to calculate the number of times a substring occurs in a given string.\n    '''\n    return str.count(substr)\ndef upper_first(str):\n    '''\n    Write a python function to convert a string to uppercase and change the first letter to lowercase.\n    '''\n    return str.capitalize()\ndef first_char(str):\n    '''\n    Write a python function to return the first character of a given string.\n    '''\n    return str[0]\ndef last_char(str):\n    '''\n    Write a python function to return the last character of a given string.\n    '''\n    return str[-1]\ndef first_n_chars(str, n):\n    '''\n    Write a python function to return the first n characters of a given string.\n    '''\n    return str[:n]\ndef last_n_chars(str, n):\n    '''\n    Write a python function to return the last n characters of a given string.\n    '''\n    return str[-n:]\ndef replace_char(str, old, new):\n    '''\n    Write a python function to replace all occurrences of a substring with another string in a given string.\n    '''\n    return str.replace(old, new)\ndef r_replace_char(str, old, new):\n    '''\n    Write a python function to replace all occurrences of a substring with another string in a given string.\n    '''\n    return str.rfind(old)\ndef split_str(str, split_str):\n    '''\n    Write a python function to split a string into a list.\n    '''\n    return str.split(split_str)\ndef replace_all(str, old, new):\n    '''\n    Write a python function to replace all occurrences of a substring with another string in a given string.\n    '''\n    return str.replace(old, new)\ndef find_replace(str, old, new):\n    '''\n    Write a python function to replace all occurrences of a substring with another string in a given string.\n    '''\n    return str.find(old)\ndef reverse(str):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    return str[::-1]\ndef swap_char(str, i, j):\n    '''\n    Write a python function to swap the positions of two characters in a given string.\n    '''\n    return str.replace(str[i], str[j])\ndef count_vowels(str):\n    '''\n    Write a python function to count the vowels in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    return count\ndef count_consonants(str):\n    '''\n    Write a python function to count the consonants in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i not in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    return count\ndef count_letters(str):\n    '''\n    Write a python function to count the letters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isalpha():\n            count += 1\n    return count\ndef count_digits(str):\n    '''\n    Write a python function to count the digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\ndef count_spaces(str):\n    '''\n    Write a python function to count the spaces in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isspace():\n            count += 1\n    return count\ndef count_punctuation(str):\n    '''\n    Write a python function to count the punctuation in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i in ['.', ',', '!', '?', ';']:\n            count += 1\n    return count\ndef replace_all_in_str(str, old, new):\n    '''\n    Write a python function to replace all occurrences of a substring with another string in a given string.\n    '''\n    return str.replace(old, new)\ndef replace_substr(str, old, new):\n    '''\n    Write a python function to replace the first occurrence of a substring with another string in a given string.\n    '''\n    return str.replace(old, new, 1)\ndef get_longest_word(str):\n    '''\n    Write a python function to return the longest word in a given string.\n    '''\n    return max(str.split(), key=len)\ndef is_palindrome(str):\n    '''\n    Write a python function to check if a string is a palindrome.\n    '''\n    return str == str[::-1]\ndef is_pangram(str):\n    '''\n    Write a python function to check if a string is a pangram.\n    '''\n    return set(str.lower()) >= set('abcdefghijklmnopqrstuvwxyz')\ndef substring_in_str(str, substr):\n    '''\n    Write a python function to check if a substring is present in a given string.\n    '''\n    return substr in str\ndef count_words(str):\n    '''\n    Write a python function to count the words in a given string.\n    '''\n    return str.count(' ') + 1\ndef count_lines(str):\n    '''\n    Write a python function to count the lines in a given string.\n    '''\n    return str.count('\\n') + 1\ndef reverse_substr(str, i, j):\n    '''\n    Write a python function to reverse a substring in a given string.\n    '''\n    return str[:i] + str[j:i-1:-1] + str[i:j] + str[j+1:]\ndef reverse_word(str):\n    '''\n    Write a python function to reverse a word in a given string.\n    '''\n    return str[::-1]\ndef reverse_words(str):\n    '''\n    Write a python function to reverse words in a given string.\n    '''\n    return''.join(reverse_word(word) for word in str.split())\ndef swap_char_words(str, i, j):\n    '''\n    Write a python function to swap the positions of two words in a given string.\n    '''\n    return str[:i] + str[j] + str[i] + str[j+1:]\ndef swap_word_words(str):",
        "num_ids": 36
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if(i.isupper()):\n            count+=1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # upper_ctr('hello world') should return 5\n    upper_ctr(str)\n    \ndef lower_ctr(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    # lower_ctr('hello world') should return 7\n    lower_ctr(str)\n    \ndef upper_lower_ctr(str):\n    '''\n    Write a python function to count the upper case and lower case characters in a given string.\n    '''\n    # upper_lower_ctr('hello world') should return 10\n    upper_lower_ctr(str)\n    \ndef str_len(str):\n    '''\n    Write a python function to count the characters in a given string.\n    '''\n    # str_len('hello world') should return 10\n    str_len(str)\n    \ndef del_char(str):\n    '''\n    Write a python function to delete all characters of a given string except the first character.\n    '''\n    # del_char('hello world') should return 'lo world'\n    del_char(str)\n    \ndef del_last_chr(str):\n    '''\n    Write a python function to delete the last character of a given string.\n    '''\n    # del_last_chr('hello world') should return 'hello'\n    del_last_chr(str)\n    \ndef del_last_chr_ord(str):\n    '''\n    Write a python function to delete the last character of a given string.\n    '''\n    # del_last_chr('hello world') should return 'hello'\n    del_last_chr_ord(str)\n    \ndef del_last_chr_ord_dict(str):\n    '''\n    Write a python function to delete the last character of a given string.\n    '''\n    # del_last_chr('hello world') should return 'hello'\n    del_last_chr_ord_dict(str)\n    \ndef del_last_chr_ord_dict_key(str):\n    '''\n    Write a python function to delete the last character of a given string.\n    '''\n    # del_last_chr('hello world') should return 'hello'\n    del_last_chr_ord_dict_key(str)\n    \ndef del_last_chr_ord_dict_key_ord(str):\n    '''\n    Write a python function to delete the last character of a given string.\n    '''\n    # del_last_chr('hello world') should return 'hello'\n    del_last_chr_ord_dict_key_ord(str)\n    \ndef del_last_chr_ord_dict_key_ord_dict(str):\n    '''\n    Write a python function to delete the last character of a given string.\n    '''\n    # del_last_chr('hello world') should return 'hello'\n    del_last_chr_ord_dict_key_ord_dict(str)\n    \ndef del_last_chr_ord_dict_key_ord_dict_key(str):\n    '''\n    Write a python function to delete the last character of a given string.\n    '''\n    # del_last_chr('hello world') should return 'hello'\n    del_last_chr_ord_dict_key_ord_dict_key(str)\n    \ndef del_last_chr_ord_dict_key_ord_dict_key_ord(str):\n    '''\n    Write a python function to delete the last character of a given string.\n    '''\n    # del_last_chr('hello world') should return 'hello'\n    del_last_chr_ord_dict_key_ord_dict_key_ord(str)\n    \ndef del_last_chr_ord_dict_key_ord_dict_key_ord_dict(str):\n    '''\n    Write a python function to delete the last character of a given string.\n    '''\n    # del_last_chr('hello world') should return 'hello'\n    del_last_chr_ord_dict_key_ord_dict_key_ord_dict(str)\n    \ndef del_last_chr_ord_dict_key_ord_dict_key_ord_dict_key(str):\n    '''\n    Write a python function to delete the last character of a given string.\n    '''\n    # del_last_chr('hello world') should return 'hello'\n    del_last_chr_ord_dict_key_ord_dict_key_ord_dict_key(str)\n    \ndef del_last_chr_ord_dict_key_ord_dict_key_ord_dict_key_ord(str):\n    '''\n    Write a python function to delete the last character of a given string.\n    '''\n    # del_last_chr('hello world') should return 'hello'\n    del_last_chr_ord_dict_key_ord_dict_key_ord_dict_key_ord(str)\n    \ndef del_last_chr_ord_dict_key_ord_dict_key_ord_dict_key_ord_dict(str):\n    '''\n    Write a python function to delete the last character of a given string.\n    '''\n    # del_last_chr('hello world') should return 'hello'\n    del_last_chr_ord_dict_key_ord_dict_key_ord_dict_key_ord_dict(str)\n    \ndef del_last_chr_ord_dict_key_ord_dict_key_ord_dict_key_ord_dict_key(str):\n    '''\n    Write a python function to delete the last character of a given string.\n    '''\n    # del_last_chr('hello world') should return 'hello'\n    del_last_chr_ord_dict_key_ord_dict_key_ord_dict_key_ord_dict_key(str)\n    \ndef del_last_chr_ord_dict_key_ord_dict_key_ord_dict_key_ord_dict_key_ord(str):\n    '''\n    Write a python function to delete the last character of a given string.\n    '''\n    # del_last_chr('hello world') should return 'hello'\n    del_last_chr_ord_dict_key_ord_dict_key_ord_dict_key_ord_dict_key_ord(str)\n    \ndef del_last_chr_ord_dict_key_ord_dict_key_ord_dict_key_ord_dict_key_ord_dict(str):\n    '''\n    Write a python function to delete the last character of a given string.\n    '''\n    # del_last_chr('hello world') should return 'hello'\n    del_last_chr_ord_dict_key_ord_dict_key_ord_dict_key_ord_dict_key_ord_dict(str)\n    \ndef del_last_chr_ord_dict_key_ord_dict_key_ord_dict_key_ord_dict_key_ord_dict_key(str):\n    '''\n    Write a python function to delete the last character of a given string.\n    '''\n    # del_last_chr('hello world') should return 'hello'\n    del_last_chr_ord_dict_key_ord_dict_key_ord_dict_key_ord_dict_key_ord_dict_key(str)\n    \ndef del_last_chr_ord_dict_key_ord_dict_key_ord_dict_key_ord_dict_key_ord_dict_key_ord(str):\n    '''\n    Write a python function to delete the last character of a given string.\n    '''\n    # del_last_chr('hello world') should return 'hello'\n    del_last_chr_ord_dict_key_ord_dict_key_ord_dict_key_ord_dict_key_ord_dict_key_ord(str)\n    \ndef del_last_chr_ord_dict_key_ord_dict_key_ord_dict_key_ord_dict_key_ord_dict_key_ord_dict(str):\n    '''\n    Write a python function to delete the last character of a given string.\n    '''\n    # del_last_chr('hello world') should return 'hello'\n    del",
        "num_ids": 22
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    lower_ctr=0\n    upper_ctr=0\n    for i in range(len(str)):\n        if str[i].isupper():\n            upper_ctr+=1\n        elif str[i].islower():\n            lower_ctr+=1\n        else:\n            pass\n    return(str(lower_ctr)+' '+str(upper_ctr))\n",
        "num_ids": 89
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_ctr = 0\n    for i in str:\n        if i.isupper():\n            upper_ctr += 1\n    return upper_ctr\n",
        "num_ids": 37
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for c in str:\n        if c.isupper():\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return_list = []\n    if len(list1) == 0:\n        return return_list\n    if len(list1) == 1:\n        return [list1]\n    else:\n        for i in xrange(len(list1)):\n            temp = list1[i]\n            for j in combinations_list(list1[:i] + list1[i+1:]):\n                return_list.append([temp] + j)\n        return return_list\ndef combinations(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return_list = []\n    if len(list1) == 0:\n        return return_list\n    if len(list1) == 1:\n        return [list1]\n    else:\n        for i in xrange(len(list1)):\n            temp = list1[i]\n            for j in combinations(list1[:i] + list1[i+1:]):\n                return_list.append([temp] + j)\n        return return_list\ndef permutations(list1):\n    '''\n    Write a function to find all possible permutations of the elements of a given list.\n    '''\n    return_list = []\n    if len(list1) == 0:\n        return return_list\n    if len(list1) == 1:\n        return [list1]\n    else:\n        for i in xrange(len(list1)):\n            temp = list1[i]\n            for j in permutations(list1[:i] + list1[i+1:]):\n                return_list.append([temp] + j)\n        return return_list\ndef permutations_list(list1):\n    '''\n    Write a function to find all possible permutations of the elements of a given list.\n    '''\n    return_list = []\n    if len(list1) == 0:\n        return return_list\n    if len(list1) == 1:\n        return [list1]\n    else:\n        for i in xrange(len(list1)):\n            temp = list1[i]\n            for j in permutations_list(list1[:i] + list1[i+1:]):\n                return_list.append([temp] + j)\n        return return_list\ndef permutations_dict(list1):\n    '''\n    Write a function to find all possible permutations of the elements of a given list.\n    '''\n    return_list = []\n    if len(list1) == 0:\n        return return_list\n    if len(list1) == 1:\n        return [list1]\n    else:\n        for i in xrange(len(list1)):\n            temp = list1[i]\n            for j in permutations_dict(list1[:i] + list1[i+1:]):\n                return_list.append([temp] + j)\n        return return_list\ndef partition(list1):\n    '''\n    Write a function to return the partitions of the elements of a given list.\n    '''\n    return_list = []\n    if len(list1) == 0:\n        return return_list\n    if len(list1) == 1:\n        return [list1]\n    else:\n        for i in xrange(len(list1)):\n            temp = list1[i]\n            for j in partition(list1[:i] + list1[i+1:]):\n                return_list.append([temp] + j)\n        return return_list\ndef partitions_list(list1):\n    '''\n    Write a function to return the partitions of the elements of a given list.\n    '''\n    return_list = []\n    if len(list1) == 0:\n        return return_list\n    if len(list1) == 1:\n        return [list1]\n    else:\n        for i in xrange(len(list1)):\n            temp = list1[i]\n            for j in partitions_list(list1[:i] + list1[i+1:]):\n                return_list.append([temp] + j)\n        return return_list\ndef partition_dict(list1):\n    '''\n    Write a function to return the partitions of the elements of a given list.\n    '''\n    return_list = []\n    if len(list1) == 0:\n        return return_list\n    if len(list1) == 1:\n        return [list1]\n    else:\n        for i in xrange(len(list1)):\n            temp = list1[i]\n            for j in partition_dict(list1[:i] + list1[i+1:]):\n                return_list.append([temp] + j)\n        return return_list\ndef powerset(list1):\n    '''\n    Write a function to return the powersets of the elements of a given list.\n    '''\n    return_list = []\n    if len(list1) == 0:\n        return return_list\n    if len(list1) == 1:\n        return [[]]\n    else:\n        for i in xrange(len(list1)):\n            temp = list1[i]\n            for j in powerset(list1[:i] + list1[i+1:]):\n                return_list.append([temp] + j)\n        return return_list\ndef powerset_list(list1):\n    '''\n    Write a function to return the powersets of the elements of a given list.\n    '''\n    return_list = []\n    if len(list1) == 0:\n        return return_list\n    if len(list1) == 1:\n        return [[]]\n    else:\n        for i in xrange(len(list1)):\n            temp = list1[i]\n            for j in powerset_list(list1[:i] + list1[i+1:]):\n                return_list.append([temp] + j)\n        return return_list\ndef powerset_dict(list1):\n    '''\n    Write a function to return the powersets of the elements of a given list.\n    '''\n    return_list = []\n    if len(list1) == 0:\n        return return_list\n    if len(list1) == 1:\n        return [[]]\n    else:\n        for i in xrange(len(list1)):\n            temp = list1[i]\n            for j in powerset_dict(list1[:i] + list1[i+1:]):\n                return_list.append([temp] + j)\n        return return_list\ndef choose_random(list1):\n    '''\n    Write a function to choose a random element from a given list.\n    '''\n    return_list = []\n    if len(list1) == 0:\n        return return_list\n    if len(list1) == 1:\n        return list1\n    else:\n        import random\n        for i in xrange(len(list1)):\n            temp = list1[i]\n            for j in choose_random(list1[:i] + list1[i+1:]):\n                return_list.append([temp] + j)\n        return return_list\ndef choose_random_list(list1):\n    '''\n    Write a function to choose a random element from a given list.\n    '''\n    return_list = []\n    if len(list1) == 0:\n        return return_list\n    if len(list1) == 1:\n        return [list1]\n    else:\n        import random\n        for i in xrange(len(list1)):\n            temp = list1[i]\n            for j in choose_random_list(list1[:i] + list1[i+1:]):\n                return_list.append([temp] + j)\n        return return_list\ndef unique(list1):\n    '''\n    Write a function to find all the unique elements of the given list.\n    '''\n    return_list = []\n    if len(list1) == 0:\n        return return_list\n    if len(list1) == 1:\n        return [list1]\n    else:\n        for i in xrange(len(list1)):\n            temp = list1[i]\n            for j in unique(list1[:i] + list1[i+1:]):\n                return_list.append([temp] + j)\n        return return_list\ndef uniqu",
        "num_ids": 115
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    from itertools import combinations_with_replacement\n    return list(combinations_with_replacement(list1, 2))\n",
        "num_ids": 33
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(0, len(list1)):\n        for j in range(i+1, len(list1)):\n            combinations.append((list1[i], list1[j]))\n    return combinations\n",
        "num_ids": 62
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return []\n",
        "num_ids": 6
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    import itertools\n    if len(list1) == 0:\n        return []\n    else:\n        return list(itertools.combinations(list1, len(list1)-1))\n",
        "num_ids": 49
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in xrange(0, len(list1)):\n        for j in xrange(i+1, len(list1)):\n            result.append((list1[i], list1[j]))\n    return result\n",
        "num_ids": 62
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    list_len = len(list1)\n    if list_len == 1:\n        print list1\n    elif list_len == 2:\n        print list1[0],list1[1]\n        print list1[1],list1[0]\n    else:\n        list2 = list(list1)\n        print list1[0],list1[1]\n        print list1[0],list1[-1]\n        print list1[-1],list1[0]\n        print list1[-1],list1[-2]\n        print list1[-2],list1[-1]\n        list2.pop(0)\n        list2.pop()\n        combinations_list(list2)\n",
        "num_ids": 176
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            print list1[i],list1[j]\n    return\n",
        "num_ids": 48
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return [[]]\n    \n    result = []\n    for i in range(len(list1)):\n        small_result = combinations_list(list1[:i])\n        for item in small_result:\n            result.append(item + [list1[i]])\n    return result\n    ",
        "num_ids": 83
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # The combinations of the list are found by taking the number of \n    # elements in the list, subtracting it by 1, and multiplying the \n    # result by each element in the list.\n    return [list1[i] for i in range(len(list1)) for j in range(i, len(list1))]\n",
        "num_ids": 79
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    if arr is None or len(arr) == 0:\n        return 0\n    \n    max_prod = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_prod = max(arr[i], max_prod * arr[i])\n        if max_prod < 0:\n            max_prod = 0\n    return max_prod\n",
        "num_ids": 98
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_prod = arr[0]\n    min_prod = arr[0]\n",
        "num_ids": 24
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    ans = float('-inf')\n    curr_max_prod = 1\n    for i in range(len(arr)):\n        curr_max_prod = max(arr[i], curr_max_prod*arr[i])\n        ans = max(ans, curr_max_prod)\n    return ans\n",
        "num_ids": 82
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    assert type(arr) == list\n    assert len(arr) > 0\n    assert all([type(x) == int for x in arr])\n",
        "num_ids": 36
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return\n    if len(arr) == 1:\n        return arr[0]\n",
        "num_ids": 28
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n    # Initialize all the subarrays of len 1 as 1\n    # as we need to find the subarray with the max product\n    subarrays = [1] * len(arr)\n    # Base Case\n    if len(arr) == 1:\n        return arr[0]\n    # Base Case\n    if len(arr) == 2:\n        if arr[0] < 0 and arr[1] < 0:\n            return max(arr)\n        elif arr[0] < 0 and arr[1] > 0:\n            return arr[1]\n        else:\n            return arr[0]\n    # Build the subarrays of arr by traversing the array from left to right\n    # and calculating the product of each adjacent pair\n    for i in xrange(1, len(arr)):\n        if arr[i] < 0:\n            subarrays[i] = max(arr[i], arr[i]*subarrays[i-1])\n        else:\n            subarrays[i] = max(arr[i], arr[i]*subarrays[i-1], arr[i-1]*arr[i])\n    # Traverse the array from right to left, and find the maximum product\n    # in each subarray of len array\n    product = 1\n    for i in xrange(len(arr)-1, -1, -1):\n        if arr[i] > 0:\n            product *= arr[i]\n            subarrays[i] *= product\n        else:\n            product *= arr[i]\n            subarrays[i] *= product\n    # Return the max of all the subarrays\n    return max(subarrays)\n",
        "num_ids": 406
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    subarrays = []\n    n = len(arr)\n    max_product = 1\n    for i in range(0, n):\n        for j in range(i, n):\n            subarrays.append(arr[i:j+1])\n            product = 1\n            for elem in subarrays[-1]:\n                product *= elem\n            max_product = max(max_product, product)\n    return max_product\n",
        "num_ids": 107
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    left_max = [0] * n\n    right_max = [0] * n\n    for i in xrange(n):\n        if i == 0:\n            left_max[i] = arr[i]\n        else:\n            left_max[i] = max(left_max[i - 1] * arr[i], arr[i])\n    for i in xrange(n - 1, -1, -1):\n        if i == n - 1:\n            right_max[i] = arr[i]\n        else:\n            right_max[i] = max(right_max[i + 1] * arr[i], arr[i])\n    result = left_max[0] * right_max[0]\n    for i in xrange(n):\n        result = max(result, left_max[i] * right_max[i])\n    return result\n",
        "num_ids": 218
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    if arr is None or len(arr) == 0:\n        return None\n",
        "num_ids": 22
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for k in dict.keys():\n        if dict[k]!= n:\n            return False\n    return True\n",
        "num_ids": 30
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(set(dict.values())) == 1\n    \ndef check_key(dict, n):\n    '''\n    Write a function to check if all keys are same in a dictionary.\n    '''\n    return len(set(dict.keys())) == 1\n    \ndef check_value_and_key(dict, n):\n    '''\n    Write a function to check if all values are same and all keys are same in a dictionary.\n    '''\n    return len(set(dict.values())) == 1 and len(set(dict.keys())) == 1\n    \n    ",
        "num_ids": 31
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = dict.values()\n    if n in value:\n        return True\n    else:\n        return False\n",
        "num_ids": 29
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if dict[key]!= n:\n            return False\n    return True\n    \ndef check_value_list(dict, n):\n    '''\n    Write a function to check if all values in a list are same.\n    '''\n    for i in range(0,len(dict)-1):\n        if dict[i]!= n:\n            return False\n    return True\n    \ndef is_anagram(str1, str2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    dict1 = {}\n    dict2 = {}\n    for i in str1:\n        if dict1.get(i):\n            dict1[i] = dict1[i] + 1\n        else:\n            dict1[i] = 1\n    for i in str2:\n        if dict2.get(i):\n            dict2[i] = dict2[i] + 1\n        else:\n            dict2[i] = 1\n    return check_value_list(dict1, 1) and check_value_list(dict2, 1)\n    \ndef is_palindrome(str1):\n    '''\n    Write a function to check if a string is a palindrome.\n    A palindrome is a string that reads the same forwards and backwards.\n    '''\n    return str1[::-1] == str1\n",
        "num_ids": 15
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    val = dict.values()\n    if val.count(val[0]) == len(val):\n        return True\n    return False\n",
        "num_ids": 34
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    val = dict.values()[0]\n    for dic in dict.values():\n        if dic!= val:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.values():\n        if i!= n:\n            return False\n    return True\n",
        "num_ids": 27
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        return True\n    val = list(dict.values())[0]\n    for i in range(1, len(dict)):\n        if val!= list(dict.values())[i]:\n            return False\n    return True\n",
        "num_ids": 66
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for k in dict.keys():\n        if k==n:\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 33
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if(len(dict) == 0):\n        return True\n    v = dict.values()\n    if(n == 0):\n        return len(v) == len(set(v))\n    else:\n        return len(v) == 1\n",
        "num_ids": 60
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}\n",
        "num_ids": 22
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if value == '':\n            del dict1[key]\n    return dict1\n",
        "num_ids": 34
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if value == []:\n            del dict1[key]\n    return dict1\n",
        "num_ids": 34
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k,v in list(dict1.items()):\n        if not v:\n            del dict1[k]\n    return dict1\n",
        "num_ids": 36
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in list(dict1):\n        if dict1[key] == []:\n            del dict1[key]\n    return dict1\n",
        "num_ids": 36
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return { key:value for key, value in dict1.items() if value }\n",
        "num_ids": 22
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict1_new = {}\n    for key in dict1:\n        if dict1[key]:\n            dict1_new[key] = dict1[key]\n    return dict1_new\n",
        "num_ids": 48
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return { k:v for k,v in dict1.items() if v}\n",
        "num_ids": 22
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    result = {}\n    for key in dict1:\n        if dict1[key]!= None:\n            result[key] = dict1[key]\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key:value for key,value in dict1.items() if value}\n",
        "num_ids": 22
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    #arr = [-2,-3,4,-1,-2,1,5,-3]\n    #arr = [2,3,4]\n    #arr = [-2, -3, 4]\n    max_product = -1\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            product = 1\n            for k in range(i,j+1):\n                product *= arr[k]\n            if max_product < product:\n                max_product = product\n    return max_product\n",
        "num_ids": 132
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr)==0:\n        return None\n    if len(arr)==1:\n        return arr[0]\n    if len(arr)==2:\n        return max(arr[0],arr[1])\n    max_end_here = max(arr[0]*arr[1],arr[1]*arr[2],arr[0]*arr[2])\n    max_so_far = max_end_here\n    i = 3\n    while i < len(arr):\n        max_end_here = max(max_end_here*arr[i],arr[i]*arr[i+1],arr[i]*arr[i+2])\n        max_so_far = max(max_so_far,max_end_here)\n        i += 1\n    return max_so_far\n",
        "num_ids": 197
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n==0:\n        return 0\n    result = arr[0]\n    global_max = arr[0]\n    local_max = arr[0]\n    for i in xrange(1, n):\n        local_max = max(local_max*arr[i], arr[i])\n        global_max = max(global_max, local_max)\n    return global_max\n",
        "num_ids": 103
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # DP\n    # Here we can use a two dimensional array to solve the problem.\n    # If we have 0, we can start from 1 since the max is just 1\n    # If we have 2 elements, max is 2 since 1 * 2 = 2\n    # If we have more than 2 elements, we can use the largest multiple of the last two elements as the max\n    # to get the max we can use max(max(arr[:-2]),arr[-2]*arr[-1])\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return max(arr[0]*arr[1],arr[0]*arr[1])\n    else:\n        return max(max_product(arr[:-2]),arr[-2]*arr[-1])\n",
        "num_ids": 194
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_prod = arr[0] * arr[1] * arr[2]\n    max_product_seq = [arr[0], arr[1], arr[2]]\n    for i in xrange(3, len(arr)):\n        current_max = 1\n        for j in xrange(i - 2, -1, -1):\n            current_max = max(current_max, arr[j] * arr[i])\n        max_prod = max(max_prod, current_max * arr[i])\n        max_product_seq.append(current_max)\n    return max_prod, max_product_seq\n",
        "num_ids": 154
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n    return max_product\n",
        "num_ids": 52
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_val = arr[0]\n    result = arr[0]\n    for i in xrange(1, len(arr)):\n        curr_val = 1\n        for j in xrange(i):\n            if arr[j] < arr[i]:\n                curr_val *= arr[i]\n        if curr_val > max_val:\n            max_val = curr_val\n        result = max(result, max_val)\n    return result\n",
        "num_ids": 129
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if arr is None or len(arr) == 0:\n        return 0\n    max_product = arr[0]\n    for i in xrange(1, len(arr)):\n        if arr[i] >= 0:\n            max_product *= arr[i]\n        else:\n            max_product = max(max_product, arr[i])\n    return max_product\n",
        "num_ids": 92
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    res = [arr[0], max(arr[0], arr[1])]\n    for i in range(2, len(arr)):\n        res.append(max(res[-1]*arr[i], res[-2]*arr[i], arr[i]))\n    return res[-1]\n",
        "num_ids": 91
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = 1\n    # check for negative numbers\n    for number in arr:\n        if number < 0:\n            return 0\n    # check for all positive numbers\n    for number in arr:\n        max_product *= number\n    return max_product\n    \n    \ndef max_product_of_three(arr):\n    '''\n    Given an array of integers, find three elements that their product is maximum and return the maximum product.\n    '''\n    max_product = -999999999\n    for i in range(len(arr)-2):\n        for j in range(i+1, len(arr)-1):\n            for k in range(j+1, len(arr)):\n                if arr[i] * arr[j] * arr[k] > max_product:\n                    max_product = arr[i] * arr[j] * arr[k]\n    return max_product\n",
        "num_ids": 106
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    test_lst = list(test_tup)\n    for i in range(len(test_lst)):\n        try:\n            a = test_lst[i]\n            b = test_lst[i+1]\n            test_lst[i] = a + b\n        except IndexError:\n            pass\n    return tuple(test_lst)\n",
        "num_ids": 91
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup)<2:\n        return\n    \n    res = []\n    for i in range(len(test_tup)-1):\n        res.append(test_tup[i]+test_tup[i+1])\n    res.append(test_tup[-1])\n    return tuple(res)\n",
        "num_ids": 84
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple([x+y for x, y in zip(test_tup, test_tup[1:])])\n",
        "num_ids": 31
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    a = test_tup[0]\n    b = test_tup[1]\n    c = test_tup[2]\n    d = test_tup[3]\n    e = test_tup[4]\n    f = test_tup[5]\n    g = test_tup[6]\n    h = test_tup[7]\n    \n    return (a+b+c+d+e+f+g+h)\n",
        "num_ids": 112
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    assert len(test_tup) > 1\n    return test_tup[0]+test_tup[1] + add_pairwise(test_tup[1:]) if len(test_tup) > 2 else test_tup[0] + test_tup[1]\n",
        "num_ids": 71
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    #add your code here\n    return tuple([x + y for x, y in zip(test_tup, test_tup[1:])])\n",
        "num_ids": 38
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    lst = list(test_tup)\n    for i in range(1, len(lst)):\n        lst[i-1] += lst[i]\n    return tuple(lst)\n",
        "num_ids": 52
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(a+b for a,b in zip(test_tup, test_tup[1:]))\n",
        "num_ids": 30
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    x = test_tup[0]\n    y = test_tup[1]\n    if len(test_tup) > 2:\n        z = test_tup[2]\n        return x + y + z\n    else:\n        return x + y\n",
        "num_ids": 66
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return 0\n    else:\n        return test_tup[0] + test_tup[1]\n",
        "num_ids": 41
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr_product = 1\n    for i in range(len(arr)):\n        arr_product = (arr_product * arr[i]) % n\n    return arr_product\n",
        "num_ids": 44
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod = (prod*i) % n\n    return prod \n",
        "num_ids": 33
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    print n\n    res = 1\n    for i in range(len(arr)):\n        res *= (arr[i] % n)\n    return res % n\n",
        "num_ids": 42
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr.sort()\n    left = 0\n    right = len(arr)-1\n    if arr[left]<arr[right]:\n        print arr[left]*arr[right]\n        return arr[left]*arr[right]\n    else:\n        while left<=right:\n            if arr[left]*arr[right]<0:\n                left+=1\n            elif arr[left]*arr[right]>0:\n                right-=1\n            else:\n                if (left+1)%2==1:\n                    left+=1\n                else:\n                    right-=1\n        print -arr[left]*arr[right]\n        return -arr[left]*arr[right]\narr=[3,-2,1,4,5,-1,-2,-1,-2,8,7,0]\nfind_remainder(arr, 7",
        "num_ids": 206
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    mul = 1\n    for i in arr:\n        mul = (mul * i) % n\n    return mul\n",
        "num_ids": 32
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod = (prod * i) % n\n    return prod\n",
        "num_ids": 32
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    t = 1\n    for i in range(len(arr)): \n        t = (t * arr[i]) % n \n    return t\n",
        "num_ids": 38
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    total = 1\n    for i in arr:\n        total *= i\n    return total % n\n    \ndef find_invpow(x, n):\n    '''\n    Write a python function to find the inverse of x modulo n.\n    '''\n    \n    arr = [0]*(n)\n    for i in range(0, n):\n        arr[i] = i\n    \n    for i in range(1, n):\n        if (arr[i] < 0):\n            arr[i] = n - arr[i]\n    \n    arr[0] = 1\n    p = 1\n    for i in range(0, n):\n        p = (p * arr[i]) % n\n        \n    return p\n",
        "num_ids": 116
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return n * reduce(lambda x, y: x * y, arr) % n\n",
        "num_ids": 22
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    res = 1\n    for i in range(n):\n        res = (res * arr[i]) % n\n    return res\n",
        "num_ids": 33
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if(l[i+1] == l[i] + 1):\n            print(\"True\")\n            return True\n    print(\"False\")\n    return False\n",
        "num_ids": 53
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return(sorted(l) == list(range(min(l), max(l)+1)))\n",
        "num_ids": 26
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    for i in range(n-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1]!= l[i] + 1:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n=len(l)\n    for i in range(n-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return sorted(l) == list(range(min(l), max(l)+1))\n",
        "num_ids": 24
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(1, len(l)): \n        if l[i] - l[i-1]!= 1: \n            return False\n    return True\n",
        "num_ids": 44
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(1,len(l)):\n        if l[i]-l[i-1]!= 1:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_list = []\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            tuple_list.append(test_list1[i])\n    return tuple_list\n",
        "num_ids": 63
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    dict1 = {}\n    dict2 = {}\n    if len(test_list1)!= len(test_list2):\n        return []\n    for i in test_list1:\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    for i in test_list2:\n        if i in dict2:\n            dict2[i] += 1\n        else:\n            dict2[i] = 1\n    return [i for i in dict1 if i in dict2]\n",
        "num_ids": 132
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    len1 = len(test_list1)\n    len2 = len(test_list2)\n    list1 = []\n    list2 = []\n    for i in range(0,len1):\n        list1.append(test_list1[i])\n    for i in range(0,len2):\n        list2.append(test_list2[i])\n    tuple_list = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                tuple_list.append(i)\n    return tuple_list\n",
        "num_ids": 138
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = list(set(test_list1) & set(test_list2))\n    return result\n",
        "num_ids": 27
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return_list = []\n    test_list1 = tuple(test_list1)\n    test_list2 = tuple(test_list2)\n    \n    for element in test_list1:\n        if element in test_list2:\n            return_list.append(element)\n    \n    return return_list\n    \nprint(tuple_intersection([1,2,3,4,5], [2,4,6,8,10]))\nprint(tuple_intersection([1,2,3,4,5], [6,8,10,12,14]))\n",
        "num_ids": 141
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1) & set(test_list2))\n",
        "num_ids": 22
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1) > len(test_list2):\n        bigger_list = test_list1\n        smaller_list = test_list2\n    else:\n        bigger_list = test_list2\n        smaller_list = test_list1\n    result = []\n    for item in smaller_list:\n        if item in bigger_list:\n            result.append(item)\n    return result\n",
        "num_ids": 103
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    d={}\n    for i in test_list1:\n        d[i]=1\n    for i in test_list2:\n        d[i]=1\n    ret_list=[]\n    for i in d:\n        if d[i]==2:\n            ret_list.append(i)\n    return ret_list\n",
        "num_ids": 81
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersect_list = []\n    for i in test_list1:\n        if i in test_list2:\n            intersect_list.append(i)\n    return intersect_list\n",
        "num_ids": 47
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list = []\n    for each in test_list1:\n        if each in test_list2:\n            test_list.append(each)\n    return test_list\n",
        "num_ids": 45
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = str1\n    str2 = str2.replace(ch,newch)\n    return str2\n",
        "num_ids": 29
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    return str1\n",
        "num_ids": 22
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr=str1.replace(ch,newch)\n    return newstr\n",
        "num_ids": 22
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    return str1\n    ",
        "num_ids": 23
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return newch.join(str1.split(ch))\n    \ndef replace_char_in_list(list1,old,new):\n    '''\n    Write a function to replace characters in a list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list1[i].replace(old,new)\n    return list1\n    \ndef replace_string_in_list(list1,old,new):\n    '''\n    Write a function to replace characters in a list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list1[i].replace(old,new)\n    return list1\n    \ndef replace_char_by_index(str1,old,new):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return new.join(str1.split(old))\n    \ndef replace_char_by_index_in_list(list1,old,new):\n    '''\n    Write a function to replace characters in a list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list1[i].replace(old,new)\n    return list1\n    \ndef replace_string_by_index(list1,old,new):\n    '''\n    Write a function to replace characters in a list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list1[i].replace(old,new)\n    return list1\n    \ndef replace_char_by_index_in_str(str1,old,new):\n    '''\n    Write a function to replace characters in a list.\n    '''\n    return new.join(str1.split(old))\n    \ndef replace_char_by_index_in_list_in_str(list1,old,new):\n    '''\n    Write a function to replace characters in a list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list1[i].replace(old,new)\n    return list1\n    \ndef replace_string_by_index_in_str(str1,old,new):\n    '''\n    Write a function to replace characters in a list.\n    '''\n    return new.join(str1.split(old))\n    \ndef replace_char_by_index_in_str(str1,old,new):\n    '''\n    Write a function to replace characters in a list.\n    '''\n    return new.join(str1.split(old))\n    \ndef replace_char_in_list_by_index(list1,old,new):\n    '''\n    Write a function to replace characters in a list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list1[i].replace(old,new)\n    return list1\n    \ndef replace_char_in_list_by_index_in_str(list1,old,new):\n    '''\n    Write a function to replace characters in a list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list1[i].replace(old,new)\n    return list1\n    \ndef replace_string_in_list_by_index(list1,old,new):\n    '''\n    Write a function to replace characters in a list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list1[i].replace(old,new)\n    return list1\n    \ndef replace_char_in_str_by_index(str1,old,new):\n    '''\n    Write a function to replace characters in a list.\n    '''\n    return new.join(str1.split(old))\n    \ndef replace_char_in_str_by_index_in_list(str1,old,new):\n    '''\n    Write a function to replace characters in a list.\n    '''\n    return new.join(str1.split(old))\n    \ndef replace_string_in_str_by_index(str1,old,new):\n    '''\n    Write a function to replace characters in a list.\n    '''\n    return new.join(str1.split(old))\n    \ndef replace_char_in_str(str1,old,new):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return new.join(str1.split(old))\n    \ndef replace_char_in_str_in_list(str1,old,new):\n    '''\n    Write a function to replace characters in a list.\n    '''\n    return new.join(str1.split(old))\n    \ndef replace_string_in_str_in_list(str1,old,new):\n    '''\n    Write a function to replace characters in a list.\n    '''\n    return new.join(str1.split(old))\n    \ndef replace_char_by_index_in_str_in_list(list1,old,new):\n    '''\n    Write a function to replace characters in a list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list1[i].replace(old,new)\n    return list1\n    \ndef replace_char_by_index_in_str_in_list_in_str(list1,old,new):\n    '''\n    Write a function to replace characters in a list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list1[i].replace(old,new)\n    return list1\n    \ndef replace_string_by_index_in_str_in_list(list1,old,new):\n    '''\n    Write a function to replace characters in a list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list1[i].replace(old,new)\n    return list1\n    \ndef replace_char_by_index_in_str_in_list_in_str(list1,old,new):\n    '''\n    Write a function to replace characters in a list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list1[i].replace(old,new)\n    return list1\n    \ndef replace_char_by_index_in_list_in_str_in_str(list1,old,new):\n    '''\n    Write a function to replace characters in a list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list1[i].replace(old,new)\n    return list1\n    \ndef replace_string_by_index_in_list_in_str_in_str(list1,old,new):\n    '''\n    Write a function to replace characters in a list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list1[i].replace(old,new)\n    return list1\n    \ndef remove_item_in_list(list1,item):\n    '''\n    Write a function to remove an item from a list.\n    '''\n    for i in range(len(list1)):\n        list1.remove(item)\n    return list1\n    \ndef remove_item_in_list_in_str(list1,item):\n    '''\n    Write a function to remove an item from a list.\n    '''\n    for i in range(len(list1)):\n        list1.remove(item)\n    return list1\n    \ndef remove_item_in_list_in_str_in_list(list1,item):\n    '''\n    Write a function to remove an item from a list.\n    '''\n    for i in range(len(list1)):\n        list1.remove(item)\n    return list1\n    \ndef remove_item_in_list_in_str_in_str(list1,item):\n    '''\n    Write a function to remove an item from a list.\n    '''\n    for i in range(len(list1)):\n        list1.remove(item)\n    retur",
        "num_ids": 27
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if not str1:\n        return ''\n",
        "num_ids": 13
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for i in range(len(str1)):\n        if str1[i]==ch:\n            str1=str1[:i]+newch+str1[i+1:]\n    return str1\n",
        "num_ids": 52
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1=sorted(dict1.items(),key=lambda x:x[1],reverse=True)\n    return dict1\ndef sort_by_value(dictionary):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dictionary=sorted(dictionary.items(),key=lambda x:x[1])\n    return dictionary\ndef find_max_key(dictionary):\n    '''\n    Write a function to find the maximum value of a key in a dictionary.\n    '''\n    max_key=max(dictionary.keys(),key=lambda x:dictionary[x])\n    return max_key\ndef get_max_value(dictionary):\n    '''\n    Write a function to find the maximum value of a key in a dictionary.\n    '''\n    max_value=max(dictionary.values())\n    return max_value\ndef get_max_key(dictionary):\n    '''\n    Write a function to find the maximum value of a key in a dictionary.\n    '''\n    max_key=max(dictionary,key=lambda x:dictionary[x])\n    return max_key\ndef get_max_value(dictionary):\n    '''\n    Write a function to find the maximum value of a key in a dictionary.\n    '''\n    max_value=max(dictionary.values())\n    return max_value\ndef get_max_key(dictionary):\n    '''\n    Write a function to find the maximum value of a key in a dictionary.\n    '''\n    max_value=max(dictionary,key=lambda x:dictionary[x])\n    return max_value\ndef find_max_key(dictionary):\n    '''\n    Write a function to find the maximum value of a key in a dictionary.\n    '''\n    max_key=max(dictionary,key=lambda x:dictionary[x])\n    return max_key\ndef get_max_value(dictionary):\n    '''\n    Write a function to find the maximum value of a key in a dictionary.\n    '''\n    max_value=max(dictionary.values())\n    return max_value\ndef get_max_key(dictionary):\n    '''\n    Write a function to find the maximum value of a key in a dictionary.\n    '''\n    max_value=max(dictionary,key=lambda x:dictionary[x])\n    return max_value\ndef get_max_value(dictionary):\n    '''\n    Write a function to find the maximum value of a key in a dictionary.\n    '''\n    max_value=max(dictionary.values())\n    return max_value\ndef get_max_key(dictionary):\n    '''\n    Write a function to find the maximum value of a key in a dictionary.\n    '''\n    max_value=max(dictionary,key=lambda x:dictionary[x])\n    return max_value\ndef get_max_key(dictionary):\n    '''\n    Write a function to find the maximum value of a key in a dictionary.\n    '''\n    max_value=max(dictionary,key=lambda x:dictionary[x])\n    return max_value\ndef get_max_value(dictionary):\n    '''\n    Write a function to find the maximum value of a key in a dictionary.\n    '''\n    max_value=max(dictionary.values())\n    return max_value\ndef get_max_key(dictionary):\n    '''\n    Write a function to find the maximum value of a key in a dictionary.\n    '''\n    max_value=max(dictionary,key=lambda x:dictionary[x])\n    return max_value\ndef get_max_key(dictionary):\n    '''\n    Write a function to find the maximum value of a key in a dictionary.\n    '''\n    max_value=max(dictionary,key=lambda x:dictionary[x])\n    return max_value\ndef get_max_value(dictionary):\n    '''\n    Write a function to find the maximum value of a key in a dictionary.\n    '''\n    max_value=max(dictionary.values())\n    return max_value\ndef get_max_key(dictionary):\n    '''\n    Write a function to find the maximum value of a key in a dictionary.\n    '''\n    max_value=max(dictionary,key=lambda x:dictionary[x])\n    return max_value\ndef get_max_key(dictionary):\n    '''\n    Write a function to find the maximum value of a key in a dictionary.\n    '''\n    max_value=max(dictionary,key=lambda x:dictionary[x])\n    return max_value\ndef get_max_value(dictionary):\n    '''\n    Write a function to find the maximum value of a key in a dictionary.\n    '''\n    max_value=max(dictionary.values())\n    return max_value\ndef get_max_key(dictionary):\n    '''\n    Write a function to find the maximum value of a key in a dictionary.\n    '''\n    max_value=max(dictionary,key=lambda x:dictionary[x])\n    return max_value\ndef get_max_key(dictionary):\n    '''\n    Write a function to find the maximum value of a key in a dictionary.\n    '''\n    max_value=max(dictionary,key=lambda x:dictionary[x])\n    return max_value\ndef get_max_value(dictionary):\n    '''\n    Write a function to find the maximum value of a key in a dictionary.\n    '''\n    max_value=max(dictionary.values())\n    return max_value\ndef get_max_key(dictionary):\n    '''\n    Write a function to find the maximum value of a key in a dictionary.\n    '''\n    max_value=max(dictionary,key=lambda x:dictionary[x])\n    return max_value\ndef get_max_key(dictionary):\n    '''\n    Write a function to find the maximum value of a key in a dictionary.\n    '''\n    max_value=max(dictionary,key=lambda x:dictionary[x])\n    return max_value\ndef get_max_value(dictionary):\n    '''\n    Write a function to find the maximum value of a key in a dictionary.\n    '''\n    max_value=max(dictionary.values())\n    return max_value\ndef get_max_key(dictionary):\n    '''\n    Write a function to find the maximum value of a key in a dictionary.\n    '''\n    max_value=max(dictionary,key=lambda x:dictionary[x])\n    return max_value\ndef get_max_key(dictionary):\n    '''\n    Write a function to find the maximum value of a key in a dictionary.\n    '''\n    max_value=max(dictionary,key=lambda x:dictionary[x])\n    return max_value\ndef get_max_value(dictionary):\n    '''\n    Write a function to find the maximum value of a key in a dictionary.\n    '''\n    max_value=max(dictionary.values())\n    return max_value\ndef get_max_key(dictionary):\n    '''\n    Write a function to find the maximum value of a key in a dictionary.\n    '''\n    max_value=max(dictionary,key=lambda x:dictionary[x])\n    return max_value\ndef get_max_key(dictionary):\n    '''\n    Write a function to find the maximum value of a key in a dictionary.\n    '''\n    max_value=max(dictionary,key=lambda x:dictionary[x])\n    return max_value\ndef get_max_value(dictionary):\n    '''\n    Write a function to find the maximum value of a key in a dictionary.\n    '''\n    max_value=max(dictionary.values())\n    return max_value\ndef get_max_key(dictionary):\n    '''\n    Write a function to find the maximum value of a key in a dictionary.\n    '''\n    max_value=max(dictionary,key=lambda x:dictionary[x])\n    return max_value\ndef get_max_key(dictionary):\n    '''\n    Write a function to find the maximum value of a key in a dictionary.\n    '''\n    max_value=max(dictionary,key=lambda x:dictionary[x])\n    retur",
        "num_ids": 26
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_list = sorted(dict1.items(), key=lambda x: x[1])\n    return sorted_list\n",
        "num_ids": 31
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1=sorted(dict1.items(),key=lambda x:x[1],reverse=True)\n    return dict1\ndef word_counter(dictionary):\n    '''\n    Write a function to count words in a dictionary.\n    '''\n    for word in dictionary.keys():\n        word=word.lower()\n        print word\n    return dict(sort_counter(dictionary))\ndef palindrome(word):\n    '''\n    Write a function to check whether a word is palindrome or not.\n    '''\n    word=word.lower()\n    return word[::-1]==word\ndef longest_palindrome(dictionary):\n    '''\n    Write a function to find the longest palindrome in a dictionary.\n    '''\n    word=sorted(dictionary.keys(),key=len)\n    return word[-1]\ndef count_upper_lower(s):\n    '''\n    Write a function to count upper and lowercase letters in a string.\n    '''\n    upper=0\n    lower=0\n    for i in s:\n        if i.isupper():\n            upper+=1\n        elif i.islower():\n            lower+=1\n        else:\n            pass\n    return upper,lower\ndef check_permutation(s1,s2):\n    '''\n    Write a function to check whether two strings are permutations of each other.\n    '''\n    for i in s1:\n        if i in s2:\n            s2=s2.replace(i,'',1)\n        else:\n            return False\n    return True\ndef get_the_int():\n    '''\n    Write a function to get an integer from a string.\n    '''\n    while True:\n        try:\n            int1=input('Enter a number: ')\n            break\n        except ValueError:\n            print('Please enter a valid number.')\n    return int1\ndef generate_binary():\n    '''\n    Write a function to generate a binary string.\n    '''\n    i=get_the_int()\n    while i%2==0:\n        i=get_the_int()\n    print i*'0'+(i-1)*'1'\ndef get_threes_in_row():\n    '''\n    Write a function to get the maximum sum of three consecutive integers.\n    '''\n    i=1\n    sum=0\n    while i<=100:\n        if i%3==0:\n            sum+=i\n        i+=1\n    return sum\ndef generate_triangle():\n    '''\n    Write a function to generate a triangular pyramid.\n    '''\n    i=1\n    while i<=6:\n        print i*'*'\n        i+=1\ndef get_anagrams(string1,string2):\n    '''\n    Write a function to check if two strings are anagrams.\n    '''\n    return Counter(string1)==Counter(string2)\ndef get_dictionary(filename):\n    '''\n    Write a function to get the keys of a dictionary.\n    '''\n    keys=[]\n    with open(filename,'r') as f:\n        for line in f:\n            line=line.rstrip()\n            keys.append(line)\n    return keys\ndef word_anagrams(dictionary):\n    '''\n    Write a function to check if two words are anagrams of each other.\n    '''\n    for word1 in dictionary.keys():\n        for word2 in dictionary.keys():\n            if word1!=word2 and get_dictionary(word1)==get_dictionary(word2):\n                print word1,word2\n    return None\ndef levenshtein_distance(string1,string2):\n    '''\n    Write a function to calculate the Levenshtein distance between two strings.\n    '''\n    if len(string1)>len(string2):\n        string1,string2=string2,string1\n    dist=[[0 for i in range(len(string2)+1)] for j in range(len(string1)+1)]\n    for i in range(1,len(string1)+1):\n        dist[i][0]=i\n    for i in range(1,len(string2)+1):\n        dist[0][i]=i\n    for i in range(1,len(string1)+1):\n        for j in range(1,len(string2)+1):\n            if string1[i-1]==string2[j-1]:\n                dist[i][j]=dist[i-1][j-1]\n            else:\n                dist[i][j]=min(dist[i-1][j]+1,dist[i][j-1]+1,dist[i-1][j-1]+1)\n    return dist[-1][-1]\ndef longest_common_prefix(string1,string2):\n    '''\n    Write a function to find the longest common prefix in two strings.\n    '''\n    if len(string1)>len(string2):\n        string1,string2=string2,string1\n    lcp=''\n    for i in range(len(string1)):\n        if string1[:i+1]==string2[:i+1]:\n            lcp+=string1[:i+1]\n        else:\n            break\n    return lcp\ndef get_valid_input():\n    '''\n    Write a function to get a valid input from the user.\n    '''\n    while True:\n        try:\n            i=input('Enter a number: ')\n            break\n        except ValueError:\n            print('Please enter a valid number.')\n    return i\ndef check_if_prime(number):\n    '''\n    Write a function to check if a number is prime.\n    '''\n    if number<2:\n        return False\n    elif number%2==0:\n        return False\n    else:\n        for i in range(3,int(number**0.5)+1):\n            if number%i==0:\n                return False\n    return True\ndef get_the_primes():\n    '''\n    Write a function to get the first n primes.\n    '''\n    i=1\n    while True:\n        if check_if_prime(i):\n            print i\n        i+=1\ndef is_valid(n):\n    '''\n    Write a function to check if a number is a valid credit card number.\n    '''\n    while True:\n        n=get_the_int()\n        if n>999 and n<1000000:\n            break\n    if n%10==0 or n%10>=5:\n        return False\n    else:\n        return True\ndef get_num_digits(num):\n    '''\n    Write a function to calculate the number of digits in a number.\n    '''\n    return len(str(num))\ndef remove_duplicates(lst):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    return list(set(lst))\ndef get_anagram_indices(string1,string2):\n    '''\n    Write a function to get the indices of an anagram.\n    '''\n    count1=Counter(string1)\n    count2=Counter(string2)\n    for i in range(len(string1)):\n        if string1[i] in count2:\n            count2[string1[i]]-=1\n            if count2[string1[i]]==0:\n                count2.pop(string1[i])\n        if string2[i] in count1:\n            count1[string2[i]]-=1\n            if count1[string2[i]]==0:\n                count1.pop(string2[i])\n    for i in count1:\n        if count1[i]!=0:\n            return None\n    for i in count2:\n        if count2[i]!=0:\n            return None\n    return [i for i in range(len(string1)) if string1[i] in count1 or string2[i] in count2]\ndef remove_vowels(string1):\n    '''\n    Write a function to remove vowels from a string.\n    '''\n    vowels=['a','e','i','o','u']\n    string1=string1.lower()\n    for i in vowels:\n        string1=string1.replace(i,'')\n",
        "num_ids": 50
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = sorted(dict1.items(), key=lambda x:x[1], reverse=True)\n    return sort_dict\n",
        "num_ids": 34
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n",
        "num_ids": 25
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_values = sorted(dict1.values())\n    sorted_dict = {}\n    for value in sorted_values:\n        for key in dict1.keys():\n            if dict1[key] == value:\n                sorted_dict[key] = dict1[key]\n    return sorted_dict\n",
        "num_ids": 75
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\ndef print_word_count(dic1):\n    '''\n    Write a function to print a dictionary with the most common words first.\n    '''\n    sort_counter(dic1)\n    for word,count in dic1.items():\n        print word,count\n",
        "num_ids": 31
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # find the key with the highest value\n    top_value = max(dict1, key = dict1.get)\n    top_key = max(dict1, key = dict1.get)\n",
        "num_ids": 48
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    lst=[]\n    for key,value in dict1.items():\n        lst.append((value,key))\n    lst=sorted(lst,reverse=True)\n    return lst\n",
        "num_ids": 51
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(),key = lambda x:x[1],reverse = True)\n",
        "num_ids": 25
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    s = sum(nums)\n    n = len(nums)\n    return s - min(nums) - max(nums)\n",
        "num_ids": 36
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(max(nums), sum(min(nums)))\n",
        "num_ids": 19
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_ = max(nums)\n    min_ = min(nums)\n    return max_ + min_\n",
        "num_ids": 30
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    \n    result = nums[0] + nums[-1]\n    for i in range(1, len(nums)):\n        if result < nums[i]:\n            result = nums[i]\n    return result\n",
        "num_ids": 58
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    big = max(nums)\n    small = min(nums)\n    return big + small\n",
        "num_ids": 26
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n",
        "num_ids": 17
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums, reverse = True)[:2])\n",
        "num_ids": 20
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums,reverse=True)[:2])\n",
        "num_ids": 20
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max = nums[0]\n    min = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > max:\n            max = nums[i]\n        elif nums[i] < min:\n            min = nums[i]\n    return max + min\n",
        "num_ids": 82
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    big_num = 0\n    for num in nums:\n        if num > big_num:\n            big_num = num\n    small_num = nums[0]\n    for num in nums:\n        if num < small_num:\n            small_num = num\n    return small_num + big_num\n    \nprint big_sum([3, 4, 2, -3, 0, 2, -2, -1, 2, -2])\n    \n",
        "num_ids": 112
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n    \ndef is_upper(string):\n    '''\n    Write a python function to convert the given string to upper case.\n    '''\n    return string.upper()\n    \ndef is_alpha(string):\n    '''\n    Write a python function to convert the given string to alpha.\n    '''\n    return string.isalpha()\n    \ndef is_digit(string):\n    '''\n    Write a python function to convert the given string to digit.\n    '''\n    return string.isdigit()\n    \ndef is_alnum(string):\n    '''\n    Write a python function to convert the given string to alnum.\n    '''\n    return string.isalnum()\n    \ndef is_title(string):\n    '''\n    Write a python function to convert the given string to title.\n    '''\n    return string.istitle()\n    \ndef is_punct(string):\n    '''\n    Write a python function to convert the given string to punct.\n    '''\n    return string.isdigit()\n    \ndef is_space(string):\n    '''\n    Write a python function to convert the given string to space.\n    '''\n    return string.isspace()\n    \ndef is_blank(string):\n    '''\n    Write a python function to convert the given string to blank.\n    '''\n    return string.isspace()\n    \ndef is_lowercase(string):\n    '''\n    Write a python function to convert the given string to lowercase.\n    '''\n    return string.islower()\n    \ndef is_uppercase(string):\n    '''\n    Write a python function to convert the given string to uppercase.\n    '''\n    return string.isupper()\n    \ndef is_octal(string):\n    '''\n    Write a python function to convert the given string to octal.\n    '''\n    return string.isdigit() and len(string) > 3 and string[0] == '0' and string[1] == '0' and string[2] == '0'\n    \ndef is_hexadecimal(string):\n    '''\n    Write a python function to convert the given string to hexadecimal.\n    '''\n    return string.isdigit() and len(string) > 3 and string[0] == '0' and string[1] == '0' and string[2] == '0'\n    \ndef is_hex_digit(string):\n    '''\n    Write a python function to convert the given string to hexadecimal digit.\n    '''\n    return string.isdigit() and len(string) > 1 and string[0] == '0' and string[1]!= '0'\n    \ndef is_oct_digit(string):\n    '''\n    Write a python function to convert the given string to octal digit.\n    '''\n    return string.isdigit() and len(string) > 1 and string[0]!= '0' and string[1] == '0'\n    \ndef is_oct_digit_oct(string):\n    '''\n    Write a python function to convert the given string to octal digit.\n    '''\n    return string.isdigit() and len(string) > 2 and string[0]!= '0' and string[1] == '0' and string[2] == '0'\n    \ndef is_hex_digit_hex(string):\n    '''\n    Write a python function to convert the given string to hexadecimal digit.\n    '''\n    return string.isdigit() and len(string) > 1 and string[0]!= '0' and string[1]!= '0'\n    \ndef is_hex_digit_hex_digits(string):\n    '''\n    Write a python function to convert the given string to hexadecimal digit.\n    '''\n    return string.isdigit() and len(string) > 1 and string[0]!= '0' and string[1]!= '0'\n    \ndef is_hex_digit_hex_digits_hex(string):\n    '''\n    Write a python function to convert the given string to hexadecimal digit.\n    '''\n    return string.isdigit() and len(string) > 2 and string[0]!= '0' and string[1]!= '0' and string[2]!= '0'\n    \ndef is_hex_digit_hex_digits_hex_digits(string):\n    '''\n    Write a python function to convert the given string to hexadecimal digit.\n    '''\n    return string.isdigit() and len(string) > 3 and string[0]!= '0' and string[1]!= '0' and string[2]!= '0' and string[3] == '0'\n    \ndef is_hex_digit_hex_digits_hex_digits_hex(string):\n    '''\n    Write a python function to convert the given string to hexadecimal digit.\n    '''\n    return string.isdigit() and len(string) > 4 and string[0]!= '0' and string[1]!= '0' and string[2]!= '0' and string[3]!= '0' and string[4]!= '0'\n    \ndef is_hex_digit_hex_digits_hex_digits_hex_digits(string):\n    '''\n    Write a python function to convert the given string to hexadecimal digit.\n    '''\n    return string.isdigit() and len(string) > 5 and string[0]!= '0' and string[1]!= '0' and string[2]!= '0' and string[3]!= '0' and string[4]!= '0' and string[5]!= '0'\n    \ndef is_hex_digit_hex_digits_hex_digits_hex_digits_hex(string):\n    '''\n    Write a python function to convert the given string to hexadecimal digit.\n    '''\n    return string.isdigit() and len(string) > 6 and string[0]!= '0' and string[1]!= '0' and string[2]!= '0' and string[3]!= '0' and string[4]!= '0' and string[5]!= '0' and string[6]!= '0'\n    \ndef is_hex_digit_hex_digits_hex_digits_hex_digits_hex_digits(string):\n    '''\n    Write a python function to convert the given string to hexadecimal digit.\n    '''\n    return string.isdigit() and len(string) > 7 and string[0]!= '0' and string[1]!= '0' and string[2]!= '0' and string[3]!= '0' and string[4]!= '0' and string[5]!= '0' and string[6]!= '0' and string[7]!= '0'\n    \ndef is_hex_digit_hex_digits_hex_digits_hex_digits_hex_digits_hex_digits(string):\n    '''\n    Write a python function to convert the given string to hexadecimal digit.\n    '''\n    return string.isdigit() and len(string) > 8 and string[0]!= '0' and string[1]!= '0' and string[2]!= '0' and string[3]!= '0' and string[4]!= '0' and string[5]!= '0' and string[6]!= '0' and string[7]!= '0' and string[8]!= '0'\n    \ndef is_hex_digit_hex_digits_hex_digits_hex_digits_hex_digits_hex_digits_hex(string):\n    '''\n    Write a python function to convert the given string to hexadecimal digit.\n    '''\n    return string.isdigit() and len(string) > 9 and string[0]!= '0' and string[1]!= '0' and string[2]!= '0' and string[3]!= '0' and string[4]!= '0' and string[5]!= '0' and string[6]!= '0' and string[7]!= '0' and string[8]!= '0' and string[9]!= '0'\n    \ndef is_hex_digit_hex_digits_hex_digits_hex_digits_hex_digits_hex_digits",
        "num_ids": 151
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if string[0].isupper():\n        return True\n    return False\n",
        "num_ids": 20
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # convert the string to lower case\n    return string.lower()\n",
        "num_ids": 18
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]', '', str1)\n",
        "num_ids": 20
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]','',str1)\n",
        "num_ids": 21
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(\"[a-z]\", \"\", str1)\ndef remove_lowercase_digits(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(\"[a-z]\", \"\", str1)\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    return re.sub(\"[0-9]\", \"\", str1)\ndef remove_whitespace(str1):\n    '''\n    Write a function to remove whitespace from a given string.\n    '''\n    return re.sub(\"\\s\", \"\", str1)\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return re.sub(\"[^a-zA-Z0-9 ]\", \"\", str1)\ndef replace_substring(str1):\n    '''\n    Write a function to replace a substring with another substring in a given string.\n    '''\n    return re.sub(\"China\", \"US\", str1)\ndef replace_substrings(str1):\n    '''\n    Write a function to replace multiple substrings with another substring in a given string.\n    '''\n    return re.sub(\"China\", \"US\", str1)\ndef replace_digits(str1):\n    '''\n    Write a function to replace multiple substrings with another substring in a given string.\n    '''\n    return re.sub(\"China\", \"US\", str1)\ndef replace_punctuation(str1):\n    '''\n    Write a function to replace multiple substrings with another substring in a given string.\n    '''\n    return re.sub(\"China\", \"US\", str1)\ndef replace_characters(str1):\n    '''\n    Write a function to replace multiple substrings with another substring in a given string.\n    '''\n    return re.sub(\"China\", \"US\", str1)\ndef replace_words(str1):\n    '''\n    Write a function to replace multiple substrings with another substring in a given string.\n    '''\n    return re.sub(\"China\", \"US\", str1)\ndef replace_all(str1):\n    '''\n    Write a function to replace multiple substrings with another substring in a given string.\n    '''\n    return re.sub(\"China\", \"US\", str1)\ndef replace_substring_from_end(str1):\n    '''\n    Write a function to replace substring from end in a given string.\n    '''\n    return re.sub(\"China$\", \"US\", str1)\ndef replace_substring_from_start(str1):\n    '''\n    Write a function to replace substring from start in a given string.\n    '''\n    return re.sub(\"China\", \"US\", str1)\ndef replace_substring_from_start_end(str1):\n    '''\n    Write a function to replace substring from start and end in a given string.\n    '''\n    return re.sub(\"China\", \"US\", str1)\ndef replace_substring_from_start_end_with_replacement(str1):\n    '''\n    Write a function to replace substring from start and end in a given string with replacement\n    '''\n    return re.sub(\"China\", \"US\", str1)\ndef replace_substring_with_replacement(str1):\n    '''\n    Write a function to replace substring with replacement in a given string.\n    '''\n    return re.sub(\"China\", \"US\", str1)\ndef sub_string(str1):\n    '''\n    Write a function to replace substring with replacement in a given string.\n    '''\n    return re.sub(\"China\", \"US\", str1)\ndef sub_string_with_replacement(str1):\n    '''\n    Write a function to replace substring with replacement in a given string.\n    '''\n    return re.sub(\"China\", \"US\", str1)\ndef sub_string_using_position(str1):\n    '''\n    Write a function to replace substring with replacement in a given string.\n    '''\n    return re.sub(\"China\", \"US\", str1)\ndef sub_string_using_position_with_replacement(str1):\n    '''\n    Write a function to replace substring with replacement in a given string.\n    '''\n    return re.sub(\"China\", \"US\", str1)\ndef sub_string_using_all_positions(str1):\n    '''\n    Write a function to replace substring with replacement in a given string.\n    '''\n    return re.sub(\"China\", \"US\", str1)\ndef sub_string_using_all_positions_with_replacement(str1):\n    '''\n    Write a function to replace substring with replacement in a given string.\n    '''\n    return re.sub(\"China\", \"US\", str1)\ndef split_string_with_spaces(str1):\n    '''\n    Write a function to split a string with spaces in a given string.\n    '''\n    return re.split(\" \", str1)\ndef split_string_with_delimiter(str1):\n    '''\n    Write a function to split a string with delimiter in a given string.\n    '''\n    return re.split(\"China\", str1)\ndef split_string_with_delimiter_and_spaces(str1):\n    '''\n    Write a function to split a string with delimiter and spaces in a given string.\n    '''\n    return re.split(\"China \", str1)\ndef split_string_with_delimiter_and_spaces_and_whitespace(str1):\n    '''\n    Write a function to split a string with delimiter and spaces and white spaces in a given string.\n    '''\n    return re.split(\"China \", str1)\ndef split_string_with_delimiter_and_spaces_and_whitespace_with_replacement(str1):\n    '''\n    Write a function to split a string with delimiter and spaces and white spaces in a given string.\n    '''\n    return re.split(\"China \", str1)\ndef split_string_with_delimiter_and_spaces_and_whitespace_using_position(str1):\n    '''\n    Write a function to split a string with delimiter and spaces and white spaces in a given string.\n    '''\n    return re.split(\"China \", str1)\ndef split_string_with_delimiter_and_spaces_and_whitespace_using_position_with_replacement(str1):\n    '''\n    Write a function to split a string with delimiter and spaces and white spaces in a given string.\n    '''\n    return re.split(\"China \", str1)\ndef split_string_with_delimiter_and_spaces_and_whitespace_using_all_positions(str1):\n    '''\n    Write a function to split a string with delimiter and spaces and white spaces in a given string.\n    '''\n    return re.split(\"China \", str1)\ndef split_string_with_delimiter_and_spaces_and_whitespace_using_all_positions_with_replacement(str1):\n    '''\n    Write a function to split a string with delimiter and spaces and white spaces in a given string.\n    '''\n    return re.split(\"China \", str1)\ndef split_string_with_delimiter_and_spaces_and_whitespace_using_all_positions_with_replacement(str1):\n    '''\n    Write a function to split a string with delimiter and spaces and white spaces in a given string.\n    '''\n    return re.split(\"China \", str1)\ndef split_string_with_delimiter_and_spaces_and_whitespace_using_all_positions_with_replacement(str1):\n    '''\n    Write a function to split a string with delimiter and spaces and white spaces in a given string.\n    '''\n    return re.split(\"China \", str1)\ndef split_string_with_delimiter_and_spaces_and_whitespace_using_all_positions_with_replacement(str1):\n    '''\n    Write a function to split ",
        "num_ids": 9
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]+', '', str1)\ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    return re.sub(r'\\d+', '', str1)\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return re.sub(r'[^\\w\\s]+', '', str1)\ndef remove_multiple_spaces(str1):\n    '''\n    Write a function to remove multiple spaces from a given string.\n    '''\n    return re.sub(r'\\s+','', str1)\ndef remove_stopwords(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    return''.join([word for word in str1.split() if word not in stop_words])\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)\ndef unique_words(str1):\n    '''\n    Write a function to return the number of unique words from a given string.\n    '''\n    return len(set(str1.split()))\ndef count_words(str1):\n    '''\n    Write a function to return the word count from a given string.\n    '''\n    return len(str1.split())\ndef count_characters(str1):\n    '''\n    Write a function to return the character count from a given string.\n    '''\n    return len(str1)\ndef count_uppercase(str1):\n    '''\n    Write a function to return the count of uppercase letters from a given string.\n    '''\n    return sum([1 for char in str1 if char.isupper()])\ndef count_lowercase(str1):\n    '''\n    Write a function to return the count of lowercase letters from a given string.\n    '''\n    return sum([1 for char in str1 if char.islower()])\ndef count_digits(str1):\n    '''\n    Write a function to return the count of digits from a given string.\n    '''\n    return sum([1 for char in str1 if char.isdigit()])\ndef count_non_alphanumeric_characters(str1):\n    '''\n    Write a function to return the count of non-alphanumeric characters from a given string.\n    '''\n    return sum([1 for char in str1 if not char.isalnum()])\ndef count_whitespace(str1):\n    '''\n    Write a function to return the count of whitespace characters from a given string.\n    '''\n    return len(re.findall(r'\\s', str1))\ndef count_non_whitespace(str1):\n    '''\n    Write a function to return the count of non-whitespace characters from a given string.\n    '''\n    return len(re.findall(r'\\S', str1))\ndef count_sentences(str1):\n    '''\n    Write a function to return the count of sentences from a given string.\n    '''\n    return len(re.findall(r'\\S+[.?!]', str1))\ndef count_tabs(str1):\n    '''\n    Write a function to return the count of tabs from a given string.\n    '''\n    return len(re.findall(r'\\t', str1))\ndef count_multi_whitespace(str1):\n    '''\n    Write a function to return the count of multi-whitespace characters from a given string.\n    '''\n    return len(re.findall(r'\\s\\s+', str1))\ndef count_char_repeat(str1):\n    '''\n    Write a function to return the count of repetitions of characters from a given string.\n    '''\n    return len(re.findall(r'([a-z]{2,})\\1+', str1))\ndef count_char_repeat_pair(str1):\n    '''\n    Write a function to return the count of repetitions of consecutive characters from a given string.\n    '''\n    return len(re.findall(r'([a-z]{2,})\\1', str1))\ndef count_char_repeat_triple(str1):\n    '''\n    Write a function to return the count of repetitions of consecutive characters from a given string.\n    '''\n    return len(re.findall(r'([a-z]{3,})\\1', str1))\ndef count_repetition_char(str1):\n    '''\n    Write a function to return the count of repetitions of characters from a given string.\n    '''\n    return len(re.findall(r'([a-z]{2,})\\1', str1))\ndef count_repetition_char_pair(str1):\n    '''\n    Write a function to return the count of repetitions of consecutive characters from a given string.\n    '''\n    return len(re.findall(r'([a-z]{3,})\\1', str1))\ndef count_repetition_char_triple(str1):\n    '''\n    Write a function to return the count of repetitions of consecutive characters from a given string.\n    '''\n    return len(re.findall(r'([a-z]{4,})\\1', str1))\ndef count_repetition_word(str1):\n    '''\n    Write a function to return the count of repetitions of words from a given string.\n    '''\n    return len(re.findall(r'\\b([a-z]{2,})\\b', str1))\ndef count_repetition_word_pair(str1):\n    '''\n    Write a function to return the count of repetitions of consecutive words from a given string.\n    '''\n    return len(re.findall(r'\\b([a-z]{3,})\\b', str1))\ndef count_repetition_word_triple(str1):\n    '''\n    Write a function to return the count of repetitions of consecutive words from a given string.\n    '''\n    return len(re.findall(r'\\b([a-z]{4,})\\b', str1))\ndef count_non_alphanumeric_words(str1):\n    '''\n    Write a function to return the count of non-alphanumeric words from a given string.\n    '''\n    return len(re.findall(r'\\b([a-z]{2,})\\b', str1))\ndef count_non_alphanumeric_words_pair(str1):\n    '''\n    Write a function to return the count of non-alphanumeric words from a given string.\n    '''\n    return len(re.findall(r'\\b([a-z]{3,})\\b', str1))\ndef count_non_alphanumeric_words_triple(str1):\n    '''\n    Write a function to return the count of non-alphanumeric words from a given string.\n    '''\n    return len(re.findall(r'\\b([a-z]{4,})\\b', str1))\ndef count_non_alphanumeric_characters(str1):\n    '''\n    Write a function to return the count of non-alphanumeric characters from a given string.\n    '''\n    return len(re.findall(r'[a-zA-Z]+', str1))\ndef count_non_alphanumeric_characters_pair(str1):\n    '''\n    Write a function to return the count of non-alphanumeric characters from a given string.\n    '''\n    return len(re.findall(r'[a-zA-Z]+', str1))\ndef count_non_alphanumeric_characters_triple(str1):\n    '''\n    Write a function to return the count of non-alphanumeric characters from a given string.\n    '''\n    return len(re.findall(r'[a-zA-Z]+', str1))\ndef count_uppercase_words(str1):\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    x=[]\n    for i in str1:\n        if i.islower():\n            x.append(i)\n    x=''.join(x)\n    return x\n",
        "num_ids": 44
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('\\b[a-z]{1,}\\b', '', str1)\n",
        "num_ids": 27
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    string = str1.split(\" \")\n    result = []\n    for i in string:\n        if i[0].isupper():\n            result.append(i)\n    return \" \".join(result)\n",
        "num_ids": 52
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]*','',str1)\n    \n",
        "num_ids": 24
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub('[a-z]+', '', str1)\n    return str1\n",
        "num_ids": 27
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]', '', str1)\n",
        "num_ids": 22
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = abs(n)\n    return n//10\n",
        "num_ids": 16
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n/10\n",
        "num_ids": 8
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n > 9 :\n        n = n / 10\n    return n\n",
        "num_ids": 20
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n >= 10 :\n        n = n / 10\n    return int(n)\n",
        "num_ids": 23
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(n/10)\n",
        "num_ids": 11
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    return int(n/10)\n",
        "num_ids": 22
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 0 :\n        n = n*-1\n    num = n%10\n    return num\n",
        "num_ids": 28
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    i = n\n    while i > 0 :\n        if (i % 10) == 1 :\n            return 1\n        i = i / 10\n    return 0\n",
        "num_ids": 42
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    return n//10 % 10\n",
        "num_ids": 12
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    #Reference : https://www.geeksforgeeks.org/python-program-to-check-first-digit-of-a-number/\n    return n // 10 ** 0 % 10\n",
        "num_ids": 46
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    ret = []\n    for e in list:\n        if e%2 == 1:\n            ret.append(e)\n    return ret\n",
        "num_ids": 35
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x%2!=0]\n",
        "num_ids": 19
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x%2!= 0]\n",
        "num_ids": 19
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    \n    odds = []\n    for item in list:\n        if item % 2!= 0:\n            odds.append(item)\n    return odds\n    \nprint(Split([0,1,2,3,4,5]))\nprint(Split([0,2,4,6,8,10]))\nprint(Split([1,2,3,4,5,6]))\nprint(Split([7,8,9,10,11,12]))\nprint(Split([13,14,15,16,17,18]))\nprint(Split([19,20,21,22,23,24]))\n",
        "num_ids": 150
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list1 = []\n    list2 = []\n    for i in range(len(list)):\n        if list[i] % 2 == 1:\n            list1.append(list[i])\n        else:\n            list2.append(list[i])\n    return list1, list2\n",
        "num_ids": 72
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i%2]\n    \nprint Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n",
        "num_ids": 44
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    lst = []\n    for item in list:\n        if item%2!= 0:\n            lst.append(item)\n    return lst\n",
        "num_ids": 39
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for x in list:\n        if (x%2 == 1):\n            odd.append(x)\n    return odd\n    \n    \nprint(Split(range(0,100)))\nprint(Split([0,1,2,3,4,5,6,7,8,9,10]))\n    \n    ",
        "num_ids": 82
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list = [1,3,4,6,5,7,8,9,0,2]\n    list_odd = []\n    list_even = []\n    for item in list:\n        if item % 2 == 0:\n            list_even.append(item)\n        else:\n            list_odd.append(item)\n    return list_odd\n",
        "num_ids": 87
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for item in list:\n        if item % 2!= 0:\n            odd_list.append(item)\n    return odd_list\n",
        "num_ids": 42
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    assert(n>=0 and n<=10000)\n    summation=0\n    for i in range(1,n+1):\n        summation=summation+i**3\n    return summation\n",
        "num_ids": 54
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    total_n = 0\n    total_ncubes = 0\n    for i in range(1,n+1) :\n        total_n += i\n        total_ncubes += i**3\n",
        "num_ids": 48
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # sum of the first n natural numbers\n    sum_of_first_n = 0\n    for i in range(1, n+1) :\n        sum_of_first_n += i\n    # sum of the first n natural numbers \n    sum_of_cubes_of_first_n = 0\n    for i in range(1, n+1) :\n        sum_of_cubes_of_first_n += i ** 3\n    # print(\"Sum of first {} natural numbers is : {}\".format(n, sum_of_first_n))\n    # print(\"Sum of cubes of first {} natural numbers is : {}\".format(n, sum_of_cubes_of_first_n))\n    print(\"The difference between the sum of cubes of the first {} natural numbers and the sum of the first {} natural numbers is {}\".format(n, n, sum_of_cubes_of_first_n - sum_of_first_n))\n",
        "num_ids": 224
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum([i**3 for i in range(1, n+1)]) - sum([i for i in range(1, n+1)])\n",
        "num_ids": 38
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n == 0 :\n        return 0\n    else :\n        return int((n**3 + (n-1)**3) / 2) - int((n**3 + (n-1)**3) / 2)\n",
        "num_ids": 55
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return int(((n*(n+1)*(2*n+1))/6)**0.5) - n\n",
        "num_ids": 32
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    s = n * (n + 1) * (2 * n + 1) / 6\n    t = n * (n + 1) / 2\n    return s - t\n    \n",
        "num_ids": 44
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum([i**3 for i in range(1,n+1)]) - sum([i for i in range(1,n+1)])\n",
        "num_ids": 38
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    t = 0\n    for i in range(1, n+1) :\n        t += i**3\n    return t\n    \ndef recursive(n) :\n    '''\n    Write a python function to find the factorial of n.\n    '''\n    if n == 0 :\n        return 1\n    return n*recursive(n-1)\n",
        "num_ids": 25
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1) :\n        sum=sum+i**3\n    sum_cubes=0\n    for i in range(1,n+1) :\n        sum_cubes=sum_cubes+i\n    return sum-sum_cubes\n",
        "num_ids": 74
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    A.sort()\n    xor = 0\n    count = 0\n    for i in range(N) : \n        for j in range(i+1,N) : \n            xor = A[i] ^ A[j]\n            if xor%2==1 : \n                count = count + 1\n    return count\n",
        "num_ids": 81
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    XOR = 0\n    count = 0\n    for i in range(0,N):\n        for j in range(i+1,N):\n            XOR = A[i] ^ A[j]\n            if XOR%2!= 0:\n                count += 1\n    return count\n",
        "num_ids": 71
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if A[i]^A[j]&1 :\n                print '\\nPairs with odd xor value :'\n                print i,j\n                break\n",
        "num_ids": 65
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] & 1 == 1:\n                count += 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    result = 0\n    for i in range(0,N-1) : \n        for j in range(i+1,N) : \n            if (A[i] ^ A[j]) & 1 : \n                result += 1\n    return result\n",
        "num_ids": 63
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if A == None or N == None :\n        print('Invalid Input')\n        return\n    A.sort()\n    count = 0\n    for i in range(0,N-1) :\n        if (A[i]^A[i+1])%2 == 1 :\n            count +=1\n    print(count)\n",
        "num_ids": 79
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    Pairs = 0\n    for i in range(N) : \n        if ((A[i]^A[i+1])&1)!= 0 :\n            Pairs += 1\n    return Pairs\n",
        "num_ids": 51
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) :\n        for j in range(i+1,N) :\n            if (A[i] ^ A[j]) % 2 == 1 :\n                count += 1\n    return count\n",
        "num_ids": 60
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # Base case\n    if N==1:\n        return 1\n    # Sort the list\n    A.sort()\n    n=len(A)\n    # Initialize the count and index for A\n    count = 0\n    index = 0\n    # Traverse the list\n    while index < n:\n        # Check if A[index]^A[index-1] is odd\n        if (A[index]^A[index-1])%2==1:\n            # Increment the count\n            count += (n-index)\n            # Increment the index\n            index += 2\n        else:\n            # Move to the next index\n            index += 1\n    # Return the count\n    return count\n",
        "num_ids": 166
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) : \n        for j in range(i+1,N) : \n            if (A[i] ^ A[j]) & 1 : \n                count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        new_string += char.swapcase()\n    return new_string\n",
        "num_ids": 34
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(map(lambda x: x.swapcase(), list(string)))\n",
        "num_ids": 24
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([str(c).swapcase() for c in string])\n",
        "num_ids": 22
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string\n",
        "num_ids": 54
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string == '':\n        return string\n",
        "num_ids": 13
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(x.swapcase() for x in string)\n",
        "num_ids": 20
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = string.lower()\n    string = string.upper()\n    return string\n",
        "num_ids": 22
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if len(str(n1))!= len(str(n2)):\n        raise ValueError(\"The two numbers should have the same length\")\n    else:\n        count = 0\n        for i in range(len(str(n1))):\n            count += abs(int(str(n1)[i]) - int(str(n2)[i]))\n    return count\n",
        "num_ids": 91
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if len(str(n1))!= len(str(n2)):\n        raise ValueError('n1 and n2 must be of the same length')\n    distance = 0\n    for i in range(len(str(n1))):\n        x = int(str(n1)[i])\n        y = int(str(n2)[i])\n        distance += abs(x - y)\n    return distance\n",
        "num_ids": 100
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(ord(a) - ord(b)) for a, b in zip(str(n1), str(n2))])\n",
        "num_ids": 36
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(int(n1)%10-int(n2)%10) for n1 in str(n1) for n2 in str(n2)])\n",
        "num_ids": 44
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    difference = abs(n1 - n2)\n    if difference == 0:\n        return 0\n    else:\n        return sum([difference % 10])\n",
        "num_ids": 40
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum( [int(i1)!= int(i2) for i1,i2 in zip(str(n1), str(n2))] )\n",
        "num_ids": 40
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = n1%10\n    d2 = n2%10\n    return abs(d1 - d2)\n",
        "num_ids": 31
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([1 for i,j in zip(str(n1), str(n2)) if i!=j])\n",
        "num_ids": 31
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_str = str(n1)\n    n2_str = str(n2)\n    sum_diff = 0\n    for i in range(len(n1_str)):\n        sum_diff += abs(int(n1_str[i])-int(n2_str[i]))\n    return sum_diff\n    \ndef run_tests():\n    # Test cases\n    assert 1 == digit_distance_nums(1, 2)\n    assert 3 == digit_distance_nums(12, 10)\n    assert 1 == digit_distance_nums(21, 22)\n    assert 3 == digit_distance_nums(9, 11)\n    assert -3 == digit_distance_nums(12, 32)\n    assert 1 == digit_distance_nums(1, 1)\n    assert 0 == digit_distance_nums(0, 0)\n    assert 0 == digit_distance_nums(1, 0)\n    assert 0 == digit_distance_nums(0, 1)\n    assert 1 == digit_distance_nums(11, 11)\n    assert 1 == digit_distance_nums(1111111, 9999999)\n    assert 0 == digit_distance_nums(1, 2)\n    assert 1 == digit_distance_nums(1, 1)\n    assert 0 == digit_distance_nums(0, 0)\n    assert 1 == digit_distance_nums(1, 0)\n    assert 0 == digit_distance_nums(0, 1)\n    assert 1 == digit_distance_nums(11, 11)\n    assert 1 == digit_distance_nums(1111111, 9999999)\n    assert 0 == digit_distance_nums(1, 2)\n    assert 1 == digit_distance_nums(1, 1)\n    assert 0 == digit_distance_nums(0, 0)\n    assert 1 == digit_distance_nums(1, 0)\n    assert 0 == digit_distance_nums(0, 1)\n    assert 1 == digit_distance_nums(11, 11)\n    assert 1 == digit_distance_nums(1111111, 9999999)\n    assert 0 == digit_distance_nums(1, 2)\n    assert 1 == digit_distance_nums(1, 1)\n    assert 0 == digit_distance_nums(0, 0)\n    assert 1 == digit_distance_nums(1, 0)\n    assert 0 == digit_distance_nums(0, 1)\n    assert 1 == digit_distance_nums(11, 11)\n    assert 1 == digit_distance_nums(1111111, 9999998)\n    assert 0 == digit_distance_nums(1, 2)\n    assert 1 == digit_distance_nums(1, 1)\n    assert 0 == digit_distance_nums(0, 0)\n    assert 1 == digit_distance_nums(1, 0)\n    assert 0 == digit_distance_nums(0, 1)\n    assert 1 == digit_distance_nums(11, 11)\n    assert 1 == digit_distance_nums(1111111, 999999)\n    assert 0 == digit_distance_nums(1, 2)\n    assert 1 == digit_distance_nums(1, 1)\n    assert 0 == digit_distance_nums(0, 0)\n    assert 1 == digit_distance_nums(1, 0)\n    assert 0 == digit_distance_nums(0, 1)\n    assert 1 == digit_distance_nums(11, 11)\n    assert 1 == digit_distance_nums(1111111, 9999999)\n    assert 0 == digit_distance_nums(1, 2)\n    assert 1 == digit_distance_nums(1, 1)\n    assert 0 == digit_distance_nums(0, 0)\n    assert 1 == digit_distance_nums(1, 0)\n    assert 0 == digit_distance_nums(0, 1)\n    assert 1 == digit_distance_nums(11, 11)\n    assert 1 == digit_distance_nums(1111111, 999999)\n    assert 0 == digit_distance_nums(1, 2)\n    assert 1 == digit_distance_nums(1, 1)\n    assert 0 == digit_distance_nums(0, 0)\n    assert 1 == digit_distance_nums(1, 0)\n    assert 0 == digit_distance_nums(0, 1)\n    assert 1 == digit_distance_nums(11, 11)\n    assert 1 == digit_distance_nums(1111111, 999999)\n    assert 0 == digit_distance_nums(1, 2)\n    assert 1 == digit_distance_nums(1, 1)\n    assert 0 == digit_distance_nums(0, 0)\n    assert 1 == digit_distance_nums(1, 0)\n    assert 0 == digit_distance_nums(0, 1)\n    assert 1 == digit_distance_nums(11, 11)\n    assert 1 == digit_distance_nums(1111111, 999999)\n    assert 0 == digit_distance_nums(1, 2)\n    assert 1 == digit_distance_nums(1, 1)\n    assert 0 == digit_distance_nums(0, 0)\n    assert 1 == digit_distance_nums(1, 0)\n    assert 0 == digit_distance_nums(0, 1)\n    assert 1 == digit_distance_nums(11, 11)\n    assert 1 == digit_distance_nums(1111111, 999999)\n    assert 0 == digit_distance_nums(1, 2)\n    assert 1 == digit_distance_nums(1, 1)\n    assert 0 == digit_distance_nums(0, 0)\n    assert 1 == digit_distance_nums(1, 0)\n    assert 0 == digit_distance_nums(0, 1)\n    assert 1 == digit_distance_nums(11, 11)\n    assert 1 == digit_distance_nums(1111111, 999999)\n    assert 0 == digit_distance_nums(1, 2)\n    assert 1 == digit_distance_nums(1, 1)\n    assert 0 == digit_distance_nums(0, 0)\n    assert 1 == digit_distance_nums(1, 0)\n    assert 0 == digit_distance_nums(0, 1)\n    assert 1 == digit_distance_nums(11, 11)\n    assert 1 == digit_distance_nums(1111111, 999999)\n    assert 0 == digit_distance_nums(1, 2)\n    assert 1 == digit_distance_nums(1, 1)\n    assert 0 == digit_distance_nums(0, 0)\n    assert 1 == digit_distance_nums(1, 0)\n    assert 0 == digit_distance_nums(0, 1)\n    assert 1 == digit_distance_nums(11, 11)\n    assert 1 == digit_distance_nums(1111111, 999999)\n    assert 0 == digit_distance_nums(1, 2)\n    assert 1 == digit_distance_nums(1, 1)\n    assert 0 == digit_distance_nums(0, 0)\n    assert 1 == digit_distance_nums(1, 0)\n    assert 0 == digit_distance_nums(0, 1)\n    assert 1 == digit_distance_nums(11, 11)\n    assert 1 == digit_distance_nums(1111111, 999999)\n    assert 0 == digit_distance_nums(1, 2)\n    assert 1 == digit_distance_nums(1, 1)\n    assert 0 == digit_distance_nums(0, 0)\n    assert 1 == digit_distance_nums(1, 0)\n    assert 0 == digit_distance_nums(0, 1)\n    assert 1 == digit_distance_nums(11, 11)\n    assert 1 == digit_distance_nums(1111111, 999999)\n    assert 0 == digit_distance_nums(1, 2)\n    assert 1 == digit_distance_nums(1, 1)\n    assert 0 == digit_distance_nums(0, 0)\n    assert 1 == digit_distance_nums(1, 0)\n    assert 0 == digit_distance_nums(0, 1)\n    assert 1 == digit_distance_nums(11, 11)\n    assert 1 == digit_distance_nums(1111111, 999999)\n    assert 0 == digit_distance_nums(1, 2)\n    asser",
        "num_ids": 2007
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 < n2:\n        n1, n2 = n2, n1\n    n1 = str(n1)\n    n2 = str(n2)\n    n1_digits = [int(n) for n in n1]\n    n2_digits = [int(n) for n in n2]\n    sum_of_differences = 0\n    for i in range(len(n1)):\n        sum_of_differences += abs(n1_digits[i] - n2_digits[i])\n    return sum_of_differences\n",
        "num_ids": 142
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    else:\n        return max(a[size - 1] + max_sub_array_sum(a, size - 2), max_sub_array_sum(a, size - 1))\n",
        "num_ids": 57
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    for i in range(size):\n        max_sum = max(max_sum, sum(a[i]))\n    return max_sum\n",
        "num_ids": 43
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = -999\n    max_ending_here = 0\n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        elif (max_so_far < max_ending_here):\n            max_so_far = max_ending_here\n    return max_so_far\n",
        "num_ids": 108
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n",
        "num_ids": 16
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    # Solution 1\n    # Find the maximum subarray sum\n    max_sum = -inf\n    for i in range(size):\n        if max_sum < a[i]:\n            max_sum = a[i]\n",
        "num_ids": 56
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    curr_max = a[0]\n    for i in range(1, size):\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n",
        "num_ids": 79
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = -1\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\n",
        "num_ids": 104
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if not a:\n        return 0\n    max_ending_here = a[0]\n    max_so_far = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_ending_here, max_so_far)\n    return max_so_far\n",
        "num_ids": 101
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_ending_here = 0\n    max_so_far = 0\n    for i in range(size):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    return max_so_far\n",
        "num_ids": 103
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    current_sum = a[0]\n    max_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n",
        "num_ids": 90
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = []\n    for element in test_tup1:\n        if element not in union:\n            union.append(element)\n    for element in test_tup2:\n        if element not in union:\n            union.append(element)\n    return sorted(union)\n",
        "num_ids": 68
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n",
        "num_ids": 28
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Hint: use '|' as the operator to combine two tuples.\n    return sorted(test_tup1 | test_tup2)\n",
        "num_ids": 38
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(list(set(test_tup1 + test_tup2)))\n",
        "num_ids": 23
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    \n    return sorted(set(test_tup1).union(set(test_tup2)))\n    \n",
        "num_ids": 29
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n    for i in range(0, len(test_tup1)):\n        if i == 0 and i < len(test_tup1) and i < len(test_tup2):\n            if test_tup1[i] < test_tup2[i]:\n                union_list = [test_tup1[i], test_tup2[i]]\n            else:\n                union_list = [test_tup2[i], test_tup1[i]]\n        elif i >= len(test_tup1) and i < len(test_tup2):\n            union_list.append(test_tup2[i])\n        elif i >= len(test_tup2) and i < len(test_tup1):\n            union_list.append(test_tup1[i])\n    return union_list\n",
        "num_ids": 238
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    new_set = set(test_tup1)\n    new_set.update(test_tup2)\n    output_list = list(new_set)\n    output_list.sort()\n    return tuple(output_list)\n",
        "num_ids": 59
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(list(set(test_tup1) | set(test_tup2)))\n",
        "num_ids": 26
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) == 0:\n        return test_tup2\n    elif len(test_tup2) == 0:\n        return test_tup1\n    else:\n        if test_tup1[0] < test_tup2[0]:\n            return [test_tup1[0]] + union_elements(test_tup1[1:], test_tup2)\n        else:\n            return [test_tup2[0]] + union_elements(test_tup1, test_tup2[1:])\n",
        "num_ids": 141
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    print (\"Unsorted union elements : \")\n    test_tup3 = list(test_tup1) + list(test_tup2)\n    print (sorted(list(set(test_tup3))))\n",
        "num_ids": 56
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxlen = 1\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > maxlen:\n                maxlen = len(lst[i:j+1])\n    return maxlen\n",
        "num_ids": 75
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length = len(lst)  \n    max_length = 1  \n    index = 0  \n    while(index < length):  \n        count = 1  \n        i = index  \n        while(i < length):  \n            if(lst[i] == lst[index]):  \n                count += 1  \n                i += 1  \n            else:  \n                break  \n        if(count > max_length):  \n            max_length = count  \n        index = i  \n    return max_length  \n",
        "num_ids": 126
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length=0\n    for i in range(len(lst)):\n        for j in range(i,len(lst)):\n            if lst[i]==lst[j]:\n                length=length+1\n    return length\n    \n    \n    \ndef max_sublist(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length=0\n    for i in range(len(lst)):\n        for j in range(i,len(lst)):\n            if lst[i]==lst[j]:\n                length=length+1\n    return length\n    \ndef Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length=0\n    for i in range(len(lst)):\n        for j in range(i,len(lst)):\n            if lst[i]==lst[j]:\n                length=length+1\n    return length\n",
        "num_ids": 60
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    #max_len = 0\n    #for i in range(len(lst)):\n    #    len_lst = 0\n    #    for j in range(i, len(lst)):\n    #        len_lst += 1\n    #        if len_lst > max_len:\n    #            max_len = len_lst\n    #return max_len\n    #return len(max(lst, key=len))\n    len_lst = 0\n    for i in lst:\n        len_lst = max(len_lst, len(i))\n    return len_lst\n",
        "num_ids": 150
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    result = 0\n    for ele in lst:\n        if len(ele) > result:\n            result = len(ele)\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i)>max_len:\n            max_len = len(i)\n    return max_len\n",
        "num_ids": 45
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0 \n    for i in range(len(lst)):\n        curr_length = 1\n        for j in range(i+1, len(lst)):\n            if lst[j] == lst[i]:\n                curr_length += 1\n            else:\n                break\n        if curr_length > max_length:\n            max_length = curr_length\n    return max_length\n",
        "num_ids": 105
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max(map(len, lst))\n    \ndef Find_Max_Length_2(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(i) for i in lst])\n    \ndef Find_Max_Length_3(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(i) for i in lst])\n    \ndef Find_Max_Length_4(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(i) for i in lst])\n    \ndef Find_Max_Length_5(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(i) for i in lst])\n    \ndef Find_Max_Length_6(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(i) for i in lst])\n    \ndef Find_Max_Length_7(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(i) for i in lst])\n    \ndef Find_Max_Length_8(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(i) for i in lst])\n    \ndef Find_Max_Length_9(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(i) for i in lst])\n    \ndef Find_Max_Length_10(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(i) for i in lst])\n    \ndef Find_Max_Length_11(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(i) for i in lst])\n    \ndef Find_Max_Length_12(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(i) for i in lst])\n    \ndef Find_Max_Length_13(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(i) for i in lst])\n    \ndef Find_Max_Length_14(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(i) for i in lst])\n    \ndef Find_Max_Length_15(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(i) for i in lst])\n    \ndef Find_Max_Length_16(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(i) for i in lst])\n    \ndef Find_Max_Length_17(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(i) for i in lst])\n    \ndef Find_Max_Length_18(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(i) for i in lst])\n    \ndef Find_Max_Length_19(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(i) for i in lst])\n    \ndef Find_Max_Length_20(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(i) for i in lst])\n    \ndef Find_Max_Length_21(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(i) for i in lst])\n    \ndef Find_Max_Length_22(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(i) for i in lst])\n    \ndef Find_Max_Length_23(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(i) for i in lst])\n    \ndef Find_Max_Length_24(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(i) for i in lst])\n    \ndef Find_Max_Length_25(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(i) for i in lst])\n    \ndef Find_Max_Length_26(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(i) for i in lst])\n    \ndef Find_Max_Length_27(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(i) for i in lst])\n    \ndef Find_Max_Length_28(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(i) for i in lst])\n    \ndef Find_Max_Length_29(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(i) for i in lst])\n    \ndef Find_Max_Length_30(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(i) for i in lst])\n    \ndef Find_Max_Length_31(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(i) for i in lst])\n    \ndef Find_Max_Length_32(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(i) for i in lst])\n    \ndef Find_Max_Length_33(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(i) for i in lst])\n    \ndef Find_Max_Length_34(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(i) for i in lst])\n    \ndef Find_Max_Length_35(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(i) for i in lst])\n    \ndef Find_Max_Length_36(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(i) for i in lst])\n    \ndef Find_Max_Length_37(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(i) for i in lst])\n    \ndef Find_Max_Length_38(lst):  \n    '''",
        "num_ids": 1
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n=len(lst)\n    count=0\n    max_count=0\n    for i in range(n):\n        for j in range(i,n):\n            count=0\n            for k in lst[i:j+1]:\n                if k>0:\n                    count+=1\n                else:\n                    break\n            if count>max_count:\n                max_count=count\n    return max_count\n",
        "num_ids": 103
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        count = max(count,len(lst[i]))\n    print(count)\nFind_Max_Length([[1,2,3,4], [5,6], [7,8,9]])\nFind_Max_Length([[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15], [16,17,18,19]]",
        "num_ids": 119
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    quoted = re.findall('\\\"(.*)\\\"',text)\n    print quoted\n    \nextract_values(\"hello \\\"world\\\"\")\nextract_values(\"\\\"hello\\\\n\\\"\")\nextract_values(\"'hello\\\\n'\")\nextract_values(\"'hello\\' world'\")\n",
        "num_ids": 73
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if not text:\n        return ''\n    #print(text)\n    text = text.replace('\\r', '')\n    text = text.replace('\\n', '')\n    #print(text)\n    pattern = re.compile('\"(.+)\"')\n    result = pattern.findall(text)\n    #print(result)\n    if result:\n        return result[0]\n    return ''\ndef extract_values_1(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if not text:\n        return ''\n    #print(text)\n    text = text.replace('\\r', '')\n    text = text.replace('\\n', '')\n    #print(text)\n    pattern = re.compile('\"(.*)\"')\n    result = pattern.findall(text)\n    #print(result)\n    if result:\n        return result[0]\n    return ''\ndef extract_values_2(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if not text:\n        return ''\n    #print(text)\n    text = text.replace('\\r', '')\n    text = text.replace('\\n', '')\n    #print(text)\n    pattern = re.compile(r'\"(.*?)\"')\n    result = pattern.findall(text)\n    #print(result)\n    if result:\n        return result[0]\n    return ''\ndef extract_values_3(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if not text:\n        return ''\n    #print(text)\n    text = text.replace('\\r', '')\n    text = text.replace('\\n', '')\n    #print(text)\n    pattern = re.compile(r'\"(.*?)\"')\n    result = pattern.findall(text)\n    #print(result)\n    if result:\n        return result[0]\n    return ''\ndef extract_values_4(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if not text:\n        return ''\n    #print(text)\n    text = text.replace('\\r', '')\n    text = text.replace('\\n', '')\n    #print(text)\n    pattern = re.compile(r'\"(.*?)\"')\n    result = pattern.findall(text)\n    #print(result)\n    if result:\n        return result[0]\n    return ''\ndef extract_values_5(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if not text:\n        return ''\n    #print(text)\n    text = text.replace('\\r', '')\n    text = text.replace('\\n', '')\n    #print(text)\n    pattern = re.compile(r'\"(.*?)\"')\n    result = pattern.findall(text)\n    #print(result)\n    if result:\n        return result[0]\n    return ''\ndef extract_values_6(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if not text:\n        return ''\n    #print(text)\n    text = text.replace('\\r', '')\n    text = text.replace('\\n', '')\n    #print(text)\n    pattern = re.compile(r'\"(.*?)\"')\n    result = pattern.findall(text)\n    #print(result)\n    if result:\n        return result[0]\n    return ''\ndef extract_values_7(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if not text:\n        return ''\n    #print(text)\n    text = text.replace('\\r', '')\n    text = text.replace('\\n', '')\n    #print(text)\n    pattern = re.compile(r'\"(.*?)\"')\n    result = pattern.findall(text)\n    #print(result)\n    if result:\n        return result[0]\n    return ''\ndef extract_values_8(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if not text:\n        return ''\n    #print(text)\n    text = text.replace('\\r', '')\n    text = text.replace('\\n', '')\n    #print(text)\n    pattern = re.compile(r'\"(.*?)\"')\n    result = pattern.findall(text)\n    #print(result)\n    if result:\n        return result[0]\n    return ''\ndef extract_values_9(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if not text:\n        return ''\n    #print(text)\n    text = text.replace('\\r', '')\n    text = text.replace('\\n', '')\n    #print(text)\n    pattern = re.compile(r'\"(.*?)\"')\n    result = pattern.findall(text)\n    #print(result)\n    if result:\n        return result[0]\n    return ''\ndef extract_values_10(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if not text:\n        return ''\n    #print(text)\n    text = text.replace('\\r', '')\n    text = text.replace('\\n', '')\n    #print(text)\n    pattern = re.compile(r'\"(.*?)\"')\n    result = pattern.findall(text)\n    #print(result)\n    if result:\n        return result[0]\n    return ''\ndef extract_values_11(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if not text:\n        return ''\n    #print(text)\n    text = text.replace('\\r', '')\n    text = text.replace('\\n', '')\n    #print(text)\n    pattern = re.compile(r'\"(.*?)\"')\n    result = pattern.findall(text)\n    #print(result)\n    if result:\n        return result[0]\n    return ''\ndef extract_values_12(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if not text:\n        return ''\n    #print(text)\n    text = text.replace('\\r', '')\n    text = text.replace('\\n', '')\n    #print(text)\n    pattern = re.compile(r'\"(.*?)\"')\n    result = pattern.findall(text)\n    #print(result)\n    if result:\n        return result[0]\n    return ''\ndef extract_values_13(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if not text:\n        return ''\n    #print(text)\n    text = text.replace('\\r', '')\n    text = text.replace('\\n', '')\n    #print(text)\n    pattern = re.compile(r'\"(.*?)\"')\n    result = pattern.findall(text)\n    #print(result)\n    if result:\n        return result[0]\n    return ''\ndef extract_values_14(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if not text:\n        return ''\n    #print(text)\n    text = text.replace('\\r', '')\n    text = text.replace('\\n', '')\n    #print(text)\n    pattern = re.compile(r'\"(.*?)\"')\n    result = pattern.findall(text)\n    #print(result)\n    if result:\n        return result[0]\n    return ''\ndef extract_values_15(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if not text:\n        return ''\n    #print(text)\n    text = text.replace(",
        "num_ids": 26
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    p = re.compile(r'\\\"(.+?)\\\"')\n    m = p.findall(text)\n    return m\n",
        "num_ids": 35
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #The following regex pattern is similar to the previous one\n    result = re.findall(r'\\\"(.*?)\\\"', text)\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\\\"(.+?)\\\"')\n    result = pattern.findall(text)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #Write your code here\n    if text[0] == '\"' and text[-1] == '\"':\n        return [text[1:-1]]\n    else:\n        return re.findall(r'[\\w\\d\\_\\-\\.\\:\\;\\,\\s]+', text)\n",
        "num_ids": 73
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # your code goes here\n    if text == None:\n        return []\n    else:\n        return re.findall(r'[^\\\"]*\\\"[^\\\"]*\\\"',text)\n",
        "num_ids": 49
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    l = []\n    m = re.findall(r'\\\"(.*?)\\\"',text)\n    for i in m:\n        l.append(i)\n    return l\ndef file_to_dictionary(filename):\n    '''\n    Given a filename, open the file and return a dictionary representing the contents of the file.\n    '''\n    # open the file in read mode\n    dictionary = {}\n    f = open(filename,\"r\")\n    # read the contents of the file\n    dictionary = f.read()\n    # close the file\n    f.close()\n    return dictionary\ndef has_duplicates(seq):\n    '''\n    Write a function that returns True if a sequence contains any duplicates (not just consecutive duplicates).\n    '''\n    #dict() creates a dictionary from the given sequence\n    return len(seq)!= len(set(seq))\ndef is_anagram(word1,word2):\n    '''\n    Write a function to check if two words are anagrams of each other.\n    '''\n    return sorted(word1)==sorted(word2)\ndef strip_punctuation(s):\n    '''\n    Write a function that takes in a string of arbitrary punctuation and returns a string with all punctuation removed.\n    '''\n    s = s.lower()\n    l = re.findall(r\"[\\w']+\",s)\n    return ''.join(l)\ndef strip_punctuation_2(s):\n    '''\n    Write a function that takes in a string of arbitrary punctuation and returns a string with all punctuation removed.\n    '''\n    s = s.lower()\n    s = re.sub(r'[^\\w\\s]','',s)\n    return s\ndef replace_char(s, old, new):\n    '''\n    Write a function that takes in a string and replaces any instance of one character c with another character new.\n    '''\n    s = s.replace(old,new)\n    return s\ndef replace_char_2(s, old, new):\n    '''\n    Write a function that takes in a string and replaces any instance of one character c with another character new.\n    '''\n    return s.replace(old,new)\ndef reverse_string(s):\n    '''\n    Write a function that takes in a string and returns a string with all the letters in the string reversed.\n    '''\n    s = s[::-1]\n    return s\ndef is_palindrome(s):\n    '''\n    Write a function that takes in a string and returns True if it is a palindrome (reads the same forwards as backwards), False otherwise.\n    '''\n    return s == reverse_string(s)\ndef is_palindrome_2(s):\n    '''\n    Write a function that takes in a string and returns True if it is a palindrome (reads the same forwards as backwards), False otherwise.\n    '''\n    return s == s[::-1]\ndef is_palindrome_3(s):\n    '''\n    Write a function that takes in a string and returns True if it is a palindrome (reads the same forwards as backwards), False otherwise.\n    '''\n    if len(s) <= 1:\n        return True\n    elif s[0]!= s[-1]:\n        return False\n    else:\n        return is_palindrome_3(s[1:-1])\ndef is_palindrome_4(s):\n    '''\n    Write a function that takes in a string and returns True if it is a palindrome (reads the same forwards as backwards), False otherwise.\n    '''\n    # s is a string\n    # return s == s[::-1]\n    return s == s[::-1]\ndef remove_spaces(s):\n    '''\n    Write a function that takes in a string and returns a string with all spaces removed.\n    '''\n    return s.replace(\" \",\"\")\ndef is_pangram(s):\n    '''\n    Write a function that takes in a string and returns True if it is a pangram, False otherwise.\n    '''\n    return set(s)>=set('abcdefghijklmnopqrstuvwxyz')\ndef is_pangram_2(s):\n    '''\n    Write a function that takes in a string and returns True if it is a pangram, False otherwise.\n    '''\n    return set(s)>=set('abcdefghijklmnopqrstuvwxyz')\ndef is_pangram_3(s):\n    '''\n    Write a function that takes in a string and returns True if it is a pangram, False otherwise.\n    '''\n    return set(s)>=set('abcdefghijklmnopqrstuvwxyz')\ndef is_pangram_4(s):\n    '''\n    Write a function that takes in a string and returns True if it is a pangram, False otherwise.\n    '''\n    return set(s)>=set('abcdefghijklmnopqrstuvwxyz')\ndef is_pangram_5(s):\n    '''\n    Write a function that takes in a string and returns True if it is a pangram, False otherwise.\n    '''\n    return set(s)>=set('abcdefghijklmnopqrstuvwxyz')\ndef is_pangram_6(s):\n    '''\n    Write a function that takes in a string and returns True if it is a pangram, False otherwise.\n    '''\n    return set(s)>=set('abcdefghijklmnopqrstuvwxyz')\ndef is_pangram_7(s):\n    '''\n    Write a function that takes in a string and returns True if it is a pangram, False otherwise.\n    '''\n    return set(s)>=set('abcdefghijklmnopqrstuvwxyz')\ndef is_pangram_8(s):\n    '''\n    Write a function that takes in a string and returns True if it is a pangram, False otherwise.\n    '''\n    return set(s)>=set('abcdefghijklmnopqrstuvwxyz')\ndef is_pangram_9(s):\n    '''\n    Write a function that takes in a string and returns True if it is a pangram, False otherwise.\n    '''\n    return set(s)>=set('abcdefghijklmnopqrstuvwxyz')\ndef is_pangram_10(s):\n    '''\n    Write a function that takes in a string and returns True if it is a pangram, False otherwise.\n    '''\n    return set(s)>=set('abcdefghijklmnopqrstuvwxyz')\ndef is_pangram_11(s):\n    '''\n    Write a function that takes in a string and returns True if it is a pangram, False otherwise.\n    '''\n    return set(s)>=set('abcdefghijklmnopqrstuvwxyz')\ndef is_pangram_12(s):\n    '''\n    Write a function that takes in a string and returns True if it is a pangram, False otherwise.\n    '''\n    return set(s)>=set('abcdefghijklmnopqrstuvwxyz')\ndef is_pangram_13(s):\n    '''\n    Write a function that takes in a string and returns True if it is a pangram, False otherwise.\n    '''\n    return set(s)>=set('abcdefghijklmnopqrstuvwxyz')\ndef is_pangram_14(s):\n    '''\n    Write a function that takes in a string and returns True if it is a pangram, False otherwise.\n    '''\n    return set(s)>=set('abcdefghijklmnopqrstuvwxyz')\ndef is_pangram_15(s):\n    '''\n    Write a function that takes in a string and returns True if it is a pangram, False otherwise.\n    '''\n    return set(s)>=set('abcdefghijklmnopqrstuvwxyz')\ndef is_pangram_16(s):\n    '''\n    Write a function that takes in a string and returns True if i",
        "num_ids": 16
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\\\"(.*?)\\\"')\n    matches = pattern.findall(text)\n    values = []\n    for match in matches:\n        values.append(match)\n    return values\n",
        "num_ids": 55
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pairs = []\n    pos = text.find('\\\"')\n    while pos!= -1:\n        pairs.append(text[pos+1:text.find('\\\"',pos+1)])\n        pos = text.find('\\\"',pos+1)\n    return pairs\n",
        "num_ids": 69
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr.sort()\n    for i in range(n-1):\n        if arr[i]!= arr[i+1]:\n            print arr[i],arr[i+1]\n            return i+1\n    print 'Pairs of unequal elements not possible'\n    return 0\n",
        "num_ids": 69
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    return len([x for x in arr if x!= arr[x]])//2\n",
        "num_ids": 23
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                pairs+=1\n    return pairs\n    ",
        "num_ids": 56
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0 \n    for i in range(0,n): \n        for j in range(i+1,n): \n            if arr[i] == arr[j]: \n                count += 1 \n    return count \n",
        "num_ids": 58
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in xrange(n):\n        for j in xrange(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                pairs += 1\n    return pairs\n    \n    \ndef count_Pairs2(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are equal.\n    '''\n    pairs = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                pairs += 1\n    return pairs\n",
        "num_ids": 52
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count = count + 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if n == 2:\n        return arr.count(1)\n    if n == 1:\n        return (n*(n-1))/2\n    \n    else:\n        arr = list(arr)\n        return arr.count(1) + (n-1) * (count_Pairs(arr, n-1) * n/2)\n",
        "num_ids": 85
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr.sort()\n    i = 0\n    j = 1\n    count = 0\n    while i < n:\n        while j < n:\n            if arr[i]!= arr[j]:\n                count += 1\n            j += 1\n        j = i + 1\n        i += 1\n    return count\n    \n    \n    \ndef find_Pairs(arr,n,k): \n    '''\n    Write a python function which takes a list of integers and finds the number of possible unordered pairs where both elements are not equal.\n    '''\n    arr.sort()\n    i = 0\n    j = 1\n    count = 0\n    while i < n:\n        while j < n:\n            if arr[i] == arr[j]:\n                j += 1\n            else:\n                if arr[i] + k == arr[j]:\n                    count += 1\n                j += 1\n        j = i + 1\n        i += 1\n    return count\n    \n    \n    \ndef counting_sort(arr,n): \n    '''\n    Write a python function which sorts an array using counting sort.\n    '''\n    \n    count = [0] * (max(arr)+1)\n    for i in range(n):\n        count[arr[i]] += 1\n    \n    for i in range(1,len(count)):\n        count[i] += count[i-1]\n    \n    i = n - 1\n    j = n - 1\n    while i >= 0:\n        arr[j] = count[arr[i]] - 1\n        i -= 1\n        j -= 1\n    \n    return arr\n    \n    \n    \ndef radix_sort(arr,n): \n    '''\n    Write a python function which sorts an array using radix sort.\n    '''\n    \n    max_val = max(arr)\n    b = len(str(max_val))\n    \n    for i in range(b):\n        count = [0] * 10\n        for j in range(n):\n            count[arr[j] / (10 ** i) % 10] += 1\n        \n        for j in range(1,10):\n            count[j] += count[j-1]\n            \n        i = n - 1\n        j = n - 1\n        while i >= 0:\n            arr[j] = count[arr[i] / (10 ** i) % 10] - 1\n            i -= 1\n            j -= 1\n            \n    return arr\n    \n    \n    \ndef find_Pairs_2(arr,n,k): \n    '''\n    Write a python function which takes a list of integers and finds the number of possible unordered pairs where both elements are not equal.\n    '''\n    arr.sort()\n    i = 0\n    j = 1\n    count = 0\n    while i < n:\n        while j < n:\n            if arr[i]!= arr[j]:\n                if arr[i] + k == arr[j]:\n                    count += 1\n            j += 1\n        j = i + 1\n        i += 1\n    return count\n    \n    \n    \ndef freq_count(arr,n,k): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are not equal.\n    '''\n    arr.sort()\n    i = 0\n    j = 1\n    count = 0\n    while i < n:\n        while j < n:\n            if arr[i]!= arr[j]:\n                if arr[i] + k == arr[j]:\n                    count += 1\n            j += 1\n        j = i + 1\n        i += 1\n    return count\n    \n    \n    \ndef knapsack(arr,n,k):\n    '''\n    Write a python function which takes a list of integers and finds the sum of the elements which can be selected such that the sum is less than or equal to k.\n    '''\n    arr.sort()\n    arr2 = [0] * (k+1)\n    for i in range(n):\n        for j in range(k,arr[i]-1,-1):\n            arr2[j] = max(arr2[j],arr2[j-arr[i]] + arr[i])\n    return arr2[k]\n    \n    \n    \ndef find_Pairs_3(arr,n,k): \n    '''\n    Write a python function which takes a list of integers and finds the number of possible unordered pairs where both elements are not equal.\n    '''\n    arr.sort()\n    i = 0\n    j = 1\n    count = 0\n    while i < n:\n        while j < n:\n            if arr[i]!= arr[j]:\n                if arr[i] + k == arr[j]:\n                    count += 1\n            j += 1\n        j = i + 1\n        i += 1\n    return count\n    \n    \n    \ndef find_Pairs_4(arr,n,k): \n    '''\n    Write a python function which takes a list of integers and finds the number of possible unordered pairs where both elements are not equal.\n    '''\n    arr.sort()\n    i = 0\n    j = 1\n    count = 0\n    while i < n:\n        while j < n:\n            if arr[i]!= arr[j]:\n                if arr[i] + k == arr[j]:\n                    count += 1\n            j += 1\n        j = i + 1\n        i += 1\n    return count\n    \n    \n    \ndef find_Pairs_5(arr,n,k): \n    '''\n    Write a python function which takes a list of integers and finds the number of possible unordered pairs where both elements are not equal.\n    '''\n    arr.sort()\n    i = 0\n    j = 1\n    count = 0\n    while i < n:\n        while j < n:\n            if arr[i]!= arr[j]:\n                if arr[i] + k == arr[j]:\n                    count += 1\n            j += 1\n        j = i + 1\n        i += 1\n    return count\n    \n    \n    \ndef counting_sort_2(arr,n): \n    '''\n    Write a python function which sorts an array using counting sort.\n    '''\n    \n    count = [0] * (max(arr)+1)\n    for i in range(n):\n        count[arr[i]] += 1\n    \n    for i in range(1,len(count)):\n        count[i] += count[i-1]\n        \n    i = n - 1\n    j = n - 1\n    while i >= 0:\n        arr[j] = count[arr[i]] - 1\n        i -= 1\n        j -= 1\n    \n    return arr\n    \n    \n    \ndef radix_sort_2(arr,n): \n    '''\n    Write a python function which sorts an array using radix sort.\n    '''\n    \n    max_val = max(arr)\n    b = len(str(max_val))\n    \n    for i in range(b):\n        count = [0] * 10\n        for j in range(n):\n            count[arr[j] / (10 ** i) % 10] += 1\n        \n        for j in range(1,10):\n            count[j] += count[j-1]\n            \n        i = n - 1\n        j = n - 1\n        while i >= 0:\n            arr[j] = count[arr[i] / (10 ** i) % 10] - 1\n            i -= 1\n            j -= 1\n            \n    return arr\n    \n    \n    \ndef find_Pairs_6(arr,n,k): \n    '''\n    Write a python function which takes a list of integers and finds the number of possible unordered pairs where both elements are not equal.\n    '''\n    arr.sort()\n    i = 0\n    j = 1\n    count = 0\n    while i < n:\n        while j < n:\n            if arr[i]!= arr[j]:\n                if arr[i] + k == arr[j]:\n                    count += 1\n            j += 1\n        j = i + 1\n        i += 1\n    return count\n    \n    \n    \ndef freq_count_2(arr,n,k): \n    '''\n    Write a python function which takes a list of integers and counts th",
        "num_ids": 16
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    if word == \"\":\n        return []\n    return [char for char in word]\n",
        "num_ids": 23
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "num_ids": 9
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n",
        "num_ids": 13
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n    \ndef alphabet_position(text):\n    '''\n    Write a python function to convert a letter into a number to represent it in an alphabet.\n    '''\n    return ''.join([str(ord(char) - 96) for char in text])\n",
        "num_ids": 23
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n    \ndef isPal(word): \n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef isPalindrome(s):\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    if len(s) == 0:\n        return True\n    if len(s) == 1:\n        return True\n    if s[0]!= s[-1]:\n        return False\n    return isPalindrome(s[1:-1])\n    \ndef isPalindrome_2(s):\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef isPalindrome_3(s):\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    i = 0\n    j = len(s)-1\n    while i < j:\n        if s[i]!= s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n    \ndef isPalindrome_4(s):\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    if len(s) < 2:\n        return True\n    if s[0]!= s[-1]:\n        return False\n    return isPalindrome_4(s[1:-1])\n    \ndef isPalindrome_5(s):\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef isPalindrome_6(s):\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    for i in range(0, int(len(s)/2)):\n        if s[i]!= s[len(s)-i-1]:\n            return False\n    return True\n    \ndef isPalindrome_7(s):\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    s = s.lower()\n    for i in range(0, len(s)):\n        if s[i]!= s[len(s)-i-1]:\n            return False\n    return True\n    \ndef isPalindrome_8(s):\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    s = s.lower()\n    l, h = 0, len(s)-1\n    while l < h:\n        if s[l]!= s[h]:\n            return False\n        l += 1\n        h -= 1\n    return True\n    \ndef isPalindrome_9(s):\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    s = s.lower()\n    i = 0\n    j = len(s)-1\n    while i < j:\n        if s[i]!= s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n    \ndef isPalindrome_10(s):\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    s = s.lower()\n    for i in range(0, int(len(s)/2)):\n        if s[i]!= s[len(s)-i-1]:\n            return False\n    return True\n    \ndef isPalindrome_11(s):\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    s = s.lower()\n    i, j = 0, len(s)-1\n    while i < j:\n        if s[i]!= s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n    \ndef isPalindrome_12(s):\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    s = s.lower()\n    i, j = 0, len(s)-1\n    while i < j:\n        while i < j and s[i].isspace():\n            i += 1\n        while i < j and s[j].isspace():\n            j -= 1\n        if s[i]!= s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n    \ndef isPalindrome_13(s):\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    s = s.lower()\n    i, j = 0, len(s)-1\n    while i < j:\n        while i < j and not s[i].isalnum():\n            i += 1\n        while i < j and not s[j].isalnum():\n            j -= 1\n        if s[i]!= s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n    \ndef isPalindrome_14(s):\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    s = s.lower()\n    for i in range(0, int(len(s)/2)):\n        if s[i]!= s[len(s)-i-1]:\n            return False\n    return True\n    \ndef isPalindrome_15(s):\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    s = s.lower()\n    l, h = 0, len(s)-1\n    while l < h:\n        if s[l]!= s[h]:\n            return False\n        l += 1\n        h -= 1\n    return True\n    \ndef isPalindrome_16(s):\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    s = s.lower()\n    i = 0\n    j = len(s)-1\n    while i < j:\n        while i < j and s[i].isspace():\n            i += 1\n        while i < j and s[j].isspace():\n            j -= 1\n        if s[i]!= s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n    \ndef isPalindrome_17(s):\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    s = s.lower()\n    i, j = 0, len(s)-1\n    while i < j:\n        while i < j and not s[i].isalnum():\n            i += 1\n        while i < j and not s[j].isalnum():\n            j -= 1\n        if s[i]!= s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n    \ndef isPalindrome_18(s):\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    s = s.lower()\n    i, j = 0, len(s)-1\n    while i < j:\n        while i < j and not s[i].isalnum():\n            i += 1\n        while i < j and not s[j].isalnum():\n            j -= 1\n        if s[i]!= s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n    \ndef isPalindrome_19(s):\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    s = s.lower()\n    i, j = 0, len(s)-1\n    while i < j:\n        while i < j and not s[i].isalnum():\n            i += 1\n        while i < j and not s[j].isalnum():\n            j -= 1\n        if s[i]!= s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n    \ndef isPalindrome_20(s):\n    '''\n    Write a python function to check if a string is palin",
        "num_ids": 15
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "num_ids": 9
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "num_ids": 9
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n",
        "num_ids": 13
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n:\n        sum += n % 10\n        n //= 10\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(x) for x in str(n)])\n",
        "num_ids": 19
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(d) for d in str(n))\n",
        "num_ids": 18
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n%10\n        n = n//10\n    return total\n",
        "num_ids": 32
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(x) for x in str(n)])\n",
        "num_ids": 19
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n / 10)\n",
        "num_ids": 33
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = str(n)\n    t = 0\n    for i in s:\n        t += int(i)\n    return t\n",
        "num_ids": 34
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    result = 0\n    while n:\n        result += n % 10\n        n = n / 10\n    return result\n",
        "num_ids": 30
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(d) for d in str(n))\n",
        "num_ids": 18
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1)<=1:\n        return True\n    else:\n        first=list1[0]\n        for i in range(len(list1)):\n            if i==0:\n                continue\n            elif i!=0:\n                if list1[i]<=first:\n                    return False\n    return True\n",
        "num_ids": 83
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return all(list1[i] <= list1[i + 1] for i in range(len(list1) - 1))\n",
        "num_ids": 33
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i-1] > list1[i]:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1,len(list1)):\n        if list1[i-1]>list1[i]:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    flag = True\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            flag = False\n    return flag\n",
        "num_ids": 47
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    \n    if len(list1) == 0:\n        return True\n    \n    for i in range(1, len(list1)):\n        if list1[i] < list1[i - 1]:\n            return False\n    \n    return True\n    ",
        "num_ids": 63
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n",
        "num_ids": 32
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for x in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for x in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n",
        "num_ids": 33
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list_of_dicts = []\n    for _ in range(length):\n        list_of_dicts.append({})\n    return list_of_dicts\n",
        "num_ids": 42
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [dict() for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [dict() for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    l = []\n    for i in range(length):\n        l.append({})\n    return l\n",
        "num_ids": 27
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    l = []\n    for i in range(length):\n        l.append({})\n    return l\n",
        "num_ids": 27
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list_of_sublists = []\n    for i in range(len(list1)):\n        list_of_sublists.append(list1[i][:])\n    list_of_sublists.sort()\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = list_of_sublists[i][j]\n    return list1\n",
        "num_ids": 108
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1\n",
        "num_ids": 23
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if not list1:\n        return None\n    if len(list1)==1:\n        return list1\n    else:\n        return merge(sort_sublists(list1[:len(list1)/2]),sort_sublists(list1[len(list1)/2:]))\n",
        "num_ids": 70
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # for i in range(len(list1)):\n    #     for j in range(len(list1[i])):\n    #         list1[i][j] = list1[i][j].upper()\n    #     list1[i].sort()\n    #     for j in range(len(list1[i])):\n    #         list1[i][j] = list1[i][j].lower()\n    # return list1\n",
        "num_ids": 109
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for i in list1:\n        new_list.append(sorted(i))\n    return new_list\n",
        "num_ids": 36
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [[str(x) for x in sorted(x)] for x in list1]\n",
        "num_ids": 23
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if not list1:\n        return list1\n    else:\n        return sorted(list1, key=lambda x:x[0])\n",
        "num_ids": 35
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    length_of_list = len(list1)\n    for i in range(length_of_list):\n        list1[i] = sorted(list1[i])\n",
        "num_ids": 43
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n    for sublist in list1:\n        sublist.sort()\n        result.append(sublist)\n    return result\n    \ndef sort_sublists2(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = [[] for i in list1]\n    for i, sublist in enumerate(list1):\n        result[i] = sorted(sublist)\n    return result\n    \ndef sort_sublists3(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = list1[:]\n    for i, sublist in enumerate(list1):\n        result[i] = sorted(sublist)\n    return result\n    \ndef sort_sublists4(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n    for sublist in list1:\n        result.append(sorted(sublist))\n    return result\n",
        "num_ids": 32
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [[sorted(x)[i] for x in list1] for i in range(len(list1[0]))]\n",
        "num_ids": 33
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    #nums = [2,4,3,2,1,6,9,5,6,3,9,5,2,1,4,1,6,2,2,3,4,5,5,7,8,7,7,4,9,5,3,8,7,1,2,6,7,7,2,5,4,3,6,1,3,6,8,6,1,3,4,6,9,5,6,2,5,1,6,6,3,6,7,6,2,6,1,1,7,3,2,4,4,5,3,5,5,1,5,6,7,2,2,5,4,5,5,4,6,3,3,5,4,6,8,6,2,4,3,1,1,7,6,6,8,4,4,2,1,5,1,5,7,1,7,7,5,8,3,6,1,5,2,7,5,5,1,4,1,4,7,8,7,2,6,3,7,6,7,7,2,6,7,7,5,5,3,7,1,4,3,8,5,3,7,4,1,1,3,2,5,8,4,6,6,8,5,1,7,1,4,7,8,7,7,7,7,4,3,7,7,1,2,5,2,3,3,2,7,2,2,2,2,7,4,1,4,2,6,1,1,5,7,2,2,2,5,6,3,2,7,2,3,2,4,2,5,5,6,5,6,4,4,7,6,6,7,4,4,6,7,5,5,6,5,6,6,6,6,5,5,4,7,1,6,1,4,2,7,1,6,2,5,1,7,6,4,6,1,5,6,1,4,2,6,6,6,6,6,1,7,6,6,6,6,5,4,6,6,4,5,7,6,6,7,6,6,7,7,7,6,5,7,4,4,6,6,6,6,5,7,6,5,6,6,5,7,7,7,5,5,7,7,5,7,7,7,7,7,7,5,7,5,6,7,7,6,7,7,6,5,7,6,5,7,7,5,6,6,6,6,7,6,6,7,6,6,6,7,6,5,7,5,6,6,7,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,",
        "num_ids": 2012
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    no_duplicates_list = list(set(nums))\n    return no_duplicates_list\n",
        "num_ids": 29
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    '''\n    From the given list of list, remove duplicate numbers.\n    '''\n    def unique_nums(list_of_nums):\n        '''\n        Remove duplicate numbers in the given list of list.\n        '''\n        unique_list = []\n        for item in list_of_nums:\n            if item not in unique_list:\n                unique_list.append(item)\n        return unique_list\n    list_of_nums = [1, 2, 2, 3, 4, 5]\n    unique_nums(list_of_nums)\n    list_of_nums = [1, 2, 2, 3, 4, 5, 6]\n    unique_nums(list_of_nums)\n    list_of_nums = [1, 2, 3, 4, 5, 6]\n    unique_nums(list_of_nums)\n    list_of_nums = [1, 2, 3, 4, 5]\n    unique_nums(list_of_nums)\n    list_of_nums = [1, 2, 3, 4, 5, 6, 7]\n    unique_nums(list_of_nums)\n    list_of_nums = [1, 2, 3, 4, 5, 6, 7, 8]\n    unique_nums(list_of_nums)\n",
        "num_ids": 269
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
        "num_ids": 47
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique = set()\n    for num in nums:\n        if num not in unique:\n            unique.add(num)\n    return unique\n",
        "num_ids": 36
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums.sort()\n    i = 0\n    while i < len(nums):\n        if nums[i] == nums[i+1]:\n            del nums[i]\n        else:\n            i += 1\n    print(nums)\n",
        "num_ids": 64
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    if len(nums) < 2:\n        return None\n    if len(nums) == 2:\n        return None\n    n = len(nums)\n    return [nums[i] for i in xrange(n) if nums[i] not in nums[:i] + nums[i + 1:]]\n    \n",
        "num_ids": 83
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    ans = []\n    for i in range(len(nums)):\n        if nums[i] not in ans:\n            ans.append(nums[i])\n    return ans\n",
        "num_ids": 47
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return list(set(nums))\n",
        "num_ids": 12
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    i=0\n    while i < len(nums):\n        if nums.count(nums[i]) > 1:\n            nums.remove(nums[i])\n        else:\n            i+=1\n",
        "num_ids": 54
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    from functools import reduce\n    return reduce(lambda x,y:x*y,list_data)\n",
        "num_ids": 28
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_data = []\n    for i in list_data:\n        if i not in unique_data:\n            unique_data.append(i)\n    return reduce((lambda x, y: x * y), unique_data)\n",
        "num_ids": 56
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list=[]\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    product=1\n    for i in unique_list:\n        product=product*i\n    return product\n",
        "num_ids": 63
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return reduce(lambda x, y: x*y, [i for i in list_data if list_data.count(i)==1])\n",
        "num_ids": 36
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list=[]\n    product=1\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    for j in unique_list:\n        product=product*j\n    return product\n",
        "num_ids": 63
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    from functools import reduce\n    return reduce(lambda x, y: x * y, (set(list_data)))\n",
        "num_ids": 31
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data_length = len(list_data)\n    list_data_set = set(list_data)\n    unique_product = 1\n    for i in list_data_set:\n        unique_product *= i\n    return unique_product\n",
        "num_ids": 62
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return functools.reduce(operator.mul,set(list_data),1)\n",
        "num_ids": 25
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # # Solution 1\n    # sum = 0\n    # for i in list_data:\n    #     if i not in sum:\n    #         sum = sum + i\n    # print(sum)\n    # # Solution 2\n    # print(reduce(lambda a, b: a * b, set(list_data)))\n",
        "num_ids": 79
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for element in list_data:\n        product *= element\n    return product\n",
        "num_ids": 26
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return pi*r**2 + 2*pi*r*h\n",
        "num_ids": 18
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return math.pi * (r**2 + h**2)\n",
        "num_ids": 18
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*(r+h)\n",
        "num_ids": 16
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    sa = 2*math.pi*r*(r+h)\n    return sa\n",
        "num_ids": 23
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    def surfacearea_cylinder(r,h):\n    \n    \n    # check if radius is negative\n    if r < 0:\n        return None\n    \n    # calculate surface area of cylinder\n    # surface area = 2*pi*r*(r + h)\n    return 2*pi*r*(r + h)\n    \n    ",
        "num_ids": 82
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*pi*r*(r+h)\n    return area\n",
        "num_ids": 21
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    s = 2*pi*r*h\n    return s\n",
        "num_ids": 17
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    print('The surface area of a cylinder is: ',2 * math.pi * r * (r + h),' [m^2]')\n",
        "num_ids": 35
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    sa = 2*pi*r*(r+h)\n    print sa\n",
        "num_ids": 21
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return pi*r*r + 2*pi*r*h\n",
        "num_ids": 18
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    def sub_array(A,B): \n        '''\n        This function returns true if A is a sublist of B. \n        '''\n        count = 0\n        for i in range(len(B)):\n            if A[i] == B[i]:\n                count = count+1\n        return count == len(A)\n    return sub_array(A,B)\n",
        "num_ids": 58
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    n = len(A) \n    m = len(B) \n    j = 0\n    i = 0\n    while i<=n-m: \n        temp = A[i:i+m] \n        if temp == B: \n            j = 1\n            break\n        i += 1\n    if j == 1: \n        return True\n    else: \n        return False\n    \n",
        "num_ids": 98
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)):\n        if(B[i] not in A):\n            return False\n    return True\n",
        "num_ids": 34
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # lenA, lenB = len(A), len(B)\n    # if lenA > lenB: return False\n    # for i in range(lenA):\n    #     if A[i] == B[0]:\n    #         if is_Sub_Array(A[i+1:], B[1:]): return True\n    # return False\n    if len(A) > len(B): return False\n    for i in range(len(A)):\n        if A[i] == B[0]:\n            if is_Sub_Array(A[i+1:], B[1:]): return True\n    return False\n",
        "num_ids": 151
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A == []:\n        return True\n    for i in range(len(A)):\n        for j in range(len(B)):\n            if A[i] == B[j]:\n                break\n        if j == len(B)-1:\n            return True\n    return False\n",
        "num_ids": 71
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A==[] or B==[]:\n        return False\n    elif A[0]==B[0]:\n        return is_Sub_Array(A[1:],B[1:])\n    else:\n        return is_Sub_Array(A,B[1:])\ndef is_Sub_Array_Without_Recursion(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not without recursion.\n    '''\n    if A==[] or B==[]:\n        return False\n    elif A[0]==B[0]:\n        return is_Sub_Array_Without_Recursion(A[1:],B[1:])\n    else:\n        return is_Sub_Array_Without_Recursion(A,B[1:])\ndef is_Sub_Array_With_Recursion(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not with recursion.\n    '''\n    if A==[] or B==[]:\n        return False\n    elif A[0]==B[0]:\n        return True\n    else:\n        return is_Sub_Array_With_Recursion(A[1:],B[1:])\ndef is_Sub_Array_With_Recursion_Alternative(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not with recursion.\n    '''\n    if A==[] or B==[]:\n        return False\n    elif A[0]==B[0]:\n        return True\n    else:\n        return is_Sub_Array_With_Recursion_Alternative(A[1:],B[1:])\ndef is_Sub_Array_With_Recursion_Alternative_2(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not with recursion.\n    '''\n    if A==[] or B==[]:\n        return False\n    elif A[0]==B[0]:\n        return True\n    else:\n        return is_Sub_Array_With_Recursion_Alternative(A[1:],B[1:])\ndef is_Sub_Array_With_Recursion_Alternative_3(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not with recursion.\n    '''\n    if A==[] or B==[]:\n        return False\n    elif A[0]==B[0]:\n        return True\n    else:\n        return is_Sub_Array_With_Recursion_Alternative(A[1:],B[1:])\ndef is_Sub_Array_With_Recursion_Alternative_4(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not with recursion.\n    '''\n    if A==[] or B==[]:\n        return False\n    elif A[0]==B[0]:\n        return True\n    else:\n        return is_Sub_Array_With_Recursion_Alternative(A[1:],B[1:])\ndef is_Sub_Array_With_Recursion_Alternative_5(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not with recursion.\n    '''\n    if A==[] or B==[]:\n        return False\n    elif A[0]==B[0]:\n        return True\n    else:\n        return is_Sub_Array_With_Recursion_Alternative(A[1:],B[1:])\ndef is_Sub_Array_With_Recursion_Alternative_6(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not with recursion.\n    '''\n    if A==[] or B==[]:\n        return False\n    elif A[0]==B[0]:\n        return True\n    else:\n        return is_Sub_Array_With_Recursion_Alternative(A[1:],B[1:])\ndef is_Sub_Array_With_Recursion_Alternative_7(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not with recursion.\n    '''\n    if A==[] or B==[]:\n        return False\n    elif A[0]==B[0]:\n        return True\n    else:\n        return is_Sub_Array_With_Recursion_Alternative(A[1:],B[1:])\ndef is_Sub_Array_With_Recursion_Alternative_8(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not with recursion.\n    '''\n    if A==[] or B==[]:\n        return False\n    elif A[0]==B[0]:\n        return True\n    else:\n        return is_Sub_Array_With_Recursion_Alternative(A[1:],B[1:])\ndef is_Sub_Array_With_Recursion_Alternative_9(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not with recursion.\n    '''\n    if A==[] or B==[]:\n        return False\n    elif A[0]==B[0]:\n        return True\n    else:\n        return is_Sub_Array_With_Recursion_Alternative(A[1:],B[1:])\ndef is_Sub_Array_With_Recursion_Alternative_10(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not with recursion.\n    '''\n    if A==[] or B==[]:\n        return False\n    elif A[0]==B[0]:\n        return True\n    else:\n        return is_Sub_Array_With_Recursion_Alternative(A[1:],B[1:])\ndef is_Sub_Array_With_Recursion_Alternative_11(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not with recursion.\n    '''\n    if A==[] or B==[]:\n        return False\n    elif A[0]==B[0]:\n        return True\n    else:\n        return is_Sub_Array_With_Recursion_Alternative(A[1:],B[1:])\ndef is_Sub_Array_With_Recursion_Alternative_12(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not with recursion.\n    '''\n    if A==[] or B==[]:\n        return False\n    elif A[0]==B[0]:\n        return True\n    else:\n        return is_Sub_Array_With_Recursion_Alternative(A[1:],B[1:])\ndef is_Sub_Array_With_Recursion_Alternative_13(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not with recursion.\n    '''\n    if A==[] or B==[]:\n        return False\n    elif A[0]==B[0]:\n        return True\n    else:\n        return is_Sub_Array_With_Recursion_Alternative(A[1:],B[1:])\ndef is_Sub_Array_With_Recursion_Alternative_14(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not with recursion.\n    '''\n    if A==[] or B==[]:\n        return False\n    elif A[0]==B[0]:\n        return True\n    else:\n        return is_Sub_Array_With_Recursion_Alternative(A[1:],B[1:])\ndef is_Sub_Array_With_Recursion_Alternative_15(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not with recursion.\n    '''\n    if A==[] or B==[]:\n        return False\n    elif A[0]==B[0]:\n        return True\n    else:\n        return is_Sub_Array_With_Recursion_Alternative(A[1:],B[1:])\ndef is_Sub_Array_With_Recursion_Alternative_16(",
        "num_ids": 80
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    A.sort()\n    B.sort()\n    if A==B:\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        return False\n    else:\n        for i in range(len(A)):\n            if A[i]==B[i]:\n                return True\n            else:\n                return False\n",
        "num_ids": 58
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return all(x in A for x in B)\n",
        "num_ids": 15
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    else:\n        for i in range(0, len(B)):\n            if A[i] == B[i]:\n                j = i + 1\n                while j <= len(A):\n                    if A[j-1] == B[i]:\n                        j = j + 1\n                    else:\n                        break\n                if j == len(A):\n                    return True\n        return False\n",
        "num_ids": 109
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*last_Digit_Factorial(n-1)\n",
        "num_ids": 34
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    nFactorial = 1\n    for i in range(1, n+1):\n        nFactorial *= i\n    print(nFactorial)\n    return (nFactorial % 10)\n",
        "num_ids": 48
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    n = str(n)\n    x = n[-1]\n    y = int(n[-1])\n    z = 1\n    for i in range(y, 0, -1):\n        z = z*i\n    return z%10\n",
        "num_ids": 62
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n<0:\n        return None\n    return 1 if n==0 else n%10*last_Digit_Factorial(n//10)\n",
        "num_ids": 38
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    import math\n    a = math.factorial(n)\n    b = a % 10\n    return b\n",
        "num_ids": 28
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    n = abs(int(n))\n    if n == 0:\n        return 1\n    elif n < 0:\n        return -1\n    return last_Digit_Factorial(n-1)*10\n",
        "num_ids": 52
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n%10\n    \ndef f(n,k):\n    '''\n    Return the value of f(n,k), the kth digit of the factorial of n.\n    '''\n    if n<10:\n        return n\n    else:\n        return f(n//10,(k+1))\n        \ndef c(n,k):\n    '''\n    Return the value of c(n,k), the number of digits in the kth place in the factorial of n.\n    '''\n    if n<10:\n        return 1\n    else:\n        return c(n//10,(k+1))\n        \ndef number_of_digit(n):\n    '''\n    Return the number of digits in n.\n    '''\n    if n<10:\n        return 1\n    else:\n        return 1 + number_of_digit(n//10)\n        \ndef get_digit(n,k):\n    '''\n    Return the kth digit in n.\n    '''\n    if n<10:\n        return n\n    else:\n        return get_digit(n//10,(k+1))\n        \ndef sum_of_digits(n):\n    '''\n    Return the sum of the digits in n.\n    '''\n    if n<10:\n        return n\n    else:\n        return n%10 + sum_of_digits(n//10)\n        \ndef count_digits(n):\n    '''\n    Return the number of digits in n.\n    '''\n    if n<10:\n        return 1\n    else:\n        return 1 + count_digits(n//10)\n        \ndef factorial(n):\n    '''\n    Return the factorial of n.\n    '''\n    if n<10:\n        return n\n    else:\n        return n*factorial(n//10)\n        \ndef digit_sum(n):\n    '''\n    Return the sum of the digits in n.\n    '''\n    if n<10:\n        return n\n    else:\n        return n%10 + digit_sum(n//10)\n        \ndef digit_sum_of_digits(n):\n    '''\n    Return the sum of the digits in n.\n    '''\n    if n<10:\n        return n\n    else:\n        return n%10 + digit_sum_of_digits(n//10)\n        \ndef digit_product(n):\n    '''\n    Return the product of the digits in n.\n    '''\n    if n<10:\n        return n\n    else:\n        return n%10 * digit_product(n//10)\n        \ndef count_digits_of_factorial(n):\n    '''\n    Return the number of digits in the factorial of n.\n    '''\n    if n<10:\n        return 1\n    else:\n        return 1 + count_digits_of_factorial(n//10)\n        \ndef sum_of_digits_of_factorial(n):\n    '''\n    Return the sum of the digits in the factorial of n.\n    '''\n    if n<10:\n        return n\n    else:\n        return n%10 + sum_of_digits_of_factorial(n//10)\n        \ndef digit_product_of_factorial(n):\n    '''\n    Return the product of the digits in the factorial of n.\n    '''\n    if n<10:\n        return n\n    else:\n        return n%10 * digit_product_of_factorial(n//10)\n        \ndef sum_of_digits_of_number_of_digits_factorial(n):\n    '''\n    Return the sum of the digits in the number of digits of the factorial of n.\n    '''\n    if n<10:\n        return n\n    else:\n        return n%10 + sum_of_digits_of_number_of_digits_factorial(n//10)\n        \ndef get_first_digit(n):\n    '''\n    Return the first digit of n.\n    '''\n    if n<10:\n        return n\n    else:\n        return get_first_digit(n//10)\n        \ndef get_digit_at_position(n,p):\n    '''\n    Return the pth digit of n.\n    '''\n    if n<10:\n        return n\n    else:\n        return get_digit_at_position(n//10,p+1)\n        \ndef get_last_digit(n):\n    '''\n    Return the last digit of n.\n    '''\n    return n%10\n    \ndef get_first_digit_factorial(n):\n    '''\n    Return the first digit of the factorial of n.\n    '''\n    return n%10\n    \ndef get_last_digit_factorial(n):\n    '''\n    Return the last digit of the factorial of n.\n    '''\n    return n%10\n    \ndef get_digit_at_position_factorial(n,p):\n    '''\n    Return the pth digit of the factorial of n.\n    '''\n    return n%10\n    \ndef count_digits_factorial(n):\n    '''\n    Return the number of digits in the factorial of n.\n    '''\n    return 1\n    \ndef number_of_digits_factorial(n):\n    '''\n    Return the number of digits in the factorial of n.\n    '''\n    return 1\n    \ndef f(n,k):\n    '''\n    Return the value of f(n,k), the kth digit of the factorial of n.\n    '''\n    if n<10:\n        return n\n    else:\n        return f(n//10,(k+1))\n        \ndef c(n,k):\n    '''\n    Return the value of c(n,k), the number of digits in the kth place in the factorial of n.\n    '''\n    if n<10:\n        return 1\n    else:\n        return c(n//10,(k+1))\n        \ndef last_Digit_Factorial(n): \n    '''\n    Return the last digit in factorial of n.\n    '''\n    return n%10\n    \ndef digit_of_last_digit(n):\n    '''\n    Return the digit of the last digit of n.\n    '''\n    return n%10\n    \ndef digit_of_digit(n,k):\n    '''\n    Return the kth digit of n.\n    '''\n    if n<10:\n        return n\n    else:\n        return n%10\n        \ndef sum_of_digits(n):\n    '''\n    Return the sum of the digits in n.\n    '''\n    if n<10:\n        return n\n    else:\n        return n%10 + sum_of_digits(n//10)\n        \ndef count_digits(n):\n    '''\n    Return the number of digits in n.\n    '''\n    if n<10:\n        return 1\n    else:\n        return 1 + count_digits(n//10)\n        \ndef factorial(n):\n    '''\n    Return the factorial of n.\n    '''\n    if n<10:\n        return n\n    else:\n        return n*factorial(n//10)\n        \ndef get_digit(n,k):\n    '''\n    Return the kth digit of n.\n    '''\n    if n<10:\n        return n\n    else:\n        return get_digit(n//10,(k+1))\n        \ndef sum_of_digits(n):\n    '''\n    Return the sum of the digits in n.\n    '''\n    if n<10:\n        return n\n    else:\n        return n%10 + sum_of_digits(n//10)\n        \ndef count_digits(n):\n    '''\n    Return the number of digits in n.\n    '''\n    if n<10:\n        return 1\n    else:\n        return 1 + count_digits(n//10)\n        \ndef factorial(n):\n    '''\n    Return the factorial of n.\n    '''\n    if n<10:\n        return n\n    els",
        "num_ids": 15
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        return last_Digit_Factorial(n - 1) * n\n",
        "num_ids": 46
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        return -1\n    else:\n        return factorial(n)%10\n",
        "num_ids": 28
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    s = 0\n    while(n): \n        d = n % 10\n        s += d * factorial(n % 10)\n        n = n // 10\n    return s \n    \ndef palindrome(n): \n    '''\n    Write a python function to check whether a number is palindrome or not. \n    '''\n    return str(n) == str(n)[::-1]\n",
        "num_ids": 18
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # To interleave 3 lists we create a new list of length 2*length(list1),\n    # which we populate with the first element of each list, then the second element of each\n    # list and so on. We then iterate through the new list and add the remaining elements of each list\n    # into the new list until the whole list is populated.\n    # For example, with the lists\n    # list1 = [1,2,3]\n    # list2 = [4,5,6]\n    # list3 = [7,8,9]\n    # we get a new list of length 6 as follows:\n    # new_list = [1, 4, 7, 2, 5, 8, 3, 6, 9]\n    # In Python, we can achieve this by defining a list of length 6, and then iterating through the\n    # list of length 2*length(list1), replacing the current index of the new list with the first\n    # element of list1, then with the second element of list1, and so on.\n    # Once we have interleaved all the elements of the input lists, we can return the new list as follows:\n    # return [1, 4, 7, 2, 5, 8, 3, 6, 9]\n    # Time Complexity: O(n) where n is the number of elements in the longest list\n    # Space Complexity: O(n)\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n        new_list.append(list2[i])\n        new_list.append(list3[i])\n    return new_list\n",
        "num_ids": 386
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list(itertools.chain(*zip(list1, list2, list3)))\n",
        "num_ids": 24
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list_of_tuples = zip(list1,list2,list3)\n    return [item for sublist in list_of_tuples for item in sublist]\n",
        "num_ids": 43
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list1_1,list1_2,list1_3 = list1\n    list2_1,list2_2,list2_3 = list2\n    list3_1,list3_2,list3_3 = list3\n    result = []\n    for i in range(3):\n        result += list1_1[i]\n        result += list2_1[i]\n        result += list3_1[i]\n    return result\n",
        "num_ids": 110
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)==len(list2)==len(list3):\n        return list1+list2+list3\n    else:\n        return None\n",
        "num_ids": 41
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return -1\n    # if list1 and list2 and list3 are all single digit numbers\n    if (len(list1) == 1) and (len(list2) == 1) and (len(list3) == 1):\n        return [list1[0],list2[0],list3[0]]\n    # if list1 and list2 and list3 are all more than 1 digit numbers\n    if (len(list1) == len(list2) == len(list3)):\n        # interleave the list1\n        interleave_list1 = interleave_lists(list1[0:len(list1)//2],list1[len(list1)//2:len(list1)],list1[len(list1)//2:len(list1)])\n        # interleave the list2\n        interleave_list2 = interleave_lists(list2[0:len(list2)//2],list2[len(list2)//2:len(list2)],list2[len(list2)//2:len(list2)])\n        # interleave the list3\n        interleave_list3 = interleave_lists(list3[0:len(list3)//2],list3[len(list3)//2:len(list3)],list3[len(list3)//2:len(list3)])\n        # interleave the interleaved list\n        return interleave_lists(interleave_list1,interleave_list2,interleave_list3)\n    return -1\n",
        "num_ids": 387
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] + list2[i] + list3[i] for i in range(len(list1))]\n",
        "num_ids": 34
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list = []\n    for i in range(len(list1)):\n        list.append(list1[i])\n        list.append(list2[i])\n        list.append(list3[i])\n    return list\n",
        "num_ids": 57
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    i=0\n    for item1 in list1:\n        for item2 in list2:\n            for item3 in list3:\n                return [item1,item2,item3]\n",
        "num_ids": 47
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if test_tup1[0] == test_tup2[0]:\n        return (test_tup1[0], test_tup2[1])\n    elif test_tup1[1] == test_tup2[1]:\n        return (test_tup1[1], test_tup2[0])\n    else:\n        return (test_tup1[0], test_tup2[0])\n",
        "num_ids": 107
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            return (i,test_tup1[i],test_tup2[i])\n    return 'Dissimilar'\n",
        "num_ids": 69
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    result = []\n    for elem1 in test_tup1:\n        for elem2 in test_tup2:\n            if elem1 == elem2:\n                result.append(elem1)\n    return result\n",
        "num_ids": 58
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissim_list = []\n    for tup in test_tup1:\n        for tup1 in test_tup2:\n            if tup[0] == tup1[0] and tup[1] == tup1[1]:\n                dissim_list.append((tup, tup1))\n    return dissim_list\n",
        "num_ids": 88
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in test_tup1:\n        for j in test_tup2:\n            if i == j:\n                continue\n            else:\n                dissimilar.append(i)\n    return dissimilar\n",
        "num_ids": 60
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return (set(test_tup1) ^ set(test_tup2))\n",
        "num_ids": 23
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    \n    dissimilar_elements = []\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    \n    return dissimilar_elements\n",
        "num_ids": 82
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for x, y in zip(test_tup1, test_tup2):\n        if x!= y:\n            dissimilar_elements.append((x, y))\n    return dissimilar_elements\n",
        "num_ids": 64
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuples not of same length\")\n    return tuple(test_tup1[i] for i in range(len(test_tup1)) if test_tup1[i]!= test_tup2[i])\n",
        "num_ids": 80
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return list(set(test_tup1) ^ set(test_tup2))\n",
        "num_ids": 24
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))\n",
        "num_ids": 19
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return (test_tuple[0], even_fnc(test_tuple[1]))\n",
        "num_ids": 26
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            even_fnc(i)\n        else:\n            if i % 2 == 0:\n                continue\n            else:\n                pass\n    return test_tuple\n",
        "num_ids": 61
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for element in test_tuple: \n        if even_fnc(element): \n            new_tuple.append(element)\n    return tuple(new_tuple)\n",
        "num_ids": 53
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for item in test_tuple:\n        if isinstance(item, list):\n            for sub_item in item:\n                if even_fnc(sub_item):\n                    test_tuple[test_tuple.index(item)] = sub_item\n                else:\n                    pass\n    return test_tuple\n",
        "num_ids": 77
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return even_fnc(filter(lambda x: x % 2 == 0, test_tuple))\n    \ndef main():\n    #test1 = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)\n    #print even_ele(test1, lambda x: x % 2 == 0)\n    \n    test2 = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)\n    print even_ele(test2, lambda x: x % 2 == 0)\n",
        "num_ids": 156
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_list = []\n    for ele in test_tuple:\n        if even_fnc(ele):\n            new_list.append(ele)\n    return tuple(new_list)\n",
        "num_ids": 48
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, tuple):\n        return tuple(filter(even_fnc, test_tuple))\n    elif isinstance(test_tuple, list):\n        return list(filter(even_fnc, test_tuple))\n    else:\n        raise TypeError(\"Input must be of type tuple or list.\")\n",
        "num_ids": 82
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(ele for ele in test_tuple if even_fnc(ele))\n",
        "num_ids": 23
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = [] \n    for i in test_tuple: \n        if type(i) == type(()): \n            result.append(even_ele(i, even_fnc)) \n        else: \n            if even_fnc(i): \n                result.append(i) \n    return tuple(result) \n",
        "num_ids": 83
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\n    \ndef surface_Area(b,s,h): \n    '''\n    Write a python function to find the surface area of a triangular pyramid with a given base edge and height.\n    '''\n    return (b*s)+(b*b*h*0.5)\n    \ndef surface_Area(b,s,h): \n    '''\n    Write a python function to find the surface area of a rectangular pyramid with a given base edge and height.\n    '''\n    return (b*s)+(b*h*0.5)\n",
        "num_ids": 19
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = (b*2)+(b*2)+(b*2)\n    return surface_area\n",
        "num_ids": 29
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\n",
        "num_ids": 8
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\n",
        "num_ids": 8
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\n",
        "num_ids": 8
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area=b*s\n    return area\n    \ndef volume(b,h):\n    '''\n    Write a python function to find the volume of a cube with a given base edge and height.\n    '''\n    volume=b**3*h\n    return volume\n    \ndef wt_rate(v,w,t):\n    '''\n    Write a python function to find the weight rate of a truck with a given number of packages, weight, and truck time.\n    '''\n    rate=v/w*t\n    return rate\n    \ndef t_truck(b,s,v,w):\n    '''\n    Write a python function to find the time required to load a truck with a given base edge, height, volume, and weight.\n    '''\n    t=w/v\n    return t\n    \ndef surface_Area(b,h):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area=b*h\n    return area\n    \ndef volume(b,h):\n    '''\n    Write a python function to find the volume of a cube with a given base edge and height.\n    '''\n    volume=b**3*h\n    return volume\n    \ndef wt_rate(v,w,t):\n    '''\n    Write a python function to find the weight rate of a truck with a given number of packages, weight, and truck time.\n    '''\n    rate=v/w*t\n    return rate\n    \ndef t_truck(b,s,v,w):\n    '''\n    Write a python function to find the time required to load a truck with a given base edge, height, volume, and weight.\n    '''\n    t=w/v\n    return t\n    \ndef convert_to_int(l):\n    '''\n    Write a python function to convert a list of strings to integers.\n    '''\n    l=[int(float(i)) for i in l]\n    return l\n    \ndef count_list(l):\n    '''\n    Write a python function to count the number of items in a list.\n    '''\n    return len(l)\n    \ndef even_num(l):\n    '''\n    Write a python function to check if all items in a list are even.\n    '''\n    count=0\n    for i in l:\n        if i%2==0:\n            count+=1\n    if count==len(l):\n        return True\n    else:\n        return False\n    \ndef even_num_2(l):\n    '''\n    Write a python function to check if all items in a list are even.\n    '''\n    return len([i for i in l if i%2==0])==len(l)\n    \ndef highest_num(l):\n    '''\n    Write a python function to find the highest number in a list.\n    '''\n    return max(l)\n    \ndef highest_num_2(l):\n    '''\n    Write a python function to find the highest number in a list.\n    '''\n    return max([i for i in l])\n    \ndef lowest_num(l):\n    '''\n    Write a python function to find the lowest number in a list.\n    '''\n    return min(l)\n    \ndef lowest_num_2(l):\n    '''\n    Write a python function to find the lowest number in a list.\n    '''\n    return min([i for i in l])\n    \ndef even_num_3(l):\n    '''\n    Write a python function to check if all items in a list are even.\n    '''\n    return len([i for i in l if i%2==0])==len(l)\n    \ndef even_num_4(l):\n    '''\n    Write a python function to check if all items in a list are even.\n    '''\n    return len(filter(lambda x:x%2==0,l))==len(l)\n    \ndef even_num_5(l):\n    '''\n    Write a python function to check if all items in a list are even.\n    '''\n    return len([i for i in l if i%2==0])==len(l)\n    \ndef highest_num_3(l):\n    '''\n    Write a python function to find the highest number in a list.\n    '''\n    return max(l)\n    \ndef highest_num_4(l):\n    '''\n    Write a python function to find the highest number in a list.\n    '''\n    return max([i for i in l])\n    \ndef highest_num_5(l):\n    '''\n    Write a python function to find the highest number in a list.\n    '''\n    return max(filter(lambda x:x%2==0,l))\n    \ndef lowest_num_3(l):\n    '''\n    Write a python function to find the lowest number in a list.\n    '''\n    return min(l)\n    \ndef lowest_num_4(l):\n    '''\n    Write a python function to find the lowest number in a list.\n    '''\n    return min([i for i in l])\n    \ndef lowest_num_5(l):\n    '''\n    Write a python function to find the lowest number in a list.\n    '''\n    return min(filter(lambda x:x%2==0,l))\n    \ndef even_num_6(l):\n    '''\n    Write a python function to check if all items in a list are even.\n    '''\n    return len([i for i in l if i%2==0])==len(l)\n    \ndef even_num_7(l):\n    '''\n    Write a python function to check if all items in a list are even.\n    '''\n    return len(filter(lambda x:x%2==0,l))==len(l)\n    \ndef even_num_8(l):\n    '''\n    Write a python function to check if all items in a list are even.\n    '''\n    return len(filter(lambda x:x%2==0,l))==len(l)\n    \ndef highest_num_6(l):\n    '''\n    Write a python function to find the highest number in a list.\n    '''\n    return max(l)\n    \ndef highest_num_7(l):\n    '''\n    Write a python function to find the highest number in a list.\n    '''\n    return max([i for i in l])\n    \ndef highest_num_8(l):\n    '''\n    Write a python function to find the highest number in a list.\n    '''\n    return max(filter(lambda x:x%2==0,l))\n    \ndef highest_num_9(l):\n    '''\n    Write a python function to find the highest number in a list.\n    '''\n    return max(filter(lambda x:x%2==0,l))\n    \ndef lowest_num_6(l):\n    '''\n    Write a python function to find the lowest number in a list.\n    '''\n    return min(l)\n    \ndef lowest_num_7(l):\n    '''\n    Write a python function to find the lowest number in a list.\n    '''\n    return min([i for i in l])\n    \ndef lowest_num_8(l):\n    '''\n    Write a python function to find the lowest number in a list.\n    '''\n    return min(filter(lambda x:x%2==0,l))\n    \ndef lowest_num_9(l):\n    '''\n    Write a python function to find the lowest number in a list.\n    '''\n    return min(filter(lambda x:x%2==0,l))\n    \ndef even_num_10(l):\n    '''\n    Write a python function to check if all items in a list are even.\n    '''\n    return len([i for i in l if i%2==0])==len(l)\n    \ndef even_num_11(l):\n    '''\n    Write a python function to check if all items in a list are even.\n    '''\n    return len(filter(lambda x:x%2==0,l))==len(l)\n    \ndef even_num_12(l):\n    '''\n    Write a python function to check if all items in a lis",
        "num_ids": 16
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s)\n",
        "num_ids": 10
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s)\n    \ndef vol(h,s): \n    '''\n    Write a python function to find the volume of a square pyramid with a given base edge and height.\n    '''\n    return (h*s)\n    \ndef vol_unit(s): \n    '''\n    Write a python function to find the volume of a cube or a square pyramid with a given base edge.\n    '''\n    return (s**3)\n    \ndef surface_Area_unit(s): \n    '''\n    Write a python function to find the surface area of a cube or a square pyramid with a given base edge.\n    '''\n    return (s**2)\n    \ndef main(): \n    print(\"This program will determine the surface and volume of a square pyramid and a cube or square pyramid.\")\n    b = int(input(\"Please enter the base edge: \"))\n    s = int(input(\"Please enter the height of the pyramid: \"))\n    print(\"The surface area of the square pyramid is\",surface_Area(b,s),\"units^2.\")\n    print(\"The volume of the square pyramid is\",vol(b,s),\"units^3.\")\n    print(\"The surface area of the cube is\",surface_Area_unit(b),\"units^2.\")\n    print(\"The volume of the cube is\",vol_unit(b),\"units^3.\")\n",
        "num_ids": 166
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)*(s/2)\n    print \"The surface area of the square pyramid with a given base edge and height is \" + str(area)\n    \ndef surface_Area(b,h): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)*(h/2)\n    print \"The surface area of the square pyramid with a given base edge and height is \" + str(area)\n    \ndef surface_Area(b,h): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)*(h/2)\n    print \"The surface area of the square pyramid with a given base edge and height is \" + str(area)\n    \ndef surface_Area(b,h): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)*(h/2)\n    print \"The surface area of the square pyramid with a given base edge and height is \" + str(area)\n    \ndef surface_Area(b,h): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)*(h/2)\n    print \"The surface area of the square pyramid with a given base edge and height is \" + str(area)\n    \ndef surface_Area(b,h): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)*(h/2)\n    print \"The surface area of the square pyramid with a given base edge and height is \" + str(area)\n    \ndef surface_Area(b,h): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)*(h/2)\n    print \"The surface area of the square pyramid with a given base edge and height is \" + str(area)\n    \ndef surface_Area(b,h): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)*(h/2)\n    print \"The surface area of the square pyramid with a given base edge and height is \" + str(area)\n    \ndef surface_Area(b,h): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)*(h/2)\n    print \"The surface area of the square pyramid with a given base edge and height is \" + str(area)\n    \ndef surface_Area(b,h): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)*(h/2)\n    print \"The surface area of the square pyramid with a given base edge and height is \" + str(area)\n    \ndef surface_Area(b,h): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)*(h/2)\n    print \"The surface area of the square pyramid with a given base edge and height is \" + str(area)\n    \ndef surface_Area(b,h): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)*(h/2)\n    print \"The surface area of the square pyramid with a given base edge and height is \" + str(area)\n    \ndef surface_Area(b,h): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)*(h/2)\n    print \"The surface area of the square pyramid with a given base edge and height is \" + str(area)\n    \ndef surface_Area(b,h): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)*(h/2)\n    print \"The surface area of the square pyramid with a given base edge and height is \" + str(area)\n    \ndef surface_Area(b,h): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)*(h/2)\n    print \"The surface area of the square pyramid with a given base edge and height is \" + str(area)\n    \ndef surface_Area(b,h): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)*(h/2)\n    print \"The surface area of the square pyramid with a given base edge and height is \" + str(area)\n    \ndef surface_Area(b,h): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)*(h/2)\n    print \"The surface area of the square pyramid with a given base edge and height is \" + str(area)\n    \ndef surface_Area(b,h): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)*(h/2)\n    print \"The surface area of the square pyramid with a given base edge and height is \" + str(area)\n    \ndef surface_Area(b,h): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)*(h/2)\n    print \"The surface area of the square pyramid with a given base edge and height is \" + str(area)\n    \ndef surface_Area(b,h): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)*(h/2)\n    print \"The surface area of the square pyramid with a given base edge and height is \" + str(area)\n    \ndef surface_Area(b,h): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)*(h/2)\n    print \"The surface area of the square pyramid with a given base edge and height is \" + str(area)\n    \ndef surface_Area(b,h): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)*(h/2)\n    print \"The surface area of the square pyramid with a given base edge and height is \" + str(area)\n    \ndef surface_Area(b,h): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)*(h/2)\n    print \"The surface area of the square pyramid with a given base edge and height is \" + str(area)\n    \ndef surface_Area(b,h): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)*(h/2)\n    print \"The surface area of the square pyramid with a given base edge and height is \" + str(area)\n    \ndef surface_Area(b,h): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)*(h/2)",
        "num_ids": 15
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if b < 0 or s < 0:\n        return 'Incorrect Input'\n    else:\n        return b*s + b*s\n",
        "num_ids": 35
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) > 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for key in dict1:\n        if dict1[key]:\n            return False\n    return True\n",
        "num_ids": 26
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    # Your Code Here\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 31
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    dict1.keys()\n    dict1.values()\n    dict1.items()\n    if len(dict1)==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 46
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return bool(dict1)\n",
        "num_ids": 10
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print('Dictionary is empty')\n    else:\n        print('Dictionary is not empty')\n",
        "num_ids": 36
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return False\n    else:\n        return True\n",
        "num_ids": 21
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) > 0:\n        return True\n    else:\n        return False\n    \ndef my_reverse(str1):\n    '''\n    Write a function to reverse a string\n    '''\n    return str1[::-1]\n    \ndef my_capitalize(str1):\n    '''\n    Write a function to capitalize a string\n    '''\n    return str1.capitalize()\n    \ndef my_title(str1):\n    '''\n    Write a function to capitalize a string\n    '''\n    return str1.title()\n    \ndef my_swapcase(str1):\n    '''\n    Write a function to swap the case of a string\n    '''\n    return str1.swapcase()\n    \ndef my_upper(str1):\n    '''\n    Write a function to swap the case of a string\n    '''\n    return str1.upper()\n    \ndef my_count(str1):\n    '''\n    Write a function to count the number of a character in a string\n    '''\n    return str1.count('a')\n    \ndef my_split(str1):\n    '''\n    Write a function to split a string based on character\n    '''\n    return str1.split('a')\n    \ndef my_str_concat(str1, str2):\n    '''\n    Write a function to concatenate two strings\n    '''\n    return str1 + str2\n    \ndef my_str_find(str1):\n    '''\n    Write a function to find the first occurrence of a substring in a string\n    '''\n    return str1.find('a')\n    \ndef my_str_index(str1):\n    '''\n    Write a function to find the first occurrence of a substring in a string\n    '''\n    return str1.index('a')\n    \ndef my_str_join(str1):\n    '''\n    Write a function to join all elements in a list into a string\n    '''\n    return ''.join(str1)\n    \ndef my_replace(str1):\n    '''\n    Write a function to replace all occurances of one substring in a string with another\n    '''\n    return str1.replace('a','b')\n    \ndef my_replace_all(str1,str2):\n    '''\n    Write a function to replace all occurances of one substring in a string with another\n    '''\n    return str1.replace(str2, str2)\n    \ndef my_strip(str1):\n    '''\n    Write a function to strip leading and trailing whitespaces from a string\n    '''\n    return str1.strip()\n    \ndef my_lstrip(str1):\n    '''\n    Write a function to strip leading whitespaces from a string\n    '''\n    return str1.lstrip()\n    \ndef my_rstrip(str1):\n    '''\n    Write a function to strip trailing whitespaces from a string\n    '''\n    return str1.rstrip()\n    \ndef my_isdigit(str1):\n    '''\n    Write a function to check if a string is all digits\n    '''\n    return str1.isdigit()\n    \ndef my_isalpha(str1):\n    '''\n    Write a function to check if a string is all alphabetic\n    '''\n    return str1.isalpha()\n    \ndef my_isalnum(str1):\n    '''\n    Write a function to check if a string is all alphanumeric\n    '''\n    return str1.isalnum()\n    \ndef my_split(str1):\n    '''\n    Write a function to split a string based on a particular character\n    '''\n    return str1.split('a')\n    \ndef my_replace_mapping(str1):\n    '''\n    Write a function to replace all occurances of one substring in a string with another\n    '''\n    return str1.maketrans('a', 'b')\n    \ndef my_replace_chars(str1):\n    '''\n    Write a function to replace all occurances of one substring in a string with another\n    '''\n    return str1.maketrans('a', 'b', 'c')\n    \ndef my_swapcase(str1):\n    '''\n    Write a function to swap the case of a string\n    '''\n    return str1.swapcase()\n    \ndef my_replace_string(str1):\n    '''\n    Write a function to replace one substring with another string\n    '''\n    return str1.replace('a', 'b')\n    \ndef my_rfind(str1, start, end):\n    '''\n    Write a function to find the last occurrence of a substring in a string\n    '''\n    return str1.rfind(str2, start, end)\n    \ndef my_rindex(str1, start, end):\n    '''\n    Write a function to find the last occurrence of a substring in a string\n    '''\n    return str1.rindex(str2, start, end)\n    \ndef my_get(str1, idx):\n    '''\n    Write a function to get the nth letter of a string\n    '''\n    return str1[idx]\n    \ndef my_split(str1):\n    '''\n    Write a function to split a string based on a particular character\n    '''\n    return str1.split('a')\n    \ndef my_rsplit(str1, delim):\n    '''\n    Write a function to split a string based on a particular character\n    '''\n    return str1.rsplit(delim)\n    \ndef my_tolist(str1):\n    '''\n    Write a function to convert a string to a list\n    '''\n    return list(str1)\n    \ndef my_join(str1, str2):\n    '''\n    Write a function to join two strings\n    '''\n    return str1.join(str2)\n    \ndef my_strip(str1):\n    '''\n    Write a function to strip leading and trailing whitespaces from a string\n    '''\n    return str1.strip()\n    \ndef my_lstrip(str1):\n    '''\n    Write a function to strip leading whitespaces from a string\n    '''\n    return str1.lstrip()\n    \ndef my_rstrip(str1):\n    '''\n    Write a function to strip trailing whitespaces from a string\n    '''\n    return str1.rstrip()\n    \ndef my_center(str1):\n    '''\n    Write a function to center a string\n    '''\n    return str1.center(100)\n    \ndef my_ljust(str1, width):\n    '''\n    Write a function to left align a string\n    '''\n    return str1.ljust(width)\n    \ndef my_rjust(str1, width):\n    '''\n    Write a function to right align a string\n    '''\n    return str1.rjust(width)\n    \ndef my_count(str1):\n    '''\n    Write a function to count the number of a character in a string\n    '''\n    return str1.count('a')\n    \ndef my_find(str1, start, end):\n    '''\n    Write a function to find the first occurrence of a substring in a string\n    '''\n    return str1.find(str2, start, end)\n    \ndef my_index(str1, start, end):\n    '''\n    Write a function to find the first occurrence of a substring in a string\n    '''\n    return str1.index(str2, start, end)\n    \ndef my_replace(str1):\n    '''\n    Write a function to replace all occurances of one substring in a string with another\n    '''\n    return str1.replace('a', 'b')\n    \ndef my_replace_all(str1, str2):\n    '''\n    Write a function to replace all occurances of one substring in a string with another\n    '''\n    return str1.replace(str2, str2)\n    \ndef my_split(str1):\n    '''\n    Write a function to split a string based on a particular character\n    '''\n    return str1.split('a')\n    \ndef my_lstrip(str1):\n    '''\n    Write a function to strip leading whitespaces fro",
        "num_ids": 12
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n    \ndef my_list(list1):\n    '''\n    Write a function to check if a list is empty\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n    \ndef is_list_in_list(list1, list2):\n    '''\n    Write a function to check if a list is an element of another list\n    '''\n    if list1 in list2:\n        return True\n    else:\n        return False\n    \ndef my_set(set1):\n    '''\n    Write a function to check if a set is empty\n    '''\n    if len(set1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    \n    C = [0] * (num + 1)\n    C[0] = 1\n    for n in range(1, num + 1):\n        C[n] = 0\n        for k in range(0, n):\n            C[n] += C[k] * C[n - 1 - k]\n    return C[num]\n    \nassert catalan_number(0) == 1\nassert catalan_number(1) == 1\nassert catalan_number(2) == 2\nassert catalan_number(3) == 5\nassert catalan_number(4) == 14\nassert catalan_number(5) == 42\nassert catalan_number(6) == 132\nassert catalan_number(7) == 429\nassert catalan_number(8) == 936\nassert catalan_number(9) == 4292\nassert catalan_number(10) == 14288\nassert catalan_number(11) == 4796\nassert catalan_number(12) == 7504\nassert catalan_number(13) == 11769\nassert catalan_number(14) == 4248\nassert catalan_number(15) == 7504\nassert catalan_number(16) == 13784\nassert catalan_number(17) == 4796\nassert catalan_number(18) == 75220\nassert catalan_number(19) == 11769\nassert catalan_number(20) == 4248\nassert catalan_number(21) == 4796\nassert catalan_number(22) == 7504\nassert catalan_number(23) == 4292\nassert catalan_number(24) == 936\nassert catalan_number(25) == 4796\nassert catalan_number(26) == 7504\nassert catalan_number(27) == 11769\nassert catalan_number(28) == 4248\nassert catalan_number(29) == 4796\nassert catalan_number(30) == 75220\nassert catalan_number(31) == 13784\nassert catalan_number(32) == 4248\nassert catalan_number(33) == 4796\nassert catalan_number(34) == 7504\nassert catalan_number(35) == 4292\nassert catalan_number(36) == 936\nassert catalan_number(37) == 75220\nassert catalan_number(38) == 13784\nassert catalan_number(39) == 4248\nassert catalan_number(40) == 4796\nassert catalan_number(41) == 7504\nassert catalan_number(42) == 4292\nassert catalan_number(43) == 936\nassert catalan_number(44) == 4248\nassert catalan_number(45) == 4796\nassert catalan_number(46) == 7504\nassert catalan_number(47) == 11769\nassert catalan_number(48) == 4248\nassert catalan_number(49) == 4796\nassert catalan_number(50) == 7504\nassert catalan_number(51) == 4292\nassert catalan_number(52) == 936\nassert catalan_number(53) == 75220\nassert catalan_number(54) == 13784\nassert catalan_number(55) == 4248\nassert catalan_number(56) == 4796\nassert catalan_number(57) == 7504\nassert catalan_number(58) == 4292\nassert catalan_number(59) == 936\nassert catalan_number(60) == 75220\nassert catalan_number(61) == 13784\nassert catalan_number(62) == 4248\nassert catalan_number(63) == 4796\nassert catalan_number(64) == 7504\nassert catalan_number(65) == 4292\nassert catalan_number(66) == 936\nassert catalan_number(67) == 75220\nassert catalan_number(68) == 13784\nassert catalan_number(69) == 4248\nassert catalan_number(70) == 4796\nassert catalan_number(71) == 7504\nassert catalan_number(72) == 4292\nassert catalan_number(73) == 936\nassert catalan_number(74) == 75220\nassert catalan_number(75) == 13784\nassert catalan_number(76) == 4248\nassert catalan_number(77) == 4796\nassert catalan_number(78) == 7504\nassert catalan_number(79) == 4292\nassert catalan_number(80) == 936\nassert catalan_number(81) == 75220\nassert catalan_number(82) == 13784\nassert catalan_number(83) == 4248\nassert catalan_number(84) == 4796\nassert catalan_number(85) == 7504\nassert catalan_number(86) == 4292\nassert catalan_number(87) == 936\nassert catalan_number(88) == 75220\nassert catalan_number(89) == 13784\nassert catalan_number(90) == 4248\nassert catalan_number(91) == 4796\nassert catalan_number(92) == 7504\nassert catalan_number(93) == 4292\nassert catalan_number(94) == 936\nassert catalan_number(95) == 75220\nassert catalan_number(96) == 13784\nassert catalan_number(97) == 4248\nassert catalan_number(98) == 4796\nassert catalan_number(99) == 7504\nassert catalan_number(100) == 4292\nassert catalan_number(101) == 936\nassert catalan_number(102) == 75220\nassert catalan_number(103) == 13784\nassert catalan_number(104) == 4248\nassert catalan_number(105) == 4796\nassert catalan_number(106) == 7504\nassert catalan_number(107) == 4292\nassert catalan_number(108) == 936\nassert catalan_number(109) == 75220\nassert catalan_number(110) == 13784\nassert catalan_number(111) == 4248\nassert catalan_number(112) == 4796\nassert catalan_number(113) == 7504\nassert catalan_number(114) == 4292\nassert catalan_number(115) == 936\nassert catalan_number(116) == 75220\nassert catalan_number(117) == 13784\nassert catalan_number(118) == 4248\nassert catalan_number(119) == 4796\nassert catalan_number(120) == 7504\nassert catalan_number(121) == 4292\nassert catalan_number(122) == 936\nassert catalan_number(123) == 75220\nassert catalan_number(124) == 13784\nassert catalan_number(125) == 4248\nassert catalan_number(126) == 4796\nassert catalan_number(127) == 7504\nassert catalan_number(128) == 4292\nassert catalan_number(129) == 936\nassert catalan_number(130) == 75220\nassert catalan_number(131) == 13784\nassert catalan_number(132) == 4248\nassert catalan_number(133) == 4796\nassert catalan_number(134) == 7504\nassert catalan_number(135) == 4292\nassert catalan_number(136) == 936\nassert catalan_number(137) == 75220\nassert catalan_number(138) == 13784\nassert catalan_number(139) == 4248\nassert catalan_number(140) == 4796\nassert catalan_number(141) == 7504\nassert catalan_number(142) == 4292\nassert catalan_number(143) == 936\nassert catalan_number(144) == 75220\nassert catalan_number(145) == 13784\nassert catalan_number(146) == 4248\nassert catalan_number(147) == 4796\nassert catalan_number(148) == 7504\nassert catalan_number(149) == 4292\nassert catalan_number(150) == 936\nassert catalan_number(151) == 75220\nassert catalan_number(152) == 13784\nassert catalan_number(153) == 4248\nassert catalan_number(154) == 4796\nassert catalan_number(155) == 7504\nassert catalan_number(156) == 4292\nassert catalan_number(157) == 936\nassert catalan_number(158) == 75220\nassert catalan",
        "num_ids": 2019
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = [1, 1]\n    for i in xrange(2, num):\n        catalan.append(0)\n        for j in xrange(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[num - 1]\n",
        "num_ids": 76
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        raise ValueError('Catalan number cannot be negative')\n    return 1 if num == 0 else catalan_number(num - 1) * num / 2\n",
        "num_ids": 44
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    return (binomial_coefficient(2 * num, num) *\n        binomial_coefficient(num, 2 * num))\n",
        "num_ids": 33
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    numerator = 1\n    denominator = 1\n    catalan = 1\n    for i in range(num):\n        numerator = numerator * (i + 1)\n        denominator = denominator * (2 * i + 1)\n        catalan = catalan * (1 / denominator)\n",
        "num_ids": 75
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = [1, 1]\n    for i in range(1, num):\n        catalan.append(sum(catalan[-2:]))\n    return catalan[num - 1]\n",
        "num_ids": 49
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = num\n    catalan = 1\n    c = 0\n    if n == 0:\n        return catalan\n    elif n == 1:\n        return 1\n    else:\n        while c < n:\n            catalan = catalan * (2 * c + 1) / (c + 1)\n            c += 1\n        return catalan\n",
        "num_ids": 84
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 1:\n        return 1\n    else:\n        return catalan_number(num - 1) + 2 * catalan_number(num - 2)\n",
        "num_ids": 41
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    assert isinstance(num, int)\n    assert num >= 0\n    \n    return binomial(2*num, num) / (num+1)**2\n",
        "num_ids": 40
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    list1 = re.findall(r'ly[\\s\\S]*?\\b',text)\n    list2 = [i for i in list1 if i.find('ly')!=-1]\n    return list2\n",
        "num_ids": 56
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    list1 = re.findall(r'\\b[a-z]ly\\b', text)\n    return list1\n",
        "num_ids": 32
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\bly\\b', text)\n    for adverb in adverbs:\n        print('{}'.format(adverb))\n",
        "num_ids": 42
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return re.findall(r'[a-z]+ly$',text)\n",
        "num_ids": 22
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    print('\\n'.join(re.findall('(?<=[^aeiouy]+ly$)',text)))\n",
        "num_ids": 32
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    ly_pos = re.finditer(r'(?<![a-z])(?<![^a-z]\\W)\\b(ly)\\b(?![a-z])', text)\n    if ly_pos:\n        for i in ly_pos:\n            print(i)\n    else:\n        print('There is no ly adverb ending with ly in the text')\nfind_adverbs('''I've been dying for years and I'm in a tight spot.\nAnd I don't want to care, or even care.\n''')\n",
        "num_ids": 3
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = re.findall(r'(.*ly)\\s(.*)',text)\n    if len(result) > 0:\n        return result[0]\n    return None\n",
        "num_ids": 45
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = re.compile(r'(?<=[a-z])ly$')\n    match = pattern.findall(text)\n    if len(match) == 0:\n        return None\n    return match[0]\n",
        "num_ids": 56
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # text = input(\"Enter the text\")\n    # pos_word = re.finditer(r'[a-z]ly', text)\n    # for match in pos_word:\n    #     print(match.start())\n    pos_word = re.finditer(r'ly\\b', text)\n    for match in pos_word:\n        print(match.start())\n",
        "num_ids": 92
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\w+ly', text)\n    if adverbs:\n        return''.join(adverbs), len(adverbs)\n    else:\n        return None, None\n",
        "num_ids": 51
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return sorted(items,key=lambda x:x[1])[:n]\n",
        "num_ids": 22
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return [items[i] for i in range(n)]\n",
        "num_ids": 17
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    pq=[]\n    for item in items:\n        heapq.heappush(pq,(item[1],item[0]))\n    print [heapq.heappop(pq) for i in range(n)]\n    return pq\n",
        "num_ids": 65
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    l=[]\n    for i in items:\n        l.append([i[1],i[0]])\n    l=sorted(l)\n    return [i[1] for i in l[:n]]\n",
        "num_ids": 54
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    count = 0\n    out = []\n    while count < n:\n        if not items:\n            break\n        value = max(items)\n        out.append(value)\n        items.remove(value)\n        count += 1\n    return out\ndef expensive_items2(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    count = 0\n    out = []\n    for item in items:\n        heapq.heappush(heap, item)\n    while count < n:\n        value = heapq.heappop(heap)\n        out.append(value)\n        count += 1\n    return out\ndef kth_smallest(lst, k):\n    '''\n    Write a function to find the kth smallest number in a given dataset.\n    '''\n    heap = []\n    for i in lst:\n        heapq.heappush(heap, i)\n    while len(heap) > k:\n        heapq.heappop(heap)\n    return heapq.heappop(heap)\ndef kth_smallest2(lst, k):\n    '''\n    Write a function to find the kth smallest number in a given dataset.\n    '''\n    heap = []\n    for i in lst:\n        heapq.heappush(heap, i)\n    count = 0\n    while count < k:\n        heapq.heappop(heap)\n        count += 1\n    return heapq.heappop(heap)\ndef stock_list(prices):\n    '''\n    Write a function to find the maximum profit in a stock list.\n    '''\n    heap = []\n    for price in prices:\n        heapq.heappush(heap, price)\n    out = 0\n    while len(heap) > 1:\n        first_val = heapq.heappop(heap)\n        second_val = heapq.heappop(heap)\n        out += first_val - second_val\n        heapq.heappush(heap, first_val)\n        heapq.heappush(heap, second_val)\n    return out\ndef stock_list2(prices):\n    '''\n    Write a function to find the maximum profit in a stock list.\n    '''\n    heap = []\n    for price in prices:\n        heapq.heappush(heap, price)\n    out = 0\n    first = heap[0]\n    while len(heap) > 1:\n        first_val = heapq.heappop(heap)\n        second_val = heapq.heappop(heap)\n        if first_val < second_val:\n            out += second_val - first_val\n            first = second_val\n        heapq.heappush(heap, first_val)\n        heapq.heappush(heap, second_val)\n    return out\ndef two_sum(nums,target):\n    '''\n    Write a function that takes in a non-empty array of distinct integers and an integer and returns the index of the first pair of integers whose sum is equal to the given integer.\n    The first integer of the pair should appear earlier in the array.\n    '''\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            if nums[i] + nums[j] == target:\n                return [i,j]\n            elif nums[i] + nums[j] > target:\n                break\n    return None\ndef two_sum2(nums,target):\n    '''\n    Write a function that takes in a non-empty array of distinct integers and an integer and returns the index of the first pair of integers whose sum is equal to the given integer.\n    The first integer of the pair should appear earlier in the array.\n    '''\n    heap = []\n    for i in range(len(nums)):\n        heapq.heappush(heap, (nums[i], i))\n    while heap:\n        first_val, index = heapq.heappop(heap)\n        second_val = target - first_val\n        if second_val in nums:\n            return [index, nums.index(second_val)]\n        if first_val < second_val:\n            heapq.heappush(heap, (second_val, nums.index(second_val)))\n    return None\ndef max_profit(prices):\n    '''\n    Write a function to find the maximum profit in a given dataset.\n    '''\n    max_profit = 0\n    for i in range(len(prices)):\n        for j in range(i+1, len(prices)):\n            temp = prices[j] - prices[i]\n            if temp > max_profit:\n                max_profit = temp\n    return max_profit\ndef max_profit2(prices):\n    '''\n    Write a function to find the maximum profit in a given dataset.\n    '''\n    max_profit = 0\n    for i in range(len(prices)):\n        for j in range(i+1, len(prices)):\n            temp = prices[j] - prices[i]\n            if temp > max_profit:\n                max_profit = temp\n    return max_profit\ndef min_diff(nums):\n    '''\n    Write a function to find the minimum difference between adjacent numbers in an array.\n    '''\n    nums.sort()\n    min_diff = nums[1] - nums[0]\n    for i in range(1,len(nums)):\n        min_diff = min(nums[i]-nums[i-1],min_diff)\n    return min_diff\ndef min_diff2(nums):\n    '''\n    Write a function to find the minimum difference between adjacent numbers in an array.\n    '''\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n    while len(heap) > 1:\n        smallest = heapq.heappop(heap)\n        second_smallest = heapq.heappop(heap)\n        if smallest!= second_smallest:\n            return second_smallest - smallest\n    return None\ndef max_profit3(prices):\n    '''\n    Write a function to find the maximum profit in a given dataset.\n    '''\n    max_profit = 0\n    for i in range(len(prices)):\n        for j in range(i+1, len(prices)):\n            temp = prices[j] - prices[i]\n            if temp > max_profit:\n                max_profit = temp\n    return max_profit\ndef max_profit4(prices):\n    '''\n    Write a function to find the maximum profit in a given dataset.\n    '''\n    max_profit = 0\n    for i in range(len(prices)):\n        for j in range(i+1, len(prices)):\n            temp = prices[j] - prices[i]\n            if temp > max_profit:\n                max_profit = temp\n    return max_profit\ndef check_permutation(s1,s2):\n    '''\n    Write a function to check if two strings are permutations of each other.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    s1_dict = {}\n    s2_dict = {}\n    for i in range(len(s1)):\n        if s1[i] not in s1_dict:\n            s1_dict[s1[i]] = 0\n        s1_dict[s1[i]] += 1\n    for i in range(len(s2)):\n        if s2[i] not in s2_dict:\n            s2_dict[s2[i]] = 0\n        s2_dict[s2[i]] += 1\n    return s1_dict == s2_dict\ndef check_permutation2(s1,s2):\n    '''\n    Write a function to check if two strings are permutations of each other.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    s1_dict = {}\n    s",
        "num_ids": 30
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #find the maximum price and store in a heap\n    #reverse heap and take first n elements\n    #this would give us the top n elements sorted by price\n    #ex: heap = [3,1,4,2,5]\n    #reverse = [5,4,3,2,1]\n    #reverse[0] = 5, reverse[1] = 4, reverse[2] = 3, reverse[3] = 2, reverse[4] = 1\n    #get [5,4,3,2,1]\n",
        "num_ids": 124
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n==1:\n        return list(items)\n    else:\n        items=list(items)\n        items.sort(reverse=True)\n        return items[:n]\n",
        "num_ids": 46
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap,item)\n        elif item > heap[0]:\n            heapq.heappushpop(heap,item)\n    return heap\n    \n    \n    \n    \n",
        "num_ids": 79
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    item_map=dict()\n    for item in items:\n        if item[0] in item_map:\n            item_map[item[0]]+=item[1]\n        else:\n            item_map[item[0]]=item[1]\n    items=item_map.items()\n    return heapq.nlargest(n,items,lambda x:x[1])\n",
        "num_ids": 93
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in items:\n        heapq.heappush(heap,i)\n        if len(heap)>n:\n            heapq.heappop(heap)\n    return heap\n",
        "num_ids": 58
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr_len = len(l)\n    if n > arr_len:\n        print \"can't split array with given number\"\n    else:\n        new_arr = l[n:]\n        l = l[:n]\n        l.extend(new_arr)\n        return l\n",
        "num_ids": 71
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr = []\n    for i in range(0, len(l), n):\n        arr.append(l[i:i+n])\n    return arr\n",
        "num_ids": 40
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    for x in range(n):\n        x = l.pop()\n    return l + l[:n]\n",
        "num_ids": 29
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]\n",
        "num_ids": 15
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr = l[:n]\n    arr += l[n:n+1]\n    return arr\n",
        "num_ids": 27
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # your code here\n    return l[:n] + l[n:n+1] + l[n+1:]\n",
        "num_ids": 32
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]\n",
        "num_ids": 15
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        print \"n is larger than the length of the list\"\n    else:\n        first_part = l[:n]\n        second_part = l[n:]\n        l = second_part + first_part\n    return l\n",
        "num_ids": 65
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:], l[n:]\n",
        "num_ids": 20
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n]+l[n:].reverse()\n    \nprint(split_Arr([1,2,3,4,5,6,7,8,9],2))\n",
        "num_ids": 47
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    new_tuple = tuple(listx)\n    return new_tuple\n",
        "num_ids": 21
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    \n    return tuple(listx)\n",
        "num_ids": 12
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return abs(max_val - min_val)\n",
        "num_ids": 37
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    n = len(nums)\n    return max(nums) - min(nums)\n",
        "num_ids": 25
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums = sorted(nums)\n    return nums[-1] - nums[0]\n",
        "num_ids": 27
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    print(max(nums) - min(nums))\n",
        "num_ids": 17
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    bigger_n = max(nums)\n    smaller_n = min(nums)\n    return bigger_n-smaller_n\n",
        "num_ids": 37
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if nums:\n        return max(nums) - min(nums)\n    else:\n        return None\n    \ndef letter_counter(sentence):\n    '''\n    Write a python function to count the number of characters (character frequency) in a string.\n    '''\n    if sentence:\n        letter_count = {}\n        for letter in sentence:\n            letter_count[letter] = letter_count.get(letter, 0) + 1\n        return letter_count\n    else:\n        return None\n        \ndef factorial(n):\n    '''\n    Write a python function to calculate factorial of a number.\n    '''\n    if n > 0:\n        return n * factorial(n - 1)\n    else:\n        return 1\n    \ndef count_vowels(sentence):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowels = 'aeiou'\n    if sentence:\n        count = 0\n        for letter in sentence:\n            if letter in vowels:\n                count += 1\n        return count\n    else:\n        return None\n        \ndef find_largest_palindrome(n):\n    '''\n    Write a python function to find the largest palindrome number made from the product of two n-digit numbers.\n    '''\n    if n:\n        if n == 1:\n            return 9\n        else:\n            return (9 * find_largest_palindrome(n - 1))\n    else:\n        return None\n    \ndef two_sum(nums, target):\n    '''\n    Write a python function to find if there exists any pair of elements in a given array whose sum is equal to a given number.\n    '''\n    if nums:\n        seen = {}\n        for num in nums:\n            if num in seen:\n                return True\n            else:\n                seen[target - num] = True\n        return False\n    else:\n        return None\n",
        "num_ids": 58
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    \n    # method 1\n    # return max(nums) - min(nums)\n",
        "num_ids": 24
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares_list = []\n    for i in range(a, b + 1):\n        if is_square(i):\n            perfect_squares_list.append(i)\n    return perfect_squares_list\n",
        "num_ids": 56
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    if a < b:\n        for i in range(a, b+1):\n            square = i**2\n            if square > b:\n                break\n            squares.append(square)\n    else:\n        for i in range(b, a+1):\n            square = i**2\n            if square > a:\n                break\n            squares.append(square)\n    return squares\n",
        "num_ids": 101
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    sqrt = int(math.sqrt(b))\n    print sqrt\n    for i in range(sqrt+1):\n        if i*i >= a and i*i <= b:\n            print i*i\n        if i*i > b:\n            break\n",
        "num_ids": 66
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for i in range(a, b):\n        if i*i > b:\n            break\n        elif i*i == b:\n            perfect_squares.append(i)\n    return perfect_squares\n",
        "num_ids": 61
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    s = a\n    while s <= b:\n        root = int(s**0.5)\n        if root**2 == s:\n            print s\n        s += 1\n",
        "num_ids": 44
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [i for i in range(a,b+1) if i**0.5 % 1 == 0]\n",
        "num_ids": 29
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    \n    perfect_squares = []\n    \n    if a == b:\n        perfect_squares.append(a)\n    elif a > b:\n        for i in range(a, b, -1):\n            perfect_squares.append(i**2)\n    else:\n        for i in range(a, b):\n            perfect_squares.append(i**2)\n",
        "num_ids": 95
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # for integer a\n    if a*a == b:\n        return 1\n    elif a*a > b:\n        return 0\n    else:\n        return perfect_squares(a, b-a*a) + perfect_squares(a+1, b)\n    \ndef count_substrings(string):\n    '''\n    Given a string, count the number of non-empty substrings and return the result.\n    '''\n    # for string s\n    if string == '':\n        return 0\n    elif string[0]!='':\n        return 1 + count_substrings(string[1:])\n    else:\n        return count_substrings(string[1:])\n",
        "num_ids": 63
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    list_perfect_squares = []\n    for x in range(a,b+1):\n        if (x**(.5))%1 == 0:\n            list_perfect_squares.append(x**2)\n    return list_perfect_squares\n",
        "num_ids": 64
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a <= 0 or b <= 0:\n        return []\n    squares = []\n    if a < b:\n        for num in range(a, b + 1):\n            if num ** 0.5 == int(num ** 0.5):\n                squares.append(num)\n    else:\n        for num in range(a, b - 1, -1):\n            if num ** 0.5 == int(num ** 0.5):\n                squares.append(num)\n    return squares\n",
        "num_ids": 119
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = int(x)\n    y = int(y)\n    if x>0 and y>0:\n        return x,y\n    elif x>0 and y<0:\n        return x,2*y\n    elif x<0 and y>0:\n        return 2*x,y\n    else:\n        return 2*x,-y\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x = int(x)\n    y = int(y)\n    if x>0 and y>0:\n        return x,y\n    elif x>0 and y<0:\n        return x,2*y\n    elif x<0 and y>0:\n        return 2*x,y\n    else:\n        return 2*x,-y\ndef cartesian_distance(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points in 2D space.\n    '''\n    return (x2-x1)**2+(y2-y1)**2\ndef polar_distance(r1,theta1,r2,theta2):\n    '''\n    Write a function to calculate the distance between two points on a sphere in polar coordinates.\n    '''\n    return cmath.sqrt((r2-r1)*(r2-r1)+(theta2-theta1)*(theta2-theta1))\ndef cartesian_to_polar(x1,y1,x2,y2):\n    '''\n    Write a function to convert a point from cartesian coordinates to polar coordinates.\n    '''\n    x1 = float(x1)\n    y1 = float(y1)\n    x2 = float(x2)\n    y2 = float(y2)\n    if x1==0 and y1==0 and x2==0 and y2==0:\n        return 0,0\n    elif x1==0 and y1==0 and x2!=0 and y2!=0:\n        return x2,-y2\n    elif x1!=0 and y1==0 and x2==0 and y2!=0:\n        return y2,x2\n    elif x1!=0 and y1!=0 and x2==0 and y2==0:\n        return y1,-x1\n    elif x1!=0 and y1!=0 and x2!=0 and y2==0:\n        return polar_distance(x1,0,x2,0)\n    elif x1!=0 and y1!=0 and x2!=0 and y2!=0:\n        return cmath.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1))\n    else:\n        return 0\ndef polar_to_cartesian(r,theta,x1,y1):\n    '''\n    Write a function to convert a point from polar coordinates to cartesian coordinates.\n    '''\n    r = float(r)\n    theta = float(theta)\n    x1 = float(x1)\n    y1 = float(y1)\n    if r==0 and theta==0:\n        return 0,0\n    elif r==0 and theta!=0:\n        return 0,x1*cmath.sin(theta)\n    elif r!=0 and theta==0:\n        return y1*cmath.cos(r),0\n    elif r!=0 and theta!=0:\n        return (x1*cmath.cos(r)*cmath.sin(theta))+(y1*cmath.sin(r)*cmath.sin(theta))\n    else:\n        return 0\ndef rectangle_area(a,b):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    a = int(a)\n    b = int(b)\n    return a*b\ndef circle_area(r):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    r = int(r)\n    return cmath.pi*r*r\ndef intersection_area(x1,y1,x2,y2,r,t):\n    '''\n    Write a function to calculate the area of the intersection of a circle and a rectangle.\n    '''\n    x1 = int(x1)\n    y1 = int(y1)\n    x2 = int(x2)\n    y2 = int(y2)\n    r = int(r)\n    t = int(t)\n    a = rectangle_area(x2,y2)\n    b = rectangle_area(x1,y1)\n    c = rectangle_area(r,t)\n    if c>a and c>b:\n        if a>b:\n            return rectangle_area(x2,y2)\n        elif a<b:\n            return rectangle_area(x1,y1)\n    elif c>a and c<b:\n        return rectangle_area(r,t)\n    elif c<a and c<b:\n        return rectangle_area(x1,y1)\n    else:\n        return 0\ndef circular_overlap(r1,theta1,r2,theta2):\n    '''\n    Write a function to calculate the area of the overlap between two circles.\n    '''\n    r1 = int(r1)\n    theta1 = int(theta1)\n    r2 = int(r2)\n    theta2 = int(theta2)\n    if theta1!=theta2 and r1!=r2:\n        return rectangle_area(r1,theta1,r2,theta2)\n    elif theta1==theta2 and r1==r2:\n        return 0\n    elif theta1==theta2 and r1!=r2:\n        return circle_area(r1)\n    elif theta1!=theta2 and r1==r2:\n        return circle_area(r1)*2\n    else:\n        return rectangle_area(r1,theta1,r2,theta2)*2\ndef rectangle_overlap(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to calculate the area of the overlap between two rectangles.\n    '''\n    x1 = int(x1)\n    y1 = int(y1)\n    x2 = int(x2)\n    y2 = int(y2)\n    x3 = int(x3)\n    y3 = int(y3)\n    x4 = int(x4)\n    y4 = int(y4)\n    if x1==x2 and y1==y2 and x3==x4 and y3==y4:\n        return 0\n    elif x1!=x2 and y1==y2 and x3==x4 and y3==y4:\n        return rectangle_area(x2,y2)\n    elif x1==x2 and y1!=y2 and x3==x4 and y3==y4:\n        return rectangle_area(x1,y1)\n    elif x1!=x2 and y1!=y2 and x3==x4 and y3==y4:\n        return rectangle_area(x2,y2)\n    elif x1==x2 and y1!=y2 and x3!=x4 and y3==y4:\n        return rectangle_area(x1,y1)\n    elif x1!=x2 and y1==y2 and x3!=x4 and y3!=y4:\n        return rectangle_area(x2,y2)\n    elif x1==x2 and y1==y2 and x3!=x4 and y3!=y4:\n        return rectangle_area(x1,y1)\n    elif x1!=x2 and y1!=y2 and x3==x4 and y3!=y4:\n        return rectangle_area(x2,y2)\n    elif x1==x2 and y1==y2 and x3!=x4 and y3==y4:\n        return rectangle_area(x1,y1)\n    e",
        "num_ids": 458
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return complex(x,y)\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return complex(x,y)\n",
        "num_ids": 11
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import cmath\n    def convert(theta, r):\n        theta = cmath.radians(theta)\n        return r*cmath.rect(1, theta)\n    \n    return convert(x,y)\n",
        "num_ids": 57
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    p=[]\n    for i in range(len(x)):\n        t=complex(x[i],y[i])\n        p.append(t)\n    return p\n",
        "num_ids": 45
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*math.cos(y)+y*math.sin(y)\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r=math.sqrt(x**2+y**2)\n    t=math.atan(y/x)\n    return r,t\ndef convert_cart(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x_mod=x**2+y**2\n    theta=math.atan(y/x)\n    r=math.sqrt(x_mod)\n    return r,theta\n",
        "num_ids": 48
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=int(x[0])\n    theta=int(x[1])\n    res=[r*math.cos(theta),r*math.sin(theta)]\n    return res\n",
        "num_ids": 49
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*x, y*y\ndef polar_rect_2(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x**0.5)*(y**0.5), (x**0.5)*(y**0.5)\ndef julia_set(c,x,y):\n    '''\n    Write a function that takes a complex number, c, and a real number, x, y and returns the number of iterations it takes for the function to escape,\n    from the point (x,y). The function should begin by writing x,y = 0,0. Then it should draw the point x,y using the function draw_point, \n    and draw the point x,y on the surface using the function draw_line. The function should then draw a circle centered at the point (x,y), \n    radius 1, and draw the point x,y on the surface using the function draw_point. \n    Then, the function should draw a circle centered at the point (x,y), radius 2, and draw the point x,y on the surface using the function draw_point.\n    The function should repeat this for 3 different radii, 1, 2 and 3. The function should use the function draw_point, draw_circle, and draw_line \n    three times, and it should return the number of iterations for each of these scenarios.\n    '''\n    i = 0\n    while i < 3:\n        if i == 0:\n            draw_point(x,y)\n            draw_circle(x,y,1)\n            draw_point(x,y)\n        elif i == 1:\n            draw_point(x,y)\n            draw_circle(x,y,2)\n            draw_point(x,y)\n        else:\n            draw_point(x,y)\n            draw_circle(x,y,3)\n            draw_point(x,y)\n        i += 1\n    return i\ndef draw_point(x,y):\n    '''\n    takes in 2 numbers, x,y, and prints out the number of iterations it takes for the function to escape,\n    from the point (x,y). The function should begin by writing x,y = 0,0. Then it should draw the point x,y using the function draw_point, \n    and draw the point x,y on the surface using the function draw_line. The function should then draw a circle centered at the point (x,y), \n    radius 1, and draw the point x,y on the surface using the function draw_point. \n    Then, the function should draw a circle centered at the point (x,y), radius 2, and draw the point x,y on the surface using the function draw_point.\n    The function should repeat this for 3 different radii, 1, 2 and 3. The function should use the function draw_point, draw_circle, and draw_line \n    three times, and it should return the number of iterations for each of these scenarios.\n    '''\n    print(i)\ndef draw_circle(x,y,r):\n    '''\n    takes in 3 numbers, x,y,r, and prints out the number of iterations it takes for the function to escape,\n    from the point (x,y). The function should begin by writing x,y = 0,0. Then it should draw the point x,y using the function draw_point, \n    and draw the point x,y on the surface using the function draw_line. The function should then draw a circle centered at the point (x,y), \n    radius r, and draw the point x,y on the surface using the function draw_point. \n    Then, the function should draw a circle centered at the point (x,y), radius 2, and draw the point x,y on the surface using the function draw_point.\n    The function should repeat this for 3 different radii, 1, 2 and 3. The function should use the function draw_point, draw_circle, and draw_line \n    three times, and it should return the number of iterations for each of these scenarios.\n    '''\n    i = 0\n    while i < 3:\n        if i == 0:\n            draw_point(x,y)\n            draw_circle(x,y,r)\n            draw_point(x,y)\n        elif i == 1:\n            draw_point(x,y)\n            draw_circle(x,y,r)\n            draw_point(x,y)\n        else:\n            draw_point(x,y)\n            draw_circle(x,y,r)\n            draw_point(x,y)\n        i += 1\n    return i\ndef triangle_polar_rect_2(a,b,c):\n    '''\n    takes in 3 numbers, a,b,c, and prints out the number of iterations it takes for the function to escape,\n    from the point (a,b). The function should begin by writing a,b = 0,0. Then it should draw the point a,b using the function draw_point, \n    and draw the point a,b on the surface using the function draw_line. The function should then draw a triangle, with sides a,b,c, and draw the point a,b \n    on the surface using the function draw_point. \n    Then, the function should draw a circle centered at the point (a,b), radius 1, and draw the point a,b on the surface using the function draw_point.\n    The function should repeat this for 3 different radii, 1, 2 and 3. The function should use the function draw_point, draw_circle, and draw_line \n    three times, and it should return the number of iterations for each of these scenarios.\n    '''\n    i = 0\n    while i < 3:\n        if i == 0:\n            draw_point(a,b)\n            draw_line(a,b,c)\n            draw_point(a,b)\n        elif i == 1:\n            draw_point(a,b)\n            draw_line(a,b,c)\n            draw_point(a,b)\n        else:\n            draw_point(a,b)\n            draw_line(a,b,c)\n            draw_point(a,b)\n        i += 1\n    return i\ndef triangle_polar_rect(a,b,c):\n    '''\n    takes in 3 numbers, a,b,c, and prints out the number of iterations it takes for the function to escape,\n    from the point (a,b). The function should begin by writing a,b = 0,0. Then it should draw the point a,b using the function draw_point, \n    and draw the point a,b on the surface using the function draw_line. The function should then draw a triangle, with sides a,b,c, and draw the point a,b \n    on the surface using the function draw_point. \n    Then, the function should draw a circle centered at the point (a,b), radius 1, and draw the point a,b on the surface using the function draw_point.\n    The function should repeat this for 3 different radii, 1, 2 and 3. The function should use the function draw_point, draw_circle, and draw_line \n    three times, and it should return the number of iterations for each of these scenarios.\n    '''\n    i = 0\n    while i < 3:\n        if i == 0:\n            draw_point(a,b)\n            draw_line(a,b,c)\n            draw_point(a,b)\n        elif i == 1:\n            draw_point(a,b)\n            draw_line(a,b,c)\n            draw_point(a,b)\n        else:\n            draw_point(a,b)\n            draw_line(a,b,c)\n            draw_point(a,b)\n        i += 1\n    return i\ndef triangle_rect_2(a,b,c):\n    '''\n    takes in 3 numbers, a,b,c, and prints out the number of iterations it takes for the function to escape,\n    from the point (a,b). The function should begin by writing a,b = 0,0. Then it should draw the point a,b using the function draw_point, \n    and draw the point a,b on the surface using the function draw_line. The function should then draw a triangle, with sides a,b,c, and draw the point a,b \n    on the surface using the function draw_point. \n    Then, the function should draw a circle centered at the point (",
        "num_ids": 142
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = x[0]\n    b = x[1]\n    r = y[0]\n    #c = y[1]\n    c = y[2]\n    #print c\n    x_out = (r*(cmath.exp(1j*b))) + a\n    return x_out\n",
        "num_ids": 76
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = abs(x)+abs(y)\n    if y < 0:\n        theta = cmath.acos(x/r)\n    elif x < 0:\n        theta = cmath.asin(y/r)\n    else:\n        theta = cmath.acos(x/r)\n    if x < 0:\n        theta = -theta\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x,y\n",
        "num_ids": 126
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    from math import sqrt,atan2\n    try:\n        r=sqrt(x**2+y**2)\n        theta=atan2(y,x)\n        return r,theta\n    except:\n        return 'Invalid'\n",
        "num_ids": 60
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    size = len(newList)\n    if size > 1:\n        newList[0], newList[size-1] = newList[size-1], newList[0]\n    return newList\n",
        "num_ids": 50
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    size = len(newList)\n    newList[0],newList[size-1] = newList[size-1],newList[0]\n    return newList\n",
        "num_ids": 43
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) <= 1:\n        return newList\n    else:\n        first,*rest = newList\n        last,*_ = rest\n        newList = [last,*rest,first]\n        return swap_List(newList)\n",
        "num_ids": 62
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "num_ids": 32
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if newList == []:\n        return []\n    else:\n        newList.insert(0, newList.pop())\n        return newList\n",
        "num_ids": 37
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n",
        "num_ids": 33
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "num_ids": 32
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = a\n    return newList\n",
        "num_ids": 48
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) > 1:\n        newList[0],newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n        return newList\n    else:\n        return newList\n",
        "num_ids": 60
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n",
        "num_ids": 40
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return ((factorial(n)/(factorial(k)*factorial(n-k)))\n            *(1/((factorial(k)))))\n",
        "num_ids": 37
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    temp = 1\n    for i in range(1,k+1):\n        temp = temp * (n-i+1) / i\n    return temp\n    \ndef binomial_coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k==0:\n        return 1\n    if k==n:\n        return 1\n    else:\n        return (binomial_coeff(n-1,k-1) + binomial_coeff(n-1,k))\n",
        "num_ids": 59
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = [[0 for x in range(k+1)] for x in range(n+1)] \n    for i in range(n+1): \n        for j in range(min(i,k)+1): \n            if j == 0 or j == i: \n                C[i][j] = 1\n            else: \n                C[i][j] = C[i-1][j-1] + C[i-1][j] \n    return C[n][k] \n",
        "num_ids": 121
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = [0 for i in xrange(k+1)]\n    C[0] = 1\n    for i in xrange(1,n+1):\n        j = min(i,k)\n        while j>0:\n            C[j] += C[j-1]\n            j -= 1\n    return C[k]\ndef matrix_ChainMultiplication(d):\n    '''\n    Write a function that takes as input a dictionary representing a chain of matrices as follows:\n    d = {(1,2) : 5, (1,3) : 1, (2,3) : 7, (1,4) : 1, (2,4) : 3, (3,4) : 6, (3,5) : 2, (4,5) : 8, (4,6) : 2, (5,6) : 9, (2,7) : 7, (3,7) : 1, (6,7) : 3, (2,8) : 2, (5,8) : 3, (6,8) : 4, (7,8) : 2, (1,9) : 1}\n    and returns the number of minimum additions needed to compute the chain.\n    '''\n    n = len(d)\n    m = [[0 for x in xrange(n)] for y in xrange(n)]\n    s = [[0 for x in xrange(n)] for y in xrange(n)]\n    for i in xrange(1,n):\n        m[i][i] = 0\n    for L in xrange(2,n):\n        for i in xrange(1,n-L+1):\n            j = i+L-1\n            m[i][j],s[i][j] = float(\"inf\"),float(\"inf\")\n            for k in xrange(i,j):\n                q = m[i][k] + m[k+1][j] + d[(i,k)]*d[(k+1,j)]\n                if q < m[i][j]:\n                    m[i][j],s[i][j] = q,k\n    return m,s\ndef matrix_ChainMultiplication_SpaceEfficient(d):\n    n = len(d)\n    m = [[0 for x in xrange(n)] for y in xrange(n)]\n    s = [[0 for x in xrange(n)] for y in xrange(n)]\n    for i in xrange(n):\n        m[i][i],s[i][i] = 0,0\n    for L in xrange(2,n):\n        for i in xrange(1,n-L+1):\n            j = i+L-1\n            m[i][j],s[i][j] = float(\"inf\"),float(\"inf\")\n            for k in xrange(i,j):\n                q = m[i][k] + m[k+1][j] + d[(i,k)]*d[(k+1,j)]\n                if q < m[i][j]:\n                    m[i][j] = q\n                    s[i][j] = k\n    return m,s\ndef LCS(x,y,s,t):\n    '''\n    Write a function to find the length of the longest common subsequence of two strings.\n    '''\n    n,m = len(x),len(y)\n    L = [[0 for i in xrange(m+1)] for j in xrange(n+1)]\n    for i in xrange(n+1):\n        for j in xrange(m+1):\n            if i==0 or j==0:\n                L[i][j] = 0\n            elif x[i-1]==y[j-1]:\n                L[i][j] = L[i-1][j-1]+1\n            else:\n                L[i][j] = max(L[i-1][j],L[i][j-1])\n    return L[n][m]\ndef longestCommonSubsequence(x,y):\n    '''\n    Write a python function to find the length of the longest common subsequence of two strings.\n    '''\n    n,m = len(x),len(y)\n    L = [[0 for i in xrange(m+1)] for j in xrange(n+1)]\n    for i in xrange(1,n+1):\n        for j in xrange(1,m+1):\n            if x[i-1]==y[j-1]:\n                L[i][j] = L[i-1][j-1]+1\n            else:\n                L[i][j] = max(L[i-1][j],L[i][j-1])\n    return L[n][m]\ndef LongestCommonSubsequence(str1,str2):\n    '''\n    Write a python function to find the length of the longest common subsequence of two strings.\n    '''\n    n,m = len(str1),len(str2)\n    L = [[0 for i in xrange(m+1)] for j in xrange(n+1)]\n    for i in xrange(1,n+1):\n        for j in xrange(1,m+1):\n            if str1[i-1]==str2[j-1]:\n                L[i][j] = L[i-1][j-1]+1\n            else:\n                L[i][j] = max(L[i-1][j],L[i][j-1])\n    return L[n][m]\ndef PatternMatch(str1,str2):\n    '''\n    Write a python function to find the longest pattern match in a string.\n    '''\n    n,m = len(str1),len(str2)\n    L = [[0 for i in xrange(m+1)] for j in xrange(n+1)]\n    for i in xrange(1,n+1):\n        for j in xrange(1,m+1):\n            if str1[i-1]==str2[j-1]:\n                L[i][j] = L[i-1][j-1]+1\n            else:\n                L[i][j] = max(L[i-1][j],L[i][j-1])\n    return L[n][m]\ndef Viterbi(P,s,i,j,V,Pi):\n    '''\n    Write a python function to find the most likely sequence of states from a hidden Markov model.\n    '''\n    if i==0 or j==0:\n        return\n    if s[i][j] == 'i':\n        V[i][j] = Pi[i][j]*P[i][j][s[i-1][j-1]]\n        Viterbi(P,s,i-1,j-1,V,Pi)\n        #print s[i-1][j-1]\n    else:\n        V[i][j] = max(V[i-1][j],V[i][j-1])\n        Viterbi(P,s,i-1,j,V,Pi)\n    return\ndef Viterbi_Algorithm(P,s):\n    n,m = len(P),len(s)\n    V = [[0 for i in xrange(m)] for j in xrange(n)]\n    Pi = [[0 for i in xrange(m)] for j in xrange(n)]\n    V[0][0],Pi[0][0] = P[0][0]['i'],P[0][0]['i']\n    Viterbi(P,s,n-1,m-1,V,Pi)\n    i,j = n-1,m-1\n    p = []\n    while i>0 or j>0:\n        if j>0 and j>i:\n            p.append(s[i][j])\n            j = j-1\n        else:\n            i = i-1\n    p.reverse()\n    return ''.join(p)\ndef RNA_Pairing(p,s):\n    n,m = len(p),len(s)\n    pi = [0 for i in xrange(m)]\n    P = [[0 for i in xrange(m+1)] for j in xrange(n+1)]\n    for i in xrange(1,n+1):\n        P[i][0] = 0\n        pi[i-1] ",
        "num_ids": 461
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(min(n,k),0,-1): \n        res = res * i\n    return res\n",
        "num_ids": 36
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    b = [0]*(n+1)\n    b[0] = 1\n    b[1] = 1\n    for i in range(2,n+1):\n        b[i] = b[i-1] + b[i-2]\n    return b[k]\n",
        "num_ids": 71
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(k):\n        res = res * (n - i)\n        res = res // (i + 1)\n    return res\n",
        "num_ids": 42
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    binoCoeff = [0]*(k+1)\n    binoCoeff[0] = 1\n    for i in range(1,n+1):\n        for j in range(min(i,k),0,-1):\n            binoCoeff[j] += binoCoeff[j-1]\n    return binoCoeff[k]\n",
        "num_ids": 93
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(1,k+1):\n        res = res * (n-i+1) / i\n    return res\n",
        "num_ids": 39
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    if k > n:\n        return 0\n    for i in range(0,k):\n        res = res * (n-i)\n        res = res//(i+1)\n    return res\n",
        "num_ids": 55
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'\\.(\\d+)\\..*',r'\\1',ip)\n",
        "num_ids": 27
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip.count('.') == 3 and ip.startswith('0'):\n        return ip.lstrip('0')\n    else:\n        return ip\ndef get_int_ip(ip):\n    ip_list = ip.split('.')\n    return int(ip_list[0])*256*256*256+int(ip_list[1])*256*256+int(ip_list[2])*256+int(ip_list[3])\ndef strip_leading_zero(num):\n    if num < 10:\n        return \"0\"+str(num)\n    else:\n        return str(num)\ndef get_ip_range(start_ip, end_ip):\n    '''\n    Write a function that takes a start IP address in the form of a string\n    and an end IP address in the form of a string and returns a list of\n    all IP addresses in the range (including the start and end IP addresses\n    themselves).\n    '''\n    start_ip_int = get_int_ip(start_ip)\n    end_ip_int = get_int_ip(end_ip)\n    ip_list = []\n    for i in range(start_ip_int, end_ip_int+1):\n        ip_list.append(strip_leading_zero(i))\n    return ip_list\ndef get_ip_range_string(start_ip, end_ip):\n    '''\n    Write a function that takes a start IP address in the form of a string\n    and an end IP address in the form of a string and returns a string\n    that contains the concatenation of all IP addresses (in CIDR notation)\n    in the range (including the start and end IP addresses themselves)\n    that are reachable from the start IP address.\n    '''\n    ip_list = get_ip_range(start_ip, end_ip)\n    ip_list = map(lambda ip:ip+'/32', ip_list)\n    return ','.join(ip_list)\ndef get_ip_network_range(ip, cidr_mask):\n    '''\n    Write a function that takes an IP address in the form of a string and\n    a CIDR mask as an integer and returns the network IP address as a string\n    for the CIDR mask (in CIDR notation).\n    '''\n    ip_int = get_int_ip(ip)\n    mask_int = 2**(32-cidr_mask) - 1\n    return strip_leading_zero(ip_int & mask_int)\ndef get_ip_network_range_string(ip, cidr_mask):\n    '''\n    Write a function that takes an IP address in the form of a string and\n    a CIDR mask as an integer and returns the network IP address as a string\n    for the CIDR mask (in CIDR notation).\n    '''\n    ip_network_range = get_ip_network_range(ip, cidr_mask)\n    return get_ip_range_string(ip_network_range, cidr_mask)\ndef get_ip_broadcast_range(ip, cidr_mask):\n    '''\n    Write a function that takes an IP address in the form of a string and\n    a CIDR mask as an integer and returns the broadcast IP address as a string\n    for the CIDR mask (in CIDR notation).\n    '''\n    ip_int = get_int_ip(ip)\n    mask_int = 2**(32-cidr_mask) - 1\n    return strip_leading_zero(ip_int | ~mask_int)\ndef get_ip_broadcast_range_string(ip, cidr_mask):\n    '''\n    Write a function that takes an IP address in the form of a string and\n    a CIDR mask as an integer and returns the broadcast IP address as a string\n    for the CIDR mask (in CIDR notation).\n    '''\n    ip_network_range = get_ip_network_range(ip, cidr_mask)\n    ip_broadcast_range = get_ip_broadcast_range(ip_network_range, cidr_mask)\n    return get_ip_range_string(ip_broadcast_range, cidr_mask)\ndef get_ip_network_cidr(ip, cidr_mask):\n    '''\n    Write a function that takes an IP address in the form of a string and\n    a CIDR mask as an integer and returns the network IP address as a string\n    for the CIDR mask (in CIDR notation).\n    '''\n    ip_int = get_int_ip(ip)\n    mask_int = 2**(32-cidr_mask) - 1\n    return strip_leading_zero(ip_int & mask_int)\ndef get_ip_network_cidr_string(ip, cidr_mask):\n    '''\n    Write a function that takes an IP address in the form of a string and\n    a CIDR mask as an integer and returns the network IP address as a string\n    for the CIDR mask (in CIDR notation).\n    '''\n    ip_network_cidr = get_ip_network_cidr(ip, cidr_mask)\n    return get_ip_range_string(ip_network_cidr, cidr_mask)\ndef get_ip_broadcast_cidr(ip, cidr_mask):\n    '''\n    Write a function that takes an IP address in the form of a string and\n    a CIDR mask as an integer and returns the broadcast IP address as a string\n    for the CIDR mask (in CIDR notation).\n    '''\n    ip_int = get_int_ip(ip)\n    mask_int = 2**(32-cidr_mask) - 1\n    return strip_leading_zero(ip_int | ~mask_int)\ndef get_ip_broadcast_cidr_string(ip, cidr_mask):\n    '''\n    Write a function that takes an IP address in the form of a string and\n    a CIDR mask as an integer and returns the broadcast IP address as a string\n    for the CIDR mask (in CIDR notation).\n    '''\n    ip_broadcast_cidr = get_ip_broadcast_cidr(ip, cidr_mask)\n    return get_ip_range_string(ip_broadcast_cidr, cidr_mask)\ndef get_ip_mask_range(ip, cidr_mask):\n    '''\n    Write a function that takes an IP address in the form of a string and\n    a CIDR mask as an integer and returns the network IP address as a string\n    for the CIDR mask (in CIDR notation).\n    '''\n    ip_int = get_int_ip(ip)\n    mask_int = 2**(32-cidr_mask) - 1\n    return strip_leading_zero(ip_int & mask_int)\ndef get_ip_mask_range_string(ip, cidr_mask):\n    '''\n    Write a function that takes an IP address in the form of a string and\n    a CIDR mask as an integer and returns the network IP address as a string\n    for the CIDR mask (in CIDR notation).\n    '''\n    ip_mask_range = get_ip_mask_range(ip, cidr_mask)\n    return get_ip_range_string(ip_mask_range, cidr_mask)\ndef get_ip_mask_cidr(ip, cidr_mask):\n    '''\n    Write a function that takes an IP address in the form of a string and\n    a CIDR mask as an integer and returns the network IP address as a string\n    for the CIDR mask (in CIDR notation).\n    '''\n    ip_int = get_int_ip(ip)\n    mask_int = 2**(32-cidr_mask) - 1\n    return strip_leading_zero(ip_int & mask_int)\ndef get_ip_mask_cidr_string(ip, cidr_mask):\n    '''\n    Write a function that takes an IP address in the form of a string and\n    a CIDR mask as an integer and returns the network IP address as a string\n    for the CIDR mask (in CIDR notation).\n    '''\n    ip",
        "num_ids": 4
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)\n",
        "num_ids": 17
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    try:\n        ipaddress = list(map(int, ip.split('.')))\n        ipaddress[3] = ipaddress[3] - ipaddress[3] % 256\n        ipaddress[2] = ipaddress[2] - ipaddress[2] % 256\n        ipaddress[1] = ipaddress[1] - ipaddress[1] % 256\n        ipaddress[0] = ipaddress[0] - ipaddress[0] % 256\n        ipaddress = '.'.join(str(i) for i in ipaddress)\n        return ipaddress\n    except:\n        return ip\n",
        "num_ids": 140
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if(ip[0] == '0'):\n        return ip[1:]\n    return ip\ndef convert_ip_mask_to_int(ip, mask):\n    '''\n    Write a function to convert an ip address and its mask to an integer.\n    '''\n    ip_mask = ip + '/' + mask\n    ip_mask_int = int(ip_mask.split('/')[0])\n    return ip_mask_int\ndef convert_int_ip_mask_to_ip(ip_mask_int):\n    '''\n    Write a function to convert an ip address and its mask to an integer.\n    '''\n    ip = str(ip_mask_int)\n    mask = 32 - int(ip_mask_int.split('/')[1])\n    ip_mask = ip + '/' + str(mask)\n    return ip_mask\ndef check_valid_ip(ip):\n    '''\n    Write a function to check whether an ip address is valid.\n    '''\n    ip_mask = ip.split('/')\n    ip = ip_mask[0]\n    mask = ip_mask[1]\n    if(len(ip.split('.'))!= 4):\n        return False\n    if(mask == '32'):\n        return True\n    if(mask == '0'):\n        return False\n    if(int(mask) > 32):\n        return False\n    # here we use a regex to check the correctness of the ip address.\n    regex = re.compile(\"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\")\n    if(regex.search(ip) == None):\n        return False\n    # here we use a regex to check the correctness of the ip address.\n    regex = re.compile(\"^(([01]?[0-9][0-9]?)(\\.([01]?[0-9][0-9]?)){2}){2}$\")\n    if(regex.search(mask) == None):\n        return False\n    return True\ndef is_in_local_network(ip, net):\n    '''\n    Write a function to check whether an ip address is within the same network as the one passed in.\n    '''\n    ip_mask = ip.split('/')\n    ip = ip_mask[0]\n    mask = ip_mask[1]\n    ip_mask_int = convert_ip_mask_to_int(ip, mask)\n    net_mask_int = convert_ip_mask_to_int(net, 32)\n    if(net_mask_int > ip_mask_int):\n        return False\n    return True\ndef test_is_in_local_network():\n    '''\n    Write a function to check whether an ip address is within the same network as the one passed in.\n    '''\n    ip = '10.255.255.255'\n    net = '10.0.0.0'\n    assert(is_in_local_network(ip, net))\n    ip = '10.0.0.0'\n    net = '10.0.0.0'\n    assert(is_in_local_network(ip, net))\n    ip = '10.255.255.255'\n    net = '10.0.0.0'\n    assert(not is_in_local_network(ip, net))\n    ip = '10.0.0.0'\n    net = '10.0.0.0'\n    assert(not is_in_local_network(ip, net))\ndef convert_ip_to_network_string(ip, mask):\n    '''\n    Write a function to convert an ip address and its mask to an integer.\n    '''\n    ip_mask = ip + '/' + mask\n    ip_mask_int = convert_ip_mask_to_int(ip, mask)\n    network_string = ''\n    for i in range(4):\n        if(ip_mask_int % 2 == 1):\n            network_string += '1'\n        ip_mask_int = ip_mask_int >> 1\n    return network_string\ndef convert_network_string_to_ip(network_string):\n    '''\n    Write a function to convert an ip address and its mask to an integer.\n    '''\n    network_int = int(network_string, 2)\n    network_ip = convert_int_ip_mask_to_ip(network_int)\n    return network_ip\ndef convert_network_to_network_string(network_ip, mask):\n    '''\n    Write a function to convert an ip address and its mask to an integer.\n    '''\n    network_string = convert_ip_to_network_string(network_ip, mask)\n    return network_string\ndef test_convert_network_to_network_string():\n    '''\n    Write a function to convert an ip address and its mask to an integer.\n    '''\n    network_ip = '10.0.0.0'\n    mask = '32'\n    assert(convert_network_to_network_string(network_ip, mask) == '10.0.0.0/32')\n    network_ip = '10.0.0.0'\n    mask = '0'\n    assert(convert_network_to_network_string(network_ip, mask) == '0.0.0.0/0')\n    network_ip = '10.0.0.0'\n    mask = '1'\n    assert(convert_network_to_network_string(network_ip, mask) == '10.0.0.0/1')\n    network_ip = '10.0.0.0'\n    mask = '255'\n    assert(convert_network_to_network_string(network_ip, mask) == '10.0.0.0/255')\n    network_ip = '10.0.0.0'\n    mask = '256'\n    assert(convert_network_to_network_string(network_ip, mask) == '10.0.0.0/256')\ndef convert_mask_to_wildcard_mask(mask):\n    '''\n    Write a function to convert a mask to a wildcard mask.\n    '''\n    wildcard_mask = ''\n    for i in range(mask):\n        if(mask % 2 == 1):\n            wildcard_mask += '1'\n        mask = mask >> 1\n    return wildcard_mask\ndef test_convert_mask_to_wildcard_mask():\n    '''\n    Write a function to convert a mask to a wildcard mask.\n    '''\n    assert(convert_mask_to_wildcard_mask(0) == '0.0.0.0')\n    assert(convert_mask_to_wildcard_mask(1) == '0.0.0.1')\n    assert(convert_mask_to_wildcard_mask(2) == '0.0.0.0')\n    assert(convert_mask_to_wildcard_mask(3) == '0.0.0.0')\n    assert(convert_mask_to_wildcard_mask(4) == '0.0.0.0')\n    assert(convert_mask_to_wildcard_mask(5) == '0.0.0.0')\n    assert(convert_mask_to_wildcard_mask(6) == '0.0.0.0')\n    assert(convert_mask_to_wildcard_mask(7) == '0.0.0.0')\n    assert(convert_mask_to_wildcard_mask(8) == '0.0.0.0')\n    assert(convert_mask_to_wildcard_mask(9) == '0.0.0.0')\n    assert(convert_mask_to_wildcard_mask(10) == '0.0.0.0')\n    assert(convert_mask_to_wildcard_mask(11) == '0.0.0.0')\n    assert(convert_mask_to_wildcard_mask(12) == '0.0.0.0')\n    assert(convert_mask_to_wildcard_mask(13) == ",
        "num_ids": 385
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    n = len(ip)\n    for i in range(n):\n        if ip[i] == '.':\n            for j in range(i,n):\n                if ip[j]!= '0':\n                    break\n                elif j == n-1:\n                    ip = ip[:i]\n    return ip\ndef ip_to_num(ip):\n    '''\n    Write a function to convert a string to a number.\n    '''\n    if re.match(r'^\\d+?\\.\\d+?\\.\\d+?\\.\\d+?$',ip):\n        n = len(ip)\n        str_num = 0\n        for i in range(n):\n            if ip[i] == '.':\n                str_num += (256**(n-i-1))*int(ip[i+1:])\n        return str_num\n    else:\n        return -1\ndef num_to_ip(num):\n    '''\n    Write a function to convert a number to an ip address.\n    '''\n    if num < 0:\n        return -1\n    n = len(str(num))\n    ip = ''\n    for i in range(n/8):\n        ip += str(num % 256) + '.'\n        num /= 256\n    return ip[:-1]\ndef is_valid_ip(ip):\n    '''\n    Write a function to check the validity of an ip address.\n    '''\n    n = len(ip)\n    for i in range(n):\n        if ip[i] == '.':\n            for j in range(i,n):\n                if ip[j] == '0' and j!= n-1:\n                    return False\n            if j == n-1:\n                return False\n    if re.match(r'^\\d+?\\.\\d+?\\.\\d+?\\.\\d+?$',ip):\n        for i in range(n):\n            if ip[i] == '0':\n                return False\n        return True\n    else:\n        return False\ndef subnet_calculator(ip,mask):\n    '''\n    Write a function to calculate the number of host in a subnet.\n    '''\n    n = len(ip)\n    mask_n = int(mask)\n    ip_num = ip_to_num(ip)\n    mask_num = ip_to_num(mask)\n    host = (2**(32-mask_n)) - 2\n    host_num = (2**(32-mask_n)) - 2\n    if mask_n > 32:\n        return -1\n    if mask_n == 32:\n        if ip_num == mask_num:\n            return 2**(32-mask_n) - 2\n        else:\n            return -1\n    if mask_n < 32:\n        if ip_num < mask_num:\n            return -1\n        elif ip_num > mask_num:\n            temp = mask_num\n            host_num = (2**(32-mask_n)) - 2\n            while temp < ip_num:\n                host_num += 2**(32-mask_n-1)\n                temp += 2**(32-mask_n-1)\n            return host_num - 2\n        else:\n            return host\ndef network_calculator(ip,mask):\n    '''\n    Write a function to calculate the network of an ip address.\n    '''\n    n = len(ip)\n    mask_n = int(mask)\n    ip_num = ip_to_num(ip)\n    mask_num = ip_to_num(mask)\n    network = ''\n    if mask_n > 32:\n        return -1\n    elif mask_n == 32:\n        network += '0.'\n        return network + num_to_ip(ip_num & mask_num)\n    elif mask_n < 32:\n        if mask_n == 31:\n            network += '0.'\n            temp = ip_num & mask_num\n            while temp > 0:\n                network += '1'\n                temp -= 2**(32-mask_n)\n            return network + num_to_ip(ip_num & mask_num)\n        elif mask_n < 31:\n            network += '0.'\n            temp = ip_num & mask_num\n            while temp > 0:\n                network += '1'\n                temp -= 2**(32-mask_n-1)\n            return network + num_to_ip(ip_num & mask_num)\n        else:\n            return -1\ndef broadcast_calculator(ip,mask):\n    '''\n    Write a function to calculate the broadcast address of an ip address.\n    '''\n    n = len(ip)\n    mask_n = int(mask)\n    ip_num = ip_to_num(ip)\n    mask_num = ip_to_num(mask)\n    broadcast = ''\n    if mask_n > 32:\n        return -1\n    elif mask_n == 32:\n        broadcast = '255.'\n        return broadcast + num_to_ip(ip_num | mask_num)\n    elif mask_n < 32:\n        if mask_n == 31:\n            broadcast = '255.'\n            temp = ip_num | mask_num\n            while temp > 0:\n                broadcast += '1'\n                temp -= 2**(32-mask_n)\n            return broadcast + num_to_ip(ip_num | mask_num)\n        elif mask_n < 31:\n            broadcast = '255.'\n            temp = ip_num | mask_num\n            while temp > 0:\n                broadcast += '1'\n                temp -= 2**(32-mask_n-1)\n            return broadcast + num_to_ip(ip_num | mask_num)\n        else:\n            return -1\ndef valid_ip_calculator(ip,mask):\n    '''\n    Write a function to check whether a ip address is valid\n    '''\n    n = len(ip)\n    mask_n = int(mask)\n    ip_num = ip_to_num(ip)\n    mask_num = ip_to_num(mask)\n    if mask_n > 32:\n        return -1\n    elif mask_n == 32:\n        if ip_num == mask_num:\n            return 1\n        else:\n            return -1\n    elif mask_n < 32:\n        if ip_num == mask_num:\n            return 1\n        elif mask_n == 31:\n            if ip_num == (2**(32-mask_n) - 1):\n                return 1\n            else:\n                return -1\n        elif mask_n < 31:\n            if ip_num == (2**(32-mask_n) - 1):\n                return 1\n            else:\n                return -1\n        else:\n            return -1\ndef ip_add_calculator(ip,mask):\n    '''\n    Write a function to calculate the first IP address of a subnet.\n    '''\n    n = len(ip)\n    mask_n = int(mask)\n    ip_num = ip_to_num(ip)\n    mask_num = ip_to_num(mask)\n    if mask_n > 32:\n        return -1\n    elif mask_n == 32:\n        return num_to_ip(ip_num)\n    elif mask_n < 32:\n        if mask_n == 31:\n            temp = ip_num & mask_num\n            while temp > 0:\n                temp -= 2**(32-mask_n)\n                ip_num += 1\n            return num_to_ip(ip_num)\n        elif mask_n < 31:\n            temp = ip_num & mask_num\n            while temp > 0:\n                temp -= 2**(32-mask_n-1)\n                ip_num += 2**(32-mask_n)\n            return num_to_ip(ip_num)\n        else:\n            return -1\ndef is_valid_mask(mask):\n    '''\n    Write a function to check whether a subnet mask is valid.\n    '''\n    n = len(mask)\n    if n > 32:\n        return False\n    elif n == 32:\n        if re.match(r'^\\d+?\\.\\d+?\\.\\d+?\\.\\d+?$',mask):\n            return True\n    ",
        "num_ids": 67
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip.startswith(\"0.\"):\n        ip = ip[2:]\n    return ip\n",
        "num_ids": 26
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if not ip:\n        return ip\n    return re.sub(r'^0+', '', ip)\n",
        "num_ids": 29
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = ip.split('.')\n    # replace each occurence of leading 0 with empty string\n    ip_list = [item.replace('0', '') for item in ip_list]\n    return '.'.join(ip_list)\n",
        "num_ids": 62
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'^0+\\.(\\d+)\\.(\\d+)\\.(\\d+)$')\n    match = re.match(pattern,ip)\n    if match:\n        return match.group(1) + '.' + match.group(2) + '.' + match.group(3)\n    else:\n        return ip\n",
        "num_ids": 87
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_count, even_count = 0, 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return abs(list1[0] - list1[1])\n",
        "num_ids": 66
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return list1[0] - list1[-1]\n",
        "num_ids": 17
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif len(list1) == 1:\n        return list1[0]\n    else:\n        first_odd = list1[1]\n        first_even = list1[0]\n        if first_even % 2 == 0:\n            return first_odd - first_even\n        else:\n            return first_odd - first_even\n    \ndef rotate_list(list1, n):\n    '''\n    Write a function to rotate a list n times, where n is a positive integer.\n    '''\n    if len(list1) == 0:\n        return list1\n    elif len(list1) == 1:\n        return [list1[-1]]\n    else:\n        new_list = [list1[-1]]\n        if n > 1:\n            for i in range(1, n):\n                new_list.append(list1[0])\n                del list1[0]\n        else:\n            for i in range(0, n):\n                new_list.append(list1[-1])\n                del list1[-1]\n        return new_list\n",
        "num_ids": 140
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    if even > odd:\n        return even - odd\n    else:\n        return odd - even\n",
        "num_ids": 66
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return (list1[0] - list1[-1])\n",
        "num_ids": 18
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    \n    return list1[0] - list1[-1]\n",
        "num_ids": 19
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num_odd = []\n    for num in list1:\n        if num % 2 == 0:\n            even_num_odd.append(num)\n    \n    even_num_odd = even_num_odd[0] - even_num_odd[1]\n    return even_num_odd\n",
        "num_ids": 75
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1)==0:\n        return []\n",
        "num_ids": 17
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for i in range(len(list1)):\n        if list1[i]%2 == 0:\n            even_list.append(list1[i])\n        else:\n            odd_list.append(list1[i])\n    return [even_list[0]-even_list[-1], odd_list[0]-odd_list[-1]]\n    \n",
        "num_ids": 104
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) > 2:\n        if list1[0] % 2 == 0:\n            return list1[1] - list1[0]\n        else:\n            return list1[0] - list1[1]\n    else:\n        return None\n",
        "num_ids": 66
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    n = len(str1)\n    for i in range(n) : \n        if str1[i]!= str2[i] : \n            count += 1\n            if str1[i] == '0' and str2[i] == '1' : \n                str1 = str1[:i] + '1' + str1[i+1:]\n            elif str1[i] == '1' and str2[i] == '0' : \n                str1 = str1[:i] + '0' + str1[i+1:]\n    return count\n",
        "num_ids": 148
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    import sys\n    \n    if len(str1)!=len(str2):\n        print >>sys.stderr,\"len(str1)!=len(str2)\"\n        return 1\n",
        "num_ids": 49
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    d = {}\n    for i in str1 :\n        d[i] = d.get(i,0) + 1\n    for i in str2 :\n        if i not in d :\n            d[i] = 1\n        else :\n            d[i] -= 1\n    return len(d)\n",
        "num_ids": 75
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # The total number of bits to be swapped is n-1 where n is the number of bits in the binary number\n    n = len(str1)\n    number = int(str1,2)\n    \n    # since the max number in any binary number is 111111...110111, hence max number of swaps is 1111...110111 => 111111...110111\n    swaps = (1 << n) - 1\n    \n    # we need the number of 1s in the original binary number\n    ones = 0\n    for i in range(n) : \n        if str1[i] == '1' : \n            ones += 1\n    \n    # if the number of ones is less than half of the total number of bits, then no need for swapping. \n    # if not, then swap the required number of bits. \n    if ones < (n / 2) :\n        return 0\n    elif ones > (n / 2) : \n        return swaps - (ones - (n / 2))\n    else : \n        return swaps\n    \n    \ndef min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # The total number of bits to be swapped is n-1 where n is the number of bits in the binary number\n    n = len(str1)\n    number = int(str1,2)\n    \n    # since the max number in any binary number is 111111...110111, hence max number of swaps is 1111...110111\n    swaps = (1 << n) - 1\n    \n    # we need the number of 1s in the original binary number\n    ones = 0\n    for i in range(n) : \n        if str1[i] == '1' : \n            ones += 1\n    \n    # if the number of ones is less than half of the total number of bits, then no need for swapping. \n    # if not, then swap the required number of bits. \n    if ones < (n / 2) :\n        return 0\n    elif ones > (n / 2) : \n        return swaps - (ones - (n / 2))\n    else : \n        return swaps\n    \n",
        "num_ids": 242
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            count += 1\n            str1 = str1[:i] + str(1-int(str1[i])) + str1[i+1:]\n            str2 = str2[:i] + str(1-int(str2[i])) + str2[i+1:]\n    return count\n",
        "num_ids": 109
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    #define a helper function to compare 2 binary numbers \n    def compare_2_str(str1,str2):\n        return (str1+str2) > (str2+str1)\n    #define a helper function to convert binary string to integer and vice versa\n    def convert_2_int(str1):\n        return int(str1,2)\n    def convert_2_str(val):\n        return bin(val)[2:]\n    #define a helper function to compare two binary numbers \n    def compare_2_num(num1,num2):\n        return num1 > num2\n    #define a helper function to convert to binary string \n    def convert_2_str_bin(num1):\n        return bin(num1)[2:]\n    #define a helper function to count number of 1s in binary string \n    def count_1(str1):\n        return str1.count('1')\n    #define a helper function to count number of 1s in binary string \n    def count_0(str1):\n        return str1.count('0')\n    #define a helper function to count number of 1s in binary string \n    def get_index_0(str1):\n        return str1.find('0')\n    #define a helper function to count number of 1s in binary string \n    def get_index_1(str1):\n        return str1.find('1')\n    #define a helper function to count number of 1s in binary string \n    def swap_1_0(str1):\n        str1 = str1.replace('1','0')\n        str1 = str1.replace('0','1')\n        return str1\n    #define a helper function to count number of 1s in binary string \n    def swap_0_1(str1):\n        str1 = str1.replace('0','1')\n        str1 = str1.replace('1','0')\n        return str1\n    #define a helper function to count number of 1s in binary string \n    def swap_1_0_bin(str1):\n        return str1.replace('0','10')\n    #define a helper function to count number of 1s in binary string \n    def swap_0_1_bin(str1):\n        return str1.replace('1','11')\n    #define a helper function to count number of 1s in binary string \n    def swap_1_0_str_bin(str1):\n        return str1.replace('0','1010')\n    #define a helper function to count number of 1s in binary string \n    def swap_0_1_str_bin(str1):\n        return str1.replace('1','1011')\n    #define a helper function to count number of 1s in binary string \n    def swap_1_0_bin_str(str1):\n        return str1.replace('10','0')\n    #define a helper function to count number of 1s in binary string \n    def swap_0_1_bin_str(str1):\n        return str1.replace('11','1')\n    #define a helper function to count number of 1s in binary string \n    def swap_0_1_str_bin(str1):\n        return str1.replace('1010','0')\n    #define a helper function to count number of 1s in binary string \n    def swap_0_1_str_bin(str1):\n        return str1.replace('1011','1')\n    #define a helper function to count number of 1s in binary string \n    def swap_0_1_str_bin_2(str1):\n        return str1.replace('10','0').replace('11','1')\n    #define a helper function to count number of 1s in binary string \n    def swap_0_1_str_bin_3(str1):\n        return str1.replace('1010','0').replace('1011','1')\n    #define a helper function to count number of 1s in binary string \n    def swap_1_0_str_bin(str1):\n        return str1.replace('0','10').replace('1','11')\n    #define a helper function to count number of 1s in binary string \n    def swap_0_1_str_bin_2(str1):\n        return str1.replace('1010','0').replace('1011','1')\n    #define a helper function to count number of 1s in binary string \n    def swap_0_1_str_bin_3(str1):\n        return str1.replace('0010','0').replace('0011','1')\n    #define a helper function to count number of 1s in binary string \n    def swap_0_1_str_bin_4(str1):\n        return str1.replace('0110','0').replace('0111','1')\n    #define a helper function to count number of 1s in binary string \n    def swap_0_1_str_bin_5(str1):\n        return str1.replace('0101','0').replace('0111','1')\n    #define a helper function to count number of 1s in binary string \n    def swap_0_1_str_bin_6(str1):\n        return str1.replace('0100','0').replace('0101','1')\n    #define a helper function to count number of 1s in binary string \n    def swap_0_1_str_bin_7(str1):\n        return str1.replace('1110','0').replace('1111','1')\n    #define a helper function to count number of 1s in binary string \n    def swap_0_1_str_bin_8(str1):\n        return str1.replace('1101','0').replace('1111','1')\n    #define a helper function to count number of 1s in binary string \n    def swap_0_1_str_bin_9(str1):\n        return str1.replace('11001','0').replace('11101','1')\n    #define a helper function to count number of 1s in binary string \n    def swap_0_1_str_bin_10(str1):\n        return str1.replace('110001','0').replace('111001','1')\n    #define a helper function to count number of 1s in binary string \n    def swap_0_1_str_bin_11(str1):\n        return str1.replace('110000','0').replace('1100001','1')\n    #define a helper function to count number of 1s in binary string \n    def swap_0_1_str_bin_12(str1):\n        return str1.replace('110111','0').replace('1110001','1')\n    #define a helper function to count number of 1s in binary string \n    def swap_0_1_str_bin_13(str1):\n        return str1.replace('1101001','0').replace('1101101','1')\n    #define a helper function to count number of 1s in binary string \n    def swap_0_1_str_bin_14(str1):\n        return str1.replace('11010001','0').replace('11011101','1')\n    #define a helper function to count number of 1s in binary string \n    def swap_0_1_str_bin_15(str1):\n        return str1.replace('11010000','0').replace('11010001','1')\n    #define a helper function to count number of 1s in binary string \n    def swap_0_1_str_bin_16(str1):\n        return str1.replace('110100001','0').replace('110111001','1')\n    #define a helper function to count number of 1s in binary string \n    def swap_0_1_str_bin_17(str1):\n        return str1.replace('1101000011','0').replace('1101110101','1')\n    #define a helper function to count number of 1s in binary string \n    def swap_0_1_str_bin_18(str1):\n        return str1.replace('1101000001','0').replace('1101110101','1')\n    #define a helper function to count number of 1s in binary string \n    def swap_0_1_str_bin_19(str1):\n        return str1.replace('11010000001','0').replace('11011101101','1')\n    #define a helper function to count number of 1",
        "num_ids": 2000
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    '''\n    Following is one possible implementation of this problem:\n    '''\n    l1,l2 = len(str1),len(str2)\n    count = 0\n    for i in range(l1):\n        if str1[i]!=str2[i]:\n            temp = str2[i]\n            str2 = str2[:i]+str2[i+1:]\n            str2 = str2[:i]+temp+str2[i:]\n            count += 1\n    return count\n",
        "num_ids": 104
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2) : \n        return -1\n    if len(str1) == 0 : \n        return 0\n    a=list(str1)\n    b=list(str2)\n    for i in range(len(a)) : \n        if int(a[i])!= int(b[i]) : \n            return i \n    return len(a)\n",
        "num_ids": 101
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    number_of_swaps=0\n    for i in range(len(str1)) :\n        if str1[i]!=str2[i] :\n            number_of_swaps+=1\n            str2=str2[:i]+str1[i]+str2[i+1:]\n    return number_of_swaps\ndef transpose_array(A) : \n    '''\n    Write a python function to transpose a matrix.\n    '''\n    n=len(A[0])\n    m=len(A)\n    B=[[0]*n for i in range(m)]\n    for i in range(m) :\n        for j in range(n) :\n            B[i][j]=A[j][i]\n    return B\ndef num_to_binary(n,num_of_bits) : \n    '''\n    Write a python function to convert a positive integer to a string representing the same number in base 2. For example, if the input to the function is 6, then the function should return \u201c110\u201d.\n    '''\n    if n==0 :\n        return '0'\n    s=''\n    while n>0 :\n        s=str(n%2)+s\n        n=n//2\n    while len(s)<num_of_bits :\n        s='0'+s\n    return s\ndef num_to_binary_reverse(n,num_of_bits) : \n    '''\n    Write a python function to convert a positive integer to a string representing the same number in base 2. For example, if the input to the function is 6, then the function should return \u201c110\u201d.\n    '''\n    if n==0 :\n        return '0'\n    s=''\n    while n>0 :\n        s=str(n%2)+s\n        n=n//2\n    return s\ndef binary_to_num(s) : \n    '''\n    Write a python function to convert a string representing the same number in base 2 to its original base 10 number. For example, if the input to the function is \u201c110\u201d, then the function should return 6.\n    '''\n    num=0\n    for i in range(len(s)) :\n        num=num+int(s[i])*2**(len(s)-i-1)\n    return num\ndef binary_to_num_reverse(s) : \n    '''\n    Write a python function to convert a string representing the same number in base 2 to its original base 10 number. For example, if the input to the function is \u201c110\u201d, then the function should return 6.\n    '''\n    num=0\n    for i in range(len(s)) :\n        num=num+int(s[i])*2**(len(s)-i-1)\n    return num\ndef find_second_largest_number(A) : \n    '''\n    Write a python function to find the second largest number in a list of numbers. For example, if the list is [2,8,3,5,4,6,9,1,7,7] the function should return 7.\n    '''\n    sorted_array=sorted(A)\n    return sorted_array[-2]\ndef find_second_largest_number_reverse(A) : \n    '''\n    Write a python function to find the second largest number in a list of numbers. For example, if the list is [2,8,3,5,4,6,9,1,7,7] the function should return 7.\n    '''\n    sorted_array=sorted(A)\n    return sorted_array[-3]\ndef compute_factorial(n) : \n    '''\n    Write a python function to compute the factorial of a number. For example, if the input to the function is 3, the function should return 6.\n    '''\n    fact=1\n    if n==0 :\n        return 1\n    else :\n        while n>0 :\n            fact=fact*n\n            n=n-1\n    return fact\ndef compute_factorial_recursion(n) : \n    '''\n    Write a python function to compute the factorial of a number using recursion.\n    '''\n    if n==0 :\n        return 1\n    else :\n        return n*compute_factorial_recursion(n-1)\ndef reverse_words_in_a_string(s) : \n    '''\n    Write a python function to reverse words in a string. For example, if the input to the function is \u201cThis is a string\u201d then the function should return \u201cstring a is This\u201d.\n    '''\n    s=s.split()\n    s=s[::-1]\n    return''.join(s)\ndef reverse_words_in_a_string_recursion(s) : \n    '''\n    Write a python function to reverse words in a string. For example, if the input to the function is \u201cThis is a string\u201d then the function should return \u201cstring a is This\u201d.\n    '''\n    s=s.split()\n    s=s[::-1]\n    return''.join(s)\ndef test_reverse_words_in_a_string() : \n    '''\n    Write a python function to reverse words in a string. For example, if the input to the function is \u201cThis is a string\u201d then the function should return \u201cstring a is This\u201d.\n    '''\n    assert reverse_words_in_a_string('this is a string')=='string a is This'\ndef test_reverse_words_in_a_string_recursion() : \n    '''\n    Write a python function to reverse words in a string. For example, if the input to the function is \u201cThis is a string\u201d then the function should return \u201cstring a is This\u201d.\n    '''\n    assert reverse_words_in_a_string_recursion('this is a string')=='string a is This'\ndef long_element_in_a_list_of_tuples(tup) : \n    '''\n    Write a python function to find the longest element in a list of tuples. For example, if the input to the function is [(1,2),(3,4),(5,6)] then the function should return 6.\n    '''\n    maximum=0\n    for i in range(len(tup)) :\n        if len(tup[i])>maximum :\n            maximum=len(tup[i])\n    return maximum\ndef long_element_in_a_list_of_tuples_reverse(tup) : \n    '''\n    Write a python function to find the longest element in a list of tuples. For example, if the input to the function is [(1,2),(3,4),(5,6)] then the function should return 6.\n    '''\n    maximum=0\n    for i in range(len(tup)) :\n        if len(tup[i])>maximum :\n            maximum=len(tup[i])\n    return maximum\ndef same_occurrence_of_two_numbers(A,B) : \n    '''\n    Write a python function to determine if two numbers are of the same occurrence in a sequence of numbers. For example, if the input to the function is [1,3,1,3,4,3,5,1,2,1,5,3,3,1,5,2,1,3,1,5,2,1,3,1,5,2,1,3,1,5,2,1,3,1,5,2,1,3,1,5,2,1,3,1,5,2,1,3,1,5,2,1,3,1,5,2,1,3,1,5,2,1,3,1,5,2,1,3,1,5,2,1,3,1,5,2,1,3,1,5,2,1,3,1,5,2,1,3,1,5,2,1,3,1,5,2,1,3,1,5,2,1,3,1,5,2,1,3,1,5,2,1,3,1,5,2,1,3,1,5,2,1,3,1,5,2,1,3,1,5,2,1,3,",
        "num_ids": 300
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    temp_str1 = str1\n    temp_str2 = str2\n    str1 = int(str1,2)\n    str2 = int(str2,2)\n    if str1 < str2 :\n        temp_str1 = str1\n        str1 = str2\n        str2 = temp_str1\n    \n    count = 0\n    while str1!= str2 :\n        for i in range(len(str1)) :\n            if str1[i] == '0' :\n                str1 = str1[:i] + '1' + str1[i+1:]\n                count += 1\n                break\n            if str1[i] == '1' :\n                str1 = str1[:i] + '0' + str1[i+1:]\n                count += 1\n                break\n    return count\n",
        "num_ids": 200
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\ndef find_tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    \n    list_of_tuples=[]\n    for i in range(0, len(tuple_list)):\n        list_of_tuples.append(tuple_size(tuple_list[i]))\n    return list_of_tuples\ndef tuple_to_list(tuple_list):\n    '''\n    Write a function to convert the given tuple list to a list\n    '''\n    \n    list_of_tuples=[]\n    for i in range(0, len(tuple_list)):\n        list_of_tuples.append(tuple_list[i])\n    return list_of_tuples\ndef list_to_tuple(list_of_tuples):\n    '''\n    Write a function to convert the given list to a tuple\n    '''\n    \n    tuple_list=[]\n    for i in range(0, len(list_of_tuples)):\n        tuple_list.append(list_of_tuples[i])\n    return tuple_list\ndef tuple_to_set(tuple_list):\n    '''\n    Write a function to convert the given tuple to a set\n    '''\n    \n    tuple_set=set(tuple_list)\n    return tuple_set\ndef tuple_to_list_of_list(tuple_list):\n    '''\n    Write a function to convert the given tuple to a list of list\n    '''\n    \n    list_of_list=[]\n    for i in range(0, len(tuple_list)):\n        list_of_list.append(list(tuple_list[i]))\n    return list_of_list\ndef list_of_list_to_tuple(list_of_list):\n    '''\n    Write a function to convert the given list of list to a tuple\n    '''\n    \n    tuple_of_list=[]\n    for i in range(0, len(list_of_list)):\n        tuple_of_list.append(tuple(list_of_list[i]))\n    return tuple_of_list\ndef tuple_to_list_of_set(tuple_list):\n    '''\n    Write a function to convert the given tuple to a list of set\n    '''\n    \n    tuple_of_list=[]\n    for i in range(0, len(tuple_list)):\n        tuple_of_list.append(set(tuple_list[i]))\n    return tuple_of_list\ndef set_to_tuple(set_list):\n    '''\n    Write a function to convert the given set to a tuple\n    '''\n    \n    tuple_of_set=()\n    for i in range(0, len(set_list)):\n        tuple_of_set=tuple_of_set+(set_list[i],)\n    return tuple_of_set\ndef list_of_set_to_tuple(list_of_set):\n    '''\n    Write a function to convert the given list of set to a tuple\n    '''\n    \n    tuple_of_list=[]\n    for i in range(0, len(list_of_set)):\n        tuple_of_list.append(tuple(list_of_set[i]))\n    return tuple_of_list\ndef tuple_to_list_of_set(tuple_list):\n    '''\n    Write a function to convert the given tuple to a list of set\n    '''\n    \n    list_of_set=[]\n    for i in range(0, len(tuple_list)):\n        list_of_set.append(set(tuple_list[i]))\n    return list_of_set\ndef tuple_to_list_of_tuple(tuple_list):\n    '''\n    Write a function to convert the given tuple to a list of tuple\n    '''\n    \n    list_of_tuple=[]\n    for i in range(0, len(tuple_list)):\n        list_of_tuple.append(tuple(tuple_list[i]))\n    return list_of_tuple\ndef tuple_to_list_of_list_of_set(tuple_list):\n    '''\n    Write a function to convert the given tuple to a list of tuple of set\n    '''\n    \n    list_of_list_of_set=[]\n    for i in range(0, len(tuple_list)):\n        list_of_list_of_set.append(tuple_to_list_of_set(tuple_list[i]))\n    return list_of_list_of_set\ndef list_of_list_of_set_to_tuple(list_of_list_of_set):\n    '''\n    Write a function to convert the given list of list of set to a tuple\n    '''\n    \n    tuple_of_list_of_set=()\n    for i in range(0, len(list_of_list_of_set)):\n        tuple_of_list_of_set=tuple_of_list_of_set+tuple_to_list_of_set(list_of_list_of_set[i])\n    return tuple_of_list_of_set\ndef tuple_to_list_of_list_of_tuple(tuple_list):\n    '''\n    Write a function to convert the given tuple to a list of list of tuple\n    '''\n    \n    list_of_list_of_tuple=[]\n    for i in range(0, len(tuple_list)):\n        list_of_list_of_tuple.append(tuple_to_list_of_tuple(tuple_list[i]))\n    return list_of_list_of_tuple\ndef tuple_to_list_of_list_of_list_of_set(tuple_list):\n    '''\n    Write a function to convert the given tuple to a list of list of tuple of set\n    '''\n    \n    list_of_list_of_list_of_set=[]\n    for i in range(0, len(tuple_list)):\n        list_of_list_of_list_of_set.append(tuple_to_list_of_list_of_set(tuple_list[i]))\n    return list_of_list_of_list_of_set\ndef tuple_to_list_of_list_of_list_of_tuple(tuple_list):\n    '''\n    Write a function to convert the given tuple to a list of list of tuple of tuple\n    '''\n    \n    list_of_list_of_list_of_tuple=[]\n    for i in range(0, len(tuple_list)):\n        list_of_list_of_list_of_tuple.append(tuple_to_list_of_list_of_tuple(tuple_list[i]))\n    return list_of_list_of_list_of_tuple\ndef list_of_list_of_tuple_to_tuple(list_of_list_of_tuple):\n    '''\n    Write a function to convert the given list of list of tuple to a tuple\n    '''\n    \n    tuple_of_list_of_tuple=()\n    for i in range(0, len(list_of_list_of_tuple)):\n        tuple_of_list_of_tuple=tuple_of_list_of_tuple+tuple_to_list_of_tuple(list_of_list_of_tuple[i])\n    return tuple_of_list_of_tuple\ndef list_of_list_of_tuple_to_list_of_tuple(list_of_list_of_tuple):\n    '''\n    Write a function to convert the given list of list of tuple to a list of tuple\n    '''\n    \n    list_of_tuple=[]\n    for i in range(0, len(list_of_list_of_tuple)):\n        list_of_tuple.append(list_of_list_of_tupl",
        "num_ids": 57
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # check if tuple is of type tuple\n    if type(tuple_list) is not tuple:\n        raise TypeError(\"must be tuple type\")\n    elif tuple_list is None:\n        return 0\n    else:\n        return sys.getsizeof(tuple_list)\n",
        "num_ids": 69
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_len=0\n    for val in tuple_list:\n        tuple_len=tuple_len+sys.getsizeof(val)\n    return tuple_len\n",
        "num_ids": 45
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    x = sys.getsizeof(tuple_list)\n    return x\n    ",
        "num_ids": 22
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for value in tuple_list:\n        size = size + sys.getsizeof(value)\n    return size\n",
        "num_ids": 34
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    sz=0\n    for i in range(len(tuple_list)):\n        sz=sz+sys.getsizeof(tuple_list[i])\n    return sz\ndef sort_by_values(dic):\n    '''\n    Write a function to sort a dict by values, this is used in the solution below\n    '''\n    return {k:v for k,v in sorted(dic.items(), key=lambda item: item[1])}\ndef common_items(list1, list2):\n    '''\n    Write a function to find the common items in two lists.\n    '''\n    list3=[]\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list3.append(list1[i])\n    return list3\ndef find_value_index(a_list, value):\n    '''\n    Write a function to find the index of the first occurrence of a value in the list.\n    '''\n    for i in range(len(a_list)):\n        if a_list[i]==value:\n            return i\n    return -1\ndef find_index(list1, value):\n    '''\n    Write a function to find the index of the first occurrence of a value in the list.\n    '''\n    for i in range(len(list1)):\n        if list1[i]==value:\n            return i\n    return -1\ndef remove_all(list1, value):\n    '''\n    Write a function to remove all occurrences of a value from the list.\n    '''\n    while value in list1:\n        list1.remove(value)\n    return list1\ndef get_second_element(a_list):\n    '''\n    Write a function to get the second element of a list.\n    '''\n    return a_list[1]\ndef remove_all_occurences(list1, value):\n    '''\n    Write a function to remove all occurrences of a value from the list.\n    '''\n    while value in list1:\n        list1.remove(value)\n    return list1\ndef remove_duplicates(list1):\n    '''\n    Write a function to remove duplicates from the list.\n    '''\n    return list(set(list1))\ndef duplicate_value(a_list):\n    '''\n    Write a function to remove duplicates from the list.\n    '''\n    while True:\n        try:\n            value = a_list[a_list.index(a_list[0])]\n            a_list.remove(value)\n        except ValueError:\n            return a_list\ndef map_list(list1, fn):\n    '''\n    Write a function to map a list of integers to a list of integers.\n    '''\n    list2=[]\n    for i in list1:\n        list2.append(fn(i))\n    return list2\ndef filter_list(list1, fn):\n    '''\n    Write a function to filter a list of integers to a list of integers.\n    '''\n    list2=[]\n    for i in list1:\n        if fn(i)==True:\n            list2.append(i)\n    return list2\ndef convert_list_to_set(list1):\n    '''\n    Write a function to convert a list to a set.\n    '''\n    list2=set(list1)\n    return list2\ndef merge_lists(list1, list2):\n    '''\n    Write a function to merge two lists.\n    '''\n    return list1+list2\ndef reverse_list(list1):\n    '''\n    Write a function to reverse a list.\n    '''\n    return list1[::-1]\ndef list_as_string(list1):\n    '''\n    Write a function to convert a list to a string.\n    '''\n    return ''.join(str(i) for i in list1)\ndef remove_duplicates_from_string(string1):\n    '''\n    Write a function to remove duplicates from a string.\n    '''\n    return ''.join(set(string1))\ndef get_last_element(a_list):\n    '''\n    Write a function to get the last element of a list.\n    '''\n    return a_list[-1]\ndef replace_char(string1, old_char, new_char):\n    '''\n    Write a function to replace a character in a string.\n    '''\n    return string1.replace(old_char, new_char)\ndef replace_first_char(string1, new_char):\n    '''\n    Write a function to replace the first character of a string.\n    '''\n    return string1[1:]+new_char\ndef insert_char(string1, char_to_insert, index):\n    '''\n    Write a function to insert a character into a string.\n    '''\n    return string1[:index]+char_to_insert+string1[index:]\ndef insert_value_at_index(list1, index, value):\n    '''\n    Write a function to insert a value into a list at a specific index.\n    '''\n    list1.insert(index, value)\n    return list1\ndef del_last_element(list1):\n    '''\n    Write a function to delete the last element of a list.\n    '''\n    list1.pop()\n    return list1\ndef del_first_element(list1):\n    '''\n    Write a function to delete the first element of a list.\n    '''\n    list1.pop(0)\n    return list1\ndef del_element_by_index(list1, index):\n    '''\n    Write a function to delete an element in a list by index.\n    '''\n    del list1[index]\n    return list1\ndef del_first_last_element(list1):\n    '''\n    Write a function to delete the first and last element of a list.\n    '''\n    del list1[0]\n    del list1[-1]\n    return list1\ndef remove_value(list1, value):\n    '''\n    Write a function to remove a value from a list.\n    '''\n    while value in list1:\n        list1.remove(value)\n    return list1\ndef count_occurances(list1, value):\n    '''\n    Write a function to count the number of occurances of a value in a list.\n    '''\n    return list1.count(value)\ndef shuffle_list(list1):\n    '''\n    Write a function to shuffle a list.\n    '''\n    import random\n    return random.shuffle(list1)\ndef get_all_elements(list1, value):\n    '''\n    Write a function to find all occurrences of a value in the list.\n    '''\n    return [i for i, j in enumerate(list1) if j == value]\ndef get_all_indexes(list1, value):\n    '''\n    Write a function to find all the indexes of a value in the list.\n    '''\n    return [i for i, j in enumerate(list1) if j == value]\ndef is_list_empty(list1):\n    '''\n    Write a function to check if a list is empty or not.\n    '''\n    if list1==[]:\n        return True\n    else:\n        return False\ndef is_value_in_list(list1, value):\n    '''\n    Write a function to check if a value is in a list.\n    '''\n    return value in list1\ndef reverse_list_recursively(list1):\n    '''\n    Write a function to reverse a list recursively.\n    '''\n    return reverse_list_recursive_help(list1, 0)\ndef reverse_list_recursively_help(list1, index):\n    '''\n    Write a function to reverse a list recursively.\n    '''\n    if index==len(list1)-1:\n        return list1\n    else:\n        return reverse_list_recursively_help(list1, index+1)\ndef sort_list_recursively(list1):\n    '''\n    Write a function to sort a list recursively.\n    '''\n    return sort_list_recursively_help(list1, 0)\ndef sort_list_recur",
        "num_ids": 27
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    a=0\n    for i in tuple_list:\n        a=a+sys.getsizeof(i)\n    return a\n    \ndef length_of_tuple(tuple_list):\n    '''\n    Write a function to find the length of the given tuple.\n    '''\n    a=len(tuple_list)\n    return a\n",
        "num_ids": 17
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    #return size in bytes for tuple_list\n    return sys.getsizeof(tuple_list)\n",
        "num_ids": 27
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if tuple_list == []:\n        return 0\n    else:\n        return sys.getsizeof(tuple_list[0]) + tuple_size(tuple_list[1:])\n",
        "num_ids": 48
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # length of the tuple:\n    # 8 byte(s) for the object reference\n    # 2 byte(s) for the size\n    # 2 byte(s) for the \n    # 2 byte(s) for the number of objects\n    size = 8 + 2 + 2 + 2 + 2\n    for tup in tuple_list:\n        # in bytes:\n        # reference + size + number of objects\n        size += sys.getsizeof(tup)\n    return size\n",
        "num_ids": 113
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    return merge(arr1, arr2, k)\n",
        "num_ids": 15
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    \n    i, j = 0, 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n            \n        if i == len(arr1):\n            return arr2[j + k - 1]\n        \n        if j == len(arr2):\n            return arr1[i + k - 1]\n    \n    \n    \n    \n",
        "num_ids": 144
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    pos1 = pos2 = 0\n    while True:\n        if pos1 >= len(arr1):\n            return arr2[pos2 + k - 1]\n        if pos2 >= len(arr2):\n            return arr1[pos1 + k - 1]\n        if k == 1:\n            return min(arr1[pos1], arr2[pos2])\n        \n        if arr1[pos1] < arr2[pos2]:\n            k -= 1\n            pos1 += 1\n        elif arr1[pos1] > arr2[pos2]:\n            k -= 1\n            pos2 += 1\n        else:\n            return arr1[pos1]\n        \n",
        "num_ids": 160
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1[-1] > arr2[-1]:\n        return kth_element_from_arr2(arr1, arr2, k)\n    else:\n        return kth_element_from_arr1(arr1, arr2, k)\n",
        "num_ids": 64
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    # Find the intersection point\n    # Note: We don't know whether arr1 or arr2 is sorted\n    # We can make one of them sorted using a stack.\n    \n    stack1 = []\n    stack2 = []\n    \n    p1 = 0\n    p2 = 0\n    \n    while p1 < len(arr1) and p2 < len(arr2):\n        if arr1[p1] == arr2[p2]:\n            stack1.append(arr1[p1])\n            stack2.append(arr2[p2])\n            p1 += 1\n            p2 += 1\n        elif arr1[p1] > arr2[p2]:\n            p2 += 1\n        else:\n            p1 += 1\n    \n    while len(stack1)!= k:\n        if len(stack1) > k:\n            stack1.pop()\n        else:\n            stack2.pop()\n    \n    return (stack1, stack2)\n",
        "num_ids": 233
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    elif len(arr1) == 0:\n        return arr2[k-1]\n    elif k == 1:\n        return min(arr1[0], arr2[0])\n    else:\n        p1 = min(k/2, len(arr1)) - 1\n        p2 = k - p1 - 1\n        if arr1[p1] > arr2[p2]:\n            return find_kth(arr1, arr2[p2+1:], k - p2 - 1)\n        else:\n            return find_kth(arr1[p1+1:], arr2, k - p1 - 1)\n",
        "num_ids": 184
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j, k = 0, 0, len(arr1)\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n",
        "num_ids": 90
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Edge case\n    if arr1 is None:\n        return arr2[k-1]\n    if arr2 is None:\n        return arr1[k-1]\n",
        "num_ids": 43
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def kth_from_m_n(m, n, k):\n        if m > n:\n            return kth_from_m_n(n, m, k)\n        if m == 0:\n            return n + 1\n        x = (m + n) // 2\n        if k <= x:\n            return kth_from_m_n(m, x, k)\n        elif k > x:\n            return kth_from_m_n(x+1, n, k)\n    return kth_from_m_n(0, len(arr1)-1, k)\n",
        "num_ids": 145
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n",
        "num_ids": 32
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # To check the Armstrong number we consider the numbers from 1 to 10000.\n    # A number is called Armstrong if it is equal to the sum of the squares of its digits.\n    # Example: 153 = 1**3 + 5**3 + 3**3 = 1 + 125 + 27 = 153\n    # A number is called Armstrong if the sum of the digits of the number is equal to the number itself.\n    # Example: 371 = 3**3 + 7**3 + 1**3 = 371\n    # The only possible Armstrong number is 153\n    # We can iterate over the range 1 to number and check if the number is Armstrong\n    # Time Complexity is O(n)\n    number_to_check = str(number)\n    length = len(number_to_check)\n    result = 0\n    for i in range(length):\n        digit = int(number_to_check[i])\n        result += digit**length\n        if result == int(number_to_check):\n            return True\n    return False\n",
        "num_ids": 232
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return sum == number\n",
        "num_ids": 45
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    armstrong_num = 0\n    original_num = number\n    while number > 0:\n        digit = number % 10\n        number = number // 10\n        armstrong_num += digit ** 3\n    if armstrong_num == original_num:\n        return True\n    else:\n        return False\n",
        "num_ids": 72
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    \n    #armstrong_number = number\n    #armstrong_digit = 0\n    #temp_number = number\n    #while temp_number:\n        #temp_number //= 10\n        #armstrong_digit += 1\n",
        "num_ids": 56
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if sum == number:\n        return True\n    else:\n        return False\n",
        "num_ids": 58
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if sum == number:\n        return True\n    else:\n        return False\n",
        "num_ids": 58
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    summation = 0\n    digit = number\n    while digit:\n        digit, r = divmod(digit, 10)\n        summation += r ** 3\n    if summation == number:\n        return True\n    else:\n        return False\n",
        "num_ids": 61
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    return number == sum([int(digit)**len(str(number)) for digit in str(number)])\n",
        "num_ids": 28
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    return sum(map(lambda x: int(x) ** len(str(number)), str(number))) == number\n",
        "num_ids": 29
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    total = 0\n    temp = number\n    while temp:\n        digit = temp % 10\n        total += digit ** 3\n        temp //= 10\n    if total == number:\n        return True\n    else:\n        return False\n",
        "num_ids": 56
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(number + 1):\n        total += i\n    average = total / number\n    return total, average\n",
        "num_ids": 36
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    if not isinstance(number, int) or number < 0:\n        raise ValueError('number must be natural number')\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average\n",
        "num_ids": 71
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # simple implementation\n    s = 0.0\n    for i in range(1,number+1):\n        s += i\n    print(\"Sum of first %d natural numbers is: %f\" %(number,s))\n    return s/number\n",
        "num_ids": 60
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    \n    # average = sum / n\n    # sum = sum(1, n)\n    \n    # return sum, average\n    \n    # find sum\n    summation = 0\n    for i in range(1, number+1):\n        summation += i\n    \n    return summation, summation / number\n    ",
        "num_ids": 79
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    return sum, sum/number\n",
        "num_ids": 33
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1, number+1):\n        sum += i\n    average = float(sum) / float(number)\n    return sum, average\n    \n",
        "num_ids": 51
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    s = 0\n    if number == 0:\n        return s\n    else:\n        s += number\n        return s / number\n",
        "num_ids": 33
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(number+1):\n        total += i\n    avg = total / number\n    return total, avg\n",
        "num_ids": 37
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    return sum, sum / number\n",
        "num_ids": 33
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1,number+1):\n        sum = sum + i\n    average = sum / number\n    return sum, average\n    \ndef test_sum_average():\n    '''\n    Write a function to test the sum_average() function.\n    '''\n    assert sum_average(3) == (6, 2)\n    assert sum_average(5) == (15, 4.5)\n    assert sum_average(10) == (50, 7)\n",
        "num_ids": 49
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2 == 0\n",
        "num_ids": 10
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2 == 0\n    \ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    return n%2 == 1\n    \ndef is_Palindrome(n) : \n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    return str(n) == str(n)[::-1]\n",
        "num_ids": 18
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 :\n        return True\n    else :\n        return False\n    \ndef factorial(n) : \n    '''\n    Write a python function to return the factorial of the given number.\n    '''\n    fact = 1\n    while n > 1 :\n        fact = fact * n\n        n = n - 1\n    return fact\n    \ndef is_Prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    flag = 0\n    for i in range(2,n) :\n        if n%i == 0 :\n            flag = 1\n            break\n    if flag == 1 :\n        return False\n    else :\n        return True\n        \ndef nth_prime(n) : \n    '''\n    Write a python function to find the nth prime number.\n    '''\n    num = 0\n    count = 0\n    while count < n :\n        if is_Prime(num) :\n            count += 1\n        num = num + 1\n    return num - 1\n    \ndef primes_upto(n) : \n    '''\n    Write a python function to return the list of all prime numbers upto the given number.\n    '''\n    lst = []\n    for i in range(2,n+1) :\n        if is_Prime(i) :\n            lst.append(i)\n    return lst\n    \ndef is_palindrome(n) : \n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    if n < 0 :\n        return False\n    else :\n        string = str(n)\n        return string == string[::-1]\n    \ndef is_anagram(s1,s2) : \n    '''\n    Write a python function to check whether the two strings are anagram of each other or not.\n    '''\n    if len(s1)!= len(s2) :\n        return False\n    s1 = sorted(s1)\n    s2 = sorted(s2)\n    return s1 == s2\n    \ndef is_in_grammar(grammar, string) : \n    '''\n    Write a python function to check whether the given string is in the given grammar or not.\n    '''\n    if string == \"\" :\n        return True\n    else :\n        for i in grammar :\n            if i[0] == string[0] :\n                if is_in_grammar(i[1], string[1:]) :\n                    return True\n                else :\n                    return False\n        return False\n    \ndef is_match(grammar, string) : \n    '''\n    Write a python function to check whether the given string is in the given grammar or not.\n    '''\n    if string == \"\" :\n        return True\n    elif grammar == [] :\n        return False\n    else :\n        for i in grammar :\n            if i[0] == string[0] :\n                if is_match(i[1], string[1:]) :\n                    return True\n                else :\n                    return False\n        return False\n        \ndef is_infix_grammar(grammar) : \n    '''\n    Write a python function to check whether the given grammar is an infix grammar or not.\n    '''\n    flag = True\n    for i in grammar :\n        if i[0] == \"(\" :\n            flag = False\n    return flag\n    \ndef is_prefix_grammar(grammar) : \n    '''\n    Write a python function to check whether the given grammar is a prefix grammar or not.\n    '''\n    flag = True\n    for i in grammar :\n        if i[0] == \"^\" :\n            flag = False\n    return flag\n    \ndef is_postfix_grammar(grammar) : \n    '''\n    Write a python function to check whether the given grammar is a postfix grammar or not.\n    '''\n    flag = True\n    for i in grammar :\n        if i[0] == \")\" :\n            flag = False\n    return flag\n    \ndef print_all_posible_strings(grammar, string) : \n    '''\n    Write a python function to print all the possible strings generated by the given grammar and input string.\n    '''\n    if is_match(grammar, string) :\n        print string\n    else :\n        for i in grammar :\n            if i[0] == string[0] :\n                print string\n                print_all_posible_strings(i[1], string[1:])\n        \ndef print_all_posible_strings_with_prefix(grammar, string) : \n    '''\n    Write a python function to print all the possible strings generated by the given grammar and input string.\n    '''\n    if is_prefix_grammar(grammar) :\n        print string\n    else :\n        for i in grammar :\n            if i[0] == string[0] :\n                print string\n                print_all_posible_strings_with_prefix(i[1], string[1:])\n        \ndef print_all_posible_strings_with_postfix(grammar, string) : \n    '''\n    Write a python function to print all the possible strings generated by the given grammar and input string.\n    '''\n    if is_postfix_grammar(grammar) :\n        print string\n    else :\n        for i in grammar :\n            if i[0] == string[0] :\n                print string\n                print_all_posible_strings_with_postfix(i[1], string[1:])\n    \ndef print_all_posible_strings_with_prefix_and_postfix(grammar, string) : \n    '''\n    Write a python function to print all the possible strings generated by the given grammar and input string.\n    '''\n    if is_prefix_grammar(grammar) and is_postfix_grammar(grammar) :\n        print string\n    else :\n        for i in grammar :\n            if i[0] == string[0] :\n                print string\n                print_all_posible_strings_with_prefix_and_postfix(i[1], string[1:])\n                \ndef print_all_posible_strings_with_infix_and_postfix(grammar, string) : \n    '''\n    Write a python function to print all the possible strings generated by the given grammar and input string.\n    '''\n    if is_infix_grammar(grammar) and is_postfix_grammar(grammar) :\n        print string\n    else :\n        for i in grammar :\n            if i[0] == string[0] :\n                print string\n                print_all_posible_strings_with_infix_and_postfix(i[1], string[1:])\n                \ndef print_all_posible_strings_with_infix_and_prefix(grammar, string) : \n    '''\n    Write a python function to print all the possible strings generated by the given grammar and input string.\n    '''\n    if is_infix_grammar(grammar) and is_prefix_grammar(grammar) :\n        print string\n    else :\n        for i in grammar :\n            if i[0] == string[0] :\n                print string\n                print_all_posible_strings_with_infix_and_prefix(i[1], string[1:])\n                \ndef print_all_posible_strings_with_infix_and_prefix_and_postfix(grammar, string) : \n    '''\n    Write a python function to print all the possible strings generated by the given grammar and input string.\n    '''\n    if is_infix_grammar(grammar) and is_prefix_grammar(grammar) and is_postfix_grammar(grammar) :\n        print string\n    else :\n        for i in grammar :\n            if i[0] == string[0] :\n                print string\n                print_all_posible_strings_with_infix_and_prefix_and_postfix(i[1], string[1:])\n                \ndef print_all_posible_strings_with_infix_and_prefix_and_infix(grammar, string) : \n    '''\n    Write a python function to print all the possible strings generated by the given grammar and input string.\n    '''\n    i",
        "num_ids": 4
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n",
        "num_ids": 25
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False\ndef sum_odd_digits(n):\n    '''\n    Write a python function to check if the sum of the digits of a given number is odd or even.\n    '''\n    l = len(str(n))\n    s = 0\n    for i in range(0,l):\n        s = s + n%10\n        n = n//10\n    if s%2==0:\n        return True\n    else:\n        return False\ndef convert_to_binary(n):\n    '''\n    Write a python function to convert a given number to binary.\n    '''\n    l = len(str(n))\n    for i in range(0,l):\n        n = n//2\n    return n\ndef is_Prime(n):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n==1:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    for i in range(2,n//2):\n        if n%i==0:\n            return False\n    return True\ndef is_Perfect(n):\n    '''\n    Write a python function to check whether a given number is perfect or not.\n    '''\n    s = 0\n    for i in range(1,n):\n        if n%i==0:\n            s = s+i\n    if s==n:\n        return True\n    else:\n        return False\ndef is_Armstrong(n):\n    '''\n    Write a python function to check whether a given number is an Armstrong number or not.\n    '''\n    if is_Prime(n) and n!=1:\n        l = len(str(n))\n        s = 0\n        for i in range(0,l):\n            s = s + pow(int(str(n)[i]),l)\n        if s==n:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef get_factors(n):\n    '''\n    Write a python function to find the factors of a given number.\n    '''\n    factors = []\n    for i in range(1,n+1):\n        if n%i==0:\n            factors.append(i)\n    return factors\ndef is_Prime_with_factor(n,f):\n    '''\n    Write a python function to check whether a given number is prime or not using factorials.\n    '''\n    if n==1:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    for i in range(2,f):\n        if n%i==0:\n            return False\n    return True\ndef is_Perfect_with_factor(n,f):\n    '''\n    Write a python function to check whether a given number is perfect or not using factorials.\n    '''\n    s = 0\n    for i in range(1,f):\n        if n%i==0:\n            s = s+i\n    if s==n:\n        return True\n    else:\n        return False\ndef is_Armstrong_with_factor(n,f):\n    '''\n    Write a python function to check whether a given number is an Armstrong number or not using factorials.\n    '''\n    if is_Prime_with_factor(n,f) and n!=1:\n        l = len(str(n))\n        s = 0\n        for i in range(0,l):\n            s = s + pow(int(str(n)[i]),l)\n        if s==n:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_Palindrome(n):\n    '''\n    Write a python function to check whether a given number is a palindrome or not.\n    '''\n    s = 0\n    for i in range(len(str(n))//2):\n        if str(n)[i]==str(n)[len(str(n))-i-1]:\n            s = s+1\n    if s==len(str(n))//2:\n        return True\n    else:\n        return False\ndef is_Digit_Power_of_Two(n):\n    '''\n    Write a python function to check whether a given number is a power of two or not.\n    '''\n    if is_Prime(n) and n!=1:\n        l = len(str(n))\n        for i in range(2,l):\n            if n%i==0:\n                if pow(2,l-i)==n:\n                    return True\n                else:\n                    return False\n        return True\n    else:\n        return False\ndef is_Binary_Number(n):\n    '''\n    Write a python function to check whether a given number is a binary number or not.\n    '''\n    s = 0\n    for i in range(len(str(n))):\n        if str(n)[i]=='1':\n            s = s+1\n    if s==len(str(n)):\n        return True\n    else:\n        return False\ndef is_Dictionary_Palindrome(d):\n    '''\n    Write a python function to check whether a given dictionary is a palindrome or not.\n    '''\n    for i in d:\n        if i==d[str(i)][::-1]:\n            return True\n    return False\ndef is_Number_Palindrome(n):\n    '''\n    Write a python function to check whether a given number is a palindrome or not.\n    '''\n    s = 0\n    for i in range(len(str(n))//2):\n        if str(n)[i]==str(n)[len(str(n))-i-1]:\n            s = s+1\n    if s==len(str(n))//2:\n        return True\n    else:\n        return False\ndef is_Palindrome_with_Reverse(n):\n    '''\n    Write a python function to check whether a given number is a palindrome or not.\n    '''\n    s = 0\n    for i in range(len(str(n))//2):\n        if str(n)[i]==str(n)[len(str(n))-i-1]:\n            s = s+1\n    if s==len(str(n))//2:\n        return True\n    else:\n        return False\ndef is_Narcissistic(n):\n    '''\n    Write a python function to check whether a given number is a narcissistic number or not.\n    '''\n    s = 0\n    for i in range(len(str(n))):\n        s = s+pow(int(str(n)[i]),len(str(n)))\n    if s==n:\n        return True\n    else:\n        return False\ndef is_Palindrome_with_Reverse_with_Factors(n):\n    '''\n    Write a python function to check whether a given number is a palindrome or not.\n    '''\n    s = 0\n    for i in range(1,n//2+1):\n        if n%i==0:\n            s = s+i\n    if s==n:\n        return True\n    else:\n        return False\ndef is_Prime_with_Factors(n,f):\n    '''\n    Write a python function to check whether a given number is a prime or not using factorials.\n    '''\n    if n==1:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    for i in range(2,f):\n        if n%i==0:\n            return False\n    return True\ndef is_Palindrome_with_Factors(n,f):\n    '''\n    Write a python function to check whether a given number is a palindrome or not using factorials.\n    '''\n    s = 0\n    for i in range(1,f):\n        if n%i==0:\n            s = s+i\n    if s==n:\n        return True\n    else:\n        return False\ndef is_Narcissistic_with_Factors(n,f):\n    '''\n    Write a python function to check whether a given number is a narcissistic number or no",
        "num_ids": 19
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n    \ndef is_Palindrome(n) : \n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    temp = n\n    rev = 0\n    while n > 0 : \n        rev = (rev * 10) + (n % 10)\n        n = n // 10\n    if temp == rev :\n        return True\n    else:\n        return False\n    \ndef is_Armstrong(n) : \n    '''\n    Write a python function to check whether the given number is armstrong or not.\n    '''\n    temp = n\n    sum = 0\n    while temp > 0 : \n        digit = temp % 10\n        sum = sum + digit**3\n        temp = temp // 10\n    if n == sum :\n        return True\n    else:\n        return False\n    \ndef is_Fibonacci(n) : \n    '''\n    Write a python function to check whether the given number is fibonacci or not.\n    '''\n    x = 1\n    y = 1\n    fib = 1\n    while fib <= n : \n        fib = x + y\n        x = y\n        y = fib\n    if n == fib :\n        return True\n    else:\n        return False\n    \ndef is_Prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n > 1:\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for current in range(3,int(n**0.5)+1,2):\n            if n % current == 0:\n                return False\n        return True\n    return False\n",
        "num_ids": 75
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n",
        "num_ids": 10
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n        \ndef is_Prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    flag = True\n    for i in range(2, n) : \n        if (n % i == 0) : \n            flag = False\n    return flag \n    \ndef is_Power(n) : \n    '''\n    Write a python function to check whether the given number is power of some other number or not.\n    '''\n    # a number which is power of some other number\n    if (n == 1) : \n        return True\n    elif (n == 2) : \n        return True\n    elif (n % 2 == 0) : \n        return False\n    else : \n        t = 3\n        while (t < n) : \n            if (n % t == 0) : \n                return False\n            t = t + 2\n        return True\n        \ndef is_Palindrome(n) : \n    '''\n    Write a python function to check whether the given number is a palindrome or not.\n    '''\n    if (n == n[::-1]) : \n        return True\n    return False\n        \ndef is_Armstrong(n) : \n    '''\n    Write a python function to check whether the given number is an armstrong number or not.\n    '''\n    temp = n\n    r = 0\n    while (temp!= 0) : \n        r = r + (temp % 10)**3\n        temp = temp // 10\n    if (r == n) : \n        return True\n    return False\n    \ndef is_Perfect(n) : \n    '''\n    Write a python function to check whether the given number is a perfect number or not.\n    '''\n    s = 0\n    for i in range(1, n) : \n        if (n % i == 0) : \n            s = s + i\n    return (s == n)\n        \ndef is_ArmstrongNumber(n) : \n    '''\n    Write a python function to check whether the given number is an armstrong number or not.\n    '''\n    temp = n\n    r = 0\n    while (temp!= 0) : \n        r = r + (temp % 10)**3\n        temp = temp // 10\n    if (r == n) : \n        return True\n    return False\n    \ndef is_Fibonacci(n) : \n    '''\n    Write a python function to check whether the given number is a fibonacci number or not.\n    '''\n    if (n == 0) : \n        return True\n    elif (n == 1) : \n        return True\n    elif (n == 2) : \n        return True\n    else : \n        i = 3\n        while (i < n) : \n            if (n % i == 0) : \n                return False\n            i = i + 2\n        return True\n        \ndef is_Triangle(n) : \n    '''\n    Write a python function to check whether the given number is a triangle number or not.\n    '''\n    temp = n\n    s = 0\n    while (temp!= 0) : \n        s = s + temp\n        temp = temp // 10\n    if (s == n) : \n        return True\n    return False\n    \ndef is_Pentagonal(n) : \n    '''\n    Write a python function to check whether the given number is a pentagonal number or not.\n    '''\n    temp = n\n    s = 0\n    while (temp!= 0) : \n        s = s + temp\n        temp = temp // 10\n    if (s == (n * (3 * n - 1)) // 2) : \n        return True\n    return False\n    \ndef is_Hexagonal(n) : \n    '''\n    Write a python function to check whether the given number is a hexagonal number or not.\n    '''\n    temp = n\n    s = 0\n    while (temp!= 0) : \n        s = s + temp\n        temp = temp // 10\n    if (s == (n * (2 * n - 1)) // 2) : \n        return True\n    return False\n    \ndef is_Heptagonal(n) : \n    '''\n    Write a python function to check whether the given number is a heptagonal number or not.\n    '''\n    temp = n\n    s = 0\n    while (temp!= 0) : \n        s = s + temp\n        temp = temp // 10\n    if (s == (n * (5 * n - 3)) // 2) : \n        return True\n    return False\n    \ndef is_Octagonal(n) : \n    '''\n    Write a python function to check whether the given number is an octagonal number or not.\n    '''\n    temp = n\n    s = 0\n    while (temp!= 0) : \n        s = s + temp\n        temp = temp // 10\n    if (s == (n * (3 * n - 2)) // 2) : \n        return True\n    return False\n    \ndef is_Square(n) : \n    '''\n    Write a python function to check whether the given number is a square number or not.\n    '''\n    temp = n\n    s = 0\n    while (temp!= 0) : \n        s = s + temp\n        temp = temp // 10\n    if (s == n) : \n        return True\n    return False\n        \ndef is_PentagonalNumber(n) : \n    '''\n    Write a python function to check whether the given number is a pentagonal number or not.\n    '''\n    temp = n\n    s = 0\n    while (temp!= 0) : \n        s = s + temp\n        temp = temp // 10\n    if (s == (n * (3 * n - 1)) // 2) : \n        return True\n    return False\n    \ndef is_HexagonalNumber(n) : \n    '''\n    Write a python function to check whether the given number is a hexagonal number or not.\n    '''\n    temp = n\n    s = 0\n    while (temp!= 0) : \n        s = s + temp\n        temp = temp // 10\n    if (s == (n * (2 * n - 1)) // 2) : \n        return True\n    return False\n    \ndef is_HeptagonalNumber(n) : \n    '''\n    Write a python function to check whether the given number is a heptagonal number or not.\n    '''\n    temp = n\n    s = 0\n    while (temp!= 0) : \n        s = s + temp\n        temp = temp // 10\n    if (s == (n * (5 * n - 3)) // 2) : \n        return True\n    return False\n    \ndef is_OctagonalNumber(n) : \n    '''\n    Write a python function to check whether the given number is an octagonal number or not.\n    '''\n    temp = n\n    s = 0\n    while (temp!= 0) : \n        s = s + temp\n        temp = temp // 10\n    if (s == (n * (3 * n - 2)) // 2) : \n        return True\n    return False\n    \ndef is_PrimeNumber(n) : \n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    if (n == 1) : \n        return False\n    for i in range(2, n) : \n        if (n % i == 0) : \n            return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n",
        "num_ids": 10
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2 == 0) : \n        return True\n    return False\n",
        "num_ids": 22
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    index_dict = {}\n    for s in str1:\n        if s in index_dict:\n            return s\n        else:\n            index_dict[s] = 1\n    return None\n",
        "num_ids": 48
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str2 = str1[:]\n    for char in str1:\n        if str2.count(char) > 1:\n            return char\n        else:\n            str2 = str2.replace(char,'',1)\n    return None\n",
        "num_ids": 59
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    dict={}\n    for i in str1:\n        if i in dict:\n            return i\n        else:\n            dict[i]=1\n",
        "num_ids": 37
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Approach 1\n    # for i in range(len(str1)):\n    #     if str1[i] in str1[i+1:]:\n    #         return str1[i]\n",
        "num_ids": 50
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if len(str1) < 2:\n        return None\n    for i in range(len(str1)):\n        if str1[i] == str1[i+1]:\n            return str1[i]\n    return None\n",
        "num_ids": 58
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    first = str1[0]\n    for i in range(1, len(str1)):\n        if str1[i] == first:\n            return first\n        else:\n            first = str1[i]\n    return None\n",
        "num_ids": 58
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.count(char) > 1:\n            return char\n    return None\n",
        "num_ids": 31
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    \n    dict = {}\n    \n    for each in str1:\n        if each not in dict:\n            dict[each] = 1\n        else:\n            dict[each] += 1\n            break\n    \n    return each\n",
        "num_ids": 58
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    dict1 = {}\n    for i in str1:\n        dict1[i] = 0\n    for i in str1:\n        dict1[i] += 1\n    for i in dict1:\n        if dict1[i] > 1:\n            return i\n    return None\n",
        "num_ids": 69
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(0,len(str1)):\n        if str1[i] in str1[i+1:]:\n            return str1[i]\n    return None\n",
        "num_ids": 46
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Build a list of all valid numbers up to n, where a number is valid if it is a \n    # number divisible by 3 and/or 5, and not divisible by 7.\n    valid_numbers = list(range(1,n+1,1))\n    valid_numbers = [x for x in valid_numbers if x%3==0 and x%5==0 and x%7!=0]\n    # Since we are working with ints, convert the valid numbers into strings\n    valid_numbers_str = [str(x) for x in valid_numbers]\n    return valid_numbers_str\n",
        "num_ids": 149
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n <= 2:\n        return [i for i in range(1,n+1)]\n    ludic_list = [2]\n    for i in range(3,n+1):\n        if i % 2 == 0 and i % 3 == 0:\n            ludic_list.append(i)\n    return ludic_list\n",
        "num_ids": 81
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    \n    ans = []\n    for i in xrange(n+1):\n        temp = i\n        while temp:\n            if temp == 1:\n                ans.append(i)\n                break\n            if temp % 2 == 0:\n                temp /= 2\n            elif temp % 3 == 0:\n                temp /= 3\n            elif temp % 5 == 0:\n                temp /= 5\n            else:\n                ans.append(i)\n                break\n    return ans\n",
        "num_ids": 115
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_count = 0\n    for i in range(1, n+1):\n        temp = i\n        temp = list(str(temp))\n        for j in temp:\n            i = int(i)\n            if int(j) > int(i):\n                break\n            elif int(j) == int(i):\n                ludic_count += 1\n    return ludic_count\n",
        "num_ids": 96
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 1:\n        return [1]\n    lucids = [0] * (n + 1)\n    lucids[1] = 1\n    lucids[2] = 1\n    for i in range(3, n + 1):\n        if lucids[i - 1] == 0:\n            continue\n        else:\n            if i % 3 == 0:\n                lucids[i] = lucids[i // 3]\n            elif i % 2 == 0:\n                lucids[i] = lucids[i // 2]\n            else:\n                lucids[i] = lucids[i - 1]\n    lucids[n] = 1\n    return [i for i in range(1, n + 1) if lucids[i] == 1]\n",
        "num_ids": 189
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in xrange(1, n):\n        # iterate through i\n        i_digits = [int(d) for d in str(i)]\n        if i_digits[0] == 1 or i_digits[1] == 1 or i_digits[2] == 1:\n            continue\n        i_str = str(i)\n        if i_str == i_str[::-1]:\n            ludic_numbers.append(i)\n    return ludic_numbers\n",
        "num_ids": 130
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 3: return [1]\n    ludics = [1]\n    for i in xrange(2, n):\n        ludics.append(3 ** (i - 1) * 2 - 1)\n    return ludics\n",
        "num_ids": 60
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 2:\n        return [n]\n    ludic_nums = get_ludic(n-1)\n    ludic_nums_plus1 = []\n    for i in range(len(ludic_nums)):\n        ludic_nums_plus1.append(ludic_nums[i] + 1)\n    ludic_nums = []\n    for i in range(len(ludic_nums_plus1)):\n        if is_ludic(ludic_nums_plus1[i]):\n            ludic_nums.append(ludic_nums_plus1[i])\n    return ludic_nums\n",
        "num_ids": 161
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = [0]\n    for i in xrange(1, n):\n        lucids.append(i)\n        if i % 2 == 0:\n            lucids[i] = lucids[i] + 1\n        elif i % 3 == 0:\n            lucids[i] = lucids[i] + 2\n        else:\n            lucids[i] = lucids[i] + 3\n    return lucids\n",
        "num_ids": 109
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_nums = []\n    for num in range(1, n + 1):\n        lucid = num\n        while num > 0:\n            digit = num % 10\n            if digit!= 0:\n                break\n            num /= 10\n        if num == 0:\n            ludic_nums.append(lucid)\n    return ludic_nums\n",
        "num_ids": 91
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    start = 0\n    end = len(s) - 1\n    res = [None] * len(s)\n",
        "num_ids": 29
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    i = 0\n    j = len(s) - 1\n    while i <= j:\n        if s[i] =='':\n            i += 1\n            continue\n        elif j == i:\n            break\n        elif s[j] =='':\n            s[i], s[j] = s[j], s[i]\n            j -= 1\n            i += 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            j -= 1\n            i += 1\n    return s\n",
        "num_ids": 130
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n",
        "num_ids": 17
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    result = ''\n    left = 0\n    for i in range(len(s)):\n        if s[i] =='':\n            result += s[left:i]\n            result += s[i].strip()\n            left = i+1\n    result += s[left:]\n    return result\n",
        "num_ids": 73
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split(' ')[::-1])\n",
        "num_ids": 18
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s:\n        return ''\n    s = s.split(' ')\n    s.reverse()\n    return''.join(s)\n",
        "num_ids": 36
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n",
        "num_ids": 17
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    list_of_words = s.split(' ')\n    new_string = []\n    for word in list_of_words:\n        new_string.insert(0, word)\n    new_string =''.join(new_string)\n    return new_string\n",
        "num_ids": 65
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    new_string = ''\n    words = s.split()\n    for word in words:\n        new_string += word[::-1] +''\n    return new_string[:-1]\n",
        "num_ids": 48
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    l = s.split(' ')\n    return''.join(l[::-1])\n",
        "num_ids": 24
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        return True\n    return False\n",
        "num_ids": 43
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    return num > 1 and not [num % i for i in range(2,num) if num % i == 0]\n",
        "num_ids": 30
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2,num):\n            if num % i == 0:\n                return False\n    return True\n",
        "num_ids": 57
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n    return True\n",
        "num_ids": 57
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        # check for factors\n        for i in xrange(2, num):\n            if (num % i) == 0:\n                print num, \"is not a prime number\"\n                print \"factors: \", i\n                break\n        else:\n            print num, \"is a prime number\"\n    else:\n        print num, \"is not a prime number\"\n",
        "num_ids": 93
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    \n    if num == 1:\n        return False\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n",
        "num_ids": 47
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in xrange(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    else:\n        return False\n",
        "num_ids": 54
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef find_distance(r1,r2,d1,d2):\n    '''\n    Write a function to compute the distance between two points.\n    '''\n    return math.sqrt((r1-r2)**2+(d1-d2)**2)\ndef find_time_between_two_points(r1,d1,r2,d2):\n    '''\n    Write a function to compute the time taken to travel from one point to another.\n    '''\n    return find_distance(r1,r2,d1,d2)/15\ndef find_total_time_taken(distance,speed):\n    '''\n    Write a function to compute the total time taken to travel a given distance, with a given speed.\n    '''\n    return distance/speed\ndef find_average_speed(distance,time):\n    '''\n    Write a function to compute the average speed of a vehicle travelling a given distance, with a given time.\n    '''\n    return distance/time\ndef find_velocity(speed,time):\n    '''\n    Write a function to compute the velocity of a vehicle travelling a given distance, with a given time.\n    '''\n    return speed*time\ndef find_acceleration(speed,time):\n    '''\n    Write a function to compute the acceleration of a vehicle travelling a given distance, with a given time.\n    '''\n    return (speed**2-speed*time)/time\ndef find_displacement(velocity,time):\n    '''\n    Write a function to compute the displacement of a vehicle travelling a given velocity, with a given time.\n    '''\n    return velocity*time\ndef find_distance_travelled(displacement,speed):\n    '''\n    Write a function to compute the distance that the vehicle has travelled, with a given speed and displacement.\n    '''\n    return displacement/speed\ndef find_time_taken(displacement,speed):\n    '''\n    Write a function to compute the time taken, with a given displacement and speed.\n    '''\n    return displacement/speed\ndef find_total_distance_travelled(time,speed):\n    '''\n    Write a function to compute the total distance that the vehicle has travelled, with a given time and speed.\n    '''\n    return speed*time\ndef find_delta_v(delta_x,delta_t):\n    '''\n    Write a function to compute the change in velocity, with a given change in distance and change in time.\n    '''\n    return delta_x/delta_t\ndef find_delta_v_squared(delta_v):\n    '''\n    Write a function to compute the change in velocity, with a given change in distance and change in time.\n    '''\n    return delta_v**2\ndef find_delta_x(delta_v,delta_t):\n    '''\n    Write a function to compute the change in distance, with a given change in velocity and change in time.\n    '''\n    return delta_v*delta_t\ndef find_delta_x_squared(delta_x):\n    '''\n    Write a function to compute the change in distance, with a given change in velocity and change in time.\n    '''\n    return delta_x**2\ndef find_v_squared(v):\n    '''\n    Write a function to compute the change in velocity, with a given change in velocity.\n    '''\n    return v**2\ndef find_a(v):\n    '''\n    Write a function to compute the change in acceleration, with a given change in velocity.\n    '''\n    return v\ndef find_a_squared(a):\n    '''\n    Write a function to compute the change in acceleration, with a given change in acceleration.\n    '''\n    return a**2\ndef find_theta(theta):\n    '''\n    Write a function to compute the change in angle, with a given change in angle.\n    '''\n    return theta\ndef find_theta_squared(theta):\n    '''\n    Write a function to compute the change in angle, with a given change in angle.\n    '''\n    return theta**2\ndef find_x(x):\n    '''\n    Write a function to compute the change in x, with a given change in x.\n    '''\n    return x\ndef find_x_squared(x):\n    '''\n    Write a function to compute the change in x, with a given change in x.\n    '''\n    return x**2\ndef find_y(y):\n    '''\n    Write a function to compute the change in y, with a given change in y.\n    '''\n    return y\ndef find_y_squared(y):\n    '''\n    Write a function to compute the change in y, with a given change in y.\n    '''\n    return y**2\ndef find_z(z):\n    '''\n    Write a function to compute the change in z, with a given change in z.\n    '''\n    return z\ndef find_z_squared(z):\n    '''\n    Write a function to compute the change in z, with a given change in z.\n    '''\n    return z**2\ndef find_r(r):\n    '''\n    Write a function to compute the change in r, with a given change in r.\n    '''\n    return r\ndef find_r_squared(r):\n    '''\n    Write a function to compute the change in r, with a given change in r.\n    '''\n    return r**2\ndef find_theta_d(theta_d):\n    '''\n    Write a function to compute the change in theta, with a given change in theta.\n    '''\n    return theta_d\ndef find_theta_d_squared(theta_d):\n    '''\n    Write a function to compute the change in theta, with a given change in theta.\n    '''\n    return theta_d**2\ndef find_phi(phi):\n    '''\n    Write a function to compute the change in phi, with a given change in phi.\n    '''\n    return phi\ndef find_phi_squared(phi):\n    '''\n    Write a function to compute the change in phi, with a given change in phi.\n    '''\n    return phi**2\ndef find_r_d(r_d):\n    '''\n    Write a function to compute the change in r, with a given change in r.\n    '''\n    return r_d\ndef find_r_d_squared(r_d):\n    '''\n    Write a function to compute the change in r, with a given change in r.\n    '''\n    return r_d**2\ndef find_phi_d(phi_d):\n    '''\n    Write a function to compute the change in phi, with a given change in phi.\n    '''\n    return phi_d\ndef find_phi_d_squared(phi_d):\n    '''\n    Write a function to compute the change in phi, with a given change in phi.\n    '''\n    return phi_d**2\ndef find_r_d_theta(r_d,theta):\n    '''\n    Write a function to compute the change in r, with a given change in r and the change in angle.\n    '''\n    return r_d*math.sin(theta)\ndef find_r_d_theta_squared(r_d,theta):\n    '''\n    Write a function to compute the change in r, with a given change in r and the change in angle.\n    '''\n    return r_d*theta\ndef find_r_d_phi(r_d,phi):\n    '''\n    Write a function to compute the change in r, with a given change in r and the change in angle.\n    '''\n    return r_d*math.cos(phi)\ndef find_r_d_phi_squared(r_d,phi):\n    '''\n    Write a function to compute the change in r, with a given change in r and the change in angle.\n    '''\n    return r_d*phi\ndef find_r_d_d",
        "num_ids": 18
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\n",
        "num_ids": 14
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\n",
        "num_ids": 14
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\ndef degree_radian(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * (180 / math.pi)\ndef calculate_speed(v, t):\n    '''\n    Write a function to calculate the speed of a moving object when given the speed in m/s and the time in s.\n    '''\n    return (v * t)\ndef calculate_average_speed(v, t):\n    '''\n    Write a function to calculate the average speed of a moving object when given the speed in m/s and the time in s.\n    '''\n    return (v / t)\ndef calculate_acceleration(a, t):\n    '''\n    Write a function to calculate the acceleration of a moving object when given the acceleration in m/s\u00b2 and the time in s.\n    '''\n    return (a * t)\ndef calculate_distance(v, t):\n    '''\n    Write a function to calculate the distance of a moving object when given the speed in m/s and the time in s.\n    '''\n    return (v * t)\ndef calculate_energy(m, v, t):\n    '''\n    Write a function to calculate the energy of a moving object when given the mass in kg, the speed in m/s, and the time in s.\n    '''\n    return (0.5 * m * (v * v) * t)\ndef calculate_force(m, a, t):\n    '''\n    Write a function to calculate the force of a moving object when given the mass in kg, the acceleration in m/s\u00b2, and the time in s.\n    '''\n    return (m * a * t)\ndef calculate_power(w, t):\n    '''\n    Write a function to calculate the power of a moving object when given the angular speed in radians/s and the time in s.\n    '''\n    return (w * t)\ndef calculate_torque(w, l):\n    '''\n    Write a function to calculate the torque of a moving object when given the angular speed in radians/s and the length of the rod in m.\n    '''\n    return (w * l)\ndef calculate_angular_acceleration(a, l):\n    '''\n    Write a function to calculate the angular acceleration of a moving object when given the angular acceleration in radians/s\u00b2 and the length of the rod in m.\n    '''\n    return (a * l)\ndef calculate_angular_speed(w, l):\n    '''\n    Write a function to calculate the angular speed of a moving object when given the angular speed in radians/s and the length of the rod in m.\n    '''\n    return (w * l)\ndef calculate_angular_position(w, t):\n    '''\n    Write a function to calculate the angular position of a moving object when given the angular speed in radians/s and the time in s.\n    '''\n    return (w * t)\ndef calculate_gravitational_acceleration(m, r):\n    '''\n    Write a function to calculate the gravitational acceleration of an object when given the mass in kg and the distance in m.\n    '''\n    return ((G * m) / (r * r))\ndef calculate_gravitational_force(m, r):\n    '''\n    Write a function to calculate the gravitational force of an object when given the mass in kg and the distance in m.\n    '''\n    return (G * m * r)\ndef calculate_kinetic_energy(m, v):\n    '''\n    Write a function to calculate the kinetic energy of a moving object when given the mass in kg and the speed in m/s.\n    '''\n    return (0.5 * m * (v * v))\ndef calculate_potential_energy(m, r):\n    '''\n    Write a function to calculate the potential energy of an object when given the mass in kg and the distance in m.\n    '''\n    return (m * r)\ndef calculate_work(m, v, r):\n    '''\n    Write a function to calculate the work done by an object when given the mass in kg, the speed in m/s, and the distance in m.\n    '''\n    return (m * v * r)\ndef calculate_pressure(m, r):\n    '''\n    Write a function to calculate the pressure of a moving object when given the mass in kg and the distance in m.\n    '''\n    return (m * r)\ndef calculate_density(m, r):\n    '''\n    Write a function to calculate the density of a moving object when given the mass in kg and the distance in m.\n    '''\n    return (m / (r * r))\ndef calculate_dynamic_pressure(m, v, t):\n    '''\n    Write a function to calculate the dynamic pressure of a moving object when given the mass in kg, the speed in m/s, and the time in s.\n    '''\n    return (m * v * v * t)\ndef calculate_gravity(m, r):\n    '''\n    Write a function to calculate the force of gravity on an object when given the mass in kg and the distance in m.\n    '''\n    return (G * m * r)\ndef calculate_acceleration_of_gravity(m, r):\n    '''\n    Write a function to calculate the acceleration of gravity on an object when given the mass in kg and the distance in m.\n    '''\n    return (G * m * r * r)\ndef calculate_momentum(m, v):\n    '''\n    Write a function to calculate the momentum of a moving object when given the mass in kg and the speed in m/s.\n    '''\n    return (m * v)\ndef calculate_impulse(m, v, r):\n    '''\n    Write a function to calculate the impulse of an object when given the mass in kg, the speed in m/s, and the distance in m.\n    '''\n    return (m * v * r)\ndef calculate_impulse_force(m, v, r):\n    '''\n    Write a function to calculate the impulse force of an object when given the mass in kg, the speed in m/s, and the distance in m.\n    '''\n    return (m * v * v * r)\ndef calculate_friction(m, a, r):\n    '''\n    Write a function to calculate the friction force of an object when given the mass in kg, the acceleration in m/s\u00b2, and the distance in m.\n    '''\n    return (m * a * r)\ndef calculate_friction_force(m, a, r):\n    '''\n    Write a function to calculate the friction force of an object when given the mass in kg, the acceleration in m/s\u00b2, and the distance in m.\n    '''\n    return (m * a * r * r)\ndef calculate_slip(m, a, r):\n    '''\n    Write a function to calculate the slip force of an object when given the mass in kg, the acceleration in m/s\u00b2, and the distance in m.\n    '''\n    return (m * a * r * r * math.sin(radian_degree(a * r)))\ndef calculate_slip_force(m, a, r):\n    '''\n    Write a function to calculate the slip force of an object when given the mass in kg, the acceleration in m/s\u00b2, and the distance in m.\n    '''\n    return (m * a * r * r * r * math.sin(radian_degree(a * r)))\ndef calculate_free_fall(v, t):\n    '''\n    Write a function to calculate the free fall speed of an object when given the speed in m/s and the time in s.\n    '''\n    return (v * t - ((v * t) * (v * t)))\ndef calculate_net_force(f1, f2):\n    '''\n    Write a function to calculate the net force of two objects when given the forces of each object in N.\n    '''\n    return (f1 - f2)\ndef calculate_net_acceleration(a1, a2):\n    '''\n    Write a function to calculate the net acceleration of two objects when given the accelerations of each object in m/s\u00b2.\n    '''\n    return (a1 - a2)\ndef calculate_net_velocity(v1, v2):\n    '''\n    Write a function to calculate the net velocity of two objects when given the velocities of each object in m/s.\n    '''\n    return ",
        "num_ids": 5
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180\ndef radian_degree_tuple(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180, degree * math.pi/180\ndef radian_degree_tuple_sorted(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180, degree * math.pi/180\ndef radian_degree_tuple_sorted_tuple(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180, degree * math.pi/180\ndef radian_degree_tuple_sorted_tuple_sorted(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180, degree * math.pi/180\ndef radian_degree_tuple_sorted_tuple_sorted_tuple(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180, degree * math.pi/180\ndef radian_degree_tuple_sorted_tuple_sorted_tuple_sorted(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180, degree * math.pi/180\ndef radian_degree_tuple_sorted_tuple_sorted_tuple_sorted_tuple(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180, degree * math.pi/180\ndef radian_degree_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180, degree * math.pi/180\ndef radian_degree_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180, degree * math.pi/180\ndef radian_degree_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180, degree * math.pi/180\ndef radian_degree_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180, degree * math.pi/180\ndef radian_degree_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180, degree * math.pi/180\ndef radian_degree_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180, degree * math.pi/180\ndef radian_degree_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180, degree * math.pi/180\ndef radian_degree_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180, degree * math.pi/180\ndef radian_degree_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180, degree * math.pi/180\ndef radian_degree_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180, degree * math.pi/180\ndef radian_degree_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180, degree * math.pi/180\ndef radian_degree_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180, degree * math.pi/180\ndef radian_degree_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180, degree * math.pi/180\ndef radian_degree_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180, degree * math.pi/180\ndef radian_degree_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180, degree * math.pi/180\ndef radian_degree_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted_tuple_sorted",
        "num_ids": 97
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_to_angle(radian):\n    '''\n    Write a function to convert radians to angle.\n    '''\n    return radian*180/math.pi\ndef angle_to_radian(angle):\n    '''\n    Write a function to convert angle to radians.\n    '''\n    return angle*math.pi/180\ndef get_angle_to_rotate(radian, point):\n    '''\n    Write a function to calculate the angle to rotate by \n    from the point to the radian.\n    '''\n    return radian-point\ndef rotate_point(point, radian):\n    '''\n    Write a function to rotate the point by the angle.\n    '''\n    x=point[0]\n    y=point[1]\n    new_x=(x*math.cos(radian))-(y*math.sin(radian))\n    new_y=(x*math.sin(radian))+(y*math.cos(radian))\n    return [new_x, new_y]\ndef rotate_point_about_center(point, radian, center):\n    '''\n    Write a function to rotate the point about the center.\n    '''\n    return rotate_point(point, radian+get_angle_to_rotate(center, point))\ndef rotate_about_center(point, radian, center):\n    '''\n    Write a function to rotate the point about the center.\n    '''\n    return rotate_point_about_center(point, radian, center)\ndef rotate_about_point(point, radian, point2):\n    '''\n    Write a function to rotate the point about the point2.\n    '''\n    return rotate_point_about_center(point, radian, point2)\ndef get_center(point1, point2):\n    '''\n    Write a function to get the center of the two points.\n    '''\n    return [(point1[0]+point2[0])/2, (point1[1]+point2[1])/2]\ndef get_angle_to_point(point, point2):\n    '''\n    Write a function to calculate the angle to rotate by \n    from the point to the point2.\n    '''\n    return radian_degree(get_angle_to_rotate(point[0], point2[0]))\ndef rotate_point_about_point(point, radian, point2):\n    '''\n    Write a function to rotate the point about the point2.\n    '''\n    return rotate_point(point, radian+get_angle_to_point(point2, point))\ndef rotate_about_point(point, radian, point2):\n    '''\n    Write a function to rotate the point about the point2.\n    '''\n    return rotate_point_about_point(point, radian, point2)\ndef get_center_of_two_points(point1, point2):\n    '''\n    Write a function to get the center of the two points.\n    '''\n    return get_center(point1, point2)\ndef get_angle_to_line(point, line_point1, line_point2):\n    '''\n    Write a function to calculate the angle to rotate by \n    from the point to the line_point1.\n    '''\n    return radian_degree(get_angle_to_rotate(point[0], line_point1[0]))\ndef rotate_point_about_line(point, radian, line_point1, line_point2):\n    '''\n    Write a function to rotate the point about the line_point1.\n    '''\n    return rotate_point(point, radian+get_angle_to_line(point, line_point1, line_point2))\ndef rotate_about_line(point, radian, line_point1, line_point2):\n    '''\n    Write a function to rotate the point about the line_point1.\n    '''\n    return rotate_point_about_line(point, radian, line_point1, line_point2)\ndef get_center_of_two_lines(line_point1, line_point2):\n    '''\n    Write a function to get the center of the two points.\n    '''\n    return get_center(line_point1, line_point2)\ndef get_angle_to_three_points(point1, point2, point3):\n    '''\n    Write a function to calculate the angle to rotate by \n    from the point to the point3.\n    '''\n    return radian_degree(get_angle_to_rotate(point1[0], point3[0]))\ndef rotate_point_about_three_points(point, radian, point1, point2, point3):\n    '''\n    Write a function to rotate the point about the point1.\n    '''\n    return rotate_point(point, radian+get_angle_to_three_points(point1, point2, point3))\ndef rotate_about_three_points(point, radian, point1, point2, point3):\n    '''\n    Write a function to rotate the point about the point1.\n    '''\n    return rotate_point_about_three_points(point, radian, point1, point2, point3)\ndef get_center_of_two_lines(line_point1, line_point2):\n    '''\n    Write a function to get the center of the two points.\n    '''\n    return get_center(line_point1, line_point2)\ndef get_angle_to_polygon(point, polygon_point):\n    '''\n    Write a function to calculate the angle to rotate by \n    from the point to the polygon_point.\n    '''\n    return radian_degree(get_angle_to_rotate(point[0], polygon_point[0]))\ndef rotate_point_about_polygon(point, radian, polygon_point):\n    '''\n    Write a function to rotate the point about the polygon_point.\n    '''\n    return rotate_point(point, radian+get_angle_to_polygon(point, polygon_point))\ndef rotate_about_polygon(point, radian, polygon_point):\n    '''\n    Write a function to rotate the point about the polygon_point.\n    '''\n    return rotate_point_about_polygon(point, radian, polygon_point)\ndef get_center_of_two_polygons(polygon_point1, polygon_point2):\n    '''\n    Write a function to get the center of the two points.\n    '''\n    return get_center(polygon_point1, polygon_point2)\ndef get_angle_to_two_polygons(polygon_point1, polygon_point2):\n    '''\n    Write a function to calculate the angle to rotate by \n    from the point to the polygon_point1.\n    '''\n    return radian_degree(get_angle_to_rotate(polygon_point1[0], polygon_point2[0]))\ndef rotate_point_about_two_polygons(point, radian, polygon_point1, polygon_point2):\n    '''\n    Write a function to rotate the point about the polygon_point1.\n    '''\n    return rotate_point(point, radian+get_angle_to_two_polygons(polygon_point1, polygon_point2))\ndef rotate_about_two_polygons(point, radian, polygon_point1, polygon_point2):\n    '''\n    Write a function to rotate the point about the polygon_point1.\n    '''\n    return rotate_point_about_two_polygons(point, radian, polygon_point1, polygon_point2)\ndef get_center_of_two_lines(line_point1, line_point2):\n    '''\n    Write a function to get the center of the two points.\n    '''\n    return get_center(line_point1, line_point2)\ndef get_angle_to_center(point, center):\n    '''\n    Write a function to calculate the angle to rotate by \n    from the point to the center.\n    '''\n    return radian_degree(get_angle_to_rotate(poin",
        "num_ids": 20
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\ndef radian_pi(pi):\n    return pi * (math.pi / 180)\ndef degree_pi(pi):\n    return pi * (180 / math.pi)\ndef add(a,b):\n    return a+b\ndef sub(a,b):\n    return a-b\ndef mul(a,b):\n    return a*b\ndef div(a,b):\n    return a/b\ndef sqrt(a):\n    return a**(1/2)\ndef sin(a):\n    return math.sin(radian_degree(a))\ndef cos(a):\n    return math.cos(radian_degree(a))\ndef tan(a):\n    return math.tan(radian_degree(a))\ndef arcsin(a):\n    return radian_degree(math.asin(a))\ndef arccos(a):\n    return radian_degree(math.acos(a))\ndef arctan(a):\n    return radian_degree(math.atan(a))\ndef arcsinh(a):\n    return radian_degree(math.asinh(a))\ndef arccosh(a):\n    return radian_degree(math.acosh(a))\ndef arctanh(a):\n    return radian_degree(math.atanh(a))\ndef cosh(a):\n    return math.cosh(radian_degree(a))\ndef sinh(a):\n    return math.sinh(radian_degree(a))\ndef tanh(a):\n    return math.tanh(radian_degree(a))\ndef exp(a):\n    return math.exp(radian_degree(a))\ndef log(a):\n    return math.log(a)\ndef ln(a):\n    return math.log(a)\ndef log10(a):\n    return math.log10(a)\ndef acosh(a):\n    return radian_degree(math.acosh(a))\ndef asinh(a):\n    return radian_degree(math.asinh(a))\ndef atanh(a):\n    return radian_degree(math.atanh(a))\ndef floor(a):\n    return math.floor(a)\ndef ceil(a):\n    return math.ceil(a)\ndef trunc(a):\n    return math.trunc(a)\ndef round(a,b):\n    return math.trunc(a*b)/b\ndef pow(a,b):\n    return a**b\ndef min(a,b):\n    return min(a,b)\ndef max(a,b):\n    return max(a,b)\ndef gcd(a,b):\n    return math.gcd(a,b)\ndef lcm(a,b):\n    return a*b/math.gcd(a,b)\ndef mod(a,b):\n    return a%b\ndef divmod(a,b):\n    return a//b,a%b\ndef ipow(a,b,c):\n    return a**b%c\ndef copysign(a,b):\n    return a*math.copysign(1,b)\ndef fmod(a,b):\n    return a-math.fmod(a,b)\ndef fsum(a):\n    return sum(a)\ndef sum(a):\n    return sum(a)\ndef sumall(a):\n    return sum(a)\ndef sumofsq(a):\n    return sum(map(lambda x: x**2,a))\ndef prodsum(a):\n    return sum(a)**2\ndef sumprod(a):\n    return sum(a)**2\ndef lcm(a):\n    return a[0]*a[1]/math.gcd(a[0],a[1])\ndef bit_count(a):\n    return bin(a).count('1')\ndef bit_reverse(a):\n    return ''.join(reversed(bin(a)))\ndef bit_set(a):\n    return a&(a-1)\ndef bit_clear(a):\n    return a&~(a-1)\ndef bit_flip(a):\n    return ~a\ndef bit_and(a,b):\n    return a&b\ndef bit_or(a,b):\n    return a|b\ndef bit_xor(a,b):\n    return a^b\ndef bit_not(a):\n    return ~a\ndef bit_length(a):\n    return len(bin(a))-2\ndef count_bits(a):\n    return bit_length(a)\ndef bit_scan(a,start,step):\n    return a&(a-1)>>start\ndef bit_scan_pos(a,start,step):\n    return a&(a-1)>>start\ndef bit_scan_neg(a,start,step):\n    return a&(a-1)<<start\ndef bit_scan_pos_start(a,start,step):\n    return a&(a-1)>>start\ndef bit_scan_neg_start(a,start,step):\n    return a&(a-1)<<start\ndef bit_scan_pos_step(a,start,step):\n    return a&(a-1)>>start\ndef bit_scan_neg_step(a,start,step):\n    return a&(a-1)<<start\ndef bit_scan_pos_end(a,start,step):\n    return a&(a-1)>>start\ndef bit_scan_neg_end(a,start,step):\n    return a&(a-1)<<start\ndef bit_count_pos(a,start,step):\n    return bit_scan_pos(a,start,step)&(bit_scan_pos_end(a,start,step) - 1)\ndef bit_count_neg(a,start,step):\n    return bit_scan_neg(a,start,step)&(bit_scan_neg_end(a,start,step) - 1)\ndef bit_count_start(a,start,step):\n    return bit_scan_pos(a,start,step)&(bit_scan_pos_start(a,start,step) - 1)\ndef bit_count_end(a,start,step):\n    return bit_scan_neg(a,start,step)&(bit_scan_neg_start(a,start,step) - 1)\ndef bit_count_step(a,start,step):\n    return bit_scan_pos_step(a,start,step)&(bit_scan_pos_end(a,start,step) - 1)\ndef bit_count_pos_start(a,start,step):\n    return bit_scan_pos_start(a,start,step)&(bit_scan_pos_end(a,start,step) - 1)\ndef bit_count_pos_step(a,start,step):\n    return bit_scan_pos_step(a,start,step)&(bit_scan_pos_end(a,start,step) - 1)\ndef bit_count_pos_end(a,start,step):\n    return bit_scan_pos_end(a,start,step)&(bit_scan_pos_end(a,start,step) - 1)\ndef bit_count_neg_start(a,start,step):\n    return bit_scan_neg_start(a,start,step)&(bit_scan_neg_end(a,start,step) - 1)\ndef bit_count_neg_step(a,start,step):\n    return bit_scan_neg_step(a,start,step)&(bit_scan_neg_end(a,start,step) - 1)\ndef bit_count_neg_end(a,start,step):\n    return bit_scan_neg_end(a,start,step)&(bit_scan_neg_end(a,start,step) - 1)\ndef bit_count_start_step(a,start,step):\n    return bit_scan_pos_start(a,start,step)&bit_scan_pos_end(a,start,step)\ndef bit_count_end_step(a,start,step):\n    return bit_scan_pos_end(a,start,step)&bit_scan_neg_start(a,start,step)\ndef bit_count_start_end_step(",
        "num_ids": 2017
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef radian_degree_2(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree*(180/math.pi)\n",
        "num_ids": 14
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\n",
        "num_ids": 12
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pat = re.compile(pattern)\n    results = re.search(pat, text)\n    if results:\n        start, end = results.span()\n        return text[start:end], start, end\n    return None, None, None\n",
        "num_ids": 60
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return re.search(pattern, text)\n",
        "num_ids": 13
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #Solve the pattern\n    l = re.findall(pattern,text)\n    if len(l) == 0:\n        return (None,None,None)\n    if len(l) == 1:\n        return (l[0],0,len(text))\n    return l[0],0,len(text)\n",
        "num_ids": 79
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start = 0\n    end = len(text)\n    while (re.search(pattern, text[start:end])!= None):\n        pos = re.search(pattern, text[start:end])\n        start = pos.start() + start\n        end = pos.end() + start\n    return text[start:end], start, end\n",
        "num_ids": 83
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start = 0\n    end = len(text)\n    if not pattern:\n        return start, end\n    if not text:\n        return start, end\n    literal = re.compile(pattern)\n    results = literal.search(text)\n    if results:\n        start = results.start()\n        end = results.end()\n    return start, end\n",
        "num_ids": 88
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    if text is None or pattern is None:\n        return None\n",
        "num_ids": 17
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    try:\n        start_index = text.index(pattern)\n    except ValueError:\n        return None, None, None\n    else:\n        index_char = pattern[1]\n        index_char = index_char.replace('\\\\','')\n        index_char = index_char.replace('^','[')\n        index_char = index_char.replace('$',']')\n        char_index = 0\n        for char in pattern:\n            if char == index_char:\n                char_index += 1\n        end_index = start_index + char_index\n        return text[start_index:end_index], start_index, end_index\n",
        "num_ids": 157
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start = 0\n    end = 0\n    m = re.search(pattern, text)\n    if m is not None:\n        start = m.start()\n        end = m.end()\n    return start, end\n",
        "num_ids": 54
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    if result == None:\n        return None\n    return result.start(), result.end()\n",
        "num_ids": 36
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    m = re.search(pattern,text)\n    if m:\n        return m.group(), m.start(), m.end()\n    else:\n        return None, None, None\n",
        "num_ids": 46
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    if n <= 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return bell_Number(n-1) + bell_Number(n-2)\n",
        "num_ids": 54
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return int((math.factorial(n) / (math.factorial(i) * math.factorial(n-i))) for i in range(n+1))\n",
        "num_ids": 42
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n",
        "num_ids": 49
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    l=[1]\n    for i in range(1,n):\n        l.append(l[-1]*(n+1))\n    return l[-1]\n",
        "num_ids": 44
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0: \n        return None\n    bell = 1\n    for i in range(1, n + 1):\n        bell = bell * (n + i) / i\n    return bell\n",
        "num_ids": 49
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return ((n * (n + 1)) / 2)**2\n    \n    \n    \ndef Fibo(n):\n    '''\n    Write a python function to find nth fibonacci number.\n    '''\n    a = 1\n    b = 1\n    i = 2\n    while(i < n):\n        c = a + b\n        a = b\n        b = c\n        i = i + 1\n    return a\n    \n    \n    \ndef count_digits(n):\n    '''\n    Write a python function to count digits in a number.\n    '''\n    count = 0\n    while(n > 0):\n        n = n // 10\n        count = count + 1\n    return count\n    \n    \n    \ndef has_consecutive_digits(n):\n    '''\n    Write a python function to find whether a number has consecutive digits or not.\n    '''\n    if (n == 0):\n        return True\n    while (n > 0):\n        if (n % 10!= (n // 10) % 10):\n            return False\n        n = n // 10\n    return True\n    \n    \n    \ndef reverse(n):\n    '''\n    Write a python function to reverse a number.\n    '''\n    rev = 0\n    while(n > 0):\n        r = n % 10\n        rev = rev * 10 + r\n        n = n // 10\n    return rev\n    \n    \n    \ndef reverse_digits(n):\n    '''\n    Write a python function to reverse digits in a number.\n    '''\n    rev = 0\n    while (n > 0):\n        rev = rev * 10 + n % 10\n        n = n // 10\n    return rev\n    \n    \n    \ndef recursive_reverse(n):\n    '''\n    Write a python function to reverse a number using recursion.\n    '''\n    if (n == 0):\n        return 0\n    else:\n        return (n % 10) + recursive_reverse(n // 10)\n    \n    \n    \ndef is_palindrome(n):\n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    temp = n\n    rev = 0\n    while(temp > 0):\n        rev = rev * 10 + temp % 10\n        temp = temp // 10\n    if (rev == n):\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_pandigital(n):\n    '''\n    Write a python function to check whether a number is pandigital or not.\n    '''\n    for i in range(1, 10):\n        if(n % i!= 0):\n            return False\n    return True\n    \n    \n    \ndef factors(n):\n    '''\n    Write a python function to find prime factors of a number.\n    '''\n    fact = []\n    for i in range(2, n+1):\n        if(n % i == 0):\n            fact.append(i)\n    return fact\n    \n    \n    \ndef find_factors(n):\n    '''\n    Write a python function to find all factors of a number.\n    '''\n    factors = []\n    for i in range(2, n+1):\n        if(n % i == 0):\n            factors.append(i)\n    return factors\n    \n    \n    \ndef perfect_number(n):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if(n % i == 0):\n            sum = sum + i\n    if (sum == n):\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_perfect(n):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if(n % i == 0):\n            sum = sum + i\n    if (sum == n):\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_abundant(n):\n    '''\n    Write a python function to check whether a number is abundant or not.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if(n % i == 0):\n            sum = sum + i\n    if (sum > n):\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_abundant_number(n):\n    '''\n    Write a python function to check whether a number is abundant or not.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if(n % i == 0):\n            sum = sum + i\n    if (sum > n):\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_abundant_num(n):\n    '''\n    Write a python function to check whether a number is abundant or not.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if(n % i == 0):\n            sum = sum + i\n    if (sum > n):\n        return True\n    else:\n        return False\n    \n    \ndef is_abundant_num_iter(n):\n    '''\n    Write a python function to check whether a number is abundant or not.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if(n % i == 0):\n            sum = sum + i\n    if (sum > n):\n        return True\n    else:\n        return False\n    \n    \ndef is_abundant_num_rec(n):\n    '''\n    Write a python function to check whether a number is abundant or not.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if(n % i == 0):\n            sum = sum + i\n    if (sum > n):\n        return True\n    else:\n        return False\n    \n    \ndef sum_digits(n):\n    '''\n    Write a python function to find sum of digits of a number.\n    '''\n    sum = 0\n    while(n > 0):\n        sum = sum + n % 10\n        n = n // 10\n    return sum\n    \n    \n    \ndef count_digits(n):\n    '''\n    Write a python function to count digits in a number.\n    '''\n    count = 0\n    while(n > 0):\n        n = n // 10\n        count = count + 1\n    return count\n    \n    \n    \ndef fibonacci(n):\n    '''\n    Write a python function to find nth fibonacci number.\n    '''\n    a = 1\n    b = 1\n    i = 2\n    while(i < n):\n        c = a + b\n        a = b\n        b = c\n        i = i + 1\n    return a\n    \n    \n    \ndef fibonacci_sequence(n):\n    '''\n    Write a python function to find nth fibonacci number.\n    '''\n    a = 1\n    b = 1\n    seq = [1,1]\n    i = 2\n    while(i < n):\n        c = a + b\n        a = b\n        b = c\n        seq.append(b)\n        i = i + 1\n    return seq\n    \n    \n    \ndef is_sorted(n):\n    '''\n    Write a python function to check whether a number is sorted or not.\n    '''\n    for i in range(1, n):\n        if(n[i] < n[i-1]):\n            return False\n    return True\n    \n    \n    \ndef is_sorted_iter(n):\n    '''\n    Write a python function to check whether a number is sorted or not.\n    '''\n    for i in range(1, n):\n        if(n[i] < n[i-1]):\n            return False\n    return True\n    \n    \n    \ndef is_sorted_rec(n):\n    '''\n    Write a python function to check whether a number is sorted or not.\n    '''\n    for i in range(1, n):\n        if(n[i] < n[i-1]):\n            return False\n    return True\n    \n    \n    \nde",
        "num_ids": 44
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    s = 0\n    for i in range(1,n):\n        s += i\n    return s\n",
        "num_ids": 27
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    count = 0\n    #iterate through 1 to n\n    for i in range(1, n+1):\n        #iterate through 2 to n\n        for j in range(1, i):\n            count += 1\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    count = 1\n    for i in range(1, n):\n        count += 1 + i\n    print(count)\n    \ndef fibonacci(n):\n    '''\n    Write a python function to find nth fibonacci number.\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n",
        "num_ids": 48
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_list = [1]\n    for i in range(1,n):\n        bell_list.append(bell_list[i-1] + bell_list[i])\n    print (bell_list[n-1])\n",
        "num_ids": 57
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L < 1:\n        return None\n    else:\n        if L > len(list1):\n            return None\n        else:\n            return list1[:L-1] + list1[L:]\n",
        "num_ids": 52
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1)<L:\n        print(\"Error, the list is too small\")\n        return\n    else:\n        list2 = list1[L:]\n        list1 = list1[0:L]\n        return list1,list2\n",
        "num_ids": 62
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    assert L > 0 and L <= len(list1)\n    list2 = []\n    for i in range(len(list1)):\n        if i!= L-1:\n            list2.append(list1[i])\n    return list2\n",
        "num_ids": 62
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L >= len(list1) or L < 0:\n        return None\n    list2 = []\n    for i in range(len(list1)):\n        if i!= L:\n            list2.append(list1[i])\n    return list2\n",
        "num_ids": 65
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if list1 == []:\n        return []\n    else:\n        k = L[0]\n        L.remove(k)\n        return [k] + remove_kth_element(list1[1:], L)\n",
        "num_ids": 56
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in range(0,len(list1)):\n        if i!= L:\n            new_list.append(list1[i])\n    return new_list\n",
        "num_ids": 51
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[0:L] + list1[L+1:]\n",
        "num_ids": 20
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for x in list1:\n        if x!= L:\n            list2.append(x)\n    return list2\n",
        "num_ids": 38
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for item in list1:\n        if list1.index(item)!= L:\n            list2.append(item)\n    return list2\n",
        "num_ids": 43
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L]+list1[L+1:]\n",
        "num_ids": 18
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_number = max(test_list[N])\n    return max_number\n",
        "num_ids": 22
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(map(lambda x: x[N], test_list))\n",
        "num_ids": 20
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([x[N] for x in test_list])\n",
        "num_ids": 18
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    n = len(test_list)\n    max_col = 0\n    for i in range(n):\n        if max_col < max(test_list[i][N]):\n            max_col = max(test_list[i][N])\n    return max_col\n",
        "num_ids": 68
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    output_list = []\n    for row in test_list:\n        output_list.append(row[N-1])\n    return output_list\n",
        "num_ids": 38
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) < N:\n        print \"Not enough rows\"\n    return max(zip(*test_list)[N-1])\n",
        "num_ids": 37
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return [max(i) for i in zip(*test_list)][N]\n",
        "num_ids": 22
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    m = len(test_list)\n    n = len(test_list[0])\n    if n < N:\n        return\n    temp = test_list[0][N-1]\n    for i in range(m):\n        if test_list[i][N-1] > temp:\n            temp = test_list[i][N-1]\n    return temp\n",
        "num_ids": 91
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    col_max = []\n    for i in range(0, len(test_list)):\n        col_max.append(max(test_list[i]))\n    return max(col_max[N-1:])\n",
        "num_ids": 56
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        max_val = max(max_val, test_list[i][N])\n    return max_val\n",
        "num_ids": 49
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = [\n        [\n            item[0] for item in lst\n        ],\n        [\n            item[1] for item in lst\n        ]\n    ]\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_lst = []\n    for i in lst:\n        new_lst.append([i[0],i[1]])\n    return new_lst\n",
        "num_ids": 43
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # if len(lst) == 0:\n    #     return lst\n    # elif len(lst) == 1:\n    #     return [lst[0][0], lst[0][1]]\n    # else:\n    #     return [lst[0][0], lst[1][1]]\n    return [[lst[0][0], lst[1][1]], [lst[1][0], lst[0][1]]]\n",
        "num_ids": 114
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    newList = []\n    for i in lst:\n        newList.append([i[0],i[1]])\n    return newList\n",
        "num_ids": 37
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # lst = [[1, 2], [3, 4], [5, 6]]\n    # return [[1, 3], [2, 4], [5, 6]]\n    return [ [lst[i][0], lst[i][1]] for i in range(len(lst)) ]\n",
        "num_ids": 72
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst1 = []\n    lst2 = []\n    for i in lst:\n        lst1.append(i[0])\n        lst2.append(i[1])\n    return [lst1,lst2]\n",
        "num_ids": 60
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [ [x[0],x[1]] for x in lst ]\n",
        "num_ids": 21
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    res = zip(*lst)\n    return [list(x) for x in res]\n",
        "num_ids": 24
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    res = [[], []]\n    for i in lst:\n        res[0].append(i[0])\n        res[1].append(i[1])\n    return res\n",
        "num_ids": 46
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return list(map(lambda x: x[0]+sum(x[1:]), test_list))\n",
        "num_ids": 27
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.append(i+sum(new_list))\n    return new_list\n",
        "num_ids": 40
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return reduce(lambda acc, x: acc + x, test_list, 0)\n",
        "num_ids": 22
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # The above statement is a one line of code, but it is not very readable\n    # Hence, we are going to use a for loop to perform this task\n    cum_sum = []\n    for i in range(len(test_list)):\n        cum_sum.append(sum(test_list[:i+1]))\n    return cum_sum\n",
        "num_ids": 85
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return [(i+1)*test_list[i] for i in range(len(test_list))]\n",
        "num_ids": 28
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = []\n    for i in range(len(test_list)):\n        cum_sum.append(sum(test_list[:i+1]))\n    return cum_sum\n",
        "num_ids": 49
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # result = []\n    # for i in range(len(test_list)):\n    #     sum_v = sum(test_list[:i])\n    #     result.append(sum_v)\n    # return result\n    return [sum(test_list[:i]) for i in range(len(test_list))]\n",
        "num_ids": 82
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = []\n    cum_sum.append(test_list[0])\n    for i in range(1,len(test_list)):\n        cum_sum.append(test_list[i] + cum_sum[i-1])\n    return cum_sum\n",
        "num_ids": 68
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum_list = []\n    for num in range(len(test_list)):\n        cumulative_sum_list.append(sum(test_list[:num+1]))\n    return cumulative_sum_list\n",
        "num_ids": 57
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum_list = []\n    current_sum = 0\n    for i in test_list:\n        current_sum = current_sum + i\n        cumulative_sum_list.append(current_sum)\n    return cumulative_sum_list\n",
        "num_ids": 62
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return list(map(lambda x: sum(x)/len(x), zip(*nums)))\n",
        "num_ids": 25
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(i)/len(i) for i in zip(*nums)]\n",
        "num_ids": 22
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for index,value in enumerate(nums):\n        averages.append(sum(value)/len(value))\n    return averages\n    \n    \n    \nprint(average_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)]))\nprint(average_tuple([(4, 5, 6), (7, 8, 9)]))\nprint(average_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]))\n",
        "num_ids": 136
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [(x+y)/2 for x,y in nums]\n",
        "num_ids": 19
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_tuples = []\n    for x in range(0,len(nums)):\n        average_tuples.append(sum(nums[x])/len(nums[x]))\n    return average_tuples\n",
        "num_ids": 57
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    sum = 0\n    for tuple in nums:\n        sum = sum + tuple[0]\n    return sum / len(nums)\n",
        "num_ids": 35
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(t)/len(t) for t in zip(*nums)]\n",
        "num_ids": 22
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(i)/len(i) for i in zip(*nums)]\n",
        "num_ids": 22
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(x)/len(x) for x in zip(*nums)]\n",
        "num_ids": 22
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    nums = list(nums)\n    length = len(nums)\n    average = []\n    for i in range(length):\n        sum_nums = 0\n        for j in nums[i]:\n            sum_nums = sum_nums + j\n        average.append(sum_nums/length)\n    return average\n",
        "num_ids": 83
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('tuple_modulo(): argument length error')\n    return tuple([x%y for x,y in zip(test_tup1,test_tup2)])\n",
        "num_ids": 66
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    output = ()\n    for i,j in zip(test_tup1, test_tup2):\n        output = output + (i%j,)\n    return output\n",
        "num_ids": 43
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'the two tuples should be of the same length'\n    elif len(test_tup1) == 0:\n        return 'empty tuples are not moduloable'\n    else:\n        tuple_return = []\n        for i in range(len(test_tup1)):\n            tuple_return.append(test_tup1[i] % test_tup2[i])\n        return tuple_return\n",
        "num_ids": 125
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    return tuple(map(lambda x,y: x%y, test_tup1, test_tup2))\n",
        "num_ids": 32
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for index, num in enumerate(test_tup1):\n        result.append(num%test_tup2[index])\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    new_tup = []\n    for index in range(len(test_tup1)):\n        new_tup.append(test_tup1[index] % test_tup2[index])\n    return tuple(new_tup)\n",
        "num_ids": 62
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'Tuples must be same size'\n",
        "num_ids": 33
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(int(x % y) for x, y in zip(test_tup1, test_tup2))\n",
        "num_ids": 32
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0: return 0\n    if d < 0: return -1\n",
        "num_ids": 21
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    #each step (x, y) is a jump\n    return min(steps, d-1)\n    #if there is at least one jump at origin, min(steps, d-1) is the result\n    #now think of the difference in the number of jumps required to reach a particular cell from origin\n    #let's say we are at (x, y), the number of jumps required is d-1 if we reach a point of the form (x, y-1), \n    #then if we reach a point of the form (x-1, y) we are left with d-1-1 jumps\n    #so the final result is 1 + min(d-1-1, d-1)\n",
        "num_ids": 161
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Base case\n    if steps == 0:\n        return 0\n    \n    # If we reach the origin and then we have to jump\n    if steps <= d and d!= 0:\n        return 1\n    \n    # If we reach the origin and then we have to jump\n    elif steps == 1:\n        return 0\n    \n    # We have to jump \n    else:\n        return 1 + min_Jumps(steps-1, d)\n        \n",
        "num_ids": 112
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0: return 0\n    if d == 1: return steps\n",
        "num_ids": 20
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def jump(steps, d): \n        if steps == 0: \n            return 0 \n        elif steps == 1: \n            return d \n        else: \n            return min(jump(steps-1, d-1), jump(steps-2, d-1), jump(steps-3, d-1)) + 1 \n",
        "num_ids": 82
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if len(steps) == 0:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jump = [float('inf') for _ in xrange(steps + 1)]\n    jump[0] = 0\n    jump[1] = 0\n    for i in xrange(2, steps + 1):\n        for j in xrange(1, i):\n            if j + j >= i:\n                jump[i] = min(jump[i], jump[j] + 1)\n    return jump[steps]\n",
        "num_ids": 99
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # 1 jump to reach d from origin.\n    # Use recursion to reach d, for d = 0, 0 jumps.\n    if d == 0: \n        return 0\n    # Check whether the current index is the destination point. \n    if steps[d] == 0:\n        return float(\"inf\")\n    # Check whether the current index is already reachable from the previous jump.\n    if d - steps[d] >= 0:\n        return 1 + min_Jumps(steps, d - steps[d])\n    return 1 + min_Jumps(steps, d - 1)\n",
        "num_ids": 137
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    if steps == 0:\n        return 0\n    \n    else:\n        result = sys.maxsize\n        for i in range(1,steps+1):\n            result = min(result, 1 + min_Jumps(steps - i, d))\n            \n        return result\n",
        "num_ids": 69
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i,j in zip(nums1,nums2):\n        result.append(i/j)\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div_list = []\n    for i in range(len(nums1)):\n        div_list.append(nums1[i]/nums2[i])\n    return div_list\n",
        "num_ids": 50
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return map(lambda x,y:x/y,nums1,nums2)\n",
        "num_ids": 24
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) == len(nums2):\n        return [num1 / num2 for num1,num2 in zip(nums1,nums2)]\n    else:\n        print('Error: length of two lists are not equal')\n        return None\n",
        "num_ids": 66
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1/num2 for num1,num2 in zip(nums1,nums2)]\n",
        "num_ids": 28
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    assert len(nums1) == len(nums2)\n    return [x / y for x, y in zip(nums1, nums2)]\n",
        "num_ids": 40
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    l1 = len(nums1)\n    l2 = len(nums2)\n    if l1 < l2:\n        return False\n    if l1 == l2:\n        return True\n    \n    for i in xrange(l1):\n        if nums1[i]%nums2[0]!=0:\n            return False\n    return True\n",
        "num_ids": 91
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return None\n    else:\n        return [x/y for x,y in zip(nums1,nums2)]\n",
        "num_ids": 48
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1/num2 for num1,num2 in zip(nums1,nums2)]\n",
        "num_ids": 28
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = ''\n    num_list = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n    for letter in test_str:\n        if letter in num_list:\n            new_str += letter\n    return new_str + ''.join(num_list)\n",
        "num_ids": 85
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    def is_number(test_str):\n        return test_str.isdigit()\n    def move_num_to_end(str):\n        if len(str) == 0:\n            return str\n        if is_number(str[0]):\n            return move_num_to_end(str[1:]) + str[0]\n        else:\n            return move_num_to_end(str[1:]) + str[0]\n    return move_num_to_end(test_str)\n",
        "num_ids": 124
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    import re\n    return re.sub('\\d', '', test_str) + re.sub('\\d+', '', test_str)\n",
        "num_ids": 37
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if test_str == '':\n        return ''\n    else:\n        num_list = []\n        str_list = list(test_str)\n        for i in str_list:\n            if i.isdigit():\n                num_list.append(i)\n        for i in num_list:\n            str_list.remove(i)\n        str_list.extend(num_list)\n        return ''.join(str_list)\n",
        "num_ids": 109
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.replace(\"+\", \"\")\n    test_str = test_str.replace(\"-\", \"\")\n    test_str = test_str.replace(\"0\", \"\")\n    return test_str\n",
        "num_ids": 56
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join([a for a in test_str if not a.isdigit()]) + ''.join([a for a in test_str if a.isdigit()])\n",
        "num_ids": 45
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    start = 0\n    while True:\n        try:\n            pos = test_str.index(str(start), start)\n        except:\n            break\n        test_str = test_str[:pos]+test_str[pos+1:]\n        start = pos + 1\n    return test_str\n",
        "num_ids": 73
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    str_list = test_str.split()\n    num_list = []\n    str_list = list(filter(lambda x: x.isdigit(), str_list))\n    for item in str_list:\n        num_list.append(item)\n    \n    str_list = filter(lambda x: not x.isdigit(), str_list)\n    num_list += str_list\n    \n    return''.join(num_list)\n",
        "num_ids": 110
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    for c in test_str:\n        if c.isdigit():\n            return test_str.replace(c, '') + c\n    return test_str\n",
        "num_ids": 41
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = [i for i in test_str if i.isdigit()]\n    return ''.join([i for i in test_str if not i.isdigit()]) + ''.join(numbers)\n",
        "num_ids": 54
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    subsets = {0: 0}\n    for i in range(1, len(a) + 1):\n        # print(i, a)\n        subsets[i] = i\n        for j in range(1, i // 2 + 1):\n            if (a[j] % a[i - j]) == 0:\n                subsets[i] = max(subsets[i], subsets[j] + 1)\n    return subsets[len(a)]\n",
        "num_ids": 112
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    divisors = {}\n    for num in a:\n        for divisor in range(2, num):\n            if num%divisor == 0:\n                if divisors.has_key(divisor):\n                    divisors[divisor] += 1\n                else:\n                    divisors[divisor] = 1\n    return max(divisors.values())\n",
        "num_ids": 94
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 1:\n        return a[0]\n    l1 = a[:len(a)//2]\n    l2 = a[len(a)//2:]\n    return largest_subset(l1) * largest_subset(l2)\n    # return max(a)\n",
        "num_ids": 76
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    subsets = [[] for i in range(n)]\n    for i in range(n):\n        subsets[0].append(a[i])\n        #print(subsets)\n        for j in range(1,i+1):\n            #print(j)\n            if j == 1:\n                subsets[j].append(a[i])\n            else:\n                #print(subsets)\n                subsets[j] = [a[i]]+subsets[j-1]\n            #print(subsets)\n    max_size = len(subsets[-1])\n    for i in range(1,len(subsets)):\n        if len(subsets[i]) > max_size:\n            max_size = len(subsets[i])\n    return max_size\n",
        "num_ids": 198
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    dp = [0] * len(a)\n    for i in range(1, len(a)):\n        dp[i] = 1 + dp[i-1]\n        for j in range(i-1, -1, -1):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n",
        "num_ids": 97
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if not a:\n        return 0\n    a.sort()\n    n = len(a)\n    ret = 1\n    for i in range(1, n):\n        if a[i] % a[i-1]!= 0:\n            ret += 1\n    return ret\n",
        "num_ids": 69
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    assert len(a) > 0\n    assert len(a) < 100\n    assert all(map(lambda x: isinstance(x, int), a))\n    a = sorted(a)\n    result = {i: {1,i} for i in a}\n    for i in xrange(2, len(a)+1):\n        for j in xrange(i-1, len(a)):\n            if a[i-1] % a[j] == 0:\n                result[a[i-1]].add(a[j])\n    return max([len(result[i]) for i in result])\n",
        "num_ids": 147
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    if n <= 1:\n        return a\n    divisible = []\n    for i in range(n-1):\n        if a[i] % a[i+1] == 0:\n            divisible.append(a[i])\n    \n    return len(divisible)\n",
        "num_ids": 82
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort list, and store pairs\n    l = sorted(a)\n    pairs = []\n    for i in range(len(l) - 1):\n        if l[i] % l[i + 1] == 0:\n            pairs.append((l[i], l[i + 1]))\n    # Initialize counter and subset\n    max_pairs = 0\n    max_subset = []\n    for i in range(len(pairs)):\n        counter = 0\n        subset = []\n        for j in range(len(pairs)):\n            if pairs[j][0] % pairs[i][1] == 0:\n                counter += 1\n                subset.append(pairs[j])\n        if counter > max_pairs:\n            max_pairs = counter\n            max_subset = subset\n    return max_pairs, max_subset\n",
        "num_ids": 209
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if not a:\n        return 0\n    dp = [0 for _ in xrange(len(a)+1)]\n    for i in xrange(1, len(a)+1):\n        if a[i-1]%a[dp[i-1]] == 0:\n            dp[i] = dp[i-1] + 1\n    return max(dp)\n    \ndef find_min_div(arr):\n    '''\n    Write a function to find the sum of the numbers that can be created from the given array by any number of operations.\n    '''\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return sum(arr)\n    left = [arr[0]]\n    for i in xrange(1, len(arr)):\n        left.append(left[i-1] + arr[i])\n    right = [arr[-1]]\n    for i in xrange(len(arr)-2, 0, -1):\n        right.append(right[i-1] + arr[i])\n    res = sum(arr)\n    for i in xrange(len(arr)):\n        if i == 0:\n            res = max(res, left[i] + right[i+1])\n        elif i == len(arr)-1:\n            res = max(res, left[i-1] + right[i])\n        else:\n            res = max(res, left[i-1] + right[i+1])\n    return res\n",
        "num_ids": 240
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    #make the list of tuples from the two arrays\n    arr = zip(arr1, arr2)\n    #sort by the second element in the tuple\n    sorted_arr = sorted(arr, key=lambda x: x[1])\n    #if the number of elements is odd\n    if n % 2!= 0:\n        #return the second element in the tuple\n        return sorted_arr[(n+1)/2-1][1]\n    #if the number of elements is even\n    else:\n        #return the sum of the middle two elements in the tuple\n        return (sorted_arr[n/2-1][1] + sorted_arr[n/2][1]) / 2\n",
        "num_ids": 164
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    def find_kth(arr1, arr2, k):\n        if len(arr1) > len(arr2):\n            return find_kth(arr2, arr1, k)\n        if len(arr2) == 0:\n            return arr1[k-1]\n        if k == 1:\n            return min(arr1[0], arr2[0])\n        if k == len(arr1)+1:\n            return max(arr1[-1], arr2[-1])\n        i = int(math.ceil((k-1)/2))\n        j = int(math.floor((k-1)/2))\n        if arr1[i-1] < arr2[j]:\n            return find_kth(arr1, arr2[j:], k-j)\n        else:\n            return find_kth(arr1[i:], arr2, k-i)\n",
        "num_ids": 215
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return None\n",
        "num_ids": 13
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    count = 0\n    arr1_size = len(arr1)\n    arr2_size = len(arr2)\n    mid1 = arr1_size/2\n    mid2 = arr2_size/2\n    \n    if mid1 == 0:\n        if arr2_size == 1:\n            return arr2[0]\n        elif arr2_size % 2 == 0:\n            return (arr2[mid2 - 1] + arr2[mid2])/2\n        else:\n            return arr2[mid2]\n    \n    if mid2 == 0:\n        if arr1_size == 1:\n            return arr1[0]\n        elif arr1_size % 2 == 0:\n            return (arr1[mid1 - 1] + arr1[mid1])/2\n        else:\n            return arr1[mid1]\n    \n    if arr1_size > arr2_size:\n        if mid1 < mid2:\n            return get_median(arr1, arr2[mid2:], mid2+1)\n        elif mid2 < mid1:\n            return get_median(arr1[mid1:], arr2, mid2)\n    \n    elif arr1_size < arr2_size:\n        if mid1 < mid2:\n            return get_median(arr1[mid1:], arr2, mid1+1)\n        elif mid2 < mid1:\n            return get_median(arr1, arr2[mid2:], mid2+1)\n    \n    else:\n        if mid1 < mid2:\n            return (arr1[mid1] + arr1[mid1-1])/2\n        else:\n            return (arr2[mid2] + arr2[mid2-1])/2\n",
        "num_ids": 423
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    sorted_arr1 = merge_sort(arr1)\n    sorted_arr2 = merge_sort(arr2)\n    \n    if n%2 == 0:\n        index1 = int(n/2)\n        index2 = int(n/2)\n    else:\n        index1 = int(n/2)\n        index2 = int(n/2) + 1\n    \n    return (sorted_arr1[index1] + sorted_arr2[index2])/2\n    \n    \ndef merge_sort(arr):\n    '''\n    Merge sort the array\n    '''\n    if len(arr) <= 1:\n        return arr\n    \n    middle = len(arr) / 2\n    left = merge_sort(arr[:middle])\n    right = merge_sort(arr[middle:])\n    \n    return merge(left, right)\n    \ndef merge(left, right):\n    '''\n    Merge two arrays in sorted order\n    '''\n    result = []\n    i = 0\n    j = 0\n    \n    while (i < len(left)) and (j < len(right)):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    \n    if i < len(left):\n        result += left[i:]\n    if j < len(right):\n        result += right[j:]\n    \n    return result\n    \ndef get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    sorted_arr1 = merge_sort(arr1)\n    sorted_arr2 = merge_sort(arr2)\n    \n    if n%2 == 0:\n        index1 = int(n/2)\n        index2 = int(n/2)\n    else:\n        index1 = int(n/2)\n        index2 = int(n/2) + 1\n    \n    return (sorted_arr1[index1] + sorted_arr2[index2])/2\n    \n    \ndef find_median_sorted_arrays(arr1, arr2):\n    '''\n    Write a function to find the median of two sorted arrays of same size.\n    '''\n    \n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1\n    \n    n = len(arr1) + len(arr2)\n    \n    # If the array size is odd, then we get the result by adding the\n    # median of both the first and the last element of the array\n    if n % 2 == 1:\n        return get_median(arr1, arr2, n)\n    \n    # If the array size is even, then we get the result by adding the\n    # median of the first and the second median of the array\n    else:\n        return (get_median(arr1, arr2, n/2) + get_median(arr1, arr2, n/2 + 1))/2\n    \n    \ndef find_median_sorted_arrays(arr1, arr2):\n    '''\n    Write a function to find the median of two sorted arrays of same size.\n    '''\n    \n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1\n    \n    n = len(arr1) + len(arr2)\n    \n    # If the array size is odd, then we get the result by adding the\n    # median of both the first and the last element of the array\n    if n % 2 == 1:\n        return get_median(arr1, arr2, n)\n    \n    # If the array size is even, then we get the result by adding the\n    # median of the first and the second median of the array\n    else:\n        return (get_median(arr1, arr2, n/2) + get_median(arr1, arr2, n/2 + 1))/2\n    \n    \ndef get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    sorted_arr1 = merge_sort(arr1)\n    sorted_arr2 = merge_sort(arr2)\n    \n    if n%2 == 0:\n        index1 = int(n/2)\n        index2 = int(n/2)\n    else:\n        index1 = int(n/2)\n        index2 = int(n/2) + 1\n    \n    return (sorted_arr1[index1] + sorted_arr2[index2])/2\n    \n    \ndef get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    sorted_arr1 = merge_sort(arr1)\n    sorted_arr2 = merge_sort(arr2)\n    \n    if n%2 == 0:\n        index1 = int(n/2)\n        index2 = int(n/2)\n    else:\n        index1 = int(n/2)\n        index2 = int(n/2) + 1\n    \n    return (sorted_arr1[index1] + sorted_arr2[index2])/2\n    \n    \ndef find_median_sorted_arrays(arr1, arr2):\n    '''\n    Write a function to find the median of two sorted arrays of same size.\n    '''\n    \n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1\n    \n    n = len(arr1) + len(arr2)\n    \n    # If the array size is odd, then we get the result by adding the\n    # median of both the first and the last element of the array\n    if n % 2 == 1:\n        return get_median(arr1, arr2, n)\n    \n    # If the array size is even, then we get the result by adding the\n    # median of the first and the second median of the array\n    else:\n        return (get_median(arr1, arr2, n/2) + get_median(arr1, arr2, n/2 + 1))/2\n    \n    \ndef find_median_sorted_arrays(arr1, arr2):\n    '''\n    Write a function to find the median of two sorted arrays of same size.\n    '''\n    \n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1\n    \n    n = len(arr1) + len(arr2)\n    \n    # If the array size is odd, then we get the result by adding the\n    # median of both the first and the last element of the array\n    if n % 2 == 1:\n        return get_median(arr1, arr2, n)\n    \n    # If the array size is even, then we get the result by adding the\n    # median of the first and the second median of the array\n    else:\n        return (get_median(arr1, arr2, n/2) + get_median(arr1, arr2, n/2 + 1))/2\n    \n    \ndef find_median_sorted_arrays(arr1, arr2):\n    '''\n    Write a function to find the median of two sorted arrays of same size.\n    '''\n    \n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1\n    \n    n = len(arr1) + len(arr2)\n    \n    # If the array size is odd, then we get the result by adding the\n    # median of both the first and the last element of the array\n    if n % 2 == 1:\n        return get_median(arr1, arr2, n)\n    \n    # If the array size is even, then we get the result by adding the\n    # median of the first and the second median of the array\n    else:\n        return (get_median(arr1, arr2, n/2) + get_median(arr1, arr2, n/2 + 1))/2\n    \n    \ndef fin",
        "num_ids": 191
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) > len(arr2):\n        return get_median(arr2, arr1, n)\n    if len(arr1) == 0:\n        return (arr2[n/2 - 1] + arr2[n/2])/2\n    if n == 1:\n        return (max(arr1[0], arr2[0]) + min(arr1[0], arr2[0]))/2\n    if n%2 == 1:\n        return max(get_median(arr1, arr2, n/2), get_median(arr1, arr2, n/2 + 1))\n    else:\n        return (max(get_median(arr1, arr2, n/2), get_median(arr1, arr2, n/2 + 1)) + min(get_median(arr1, arr2, n/2 - 1), get_median(arr1, arr2, n/2 + 2)))/2\n",
        "num_ids": 232
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    k = (n+1)/2\n    if n%2 == 1:\n        return arr1[k-1]\n    else:\n        return (arr1[k-1]+arr1[k])/2\n    \ndef median(arr1, arr2):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    m = len(arr1)\n    n = len(arr2)\n    if m > n:\n        return median(arr2, arr1)\n    if m == 0:\n        return get_median(arr2, arr1, n)\n    if n == 0:\n        return get_median(arr1, arr2, m)\n    if m == 1:\n        return get_median(arr1[0], arr2, n)\n    if m == n:\n        return (arr1[0]+arr2[0])/2\n    i = 0\n    j = 0\n    k = 1\n    while j < n and k < m:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr2[j] < arr1[i]:\n            j += 1\n        else:\n            arr1.insert(i, arr2[j])\n            i += 1\n            j += 1\n        k += 1\n    while j < n:\n        arr1.insert(i, arr2[j])\n        j += 1\n        i += 1\n    while k < m:\n        arr1.insert(i, arr1[k])\n        i += 1\n        k += 1\n    return get_median(arr1, arr2, m+n)\n        \n    \ndef intersection(arr1, arr2, n, m):\n    '''\n    Write a function to find the intersection of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    while j < m and i < n:\n        if arr1[i] == arr2[j]:\n            print arr1[i]\n            j += 1\n            i += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    \n    \ndef intersect(arr1, arr2, n, m):\n    '''\n    Write a function to find the intersection of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    intersect_arr = []\n    while j < m and i < n:\n        if arr1[i] == arr2[j]:\n            if arr1[i] not in intersect_arr:\n                intersect_arr.append(arr1[i])\n            j += 1\n            i += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    return intersect_arr\n    \n    \ndef union(arr1, arr2, n, m):\n    '''\n    Write a function to find the union of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    union_arr = []\n    while j < m and i < n:\n        if arr1[i] == arr2[j]:\n            if arr1[i] not in union_arr:\n                union_arr.append(arr1[i])\n            j += 1\n            i += 1\n        elif arr1[i] < arr2[j]:\n            if arr1[i] not in union_arr:\n                union_arr.append(arr1[i])\n            i += 1\n        else:\n            if arr2[j] not in union_arr:\n                union_arr.append(arr2[j])\n            j += 1\n    while j < m:\n        if arr2[j] not in union_arr:\n            union_arr.append(arr2[j])\n        j += 1\n    while i < n:\n        if arr1[i] not in union_arr:\n            union_arr.append(arr1[i])\n        i += 1\n    return union_arr\n    \n    \ndef uniquelist(arr1, n):\n    '''\n    Write a function to find the union of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    while i < n and j < n:\n        if arr1[i] == arr1[j]:\n            j += 1\n        elif arr1[i] < arr1[j]:\n            i += 1\n        else:\n            j += 1\n    return arr1[0:i+1]\n    \ndef unionlist(arr1, arr2, n):\n    '''\n    Write a function to find the union of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    while i < n and j < n:\n        if arr1[i] == arr2[j]:\n            j += 1\n        elif arr1[i] < arr2[j]:\n            if arr1[i] not in arr2:\n                arr2.insert(j, arr1[i])\n            i += 1\n        else:\n            if arr2[j] not in arr1:\n                arr1.insert(i, arr2[j])\n            j += 1\n    while j < n:\n        if arr2[j] not in arr1:\n            arr1.insert(i, arr2[j])\n        j += 1\n    return arr1\n    \ndef intersectionlist(arr1, arr2, n):\n    '''\n    Write a function to find the intersection of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    intersect_arr = []\n    while j < n and i < n:\n        if arr1[i] == arr2[j]:\n            intersect_arr.append(arr1[i])\n            j += 1\n            i += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    return intersect_arr\n    \ndef diff(arr1, arr2, n, m):\n    '''\n    Write a function to find the difference of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    diff_arr = []\n    while j < m and i < n:\n        if arr1[i] == arr2[j]:\n            j += 1\n            i += 1\n        elif arr1[i] < arr2[j]:\n            if arr1[i] not in diff_arr:\n                diff_arr.append(arr1[i])\n            i += 1\n        else:\n            j += 1\n    while j < m:\n        if arr2[j] not in diff_arr:\n            diff_arr.append(arr2[j])\n        j += 1\n    while i < n:\n        if arr1[i] not in diff_arr:\n            diff_arr.append(arr1[i])\n        i += 1\n    return diff_arr\n    \n    \ndef difflist(arr1, arr2, n, m):\n    '''\n    Write a function to find the difference of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    diff_arr = []\n    while j < m and i < n:\n        if arr1[i] == arr2[j]:\n            j += 1\n            i += 1\n        elif arr1[i] < arr2[j]:\n            if arr1[i] not in diff_arr:\n                diff_arr.append(arr1[i])\n            i += 1\n        else:\n            if arr2[j] not in diff_arr:\n                diff_arr.append(arr2[j])\n            j += 1\n    while j < m:\n        if arr2[j] not in diff_arr:\n            diff_arr.append(arr2[j])\n        j += 1\n    while i < n:\n        if arr1[i] not in diff_arr:\n            diff_arr.append(arr1[i])\n        i += 1\n    return diff_arr\n    \ndef diff1(arr1, arr2):\n    '''\n    Write a function to find the difference of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    diff_arr = []\n    while j < len(arr2) and i < len(arr1):",
        "num_ids": 36
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    #return arr1[n//2] if n % 2 == 1 else (arr1[n//2 - 1] + arr1[n//2])/2.0\n    if n % 2 == 0:\n        return (arr1[n//2] + arr2[n//2 - 1])/2.0\n    else:\n        return arr1[n//2]\n",
        "num_ids": 90
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    n1 = n\n    n2 = n\n    if n % 2 == 0:\n        #print \"even\"\n        return (get_median(arr1,arr2,n/2) + get_median(arr1,arr2,n/2+1))/2.0\n    else:\n        #print \"odd\"\n        return arr1[n1/2]\n",
        "num_ids": 93
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    median = 0\n    i, j = 0, 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            median, i = i+1, i+1\n        elif arr1[i] > arr2[j]:\n            median, j = j+1, j+1\n        else:\n            median, i, j = i+1, i+1, j+1\n",
        "num_ids": 109
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i**n for i in nums]\n    \ndef first_n_nums(nums,n):\n    '''\n    Write a function to compute the first n numbers of a list.\n    '''\n    return nums[:n]\n",
        "num_ids": 11
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    assert isinstance(nums,list) and isinstance(n,int)\n    assert n>0\n",
        "num_ids": 27
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nth_nums = []\n    for num in nums:\n        nth_nums.append(num**n)\n    return nth_nums\n",
        "num_ids": 41
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    \n    for i in range(len(nums)):\n        nums[i] = nums[i]**n\n    return nums\n",
        "num_ids": 37
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    answer = []\n    for i in nums:\n        answer.append(i**n)\n    return answer\n",
        "num_ids": 29
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    power = []\n    for num in nums:\n        power.append(num ** n)\n    return power\n",
        "num_ids": 29
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    num_list = []\n    for num in nums:\n        num_list.append(num ** n)\n    return num_list\n",
        "num_ids": 35
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if len(nums) <= n:\n        return []\n    return [nums[i] ** n for i in range(len(nums))]\n",
        "num_ids": 39
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    assert n >= 1\n    return [i ** n for i in nums]\n",
        "num_ids": 21
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string =='string':\n        return 'Hello World'\n    elif string == 'name':\n        return 'Eliot'\n    elif string == 'BOY':\n        return 'Whoa there boy'\n    else:\n        return 'Not a string'\n",
        "num_ids": 65
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\ndef test_is_upper():\n    assert is_upper('testing') == 'TESTING'\n    assert is_upper('BIG') == 'BIG'\n    assert is_upper('big') == 'BIG'\n    assert is_upper('BIGGER') == 'BIGGER'\n    assert is_upper('bigg') == 'BIGG'\n    assert is_upper('BIGGER ') == 'BIGGER '\ndef test_is_lower():\n    assert is_lower('testing') == 'TESTING'\n    assert is_lower('BIG') == 'big'\n    assert is_lower('big') == 'big'\n    assert is_lower('BIGGER') == 'biger'\n    assert is_lower('bigg') == 'bigg'\n    assert is_lower('BIGGER ') == 'bigg'\ndef test_is_title():\n    assert is_title('Testing') == 'TESTING'\n    assert is_title('big') == 'Big'\n    assert is_title('BIG') == 'BIG'\n    assert is_title('BIGGER') == 'BIGGER'\n    assert is_title('bigg') == 'Bigg'\n    assert is_title('BIGGER ') == 'BIGGER '\ndef test_is_number():\n    assert is_number('1') == '1'\n    assert is_number('1.2') == '1.2'\n    assert is_number('123.34') == '123.34'\n    assert is_number('1.2') == '1.2'\n    assert is_number('a1.2') == 'a1.2'\n    assert is_number('$ 1.2') == '$ 1.2'\n    assert is_number('1a.2') == '1a.2'\n    assert is_number('1.2a') == '1.2a'\n    assert is_number('1.2.3') == '1.2.3'\n    assert is_number('1.2e3') == '1.2e3'\n    assert is_number('1e3') == '1e3'\n    assert is_number('1.2e3') == '1.2e3'\n    assert is_number('1.2e3 ') == '1.2e3 '\n    assert is_number('1.2e3 ') == '1.2e3 '\n    assert is_number('1.2e-3') == '1.2e-3'\n    assert is_number('1.2e+3') == '1.2e+3'\n    assert is_number('1.2e-3e+3') == '1.2e-3e+3'\n    assert is_number('1.2e-3e+3') == '1.2e-3e+3'\n    assert is_number('1.2e-3e+3.4') == '1.2e-3e+3.4'\n    assert is_number('1.2e3.4') == '1.2e3.4'\n    assert is_number('1.2e3.4e-3') == '1.2e3.4e-3'\n    assert is_number('1.2e3.4e-3e+3') == '1.2e3.4e-3e+3'\n    assert is_number('1.2e3.4e-3e+3.4') == '1.2e3.4e-3e+3.4'\n    assert is_number('1.2e3.4e-3e+3.4e-3') == '1.2e3.4e-3e+3.4e-3'\n    assert is_number('1.2e3.4e-3e+3.4e-3e+3') == '1.2e3.4e-3e+3.4e-3e+3'\n    assert is_number('1.2e-3e+3.4e-3e+3e+3') == '1.2e-3e+3.4e-3e+3e+3'\n    assert is_number('1.2e-3e+3.4e-3e+3e+3.4e-3') == '1.2e-3e+3.4e-3e+3e+3.4e-3'\n    assert is_number('1.2e-3e+3.4e-3e+3e+3.4e-3e+3') == '1.2e-3e+3.4e-3e+3e+3.4e-3e+3'\n    assert is_number('1.2e-3e+3.4e-3e+3e+3.4e-3e+3e+3') == '1.2e-3e+3.4e-3e+3e+3.4e-3e+3e+3'\n    assert is_number('1.2e-3e+3.4e-3e+3e+3.4e-3e+3e+3e+3') == '1.2e-3e+3.4e-3e+3e+3.4e-3e+3e+3e+3'\n    assert is_number('1.2e3.4e-3e+3e+3.4e-3e+3e+3e+3.4e-3') == '1.2e3.4e-3e+3e+3.4e-3e+3e+3e+3.4e-3'\n    assert is_number('1.2e3.4e-3e+3e+3.4e-3e+3e+3e+3.4e-3e+3') == '1.2e3.4e-3e+3e+3.4e-3e+3e+3e+3.4e-3e+3'\n    assert is_number('1.2e3.4e-3e+3e+3.4e-3e+3e+3e+3.4e-3e+3e+3') == '1.2e3.4e-3e+3e+3.4e-3e+3e+3e+3.4e-3e+3e+3'\n    assert is_number('1.2e3.4e-3e+3e+3.4e-3e+3e+3e+3.4e-3e+3e+3e+3') == '1.2e3.4e-3e+3e+3.4e-3e+3e+3e+3.4e-3e+3e+3e+3'\n    assert is_number('1.2e3.4e-3e+3e+3.4e-3e+3e+3e+3.4e-3e+3e+3e+3') == '1.2e3.4e-3e+3e+3.4e-3e+3e+3e+3.4e-3e+3e+3e+3'\n    assert is_number('1.2e3.4e-3e+3e+3.4e-3e+3e+3e+3.4e-3e+3e+3e+3') == '1.2e3.4e-3e+3e+3.4e-3e+3e+3e+3.4e-3e+3e+3e+3'\n    assert is_number('1.2e3.4e-3e+3e+3.4e-3e+3e+3e+3.4e-3e+3e+3e+3') == '1.2e3.4e-3e+3e+3.4e-3e+3e+3e+3.4e-3e+3e+3e+3'\n    assert is_number('1.2e3.4e-3e+3e+3.4e-3e+3e+3e+3.4e-3e+3e+3e+3') == '1.2e3.4e-3e+3e+3.4e-3e+",
        "num_ids": 2017
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper = ''\n    for letter in string:\n        if letter.isupper():\n            upper += letter\n    return upper\n",
        "num_ids": 31
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    for letter in string:\n        if letter in string.lower():\n            return False\n    return True\n",
        "num_ids": 26
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    #Write your code here\n    newList.reverse()\n    newList.insert(0,newList.pop())\n    return newList\n",
        "num_ids": 35
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    lenList = len(newList) \n    \n    firstElement = newList[0] \n    lastElement = newList[-1] \n    \n    newList[0] = lastElement\n    newList[-1] = firstElement\n    \n    return newList\n",
        "num_ids": 68
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    l = len(newList)\n    newList[0] = newList[l-1]\n    newList[l-1] = newList[0]\n    return newList\n",
        "num_ids": 46
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList.pop(0)\n    last = newList.pop(-1)\n    newList.insert(0, last)\n    newList.insert(0, first)\n    return newList\n",
        "num_ids": 51
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # newList[0] = newList[-1]\n    # newList[-1] = newList[0]\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n",
        "num_ids": 70
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    temp = newList[0]\n    newList[0] = newList[len(newList) - 1]\n    newList[len(newList) - 1] = temp\n    return newList\n    \nprint swap_List([1, 2, 3, 4, 5, 6])\n",
        "num_ids": 86
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n    \ndef swap_Tuple(newTuple):\n    '''\n    Write a python function to interchange the first and last element in a given tuple.\n    '''\n    temp = newTuple[0]\n    newTuple[0] = newTuple[len(newTuple)-1]\n    newTuple[len(newTuple)-1] = temp\n    return newTuple\n",
        "num_ids": 55
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n",
        "num_ids": 35
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n",
        "num_ids": 48
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n    \n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef remove_Duplicates(newList):\n    '''\n    Write a python function to remove duplicates from a given list.\n    '''\n    return list(set(newList))\n    \ndef arrange_List(newList):\n    '''\n    Write a python function to arrange a list in ascending order.\n    '''\n    newList.sort()\n    return newList\n    \ndef replace_List(newList):\n    '''\n    Write a python function to replace all zeroes with ones.\n    '''\n    newList = [0 if i == 0 else i for i in newList]\n    return newList\n    \ndef find_MinMax(newList):\n    '''\n    Write a python function to find the minimum and maximum element of a given list.\n    '''\n    return min(newList), max(newList)\n    \ndef split_List(newList):\n    '''\n    Write a python function to split a given list into two sublists.\n    '''\n    return newList[0:len(newList)//2], newList[len(newList)//2:]\n    \ndef find_sum(newList):\n    '''\n    Write a python function to find the sum of all elements of a given list.\n    '''\n    return sum(newList)\n    \ndef split_List(newList):\n    '''\n    Write a python function to split a given list into two sublists.\n    '''\n    return newList[0:len(newList)//2], newList[len(newList)//2:]\n    \ndef split_List(newList):\n    '''\n    Write a python function to split a given list into two sublists.\n    '''\n    return newList[0:len(newList)//2], newList[len(newList)//2:]\n    \ndef split_List(newList):\n    '''\n    Write a python function to split a given list into two sublists.\n    '''\n    return newList[0:len(newList)//2], newList[len(newList)//2:]\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Writ",
        "num_ids": 4
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return 3*r*r/4\n",
        "num_ids": 12
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return 3*math.pi*(r**2)/4.0\n",
        "num_ids": 19
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math \n    area = math.sqrt(3)/2 * r**2\n    return area\n",
        "num_ids": 27
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return r*r*3.14/4\n",
        "num_ids": 14
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Argument : r = radius of the semicircle\n    # Return : Area of the largest triangle that can be inscribed in the semicircle\n    import math\n    def max_triangle_area(r) :\n        '''\n        Calculate area of the largest triangle that can be inscribed in a semicircle with a given radius.\n        '''\n        # Argument : r = radius of the semicircle\n        # Return : Area of the largest triangle that can be inscribed in the semicircle\n        return math.pi*r*r/4\n    return max_triangle_area(r)\ndef triangle_area_by_triangle_method(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    The function will use the triangle method to solve the problem.\n    '''\n    # Argument : r = radius of the semicircle\n    # Return : Area of the largest triangle that can be inscribed in the semicircle\n    import math\n    def max_triangle_area_by_triangle_method(r) :\n        '''\n        Calculate area of the largest triangle that can be inscribed in a semicircle with a given radius.\n        The function will use the triangle method to solve the problem.\n        '''\n        # Argument : r = radius of the semicircle\n        # Return : Area of the largest triangle that can be inscribed in the semicircle\n        return math.pi*r*r/4\n    return max_triangle_area_by_triangle_method(r)\ndef triangle_area_by_half_circle_method(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    The function will use the half circle method to solve the problem.\n    '''\n    # Argument : r = radius of the semicircle\n    # Return : Area of the largest triangle that can be inscribed in the semicircle\n    import math\n    def max_triangle_area_by_half_circle_method(r) :\n        '''\n        Calculate area of the largest triangle that can be inscribed in a semicircle with a given radius.\n        The function will use the half circle method to solve the problem.\n        '''\n        # Argument : r = radius of the semicircle\n        # Return : Area of the largest triangle that can be inscribed in the semicircle\n        return math.pi*r*r/4\n    return max_triangle_area_by_half_circle_method(r)\ndef triangle_area_by_square_method(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    The function will use the square method to solve the problem.\n    '''\n    # Argument : r = radius of the semicircle\n    # Return : Area of the largest triangle that can be inscribed in the semicircle\n    import math\n    def max_triangle_area_by_square_method(r) :\n        '''\n        Calculate area of the largest triangle that can be inscribed in a semicircle with a given radius.\n        The function will use the square method to solve the problem.\n        '''\n        # Argument : r = radius of the semicircle\n        # Return : Area of the largest triangle that can be inscribed in the semicircle\n        return math.pi*r*r/4\n    return max_triangle_area_by_square_method(r)\ndef triangle_area_by_calculate_method(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    Use the standard method to calculate the area of the triangle.\n    '''\n    # Argument : r = radius of the semicircle\n    # Return : Area of the largest triangle that can be inscribed in the semicircle\n    import math\n    def max_triangle_area_by_calculate_method(r) :\n        '''\n        Calculate area of the largest triangle that can be inscribed in a semicircle with a given radius.\n        Use the standard method to calculate the area of the triangle.\n        '''\n        # Argument : r = radius of the semicircle\n        # Return : Area of the largest triangle that can be inscribed in the semicircle\n        a = math.sqrt(r*r*r)\n        return a/2\n    return max_triangle_area_by_calculate_method(r)\ndef triangle_area_by_rectangle_method(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    The function will use the rectangle method to solve the problem.\n    '''\n    # Argument : r = radius of the semicircle\n    # Return : Area of the largest triangle that can be inscribed in the semicircle\n    import math\n    def max_triangle_area_by_rectangle_method(r) :\n        '''\n        Calculate area of the largest triangle that can be inscribed in a semicircle with a given radius.\n        The function will use the rectangle method to solve the problem.\n        '''\n        # Argument : r = radius of the semicircle\n        # Return : Area of the largest triangle that can be inscribed in the semicircle\n        return math.pi*r*r/2\n    return max_triangle_area_by_rectangle_method(r)\ndef triangle_area_by_circle_method(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    The function will use the circle method to solve the problem.\n    '''\n    # Argument : r = radius of the semicircle\n    # Return : Area of the largest triangle that can be inscribed in the semicircle\n    import math\n    def max_triangle_area_by_circle_method(r) :\n        '''\n        Calculate area of the largest triangle that can be inscribed in a semicircle with a given radius.\n        The function will use the circle method to solve the problem.\n        '''\n        # Argument : r = radius of the semicircle\n        # Return : Area of the largest triangle that can be inscribed in the semicircle\n        return math.pi*r*r/2\n    return max_triangle_area_by_circle_method(r)\ndef is_triangle_area(a,b,c) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    Use the standard method to calculate the area of the triangle.\n    '''\n    # Argument : a,b,c = three sides of a triangle\n    # Return : Area of the largest triangle that can be inscribed in the semicircle\n    import math\n    return math.sqrt(a*a + b*b + c*c)/2\ndef is_triangle_area_by_triangle_method(a,b,c) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    The function will use the triangle method to solve the problem.\n    '''\n    # Argument : a,b,c = three sides of a triangle\n    # Return : Area of the largest triangle that can be inscribed in the semicircle\n    import math\n    return math.sqrt(a*a + b*b + c*c)/2\ndef is_triangle_area_by_half_circle_method(a,b,c) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    The function will use the half circle method to solve the problem.\n    '''\n    # Argument : a,b,c = three sides of a triangle\n    # Return : Area of the largest triangle that can be inscribed in the semicircle\n    import math\n    return math.sqrt(a*a + b*b + c*c)/2\ndef is_triangle_area_by_square_method(a,b,c) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    The function will use the square method to solv",
        "num_ids": 41
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (r**2/4)*(3**0.5)\n",
        "num_ids": 19
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14 * r**2 / 4\n    return area\n",
        "num_ids": 19
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #In the following calculation, \u221a3 is a square root of 3. \n    r = float(r)\n    area = 3*r*(r-1)/2\n    return area\n",
        "num_ids": 47
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return r**2 * 3.14 / 4.0\n",
        "num_ids": 16
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not end:\n        end = len(array)\n    if start >= end:\n        return end\n    mid = (start + end) / 2\n    if array[mid]!= mid:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid-1)\n",
        "num_ids": 87
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n",
        "num_ids": 18
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start >= end:\n        return start\n    mid = start + (end - start)//2\n    if array[mid] == mid:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid)\n",
        "num_ids": 87
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if end == start:\n        return 1\n    return find_First_Missing(array, start+1, end) if array[start] < array[end] else find_First_Missing(array, start, end-1)\n    \ndef find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if end == start:\n        return 1\n    mid = (start+end)/2\n    if array[mid] < array[end]:\n        if array[mid] < array[start]:\n            return array[mid]+1\n        else:\n            return find_First_Missing(array,mid+1,end)\n    else:\n        if array[mid] > array[start]:\n            return find_First_Missing(array,start,mid)\n        else:\n            return find_First_Missing(array,mid,end-1)\n        \ndef find_first_missing_number(array):\n    for i in range(len(array)):\n        val = abs(array[i])\n        if val == i+1:\n            continue\n        array[val-1] = -1*array[val-1]\n    for i in range(len(array)):\n        if array[i] > 0:\n            return i+1\n    return len(array)+1\n",
        "num_ids": 245
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start == end:\n        return start\n    mid = start + (end - start) // 2\n    if array[mid] == mid:\n        return find_First_Missing(array, mid + 1, end)\n    else:\n        return find_First_Missing(array, start, mid)\n",
        "num_ids": 87
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if end-start<2:\n        return None\n    else:\n        mid=(start+end)/2\n        if array[mid]!=mid:\n            if array[mid]<mid:\n                return find_First_Missing(array,start,mid)\n            else:\n                return find_First_Missing(array,mid,end)\n        else:\n            if array[mid-1]==mid-1:\n                return find_First_Missing(array,mid+1,end)\n            else:\n                return mid-1\n",
        "num_ids": 143
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start >= end:\n        return None\n    if array[start]!= start:\n        return start\n    if array[end]!= end:\n        return end\n    mid = (start+end)/2\n    if array[mid]!= mid:\n        return find_First_Missing(array,start,mid)\n    return find_First_Missing(array,mid+1,end)\n",
        "num_ids": 111
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n",
        "num_ids": 17
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start >= end:\n        return end+1\n    mid = start + (end-start)/2\n    if array[mid] - mid - 1 == array[mid+1]:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid)\n",
        "num_ids": 96
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    if start == end:\n        if array[start] == start:\n            return start+1\n        else:\n            return start\n    if array[start] == start:\n        return find_First_Missing(array, start+1, end)\n    elif array[end] == end:\n        return find_First_Missing(array, start, end-1)\n    else:\n        return find_First_Missing(array, start+1, end-1)\n",
        "num_ids": 127
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    \n    return string.replace(' ', '%20')\n    \n",
        "num_ids": 18
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ','%20')\n    return string\n",
        "num_ids": 19
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return ''.join(string.split(' '))\n",
        "num_ids": 15
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.split(' ')\n    string = '%20'.join(string)\n    return string\n",
        "num_ids": 28
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evenlist = []\n    for i in list:\n        if i % 2 == 0:\n            evenlist.append(i)\n    print \"list = %s\" % list\n    print \"evenlist = %s\" % evenlist\n",
        "num_ids": 57
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    for i in list:\n        if i%2 == 0:\n            print i\n",
        "num_ids": 22
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    l=list[::2]\n    return l\ndef Divisible_by_five(n):\n    '''\n    Write a python function to find numbers divisible by five from a list of numbers.\n    '''\n    l=[]\n    for i in range(0,n):\n        if (i%5==0):\n            l.append(i)\n    return l\ndef numbers_to_string(n):\n    '''\n    Write a python function to convert a list of numbers to a string.\n    '''\n    s=''\n    for i in range(0,n):\n        s=s+str(i)\n    return s\ndef remove_vowels(str):\n    '''\n    Write a python function to remove vowels from a string.\n    '''\n    return ''.join(char for char in str if char not in 'aeiouAEIOU')\ndef pangram(str):\n    '''\n    Write a python function to determine if a string is a pangram or not.\n    '''\n    d=['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    s=str.lower()\n    for i in s:\n        if i in d:\n            d.remove(i)\n    if len(d)==0:\n        return True\n    else:\n        return False\ndef anagram(str1,str2):\n    '''\n    Write a python function to determine if two strings are anagrams.\n    '''\n    return sorted(str1)==sorted(str2)\ndef old_macdonald(name):\n    '''\n    Write a python function to convert a string to a name in title case\n    where the first letter of each word is capitalized and the rest are lowercase.\n    '''\n    return name[0].upper()+name[1:].lower()\ndef old_macdonald2(name):\n    '''\n    Write a python function to convert a string to a name in title case\n    where the first letter of each word is capitalized and the rest are lowercase.\n    '''\n    return name.capitalize()\ndef master_yoda(str):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return str[::-1]\ndef almost_there(n):\n    '''\n    Write a python function to determine if a given number is within 10 of either 100 or 200.\n    '''\n    return ((abs(100-n)<=10)or(abs(200-n)<=10))\ndef has_33(nums):\n    '''\n    Write a python function to find out if the array contains the number 33.\n    '''\n    for i in range(0,len(nums)):\n        if nums[i]==33:\n            return True\n    return False\ndef paper_doll(str):\n    '''\n    Write a python function to convert a string to a 'paperdoll'.\n    '''\n    return ''.join(char*3 for char in str)\ndef blackjack(a,b,c):\n    '''\n    Write a python function to determine if a player can win blackjack from the values a,b,c.\n    '''\n    if (a==11)or(b==11)or(c==11):\n        return True\n    if (a==1)or(b==1)or(c==1):\n        return True\n    if (a==10)or(b==10)or(c==10):\n        return True\n    else:\n        return False\ndef summer_69(arr):\n    '''\n    Write a python function to find out the total number of days, num_days, from 1 to n,\n    that had the most days in a row, where all days were even.\n    '''\n    l=[]\n    for i in range(0,len(arr)):\n        l.append(i)\n    l.sort()\n    s=set()\n    for i in range(0,len(l)):\n        s.add(l[i])\n    for i in s:\n        if i==0:\n            if arr[i]+1 in s:\n                continue\n        elif i==(len(l)-1):\n            if arr[i]-1 in s:\n                continue\n        else:\n            if (arr[i]+1) in s and (arr[i]-1) in s:\n                continue\n    return s\ndef spy_game(nums):\n    '''\n    Write a python function to find out if a player can win the game from a given list of integers.\n    '''\n    l=[]\n    for i in range(0,len(nums)-1):\n        if nums[i]==0:\n            l.append(i)\n        if nums[i]==7:\n            l.append(i)\n    if nums[len(nums)-1]==0:\n        l.append(len(nums)-1)\n    return l\ndef count_primes(n):\n    '''\n    Write a python function to find out the number of prime numbers less than n.\n    '''\n    l=[]\n    for i in range(0,n):\n        if i==0 or i==1:\n            l.append(i)\n        else:\n            if i==2:\n                l.append(i)\n            elif i>2:\n                for j in range(2,i):\n                    if (i%j)==0:\n                        break\n                else:\n                    l.append(i)\n    return len(l)\ndef count_primes2(n):\n    '''\n    Write a python function to find out the number of prime numbers less than n.\n    '''\n    l=[]\n    for i in range(0,n):\n        if i==0 or i==1:\n            l.append(i)\n        else:\n            if i==2:\n                l.append(i)\n            elif i>2:\n                for j in range(2,i):\n                    if (i%j)==0:\n                        break\n                else:\n                    l.append(i)\n    return len(l)\ndef is_valid_walk(walk):\n    '''\n    Write a python function to determine if a walk is valid.\n    '''\n    s=set()\n    s.add(walk[0])\n    if len(walk)==10:\n        if walk[0]=='n' and walk[1]=='e' and walk[2]=='w' and walk[3]=='e' and walk[4]=='s' and walk[5]=='e' and walk[6]=='w' and walk[7]=='s' and walk[8]=='e' and walk[9]=='s':\n            return True\n    else:\n        return False\ndef sock_merchant(n,ar):\n    '''\n    Write a python function to determine the maximum number of pairs of socks that you can buy from the store.\n    '''\n    s=set()\n    for i in range(0,len(ar)):\n        s.add(ar[i])\n    c=0\n    for i in s:\n        c=c+ar.count(i)//2\n    return c\ndef sock_merchant2(n,ar):\n    '''\n    Write a python function to determine the maximum number of pairs of socks that you can buy from the store.\n    '''\n    s=set()\n    for i in range(0,len(ar)):\n        s.add(ar[i])\n    c=0\n    for i in s:\n        c=c+ar.count(i)//2\n    return c\ndef sock_merchant3(n,ar):\n    '''\n    Write a python function to determine the maximum number of pairs of socks that you can buy from the store.\n    '''\n    s=set()\n    for i in range(0,len(ar)):\n        s.add(ar[i])\n    c=0\n    for i in s:\n        c=c+ar.count(i)//2\n    return c\ndef count_binary_substrings(str):\n    '''\n    Write a python function to determine the number of substrings that have equal number of 0s and 1s.\n    '''\n    l=[]\n    fo",
        "num_ids": 9
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = [i for i in list if i%2==0]\n    return even_list\n",
        "num_ids": 27
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [x for x in list if x%2==0]\n    \ndef FindMean(list):\n    '''\n    Write a python function to find the mean of a list.\n    '''\n    return sum(list)/float(len(list))\n    \ndef FindMedian(list):\n    '''\n    Write a python function to find the median of a list.\n    '''\n    list.sort()\n    if len(list)%2==0:\n        return (list[int(len(list)/2)]+list[int(len(list)/2-1)])/2.0\n    else:\n        return list[int(len(list)/2)]\n",
        "num_ids": 69
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for element in list:\n        if element%2 == 0:\n            even_list.append(element)\n    return even_list\n",
        "num_ids": 41
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evenList = []\n    for item in list:\n        if item % 2 == 0:\n            evenList.append(item)\n    return evenList\n",
        "num_ids": 38
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list = [x for x in list if x%2 == 0]\n    return list\n",
        "num_ids": 23
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if (number % 2 == 0):\n            even_numbers.append(number)\n    return even_numbers\n",
        "num_ids": 45
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    l = []\n    for i in list:\n        if i % 2 == 0:\n            l.append(i)\n    return l\nprint(Split([1,2,3,4,5,6,7]))\n",
        "num_ids": 55
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    # try:\n    sub.append(ele)\n    print(sub)\n    if ele[0]+1 < len(grid) and grid[ele[0]+1][ele[1]]!= '0':\n        adjac(grid[ele[0]+1][ele[1]], sub)\n    if ele[1]+1 < len(grid[0]) and grid[ele[0]][ele[1]+1]!= '0':\n        adjac(grid[ele[0]][ele[1]+1], sub)\n    if ele[1]-1 >= 0 and grid[ele[0]][ele[1]-1]!= '0':\n        adjac(grid[ele[0]][ele[1]-1], sub)\n    if ele[0]-1 >= 0 and grid[ele[0]-1][ele[1]]!= '0':\n        adjac(grid[ele[0]-1][ele[1]], sub)\n    return sub\n",
        "num_ids": 229
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [(ele[0], ele[1] + 1), (ele[0], ele[1] - 1), (ele[0] + 1, ele[1]), (ele[0] - 1, ele[1])]\n",
        "num_ids": 54
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    x = ele[0]\n    y = ele[1]\n    adj.append((x, y-1))\n    adj.append((x, y+1))\n    adj.append((x-1, y))\n    adj.append((x+1, y))\n    adj.append((x-1, y-1))\n    adj.append((x+1, y-1))\n    adj.append((x-1, y+1))\n    adj.append((x+1, y+1))\n    return adj\n",
        "num_ids": 131
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [(ele[0] + a[0], ele[1] + a[1]) for a in SUB]\n",
        "num_ids": 29
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    l = []\n    for i in range(len(ele)):\n        if ele[i] == 1:\n            l.append([ele[0], ele[1], ele[2], ele[3], ele[i]])\n    return l\n    \ndef adjac_dic(ele, sub = {}): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple, and store in a dictionary.\n    '''\n    l = adjac(ele)\n    for i in range(len(l)):\n        if l[i][0:2] in sub.keys():\n            sub[l[i][0:2]].append(l[i])\n        else:\n            sub[l[i][0:2]] = [l[i]]\n    return sub\n    \ndef pairwise_adjac(ele, sub = {}):\n    '''\n    Write a function to extract all the adjacent pairwise coordinates of the given coordinate tuple.\n    '''\n    l = []\n    for i in range(len(ele)):\n        if ele[i] == 1:\n            l.append([ele[0], ele[1], ele[2], ele[3], ele[i]])\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i][0:2] == l[j][0:2]:\n                if l[i][2:]!= l[j][2:]:\n                    l.append([l[i][0], l[i][1], l[j][0], l[j][1], l[i][2]])\n    return l\n    \ndef pairwise_adjac_dic(ele, sub = {}):\n    '''\n    Write a function to extract all the adjacent pairwise coordinates of the given coordinate tuple, and store in a dictionary.\n    '''\n    l = pairwise_adjac(ele)\n    for i in range(len(l)):\n        if l[i][0:2] in sub.keys():\n            sub[l[i][0:2]].append(l[i])\n        else:\n            sub[l[i][0:2]] = [l[i]]\n    return sub\n    \ndef ele_match(l, sub = {}):\n    '''\n    Write a function to check whether the given coordinate tuple has adjacent element pairs with the same coordinates.\n    '''\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i][0:2] == l[j][0:2]:\n                return True\n    return False\n",
        "num_ids": 58
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj_ele = set()\n",
        "num_ids": 10
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    return [(x-1, y), (x, y+1), (x+1, y), (x, y-1)]\n",
        "num_ids": 40
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[1]==1:\n        return [tuple(ele[0]-i for i in range(1,ele[2]+1))]\n    elif ele[1]==ele[2]:\n        return [tuple(ele[0]+i for i in range(1,ele[2]+1))]\n    elif ele[1]<ele[2]:\n        return [tuple(ele[0]+i for i in range(1,ele[2]+1)), tuple(ele[0]-i for i in range(1,ele[2]+1))]\n    else:\n        return [tuple(ele[0]+i for i in range(1,ele[2]+1))] + [tuple(ele[0]-i for i in range(1,ele[2]+1))]\n",
        "num_ids": 190
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [(ele[0]+i,ele[1]+j) for i in range(-1,2) for j in range(-1,2) if not(i==0 and j ==0)]\n    \ndef is_valid(ele,mat):\n    return (ele[0]>=0 and ele[1]>=0) and (ele[0] < len(mat) and ele[1]<len(mat[0]))\n    \ndef bfs(mat,start,goal,visited):\n    q = [start]\n    while q:\n        ele = q.pop(0)\n        visited.add(ele)\n        if ele == goal:\n            return True\n        for adj in adjac(ele):\n            if is_valid(adj,mat) and adj not in visited:\n                q.append(adj)\n    return False\n    \ndef path_to_goal(mat, start, goal):\n    visited = set()\n    if bfs(mat,start,goal,visited):\n        q = [start]\n        while q:\n            ele = q.pop(0)\n            if ele == goal:\n                return ele\n            for adj in adjac(ele):\n                if is_valid(adj,mat) and adj not in visited:\n                    q.append(adj)\n    else:\n        return None\n",
        "num_ids": 314
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [(ele[0]-1, ele[1]),(ele[0]+1, ele[1]),(ele[0], ele[1]-1),(ele[0], ele[1]+1)]\n",
        "num_ids": 49
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_string = \"\"\n    for i in text:\n        if i =='':\n            new_string += '_'\n        else:\n            new_string += i\n    return new_string\n",
        "num_ids": 49
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n",
        "num_ids": 19
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # for t in text:\n    #     if t =='':\n    #         text = text.replace(t, '_')\n    #     else:\n    #         text = text.replace(t,'')\n    return text.replace(' ', '_').replace('_','')\n",
        "num_ids": 70
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    return text.translate(str.maketrans('', '','\\t'))\n",
        "num_ids": 26
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ','_')\n    text = text.replace('_',' ')\n    return text\n",
        "num_ids": 30
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    if text == None:\n        return None\n    \n    if text == '':\n        return ''\n    \n    if len(text) == 0:\n        return text\n    \n    if text[0] =='':\n        return '_' + replace_spaces(text[1:])\n    \n    if text[0] == '_':\n        return'' + replace_spaces(text[1:])\n    \n    return text[0] + replace_spaces(text[1:])\n    \ndef hex_to_binary(hex_string):\n    '''\n    Write a function to convert a hexadecimal string to a binary string\n    '''\n    \n    if hex_string == None:\n        return None\n    \n    if len(hex_string) == 0:\n        return None\n    \n    if len(hex_string) % 2!= 0:\n        raise Exception('length of hex_string must be even')\n    \n    return ''.join([to_binary(int(hex_string[2 * i:2 * i + 2], 16)) for i in range(len(hex_string) / 2)])\n",
        "num_ids": 112
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.translate(str.maketrans(' ', '_',''))\n",
        "num_ids": 23
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n",
        "num_ids": 19
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Create a new list\n    new_list = []\n",
        "num_ids": 16
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # approach 1\n    # move_zero = [x for x in num_list if x == 0]\n    # for item in move_zero:\n    #     num_list.remove(item)\n    # num_list.extend(move_zero)\n",
        "num_ids": 63
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if num_list == []:\n        return []\n    zero_list = []\n    for n in num_list:\n        if n == 0:\n            zero_list.append(n)\n    for n in num_list:\n        if n!= 0:\n            zero_list.append(n)\n    return zero_list\n",
        "num_ids": 81
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n            i = i-1\n    return num_list\n",
        "num_ids": 66
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # the purpose of this function is to move all zero elements to the end of the list\n    # the function has to do this by iterating over the list and checking if the element is zero\n    # if it is, it is moved to the end of the list\n    \n    new_list = []\n    \n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            new_list.append(num_list[i])\n    \n    for j in range(len(new_list), len(num_list)):\n        new_list.append(0)\n    \n    return new_list\n",
        "num_ids": 152
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i!= 0:\n            new_list.append(i)\n    for j in range(len(num_list) - len(new_list)):\n        new_list.append(0)\n    return new_list\n",
        "num_ids": 73
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes_list = []\n    for num in num_list:\n        if num == 0:\n            zeroes_list.append(num)\n    for num in num_list:\n        if num!= 0:\n            zeroes_list.append(num)\n    return zeroes_list\n    ",
        "num_ids": 74
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    pos = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[pos], num_list[i] = num_list[i], num_list[pos]\n            pos += 1\n    return num_list\n",
        "num_ids": 72
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # c = 0\n    # for i in num_list:\n    #     if i == 0:\n    #         c += 1\n    # for i in range(c):\n    #     num_list.remove(0)\n    #     num_list.append(0)\n    # return num_list\n    return [i for i in num_list if i!= 0] + [0 for i in range(num_list.count(0))]\n    \ndef is_palindrome(num):\n    '''\n    Write a python function to check whether the given number is a palindrome or not.\n    '''\n    # return str(num) == str(num)[::-1]\n    return str(num) == str(num)[::-1]\n",
        "num_ids": 35
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in xrange(len(arr)-1) : \n        for j in xrange(i+1,len(arr)) : \n            ans = ans + arr[i] ^ arr[j]\n    return ans\n",
        "num_ids": 60
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr_size = len(arr)\n    xor = 0\n    for i in xrange(arr_size):\n        for j in xrange(arr_size):\n            if i == j:\n                continue\n            xor = xor ^ arr[i] ^ arr[j]\n    return xor\n",
        "num_ids": 74
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    n = len(arr)\n    return (arr[0] ^ arr[1]) + pair_xor_Sum(arr[2:],n-1)\n",
        "num_ids": 40
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum += arr[i]^arr[j]\n    return sum\n    \n    \n    \nif __name__ == \"__main__\":\n    arr = [1,2,3,4,5,6]\n    print pair_xor_Sum(arr,len(arr))",
        "num_ids": 97
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n) : \n        for j in range(i+1,n) : \n            sum += arr[i]^arr[j]\n    return sum\n",
        "num_ids": 50
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    return reduce(lambda x, y: x ^ y, arr)\n    \ndef pair_xor_inversion(arr,n) :\n    '''\n    Write a python function to find the number of inversions in the given list of numbers.\n    '''\n    return bin(pair_xor_Sum(arr,n)).count(\"1\")\n    \ndef get_max_ele(arr,n) :\n    '''\n    Write a python function to find the maximum element of the given list.\n    '''\n    return max(arr)\n    \ndef get_max_ele_occurence(arr,n) :\n    '''\n    Write a python function to find the max occurence of a particular element in the given list.\n    '''\n    return arr.count(get_max_ele(arr,n))\n    \ndef check_array(arr,n) :\n    '''\n    Write a python function to check whether the given list is a permutation or not.\n    '''\n    return arr == sorted(arr)\n    \ndef check_array_inversion(arr,n) :\n    '''\n    Write a python function to check whether the given list is a permutation or not.\n    '''\n    return arr == sorted(arr) and arr.count(get_max_ele(arr,n)) == 1\n    \ndef get_max_ele_in_range(arr,n) :\n    '''\n    Write a python function to find the max element of the given list in a particular range.\n    '''\n    return max(arr[(int)(len(arr)*(i)/100) : int(len(arr)*(i+1)/100)] for i in range(100))\n    \ndef get_max_ele_occurence_in_range(arr,n) :\n    '''\n    Write a python function to find the max occurence of a particular element in the given list in a particular range.\n    '''\n    return arr.count(get_max_ele_in_range(arr,n))\n    \ndef is_prime_in_range(n) :\n    '''\n    Write a python function to check whether the given number is a prime number in a particular range.\n    '''\n    if n <= 0 or n > 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 79
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    res = 0\n    for i in range(n) : \n        for j in range(i+1,n) : \n            res += arr[i] ^ arr[j]\n    return res\n",
        "num_ids": 52
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0\n    for i in range(len(arr)) :\n        res += arr[i]\n    return res\n",
        "num_ids": 31
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    return (n*(n-1))//2\n",
        "num_ids": 17
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # your code here\n    return reduce(lambda x,y:x^y, arr)\n",
        "num_ids": 24
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for item in iterable:\n        hq.heappush(h, item)\n    return [hq.heappop(h) for i in xrange(len(h))]\n",
        "num_ids": 52
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list\n    \ndef heap_sort_reverse(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list[::-1]\n",
        "num_ids": 58
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    iterable = iterable[:]\n    # creating a max heap \n    hq.heapify(iterable)\n    # extracting all elements from the heap and placing them back in the original list\n    for i in range(len(iterable)):\n        iterable[i] = hq.heappop(iterable)\n    return iterable\n",
        "num_ids": 84
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sorted(iterable)\n",
        "num_ids": 10
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for e in iterable:\n        hq.heappush(h, e)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "num_ids": 51
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for num in iterable:\n        hq.heappush(h, num)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "num_ids": 51
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\n",
        "num_ids": 39
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h, i)\n    return [hq.heappop(h) for _ in range(len(h))]\n",
        "num_ids": 51
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in xrange(len(iterable))]\n",
        "num_ids": 40
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = [iterable[0]]\n    i = 1\n    while i < len(iterable):\n        if iterable[i] > heap[0]:\n            hq.heapreplace(heap, iterable[i])\n        i += 1\n    return heap\ndef merge_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable) == 1:\n        return iterable\n    if len(iterable) == 2:\n        if iterable[0] > iterable[1]:\n            return [iterable[1], iterable[0]]\n        else:\n            return iterable\n    mid = len(iterable) / 2\n    lst1 = merge_sort(iterable[:mid])\n    lst2 = merge_sort(iterable[mid:])\n    lst3 = []\n    while len(lst1) > 0 and len(lst2) > 0:\n        if lst1[0] < lst2[0]:\n            lst3.append(lst1.pop(0))\n        else:\n            lst3.append(lst2.pop(0))\n    lst3 += lst1\n    lst3 += lst2\n    return lst3\ndef insertion_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(1, len(iterable)):\n        curr_val = iterable[i]\n        curr_idx = i\n        while curr_idx > 0 and iterable[curr_idx - 1] > curr_val:\n            iterable[curr_idx] = iterable[curr_idx - 1]\n            curr_idx -= 1\n        iterable[curr_idx] = curr_val\n    return iterable\ndef selection_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(0, len(iterable)):\n        min_idx = i\n        for j in range(i + 1, len(iterable)):\n            if iterable[min_idx] > iterable[j]:\n                min_idx = j\n        iterable[i], iterable[min_idx] = iterable[min_idx], iterable[i]\n    return iterable\ndef partition(lst, lo, hi):\n    '''\n    Write a function to sort the given list.\n    '''\n    pivot = lst[hi]\n    i = lo\n    for j in range(lo, hi):\n        if lst[j] <= pivot:\n            lst[j], lst[i] = lst[i], lst[j]\n            i += 1\n    lst[i], lst[hi] = lst[hi], lst[i]\n    return i\ndef quick_sort(iterable, lo=0, hi=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    if hi is None:\n        hi = len(iterable) - 1\n    if lo < hi:\n        pivot_idx = partition(iterable, lo, hi)\n        quick_sort(iterable, lo, pivot_idx - 1)\n        quick_sort(iterable, pivot_idx + 1, hi)\n    return iterable\ndef shell_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable) < 2:\n        return iterable\n    sublist_size = len(iterable) / 2\n    while sublist_size > 0:\n        for i in range(sublist_size, len(iterable)):\n            temp = iterable[i]\n            j = i\n            while j >= sublist_size and iterable[j - sublist_size] > temp:\n                iterable[j] = iterable[j - sublist_size]\n                j -= sublist_size\n            iterable[j] = temp\n        sublist_size = sublist_size / 2\n    return iterable\ndef count_sort(iterable, maximum=100):\n    '''\n    Write a function to sort the given list.\n    '''\n    output = [0] * (maximum + 1)\n    for i in iterable:\n        output[i] += 1\n    i = 0\n    for j in range(len(output)):\n        while output[j] > 0:\n            iterable[i] = j\n            output[j] -= 1\n            i += 1\n    return iterable\ndef merge_sort_with_count_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable) == 1:\n        return iterable\n    mid = len(iterable) / 2\n    lst1 = merge_sort_with_count_sort(iterable[:mid])\n    lst2 = merge_sort_with_count_sort(iterable[mid:])\n    lst3 = []\n    i = 0\n    j = 0\n    while i < len(lst1) and j < len(lst2):\n        if lst1[i] < lst2[j]:\n            lst3.append(lst1[i])\n            i += 1\n        else:\n            lst3.append(lst2[j])\n            j += 1\n    lst3 += lst1[i:]\n    lst3 += lst2[j:]\n    return lst3\ndef radix_sort(iterable, base=10):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable) < 2:\n        return iterable\n    temp = [[] for i in range(base)]\n    for i in iterable:\n        temp[i % base].append(i)\n    i = 0\n    for j in range(base):\n        temp[j] = merge_sort(temp[j])\n    res = []\n    for i in range(base):\n        res += temp[i]\n    return res\ndef radix_sort_with_count_sort(iterable, base=10):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable) < 2:\n        return iterable\n    temp = [[] for i in range(base)]\n    for i in iterable:\n        temp[i % base].append(i)\n    i = 0\n    for j in range(base):\n        temp[j] = merge_sort_with_count_sort(temp[j])\n    res = []\n    for i in range(base):\n        res += temp[i]\n    return res\ndef heap_sort_with_count_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable) < 2:\n        return iterable\n    max_heap = []\n    for i in iterable:\n        hq.heappush(max_heap, -i)\n    res = []\n    while len(max_heap) > 0:\n        res.append(-hq.heappop(max_heap))\n    return res\ndef counting_sort_with_count_sort(iterable, maximum=100):\n    '''\n    Write a function to sort the given list.\n    '''\n    output = [0] * (maximum + 1)\n    for i in iterable:\n        output[i] += 1\n    i = 0\n    for j in range(len(output)):\n        while output[j] > 0:\n            iterable[i] = j\n            output[j] -= 1\n            i += 1\n    return iterable\ndef bucket_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable) < 2:\n        return iterable\n    max_num = max(iterable)\n    num_buckets = len(iterable)\n    buckets = [[] for i in range(num_buckets)]\n    for i in iterable:\n        buckets[i / (max_num + 1)].append(i)\n    i = 0\n    for j in range(num_buckets):\n        buckets[j] = merge_sort(buckets[j])\n",
        "num_ids": 118
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    assert type(actual_cost)==int or type(actual_cost)==float\n    assert type(sale_amount)==int or type(sale_amount)==float\n",
        "num_ids": 42
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost < sale_amount:\n        return False\n    else:\n        return noprofit_noloss(actual_cost - sale_amount,sale_amount)\n    \n    \n    ",
        "num_ids": 66
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # write your code here\n    if sale_amount <= actual_cost:\n        return True\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount<actual_cost:\n        return 0\n    elif sale_amount==actual_cost:\n        return 1\n    else:\n        return 2\n",
        "num_ids": 41
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return 'No Profit'\n    elif actual_cost > sale_amount:\n        return 'Loss'\n    else:\n        return 'Profit'\n",
        "num_ids": 50
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return False\n    else:\n        return True\n",
        "num_ids": 25
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    assert actual_cost <= sale_amount, \"profit cannot be negative or 0\"\n    return actual_cost == sale_amount\n",
        "num_ids": 31
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    print 'actual_cost: %s, sale_amount: %s' % (actual_cost,sale_amount)\n    if actual_cost<sale_amount:\n        return 'NO'\n    else:\n        return 'YES'\n    \ndef profitloss_checker(expected_cost,actual_cost,expected_sale,sale_amount):\n    '''\n    Write a function to check whether the given sale and cost has a profit and loss\n    '''\n    print 'expected_cost: %s, actual_cost: %s, expected_sale: %s, sale_amount: %s' % (expected_cost,actual_cost,expected_sale,sale_amount)\n    if noprofit_noloss(actual_cost,sale_amount)=='NO':\n        return 'NO'\n    elif expected_sale>expected_cost:\n        if actual_cost<sale_amount:\n            return 'YES'\n        else:\n            return 'NO'\n    else:\n        return 'NO'\n    \ndef print_noprofit_noloss(expected_cost,actual_cost,expected_sale,sale_amount):\n    '''\n    Write a function to check whether the given sale and cost has a profit and loss\n    '''\n    if noprofit_noloss(actual_cost,sale_amount)=='NO':\n        print 'expected_cost: %s, actual_cost: %s, expected_sale: %s, sale_amount: %s' % (expected_cost,actual_cost,expected_sale,sale_amount)\n        print 'NO'\n    else:\n        print 'expected_cost: %s, actual_cost: %s, expected_sale: %s, sale_amount: %s' % (expected_cost,actual_cost,expected_sale,sale_amount)\n        print 'YES'\n        \ndef main():\n    '''\n    Write a function to check whether the given sale and cost has a profit and loss\n    '''\n    expected_cost=int(raw_input())\n    actual_cost=int(raw_input())\n    expected_sale=int(raw_input())\n    sale_amount=int(raw_input())\n    print profitloss_checker(expected_cost,actual_cost,expected_sale,sale_amount)\n    \nmain()",
        "num_ids": 79
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v <= 2:\n        c = 40.0\n    elif v <= 12:\n        c = ((13.12 + (0.6215 * t)) * (v ** 0.16)) + ((13.12 + (0.6215 * t)) * (v ** 0.16))\n    elif v <= 22:\n        c = ((15.42 + (0.6108 * t)) * (v ** 0.16)) + ((15.42 + (0.6108 * t)) * (v ** 0.16))\n    elif v <= 32:\n        c = ((19.44 + (0.5549 * t)) * (v ** 0.16)) + ((19.44 + (0.5549 * t)) * (v ** 0.16))\n    elif v <= 47:\n        c = ((22.68 + (0.4941 * t)) * (v ** 0.16)) + ((22.68 + (0.4941 * t)) * (v ** 0.16))\n    elif v <= 56:\n        c = ((32.87 + (0.4941 * t)) * (v ** 0.16)) + ((32.87 + (0.4941 * t)) * (v ** 0.16))\n    else:\n        c = ((34.5 + (0.5549 * t)) * (v ** 0.16)) + ((34.5 + (0.5549 * t)) * (v ** 0.16))\n    c = math.ceil(c)\n    return c\n",
        "num_ids": 357
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #Dictionary containing the temperature ranges for the wind chill calculation\n    windchill = {\n    'v1':(1,10,32),\n    'v2':(10,25,42),\n    'v3':(25,35,47),\n    'v4':(35,50,58),\n    'v5':(50,70,70),\n    'v6':(70,100,74)\n    }\n    #Calculate wind chill index using the lookup table\n    for k,v in windchill.items():\n        if v[0] <= v[1] <= v[2] :\n            windchill_index = round(v[2]-((v[2]-v[1])/(v[2]-v[0])*(v[2]-v[1])),0)\n            if windchill_index > v[2]:\n                windchill_index = v[2]\n            break\n    #If wind velocity is not within the lookup table, then use the formula for windchill index\n    else:\n        #Formula for windchill index from RFC 8807\n        wci = 35.74 + 0.6215*t + (0.4275*t - 35.75)*(v**0.16)\n        windchill_index = round(wci,0)\n    #Return wind chill index\n    return windchill_index\n",
        "num_ids": 326
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return round((35.74 + (0.6215 * t) - (35.75 * v ** 0.16) + (0.4275 * t * v ** 0.16)) * (math.pow(v, 0.16)))\n",
        "num_ids": 59
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #http://en.wikipedia.org/wiki/Wind_chill\n    return round((35.74 + 0.6215 * t) * math.pow(v,0.16))\n",
        "num_ids": 47
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    k = 0.62\n    c = 35.74\n    w = math.pow(v,0.16)\n    return math.ceil((c * t) - (k * w * t))\n    \nassert wind_chill(60, 0) == 32\nassert wind_chill(60, 10) == 32\nassert wind_chill(60, 20) == 35\nassert wind_chill(60, 25) == 37\nassert wind_chill(60, 30) == 37\nassert wind_chill(60, 35) == 37\nassert wind_chill(60, 40) == 37\nassert wind_chill(60, 45) == 39\nassert wind_chill(60, 50) == 39\nassert wind_chill(60, 55) == 39\nassert wind_chill(60, 60) == 39\nassert wind_chill(60, 65) == 37\nassert wind_chill(60, 70) == 35\nassert wind_chill(60, 75) == 33\nassert wind_chill(60, 80) == 32\nassert wind_chill(60, 85) == 32\nassert wind_chill(60, 90) == 31\nassert wind_chill(60, 95) == 31\nassert wind_chill(60, 100) == 31\nassert wind_chill(60, 105) == 30\nassert wind_chill(60, 110) == 30\nassert wind_chill(60, 115) == 29\nassert wind_chill(60, 120) == 28\nassert wind_chill(60, 125) == 28\nassert wind_chill(60, 130) == 28\nassert wind_chill(60, 135) == 27\nassert wind_chill(60, 140) == 26\nassert wind_chill(60, 145) == 26\nassert wind_chill(60, 150) == 25\nassert wind_chill(60, 155) == 25\nassert wind_chill(60, 160) == 24\nassert wind_chill(60, 165) == 24\nassert wind_chill(60, 170) == 24\nassert wind_chill(60, 175) == 22\nassert wind_chill(60, 180) == 19\nassert wind_chill(60, 185) == 19\nassert wind_chill(60, 190) == 19\nassert wind_chill(60, 195) == 19\nassert wind_chill(60, 200) == 19\nassert wind_chill(60, 205) == 19\nassert wind_chill(60, 210) == 19\nassert wind_chill(60, 215) == 19\nassert wind_chill(60, 220) == 19\nassert wind_chill(60, 225) == 19\nassert wind_chill(60, 230) == 19\nassert wind_chill(60, 235) == 19\nassert wind_chill(60, 240) == 19\nassert wind_chill(60, 245) == 19\nassert wind_chill(60, 250) == 19\nassert wind_chill(60, 255) == 19\nassert wind_chill(60, 260) == 19\nassert wind_chill(60, 265) == 19\nassert wind_chill(60, 270) == 19\nassert wind_chill(60, 275) == 19\nassert wind_chill(60, 280) == 19\nassert wind_chill(60, 285) == 19\nassert wind_chill(60, 290) == 19\nassert wind_chill(60, 295) == 19\nassert wind_chill(60, 300) == 19\nassert wind_chill(60, 305) == 19\nassert wind_chill(60, 310) == 19\nassert wind_chill(60, 315) == 19\nassert wind_chill(60, 320) == 19\nassert wind_chill(60, 325) == 19\nassert wind_chill(60, 330) == 19\nassert wind_chill(60, 335) == 19\nassert wind_chill(60, 340) == 19\nassert wind_chill(60, 345) == 19\nassert wind_chill(60, 350) == 19\nassert wind_chill(60, 355) == 19\nassert wind_chill(60, 360) == 19\nassert wind_chill(60, 365) == 19\nassert wind_chill(60, 370) == 19\nassert wind_chill(60, 375) == 19\nassert wind_chill(60, 380) == 19\nassert wind_chill(60, 385) == 19\nassert wind_chill(60, 390) == 19\nassert wind_chill(60, 395) == 19\nassert wind_chill(60, 400) == 19\nassert wind_chill(60, 405) == 19\nassert wind_chill(60, 410) == 19\nassert wind_chill(60, 415) == 19\nassert wind_chill(60, 420) == 19\nassert wind_chill(60, 425) == 19\nassert wind_chill(60, 430) == 19\nassert wind_chill(60, 435) == 19\nassert wind_chill(60, 440) == 19\nassert wind_chill(60, 445) == 19\nassert wind_chill(60, 450) == 19\nassert wind_chill(60, 455) == 19\nassert wind_chill(60, 460) == 19\nassert wind_chill(60, 465) == 19\nassert wind_chill(60, 470) == 19\nassert wind_chill(60, 475) == 19\nassert wind_chill(60, 480) == 19\nassert wind_chill(60, 485) == 19\nassert wind_chill(60, 490) == 19\nassert wind_chill(60, 495) == 19\nassert wind_chill(60, 500) == 19\nassert wind_chill(60, 505) == 19\nassert wind_chill(60, 510) == 19\nassert wind_chill(60, 515) == 19\nassert wind_chill(60, 520) == 19\nassert wind_chill(60, 525) == 19\nassert wind_chill(60, 530) == 19\nassert wind_chill(60, 535) == 19\nassert wind_chill(60, 540) == 19\nassert wind_chill(60, 545) == 19\nassert wind_chill(60, 550) == 19\nassert wind_chill(60, 555) == 19\nassert wind_chill(60, 560) == 19\nassert wind_chill(60, 565) == 19\nassert wind_chill(60, 570) == 19\nassert wind_chill(60, 575) == 19\nassert wind_chill(60, 580) == 19\nassert wind_chill(60, 585) == 19\nassert wind_chill(60, 590) == 19\nassert wind_chill(60, 595) == 19\nassert wind_chill(60, 600) == 19\nassert wind_chill(60, 605) == 19\nassert wind_chill(60, 610) == 19\nassert wind_chill(60, 615) == 19\nassert wind_chill(60, 620) == 19\nassert wind_chill(60, 625) == 19\nassert wind_chill(60, 630) == 19\nassert wind_chill(60, 635) == 19\nassert wind_chill(60, 640) == 19\nassert wind_chill(60, 645) == 19\nassert wind_chill(60, 650) == 19\nassert wind_chill(60, 655) == 19\nassert wind_chill(60, 660) == 19\nassert wind_chill(60, 665) == 19\nassert wind_chill(60, 670) == 19\nassert wind_chill(60, 675) == 19\nassert wind_chill(60, 680) == 19\nassert wind_chill(60, 685) == 19\nassert wind_chill(60, 690) == 19\nassert wind_chill(60, 695) == 19\nassert wind_chill(60, 700) == 19\nassert wind_chill(60, 705) == 19\nassert wind_chill(60, 710) == 19\nassert wind_chill(60, 715) == 19\nassert wind_chill(60, 720) == 19\nassert wind_chill(60, 725) == 19\nassert wind_chill(60, 730) == 19\nassert wind_chill(60, 735) == 19\nassert wind_chill(60, 740) == 19\nassert wind_c",
        "num_ids": 1996
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n    e = 0.16\n    f = 35.75 - (0.6215*t) + (35.75*math.pow(v,0.16)) - (0.4275*math.pow(t,0.16))\n    return round(f)\n",
        "num_ids": 97
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    result = 35.74 + 0.6215*t - 35.75*(v**0.16) + 0.4275*t*(v**0.16)\n    return math.floor(result)\n",
        "num_ids": 52
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = v*0.1 #convert km/h to m/s\n    t = t + 273.15 #convert celsius to Kelvin\n    if v < 3:\n        return -42.379 + (2.04901523*t) + (10.14333127*(v**-0.16)) + (0.22475541*(v**-1.0)) + (0.00683783*(v**-2.0))\n    elif v < 6:\n        return -22.0 + (4.52747514*t) + (12.37979228*(v**-0.16)) + (0.22475541*(v**-1.0)) + (0.00683783*(v**-2.0))\n    elif v < 10:\n        return -12.0 + (2.86674741*t) + (10.93365375*(v**-0.16)) + (0.22475541*(v**-1.0)) + (0.00683783*(v**-2.0))\n    elif v < 16:\n        return -6.5 + (5.76960525*t) + (9.40575656*(v**-0.16)) + (0.22475541*(v**-1.0)) + (0.00683783*(v**-2.0))\n    elif v < 25:\n        return -5.0 + (5.06898293*t) + (8.74219135*(v**-0.16)) + (0.22475541*(v**-1.0)) + (0.00683783*(v**-2.0))\n    elif v < 40:\n        return -4.8 + (4.83054942*t) + (7.64380108*(v**-0.16)) + (0.22475541*(v**-1.0)) + (0.00683783*(v**-2.0))\n    else:\n        return -10.0 + (0.51093771*t) + (2.16366697*(v**-0.16)) + (0.22475541*(v**-1.0)) + (0.00683783*(v**-2.0))\n",
        "num_ids": 561
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    a = 13.12\n    b = 0.6215\n    c = 11.37\n    wind_chill = 35.74 + (0.6108 * t) - (35.75 * math.pow(v, 0.16)) + (0.4275 * t * math.pow(v, 0.16))\n    wind_chill = round(wind_chill)\n    return wind_chill\n",
        "num_ids": 117
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci=35.74+0.6215*t-35.75*math.pow(v,0.16)+0.4275*t*math.pow(v,0.16)\n    return round(wci)\n",
        "num_ids": 59
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    #Convert string to list of names\n    list_names = [name for name in sample_names]\n    #Loop through the list of names, add the length of the name to the total\n    total_length = 0\n    for name in list_names:\n        #If name starts with a lowercase letter, add the length to the total\n        if name[0].islower():\n            total_length += len(name)\n    return total_length\n",
        "num_ids": 106
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    lowercase_letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    count = 0\n    for i in sample_names:\n        if i[0] not in lowercase_letters:\n            count += len(i)\n    return count\n",
        "num_ids": 125
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Write your code here\n    \n    \n    # return sum([len(name) for name in sample_names if name[0].isupper()])\n    \n    return sum([len(name) for name in sample_names])\n",
        "num_ids": 56
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    import re\n    def sum_len_nam(nam):\n        sum = 0\n        for x in nam:\n            if not re.match(\"^[a-z]+\", x):\n                sum += len(x)\n        return sum\n    return sum(map(sum_len_nam, sample_names))\n",
        "num_ids": 76
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    import string\n    string.ascii_lowercase\n    return sum([len(name) for name in sample_names if name.startswith(tuple(string.ascii_lowercase))])\n",
        "num_ids": 51
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    for name in sample_names:\n        if name[0].islower():\n            sample_names.remove(name)\n    return len(sample_names)\n",
        "num_ids": 40
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    if sample_names == []:\n        return 0\n    else:\n        for i in sample_names:\n            if i[0].isupper():\n                sample_names.remove(i)\n        return sum(len(i) for i in sample_names)",
        "num_ids": 63
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(name) for name in sample_names if name[0].isupper() == False)\n",
        "num_ids": 28
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sampled_name = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sampled_name += len(name)\n    return sampled_name\n",
        "num_ids": 46
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if not name[0].islower()])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2001
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if items == None:\n        return\n    if len(items) == 1:\n        return items\n    \n    p1 = re.compile('[\\(\\)]')\n    items = re.sub(p1, '', items)\n    return items\n",
        "num_ids": 62
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    string = ''.join(items)\n    string = re.sub('\\([^()]+\\)', '', string)\n    return string\n",
        "num_ids": 35
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.replace(\" \", \"\")\n    items = re.sub('\\([^)]*\\)', '', items)\n    return items\ndef merge_two_strings(s1, s2):\n    '''\n    Write a function to merge two strings into a new string.\n    '''\n    return s1+s2\ndef string_to_float(items):\n    '''\n    Write a function to convert a string to a float.\n    '''\n    items = items.replace(\"%\", \"\")\n    items = items.replace(\"$\", \"\")\n    items = items.replace(\"\u00a3\", \"\")\n    items = items.replace(\"\u20b9\", \"\")\n    items = items.replace(\",\", \"\")\n    items = items.replace(\"\\n\", \"\")\n    items = items.replace(\" \", \"\")\n    items = items.replace(\"--\", \"-\")\n    return float(items)\ndef string_to_int(items):\n    '''\n    Write a function to convert a string to an integer.\n    '''\n    items = items.replace(\"%\", \"\")\n    items = items.replace(\"$\", \"\")\n    items = items.replace(\"\u00a3\", \"\")\n    items = items.replace(\"\u20b9\", \"\")\n    items = items.replace(\",\", \"\")\n    items = items.replace(\"\\n\", \"\")\n    items = items.replace(\" \", \"\")\n    items = items.replace(\"--\", \"-\")\n    return int(items)\ndef to_order_list(items):\n    '''\n    Write a function to convert a string into an order list.\n    '''\n    items = items.replace(\"/\", \" \")\n    items = items.replace(\"-\", \" \")\n    items = items.replace(\"*\", \" \")\n    items = items.replace(\"+\", \" \")\n    items = items.replace(\",\", \" \")\n    items = items.replace(\"\\n\", \"\")\n    items = items.replace(\" \", \"\")\n    return items\ndef to_expense_list(items):\n    '''\n    Write a function to convert a string into an expense list.\n    '''\n    items = items.replace(\"/\", \" \")\n    items = items.replace(\"-\", \" \")\n    items = items.replace(\"*\", \" \")\n    items = items.replace(\"+\", \" \")\n    items = items.replace(\",\", \" \")\n    items = items.replace(\"\\n\", \"\")\n    items = items.replace(\" \", \"\")\n    return items\ndef to_expense_list2(items):\n    '''\n    Write a function to convert a string into an expense list.\n    '''\n    items = items.replace(\"/\", \" \")\n    items = items.replace(\"-\", \" \")\n    items = items.replace(\"*\", \" \")\n    items = items.replace(\"+\", \" \")\n    items = items.replace(\",\", \" \")\n    items = items.replace(\"\\n\", \"\")\n    items = items.replace(\" \", \"\")\n    return items\ndef to_expense_list3(items):\n    '''\n    Write a function to convert a string into an expense list.\n    '''\n    items = items.replace(\"/\", \" \")\n    items = items.replace(\"-\", \" \")\n    items = items.replace(\"*\", \" \")\n    items = items.replace(\"+\", \" \")\n    items = items.replace(\",\", \" \")\n    items = items.replace(\"\\n\", \"\")\n    items = items.replace(\" \", \"\")\n    return items\ndef to_expense_list4(items):\n    '''\n    Write a function to convert a string into an expense list.\n    '''\n    items = items.replace(\"/\", \" \")\n    items = items.replace(\"-\", \" \")\n    items = items.replace(\"*\", \" \")\n    items = items.replace(\"+\", \" \")\n    items = items.replace(\",\", \" \")\n    items = items.replace(\"\\n\", \"\")\n    items = items.replace(\" \", \"\")\n    return items\ndef to_expense_list5(items):\n    '''\n    Write a function to convert a string into an expense list.\n    '''\n    items = items.replace(\"/\", \" \")\n    items = items.replace(\"-\", \" \")\n    items = items.replace(\"*\", \" \")\n    items = items.replace(\"+\", \" \")\n    items = items.replace(\",\", \" \")\n    items = items.replace(\"\\n\", \"\")\n    items = items.replace(\" \", \"\")\n    return items\ndef to_expense_list6(items):\n    '''\n    Write a function to convert a string into an expense list.\n    '''\n    items = items.replace(\"/\", \" \")\n    items = items.replace(\"-\", \" \")\n    items = items.replace(\"*\", \" \")\n    items = items.replace(\"+\", \" \")\n    items = items.replace(\",\", \" \")\n    items = items.replace(\"\\n\", \"\")\n    items = items.replace(\" \", \"\")\n    return items\ndef to_expense_list7(items):\n    '''\n    Write a function to convert a string into an expense list.\n    '''\n    items = items.replace(\"/\", \" \")\n    items = items.replace(\"-\", \" \")\n    items = items.replace(\"*\", \" \")\n    items = items.replace(\"+\", \" \")\n    items = items.replace(\",\", \" \")\n    items = items.replace(\"\\n\", \"\")\n    items = items.replace(\" \", \"\")\n    return items\ndef to_expense_list8(items):\n    '''\n    Write a function to convert a string into an expense list.\n    '''\n    items = items.replace(\"/\", \" \")\n    items = items.replace(\"-\", \" \")\n    items = items.replace(\"*\", \" \")\n    items = items.replace(\"+\", \" \")\n    items = items.replace(\",\", \" \")\n    items = items.replace(\"\\n\", \"\")\n    items = items.replace(\" \", \"\")\n    return items\ndef to_expense_list9(items):\n    '''\n    Write a function to convert a string into an expense list.\n    '''\n    items = items.replace(\"/\", \" \")\n    items = items.replace(\"-\", \" \")\n    items = items.replace(\"*\", \" \")\n    items = items.replace(\"+\", \" \")\n    items = items.replace(\",\", \" \")\n    items = items.replace(\"\\n\", \"\")\n    items = items.replace(\" \", \"\")\n    return items\ndef to_expense_list10(items):\n    '''\n    Write a function to convert a string into an expense list.\n    '''\n    items = items.replace(\"/\", \" \")\n    items = items.replace(\"-\", \" \")\n    items = items.replace(\"*\", \" \")\n    items = items.replace(\"+\", \" \")\n    items = items.replace(\",\", \" \")\n    items = items.replace(\"\\n\", \"\")\n    items = items.replace(\" \", \"\")\n    return items\ndef to_expense_list11(items):\n    '''\n    Write a function to convert a string into an expense list.\n    '''\n    items = items.replace(\"/\", \" \")\n    items = items.replace(\"-\", \" \")\n    items = items.replace(\"*\", \" \")\n    items = items.replace(\"+\", \" \")\n    items = items.replace(\",\", \" \")\n    items = items.replace(\"\\n\", \"\")\n    items = items.replace(\" \", \"\")\n    return items\ndef to_expense_list12(items):\n    '''\n    Write a function to convert a string into an expense list.\n    '''\n    items = items.replace(\"/\", \" \")\n    items = items.replace(\"-\", \" \")\n    items = items.replace(\"*\", \" \")\n    items = items.replace(\"+\", \" \")\n    items = items.replace(\",\", \" \")\n    items = items.replace(\"\\n\", \"\")\n    items = items.replace(\" \", \"\")\n    return items\ndef to_expense_list13(item",
        "num_ids": 105
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub(r'[\\(\\)]', '', items)\n    return items\ndef remove_comma(items):\n    '''\n    Write a function to remove commas and what is inbetween them from a string.\n    '''\n    items = items.replace(',', '')\n    return items\ndef remove_space(items):\n    '''\n    Write a function to remove the spaces and what is inbetween them from a string.\n    '''\n    items = items.replace(' ', '')\n    return items\ndef remove_hashtag(items):\n    '''\n    Write a function to remove the hashtag from a string.\n    '''\n    items = items.replace('#', '')\n    return items\ndef remove_new_line(items):\n    '''\n    Write a function to remove the new line from a string.\n    '''\n    items = items.replace('\\n', '')\n    return items\ndef remove_numbers(items):\n    '''\n    Write a function to remove all the numbers from a string.\n    '''\n    items = re.sub(r'[0-9]+', '', items)\n    return items\ndef remove_punctuation(items):\n    '''\n    Write a function to remove the punctuation from a string.\n    '''\n    items = items.replace(r'[.,!?-]', '', items)\n    return items\ndef remove_single_letters(items):\n    '''\n    Write a function to remove all the single letters from a string.\n    '''\n    items = re.sub(r'[a-zA-Z]', '', items)\n    return items\ndef remove_double_letters(items):\n    '''\n    Write a function to remove all the double letters from a string.\n    '''\n    items = re.sub(r'[a-zA-Z]{2,}', '', items)\n    return items\ndef remove_spaces_double_letters(items):\n    '''\n    Write a function to remove the double spaces and what is inbetween them from a string.\n    '''\n    items = re.sub(r'[a-zA-Z]{2,}', '', items)\n    return items\ndef remove_digits(items):\n    '''\n    Write a function to remove the digits from a string.\n    '''\n    items = re.sub(r'[0-9]+', '', items)\n    return items\ndef remove_alphabet(items):\n    '''\n    Write a function to remove the alphabet from a string.\n    '''\n    items = re.sub(r'[a-zA-Z]+', '', items)\n    return items\ndef remove_symbols(items):\n    '''\n    Write a function to remove the symbols from a string.\n    '''\n    items = re.sub(r'[.,!?-]', '', items)\n    return items\ndef remove_each_word_list(items):\n    '''\n    Write a function to remove the words from a string.\n    '''\n    items = items.split()\n    items =''.join(items)\n    return items\ndef remove_each_word(items):\n    '''\n    Write a function to remove the words from a string.\n    '''\n    items = items.split()\n    items =''.join(items)\n    return items\ndef remove_capitalized_words(items):\n    '''\n    Write a function to remove the capitalized words from a string.\n    '''\n    items = items.split()\n    items =''.join([x for x in items if x.islower()])\n    return items\ndef remove_small_words(items):\n    '''\n    Write a function to remove the small words from a string.\n    '''\n    items = items.split()\n    items =''.join([x for x in items if len(x) > 2])\n    return items\ndef remove_stop_words(items):\n    '''\n    Write a function to remove the stop words from a string.\n    '''\n    stop_words = set(stopwords.words('english'))\n    items = items.split()\n    items = [x for x in items if x not in stop_words]\n    items =''.join(items)\n    return items\ndef remove_non_alphanum(items):\n    '''\n    Write a function to remove the non-alphanumeric characters from a string.\n    '''\n    items = re.sub(r'[^a-zA-Z0-9]+', '', items)\n    return items\ndef remove_word_with_numbers(items):\n    '''\n    Write a function to remove the word with numbers from a string.\n    '''\n    items = items.split()\n    items = [x for x in items if not any(c.isdigit() for c in x)]\n    items =''.join(items)\n    return items\ndef remove_all_caps(items):\n    '''\n    Write a function to remove all the capitalized letters from a string.\n    '''\n    items = items.split()\n    items = [x.lower() for x in items]\n    items =''.join(items)\n    return items\ndef remove_empty_strings(items):\n    '''\n    Write a function to remove the empty strings from a string.\n    '''\n    items = items.split()\n    items = [x for x in items if x]\n    items =''.join(items)\n    return items\ndef remove_multiple_spaces(items):\n    '''\n    Write a function to remove the multiple spaces from a string.\n    '''\n    items = re.sub(r' +','', items)\n    return items\ndef remove_multiple_spaces_word(items):\n    '''\n    Write a function to remove the multiple spaces and word from a string.\n    '''\n    items = re.sub(r' +','', items)\n    items = items.split()\n    items =''.join(items)\n    return items\ndef remove_whitespaces_between_words(items):\n    '''\n    Write a function to remove the whitespaces between words from a string.\n    '''\n    items = re.sub(r'[^a-zA-Z0-9]+(?<=[a-zA-Z0-9])','', items)\n    return items\ndef remove_punctuation_between_words(items):\n    '''\n    Write a function to remove the punctuation between words from a string.\n    '''\n    items = re.sub(r'[.,!?-]+','', items)\n    return items\ndef remove_multiple_whitespaces(items):\n    '''\n    Write a function to remove the multiple whitespaces from a string.\n    '''\n    items = re.sub(r' +','', items)\n    return items\ndef remove_multiple_whitespaces_word(items):\n    '''\n    Write a function to remove the multiple whitespaces and word from a string.\n    '''\n    items = re.sub(r' +','', items)\n    items = items.split()\n    items =''.join(items)\n    return items\ndef remove_multiple_whitespaces_punctuation(items):\n    '''\n    Write a function to remove the multiple whitespaces and punctuation from a string.\n    '''\n    items = re.sub(r' +','', items)\n    items = re.sub(r'[.,!?-]+','', items)\n    return items\ndef remove_multiple_whitespaces_alphanum(items):\n    '''\n    Write a function to remove the multiple whitespaces and alphanum from a string.\n    '''\n    items = re.sub(r' +','', items)\n    items = re.sub(r'[^a-zA-Z0-9]','', items)\n    return items\ndef remove_multiple_whitespaces_alphanum_punctuation(items):\n    '''\n    Write a function to remove the multiple whitespaces, alphanum and punctuation from a string.\n    '''\n    items = re.sub(r' +','', items)\n    items = re.sub(r'[^a-zA-Z0-9.,!?-]','', items)\n    return items\ndef remove_multiple_whitespaces_word_punctuation(items):\n    '''",
        "num_ids": 1
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\([^()]+\\)', '', items)\n",
        "num_ids": 22
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for item in items:\n        new_items.append(item.strip('()'))\n    return new_items\n",
        "num_ids": 37
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # return re.sub(r\"\\([^\\(\\)]+\\)\", \"\", items)\n    if items == \"\": return items\n    start = 0\n    end = 0\n    count = 0\n    while items.find(\"(\", end)!= -1:\n        end = items.find(\"(\", end)\n        count += 1\n    start = end\n    end = start\n    while items.find(\")\", start)!= -1:\n        start = items.find(\")\", start)\n        count += 1\n    if items[start+1:end].isdigit() and count > 0:\n        return items[:start] + items[end+1:]\n    elif items[start+1:end].isdigit():\n        return items[:start] + items[end:]\n    else:\n        return items\n    \ndef number_join(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = remove_parenthesis(items)\n    if items.find(\",\")!= -1:\n        return items.replace(\",\", \"\")\n    else:\n        return items\n",
        "num_ids": 45
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    inb = re.compile(r'\\([^()]*\\)')\n    for i in range(0,len(items)):\n        if(inb.search(items[i])):\n            items[i] = inb.sub('',items[i])\n    return items\n",
        "num_ids": 71
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    paren_num = items.count('(')\n    if paren_num == 0:\n        return items\n    else:\n        paren_start = items.index('(')\n        paren_end = items.index(')')\n        return items[paren_start+1:paren_end]\n",
        "num_ids": 71
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\((.*?)\\)')\n    if items:\n        items = pattern.sub('', items)\n        items = re.sub(r'\\s+', '', items)\n        return items\n    else:\n        return ''\n",
        "num_ids": 65
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n / 2 + 1\n    else:\n        return n * (n + 1) / 2\n",
        "num_ids": 59
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n%2==0: return False\n    return is_square(n)\n",
        "num_ids": 22
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n_1 = (n-1) * (n-1)\n    n_2 = (n-2) * (n-2)\n    return n_1 + n_2\n",
        "num_ids": 46
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 3\n    else: \n        return n**2 - 1\n",
        "num_ids": 40
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # nonagonal(0) = 1, nonagonal(1) = 10, nonagonal(2) = 100, etc\n    # nonagonal(n) = nth + (n - 1) * nth / 2\n    # nonagonal(n) = nth * (n - 1) * (n - 2) / 6\n",
        "num_ids": 77
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    k = 1\n    while True:\n        a = 1\n        b = 1\n        while True:\n            a, b = b, a + b\n            if a == n:\n                return b\n            if a > n:\n                break\n",
        "num_ids": 59
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0: \n        return 0\n    if n == 1: \n        return 1\n    return 2 * n - 1\n",
        "num_ids": 34
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # To compute the nonagonal, we need the factorial of the total \n    # number of numbers in the nonagonal sequence\n    # n=2 -> 1, 2, 4, 6, 10, 15, 21, 28, 36,...\n    # n=3 -> 1, 3, 7, 15, 31, 63, 127, 255,...\n    # n=4 -> 1, 4, 8, 16, 32, 64, 128, 256,...\n    # n=5 -> 1, 5, 13, 30, 65, 130, 260, 385,...\n    # n=6 -> 1, 6, 15, 41, 85, 210, 495, 816,...\n    # n=7 -> 1, 7, 22, 56, 143, 448, 845, 1532,...\n    # n=8 -> 1, 8, 24, 72, 196, 672, 2564, 4248,...\n    # n=9 -> 1, 9, 25, 75, 225, 810, 2825, 4704,...\n    # n=10 -> 1, 10, 26, 86, 338, 1110, 4226, 7516,...\n    # n=11 -> 1, 11, 27, 97, 474, 1429, 7582, 11792,...\n    # n=12 -> 1, 12, 28, 108, 438, 1596, 7208, 13304,...\n    # n=13 -> 1, 13, 29, 111, 645, 1657, 8049, 13840,...\n    # n=14 -> 1, 14, 30, 126, 572, 1760, 8170, 13650,...\n    # n=15 -> 1, 15, 31, 127, 703, 1868, 8362, 14235,...\n    # n=16 -> 1, 16, 32, 128, 816, 2568, 9958, 14572,...\n    # n=17 -> 1, 17, 33, 129, 915, 2823, 10359, 14329,...\n    # n=18 -> 1, 18, 34, 130, 1021, 2929, 11287, 14506,...\n    # n=19 -> 1, 19, 35, 131, 1105, 3035, 12091, 14950,...\n    # n=20 -> 1, 20, 36, 132, 1111, 3141, 12384, 15127,...\n    # n=21 -> 1, 21, 37, 133, 1029, 3153, 12321, 15572,...\n    # n=22 -> 1, 22, 38, 134, 1125, 3165, 12492, 15933,...\n    # n=23 -> 1, 23, 39, 135, 1129, 3177, 12590, 15821,...\n    # n=24 -> 1, 24, 40, 136, 1117, 3193, 12688, 15793,...\n    # n=25 -> 1, 25, 41, 137, 1109, 3225, 12808, 15934,...\n    # n=26 -> 1, 26, 42, 138, 1115, 3241, 12804, 15822,...\n    # n=27 -> 1, 27, 43, 139, 1107, 3259, 12900, 15804,...\n    # n=28 -> 1, 28, 44, 140, 1103, 3277, 12812, 15823,...\n    # n=29 -> 1, 29, 45, 141, 1095, 3285, 12912, 15805,...\n    # n=30 -> 1, 30, 46, 142, 1105, 3303, 12896, 15824,...\n    # n=31 -> 1, 31, 47, 143, 1087, 3311, 12913, 15806,...\n    # n=32 -> 1, 32, 48, 144, 1079, 3319, 12914, 15825,...\n    # n=33 -> 1, 33, 49, 145, 1081, 3327, 12915, 15826,...\n    # n=34 -> 1, 34, 50, 146, 1073, 3335, 12916, 15827,...\n    # n=35 -> 1, 35, 51, 147, 1075, 3347, 12917, 15828,...\n    # n=36 -> 1, 36, 52, 148, 1067, 3359, 12918, 15829,...\n    # n=37 -> 1, 37, 53, 149, 1069, 3371, 12919, 15830,...\n    # n=38 -> 1, 38, 54, 150, 1071, 3383, 12920, 15831,...\n    # n=39 -> 1, 39, 55, 151, 1063, 3395, 12921, 15832,...\n    # n=40 -> 1, 40, 56, 152, 1065, 3407, 12922, 15833,...\n    # n=41 -> 1, 41, 57, 153, 1067, 3419, 12923, 15834,...\n    # n=42 -> 1, 42, 58, 154, 1069, 3421, 12924, 15835,...\n    # n=43 -> 1, 43, 59, 155, 1071, 3423, 12925, 15836,...\n    # n=44 -> 1, 44, 60, 156, 1063, 3425, 12926, 15837,...\n    # n=45 -> 1, 45, 61, 157, 1065, 3427, 12927, 15838,...\n    # n=46 -> 1, 46, 62, 158, 1067, 3429, 12928, 15839,...\n    # n=47 -> 1, 47, 63, 159, 1069, 3431, 12929, 15840,...\n    # n=48 -> 1, 48, 64, 160, 1071, 3433, 12930, 15841,...\n    # n=49 -> 1, 49, 65, 161, 1063, 3435, 12931, 15842,...\n    # n=50 -> 1, 50, 66, 162, 1065, 3437, 12932, 15843,...\n    # n=51 -> 1, 51, 67, 163, 1067, 3439, 12933, 15844,...\n    # n=52 -> 1, 52, 68, 164, 1069, 3441, 12934, 15845,...\n    # n=53 -> 1, 53, 69, 165, 1071, 3443, 12935, 15846,...\n    # n=54 -> 1, 54, 70, 166, 1063, 3455, 12936, 15847,...\n    # n=55 -> 1, 55, 71, 167, 1065, 3457, 12937, 15848,...\n    # n=56 -> 1, 56, 72, 168, 1067, 3459, 12938, 15849,...\n    # n=57 -> 1, 57, 73, 169, 1069, 3461, 12939, 15850,...\n    # n=58 -> 1, 58, 74, 170, 1071, 3463, 12940, 15851,...\n    # n=59 -> 1, 59, 75, 171, 1063, 3465, 12941, 15852,...\n    # n=60 -> 1, 60, 76, 172, 1065, 3467, 12942, 15853,...\n    # n=61 -> 1, 61, 77, 173, 1067, 3469, 12943, 15854,...\n    # n=62 -> 1, 62, 78, 174, 1069, 3471, 12944, 15855,...\n    # n=63 -> 1, 63, 79, 175, 1071, 3473, 12945, 15856,...\n    # n=64 -> 1, 64, 80, 176, 1063, 3475, 12946, 15857,...\n    # n=65 -> 1, 65, 81, 177, 1065, 3477, 12947, 15858,...\n    # n=66 -> 1, 66, 82, 178, 1067, 3479, 12948, 15859,...\n    # n=67 -> 1, 67, 83, 179, 1069, 3481, 12949, 15860,...\n    # n=68 -> 1, 68, 84, 180, 1071, 3483, 12900, 15861,...\n    # n=69 -> 1, 69, 85, 181, 1063, 3485, 12950, 15862,...\n    # n=70 -> 1, 70, 86, 182, 1065, 3487, 12951, 15863,...\n    # n=71 -> 1, 71, 87, 183, 1067, 3489, 12952, 15864,...\n    # n=72 -> 1, 72, 88, 184, 1069, 3491, 12953, 15865,...\n    # n=73 -> 1, 73, 89, 185, 107",
        "num_ids": 1946
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # 1, 3, 5,...\n    # -2, 0, 4, 6,...\n    # 4, -6, 0, 8,...\n    # 6, 8, 0, -12,...\n    return n > 4 and ((n+1) % 4) == 2\n",
        "num_ids": 64
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return ((n-1)*(n-2))//2 + (n-1)*n//2\n",
        "num_ids": 53
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text_ = text\n    text_ = text_.lower()\n    text_ = text_.strip()\n    text_ = re.sub('[^A-Za-z0-9]+','', text_)\n    text_ = text_.split(' ')\n    text_ = [i for i in text_ if i]\n    words_list = []\n    for i in text_:\n        if i!= '':\n            if i[0]!= 'z' and i[-1]!= 'z':\n                words_list.append(i)\n    words_list =''.join(words_list)\n    return words_list\n",
        "num_ids": 153
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    matches = re.finditer(r'[a-z]+[a-z]z', text)\n    for match in matches:\n        print match.start(), match.group()\n",
        "num_ids": 46
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(.*)\\sz',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_2(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_3(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and re.search('z(.*z)',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_4(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return False\n    else:\n        return True\ndef text_match_wordz_middle_5(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return False\n    else:\n        return True\ndef text_match_wordz_middle_6(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_7(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return False\n    else:\n        return True\ndef text_match_wordz_middle_8(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return False\n    else:\n        return True\ndef text_match_wordz_middle_9(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_10(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_11(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_12(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_13(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_14(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_15(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_16(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_17(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_18(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_19(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_20(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_21(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_22(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return True\n    else:\n        return False\ndef text_match_wordz_middle_23(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z(?=(.*z))',text) and not re.search('z(.*z)',text):\n        return True\n    else:\n        return False\ndef text_match_word",
        "num_ids": 51
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'(?<!\\w)([a-z]\\w*z)(?!\\w)')\n    if re.search(pattern, text):\n        print(\"Found match\")\n    else:\n        print(\"No match\")\n",
        "num_ids": 64
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    try:\n        word = text.split()[0]\n        result = not bool(re.search(r'z', word))\n    except:\n        result = False\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0] == 'z' or text[-1] == 'z':\n        return False\n    return True\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    m = re.search(r'(?<!^)(?<!$)z(?=[^a-zA-Z\\s])', text)\n    if m:\n        return m.group()\n    return None\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    m = re.search(r'(?<!^)(?<!$)z(?=[^a-zA-Z\\s])', text)\n    if m:\n        return m.group()\n    return None\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    m = re.search(r'(?<!^)(?<!$)z(?=[^a-zA-Z\\s])', text)\n    if m:\n        return m.group()\n    return None\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    m = re.search(r'(?<!^)(?<!$)z(?=[^a-zA-Z\\s])', text)\n    if m:\n        return m.group()\n    return None\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    m = re.search(r'(?<!^)(?<!$)z(?=[^a-zA-Z\\s])', text)\n    if m:\n        return m.group()\n    return None\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    m = re.search(r'(?<!^)(?<!$)z(?=[^a-zA-Z\\s])', text)\n    if m:\n        return m.group()\n    return None\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    m = re.search(r'(?<!^)(?<!$)z(?=[^a-zA-Z\\s])', text)\n    if m:\n        return m.group()\n    return None\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    m = re.search(r'(?<!^)(?<!$)z(?=[^a-zA-Z\\s])', text)\n    if m:\n        return m.group()\n    return None\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    m = re.search(r'(?<!^)(?<!$)z(?=[^a-zA-Z\\s])', text)\n    if m:\n        return m.group()\n    return None\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    m = re.search(r'(?<!^)(?<!$)z(?=[^a-zA-Z\\s])', text)\n    if m:\n        return m.group()\n    return None\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    m = re.search(r'(?<!^)(?<!$)z(?=[^a-zA-Z\\s])', text)\n    if m:\n        return m.group()\n    return None\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    m = re.search(r'(?<!^)(?<!$)z(?=[^a-zA-Z\\s])', text)\n    if m:\n        return m.group()\n    return None\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    m = re.search(r'(?<!^)(?<!$)z(?=[^a-zA-Z\\s])', text)\n    if m:\n        return m.group()\n    return None\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    m = re.search(r'(?<!^)(?<!$)z(?=[^a-zA-Z\\s])', text)\n    if m:\n        return m.group()\n    return None\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    m = re.search(r'(?<!^)(?<!$)z(?=[^a-zA-Z\\s])', text)\n    if m:\n        return m.group()\n    return None\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    m = re.search(r'(?<!^)(?<!$)z(?=[^a-zA-Z\\s])', text)\n    if m:\n        return m.group()\n    return None\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    m = re.search(r'(?<!^)(?<!$)z(?=[^a-zA-Z\\s])', text)\n    if m:\n        return m.group()\n    return None\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    m = re.search(r'(?<!^)(?<!$)z(?=[^a-zA-Z\\s])', text)\n    if m:\n        return m.group()\n    return None\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    m = re.search(r'(?<!^)(?<!$)z(?=[^a-zA-Z\\s])', text)\n    if m:\n        return m.group()\n    return None\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    m = re.search(r'(?<!^)(?<!$)z(?=[^a-zA-Z\\s])', text)\n    if m:\n        retur",
        "num_ids": 48
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return bool(re.search('z.*z', text))\n",
        "num_ids": 17
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    a = re.findall('z', text)\n    return len(a)\n",
        "num_ids": 22
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('[z]*[z]*[z]*',text):\n        print 'Yes'\n    else:\n        print 'No'\n",
        "num_ids": 40
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(r'z*[^z]*z', text):\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    #Base Case\n    if(k==0):\n        return []\n",
        "num_ids": 19
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k > len(input):\n        return input\n    else:\n        return input[len(input)-k:len(input)]\n",
        "num_ids": 34
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k >= len(input):\n        return input[::-1]\n    return input[:k] + input[k:][::-1]\n",
        "num_ids": 38
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[k::-1]\n",
        "num_ids": 12
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    count = 0\n    \n    output = [0]*k\n    \n    while count < k:\n        output[k-count-1] = input[count]\n        count += 1\n    \n    return output\n",
        "num_ids": 53
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    if k >= len(input) or k < 0:\n        return input\n    else:\n        rev_input = input[len(input)-k:len(input)]\n        rev_input.extend(input[0:len(input)-k])\n        return rev_input\n",
        "num_ids": 69
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:][::-1]\n",
        "num_ids": 24
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    a=input[0:k]\n    a.reverse()\n    b=input[k:]\n    a.extend(b)\n    return a\n",
        "num_ids": 39
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input=list(input)\n    input.reverse()\n    return input[:k]\n",
        "num_ids": 24
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k/2):\n        temp = input[i]\n        input[i] = input[k-i-1]\n        input[k-i-1] = temp\n    return input\n",
        "num_ids": 52
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + tuple(test_dict.values())\n    \n",
        "num_ids": 20
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = list(test_tup)\n    new_tup.append(test_dict)\n    return tuple(new_tup)\n",
        "num_ids": 39
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create an empty tuple and add items from dictionary to the tuple\n    # Pass the test tuple and the dictionary to the function\n    return tuple(test_tup) + tuple(test_dict.values())\n",
        "num_ids": 49
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        test_tup += tuple(test_dict.values())\n        return test_tup\n    else:\n        raise TypeError('The input is not a tuple')\n",
        "num_ids": 54
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup += test_dict,\n    return test_tup\n",
        "num_ids": 20
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    result = tuple(test_tup)\n    result = result + (test_dict,)\n    return result\n",
        "num_ids": 28
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup + tuple(test_dict.values()))\n",
        "num_ids": 21
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0]+1, test_tup[1], test_tup[2], test_dict)\n",
        "num_ids": 33
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup += (test_dict,)\n    return test_tup\n",
        "num_ids": 21
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0] + test_dict, test_tup[1])\n",
        "num_ids": 25
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    max_avg = 0.0\n    avg = 0.0\n    for i in range(len(cost)):\n        for j in range(len(cost)):\n            avg += (cost[i][j] * (len(cost) - j - 1))\n            avg -= (cost[i][j] * j)\n            avg -= (cost[i][j])\n            avg += cost[i][j]\n            avg /= len(cost) ** 2\n            if avg > max_avg:\n                max_avg = avg\n    return max_avg\n",
        "num_ids": 142
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows, cols = len(cost), len(cost[0])\n    dp = [[0]*(cols) for _ in range(rows)]\n    for r in range(rows):\n        for c in range(cols):\n            dp[r][c] = cost[r][c]\n            if r > 0 and c > 0:\n                dp[r][c] += min(dp[r-1][c], dp[r][c-1])\n            elif r > 0:\n                dp[r][c] += dp[r-1][c]\n            elif c > 0:\n                dp[r][c] += dp[r][c-1]\n    res = dp[rows-1][cols-1]\n    for r in range(rows-1, -1, -1):\n        for c in range(cols-1, -1, -1):\n            if r == rows-1 and c == cols-1:\n                continue\n            res = max(res, dp[r][c])\n    return res\n",
        "num_ids": 252
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows = len(cost)\n    cols = len(cost[0])\n",
        "num_ids": 21
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    visited = [ [False for j in range(n)] for i in range(n)]\n    \n    path = []\n    max_avg = 0\n    for i in range(n):\n        for j in range(n):\n            if visited[i][j] == False:\n                visited[i][j] = True\n                path.append([i,j])\n                curr_avg = findAverage(cost, visited, path)\n                if curr_avg > max_avg:\n                    max_avg = curr_avg\n                visited[i][j] = False\n                path.pop()\n    \n    return max_avg\n",
        "num_ids": 167
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    s = [[0]*(n+1) for i in range(n+1)]\n    for i in range(n):\n        for j in range(n):\n            s[i+1][j+1] = cost[i][j] + min(s[i][j+1], s[i+1][j], s[i][j])\n    return s[n][n]/(n*n)\n",
        "num_ids": 108
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    R, C = len(cost), len(cost[0])\n    print R, C\n    cost_d = [ [0]*(C+1) for _ in range(R+1) ]\n    # print cost_d\n    for i in range(R):\n        for j in range(C):\n            cost_d[i+1][j+1] = cost_d[i][j+1] + cost_d[i+1][j] - cost_d[i][j] + cost[i][j]\n    print cost_d\n    # the starting cell, index 1,1\n    dp = [ [0]*(C+1) for _ in range(R+1) ]\n    dp[1][1] = cost_d[1][1]\n    for i in range(2, R+1):\n        dp[i][1] = cost_d[i][1] + dp[i-1][1]\n    for j in range(2, C+1):\n        dp[1][j] = cost_d[1][j] + dp[1][j-1]\n    print dp\n    \n    max_avg = float('-inf')\n    for i in range(1, R+1):\n        for j in range(1, C+1):\n            dp[i][j] += dp[i][j-1] + dp[i-1][j] - dp[i-1][j-1]\n            max_avg = max(max_avg, dp[i][j])\n    return max_avg/float(R*C)\n",
        "num_ids": 385
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows = len(cost)\n    cols = len(cost[0])\n    dp = [[0 for _ in range(cols)] for _ in range(rows)]\n    for row in range(rows):\n        for col in range(cols):\n            if row==0 and col==0:\n                dp[row][col] = cost[row][col]\n            elif row==0:\n                dp[row][col] = cost[row][col] + dp[row][col-1]\n            elif col==0:\n                dp[row][col] = cost[row][col] + dp[row-1][col]\n            else:\n                dp[row][col] = cost[row][col] + max(dp[row-1][col], dp[row][col-1])\n    return dp[rows-1][cols-1]/float(cols*rows)\n",
        "num_ids": 215
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    # base case\n    if n == 0:\n        return 0\n",
        "num_ids": 26
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows, cols = len(cost), len(cost[0])\n    max_avg = 0\n    max_path = []\n",
        "num_ids": 34
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for j in range(n)] for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = cost[i][j] + dp[i][j-1]\n            elif j == 0:\n                dp[i][j] = cost[i][j] + dp[i-1][j]\n            else:\n                dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    return dp[n-1][n-1]\n",
        "num_ids": 193
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            print student\n",
        "num_ids": 32
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered = {}\n    for name in students:\n        height, weight = students[name]\n        if height > h and weight > w:\n            filtered[name] = (height, weight)\n    return filtered\n",
        "num_ids": 53
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered = {}\n    for student in students.keys():\n        if students[student][0] > h and students[student][1] > w:\n            filtered[student] = students[student]\n    return filtered\n",
        "num_ids": 54
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_students = {}\n    for student in students:\n        if students[student][0]>=h and students[student][1]>=w:\n            new_students[student]=students[student]\n    return new_students\n",
        "num_ids": 61
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for s in students.keys():\n        if students[s][0] > h and students[s][1] > w:\n            print s\n            \ndef filter_data_from_file(filename, h, w):\n    '''\n    The input is given as - a file name, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students = dict()\n    with open(filename, 'r') as f:\n        for line in f:\n            s = line.strip().split(',')\n            if s[0] not in students:\n                students[s[0]] = (float(s[1]), float(s[2]))\n    f.close()\n    return filter_data(students, h, w)\n    \ndef filter_data_from_file_2(filename, h, w):\n    '''\n    The input is given as - a file name, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students = dict()\n    with open(filename, 'r') as f:\n        for line in f:\n            s = line.strip().split(',')\n            if s[0] not in students:\n                students[s[0]] = (float(s[1]), float(s[2]))\n    f.close()\n    for s in students.keys():\n        if students[s][0] > h and students[s][1] > w:\n            print s\n            \ndef filter_data_from_file_3(filename, h, w):\n    '''\n    The input is given as - a file name, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students = dict()\n    with open(filename, 'r') as f:\n        for line in f:\n            s = line.strip().split(',')\n            if s[0] not in students:\n                students[s[0]] = (float(s[1]), float(s[2]))\n    f.close()\n    for s in students.keys():\n        if students[s][0] > h and students[s][1] > w:\n            print s\n            \ndef select_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to select students that have height and weight above the minimum.\n    '''\n    for s in students.keys():\n        if students[s][0] > h and students[s][1] > w:\n            print s\n",
        "num_ids": 36
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {student:val for student,val in students.items() if val[0]>h and val[1]>w}\n",
        "num_ids": 33
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    h,w = min(h,w), max(h,w)\n    return {name : (height,weight) for name,(height,weight) in students.items() if h<=height<=w}\n",
        "num_ids": 53
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for i in students:\n        if students[i][0] >= h and students[i][1] >= w:\n            result[i] = students[i]\n    return result\n",
        "num_ids": 50
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for s in students:\n        if students[s][0] >= h and students[s][1] >= w:\n            filtered_students[s] = students[s]\n    return filtered_students\n",
        "num_ids": 61
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    #Student_info = {'Harry': (1.85,37),'Berry': (1.79,39),'Tina': (1.79,45),'Akriti': (1.79,45),'Harsh': (1.79,39)}\n    \n    #return (key for key in Student_info.keys() if Student_info[key][0] >= h and Student_info[key][1] >= w)\n    \n    #return (key for key, value in Student_info.iteritems() if value[0] >= h and value[1] >= w)\n    \n    #return (key for key in Student_info.keys() if Student_info[key][0] >= h and Student_info[key][1] >= w)\n    \n    #return (key for key, value in Student_info.iteritems() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.iteritems() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.iteritems() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, value in Student_info.items() if value[0] >= h and value[1] >= w)\n    \n    #return ((key, value) for key, valu",
        "num_ids": 1972
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    nums1_val, nums2_val = list(set(nums1)), list(set(nums2))\n    nums1_val.sort()\n    nums2_val.sort()\n    print(nums1_val, nums2_val)\n    if len(nums1_val)!= len(nums2_val):\n        return 0\n",
        "num_ids": 92
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if (eq(nums1[i], nums2[i])):\n            count += 1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return sum(map(eq, nums1, nums2))\n",
        "num_ids": 19
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    a = []\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            a.append(i)\n    return len(a)\ndef compress(str):\n    '''\n    Write a function that takes an input string and compresses it using the following rules:\n    1. Use the first two characters of the string to represent the character, followed by \"2\"\n    2. If the second character is \"0\" or \"1\", use the second character instead\n    3. Repeat the process again, but if the second character is \"0\", append the \"2\" at the end of the string\n    4. If the second character is \"1\" or \"2\", append \"1\" at the end of the string\n    5. The new string should not have any trailing zeros.\n    '''\n    #when the second character is \"0\", \"1\", or \"2\"\n    str1 = \"\"\n    for i in range(len(str)):\n        if i < len(str)-1:\n            if str[i] == str[i+1] or str[i] == '0' or str[i] == '1' or str[i] == '2':\n                str1 += str[i]\n            else:\n                str1 += str[i]+str[i+1]\n        else:\n            if str[i] == str[i+1] or str[i] == '0' or str[i] == '1' or str[i] == '2':\n                str1 += str[i]\n            else:\n                str1 += str[i]+str[i+1]\n    return str1\ndef is_palindrome(str):\n    '''\n    Write a function that checks if a string is a palindrome or not.\n    A palindrome is a string that can be read the same from the beginning and the end (eg. \"racecar\", \"hannah\", \"doe\")\n    '''\n    str1 = \"\"\n    for i in range(len(str)):\n        if i < len(str)-1:\n            str1 += str[i]\n        else:\n            str1 += str[i]\n    if str1 == str:\n        return True\n    else:\n        return False\ndef only_diff_char(str):\n    '''\n    Write a function that returns the difference between the largest and smallest numbers in a string.\n    Inp: \"babccccddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd",
        "num_ids": 1446
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    total = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            total += 1\n    return total\ndef find_longest_substring(s):\n    '''\n    Find the longest substring of a string that is unique\n    '''\n    from collections import defaultdict\n    substrings = defaultdict(int)\n    start = 0\n    max_length = 0\n    for i in range(len(s)):\n        if s[i] in substrings:\n            while s[start]!= s[i]:\n                substrings[s[start]] -= 1\n                if substrings[s[start]] == 0:\n                    del substrings[s[start]]\n                start += 1\n            start += 1\n        else:\n            substrings[s[i]] = 1\n        max_length = max(max_length, i-start+1)\n    return max_length\ndef hash_function(value, table_size):\n    return hash(value) % table_size\ndef find_index(lst, item):\n    for i in range(len(lst)):\n        if lst[i] == item:\n            return i\n    return -1\ndef is_unique_chars(string):\n    '''\n    Find if a string has unique characters\n    '''\n    for i in range(len(string) - 1):\n        if string[i] == string[i+1]:\n            return False\n    return True\ndef unique_subtring(s):\n    '''\n    Find a substring that is unique\n    '''\n    length = len(s)\n    for i in range(length):\n        for j in range(i, length):\n            substring = s[i:j+1]\n            if is_unique_chars(substring) == True:\n                return substring\n    return None\ndef hash_function(value, table_size):\n    return hash(value) % table_size\ndef bit_vector(n):\n    '''\n    Find a 2-bit vector of the given length that is set to 1 at the position of n\n    '''\n    vec = [0] * 2\n    vec[n] = 1\n    return vec\ndef remove_nth_bit(value, n):\n    '''\n    Remove the nth bit from the value\n    '''\n    return value & ~(1 << n)\ndef nth_bit_to_flip(n):\n    '''\n    Return the position of the nth bit to be flipped\n    '''\n    return (n - 1) % 32\ndef get_bit(value, n):\n    '''\n    Get the nth bit from the value\n    '''\n    return (value >> n) & 1\ndef nth_bit_to_flip_position(n):\n    '''\n    Return the position of the nth bit to be flipped\n    '''\n    return (n - 1) % 32\ndef is_bit_set(value, n):\n    '''\n    Check if the nth bit is set in the value\n    '''\n    return get_bit(value, n) == 1\ndef nth_bit_to_flip_bit(n):\n    '''\n    Return the bit to be flipped at the nth bit position\n    '''\n    return 1 << n\ndef flip_bit(value, n):\n    '''\n    Flip the nth bit in the value\n    '''\n    return value ^ nth_bit_to_flip_bit(n)\ndef set_bit(value, n):\n    '''\n    Set the nth bit in the value\n    '''\n    return value | nth_bit_to_flip_bit(n)\ndef bit_count(value):\n    '''\n    Return the count of the bits set in the value\n    '''\n    return bin(value).count('1')\ndef nth_bit_to_flip_bit_in_list(n, lst):\n    '''\n    Return the bit to be flipped at the nth bit position in a list\n    '''\n    return nth_bit_to_flip_bit(n) in lst\ndef is_bit_set_in_list(value, n, lst):\n    '''\n    Check if the nth bit is set in the value in a list\n    '''\n    return get_bit(value, n) in lst\ndef nth_bit_to_flip_bit_in_list_position(n, lst):\n    '''\n    Return the position of the nth bit to be flipped in a list\n    '''\n    return nth_bit_to_flip_bit_in_list(n, lst)\ndef set_bit_in_list(value, n, lst):\n    '''\n    Set the nth bit in the value in a list\n    '''\n    return value | nth_bit_to_flip_bit_in_list(n, lst)\ndef flip_bit_in_list(value, n, lst):\n    '''\n    Flip the nth bit in the value in a list\n    '''\n    return value ^ nth_bit_to_flip_bit_in_list(n, lst)\ndef remove_bit_in_list(value, n, lst):\n    '''\n    Remove the nth bit in the value in a list\n    '''\n    return value & ~nth_bit_to_flip_bit_in_list(n, lst)\ndef zero_out_bit(value, n):\n    '''\n    Zero out the nth bit in the value\n    '''\n    return value & ~nth_bit_to_flip_bit(n)\ndef one_out_bit(value, n):\n    '''\n    One out the nth bit in the value\n    '''\n    return value | nth_bit_to_flip_bit(n)\ndef all_bits_one_out(value):\n    '''\n    Find if all the bits in the value are set to 1\n    '''\n    for i in range(32):\n        if get_bit(value, i) == 0:\n            return False\n    return True\ndef remove_bit(value, n):\n    '''\n    Remove the nth bit in the value\n    '''\n    return value & ~nth_bit_to_flip_bit(n)\ndef bit_count_in_list(value, n, lst):\n    '''\n    Return the count of the bits in the value in a list\n    '''\n    return bin(value).count('1') & nth_bit_to_flip_bit_in_list(n, lst)\ndef set_bit_in_list(value, n, lst):\n    '''\n    Set the nth bit in the value in a list\n    '''\n    return value | nth_bit_to_flip_bit_in_list(n, lst)\ndef get_bit_in_list(value, n, lst):\n    '''\n    Get the nth bit in the value in a list\n    '''\n    return get_bit(value, n) in lst\ndef remove_bit_in_list(value, n, lst):\n    '''\n    Remove the nth bit in the value in a list\n    '''\n    return value & ~nth_bit_to_flip_bit_in_list(n, lst)\ndef is_bit_set_in_list(value, n, lst):\n    '''\n    Check if the nth bit is set in the value in a list\n    '''\n    return get_bit(value, n) in lst\ndef nth_bit_to_flip_bit_in_list_position_in_list(n, lst):\n    '''\n    Return the position of the nth bit to be flipped in a list\n    '''\n    return nth_bit_to_flip_bit_in_list(n, lst)\ndef set_bit_in_list_position(value, n, lst):\n    '''\n    Set the nth bit in the value in a list\n    '''\n    return value | nth_bit_to_flip_bit_in_list_position(n, lst)\ndef flip_bi",
        "num_ids": 34
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_pair_counter = 0\n    for num1, num2 in zip(nums1, nums2):\n        if num1 == num2:\n            same_pair_counter += 1\n    return same_pair_counter\n",
        "num_ids": 56
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in xrange(len(nums1)):\n        if (nums1[i] == nums2[i]):\n            count += 1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 0\n    total = 0\n    for i in range(0, power+1):\n        total += i\n    return total\n",
        "num_ids": 40
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 0:\n        return 0\n    elif base == 1:\n        return power\n    elif power == 0:\n        return 1\n    elif power == 1:\n        return base\n    elif power < 0:\n        return 1\n    else:\n        return (base * power_base_sum(base, power - 1)) + (base * power_base_sum(base, power - 1))\n",
        "num_ids": 99
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for n in str(base**power):\n        total += int(n)\n    return total\n",
        "num_ids": 30
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    number = 0\n    for i in range(1, power + 1):\n        number += int(str(base) * i)\n    return number\n",
        "num_ids": 37
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    assert type(base) == int\n    assert type(power) == int\n    assert power >= 0\n",
        "num_ids": 26
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    def power_base_sum(base, power):\n        '''\n        Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n        '''\n        if power == 0:\n            return 0\n        else:\n            return base + power_base_sum(base, power - 1)\n",
        "num_ids": 34
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power < 0:\n        return -1\n    if power == 0:\n        return 1\n    sum = 0\n    for i in range(power + 1):\n        if i == 0:\n            sum += 1\n        else:\n            sum += (base ** i) % 10\n    return sum\n",
        "num_ids": 72
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(str(base) * (i + 1)) for i in range(power)])\n",
        "num_ids": 27
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(int(x)**int(y) for x,y in zip(str(base), str(power)))\n",
        "num_ids": 31
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(list(str(base**power)))\n    \nprint(power_base_sum(2, 3))",
        "num_ids": 29
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    x=re.findall(r'\\\"(.*?)\\\"',text1)\n    x1=x[0].replace(\" \",\"\")\n    return x1\n",
        "num_ids": 41
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    cnt = 0\n    r1 = re.findall(r'\\\"[^\\\"]*\\\"', text1)\n    print \"length of r1\",len(r1)\n    for item in r1:\n        text2 = item[1:-1]\n        print text2\n        text3 = text2.replace(\"\\'\", \"\")\n        print text3\n        cnt += 1\n    print \"length of text3\",len(text3)\n    print \"total count:\",cnt\n    return text3\n",
        "num_ids": 123
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if type(text1) is not str:\n        raise TypeError('Parameter text1 is not a string')\n    if '\"' not in text1:\n        raise ValueError('Parameter text1 does not contain quotation mark')\n    if '\"' not in text1[::-1]:\n        raise ValueError('Parameter text1 does not contain double quotation mark')\n    if '\"' not in text1[-1]:\n        raise ValueError('Parameter text1 does not contain double quotation mark')\n    #lowercase the string\n    text1 = text1.lower()\n    #add a newline before the first quotation mark\n    text1 = '\\n' + text1.split('\"', 1)[0]\n    #add a newline before the last quotation mark\n    text1 = text1.split('\"', 1)[1]\n    #remove the newline before the first quotation mark\n    text1 = re.sub('\\n', '', text1)\n    #remove the newline before the last quotation mark\n    text1 = re.sub('\\n', '', text1)\n    return text1\n",
        "num_ids": 253
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    output_list = []\n    inside_quotation = False\n    for i in text1:\n        if i == '\"':\n            if not inside_quotation:\n                inside_quotation = True\n                continue\n            else:\n                inside_quotation = False\n                continue\n        if inside_quotation:\n            continue\n        output_list.append(i)\n    return output_list\n",
        "num_ids": 95
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result = re.findall(r'\"([^\"]*)\"',text1)\n    return result\n",
        "num_ids": 27
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text2=text1.replace('\\n',' ').replace('\\t',' ').replace('\\r',' ')\n    text3=text2.replace('\"','').replace(\"'\",'')\n    text4=text3.replace('  ',' ').replace('  ',' ')\n    text5=text4.split(' ')\n    return text5\ndef get_duration(string1):\n    '''\n    Write a function that takes a string of the format: \"HH:MM:SS.FF\" as an argument and returns the duration in seconds as an integer.\n    \n    The expression can also be an expression with a decimal, e.g. \"01:23.12\".\n    '''\n    h=string1.split(':')[0]\n    m=string1.split(':')[1]\n    s=string1.split(':')[2].split('.')[0]\n    f=string1.split(':')[2].split('.')[1]\n    return int(h)*60*60 + int(m)*60 + int(s) + int(f)/1000\ndef get_ip_from_txt(file_name):\n    '''\n    Write a function that takes a file as input and returns a list of all the IP addresses in the file.\n    '''\n    file_name=open(file_name,'r')\n    text=file_name.read()\n    text1=text.replace('\\n',' ').replace('\\t',' ').replace('\\r',' ')\n    text2=text1.replace('\"','').replace(\"'\",'')\n    text3=text2.replace('  ',' ').replace('  ',' ')\n    text4=text3.split(' ')\n    return text4\ndef get_ip_from_txt1(file_name):\n    '''\n    Write a function that takes a file as input and returns a list of all the IP addresses in the file.\n    '''\n    file_name=open(file_name,'r')\n    text=file_name.read()\n    text1=text.replace('\\n',' ').replace('\\t',' ').replace('\\r',' ')\n    text2=text1.replace('\"','').replace(\"'\",'')\n    text3=text2.replace('  ',' ').replace('  ',' ')\n    text4=text3.split(' ')\n    return text4\ndef get_ip_from_txt2(file_name):\n    '''\n    Write a function that takes a file as input and returns a list of all the IP addresses in the file.\n    '''\n    file_name=open(file_name,'r')\n    text=file_name.read()\n    text1=text.replace('\\n',' ').replace('\\t',' ').replace('\\r',' ')\n    text2=text1.replace('\"','').replace(\"'\",'')\n    text3=text2.replace('  ',' ').replace('  ',' ')\n    text4=text3.split(' ')\n    return text4\ndef get_ip_from_txt3(file_name):\n    '''\n    Write a function that takes a file as input and returns a list of all the IP addresses in the file.\n    '''\n    file_name=open(file_name,'r')\n    text=file_name.read()\n    text1=text.replace('\\n',' ').replace('\\t',' ').replace('\\r',' ')\n    text2=text1.replace('\"','').replace(\"'\",'')\n    text3=text2.replace('  ',' ').replace('  ',' ')\n    text4=text3.split(' ')\n    return text4\ndef get_ip_from_txt4(file_name):\n    '''\n    Write a function that takes a file as input and returns a list of all the IP addresses in the file.\n    '''\n    file_name=open(file_name,'r')\n    text=file_name.read()\n    text1=text.replace('\\n',' ').replace('\\t',' ').replace('\\r',' ')\n    text2=text1.replace('\"','').replace(\"'\",'')\n    text3=text2.replace('  ',' ').replace('  ',' ')\n    text4=text3.split(' ')\n    return text4\ndef get_ip_from_txt5(file_name):\n    '''\n    Write a function that takes a file as input and returns a list of all the IP addresses in the file.\n    '''\n    file_name=open(file_name,'r')\n    text=file_name.read()\n    text1=text.replace('\\n',' ').replace('\\t',' ').replace('\\r',' ')\n    text2=text1.replace('\"','').replace(\"'\",'')\n    text3=text2.replace('  ',' ').replace('  ',' ')\n    text4=text3.split(' ')\n    return text4\ndef get_ip_from_txt6(file_name):\n    '''\n    Write a function that takes a file as input and returns a list of all the IP addresses in the file.\n    '''\n    file_name=open(file_name,'r')\n    text=file_name.read()\n    text1=text.replace('\\n',' ').replace('\\t',' ').replace('\\r',' ')\n    text2=text1.replace('\"','').replace(\"'\",'')\n    text3=text2.replace('  ',' ').replace('  ',' ')\n    text4=text3.split(' ')\n    return text4\ndef get_ip_from_txt7(file_name):\n    '''\n    Write a function that takes a file as input and returns a list of all the IP addresses in the file.\n    '''\n    file_name=open(file_name,'r')\n    text=file_name.read()\n    text1=text.replace('\\n',' ').replace('\\t',' ').replace('\\r',' ')\n    text2=text1.replace('\"','').replace(\"'\",'')\n    text3=text2.replace('  ',' ').replace('  ',' ')\n    text4=text3.split(' ')\n    return text4\ndef get_ip_from_txt8(file_name):\n    '''\n    Write a function that takes a file as input and returns a list of all the IP addresses in the file.\n    '''\n    file_name=open(file_name,'r')\n    text=file_name.read()\n    text1=text.replace('\\n',' ').replace('\\t',' ').replace('\\r',' ')\n    text2=text1.replace('\"','').replace(\"'\",'')\n    text3=text2.replace('  ',' ').replace('  ',' ')\n    text4=text3.split(' ')\n    return text4\ndef get_ip_from_txt9(file_name):\n    '''\n    Write a function that takes a file as input and returns a list of all the IP addresses in the file.\n    '''\n    file_name=open(file_name,'r')\n    text=file_name.read()\n    text1=text.replace('\\n',' ').replace('\\t',' ').replace('\\r',' ')\n    text2=text1.replace('\"','').replace(\"'\",'')\n    text3=text2.replace('  ',' ').replace('  ',' ')\n    text4=text3.split(' ')\n    return text4\ndef get_ip_from_txt10(file_name):\n    '''\n    Write a function that takes a file as input and returns a list of all the IP addresses in the file.\n    '''\n    file_name=open(file_name,'r')\n    text=file_name.read()\n    text1=text.replace('\\n',' ').replace('\\t',' ').replace('\\r',' ')\n    text2=text1.replace('\"','').replace(\"'\",'')\n    text3=text2.replace('  ',' ').replace('  ',' ')\n    text4=text3.split(' ')\n    return text4\ndef get_ip_from_txt11(file_name):\n    '''\n    Write a function that takes a file as input and returns a list of al",
        "num_ids": 18
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    l=len(text1)\n    l2=len(text1)-1\n    q=[]\n    count=0\n    for i in range(l):\n        if text1[i]==\"\\\"\":\n            count=1-count\n        if count==0:\n            if text1[i]==\" \":\n                q.append(text1[i:i+1])\n    return q\ndef extract_quotation_2(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    l=len(text1)\n    l2=len(text1)-1\n    q=[]\n    count=0\n    for i in range(l):\n        if text1[i]==\"\\\"\":\n            count=1-count\n        if count==0:\n            if text1[i]==\" \":\n                q.append(text1[i:i+1])\n    return q\ndef split_string(text1):\n    '''\n    Write a function to split the string at the space character\n    '''\n    l=len(text1)\n    l2=len(text1)-1\n    q=[]\n    count=0\n    for i in range(l):\n        if text1[i]==\" \":\n            q.append(text1[i:i+1])\n    return q\ndef extract_email(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    l=len(text1)\n    l2=len(text1)-1\n    q=[]\n    count=0\n    for i in range(l):\n        if text1[i]==\"@\":\n            count=1-count\n        if count==0:\n            if text1[i]==\" \":\n                q.append(text1[i:i+1])\n    return q\ndef extract_email_2(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    l=len(text1)\n    l2=len(text1)-1\n    q=[]\n    count=0\n    for i in range(l):\n        if text1[i]==\"@\":\n            count=1-count\n        if count==0:\n            if text1[i]==\" \":\n                q.append(text1[i:i+1])\n    return q\ndef extract_email_3(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    l=len(text1)\n    l2=len(text1)-1\n    q=[]\n    count=0\n    for i in range(l):\n        if text1[i]==\"@\":\n            count=1-count\n        if count==0:\n            if text1[i]==\" \":\n                q.append(text1[i:i+1])\n    return q\ndef extract_email_4(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    l=len(text1)\n    l2=len(text1)-1\n    q=[]\n    count=0\n    for i in range(l):\n        if text1[i]==\"@\":\n            count=1-count\n        if count==0:\n            if text1[i]==\" \":\n                q.append(text1[i:i+1])\n    return q\ndef extract_email_5(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    l=len(text1)\n    l2=len(text1)-1\n    q=[]\n    count=0\n    for i in range(l):\n        if text1[i]==\"@\":\n            count=1-count\n        if count==0:\n            if text1[i]==\" \":\n                q.append(text1[i:i+1])\n    return q\ndef extract_email_6(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    l=len(text1)\n    l2=len(text1)-1\n    q=[]\n    count=0\n    for i in range(l):\n        if text1[i]==\"@\":\n            count=1-count\n        if count==0:\n            if text1[i]==\" \":\n                q.append(text1[i:i+1])\n    return q\ndef extract_email_7(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    l=len(text1)\n    l2=len(text1)-1\n    q=[]\n    count=0\n    for i in range(l):\n        if text1[i]==\"@\":\n            count=1-count\n        if count==0:\n            if text1[i]==\" \":\n                q.append(text1[i:i+1])\n    return q\ndef extract_email_8(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    l=len(text1)\n    l2=len(text1)-1\n    q=[]\n    count=0\n    for i in range(l):\n        if text1[i]==\"@\":\n            count=1-count\n        if count==0:\n            if text1[i]==\" \":\n                q.append(text1[i:i+1])\n    return q\ndef extract_email_9(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    l=len(text1)\n    l2=len(text1)-1\n    q=[]\n    count=0\n    for i in range(l):\n        if text1[i]==\"@\":\n            count=1-count\n        if count==0:\n            if text1[i]==\" \":\n                q.append(text1[i:i+1])\n    return q\ndef extract_email_10(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    l=len(text1)\n    l2=len(text1)-1\n    q=[]\n    count=0\n    for i in range(l):\n        if text1[i]==\"@\":\n            count=1-count\n        if count==0:\n            if text1[i]==\" \":\n                q.append(text1[i:i+1])\n    return q\ndef extract_email_11(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    l=len(text1)\n    l2=len(text1)-1\n    q=[]\n    count=0\n    for i in range(l):\n        if text1[i]==\"@\":\n            count=1-count\n        if count==0:\n            if text1[i]==\" \":\n                q.append(text1[i:i+1])\n    return q\ndef extract_email_12(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    l=len(text1)\n    l2=len(text1)-1\n    q=[]\n    count=0\n    for i in range(l):\n        if text1[i]==\"@\":\n            count=1-count\n        if count==0:\n            if text1[i]==\" \":\n                q.append(text1[i:i+1])\n    return q\ndef extract_email_13(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    l=len(text1)\n    l2=len(text1)-1\n    q=[]\n    count=0\n    for i in range(l):\n        if text1[i]==",
        "num_ids": 49
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text2=re.findall('(\\\"[^\\\"]*\\\"|\\'[^\\']*\\')', text1)\n    res=[]\n    for i in range(len(text2)):\n        res.append(text2[i].strip(\"\\\"\").strip(\"'\"))\n    return res\n",
        "num_ids": 74
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('\\\".*?\\\"',text1)\ndef extract_email_address(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('\\S+@\\S+',text1)\ndef extract_url(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+',text1)\ndef extract_hashtag(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('#\\w+',text1)\ndef extract_number(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('[+-]?\\d+[\\.]?\\d*',text1)\ndef extract_punctuation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('[^\\s\\w]',text1)\ndef extract_all_others(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('[^\\s\\w\\#\\$\\%]',text1)\ndef extract_all_alphanumeric(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('\\w',text1)\ndef extract_all_alphanumeric_and_space(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('\\w+',text1)\ndef extract_all_alphanumeric_and_space_with_hyphen(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('\\w+',text1)\ndef extract_all_alphanumeric_and_space_with_hyphen_or_digit(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('\\w+',text1)\ndef extract_all_alphanumeric_and_space_with_digit(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('\\w+',text1)\ndef extract_all_alphanumeric_and_space_with_digit_and_space(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('\\w+',text1)\ndef extract_all_alphanumeric_and_space_with_digit_and_space_with_hyphen(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('\\w+',text1)\ndef extract_all_alphanumeric_and_space_with_digit_and_space_with_hyphen_or_digit(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('\\w+',text1)\ndef extract_all_alphanumeric_and_space_with_digit_and_space_with_hyphen_or_digit_and_space(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('\\w+',text1)\ndef extract_all_alphanumeric_and_space_with_hyphen_and_space_and_digit(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('\\w+',text1)\ndef extract_all_alphanumeric_and_space_with_hyphen_and_space_and_digit_and_space(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('\\w+',text1)\ndef extract_all_alphanumeric_and_space_with_hyphen_and_space_and_digit_and_space_with_hyphen(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('\\w+',text1)\ndef extract_all_alphanumeric_and_space_with_hyphen_and_space_and_digit_and_space_with_hyphen_or_digit(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('\\w+',text1)\ndef extract_all_alphanumeric_and_space_with_hyphen_and_space_and_digit_and_space_with_hyphen_or_digit_and_space(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('\\w+',text1)\ndef extract_all_alphanumeric_and_space_with_hyphen_and_space_and_digit_and_space_with_hyphen_or_digit_and_space_with_digit(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('\\w+',text1)\ndef extract_all_alphanumeric_and_space_with_hyphen_and_space_and_digit_and_space_with_hyphen_or_digit_and_space_with_digit_and_space(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('\\w+',text1)\ndef extract_all_alphanumeric_and_space_with_hyphen_and_space_and_digit_and_space_with_hyphen_or_digit_and_space_with_digit_and_space_with_hyphen(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('\\w+',text1)\ndef extract_all_alphanumeric_and_space_with_hyphen_and_space_and_digit_and_space_with_hyphen_or_digit_and_space_with_digit_and_space_with_hyphen_and_space(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('\\w+',text1)\ndef extract_all_alphanumeric_and_space_with_hyphen_and_space_and_digit_and_space_with_hyphen_or_digit_and_space_with_digit_and_space_with_hyphen_and_space_and_digit(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('\\w+',text1)\ndef extract_all_alphanumeric_and_space_with_hyphen_and_space_and_digit_and_space_with_hyphen_or_digit_and_space_with_digit_and_space_with_hyphen_and_space_and_digit_and_space(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n",
        "num_ids": 20
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1=text1.strip()\n    text2=re.findall('[\\\".\\']+',text1)\n    #print(text2)\n    text3=[]\n    for ele in text2:\n        if ele[0]==\"\\\"\" and ele[len(ele)-1]==\"\\\"\":\n            text3.append(ele[1:len(ele)-1])\n        else:\n            text3.append(ele)\n    #print(text3)\n    return text3\n",
        "num_ids": 121
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Add your code here\n    return tuple(a * b for a, b in zip(test_tup, test_tup[1:]))\n",
        "num_ids": 37
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # E.g.\n    # multiply_elements((1,2,3,4)) = (1,2,3,4)\n    # multiply_elements((1,2,3,4,5)) = (1,4,9,16,25)\n    # multiply_elements((1,2,3,4,5,6,7)) = (1,4,12,28,125,126,127)\n    # multiply_elements((1,2,3,4,5,6,7,8,9)) = (1,4,12,28,125,126,127,256,894)\n    # multiply_elements((1,2,3,4,5,6,7,8,9,10)) = (1,4,12,28,125,126,127,256,894,1000)\n    # multiply_elements((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)) = (1,4,12,28,125,126,127,256,894,1000,1152,2288,3536,4608,5880,7876)\n    # multiply_elements((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)) = (1,4,12,28,125,126,127,256,894,1000,1152,2288,3536,4608,5880,7876,11040,17576,24064)\n    # multiply_elements((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25)) = (1,4,12,28,125,126,127,256,894,1000,1152,2288,3536,4608,5880,7876,11040,17576,24064,48480,92768,18360,27104,36096,45280,54752,73776,84560,99792,121408,193584,260880,334800,407520,470120,557040,654480,738960,845360,997920,1214160,1935720,260870,3348000,4075200,4701200,5570400,6544800,738960,845360,997920,1214160,1935720,260870,3348000,4075200,4701200,5570400,6544800,738960,845360,997920,1214160)\n",
        "num_ids": 644
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    elements_t = len(test_tup)\n    test_tup_1 = list(test_tup)\n    test_tup_1 = list(map(lambda x: x*2,test_tup_1))\n    test_tup_2 = tuple(test_tup_1)\n    return test_tup_2\n",
        "num_ids": 86
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = []\n    for i in range(len(test_tup) - 1):\n        new_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(new_tup)\n    \ndef tuple_and_list(test_tup):\n    '''\n    Write a function that takes as input a tuple and returns a list of all the elements of the tuple.\n    '''\n    new_list = []\n    for i in test_tup:\n        new_list.append(i)\n    return new_list\n    \ndef compute_average(test_tup):\n    '''\n    Write a function that takes as input a tuple and returns the average of all the elements of the tuple.\n    '''\n    new_tup = 0\n    for i in test_tup:\n        new_tup += i\n    new_tup /= len(test_tup)\n    return new_tup\n    \ndef tup_add(test_tup, test_tup2):\n    '''\n    Write a function that takes as input two tuples and returns a tuple that is the element-wise sum of the input tuples.\n    '''\n    new_tup = []\n    for i in range(len(test_tup)):\n        new_tup.append(test_tup[i] + test_tup2[i])\n    return tuple(new_tup)\n    \ndef tup_subtract(test_tup, test_tup2):\n    '''\n    Write a function that takes as input two tuples and returns a tuple that is the element-wise difference of the input tuples.\n    '''\n    new_tup = []\n    for i in range(len(test_tup)):\n        new_tup.append(test_tup[i] - test_tup2[i])\n    return tuple(new_tup)\n    \ndef index_to_tuple(test_tup, index):\n    '''\n    Write a function that takes as input a tuple and an index (a number) and returns a tuple whose ith element is the same as the index-th element of the input tuple.\n    '''\n    return test_tup[index]\n    \ndef tuple_to_index(test_tup, index):\n    '''\n    Write a function that takes as input a tuple and an index (a number) and returns the index-th element of the input tuple.\n    '''\n    return index_to_tuple(test_tup, index)\n    \ndef remove_element(test_tup, value):\n    '''\n    Write a function that takes as input a tuple and a value (an element) and returns a tuple whose ith element is the same as the ith element of the input tuple.\n    '''\n    new_tup = []\n    for i in range(len(test_tup)):\n        if test_tup[i]!= value:\n            new_tup.append(test_tup[i])\n    return tuple(new_tup)\n    \ndef tuple_to_str(test_tup):\n    '''\n    Write a function that takes as input a tuple and returns a tuple whose ith element is the ith element of the input tuple.\n    '''\n    new_tup = []\n    for i in test_tup:\n        new_tup.append(str(i))\n    return tuple(new_tup)\n    \ndef get_max(test_tup):\n    '''\n    Write a function that takes as input a tuple and returns the maximum value of the tuple.\n    '''\n    return max(test_tup)\n    \ndef tuple_with_max(test_tup):\n    '''\n    Write a function that takes as input a tuple and returns a tuple whose ith element is the same as the ith element of the input tuple and whose the maximum value is the ith element.\n    '''\n    new_tup = []\n    for i in range(len(test_tup)):\n        new_tup.append(test_tup[i])\n    new_tup.sort()\n    return tuple(new_tup)\n    \ndef tuple_with_max_but_one(test_tup):\n    '''\n    Write a function that takes as input a tuple and returns a tuple whose ith element is the same as the ith element of the input tuple and whose the maximum value is the ith element unless the ith element is the same as the maximum element in the tuple.\n    '''\n    new_tup = []\n    for i in range(len(test_tup)):\n        if test_tup[i]!= max(test_tup):\n            new_tup.append(test_tup[i])\n    return tuple(new_tup)\n    \ndef get_index(test_tup, value):\n    '''\n    Write a function that takes as input a tuple and a value (an element) and returns a tuple whose ith element is the same as the ith element of the input tuple and whose the ith element is the index of the value element.\n    '''\n    new_tup = []\n    for i in range(len(test_tup)):\n        if test_tup[i] == value:\n            new_tup.append(i)\n    return tuple(new_tup)\n    \ndef get_count(test_tup, value):\n    '''\n    Write a function that takes as input a tuple and a value (an element) and returns the number of times the value element appears in the tuple.\n    '''\n    return test_tup.count(value)\n    \ndef get_indices(test_tup, value):\n    '''\n    Write a function that takes as input a tuple and a value (an element) and returns a tuple whose ith element is the index of the first occurrence of the value element in the tuple.\n    '''\n    new_tup = []\n    for i in range(len(test_tup)):\n        if test_tup[i] == value:\n            new_tup.append(i)\n    return tuple(new_tup)\n    \ndef get_length(test_tup):\n    '''\n    Write a function that takes as input a tuple and returns the length of the tuple.\n    '''\n    return len(test_tup)\n    \ndef get_elements_and_indices(test_tup):\n    '''\n    Write a function that takes as input a tuple and returns a tuple where the first element is the list of all the elements of the tuple and the second element is the list of their indices.\n    '''\n    new_tup = []\n    for i in range(len(test_tup)):\n        new_tup.append(test_tup[i])\n        new_tup.append(i)\n    return tuple(new_tup)\n    \ndef first_five_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple and returns a tuple of the first five elements of the tuple.\n    '''\n    return test_tup[:5]\n    \ndef last_five_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple and returns a tuple of the last five elements of the tuple.\n    '''\n    return test_tup[-5:]\n    \ndef middle_five_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple and returns a tuple of the middle five elements of the tuple.\n    '''\n    return test_tup[len(test_tup) // 2 - 2:len(test_tup) // 2 + 3]\n    \ndef get_slice(test_tup, start, end):\n    '''\n    Write a function that takes as input a tuple and two integers (start and end) and returns a tuple whose ith element is the ith element of the tuple.\n    '''\n    return test_tup[start:end]\n    \ndef count_elements(test_tup, value):\n    '''\n    Write a function that takes as input a tuple and a value (an element) and returns the number of times the value element appears in the tuple",
        "num_ids": 32
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if type(test_tup)!= tuple:\n        return None\n    if len(test_tup) == 1:\n        return test_tup\n    else:\n        return (test_tup[0] * test_tup[1],) + multiply_elements(test_tup[1:])\n",
        "num_ids": 77
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup)\n    \n    def multiply(a,b):\n        return a*b\n    \n    return tuple([multiply(a,b) for a,b in zip(test_tup,test_tup[1:])])\n    \n    \ndef multiply_elements2(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup)\n    \n    def multiply(a,b):\n        return a*b\n    \n    return tuple(map(multiply,test_tup,test_tup[1:]))\n",
        "num_ids": 56
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(test_tup[i]*test_tup[i+1] for i in range(len(test_tup)-1))\n",
        "num_ids": 38
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(t_i*t_j for t_i, t_j in zip(test_tup[:-1], test_tup[1:]))\n",
        "num_ids": 41
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    def multiply_elements(test_tup):\n        new_tup = ()\n        for i in range(len(test_tup) - 1):\n            new_tup = new_tup + (test_tup[i],)\n        #print new_tup\n        return new_tup\n    #return multiply_elements((1,2,3,4,5))\n    return multiply_elements(test_tup)\n",
        "num_ids": 108
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    answer = ()\n    for i in range(len(test_tup)-1):\n        answer += (test_tup[i]*test_tup[i+1],)\n    return answer\n",
        "num_ids": 50
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    total = []\n    for i in range(len(lst1)):\n        total.append(lst1[i] + lst2[i])\n    return total\n    \n    \n    \ndef reverse_list(lst):\n    '''\n    Write a function that takes as input a list and returns a new list, which is the reverse of the original.\n    '''\n    rev = []\n    for i in range(len(lst)):\n        rev.append(lst[len(lst)-i-1])\n    return rev\n    \n    \n",
        "num_ids": 46
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst3 = []\n    for i in range(len(lst1)):\n        lst3.append(lst1[i] + lst2[i])\n    return lst3\n",
        "num_ids": 50
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]\n",
        "num_ids": 24
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    assert len(lst1) == len(lst2)\n    return [x+y for x,y in zip(lst1,lst2)]\n",
        "num_ids": 40
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [(lst1[i]+lst2[i]) for i in range(len(lst1))]\n",
        "num_ids": 30
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]\n",
        "num_ids": 24
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)==len(lst2):\n        return [a+b for a,b in zip(lst1,lst2)]\n    else:\n        return 'Error: Two list must have same length'\ndef max_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)==len(lst2):\n        return [a+b for a,b in zip(lst1,lst2)]\n    else:\n        return 'Error: Two list must have same length'\ndef min_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)==len(lst2):\n        return [a+b for a,b in zip(lst1,lst2)]\n    else:\n        return 'Error: Two list must have same length'\ndef mean_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)==len(lst2):\n        return [a+b for a,b in zip(lst1,lst2)]\n    else:\n        return 'Error: Two list must have same length'\ndef var_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)==len(lst2):\n        mean=mean_list(lst1,lst2)\n        return [a**2+b**2-2*mean[i]*a[i]+2*mean[i]**2 for i,a in enumerate(lst1)]\n    else:\n        return 'Error: Two list must have same length'\ndef std_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)==len(lst2):\n        mean=mean_list(lst1,lst2)\n        return [a**2+b**2-2*mean[i]*a[i]+2*mean[i]**2 for i,a in enumerate(lst1)]\n    else:\n        return 'Error: Two list must have same length'\ndef std_mean_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)==len(lst2):\n        mean=mean_list(lst1,lst2)\n        return [a*b for a,b in zip(lst1,lst2)]\n    else:\n        return 'Error: Two list must have same length'\ndef tuple_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)==len(lst2):\n        return zip(lst1,lst2)\n    else:\n        return 'Error: Two list must have same length'\ndef diff_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)==len(lst2):\n        return [a-b for a,b in zip(lst1,lst2)]\n    else:\n        return 'Error: Two list must have same length'\ndef multi_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1*b_1,...,a_n*b_n].\n    '''\n    if len(lst1)==len(lst2):\n        return [a*b for a,b in zip(lst1,lst2)]\n    else:\n        return 'Error: Two list must have same length'\ndef sum_multi_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1*b_1,...,a_n*b_n].\n    '''\n    if len(lst1)==len(lst2):\n        return [a+b for a,b in zip(lst1,lst2)]\n    else:\n        return 'Error: Two list must have same length'\ndef pro_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1/b_1,...,a_n/b_n].\n    '''\n    if len(lst1)==len(lst2):\n        return [a/b for a,b in zip(lst1,lst2)]\n    else:\n        return 'Error: Two list must have same length'\ndef prod_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1*b_1,...,a_n*b_n].\n    '''\n    if len(lst1)==len(lst2):\n        return [a*b for a,b in zip(lst1,lst2)]\n    else:\n        return 'Error: Two list must have same length'\ndef add_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)==len(lst2):\n        return [a+b for a,b in zip(lst1,lst2)]\n    else:\n        return 'Error: Two list must have same length'\ndef max_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)==len(lst2):\n        return [a+b for a,b in zip(lst1,lst2)]\n    else:\n        return 'Error: Two list must have same length'\ndef min_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,..",
        "num_ids": 43
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Write your code here\n    new_list = []\n    for i in range(len(lst1)):\n        new_list.append(lst1[i]+lst2[i])\n    return new_list\n",
        "num_ids": 56
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]\n",
        "num_ids": 24
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [(lst1[i]+lst2[i]) for i in range(0,len(lst1))]\n",
        "num_ids": 32
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    #Turns the list into a set of unique items\n    seen = set()\n    seen_add = seen.add\n    seen_twice = set( x for x in nums if x in seen or seen_add(x) )\n    return list(seen_twice)\n",
        "num_ids": 67
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums_set = set()\n    for num in nums:\n        if num in nums_set:\n            nums_set.remove(num)\n        else:\n            nums_set.add(num)\n    return list(nums_set)\n",
        "num_ids": 65
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if not nums:\n        return\n    i = 0\n    for j in range(len(nums)):\n        if i!= j:\n            if nums[i] == nums[j]:\n                del nums[j]\n            else:\n                i += 1\n    return nums\n",
        "num_ids": 74
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(v)[0] for k, v in groupby(nums)]\n",
        "num_ids": 23
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return sorted([list(g) for k,g in groupby(nums)])\n",
        "num_ids": 23
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for k, g in groupby(nums):\n        yield [len(list(g)), int(k)]\n",
        "num_ids": 30
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [v for n, g in groupby(nums) for v in (n, len(list(g))) if v!= n]\n",
        "num_ids": 36
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    d = {}\n    for i in nums:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    res = []\n    for key, value in d.items():\n        if value > 1:\n            res.append(key)\n    return res\n    ",
        "num_ids": 78
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    s = list(sorted(nums))\n    groups = [(k, len(list(g))) for k, g in groupby(s)]\n    a = [g[0] for g in groups if g[1] > 1]\n    return a\n",
        "num_ids": 62
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # 1st Approach\n    # - Compare the consecutive duplicates and remove them.\n    # - Does not give the time complexity of O(n)\n    # - Works only with single element duplicates (not a pair)\n    # - Not suitable for lists of duplicate elements\n    if len(nums) <= 1:\n        return nums\n    index = 1\n    while index < len(nums):\n        if nums[index] == nums[index-1]:\n            nums.pop(index)\n        index += 1\n    return nums\n",
        "num_ids": 129
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def area(a,b):\n        return math.pi*(a*a+b*b)\n    def area2(a,b):\n        return math.pi*a*b\n    def area3(a,b):\n        return math.pi*a*a\n    def area4(a,b):\n        return math.pi*a*b\n    def area5(a,b):\n        return math.pi*a*a*b\n    \n    def volume(r,h):\n        return math.pi*r*r*h\n    \n    l = 2*area(r,h)\n    l1 = area2(r,h)\n    l2 = area3(r,h)\n    l3 = area4(r,h)\n    l4 = area5(r,h)\n    return l,l1,l2,l3,l4\n    \ndef lateralsurface_sphere(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r and the height h.\n    '''\n    def area(a,b):\n        return math.pi*(a*a+b*b)\n    def area2(a,b):\n        return math.pi*a*b\n    def area3(a,b):\n        return math.pi*a*a\n    def area4(a,b):\n        return math.pi*a*b\n    def area5(a,b):\n        return math.pi*a*a*b\n    \n    l = 4*area(r,h)\n    l1 = area2(r,h)\n    l2 = area3(r,h)\n    l3 = area4(r,h)\n    l4 = area5(r,h)\n    return l,l1,l2,l3,l4\n    \ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    def area(a,b):\n        return math.pi*(a*a+b*b)\n    def area2(a,b):\n        return math.pi*a*b\n    def area3(a,b):\n        return math.pi*a*a\n    def area4(a,b):\n        return math.pi*a*b\n    def area5(a,b):\n        return math.pi*a*a*b\n    \n    l = 2*area(r,h)\n    l1 = area2(r,h)\n    l2 = area3(r,h)\n    l3 = area4(r,h)\n    l4 = area5(r,h)\n    return l,l1,l2,l3,l4\n    \ndef lateral_surface_cube(s):\n    '''\n    Write a function to find the lateral surface area of a cube given side length s.\n    '''\n    def area(a,b,c):\n        return a*b*c\n    def area2(a,b):\n        return a*b\n    def area3(a):\n        return a*a\n    def area4(a):\n        return a*a*a\n    \n    l = area(s,s,s)\n    l1 = area2(s,s)\n    l2 = area3(s)\n    l3 = area4(s)\n    return l,l1,l2,l3\n    \ndef lateral_surface_rectangle(l,w):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and width w.\n    '''\n    def area(a,b,c):\n        return a*b\n    def area2(a,b):\n        return a*b\n    def area3(a):\n        return a*a\n    def area4(a):\n        return a*a*a\n    \n    l = area(l,w,w)\n    l1 = area2(l,w)\n    l2 = area3(w)\n    l3 = area4(w)\n    return l,l1,l2,l3\n    \ndef lateral_surface_triangle(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a triangle given the lengths of the sides a,b and c.\n    '''\n    def area(a,b,c):\n        s = (a+b+c)/2\n        return math.sqrt(s*(s-a)*(s-b)*(s-c))\n    def area2(a,b,c):\n        return area(a,b,c)\n    def area3(a,b,c):\n        return area(a,b,c)\n    def area4(a,b,c):\n        return area(a,b,c)\n    def area5(a,b,c):\n        return area(a,b,c)\n    \n    l = area2(a,b,c)\n    l1 = area3(a,b,c)\n    l2 = area4(a,b,c)\n    l3 = area5(a,b,c)\n    return l,l1,l2,l3\n    \ndef lateral_surface_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given the lengths of the bases a,b and height h.\n    '''\n    def area(a,b,h):\n        return h*(a+b)\n    def area2(a,b,h):\n        return h*a*b\n    def area3(a,b,h):\n        return h*a*a\n    def area4(a,b,h):\n        return h*a*b\n    \n    l = area(a,b,h)\n    l1 = area2(a,b,h)\n    l2 = area3(a,b,h)\n    l3 = area4(a,b,h)\n    return l,l1,l2,l3\n    \ndef lateral_surface_trapezoid_squares(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a square (trapezoid) given the lengths of the bases a,b and height h.\n    '''\n    def area(a,b,h):\n        return h*(a+b)\n    def area2(a,b,h):\n        return h*a*b\n    def area3(a,b,h):\n        return h*a*a\n    def area4(a,b,h):\n        return h*a*b\n    \n    l = area2(a,b,h)\n    l1 = area3(a,b,h)\n    l2 = area4(a,b,h)\n    return l,l1,l2\n    \ndef lateral_surface_circular_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a circular cylinder given radius r and height h.\n    '''\n    def area(a,b,c):\n        return a*b*c\n    def area2(a,b,c):\n        return a*b\n    def area3(a,b,c):\n        return a*a\n    def area4(a,b,c):\n        return a*b\n    def area5(a,b,c):\n        return a*a*b\n    \n    l = 2*area(r,h,r)\n    l1 = area2(r,h,r)\n    l2 = area3(r,h,r)\n    l3 = area4(r,h,r)\n    l4 = area5(r,h,r)\n    return l,l1,l2,l3,l4\n    \ndef lateral_surface_circular_cube(r,h):\n    '''\n    Write a function to find the lateral surface area of a circular cube given radius r and height h.\n    '''\n    def area(a,b,c):\n        return a*b*c\n    def area2(a,b,c):\n        return a*b\n    def area3(a,b,c):\n        return a*a\n    def area4(a,b,c)",
        "num_ids": 68
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    S=math.pi*r*h/3+math.pi*r**2/4\n    return S\n",
        "num_ids": 29
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = (1.0/3.0) * (math.pi * (r**2) + math.pi * (r**2) * (h))\n    return area\ndef frontwall_cone(r,h):\n    '''\n    Write a function to find the frontal surface area of a cone given radius r and the height h.\n    '''\n    area = (1.0/3.0) * (math.pi * (r**2))\n    return area\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    area = (2.0/3.0) * (math.pi * (r**2) * h)\n    return area\ndef frontwall_cylinder(r,h):\n    '''\n    Write a function to find the frontal surface area of a cylinder given radius r and the height h.\n    '''\n    area = (2.0/3.0) * (math.pi * (r**2))\n    return area\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    area = 4 * math.pi * (r**2)\n    return area\ndef frontwall_sphere(r):\n    '''\n    Write a function to find the frontal surface area of a sphere given radius r.\n    '''\n    area = 4 * math.pi * (r**2)\n    return area\ndef lateralsurface_torus(r,h):\n    '''\n    Write a function to find the lateral surface area of a torus given radius r and the height h.\n    '''\n    area = (2.0/3.0) * math.pi * (r**2) * (r**2)\n    return area\ndef frontwall_torus(r,h):\n    '''\n    Write a function to find the frontal surface area of a torus given radius r and the height h.\n    '''\n    area = (2.0/3.0) * math.pi * (r**2) * (r**2)\n    return area\ndef upwall_cone(r,h):\n    '''\n    Write a function to find the upwall surface area of a cone given radius r and the height h.\n    '''\n    area = (1.0/3.0) * (math.pi * (r**2) * h)\n    return area\ndef upwall_cylinder(r,h):\n    '''\n    Write a function to find the upwall surface area of a cylinder given radius r and the height h.\n    '''\n    area = (1.0/3.0) * (math.pi * (r**2) * h)\n    return area\ndef upwall_sphere(r):\n    '''\n    Write a function to find the upwall surface area of a sphere given radius r.\n    '''\n    area = (1.0/3.0) * (4 * math.pi * (r**2))\n    return area\ndef upwall_torus(r,h):\n    '''\n    Write a function to find the upwall surface area of a torus given radius r and the height h.\n    '''\n    area = (1.0/3.0) * (math.pi * (r**2) * (r**2) * h)\n    return area\ndef overall_surface(l_cone,f_cone,l_cylinder,f_cylinder,l_sphere,f_sphere,l_torus,f_torus,h_cone,h_cylinder,h_sphere,h_torus):\n    '''\n    Write a function to find the overall surface area of a structure given the lateral surface area, frontal surface area, lateral surface area of a cylinder, frontal surface area of a cylinder, lateral surface area of a sphere, frontal surface area of a sphere, lateral surface area of a torus, frontal surface area of a torus, height of a cone, height of a cylinder, height of a sphere, and height of a torus.\n    '''\n    l_area = l_cone + l_cylinder + l_sphere\n    f_area = f_cone + f_cylinder + f_sphere + f_torus\n    l_volume = (1.0/3.0) * l_area * h_cone\n    f_volume = (1.0/3.0) * f_area * h_cylinder\n    s_volume = (1.0/3.0) * l_area * h_sphere\n    t_volume = (1.0/3.0) * f_area * h_torus\n    return (l_volume + f_volume + s_volume + t_volume)\ndef cross_section_cone(l_cone,f_cone,l_cylinder,f_cylinder,l_sphere,f_sphere,l_torus,f_torus,h_cone,h_cylinder,h_sphere,h_torus):\n    '''\n    Write a function to find the cross sectional area of a structure given the lateral surface area, frontal surface area, lateral surface area of a cylinder, frontal surface area of a cylinder, lateral surface area of a sphere, frontal surface area of a sphere, lateral surface area of a torus, frontal surface area of a torus, height of a cone, height of a cylinder, height of a sphere, and height of a torus.\n    '''\n    l_area = l_cone + l_cylinder + l_sphere\n    f_area = f_cone + f_cylinder + f_sphere + f_torus\n    l_area_cone = (1.0/3.0) * l_area * h_cone\n    f_area_cone = (1.0/3.0) * f_area * h_cylinder\n    l_area_cylinder = (1.0/3.0) * l_area * h_cylinder\n    f_area_cylinder = (1.0/3.0) * f_area * h_sphere\n    l_area_sphere = (1.0/3.0) * l_area * h_sphere\n    f_area_sphere = (1.0/3.0) * f_area * h_torus\n    return (l_area_cone + f_area_cone + l_area_cylinder + f_area_cylinder + l_area_sphere + f_area_sphere)\ndef lateral_surface(l_cone,f_cone,l_cylinder,f_cylinder,l_sphere,f_sphere,l_torus,f_torus,h_cone,h_cylinder,h_sphere,h_torus):\n    '''\n    Write a function to find the lateral surface area of a structure given the lateral surface area, frontal surface area, lateral surface area of a cylinder, frontal surface area of a cylinder, lateral surface area of a sphere, frontal surface area of a sphere, lateral surface area of a torus, frontal surface area of a torus, height of a cone, height of a cylinder, height of a sphere, and height of a torus.\n    '''\n    l_area = l_cone + l_cylinder + l_sphere\n    f_area = f_cone + f_cylinder + f_sphere + f_torus\n    l_area_cone = (1.0/3.0) * l_area * h_cone\n    f_area_cone = (1.0/3.0) * f_area * h_cylinder\n    l_area_cylinder = (1.0/3.0) * l_area * h_cylinder\n    f_area_cylinder = (1.0/3.0) * f_area * h_sphere\n    l_area_sphere = (1.0/3.0) * l_area * h_sphere\n    f_area_sphere = (1.0/3.0) * f_area * h_torus\n    return (l_area_cone + f_area_cone + l_area_cylinder + f_area_cylinder + l_area_sphere + f_area_sphere)\ndef frontal_surface(l_cone,f_cone,l_cylinder,f_cylinder,l_sphere,f_sphere,l_torus,f_torus,h_cone,",
        "num_ids": 295
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 3.14*r**2*h\n",
        "num_ids": 14
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    try:\n        s = math.pi * ((r**2) + ((h**2)/3))\n    except ValueError:\n        return 0\n    return s\n",
        "num_ids": 41
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 1/3*math.pi*r*r*h\n",
        "num_ids": 18
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    print(\"Convexity of a Cone:\")\n    print(\"Area of a Cone = 2*pi*r*h + 2*pi*r^2\")\n    print(\"Surface of a Cone = pi*r^2 + 2*pi*r*h\")\n    print(\"Area of a Conical surface = 2*pi*r*(r+h)\")\n    print(\"Area of the Cone = pi*r^2\")\n    return (math.pi*r**2) + (2*math.pi*r*h)\n    \ndef lateralsurface_ellipse(a,b):\n    '''\n    Write a function to find the lateral surface area of an ellipse given the lengths a and b.\n    '''\n    print(\"Convexity of a Ellipse:\")\n    print(\"Area of an Ellipse = pi*a*b\")\n    print(\"Surface area of an Ellipse = 2*pi*a*b\")\n    return (math.pi*a*b)\n",
        "num_ids": 67
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 3.14159*(r*r)*h/3\ndef alcove_area(r,h):\n    '''\n    Write a function to find the alcove area of a cone given radius r and height h.\n    '''\n    return 2*math.pi*r*r*(r+h)\ndef alcove_volume(r,h):\n    '''\n    Write a function to find the alcove volume of a cone given radius r and height h.\n    '''\n    return math.pi*r*r*h/3\ndef fluid_in_cylinder(v,r,h,m):\n    '''\n    Write a function to find the volume of fluid inside a cylinder of radius r, height h and mass m if the mass is \n    distributed evenly across the volume.\n    '''\n    return v*(r*r*h/(3*m))\ndef fluid_in_sphere(v,r,m):\n    '''\n    Write a function to find the volume of fluid inside a sphere of radius r and mass m if the mass is \n    distributed evenly across the volume.\n    '''\n    return v*(4/3*math.pi*r*r*m/v)\ndef mass_in_sphere(v,r,m):\n    '''\n    Write a function to find the mass of fluid inside a sphere of radius r and mass m if the mass is \n    distributed evenly across the volume.\n    '''\n    return m*v/(4/3*math.pi*r*r)\ndef mass_in_cylinder(v,r,h,m):\n    '''\n    Write a function to find the mass of fluid inside a cylinder of radius r, height h and mass m if the mass is \n    distributed evenly across the volume.\n    '''\n    return m*v*(r*r*h/(3*m))\ndef vol_to_mass(v,r,h,m):\n    '''\n    Write a function to find the mass of fluid inside a cylinder of radius r, height h and mass m if the mass is \n    distributed evenly across the volume.\n    '''\n    return m*v*(r*r*h/(3*m))\ndef vol_to_mass2(v,r,h,m):\n    '''\n    Write a function to find the mass of fluid inside a cylinder of radius r, height h and mass m if the mass is \n    distributed evenly across the volume.\n    '''\n    return m*v/(r*r*h)\ndef vol_to_mass3(v,r,m):\n    '''\n    Write a function to find the mass of fluid inside a cylinder of radius r and mass m if the mass is \n    distributed evenly across the volume.\n    '''\n    return m*v/(r*r)\ndef mass_to_vol(m,r,h,m):\n    '''\n    Write a function to find the volume of fluid inside a cylinder of radius r, height h and mass m if the mass is \n    distributed evenly across the volume.\n    '''\n    return m*v*(r*r*h/(3*m))\ndef mass_to_vol2(m,r,h,m):\n    '''\n    Write a function to find the volume of fluid inside a cylinder of radius r, height h and mass m if the mass is \n    distributed evenly across the volume.\n    '''\n    return m*v*(r*r*h/(3*m))\ndef mass_to_vol3(m,r,m):\n    '''\n    Write a function to find the volume of fluid inside a cylinder of radius r and mass m if the mass is \n    distributed evenly across the volume.\n    '''\n    return m*v*(r*r)\ndef area_to_vol(a,r,h,m):\n    '''\n    Write a function to find the volume of fluid inside a cylinder of radius r, height h and mass m if the mass is \n    distributed evenly across the volume.\n    '''\n    return m*v*(r*r*h/(3*m))\ndef area_to_vol2(a,r,h,m):\n    '''\n    Write a function to find the volume of fluid inside a cylinder of radius r, height h and mass m if the mass is \n    distributed evenly across the volume.\n    '''\n    return m*v*(r*r*h/(3*m))\ndef area_to_vol3(a,r,m):\n    '''\n    Write a function to find the volume of fluid inside a cylinder of radius r and mass m if the mass is \n    distributed evenly across the volume.\n    '''\n    return m*v*(r*r)\ndef area_to_mass(a,r,h,m):\n    '''\n    Write a function to find the mass of fluid inside a cylinder of radius r, height h and mass m if the mass is \n    distributed evenly across the volume.\n    '''\n    return m*v*(r*r*h/(3*m))\ndef area_to_mass2(a,r,h,m):\n    '''\n    Write a function to find the mass of fluid inside a cylinder of radius r, height h and mass m if the mass is \n    distributed evenly across the volume.\n    '''\n    return m*v*(r*r*h/(3*m))\ndef area_to_mass3(a,r,m):\n    '''\n    Write a function to find the mass of fluid inside a cylinder of radius r and mass m if the mass is \n    distributed evenly across the volume.\n    '''\n    return m*v*(r*r)\ndef area_to_mass4(a,r,m):\n    '''\n    Write a function to find the mass of fluid inside a cylinder of radius r and mass m if the mass is \n    distributed evenly across the volume.\n    '''\n    return m*v*(r*r)\ndef mass_to_area(m,r,h,m):\n    '''\n    Write a function to find the area of fluid inside a cylinder of radius r, height h and mass m if the mass is \n    distributed evenly across the volume.\n    '''\n    return m*v*(r*r*h/(3*m))\ndef mass_to_area2(m,r,h,m):\n    '''\n    Write a function to find the area of fluid inside a cylinder of radius r, height h and mass m if the mass is \n    distributed evenly across the volume.\n    '''\n    return m*v*(r*r*h/(3*m))\ndef mass_to_area3(m,r,m):\n    '''\n    Write a function to find the area of fluid inside a cylinder of radius r and mass m if the mass is \n    distributed evenly across the volume.\n    '''\n    return m*v*(r*r)\ndef mass_to_area4(m,r,m):\n    '''\n    Write a function to find the area of fluid inside a cylinder of radius r and mass m if the mass is \n    distributed evenly across the volume.\n    '''\n    return m*v*(r*r)\ndef vol_to_area(v,r,h,m):\n    '''\n    Write a function to find the area of fluid inside a cylinder of radius r, height h and mass m if the mass is \n    distributed evenly across the volume.\n    '''\n    return m*v*(r*r*h/(3*m))\ndef vol_to_area2(v,r,h,m):\n    '''\n    Write a function to find the area of fluid inside a cylinder of radius r, height h and mass m if the mass is \n    distributed evenly across the volume.\n    '''\n    return m*v*(r*r*h/(3*m))\ndef vol_to_area3(v,r,m):\n    '''\n    Write a function to find the area of fluid inside a cylinder of radius r and mass m if the mass is \n    distributed evenly across the volume.\n    '''\n    return m*v*(r*r)\ndef vol_to_area4(v,r,m):\n    '''\n    Write a function to find the area of fluid inside a cylinder of radius r and mass m if the mass is \n    distributed evenly across the volume.\n    '''",
        "num_ids": 1
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (3.1416 * r * h)/2\n",
        "num_ids": 16
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 + math.pi * r*math.sqrt(h**2/math.pi)\n",
        "num_ids": 32
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub('[ ]|[,]|[.]',':',text)\n",
        "num_ids": 23
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile('[^\\s,\\.\\:]+')\n    text = re.sub(pattern, ':', text)\n    return text\n",
        "num_ids": 40
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r' ', ':', text)\n    text = re.sub(r',', ':', text)\n    text = re.sub(r'\\.', ':', text)\n    return text\n",
        "num_ids": 56
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'([.\\s])', ':', text)\n    return text\n",
        "num_ids": 27
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ',':')\n    text = text.replace(',',':')\n    text = text.replace('.',':')\n    return text\n",
        "num_ids": 42
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    \n    new_text = text.replace(' ',':').replace(',',':').replace('.',':')\n    return new_text\n    \ndef test_replace_specialchar():\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n    assert replace_specialchar('Hi there, I am nath. How are you today?') == 'Hi there:I am nath:How are you today?'\n",
        "num_ids": 2008
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(' ', ':', text)\n    text = re.sub(',', ':', text)\n    text = re.sub('\\.|\\?', '?', text)\n    return text\n",
        "num_ids": 53
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub('[ ]',':',text)\n    text = re.sub('[,]',':',text)\n    text = re.sub('[.]',':',text)\n    return text\n",
        "num_ids": 52
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace('.',':')\n    text = text.replace(',',' : ')\n    text = text.replace(' ',': ')\n    return text\n",
        "num_ids": 44
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    replace_dict = {\n        \" \" : \"\",\n        \",\" : \"\",\n        \".\" : \"\",\n    }\n",
        "num_ids": 32
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    N = len(A)\n    low = 0\n    high = N-1\n    \n    while low <= high:\n        mid = (low+high)/2\n        if A[mid] < x:\n            low = mid+1\n        elif A[mid] > x:\n            high = mid-1\n        else:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                high = mid-1\n",
        "num_ids": 112
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    first_occurrence = -1\n    l = 0\n    r = len(A) - 1\n    while l <= r:\n        mid = (l + r) // 2\n        if x == A[mid]:\n            first_occurrence = mid\n            r = mid - 1\n        elif x < A[mid]:\n            r = mid - 1\n        else:\n            l = mid + 1\n",
        "num_ids": 96
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n",
        "num_ids": 17
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) / 2\n        if x < A[mid]:\n            right = mid - 1\n        elif x > A[mid]:\n            left = mid + 1\n        else:\n            if mid == 0 or A[mid-1]!= A[mid]:\n                return mid\n            else:\n                right = mid - 1\n    return -1\n",
        "num_ids": 110
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if not A:\n        return -1\n    l, r = 0, len(A)\n    while l < r:\n        m = (l + r) >> 1\n        if A[m] == x:\n            if m > 0 and A[m-1]!= x:\n                return m\n            return m + 1\n        elif A[m] < x:\n            l = m + 1\n        else:\n            r = m\n    return -1\n",
        "num_ids": 112
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    l, r = 0, len(A) - 1\n    while l <= r:\n        mid = (l + r) // 2\n        if A[mid] < x:\n            l = mid + 1\n        elif A[mid] > x:\n            r = mid - 1\n        else:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                r = mid - 1\n    return -1\n",
        "num_ids": 125
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n",
        "num_ids": 83
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    return first_occurrence(A, x, 0, len(A)-1)\n",
        "num_ids": 22
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    if len(A) == 1:\n        return 0 if A[0] == x else -1\n",
        "num_ids": 41
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if not A:\n        return -1\n    low, high = 0, len(A) - 1\n    while low <= high:\n        mid = (low + high) / 2\n        if x == A[mid]:\n            return mid\n        elif x < A[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n    \n    \ndef find_first_occurrence_fast(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if not A:\n        return -1\n    low, high = 0, len(A) - 1\n    while low <= high:\n        if A[low] == x:\n            return low\n        elif A[low] > x:\n            high = low - 1\n        else:\n            low = low + 1\n    return -1\n    \n    \ndef find_last_occurrence(A, x):\n    '''\n    Write a function to find the index of the last occurrence of a given number in a sorted array.\n    '''\n    if not A:\n        return -1\n    low, high = 0, len(A) - 1\n    while low <= high:\n        mid = (low + high) / 2\n        if x == A[mid]:\n            low = mid + 1\n        elif x < A[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    if low >= len(A):\n        return -1\n    return low\n    \ndef find_last_occurrence_fast(A, x):\n    '''\n    Write a function to find the index of the last occurrence of a given number in a sorted array.\n    '''\n    if not A:\n        return -1\n    low, high = 0, len(A) - 1\n    while low <= high:\n        if A[low] == x:\n            return low\n        elif A[low] > x:\n            high = low - 1\n        else:\n            low = low + 1\n    return -1\n    \ndef find_rotation_point(A):\n    '''\n    Write a function that takes in an array of integers and returns the index of the element in the array that is closest to its maximum value. If there are two or more elements with the maximum value, return the index of any one of them. If the input array is empty, return -1.\n    '''\n    if not A:\n        return -1\n    if len(A) == 1:\n        return 0\n    low, high = 0, len(A) - 1\n    while low <= high:\n        mid = (low + high) / 2\n        if A[mid] > A[mid + 1]:\n            return mid\n        elif A[mid] < A[mid + 1]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n    \n",
        "num_ids": 117
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    arr = arr[::-1]\n    sub_arr_sum = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            sub_arr = arr[i:j+1]\n            sub_arr_sum += 1 if sub_arr == sorted(sub_arr) else 0\n    return sub_arr_sum\n",
        "num_ids": 89
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    return sum([prod(arr[i:j+1]) for i in range(len(arr)) for j in range(i, len(arr))])\n",
        "num_ids": 39
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # base case\n    if len(arr) == 1:\n        return arr[0]\n    # recurrence relation\n    return arr[len(arr)-1] + sum_Of_Subarray_Prod(arr[:len(arr)-1])\n",
        "num_ids": 61
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    prod_arr = []\n    for i in range(1, len(arr)+1):\n        for j in range(len(arr) - i + 1):\n            prod_arr.append(arr[j:j+i])\n    print(prod_arr)\n    return sum([prod for prod in prod_arr if prod!= []])\n",
        "num_ids": 87
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    def prod(arr):\n        p = 1\n        for i in arr:\n            p *= i\n        return p\n    def sublist_prod(arr, start, end):\n        return prod(arr[start:end+1])\n    print(sum(sublist_prod(arr, 0, len(arr)-1)))\n",
        "num_ids": 81
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # corner case\n    if len(arr)==0:\n        return 0\n    # initialise the array with first element\n    arr[0] = 1\n    # start from 1 because there is no subarray of length 0\n    for i in range(1, len(arr)):\n        arr[i] = arr[i-1]*arr[i]\n    return sum(arr)\n",
        "num_ids": 93
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            subarray = arr[i:j+1]\n            result += prod(subarray)\n",
        "num_ids": 55
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Below is the recurrsive method for finding sum of products of sublist\n    # Base case\n    if not arr:\n        return 0\n    # Base case when the list has only one element\n    if len(arr) == 1:\n        return arr[0]\n",
        "num_ids": 65
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    n = len(arr)\n    \n    # table[i] will be storing the result of sum of subarrays of\n    # length i\n    table = [0 for i in range(n + 1)]\n",
        "num_ids": 53
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = (n & 0x5555555555555555) + ((n ^ 0xFFFFFFFFFFFFFFFF) & (n >> 1))  \n    return n & 0xFFFFFFFFFFFFFFFF  \n",
        "num_ids": 50
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n == None:\n        return 0\n    if n == 0:\n        return 0\n    # Initialize all bits to 0\n    mask = 0\n    for i in xrange(32):\n        mask = mask << 1\n        mask = mask ^ 1\n    # Set the first and the last bits\n    n = n ^ mask\n    n = n ^ (mask >> 1)\n    return n\n",
        "num_ids": 94
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = 1 << 1\n    return (n & mask) | (~n & mask)\n    \ndef get_bit(n, i):\n    '''\n    Write a python function to get a bit of a number.\n    '''\n    mask = 1 << i\n    return (n & mask) >> i\n    \ndef set_bit(n, i):\n    '''\n    Write a python function to set a bit of a number.\n    '''\n    mask = 1 << i\n    return n | mask\n    \ndef clear_bit(n, i):\n    '''\n    Write a python function to clear a bit of a number.\n    '''\n    mask = 1 << i\n    return n & ~mask\n    \ndef set_bits(n, i):\n    '''\n    Write a python function to set bits of a number.\n    '''\n    mask = ~(0 << (i - 1))\n    return n | mask\n    \ndef clear_bits(n, i):\n    '''\n    Write a python function to clear bits of a number.\n    '''\n    mask = ~(0 << (i - 1))\n    return n & mask\n    \ndef clear_bits_of_number(n, i):\n    '''\n    Write a python function to clear bits of a number.\n    '''\n    mask = ~(0 << (i - 1))\n    return n & mask\n",
        "num_ids": 21
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    result = 0\n    if n & 1:\n        result = n ^ 0b11111111\n    else:\n        result = n ^ 0b100000000\n    return result\n",
        "num_ids": 42
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return (n << 1) | (n >> 31)\n    \ndef set_bits(n,bits):\n    return n | (1<<bits)\n",
        "num_ids": 38
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = n & 0x00000001\n    n = n ^ 0xFFFFFFFF\n    n = n & 0x0000FFFF\n    n = n | first_bit\n    return n\n",
        "num_ids": 47
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    m = n & (n-1)\n    m = m + (m >> 1)\n    m = m + (m >> 2)\n    m = m + (m >> 4)\n    m = m + (m >> 8)\n    m = m + (m >> 16)\n    n = n ^ m\n    return n\n    \ndef set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    m = n & (n-1)\n    m = m + (m >> 1)\n    m = m + (m >> 2)\n    m = m + (m >> 4)\n    m = m + (m >> 8)\n    m = m + (m >> 16)\n    n = n ^ m\n    return n\n    \ndef set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    m = n & (n-1)\n    m = m + (m >> 1)\n    m = m + (m >> 2)\n    m = m + (m >> 4)\n    m = m + (m >> 8)\n    m = m + (m >> 16)\n    n = n ^ m\n    return n\n    \ndef set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    m = n & (n-1)\n    m = m + (m >> 1)\n    m = m + (m >> 2)\n    m = m + (m >> 4)\n    m = m + (m >> 8)\n    m = m + (m >> 16)\n    n = n ^ m\n    return n\n    \ndef set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    m = n & (n-1)\n    m = m + (m >> 1)\n    m = m + (m >> 2)\n    m = m + (m >> 4)\n    m = m + (m >> 8)\n    m = m + (m >> 16)\n    n = n ^ m\n    return n\n    \ndef set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    m = n & (n-1)\n    m = m + (m >> 1)\n    m = m + (m >> 2)\n    m = m + (m >> 4)\n    m = m + (m >> 8)\n    m = m + (m >> 16)\n    n = n ^ m\n    return n\n    \ndef set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    m = n & (n-1)\n    m = m + (m >> 1)\n    m = m + (m >> 2)\n    m = m + (m >> 4)\n    m = m + (m >> 8)\n    m = m + (m >> 16)\n    n = n ^ m\n    return n\n    \ndef set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    m = n & (n-1)\n    m = m + (m >> 1)\n    m = m + (m >> 2)\n    m = m + (m >> 4)\n    m = m + (m >> 8)\n    m = m + (m >> 16)\n    n = n ^ m\n    return n\n    \ndef set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    m = n & (n-1)\n    m = m + (m >> 1)\n    m = m + (m >> 2)\n    m = m + (m >> 4)\n    m = m + (m >> 8)\n    m = m + (m >> 16)\n    n = n ^ m\n    return n\n    \ndef set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    m = n & (n-1)\n    m = m + (m >> 1)\n    m = m + (m >> 2)\n    m = m + (m >> 4)\n    m = m + (m >> 8)\n    m = m + (m >> 16)\n    n = n ^ m\n    return n\n    \ndef set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    m = n & (n-1)\n    m = m + (m >> 1)\n    m = m + (m >> 2)\n    m = m + (m >> 4)\n    m = m + (m >> 8)\n    m = m + (m >> 16)\n    n = n ^ m\n    return n\n    \ndef set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    m = n & (n-1)\n    m = m + (m >> 1)\n    m = m + (m >> 2)\n    m = m + (m >> 4)\n    m = m + (m >> 8)\n    m = m + (m >> 16)\n    n = n ^ m\n    return n\n    \ndef set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    m = n & (n-1)\n    m = m + (m >> 1)\n    m = m + (m >> 2)\n    m = m + (m >> 4)\n    m = m + (m >> 8)\n    m = m + (m >> 16)\n    n = n ^ m\n    return n\n    \ndef set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    m = n & (n-1)\n    m = m + (m >> 1)\n    m = m + (m >> 2)\n    m = m + (m >> 4)\n    m = m + (m >> 8)\n    m = m + (m >> 16)\n    n = n ^ m\n    return n\n    \ndef set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggl",
        "num_ids": 35
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n ^ (n >> 1)\n",
        "num_ids": 12
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n &= ~(n & 1)\n    n |= (n >> 1) & 1\n    return n\n",
        "num_ids": 29
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n^(2**(len(bin(n)[2:]))-1)\n",
        "num_ids": 23
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pos = bisect.bisect_left(a, x)\n    return pos\n",
        "num_ids": 22
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pos = bisect.bisect_left(a, x)\n    return pos\n",
        "num_ids": 22
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    a.insert(i, x)\n    return a\n",
        "num_ids": 32
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # mid = bisect.bisect_left(a, x)\n    # return mid\n    if a == []:\n        return 0\n    # find insertion point\n    if x > a[-1]:\n        return len(a)\n    l = 0\n    r = len(a) - 1\n    while l < r:\n        mid = (l + r) // 2\n        if a[mid] == x:\n            return mid\n        elif x < a[mid]:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return l\n",
        "num_ids": 137
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == 0 or a[i-1] > x:\n        return 0\n    else:\n        return i\n",
        "num_ids": 46
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a,x)\n    return i\n",
        "num_ids": 22
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    \n    if len(a) == 0 or a[-1] <= x:\n        return len(a)\n    else:\n        bisect.insort(a, x)\n        return a.index(x)\n",
        "num_ids": 54
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pos = bisect.bisect_left(a, x)\n    if pos == 0:\n        if a[0] > x:\n            return 0\n    if a[pos-1] <= x:\n        return pos\n    return pos - 1\n",
        "num_ids": 61
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n",
        "num_ids": 22
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a == []:\n        return [x]\n    else:\n        if x < a[0]:\n            return [x] + a\n        else:\n            return a[:bisect.bisect_left(a, x)] + [x] + a[bisect.bisect_left(a, x):]\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a == []:\n        return [x]\n    else:\n        if x > a[-1]:\n            return a + [x]\n        else:\n            return a[:bisect.bisect_right(a, x)] + [x] + a[bisect.bisect_right(a, x):]\ndef swap(a, i, j):\n    '''\n    Swap the value of i and j and return the new list.\n    '''\n    return [x for x in a if x!= i and x!= j] + [i, j] + [x for x in a if x == i or x == j]\ndef partition(a, start, end):\n    '''\n    a is the input list, start is the start of the new list, end is the end of the new list\n    '''\n    pivot = a[end]\n    i = start\n    for j in range(start, end):\n        if a[j] <= pivot:\n            a[i], a[j] = a[j], a[i]\n            i += 1\n    a[i], a[end] = a[end], a[i]\n    return i\ndef quick_sort(a, start, end):\n    '''\n    a is the input list, start is the start of the new list, end is the end of the new list\n    '''\n    if start < end:\n        q = partition(a, start, end)\n        quick_sort(a, start, q - 1)\n        quick_sort(a, q + 1, end)\ndef quick_sort_recursive(a, start, end):\n    '''\n    a is the input list, start is the start of the new list, end is the end of the new list\n    '''\n    if start < end:\n        q = partition(a, start, end)\n        quick_sort_recursive(a, start, q - 1)\n        quick_sort_recursive(a, q + 1, end)\ndef insert(a, i):\n    '''\n    Inserts a value at the ith index position of the list.\n    '''\n    if a[i] < a[i - 1]:\n        a.insert(i - 1, a[i])\n        return a\n    else:\n        a.insert(i, a[i])\n        return a\ndef insert_recursive(a, i):\n    '''\n    Inserts a value at the ith index position of the list.\n    '''\n    if a[i] < a[i - 1] or i == 0:\n        a.insert(i - 1, a[i])\n        return a\n    else:\n        a.insert(i, a[i])\n        return a\ndef remove(a, i):\n    '''\n    Removes the ith index position of the list.\n    '''\n    if a[i] == a[i - 1]:\n        a.remove(a[i])\n        return a\n    else:\n        a.remove(a[i - 1])\n        return a\ndef remove_recursive(a, i):\n    '''\n    Removes the ith index position of the list.\n    '''\n    if a[i] == a[i - 1]:\n        a.remove(a[i - 1])\n        return a\n    else:\n        a.remove(a[i - 1])\n        return a\ndef list_len(a):\n    '''\n    Return the length of a list.\n    '''\n    return len(a)\ndef min_recursive(a, start, end):\n    '''\n    Finds the min value from the start index to the end index in the list.\n    '''\n    if end == start + 1:\n        return a[start]\n    else:\n        if a[start] <= a[end]:\n            return a[start]\n        else:\n            return a[end]\ndef max_recursive(a, start, end):\n    '''\n    Finds the max value from the start index to the end index in the list.\n    '''\n    if end == start + 1:\n        return a[start]\n    else:\n        if a[end] >= a[start]:\n            return a[end]\n        else:\n            return a[start]\ndef partition(a, start, end):\n    '''\n    Partition the list between the start and end index into two sub-lists, left and right, such that all the elements in the left sub-list are less than the pivot, and the elements in the right sub-list are greater than or equal to the pivot.\n    '''\n    pivot = a[end]\n    i = start\n    for j in range(start, end):\n        if a[j] <= pivot:\n            a[i], a[j] = a[j], a[i]\n            i += 1\n    a[i], a[end] = a[end], a[i]\n    return i\ndef quick_sort_iterative(a, start, end):\n    '''\n    Sorts the list from the start index to the end index, inplace.\n    '''\n    if start < end:\n        q = partition(a, start, end)\n        quick_sort_iterative(a, start, q - 1)\n        quick_sort_iterative(a, q + 1, end)\ndef quick_sort_iterative_recursive(a, start, end):\n    '''\n    Sorts the list from the start index to the end index, inplace.\n    '''\n    if start < end:\n        q = partition(a, start, end)\n        quick_sort_iterative_recursive(a, start, q - 1)\n        quick_sort_iterative_recursive(a, q + 1, end)\ndef count_recursive(a, start, end):\n    '''\n    Count the number of elements in the list from the start index to the end index.\n    '''\n    if end == start + 1:\n        return 1\n    else:\n        if end > start:\n            return 1 + count_recursive(a, start + 1, end)\n        else:\n            return 0\ndef count_iterative(a, start, end):\n    '''\n    Count the number of elements in the list from the start index to the end index.\n    '''\n    if end == start + 1:\n        return 1\n    else:\n        i = start + 1\n        count = 0\n        while i <= end:\n            count += 1\n            i += 1\n        return count\ndef reverse(a, start, end):\n    '''\n    Reverse the list from the start index to the end index, inplace.\n    '''\n    if start < end:\n        a[start], a[end] = a[end], a[start]\n        reverse(a, start + 1, end - 1)\ndef reverse_recursive(a, start, end):\n    '''\n    Reverse the list from the start index to the end index, inplace.\n    '''\n    if start < end:\n        a[start], a[end] = a[end], a[start]\n        reverse_recursive(a, start + 1, end - 1)\ndef is_sorted(a, start, end):\n    '''\n    Return true if the list is sorted from the start index to the end index, inplace.\n    '''\n    if start < end:\n        if a[start] > a[start + 1]:\n            return False\n        else:\n            return is_sorted(a, start + 1, end)\n    else:\n        return True\ndef is_sorted_re",
        "num_ids": 62
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    #return re.search(regex,string)\n    return re.match(regex,string) is not None\n",
        "num_ids": 30
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    r = re.compile(regex)\n    if re.match(r, string): \n        print \"Valid\"\n    else: \n        print \"Invalid\"\ncheck_str(string)\n",
        "num_ids": 50
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    check = re.search(regex, string)\n    if check:\n        print 'Yes'\n    else:\n        print 'No'\ncheck_str(\"abcdef\")\ncheck_str(\"helsinki\")\ncheck_str(\"hweqwdf\")\n",
        "num_ids": 64
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string):\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    x = re.search(regex, string)\n    if x:\n        print(\"Match Found\")\n    else:\n        print(\"No Match\")\ncheck_str(\"vowel\")\ncheck_str(\"vowel1\")\ncheck_str(\"Vowel\")\ncheck_str(\"Vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"Vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"Vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"Vowel1\")\ncheck_str(\"Vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"vowel1\")\ncheck_str(\"",
        "num_ids": 1980
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True \n    else:\n        return False \n",
        "num_ids": 28
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    result = re.search(regex,string)\n    return result\n",
        "num_ids": 19
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    result = re.match(regex,string)\n    if result:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
        "num_ids": 36
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        print(\"String starting with a vowel\")\n    else: \n        print(\"String starting with a consonant\")\ncheck_str('a')\ncheck_str('az')\ncheck_str('z')\n",
        "num_ids": 62
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    global regex \n    if re.search(regex,string):\n        return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1.0*n*geometric_sum(n-1))\n",
        "num_ids": 36
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1.0 * (pow(n, n-1) + geometric_sum(n-1))\n",
        "num_ids": 43
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return 1/n + geometric_sum(n-1)\n",
        "num_ids": 17
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/n)*(n-1) + geometric_sum(n-1)\n",
        "num_ids": 39
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return (1/n) * geometric_sum(n-1)\n",
        "num_ids": 34
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    return (n-1) * geometric_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return (1/n) * geometric_sum(n-1)\n",
        "num_ids": 34
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n",
        "num_ids": 30
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * geometric_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    from math import sqrt\n    #get list of triangular numbers with n digits\n    triangular_numbers = []\n    for i in range(1,n+1):\n        triangular_numbers.append(int(math.ceil(pow(i,2)+i)/2))\n",
        "num_ids": 72
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1: \n        return 0\n    else: \n        m = int(math.ceil(math.log10(n) / 2))\n        # print(m)\n        x = (10 ** (2 * m)) + 1\n        # print(x)\n        y = int(math.ceil(n / x))\n        # print(y)\n        return y * (10 ** (2 * m)) + 1\ndef find_Digits(N):\n    '''\n    Write a python function to find the number of digits of the smallest triangular number with N digits. https://www.geeksforgeeks.org/number-of-digits-of-smallest-triangular-number-with-n-digits/\n    '''\n    # print(N)\n    N = math.ceil(N / 2)\n    # print(N)\n    return 2 * N + 1\n",
        "num_ids": 37
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int((n * (n + 1)) / 2)\n",
        "num_ids": 17
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #base cases\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    #code\n    else:\n        return int((math.ceil(math.pow(n,0.5))) * (n+1)/2)\n",
        "num_ids": 67
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    base = 10 ** (n - 1)\n    index = 0\n    while base < 1000: \n        tri_num = int(n * (base / math.factorial(n)))\n        if tri_num < 1000: \n            break\n        base -= 1\n        index += 1\n    return index\n",
        "num_ids": 81
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1, n + 1):\n        if math.isqrt(i * (i + 1)) == int(math.isqrt(i * (i + 1))):\n            return i\n",
        "num_ids": 52
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    ind = 1\n    while(math.ceil(math.pow(10,ind))<=n):\n        ind+=1\n    return ind-1\ndef Find_Power(n):\n    '''\n    Write a python function to find the power of 10 to the number n\n    '''\n    result = 1\n    for i in range(n):\n        result=result*10\n    return result\ndef find_Triangle(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeeks.org/triangular-numbers/\n    '''\n    if(n==1):\n        return 1\n    return n+find_Triangle(n-1)\ndef Find_Digits(n):\n    '''\n    Write a python function to find the number of digits in the number n\n    '''\n    temp = n\n    count = 0\n    while(temp>0):\n        count+=1\n        temp = temp/10\n    return count\ndef find_Series(n):\n    '''\n    Write a python function to find the series 1,1,1,2,3,4,5,8,13,21,34,55,89,144,233,377,610\n    '''\n    if(n==1):\n        return 1\n    elif(n==2):\n        return 1\n    else:\n        return find_Series(n-1)+find_Series(n-2)\ndef find_Sum(n):\n    '''\n    Write a python function to find the sum of the series 1,1,1,2,3,4,5,8,13,21,34,55,89,144,233,377,610\n    '''\n    if(n==1):\n        return 1\n    elif(n==2):\n        return 1\n    else:\n        return find_Sum(n-1)+find_Sum(n-2)\ndef find_Series_Recursive(n):\n    '''\n    Write a python function to find the series 1,1,1,2,3,4,5,8,13,21,34,55,89,144,233,377,610\n    '''\n    if(n==1):\n        return 1\n    elif(n==2):\n        return 1\n    else:\n        return find_Series_Recursive(n-1)+find_Series_Recursive(n-2)\ndef find_Sum_Recursive(n):\n    '''\n    Write a python function to find the sum of the series 1,1,1,2,3,4,5,8,13,21,34,55,89,144,233,377,610\n    '''\n    if(n==1):\n        return 1\n    elif(n==2):\n        return 1\n    else:\n        return find_Sum_Recursive(n-1)+find_Sum_Recursive(n-2)\ndef find_Nth_Term(n):\n    '''\n    Write a python function to find the nth term of a series. https://www.geeksforgeeks.org/nth-term-of-series/\n    '''\n    if(n==1):\n        return 1\n    elif(n==2):\n        return 1\n    else:\n        return find_Nth_Term(n-1)+find_Nth_Term(n-2)\ndef find_Nth_Term_Recursive(n):\n    '''\n    Write a python function to find the nth term of a series. https://www.geeksforgeeks.org/nth-term-of-series/\n    '''\n    if(n==1):\n        return 1\n    elif(n==2):\n        return 1\n    else:\n        return find_Nth_Term_Recursive(n-1)+find_Nth_Term_Recursive(n-2)\ndef find_Nth_Term_Memoized(n,memo={1:1,2:1}):\n    '''\n    Write a python function to find the nth term of a series. https://www.geeksforgeeks.org/nth-term-of-series/\n    '''\n    if(n in memo):\n        return memo[n]\n    else:\n        return find_Nth_Term_Memoized(n-1)+find_Nth_Term_Memoized(n-2)\ndef find_Nth_Term_Memoized_Recursive(n,memo={1:1,2:1}):\n    '''\n    Write a python function to find the nth term of a series. https://www.geeksforgeeks.org/nth-term-of-series/\n    '''\n    if(n==1):\n        return 1\n    elif(n==2):\n        return 1\n    else:\n        if(n-1 in memo):\n            val1 = memo[n-1]\n        else:\n            val1 = find_Nth_Term_Memoized_Recursive(n-1)\n            memo[n-1]=val1\n        if(n-2 in memo):\n            val2 = memo[n-2]\n        else:\n            val2 = find_Nth_Term_Memoized_Recursive(n-2)\n            memo[n-2]=val2\n        return val1+val2\ndef find_Nth_Term_Stored(n):\n    '''\n    Write a python function to find the nth term of a series. https://www.geeksforgeeks.org/nth-term-of-series/\n    '''\n    if(n==1):\n        return 1\n    elif(n==2):\n        return 1\n    else:\n        p1 = 1\n        p2 = 1\n        for i in range(3,n+1):\n            temp = p1+p2\n            p2 = p1\n            p1 = temp\n        return p1\ndef find_Nth_Term_Stored_Recursive(n):\n    '''\n    Write a python function to find the nth term of a series. https://www.geeksforgeeks.org/nth-term-of-series/\n    '''\n    if(n==1):\n        return 1\n    elif(n==2):\n        return 1\n    else:\n        p1 = 1\n        p2 = 1\n        for i in range(3,n+1):\n            temp = p1+p2\n            p2 = p1\n            p1 = temp\n        return p1\ndef find_Nth_Term_Recursive_In_Space(n):\n    '''\n    Write a python function to find the nth term of a series. https://www.geeksforgeeks.org/nth-term-of-series/\n    '''\n    if(n==1):\n        return 1\n    elif(n==2):\n        return 1\n    else:\n        p1 = 1\n        p2 = 1\n        for i in range(3,n+1):\n            temp = p1+p2\n            p2 = p1\n            p1 = temp\n        return p1\ndef find_Nth_Term_Recursive_In_Space_Memoized(n,memo={1:1,2:1}):\n    '''\n    Write a python function to find the nth term of a series. https://www.geeksforgeeks.org/nth-term-of-series/\n    '''\n    if(n==1):\n        return 1\n    elif(n==2):\n        return 1\n    else:\n        if(n-1 in memo):\n            val1 = memo[n-1]\n        else:\n            val1 = find_Nth_Term_Recursive_In_Space_Memoized(n-1)\n            memo[n-1]=val1\n        if(n-2 in memo):\n            val2 = memo[n-2]\n        else:\n            val2 = find_Nth_Term_Recursive_In_Space_Memoized(n-2)\n            memo[n-2]=val2\n        return val1+val2\ndef find_Nth_Term_Recursive_In_Space_Stored(n):\n    '''\n    Write a python function to find the nth term of a series. https://www.geek",
        "num_ids": 23
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    numerator = (n-1)**2\n    denominator = math.factorial(n)\n    i = int(numerator/denominator)\n    return i\n",
        "num_ids": 46
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if (n == 0) : \n        return 1\n    temp = 10 \n    for i in range(1, n + 1): \n        temp = (temp * (i + 1)) / (i + 1)\n    return temp\n",
        "num_ids": 58
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n < 1:\n        return\n    elif n == 1:\n        return 0\n    else:\n        return int(math.ceil((n * (n + 1)) / 2))\ndef find_Digits(n):\n    '''\n    Write a python function to find the number of digits in triangular number with n digits. https://www.geeksforgeeks.org/number-of-digits-triangular-number-n-digit/\n    '''\n    if n < 1:\n        return\n    elif n == 1:\n        return 1\n    else:\n        return int(n + find_Digits(n - 1))\ndef find_Triangular_number(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeeks.org/triangular-number/\n    '''\n    return int(math.pow(10,n) * (n + 1) / 2)\ndef find_Triangular_number_Formula():\n    '''\n    Write a python function to find the triangular number using formula. https://www.geeksforgeeks.org/triangular-number-formula/\n    '''\n    return int((math.sqrt(8*(math.pow(10,6) + math.pow(10,5)))-math.sqrt(8*(math.pow(10,6) + math.pow(10,5))+ math.pow(10,4)))/4)\ndef find_Triangular_number_Sequence(n):\n    '''\n    Write a python function to find the triangular number using series. https://www.geeksforgeeks.org/triangular-number-series/\n    '''\n    i = 1\n    tri_num = 0\n    while(n>0):\n        tri_num += i*(i+1)\n        i += 1\n        n -= 1\n    return tri_num\ndef find_Pentagonal_number(n):\n    '''\n    Write a python function to find the pentagonal number with n digits. https://www.geeksforgeeks.org/pentagonal-number/\n    '''\n    return int(math.pow(10,n) * (3 * n - 1) / 2)\ndef find_Pentagonal_number_Formula():\n    '''\n    Write a python function to find the pentagonal number using formula. https://www.geeksforgeeks.org/pentagonal-number-formula/\n    '''\n    return int((math.sqrt(24*(math.pow(10,6) + math.pow(10,5)))-math.sqrt(24*(math.pow(10,6) + math.pow(10,5))+math.pow(10,4)))/6)\ndef find_Pentagonal_number_Sequence(n):\n    '''\n    Write a python function to find the pentagonal number using series. https://www.geeksforgeeks.org/pentagonal-number-series/\n    '''\n    i = 1\n    pent_num = 0\n    while(n>0):\n        pent_num += i*(3*i-1)\n        i += 1\n        n -= 1\n    return pent_num\ndef find_Hexagonal_number(n):\n    '''\n    Write a python function to find the hexagonal number with n digits. https://www.geeksforgeeks.org/hexagonal-number/\n    '''\n    return int(math.pow(10,n) * (2 * n - 1))\ndef find_Hexagonal_number_Formula():\n    '''\n    Write a python function to find the hexagonal number using formula. https://www.geeksforgeeks.org/hexagonal-number-formula/\n    '''\n    return int((math.sqrt(8*(math.pow(10,6) + math.pow(10,5)))-math.sqrt(8*(math.pow(10,6) + math.pow(10,5))+math.pow(10,4)))/4)\ndef find_Hexagonal_number_Sequence(n):\n    '''\n    Write a python function to find the hexagonal number using series. https://www.geeksforgeeks.org/hexagonal-number-series/\n    '''\n    i = 1\n    hex_num = 0\n    while(n>0):\n        hex_num += i*(2*i - 1)\n        i += 1\n        n -= 1\n    return hex_num\ndef find_Heptagonal_number(n):\n    '''\n    Write a python function to find the heptagonal number with n digits. https://www.geeksforgeeks.org/heptagonal-number/\n    '''\n    return int(math.pow(10,n) * (5 * n - 3))\ndef find_Heptagonal_number_Formula():\n    '''\n    Write a python function to find the heptagonal number using formula. https://www.geeksforgeeks.org/heptagonal-number-formula/\n    '''\n    return int((math.sqrt(8*(math.pow(10,6) + math.pow(10,5)))-math.sqrt(8*(math.pow(10,6) + math.pow(10,5))+math.pow(10,4)))/4)\ndef find_Heptagonal_number_Sequence(n):\n    '''\n    Write a python function to find the heptagonal number using series. https://www.geeksforgeeks.org/heptagonal-number-series/\n    '''\n    i = 1\n    hept_num = 0\n    while(n>0):\n        hept_num += i*(5 * i - 3)\n        i += 1\n        n -= 1\n    return hept_num\ndef find_Octagonal_number(n):\n    '''\n    Write a python function to find the octagonal number with n digits. https://www.geeksforgeeks.org/octagonal-number/\n    '''\n    return int(math.pow(10,n) * (3 * n - 2))\ndef find_Octagonal_number_Formula():\n    '''\n    Write a python function to find the octagonal number using formula. https://www.geeksforgeeks.org/octagonal-number-formula/\n    '''\n    return int((math.sqrt(8*(math.pow(10,6) + math.pow(10,5)))-math.sqrt(8*(math.pow(10,6) + math.pow(10,5))+math.pow(10,4)))/4)\ndef find_Octagonal_number_Sequence(n):\n    '''\n    Write a python function to find the octagonal number using series. https://www.geeksforgeeks.org/octagonal-number-series/\n    '''\n    i = 1\n    oct_num = 0\n    while(n>0):\n        oct_num += i*(3 * i - 2)\n        i += 1\n        n -= 1\n    return oct_num\ndef find_Nth_Triangular_number(n):\n    '''\n    Write a python function to find the nth triangular number. https://www.geeksforgeeks.org/nth-triangular-number/\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return int((math.pow(10,n) * (n + 1) * (n + 2)) / 2)\ndef find_Nth_Pentagonal_number(n):\n    '''\n    Write a python function to find the nth pentagonal number. https://www.geeksforgeeks.org/nth-pentagonal-number/\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return int((math.pow(10,n) * (3 * n - 1)) / 2)\ndef find_Nth_Hexagonal_number(n):\n    '''\n    Write a python function to find the nth hexagonal number. https://www.geeksforgeeks.org/nth-hexagonal-number/\n    '''\n    if n ",
        "num_ids": 6
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(len(test_tup)):\n        d[test_tup[i]] = test_tup[i + 1]\n    return d\n",
        "num_ids": 47
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key = 0\n    val = 1\n    res = {}\n    for i in range(len(test_tup)):\n        res[test_tup[key]] = test_tup[val]\n        key+=2\n        val+=2\n    return res\n",
        "num_ids": 65
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if not test_tup:\n        return dict()\n    \n    #remove duplicates\n    test_tup = list(set(test_tup))\n    #convert tuple to dictionary\n    return dict(zip(test_tup[0::2], test_tup[1::2]))\n",
        "num_ids": 74
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict1 = {}\n    for i in range(len(test_tup)):\n        if i+1 < len(test_tup):\n            dict1[test_tup[i]] = test_tup[i+1]\n        else:\n            dict1[test_tup[i]] = None\n    return dict1\n",
        "num_ids": 82
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup,test_tup[1:]))\n",
        "num_ids": 22
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i,v in enumerate(test_tup):\n        test_dict[v] = test_tup[i + 1] if i + 1 < len(test_tup) else None\n    return test_dict\n",
        "num_ids": 62
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key_value_dict = {}\n    for index, item in enumerate(test_tup):\n        if index == 0:\n            key_value_dict[item] = item\n        else:\n            key_value_dict[item] = test_tup[index - 1]\n    return key_value_dict\n",
        "num_ids": 77
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key_value_dict = dict(zip(test_tup[::2], test_tup[1::2]))\n    return key_value_dict\n    \ndef convert_to_dict(test_lst):\n    '''\n    Write a function to convert the given list to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-list-to-dictionary/\n    '''\n    test_dict = dict(zip([i for i in range(len(test_lst))], test_lst))\n    return test_dict\n    \ndef tup_to_lst(test_tup):\n    '''\n    Write a function to convert the given tuple to a list. https://www.geeksforgeeks.org/python-convert-tuple-to-list/\n    '''\n    test_lst = list(test_tup)\n    return test_lst\n    \ndef list_to_dict(test_lst):\n    '''\n    Write a function to convert the given list to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-list-to-dictionary/\n    '''\n    key_value_dict = {}\n    for i in range(len(test_lst)):\n        key_value_dict[i] = test_lst[i]\n    return key_value_dict\n    \ndef dict_to_lst(test_dict):\n    '''\n    Write a function to convert the given dictionary to a list. https://www.geeksforgeeks.org/python-convert-dictionary-to-list/\n    '''\n    test_lst = [test_dict[i] for i in range(len(test_dict))]\n    return test_lst\n    \ndef tuple_to_lst(test_tup):\n    '''\n    Write a function to convert the given tuple to a list. https://www.geeksforgeeks.org/python-convert-tuple-to-list/\n    '''\n    test_lst = []\n    for i in range(len(test_tup)):\n        test_lst.append(test_tup[i])\n    return test_lst\n    \ndef set_to_dict(test_set):\n    '''\n    Write a function to convert the given set to a dictionary. https://www.geeksforgeeks.org/python-convert-set-to-dictionary/\n    '''\n    test_dict = {}\n    for i in range(len(test_set)):\n        test_dict[i] = test_set[i]\n    return test_dict\n    \ndef dict_to_set(test_dict):\n    '''\n    Write a function to convert the given dictionary to a set. https://www.geeksforgeeks.org/python-convert-dictionary-to-set/\n    '''\n    test_set = set()\n    for i in range(len(test_dict)):\n        test_set.add(test_dict[i])\n    return test_set\n    \ndef reverse_dict(test_dict):\n    '''\n    Write a function to convert the given dictionary to a reversed dictionary. https://www.geeksforgeeks.org/python-convert-dictionary-to-reversed-dictionary/\n    '''\n    rev_dict = {}\n    for key in test_dict:\n        rev_dict[test_dict[key]] = key\n    return rev_dict\n    \ndef dict_to_str(test_dict):\n    '''\n    Write a function to convert the given dictionary to a string. https://www.geeksforgeeks.org/python-convert-dictionary-to-string/\n    '''\n    return str(test_dict)\n    \ndef str_to_dict(test_str):\n    '''\n    Write a function to convert the given string to a dictionary. https://www.geeksforgeeks.org/python-convert-string-to-dictionary/\n    '''\n    test_dict = {}\n    for i in range(len(test_str)):\n        test_dict[i] = test_str[i]\n    return test_dict\n    \ndef lst_to_set(test_lst):\n    '''\n    Write a function to convert the given list to a set. https://www.geeksforgeeks.org/python-convert-list-to-set/\n    '''\n    test_set = set()\n    for i in range(len(test_lst)):\n        test_set.add(test_lst[i])\n    return test_set\n    \ndef set_to_lst(test_set):\n    '''\n    Write a function to convert the given set to a list. https://www.geeksforgeeks.org/python-convert-set-to-list/\n    '''\n    test_lst = []\n    for i in range(len(test_set)):\n        test_lst.append(test_set[i])\n    return test_lst\n    \ndef dict_to_tup(test_dict):\n    '''\n    Write a function to convert the given dictionary to a tuple. https://www.geeksforgeeks.org/python-convert-dictionary-to-tuple/\n    '''\n    test_tup = tuple(test_dict)\n    return test_tup\n    \ndef tup_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a dictionary. https://www.geeksforgeeks.org/python-convert-tuple-to-dictionary/\n    '''\n    key_value_dict = {}\n    for i in range(len(test_tup)):\n        key_value_dict[test_tup[i]] = i\n    return key_value_dict\n    \ndef dict_to_set(test_dict):\n    '''\n    Write a function to convert the given dictionary to a set. https://www.geeksforgeeks.org/python-convert-dictionary-to-set/\n    '''\n    test_set = set()\n    for key in test_dict:\n        test_set.add(test_dict[key])\n    return test_set\n    \ndef set_to_dict(test_set):\n    '''\n    Write a function to convert the given set to a dictionary. https://www.geeksforgeeks.org/python-convert-set-to-dictionary/\n    '''\n    test_dict = {}\n    for i in range(len(test_set)):\n        test_dict[i] = test_set[i]\n    return test_dict\n    \ndef dict_to_tup(test_dict):\n    '''\n    Write a function to convert the given dictionary to a tuple. https://www.geeksforgeeks.org/python-convert-dictionary-to-tuple/\n    '''\n    test_tup = tuple(test_dict)\n    return test_tup\n    \ndef tup_to_set(test_tup):\n    '''\n    Write a function to convert the given tuple to a set. https://www.geeksforgeeks.org/python-convert-tuple-to-set/\n    '''\n    test_set = set()\n    for i in range(len(test_tup)):\n        test_set.add(test_tup[i])\n    return test_set\n    \ndef list_to_set(test_lst):\n    '''\n    Write a function to convert the given list to a set. https://www.geeksforgeeks.org/python-convert-list-to-set/\n    '''\n    test_set = set()\n    for i in range(len(test_lst)):\n        test_set.add(test_lst[i])\n    return test_set\n    \ndef set_to_list(test_set):\n    '''\n    Write a function to convert the given set to a list. https://www.geeksforgeeks.org/python-convert-set-to-list/\n    '''\n    test_lst = []\n    for i in range(len(test_set)):\n        test_ls",
        "num_ids": 28
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict1 = {}\n    # if test_tup:\n    #     for key, value in zip(test_tup[::2], test_tup[1::2]):\n    #         dict1[key] = value\n    #     return dict1\n    # else:\n    #     return None\n    #return dict(zip(test_tup[::2], test_tup[1::2]))\n    for index, element in enumerate(test_tup):\n        dict1[element] = test_tup[index + 1]\n    return dict1\n",
        "num_ids": 138
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key,value = test_tup[0],test_tup[1]\n    return {key:value}\n    \n",
        "num_ids": 32
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) <= 1\ndef all_Digits_Same(s) :\n    '''\n    Write a python function to check whether all the digits are same or not.\n    '''\n    return all([char.isdigit() for char in s])\ndef all_Lowercase_Same(s) :\n    '''\n    Write a python function to check whether all the lowercase characters are same or not.\n    '''\n    return all([char.islower() for char in s])\ndef all_Uppercase_Same(s) :\n    '''\n    Write a python function to check whether all the uppercase characters are same or not.\n    '''\n    return all([char.isupper() for char in s])\ndef check_String(s) :\n    '''\n    Write a python function to check whether all the characters of the given string are same or not.\n    '''\n    return all_Characters_Same(s) and all_Digits_Same(s) and all_Lowercase_Same(s) and all_Uppercase_Same(s)\ndef all_Digits(s) :\n    '''\n    Write a python function to check whether all the digits are same or not.\n    '''\n    return all_Digits_Same(s)\ndef all_Uppercase(s) :\n    '''\n    Write a python function to check whether all the uppercase characters are same or not.\n    '''\n    return all_Uppercase_Same(s)\ndef all_Lowercase(s) :\n    '''\n    Write a python function to check whether all the lowercase characters are same or not.\n    '''\n    return all_Lowercase_Same(s)\ndef all_Characters(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return all_Characters_Same(s)\ndef check_String2(s) :\n    '''\n    Write a python function to check whether all the characters of the given string are same or not.\n    '''\n    return all_Digits(s) and all_Uppercase(s) and all_Lowercase(s) and all_Characters(s)\ndef all_String(s) :\n    '''\n    Write a python function to check whether all the characters of the given string are same or not.\n    '''\n    return all_Characters_Same(s) and all_Digits_Same(s) and all_Lowercase_Same(s) and all_Uppercase_Same(s)\ndef check_String3(s) :\n    '''\n    Write a python function to check whether all the characters of the given string are same or not.\n    '''\n    return all_Digits_Same(s) and all_Uppercase_Same(s) and all_Lowercase_Same(s)\ndef check_String4(s) :\n    '''\n    Write a python function to check whether all the characters of the given string are same or not.\n    '''\n    return all_Digits_Same(s) and all_Lowercase_Same(s)\ndef check_String5(s) :\n    '''\n    Write a python function to check whether all the characters of the given string are same or not.\n    '''\n    return all_Digits_Same(s) and all_Lowercase_Same(s) and all_Uppercase_Same(s)\ndef check_String6(s) :\n    '''\n    Write a python function to check whether all the characters of the given string are same or not.\n    '''\n    return all_Digits_Same(s)\ndef check_String7(s) :\n    '''\n    Write a python function to check whether all the characters of the given string are same or not.\n    '''\n    return all_Digits_Same(s)\ndef check_String8(s) :\n    '''\n    Write a python function to check whether all the characters of the given string are same or not.\n    '''\n    return all_Digits_Same(s) and all_Lowercase_Same(s)\ndef check_String9(s) :\n    '''\n    Write a python function to check whether all the characters of the given string are same or not.\n    '''\n    return all_Digits_Same(s) and all_Lowercase_Same(s)\ndef check_String10(s) :\n    '''\n    Write a python function to check whether all the characters of the given string are same or not.\n    '''\n    return all_Digits_Same(s) and all_Uppercase_Same(s)\ndef check_String11(s) :\n    '''\n    Write a python function to check whether all the characters of the given string are same or not.\n    '''\n    return all_Digits_Same(s) and all_Lowercase_Same(s)\ndef check_String12(s) :\n    '''\n    Write a python function to check whether all the characters of the given string are same or not.\n    '''\n    return all_Digits_Same(s) and all_Uppercase_Same(s)\ndef check_String13(s) :\n    '''\n    Write a python function to check whether all the characters of the given string are same or not.\n    '''\n    return all_Digits_Same(s) and all_Lowercase_Same(s)\ndef check_String14(s) :\n    '''\n    Write a python function to check whether all the characters of the given string are same or not.\n    '''\n    return all_Digits_Same(s) and all_Uppercase_Same(s)\ndef check_String15(s) :\n    '''\n    Write a python function to check whether all the characters of the given string are same or not.\n    '''\n    return all_Digits_Same(s) and all_Lowercase_Same(s)\ndef check_String16(s) :\n    '''\n    Write a python function to check whether all the characters of the given string are same or not.\n    '''\n    return all_Digits_Same(s) and all_Uppercase_Same(s)\ndef check_String17(s) :\n    '''\n    Write a python function to check whether all the characters of the given string are same or not.\n    '''\n    return all_Digits_Same(s) and all_Lowercase_Same(s)\ndef check_String18(s) :\n    '''\n    Write a python function to check whether all the characters of the given string are same or not.\n    '''\n    return all_Digits_Same(s) and all_Uppercase_Same(s)\ndef check_String19(s) :\n    '''\n    Write a python function to check whether all the characters of the given string are same or not.\n    '''\n    return all_Digits_Same(s) and all_Lowercase_Same(s)\ndef check_String20(s) :\n    '''\n    Write a python function to check whether all the characters of the given string are same or not.\n    '''\n    return all_Digits_Same(s) and all_Uppercase_Same(s)\ndef check_String21(s) :\n    '''\n    Write a python function to check whether all the characters of the given string are same or not.\n    '''\n    return all_Digits_Same(s) and all_Lowercase_Same(s)\ndef check_String22(s) :\n    '''\n    Write a python function to check whether all the characters of the given string are same or not.\n    '''\n    return all_Digits_Same(s) and all_Uppercase_Same(s)\ndef check_String23(s) :\n    '''\n    Write a python function to check whether all the characters of the given string are same or not.\n    '''\n    return all_Digits_Same(s) and all_Lowercase_Same(s)\ndef check_String24(s) :\n    '''\n    Write a python function to check whether all the characters of the given string are same or not.\n    '''\n    return all_Digits_Same(s) and all_Uppercase_Same(s)\ndef check_String25(s) :\n    '''\n    Write a python function to check whether all the characters of the given string are same or not.\n    '''\n    return all_Digits_Same(s) and all_Lowercase_Same(s",
        "num_ids": 22
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1 :\n        return True\n    else :\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] :\n        return True\n    else :\n        return False\ndef all_Digits_Same(s) :\n    '''\n    Write a python function to check whether all the digits are same or not.\n    '''\n    if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] :\n        return True\n    else :\n        return False\ndef reverse_String(s) :\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\ndef isPalindrome(s) :\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    return s == reverse_String(s)\ndef count_Vowels(s) :\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    count = 0\n    for c in s :\n        if c in 'aeiou' :\n            count = count + 1\n    return count\ndef vowels_in_parity(s) :\n    '''\n    Write a python function to count the number of vowels in a string in even\n    or odd positions.\n    '''\n    vowels = 0\n    for c in s :\n        if c in 'aeiou' :\n            if c in 'aei' :\n                vowels = vowels + 1\n            else :\n                vowels = vowels - 1\n    return vowels\ndef all_vowels_in_parity(s) :\n    '''\n    Write a python function to count the number of vowels in a string in all\n    even or odd positions.\n    '''\n    vowels = 0\n    for c in s :\n        if c in 'aeiou' :\n            if c in 'aei' :\n                vowels = vowels + 1\n    return vowels\ndef most_Frequent_Vowels(s) :\n    '''\n    Write a python function to find the most frequent vowels in a string.\n    '''\n    vowels = 'aeiou'\n    frequencies = {}\n    for c in s :\n        if c in vowels :\n            if c in frequencies :\n                frequencies[c] = frequencies[c] + 1\n            else :\n                frequencies[c] = 1\n    m = 0\n    for k in frequencies :\n        if frequencies[k] > m :\n            m = frequencies[k]\n    return m\ndef most_Frequent_Vowels_in_parity(s) :\n    '''\n    Write a python function to find the most frequent vowels in a string in\n    even or odd positions.\n    '''\n    vowels = 'aeiou'\n    frequencies = {}\n    for c in s :\n        if c in vowels :\n            if c in frequencies :\n                frequencies[c] = frequencies[c] + 1\n            else :\n                frequencies[c] = 1\n    m = 0\n    for k in frequencies :\n        if frequencies[k] > m :\n            m = frequencies[k]\n    return m\ndef find_Longest_Word(s) :\n    '''\n    Write a python function to find the longest word in a string.\n    '''\n    longest = s[0]\n    for c in s :\n        if len(c) > len(longest) :\n            longest = c\n    return longest\ndef find_Longest_Word_in_parity(s) :\n    '''\n    Write a python function to find the longest word in a string in even\n    or odd positions.\n    '''\n    longest = s[0]\n    for c in s :\n        if len(c) > len(longest) :\n            longest = c\n    return longest\ndef is_Longest_Word(s) :\n    '''\n    Write a python function to check whether a word is the longest word in a\n    string.\n    '''\n    return s == find_Longest_Word(s)\ndef is_Longest_Word_in_parity(s) :\n    '''\n    Write a python function to check whether a word is the longest word in a\n    string in even or odd positions.\n    '''\n    return s == find_Longest_Word_in_parity(s)\ndef romanToInt(s) :\n    '''\n    Write a python function to convert a roman numeral to an integer.\n    '''\n    roman = {'I' : 1, 'V' : 5, 'X' : 10, 'L' : 50, 'C' : 100, 'D' : 500,\n    'M' : 1000}\n    num = 0\n    for i in range(len(s)) :\n        if i > 0 and roman[s[i]] > roman[s[i - 1]] :\n            num = num - roman[s[i - 1]]\n        num = num + roman[s[i]]\n    return num\ndef intToRoman(n) :\n    '''\n    Write a python function to convert an integer to a roman numeral.\n    '''\n    roman = {1000:'M', 900:'CM', 500:'D', 400:'CD', 100:'C', 90:'XC',\n    50:'L', 40:'XL', 10:'X', 9:'IX', 5:'V', 4:'IV', 1:'I'}\n    s = ''\n    for i in roman.keys() :\n        while n >= i :\n            s += roman[i]\n            n = n - i\n    return s\ndef is_RomanNumeral(s) :\n    '''\n    Write a python function to check whether a string is a valid Roman numeral\n    or not.\n    '''\n    roman = {'I' : 1, 'V' : 5, 'X' : 10, 'L' : 50, 'C' : 100, 'D' : 500,\n    'M' : 1000}\n    for c in s :\n        if c not in roman.keys() :\n            return False\n    for i in range(len(s) - 1) :\n        if roman[s[i]] < roman[s[i + 1]] :\n            return False\n    return True\ndef is_RomanNumeral_in_parity(s) :\n    '''\n    Write a python function to check whether a string is a valid Roman numeral\n    in even or odd positions.\n    '''\n    roman = {'I' : 1, 'V' : 5, 'X' : 10, 'L' : 50, 'C' : 100, 'D' : 500,\n    'M' : 1000}\n    for c in s :\n        if c not in roman.keys() :\n            return False\n    for i in range(len(s) - 1) :\n        if roman[s[i]] < roman[s[i + 1]] :\n            return False\n    return True\ndef romanToInt_in_parity(s) :\n    '''\n    Write a python function to convert a roman numeral to an integer in\n    even or odd positions.\n    '''\n    roman = {'I' : 1, 'V' : 5, 'X' : 10, 'L' : 50, 'C' : 100, 'D' : 500,\n    'M' : 1000}\n    num = 0\n    for i in range(len(s)) :\n        if i > 0 and roman[s[i]] > roman[s[i - 1]] :\n            num = num - roman[s[i - 1]]\n        num = num + roman[s[i]]\n    return num\ndef intToRoman_in_parity(n) :\n    '''\n    Write a python function to convert an integer to a roman numeral in\n    even or odd positions.\n    '''\n    roman = {1000:'M', 900:'CM', 500:'D', 400:'CD', 100:'C', 90:'XC',\n    50:'L', 40:'XL', 10:'X', 9:'IX', 5:'V', 4:'IV', 1:'I'}\n    s = ''\n    for i in roman.keys() :\n        while n >= i :\n            ",
        "num_ids": 87
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)) :\n        if s[i]!= s[0] :\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    #if set(s) == {s[0]} :\n    #    return True\n    #else :\n    #    return False\n    for i in s :\n        if i!= s[0] :\n            return False\n    return True\n",
        "num_ids": 60
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    c = s[0]\n    for i in s :\n        if i!= c :\n            return False\n    return True\n",
        "num_ids": 33
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    all_Same = 1\n    for i in range(len(s)) :\n        if s[i]!= s[0] :\n            all_Same = 0\n            break\n    return all_Same\n",
        "num_ids": 51
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1 :\n        return True\n    else :\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) == 1\n",
        "num_ids": 13
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in s :\n        if i!=s[0] :\n            return False\n    return True\n",
        "num_ids": 28
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = ((side ** 2) * (math.sqrt(3)/4))\n    return area\n",
        "num_ids": 26
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3/4)*(math.sqrt(5)-1)\n",
        "num_ids": 20
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 3:\n        return \"The area of a tetrahedron is 1/4 of the side length squared\"\n    elif side == 4:\n        return \"The area of a tetrahedron is 1/6 of the side length squared\"\n    elif side == 5:\n        return \"The area of a tetrahedron is 1/8 of the side length squared\"\n    else:\n        return \"Sorry, but this function doesn't know that area\"\n",
        "num_ids": 110
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # I will write a function to caluclate the area of a tetrahedron\n    # based on the length of the sides.\n    # the function will be of the form:\n    # area_tetrahedron(side1, side2, side3, side4)\n    # where side1, side2, side3 and side4 are the side lengths\n    # of the tetrahedron, respectively.\n",
        "num_ids": 98
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**2 * (3.0/4.0)\n",
        "num_ids": 18
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3 * math.sqrt(3)) / 4.0 * side**2\n",
        "num_ids": 23
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return round(((3*math.sqrt(3))/4)*(side**2),4)\n",
        "num_ids": 27
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (3*(side**2))/4\n    return area\ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    volume = (side**3)/6\n    return volume\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    area = (6*(side**2))\n    return area\ndef volume_cube(side):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    volume = side**3\n    return volume\ndef area_cylinder(radius,height):\n    '''\n    Write a function to caluclate the area of a cylinder.\n    '''\n    area = 2*math.pi*radius*height\n    return area\ndef volume_cylinder(radius,height):\n    '''\n    Write a function to caluclate the volume of a cylinder.\n    '''\n    volume = math.pi*radius**2*height\n    return volume\ndef area_sphere(radius):\n    '''\n    Write a function to caluclate the area of a sphere.\n    '''\n    area = 4*math.pi*(radius**2)\n    return area\ndef volume_sphere(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*radius**3\n    return volume\ndef area_cone(radius,height):\n    '''\n    Write a function to caluclate the area of a cone.\n    '''\n    area = math.pi*radius**2*height/3\n    return area\ndef volume_cone(radius,height):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    volume = math.pi*radius**2*height/3\n    return volume\ndef area_right_triangle(a,b,c):\n    '''\n    Write a function to caluclate the area of a right triangle.\n    '''\n    area = math.sqrt(b*b + c*c - a*a)\n    return area\ndef area_acute_triangle(a,b,c):\n    '''\n    Write a function to caluclate the area of a right triangle.\n    '''\n    area = math.fabs(b*c-a*b)/2\n    return area\ndef area_obtuse_triangle(a,b,c):\n    '''\n    Write a function to caluclate the area of a right triangle.\n    '''\n    area = math.fabs(b*c-a*b)/2\n    return area\ndef area_right_square(a,b):\n    '''\n    Write a function to caluclate the area of a right square.\n    '''\n    area = a*b\n    return area\ndef area_acute_square(a,b):\n    '''\n    Write a function to caluclate the area of a right square.\n    '''\n    area = math.fabs(a*b)\n    return area\ndef area_obtuse_square(a,b):\n    '''\n    Write a function to caluclate the area of a right square.\n    '''\n    area = math.fabs(a*b)\n    return area\ndef area_rectangle(a,b):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    area = a*b\n    return area\ndef area_square(a):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    area = a**2\n    return area\ndef area_triangle(a,b,c):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    s = (a+b+c)/2\n    area = math.sqrt(s*(s-a)*(s-b)*(s-c))\n    return area\ndef perimeter_triangle(a,b,c):\n    '''\n    Write a function to caluclate the perimeter of a triangle.\n    '''\n    perimeter = a+b+c\n    return perimeter\ndef area_trapezoid(a,b,h):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    area = (a+b)/2*h\n    return area\ndef perimeter_trapezoid(a,b,h):\n    '''\n    Write a function to caluclate the perimeter of a rectangle.\n    '''\n    perimeter = a+b+2*h\n    return perimeter\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    area = math.pi*radius**2\n    return area\ndef perimeter_circle(radius):\n    '''\n    Write a function to caluclate the perimeter of a circle.\n    '''\n    perimeter = 2*math.pi*radius\n    return perimeter\ndef area_sector(radius,angle):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    area = math.pi*radius**2*angle/360\n    return area\ndef perimeter_sector(radius,angle):\n    '''\n    Write a function to caluclate the perimeter of a circle.\n    '''\n    perimeter = 2*math.pi*radius*angle\n    return perimeter\ndef area_polygon(n,r):\n    '''\n    Write a function to caluclate the area of a polygon.\n    '''\n    area = (n*r**2)/(4*math.tan(math.pi/n))\n    return area\ndef perimeter_polygon(n,r):\n    '''\n    Write a function to caluclate the perimeter of a polygon.\n    '''\n    perimeter = n*r\n    return perimeter\ndef area_ellipse(a,b):\n    '''\n    Write a function to caluclate the area of an ellipse.\n    '''\n    area = math.pi*a*b\n    return area\ndef perimeter_ellipse(a,b):\n    '''\n    Write a function to caluclate the perimeter of an ellipse.\n    '''\n    perimeter = 2*math.pi*(a+b)\n    return perimeter\ndef area_rhombus(a,b):\n    '''\n    Write a function to caluclate the area of a rhombus.\n    '''\n    area = a*b/2\n    return area\ndef perimeter_rhombus(a,b):\n    '''\n    Write a function to caluclate the perimeter of a rhombus.\n    '''\n    perimeter = a*b\n    return perimeter\ndef area_pentagon(a,b):\n    '''\n    Write a function to caluclate the area of a pentagon.\n    '''\n    area = (a*b)/2\n    return area\ndef perimeter_pentagon(a,b):\n    '''\n    Write a function to caluclate the perimeter of a pentagon.\n    '''\n    perimeter = a*b\n    return perimeter\ndef area_hexagon(a,b):\n    '''\n    Write a function to caluclate the area of a hexagon.\n    '''\n    area = (a*b)/2\n    return area\ndef perimeter_hexagon(a,b):\n    '''\n    Write a function to caluclate the perimeter of a hexagon.\n    '''\n    perimeter = a*b\n    return perimeter\ndef area_hexahedron(a,b):\n    '''\n    Write a function to caluclate the area of a hexagon.\n    '''\n    area = (a*b)/2\n    return area\ndef perimeter_hexahedron(a,b):\n    '''\n    Write a function to caluclate the perimeter of a hexagon.\n    '''\n    perimeter = a*b\n    return perimeter\ndef area_octahedron(a,b,c):\n    '''\n    Write a function to caluclate the area of a octahedron.\n    '''\n    area = (a*b*c)/2\n    return area\ndef perimeter_octahedron(a",
        "num_ids": 27
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    side = float(side)\n    area = (1/4) * math.sqrt(3) * math.pow(side, 2)\n    print(area)\n",
        "num_ids": 43
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3*math.sqrt(3)/2)*(side**2)\n",
        "num_ids": 22
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "num_ids": 15
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        last = list[-1]\n        for i in range(len(list)-1,0,-1):\n            list[i] = list[i-1]\n        list[0] = last\n    return list\n",
        "num_ids": 62
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    l = []\n    for i in range(m, len(list)):\n        l.append(list[i])\n    for i in range(0, m):\n        l.append(list[i])\n    return l\n",
        "num_ids": 56
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m == 0:\n        return list\n    elif m > 0:\n        m = m % len(list)\n        return list[-m:] + list[:-m]\n    else:\n        m = abs(m) % len(list)\n        return list[-m:] + list[:-m]\n",
        "num_ids": 76
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "num_ids": 15
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        temp = list[0]\n        list[0] = list[len(list)-1]\n        list[len(list)-1] = temp\n    return list\n",
        "num_ids": 50
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "num_ids": 15
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list_len = len(list)\n    end = list_len - m\n    if end < 0:\n        return 0\n    else:\n        return list[end:] + list[:end]\n",
        "num_ids": 49
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(0, m):\n        list.append(list.pop(0))\n",
        "num_ids": 25
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    #initialize the indices of the list, we have to start at the end so we can rotate right\n    first = 0\n    last = len(list) - 1\n    if m > last:\n        return list\n    \n    #first create an empty list and copy the elements over to it\n    new_list = []\n    for i in range(0, len(list)):\n        new_list.append(list[i])\n    \n    #to rotate the list we use the first element as the index and the index of the last element\n    #to know the index of the last element we need to know the length of the list\n    #then increment the first index to the new last index\n    index_of_last_element = len(list) - 1\n    first = first + m\n    last = last - m\n    new_first_index = first\n    \n    for i in range(0, index_of_last_element):\n        #get the element at the new index\n        element = new_list[new_first_index]\n        #add the element to the end of the list\n        new_list.append(element)\n        #then increment the new first index by 1\n        new_first_index += 1\n    \n    #now swap the elements\n    temp = new_list[first]\n    new_list[first] = new_list[last]\n    new_list[last] = temp\n    \n    #return the new list\n    return new_list\n",
        "num_ids": 341
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return False\n    return True\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        print 'There is a None value'\n    else:\n        print 'There is no None value'\n",
        "num_ids": 36
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    #Check for none\n    if None in test_tup:\n        return False\n    else:\n        return True\n",
        "num_ids": 30
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    # YOUR CODE HERE\n    if None in test_tup:\n        return True\n    else:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup.count(None) > 0:\n        return True\n    return False\n",
        "num_ids": 25
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(elem is None for elem in test_tup)\n",
        "num_ids": 20
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return not all(test_tup)\n",
        "num_ids": 13
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(a is None for a in test_tup)\n",
        "num_ids": 18
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return None\n    return test_tup\n",
        "num_ids": 23
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    list_of_numbers = list(range(startnum, endnum))\n    result = [x for x in list_of_numbers if all(x % y == 0 for y in range(0, len(str(x))))]\n    return result\n",
        "num_ids": 62
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    results = []\n    for i in range(startnum,endnum+1):\n        if all(int(i/j)%10 == 0 for j in range(2,i)):\n            results.append(i)\n    return results\n",
        "num_ids": 59
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [x for x in range(startnum, endnum + 1) if (x % int(str(x)[0]) == 0 and x % int(str(x)[1]) == 0 and x % int(str(x)[2]) == 0)]\n",
        "num_ids": 61
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    nums = []\n    for num in range(startnum,endnum+1):\n        if num == 1:\n            continue\n        if num % 10 == 0:\n            continue\n        if all(num % x == 0 for x in xrange(2,num)):\n            nums.append(num)\n    return nums\n",
        "num_ids": 80
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum, endnum+1):\n        if i % int(str(i)[0])!= 0:\n            continue\n        if i % int(str(i)[1])!= 0:\n            continue\n        if i % int(str(i)[2])!= 0:\n            continue\n        if i % int(str(i)[3])!= 0:\n            continue\n        print(i)\n",
        "num_ids": 103
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all([x % int(i) == 0 for i in str(x)]), range(startnum, endnum+1)))\n",
        "num_ids": 40
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    #startnum = 3\n    #endnum = 25\n",
        "num_ids": 16
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return filter(lambda x: True if int(x)%int(endnum) == 0 else False, [str(x) for x in range(int(startnum),int(endnum))])\n",
        "num_ids": 48
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    list1 = []\n    for number in range(startnum, endnum+1):\n        numdigits = len(str(number))\n        for digit in str(number):\n            if digit == '0' and numdigits > 1:\n                numdigits -= 1\n            else:\n                if number % int(digit) == 0:\n                    numdigits -= 1\n        if numdigits == 1:\n            list1.append(number)\n    return list1\n",
        "num_ids": 112
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum, endnum):\n        numstr = str(i)\n        numstr = numstr[::-1]\n        if numstr[0] == '0':\n            continue\n        for j in numstr:\n            if i % int(j)!= 0:\n                break\n        else:\n            print(i)\n",
        "num_ids": 84
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r**2/2*math.sin(math.radians(a))\n",
        "num_ids": 41
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r*r*(a/360)\ndef is_rectangular(a,b,c):\n    '''\n    Write a function to find if the sides of a triangle are rectangular. The function takes three sides as arguments. Function should return None if the sides cannot be described as rectangular.\n    '''\n    if a==b and a==c and b==c:\n        return True\n    else:\n        return False\ndef is_equilateral(a,b,c):\n    '''\n    Write a function to find if the sides of a triangle are equilateral. The function takes three sides as arguments. Function should return None if the sides cannot be described as equilateral.\n    '''\n    if (a==b and b==c) or (a==c and c==b):\n        return True\n    else:\n        return False\ndef is_isosceles(a,b,c):\n    '''\n    Write a function to find if the sides of a triangle are isosceles. The function takes three sides as arguments. Function should return None if the sides cannot be described as isosceles.\n    '''\n    if a==b or a==c or b==c:\n        return True\n    else:\n        return False\ndef is_scalene(a,b,c):\n    '''\n    Write a function to find if the sides of a triangle are scalene. The function takes three sides as arguments. Function should return None if the sides cannot be described as scalene.\n    '''\n    if a!=b and a!=c and b!=c:\n        return True\n    else:\n        return False\ndef is_rightangle(a,b,c):\n    '''\n    Write a function to find if the sides of a triangle are rightangle. The function takes three sides as arguments. Function should return None if the sides cannot be described as rightangle.\n    '''\n    if a!=b and a!=c and b!=c:\n        if (a==b and b==c) or (a==c and c==b):\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_isosceles_rightangle(a,b,c):\n    '''\n    Write a function to find if the sides of a triangle are isosceles and rightangle. The function takes three sides as arguments. Function should return None if the sides cannot be described as isosceles rightangle.\n    '''\n    if a!=b and a!=c and b!=c:\n        if a==b or a==c or b==c:\n            if (a==b and b==c) or (a==c and c==b):\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\ndef is_rightangle_isosceles(a,b,c):\n    '''\n    Write a function to find if the sides of a triangle are rightangle and isosceles. The function takes three sides as arguments. Function should return None if the sides cannot be described as rightangle and isosceles.\n    '''\n    if a!=b and a!=c and b!=c:\n        if a==b and b==c:\n            if (a==b and b==c) or (a==c and c==b):\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\ndef is_rightangle_scalene(a,b,c):\n    '''\n    Write a function to find if the sides of a triangle are rightangle, scalene and isosceles. The function takes three sides as arguments. Function should return None if the sides cannot be described as rightangle, scalene and isosceles.\n    '''\n    if a!=b and a!=c and b!=c:\n        if a==b and b==c:\n            if (a==b and b==c) or (a==c and c==b):\n                return True\n            else:\n                return False\n        elif a==b or a==c or b==c:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_isosceles_scalene(a,b,c):\n    '''\n    Write a function to find if the sides of a triangle are isosceles, scalene and rightangle. The function takes three sides as arguments. Function should return None if the sides cannot be described as isosceles, scalene and rightangle.\n    '''\n    if a!=b and a!=c and b!=c:\n        if a==b and b==c:\n            if (a==b and b==c) or (a==c and c==b):\n                return True\n            else:\n                return False\n        elif a==b or a==c or b==c:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_isosceles_rightangle_scalene(a,b,c):\n    '''\n    Write a function to find if the sides of a triangle are isosceles, rightangle, scalene and rightangle. The function takes three sides as arguments. Function should return None if the sides cannot be described as isosceles, rightangle, scalene and rightangle.\n    '''\n    if a!=b and a!=c and b!=c:\n        if a==b and b==c:\n            if (a==b and b==c) or (a==c and c==b):\n                return True\n            else:\n                return False\n        elif a==b or a==c or b==c:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_equilateral_isosceles_scalene(a,b,c):\n    '''\n    Write a function to find if the sides of a triangle are equilateral, isosceles, scalene and rightangle. The function takes three sides as arguments. Function should return None if the sides cannot be described as equilateral, isosceles, scalene and rightangle.\n    '''\n    if a!=b and a!=c and b!=c:\n        if a==b and b==c:\n            if (a==b and b==c) or (a==c and c==b):\n                return True\n            else:\n                return False\n        elif a==b or a==c or b==c:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_isosceles_equilateral_scalene(a,b,c):\n    '''\n    Write a function to find if the sides of a triangle are isosceles, equilateral, scalene and rightangle. The function takes three sides as arguments. Function should return None if the sides cannot be described as isosceles, equilateral, scalene and rightangle.\n    '''\n    if a!=b and a!=c and b!=c:\n        if a==b and b==c:\n            if (a==b and b==c) or (a==c and c==b):\n                return True\n            else:\n                return False\n        elif a==b or a==c or b==c:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_scalene_isosceles_rightangle(a,b,c):\n    '''\n    Write a function to find if the sides of a triangle are scalene, isosceles, rightangle and rightangle. The function takes three sides as arguments. Function should return None if the sides cannot be described as scalene, isosceles, rightangle and rightangle.\n    '''\n    if a!=b and a!=c and b!=c:\n        if a==b and b==c:\n            if (a==b and b==c) or (a==c and c==b):\n                return True\n            else:\n                return False\n        elif a==b or a==c or b==c:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_rightangle_scalene_isosceles_equilateral(a,b,c):\n    '''\n    Write a function to find if the sides of a triangle are rightangle, scalen",
        "num_ids": 20
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return (math.pi * r**2 * ((180 - a) / 180))\n",
        "num_ids": 37
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    try:\n        if a>360:\n            return None\n        else:\n            return (math.pi*r*r*a/360)\n    except TypeError:\n        print('Function must be passed an integer for angle and a number for radius')\n    except ValueError:\n        print('Radius must be passed greater than zero')\n    except OverflowError:\n        print('Radius must be passed greater than zero')\n",
        "num_ids": 100
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>=360):\n        print(\"invalid angle\")\n    else:\n        print(a)\n        ans=(r**2)*math.sin(math.radians(a))\n        print(ans)\n        return ans\n    \n    \n",
        "num_ids": 62
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    return math.pi*(r**2)*(1-math.cos(math.radians(a)))\n",
        "num_ids": 39
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return math.pi*r*r*(a/360)\n",
        "num_ids": 18
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * (a/360)\ndef volume(r,a):\n    '''\n    Write a function to find the volume of a sphere. Function should take radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (4/3) * math.pi * r**3 * (a/360)\n",
        "num_ids": 39
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        pi = math.pi\n        return (r ** 2) * (pi / 360) * (a/360)\n",
        "num_ids": 44
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    a = a/360*2*math.pi\n    if a > 2*math.pi:\n        return None\n    else:\n        return math.pi*r*r*(1-math.cos(a))\ndef height_area(r,a):\n    '''\n    Write a function to find the height of an ellipse given the radius and the angle. Function should return None if the angle is larger than 360 degrees.\n    '''\n    a = a/360*2*math.pi\n    if a > 2*math.pi:\n        return None\n    else:\n        return r*r*(1-math.cos(a))\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle. Function should return None if the radius is negative.\n    '''\n    if r <= 0:\n        return None\n    else:\n        return math.pi*r*r\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone. Function should return None if the radius is negative or height is negative.\n    '''\n    if r <= 0 or h <= 0:\n        return None\n    else:\n        return (1/3)*(math.pi*r*r*h)\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere. Function should return None if the radius is negative.\n    '''\n    if r <= 0:\n        return None\n    else:\n        return (4/3)*math.pi*r*r*r\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder. Function should return None if the radius is negative or height is negative.\n    '''\n    if r <= 0 or h <= 0:\n        return None\n    else:\n        return h*math.pi*r*r\ndef volume_cuboid(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid. Function should return None if the lengths are negative or heights are negative.\n    '''\n    if l <= 0 or w <= 0 or h <= 0:\n        return None\n    else:\n        return l*w*h\ndef volume_pyramid(a,b,h):\n    '''\n    Write a function to find the volume of a pyramid. Function should return None if the length of the bases are negative or the height is negative.\n    '''\n    if a <= 0 or b <= 0 or h <= 0:\n        return None\n    else:\n        return (1/3)*a*b*h\ndef volume_triangle(a,b,h):\n    '''\n    Write a function to find the volume of a triangle. Function should return None if the lengths of the bases are negative or the height is negative.\n    '''\n    if a <= 0 or b <= 0 or h <= 0:\n        return None\n    else:\n        return (1/2)*a*b*h\ndef volume_tetrahedron(a,b,c):\n    '''\n    Write a function to find the volume of a tetrahedron. Function should return None if the lengths of the bases are negative or the length of the sides are negative.\n    '''\n    if a <= 0 or b <= 0 or c <= 0:\n        return None\n    else:\n        return (1/6)*a*b*c\ndef area_ellipse(a,b):\n    '''\n    Write a function to find the area of an ellipse. Function should return None if the semi-major axis is negative or semi-minor axis is negative.\n    '''\n    if a <= 0 or b <= 0:\n        return None\n    else:\n        return math.pi*a*b\ndef height_ellipse(a,b):\n    '''\n    Write a function to find the height of an ellipse. Function should return None if the semi-major axis is negative or semi-minor axis is negative.\n    '''\n    if a <= 0 or b <= 0:\n        return None\n    else:\n        return a*b\ndef area_sphere(r):\n    '''\n    Write a function to find the area of a sphere. Function should return None if the radius is negative.\n    '''\n    if r <= 0:\n        return None\n    else:\n        return math.pi*r*r\ndef volume_cone_shell(r,h):\n    '''\n    Write a function to find the volume of a cone shell. Function should return None if the radius is negative or height is negative.\n    '''\n    if r <= 0 or h <= 0:\n        return None\n    else:\n        return (1/3)*(math.pi*r*r*h)\ndef volume_cone_torus(r,h):\n    '''\n    Write a function to find the volume of a cone torus. Function should return None if the radius is negative or height is negative.\n    '''\n    if r <= 0 or h <= 0:\n        return None\n    else:\n        return (1/3)*(math.pi*r*r*h)\ndef volume_sphere_shell(r,h):\n    '''\n    Write a function to find the volume of a sphere shell. Function should return None if the radius is negative or height is negative.\n    '''\n    if r <= 0 or h <= 0:\n        return None\n    else:\n        return (4/3)*math.pi*r*r*h\ndef volume_sphere_torus(r,h):\n    '''\n    Write a function to find the volume of a sphere torus. Function should return None if the radius is negative or height is negative.\n    '''\n    if r <= 0 or h <= 0:\n        return None\n    else:\n        return (4/3)*math.pi*r*r*h\ndef volume_cylinder_shell(r,h):\n    '''\n    Write a function to find the volume of a cylinder shell. Function should return None if the radius is negative or height is negative.\n    '''\n    if r <= 0 or h <= 0:\n        return None\n    else:\n        return h*math.pi*r*r\ndef volume_cylinder_torus(r,h):\n    '''\n    Write a function to find the volume of a cylinder torus. Function should return None if the radius is negative or height is negative.\n    '''\n    if r <= 0 or h <= 0:\n        return None\n    else:\n        return (math.pi/2)*r*r*h\ndef volume_cuboid_shell(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid shell. Function should return None if the lengths are negative or heights are negative.\n    '''\n    if l <= 0 or w <= 0 or h <= 0:\n        return None\n    else:\n        return l*w*h\ndef volume_cuboid_torus(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid torus. Function should return None if the lengths are negative or heights are negative.\n    '''\n    if l <= 0 or w <= 0 or h <= 0:\n        return None\n    else:\n        return (1/3)*l*w*h\ndef volume_pyramid_shell(a,b,h):\n    '''\n    Write a function to find the volume of a pyramid shell. Function should return None if the lengths of the bases are negative or the height is negative.\n    '''\n    if a <= 0 or b <= 0 or h <= 0:\n        return None\n    else:\n        return (1/3)*(a+b)*h\ndef volume_pyramid_torus(a,b,h):\n    '''\n    Write a function to find the volume of a pyramid torus. Function should return None if the lengths of the bases are negative or the height is negative.\n    '''\n    if a <= 0 or b <= 0 or h <= 0:\n        return None\n    else:\n        return (1/3)*a*b*h\ndef volume_triangle_shell(a,b,h):\n    '''\n    Write a function to find the volume of a triangle shell. Function should return None if the lengths of the bases are negative or the height is negative.\n    '''\n    if a <= 0 or b <= 0 or h <= 0:\n        return None\n    else:\n        return (1/2)*(a",
        "num_ids": 34
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    LCS_matrix = [[[0 for x in range(o+1)] for x in range(n+1)] for x in range(m+1)]\n    LCS_matrix[0][0][0] = -1\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    LCS_matrix[i][j][k] = LCS_matrix[i-1][j-1][k-1]+1\n                else:\n                    LCS_matrix[i][j][k] = max(LCS_matrix[i-1][j][k], LCS_matrix[i][j-1][k], LCS_matrix[i][j][k-1])\n    return LCS_matrix[m][n][o]\n    \nprint lcs_of_three('ABCDGH', 'AEDFHR', 'AEDFHR')\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1980
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if (i == 0 or j == 0 or k == 0): \n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n    return L[m][n][o] \n",
        "num_ids": 250
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X)\n    m = len(Y)\n    o = len(Z)\n    LCS_matrix = [[[0 for k in range(o+1)] for j in range(m+1)] for i in range(n+1)]\n    # print(LCS_matrix)\n    for i in range(n+1):\n        for j in range(m+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    LCS_matrix[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    LCS_matrix[i][j][k] = LCS_matrix[i-1][j-1][k-1] + 1\n                else:\n                    LCS_matrix[i][j][k] = max(LCS_matrix[i-1][j][k], LCS_matrix[i][j-1][k], LCS_matrix[i][j][k-1])\n    return LCS_matrix[n][m][o]\n",
        "num_ids": 266
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n",
        "num_ids": 26
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0 for i in range(o + 1)] for j in range(n + 1)] for k in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n    return L[m][n][o]\n",
        "num_ids": 229
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    L = [[[None] * (o + 1) for i in range(n + 1)] \n                    for j in range(m + 1)] \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(o + 1): \n                if (i == 0 or j == 0 or k == 0): \n                    L[i][j][k] = 0\n                elif (X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]): \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else: \n                    L[i][j][k] = max(L[i - 1][j][k], \n                                        L[i][j - 1][k], \n                                        L[i][j][k - 1]) \n    return L[m][n][o] \n",
        "num_ids": 260
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0 for i in range(o + 1)] for j in range(n + 1)] for k in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if (i == 0 or j == 0 or k == 0):\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    index = L[m][n][o]\n    lcs = [\"\"] * (index+1)\n    lcs[index] = \"\"\n    i = m\n    j = n\n    k = o\n    while (i > 0 and j > 0 and k > 0):\n        if (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]):\n            lcs[index-1] = X[i-1]\n            i -= 1\n            j -= 1\n            k -= 1\n            index -= 1\n        elif L[i-1][j][k] > L[i][j-1][k]:\n            i -= 1\n        elif L[i][j-1][k] > L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n    return lcs\n",
        "num_ids": 433
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Create a 3*len(X) x len(Y) matrix\n    M = [[[0 for i in range(len(Y) + 1)] for j in range(len(X) + 1)] for k in range(len(Z) + 1)]\n",
        "num_ids": 62
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n",
        "num_ids": 29
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    # The longest common substring is the longest common substring of the last two strings\n    # For the first two strings, the longest common substring is the substring shared by the two strings\n",
        "num_ids": 46
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    l1 = str1.split()\n    string = \"\"\n    for word in l1:\n        if word[0] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            string += word + \" \"\n    return string\n    ",
        "num_ids": 63
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    new_str=''\n    words=str1.split(' ')\n    for word in words:\n        if word[0].isupper():\n            new_str+=' '+word\n        else:\n            new_str+=' '+word\n    return new_str.lstrip()\n",
        "num_ids": 71
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    cap=re.compile('([A-Z]\\w*[a-z]+[A-Z]\\w*)')\n    mo=cap.search(str1)\n    while mo:\n        print(mo.group()),\n        mo=cap.search(str1,mo.end(0))\n",
        "num_ids": 75
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    if re.search('[A-Z]+', str1):\n        str1=re.sub(r'([A-Z][a-z]+)', r'\\1 ', str1)\n        return str1\n    else:\n        return str1\n",
        "num_ids": 62
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = re.sub(r\"([a-zA-Z])([a-zA-Z][^A-Z]*[a-zA-Z])\", r\"\\1 \\2\", str1)\n    return str2\n",
        "num_ids": 60
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    ans = re.sub(r'[A-Z][^A-Z ]','', str1)\n    return ans\n",
        "num_ids": 31
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r\"(\\b[A-Z][a-z]+\\b)\", r' \\1 ', str1)\n",
        "num_ids": 33
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # words = re.findall('[A-Z][a-z]*', str1)\n    # # words = str1.split()\n    # for i in range(len(words)):\n    #     if words[i][0].isupper():\n    #         words[i] = words[i].strip()\n    #         words[i] ='' + words[i] +''\n    # return ''.join(words)\n    return''.join(word for word in str1.split() if word[0].isupper())\n",
        "num_ids": 129
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    #result = re.sub(r'([A-Z][a-z]+)', r' \\1 ', str1)\n    #return result\n    # result = []\n    # for match in re.finditer(r'([A-Z][a-z]+)', str1):\n    #     result.append(match.group())\n    # return''.join(result)\n    result = re.sub(r'([A-Z][a-z]+)', r'\\1 ', str1)\n    return result.strip()\n",
        "num_ids": 127
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if(str1[i] ==''):\n            str2+=str1[i]\n        elif(str1[i].isupper()):\n            str2+=str1[i]+' '\n        else:\n            str2+=str1[i]\n    return str2\n",
        "num_ids": 88
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for item in nums_str:\n        nums.append(int(item))\n",
        "num_ids": 29
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key = lambda x: int(x))\n",
        "num_ids": 21
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(int(num_str))\n",
        "num_ids": 33
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key = lambda x: int(x))\n",
        "num_ids": 21
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    def try_int(n):\n        try:\n            return int(n)\n        except ValueError:\n            return n\n",
        "num_ids": 32
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(s) for s in nums_str]\n    nums.sort()\n    return [str(n) for n in nums]\n",
        "num_ids": 41
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: int(x))\n",
        "num_ids": 21
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key = lambda x: [int(n) for n in x.split()])\n",
        "num_ids": 30
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Get the length of the numbers\n    num_len = [len(x) for x in nums_str]\n",
        "num_ids": 30
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    # Sort the list of numbers\n    # For every index in the list\n    #    if the index has a number at the start,\n    #        and if the index + 1 has a number at the end,\n    #        if the number at the index is greater than the number at the index + 1,\n    #            switch the two numbers\n    #\n    # Time: O(n log n)\n    # Space: O(1)\n",
        "num_ids": 104
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    assert isinstance(test_list, list), 'Input is not a list'\n    assert isinstance(test_tup, tuple), 'Input is not a tuple'\n",
        "num_ids": 41
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    \n    \ndef get_average_scores(student_grades):\n    '''\n    Write a function to calculate the average score of the list of grades.\n    '''\n    total = 0\n    for grade in student_grades:\n        total += grade\n    average = total/len(student_grades)\n    \n    return average\n    \n",
        "num_ids": 41
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    \ndef lookup(string_list, word):\n    '''\n    Write a function to return the index of the given word if it exists in the list\n    (index of first occurance) or return -1 if it does not.\n    '''\n    return string_list.index(word)\n    \ndef remove(string_list, word):\n    '''\n    Write a function to remove the first occurance of the given word from the list.\n    '''\n    string_list.remove(word)\n    \ndef concatenate(string_list):\n    '''\n    Write a function to concatenate all the strings in a list\n    separated by a space.\n    '''\n    return''.join(string_list)\n    \ndef reverse_lookup(string_list, index):\n    '''\n    Write a function to return the word in the list at the given index.\n    '''\n    return string_list[index]\n    \ndef rotate_word(string_list, index, rot):\n    '''\n    Write a function to shift a word in the list by rot positions.\n    '''\n    return string_list[index][rot:] + string_list[index][:rot]\n    \ndef substring_sort(string_list):\n    '''\n    Write a function to sort the list of strings alphabetically using the\n    first word as the sorting criterion.\n    '''\n    return sorted(string_list, key = lambda x: x.split()[0])\n    \ndef append_string(string_list, string_to_append):\n    '''\n    Write a function to append the given string to the end of the list.\n    '''\n    string_list.append(string_to_append)\n    \ndef insert_string(string_list, string_to_insert, index):\n    '''\n    Write a function to insert the given string into the list at the given index.\n    '''\n    string_list.insert(index, string_to_insert)\n    \ndef sort_by_length(string_list):\n    '''\n    Write a function to sort a list of strings alphabetically by the length of the strings.\n    '''\n    return sorted(string_list, key = len)\n    \ndef sort_by_num_vowels(string_list):\n    '''\n    Write a function to sort a list of strings by the number of vowels in the strings.\n    '''\n    return sorted(string_list, key = lambda x: sum(1 for c in x if c in 'aeiou'))\n    \ndef combine(string_list, num_to_combine):\n    '''\n    Write a function to combine the first num_to_combine strings of the list and combine them in\n    the order they appear in the list.\n    '''\n    combined_strings = []\n    for i in range(num_to_combine):\n        combined_strings.append(''.join(string_list[i]))\n    return combined_strings\n    \ndef split_and_join(string):\n    '''\n    Write a function to split a string into a list of words and combine them into a single string\n    with all letters lower-cased.\n    '''\n    return''.join(string.lower().split())\n    \ndef fizz_buzz_string(string):\n    '''\n    Write a function to replace any number that is divisible by 3 with the word 'Fizz' and\n    any number that is divisible by 5 with the word 'Buzz' and any number that is divisible by\n    both 3 and 5 with the word 'FizzBuzz'.\n    '''\n    return ''.join(['Fizz' if i % 3 == 0 else 'Buzz' if i % 5 == 0 else 'FizzBuzz' if i % 3 == 0 and i % 5 == 0 else str(i) for i in range(1, int(string) + 1)])\n    \ndef count_vowels(string):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    return sum(1 for c in string if c in 'aeiou')\n    \ndef count_consonants(string):\n    '''\n    Write a function to count the number of consonants in a string.\n    '''\n    return sum(1 for c in string if c in 'bcdfghjklmnpqrstvwxyz')\n    \ndef is_palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef is_pangram(string):\n    '''\n    Write a function to check if a string is a pangram (contains every letter of the alphabet at least once).\n    '''\n    return set(string.lower()) >= set('abcdefghijklmnopqrstuvwxyz')\n    \ndef has_only_unique_chars(string):\n    '''\n    Write a function to check if a string has all unique characters.\n    '''\n    return len(string) == len(set(string))\n    \ndef get_count(string, char):\n    '''\n    Write a function to return the number of times a character occurs in a string.\n    '''\n    return sum(1 for c in string if c == char)\n    \ndef check_palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if string == string[::-1]:\n        return True\n    else:\n        return False\n    \ndef count_vowels_cons(string):\n    '''\n    Write a function to count the number of vowels and consonants in a string.\n    '''\n    return (sum(1 for c in string if c in 'aeiou'), sum(1 for c in string if c not in 'aeiou'))\n    \ndef word_flipper(string):\n    '''\n    Write a function to flip the case of every character in a string.\n    '''\n    return ''.join([c.swapcase() if c.islower() else c.upper() if c.isupper() else c for c in string])\n    \ndef is_equal(list_1, list_2):\n    '''\n    Write a function to check if two lists are equal.\n    '''\n    return set(list_1) == set(list_2)\n    \ndef has_duplicates(list_to_check):\n    '''\n    Write a function to check if a list has any duplicate values.\n    '''\n    return len(list_to_check)!= len(set(list_to_check))\n    \ndef is_sorted(list_to_check):\n    '''\n    Write a function to check if a list is sorted (alphabetically)\n    '''\n    return list_to_check == sorted(list_to_check)\n    \ndef has_duplicates_list(list_to_check):\n    '''\n    Write a function to check if a list has duplicate values.\n    '''\n    return len(list_to_check)!= len(set(list_to_check))\n    \ndef is_rotated(list_1, list_2):\n    '''\n    Write a function to check if a list is rotated from list_1 by 1 element\n    '''\n    return list_1[-1:] + list_1[:-1] == list_2\n    \ndef is_rotated_with_duplicates(list_1, list_2):\n    '''\n    Write a function to check if a list is rotated from list_1 by 1 element\n    '''\n    return list_1[-1:] + list_1[:-1] == list_2 and len(list_1)!= len(list_2)\n    \ndef remove_duplicates(list_to_check):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    return list(set(list_to_check))\n    \ndef delete_from_list(list_to_check, num):\n    '''\n    Write a function to delete num items from the beginning of a list.\n    '''\n    del list_to_check[:num]\n    \ndef empty_values(dict_to_check):\n    '''\n    Write a function to check if a dictionary contains any empty values.\n    '''\n    retur",
        "num_ids": 5
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n",
        "num_ids": 16
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    '''\n    if arr[i] <= arr[2*i+1] and arr[i] <= arr[2*i+2]:\n        return True\n    else:\n        return False\n    '''\n    if i == 0:\n        if arr[i] <= arr[1]:\n            return True\n        else:\n            return False\n    if i == 1:\n        if arr[i] <= arr[0] or arr[i] <= arr[2]:\n            return True\n        else:\n            return False\n",
        "num_ids": 74
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    #if the parent is greater than the child\n    if arr[i/2] > arr[i]:\n        return False\n    \n    #if the parent is greater than the child\n    if arr[i/2] < arr[i]:\n        return True\n    \n    #if the parent is smaller than both the childs\n    if i == 1 or i == 2:\n        return True\n    \n    #if the parent is smaller than the child and the parent is the left child\n    if arr[i/2] < arr[i] and arr[i/2] < arr[i - 1]:\n        return True\n    \n    #if the parent is smaller than the child and the parent is the right child\n    if arr[i/2] < arr[i] and arr[i/2] < arr[i - 2]:\n        return True\n    \n    #if the parent is smaller than the child and the parent is the right child and the parent is the left child\n    if arr[i/2] < arr[i] and arr[i/2] < arr[i - 2] and arr[i/2] < arr[i - 1]:\n        return True\n    \n    #if the parent is smaller than the child and the parent is the right child and the parent is the left child\n    if arr[i/2] < arr[i] and arr[i/2] < arr[i - 1] and arr[i/2] < arr[i - 2]:\n        return True\n    \n    return False\n",
        "num_ids": 350
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > len(arr)-1:\n        return True\n    l = 2*i+1\n    r = 2*i+2\n    if l < len(arr) and arr[l] < arr[i]:\n        return False\n    if r < len(arr) and arr[r] < arr[i]:\n        return False\n    return check_min_heap_helper(arr, l) and check_min_heap_helper(arr, r)\n",
        "num_ids": 113
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if (arr[i] < arr[i * 2] or arr[i] < arr[i * 2 + 1]):\n        return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0 or i >= len(arr):\n        return False\n    left_child = 2 * i\n    right_child = 2 * i + 1\n",
        "num_ids": 39
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # base case\n    if i >= len(arr):\n        return True\n",
        "num_ids": 20
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == len(arr):\n        return True\n    \n    if arr[i] > arr[2 * i + 1]:\n        return False\n    if arr[i] > arr[2 * i + 2]:\n        return False\n    \n    return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)\n",
        "num_ids": 99
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n",
        "num_ids": 20
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    parent = i // 2\n    left = i * 2\n    right = left + 1\n",
        "num_ids": 23
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if (i < 0) or (i >= len(arr)):\n        return False\n    if arr[i] < arr[i/2]:\n        return False\n    if arr[i] < arr[2*i+1] or arr[i] < arr[2*i+2]:\n        return False\n    return True\n",
        "num_ids": 79
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, (a + b)\n    return b\n",
        "num_ids": 38
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)\n",
        "num_ids": 82
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n",
        "num_ids": 60
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # base cases\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    # recursive\n    return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n",
        "num_ids": 72
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    elif n == 3: \n        return 1\n    else: \n        return jacobsthal_num(n-1) + jacobsthal_num(n-2) \n",
        "num_ids": 74
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1 or n == 2: \n        return n \n    elif n == 3: \n        return 4\n    elif n == 4: \n        return 8\n    else: \n        return jacobsthal_num(n-2) + 2 * jacobsthal_num(n-1) \n",
        "num_ids": 81
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 2:\n        return n\n    else:\n        a = 0\n        b = 1\n        c = 1\n        for i in range(n-1):\n            a, b, c = b, c, a + b + c\n        return b\n",
        "num_ids": 64
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n    return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n",
        "num_ids": 85
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: return 1\n    elif n == 1: return 1\n    elif n == 2: return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n",
        "num_ids": 63
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    sorted_list = sorted(test_list, key=lambda tup: tup[1])\n    return sorted_list[:K]\n",
        "num_ids": 36
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    l = len(test_list)\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    for i in range(l):\n        if sorted_list[i][1] == sorted_list[K - 1][1]:\n            return sorted_list[i]\n    return sorted_list[0]\n",
        "num_ids": 83
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    for i in range(len(test_list)-K+1):\n        min = test_list[i][1]\n        for j in range(K):\n            if test_list[i+j][1] < min:\n                min = test_list[i+j][1]\n        print min\n",
        "num_ids": 74
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    output = []\n    for i in range(0,K):\n        #print test_list[i]\n        output.append(test_list[i])\n    return output\n",
        "num_ids": 44
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) < K:\n        print(\"Error: list less than K\")\n        return\n    k_records = []\n    for i in range(0, K):\n        min = test_list[0]\n        for rec in test_list:\n            if rec[1] < min[1]:\n                min = rec\n        k_records.append(min)\n        test_list.remove(min)\n    return k_records\n",
        "num_ids": 111
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return [x for (y, x) in sorted(test_list, key=lambda x: x[1])[:K]]\n",
        "num_ids": 33
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # k is assumed to be > 0\n    # using test cases\n    # test_list = [('j', 10), ('b', 9), ('c', 12), ('d', 13), ('a', 11), ('e', 12)]\n    # K = 2\n    # result = ['a', 'b']\n    # expected = ['a', 'b']\n    # assert(min_k(test_list, K) == result)\n    \n    # test case 2\n    # test_list = [('a', 5), ('b', 2), ('c', 3), ('d', 4), ('e', 1), ('f', 6), ('g', 7)]\n    # K = 3\n    # result = ['c', 'd', 'e']\n    # expected = ['c', 'd', 'e']\n    # assert(min_k(test_list, K) == result)\n    \n    # test case 3\n    # test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7)]\n    # K = 3\n    # result = ['a', 'b', 'g']\n    # expected = ['a', 'b', 'g']\n    # assert(min_k(test_list, K) == result)\n",
        "num_ids": 308
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list based on the first item in the tuple\n    test_list = sorted(test_list, key = lambda x: x[0])\n    # Sort the list based on the second item in the tuple\n    test_list = sorted(test_list, key = lambda x: x[1])\n    # Sort the list based on the third item in the tuple\n    test_list = sorted(test_list, key = lambda x: x[2])\n",
        "num_ids": 107
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if not test_list:\n        return None\n    if K > len(test_list):\n        return None\n    # sort the list based on first column\n    test_list.sort(key = lambda x: x[0])\n    # now we sort based on second column\n    test_list.sort(key = lambda x: x[1])\n    # now we sort based on third column\n    test_list.sort(key = lambda x: x[2])\n    # now we sort based on fourth column\n    test_list.sort(key = lambda x: x[3])\n    # now we sort based on fifth column\n    test_list.sort(key = lambda x: x[4])\n    # now we sort based on sixth column\n    test_list.sort(key = lambda x: x[5])\n    # now we sort based on seventh column\n    test_list.sort(key = lambda x: x[6])\n    # now we sort based on eighth column\n    test_list.sort(key = lambda x: x[7])\n    # now we sort based on ninth column\n    test_list.sort(key = lambda x: x[8])\n    # now we sort based on tenth column\n    test_list.sort(key = lambda x: x[9])\n    # now we sort based on eleventh column\n    test_list.sort(key = lambda x: x[10])\n    # now we sort based on twelfth column\n    test_list.sort(key = lambda x: x[11])\n    # now we sort based on thirteenth column\n    test_list.sort(key = lambda x: x[12])\n    # now we sort based on fourteenth column\n    test_list.sort(key = lambda x: x[13])\n    # now we sort based on fifteenth column\n    test_list.sort(key = lambda x: x[14])\n    # now we sort based on sixteenth column\n    test_list.sort(key = lambda x: x[15])\n    # now we sort based on seventeenth column\n    test_list.sort(key = lambda x: x[16])\n    # now we sort based on eighteenth column\n    test_list.sort(key = lambda x: x[17])\n    # now we sort based on nineteenth column\n    test_list.sort(key = lambda x: x[18])\n    # now we sort based on twentieth column\n    test_list.sort(key = lambda x: x[19])\n    # now we sort based on twentyth column\n    test_list.sort(key = lambda x: x[20])\n    # now we sort based on twenty-first column\n    test_list.sort(key = lambda x: x[21])\n    # now we sort based on twenty-second column\n    test_list.sort(key = lambda x: x[22])\n    # now we sort based on twenty-third column\n    test_list.sort(key = lambda x: x[23])\n    # now we sort based on twenty-fourth column\n    test_list.sort(key = lambda x: x[24])\n    # now we sort based on twenty-fifth column\n    test_list.sort(key = lambda x: x[25])\n    # now we sort based on twenty-sixth column\n    test_list.sort(key = lambda x: x[26])\n    # now we sort based on twenty-seventh column\n    test_list.sort(key = lambda x: x[27])\n    # now we sort based on twenty-eighth column\n    test_list.sort(key = lambda x: x[28])\n    # now we sort based on twenty-ninth column\n    test_list.sort(key = lambda x: x[29])\n    # now we sort based on twenty-tenth column\n    test_list.sort(key = lambda x: x[30])\n    # now we sort based on twenty-eleventh column\n    test_list.sort(key = lambda x: x[31])\n    # now we sort based on twenty-twelfth column\n    test_list.sort(key = lambda x: x[32])\n    # now we sort based on twenty-thirteenth column\n    test_list.sort(key = lambda x: x[33])\n    # now we sort based on twenty-fourteenth column\n    test_list.sort(key = lambda x: x[34])\n    # now we sort based on twenty-fifteenth column\n    test_list.sort(key = lambda x: x[35])\n    # now we sort based on twenty-sixteenth column\n    test_list.sort(key = lambda x: x[36])\n    # now we sort based on twenty-seventeenth column\n    test_list.sort(key = lambda x: x[37])\n    # now we sort based on twenty-eighteenth column\n    test_list.sort(key = lambda x: x[38])\n    # now we sort based on twenty-nineteenth column\n    test_list.sort(key = lambda x: x[39])\n    # now we sort based on twenty-tentieth column\n    test_list.sort(key = lambda x: x[40])\n    # now we sort based on twenty-eleventieth column\n    test_list.sort(key = lambda x: x[41])\n    # now we sort based on twenty-twentyth column\n    test_list.sort(key = lambda x: x[42])\n    # now we sort based on twenty-twenty-first column\n    test_list.sort(key = lambda x: x[43])\n    # now we sort based on twenty-twenty-second column\n    test_list.sort(key = lambda x: x[44])\n    # now we sort based on twenty-twenty-third column\n    test_list.sort(key = lambda x: x[45])\n    # now we sort based on twenty-twenty-fourth column\n    test_list.sort(key = lambda x: x[46])\n    # now we sort based on twenty-twenty-fifth column\n    test_list.sort(key = lambda x: x[47])\n    # now we sort based on twenty-twenty-sixth column\n    test_list.sort(key = lambda x: x[48])\n    # now we sort based on twenty-twenty-seventh column\n    test_list.sort(key = lambda x: x[49])\n    # now we sort based on twenty-twenty-eighth column\n    test_list.sort(key = lambda x: x[50])\n    # now we sort based on twenty-twenty-ninth column\n    test_list.sort(key = lambda x: x[51])\n    # now we sort based on twenty-twenty-tenth column\n    test_list.sort(key = lambda x: x[52])\n    # now we sort based on twenty-twenty-eleventh column\n    test_list.sort(key = lambda x: x[53])\n    # now we sort based on twenty-twenty-twelfth column\n    test_list.sort(key = lambda x: x[54])\n    # now we sort based on twenty-twenty-thirteenth column\n    test_list.sort(key = lambda x: x[55])\n    # now we sort based on twenty-twenty-fourteenth column\n    test_list.sort(key = lambda x: x[56])\n    # now we sort based on twenty-twenty-fifteenth column\n    test_list.sort(key = lambda x: x[57])\n    # now we sort based on twenty-twenty-sixteenth column\n    test_list.sort(key = lambda x: x[58])\n    # now we sort based on twenty-twenty-seventeenth column\n    test_list.sort(key = lambda x: x[59])\n    # now we sort based on twenty-twenty-eighteenth column\n    test_list.sort(key = lambda x: x[60])\n    # now we sort based on twenty-twenty-nineteenth column\n    test_list.sort(key = lambda x: x[61])\n    # now we sort based on twenty-twenty-tenth column\n    test_list.sort(key = lambda x: x[62])\n    # now we sort based on twenty-twenty-eleventieth column\n    test_list.sort(key = lambda x: x[63])\n    # now we sort based on twenty-twenty-twentyth column\n    tes",
        "num_ids": 1975
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if K < 1:\n        return None\n    if K == len(test_list):\n        return test_list\n    if len(test_list) == 0:\n        return None\n    if len(test_list) == 1:\n        return test_list\n    if len(test_list) == 2:\n        return test_list[0] if test_list[0][1] <= test_list[1][1] else test_list[1]\n    pivot = test_list[0][1]\n    left_list = [x for x in test_list if x[1] <= pivot]\n    right_list = [x for x in test_list if x[1] > pivot]\n    left_k = min_k(left_list, K)\n    right_k = min_k(right_list, K-len(left_list))\n    return left_k if len(left_k) < len(right_k) else right_k\n",
        "num_ids": 229
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = [item for item in l1 if item in l2 and item in l3]\n    return result\n",
        "num_ids": 28
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return l1[:]\n",
        "num_ids": 9
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n",
        "num_ids": 70
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    if not l1 or not l2 or not l3:\n        return []\n    return list(set(l1) & set(l2) & set(l3))\n",
        "num_ids": 43
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_map = {}\n    for i in range(len(l1)):\n        if l1[i] not in index_map:\n            index_map[l1[i]] = [i]\n        else:\n            index_map[l1[i]].append(i)\n",
        "num_ids": 71
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l4 = []\n    for i in xrange(len(l1)):\n        if l1[i] in l2 and l2[i] in l3:\n            l4.append(l1[i])\n    return l4\n",
        "num_ids": 60
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    m = min(len(l1),len(l2),len(l3))\n    l = []\n    for i in range(m):\n        if l1[i] == l2[i] == l3[i]:\n            l.append(l1[i])\n    return l\n    \ndef test_extract_index_list():\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,10],[3,6,9,12,15]) == [2,4,6]\n    assert extract_index_list([1,2,3,4,5,6],[2,4,6,8,1",
        "num_ids": 1976
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    new_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            new_list.append(l1[i])\n    return new_list\n",
        "num_ids": 61
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_map = {}\n    for i in range(len(l1)):\n        index_map[l1[i]] = index_map.get(l1[i], 0) + 1\n    \n    common_indexes = []\n    for i in range(len(l2)):\n        if l2[i] in index_map:\n            common_indexes.append(i)\n            index_map[l2[i]] = index_map.get(l2[i]) - 1\n            if index_map[l2[i]] == 0:\n                del index_map[l2[i]]\n    \n    for i in range(len(l3)):\n        if l3[i] in index_map:\n            common_indexes.append(i)\n            index_map[l3[i]] = index_map.get(l3[i]) - 1\n            if index_map[l3[i]] == 0:\n                del index_map[l3[i]]\n",
        "num_ids": 239
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    i1 = 0\n    i2 = 0\n    i3 = 0\n",
        "num_ids": 20
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if not numbers:\n        return None\n    if len(numbers) == 1:\n        return numbers[0]\n",
        "num_ids": 30
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if numbers == []:\n        return None\n    if len(numbers) == 1:\n        return numbers[0]\n    elif len(numbers) == 2:\n        return min(numbers)\n    elif len(numbers) > 2:\n        numbers.remove(min(numbers))\n        return min(numbers)",
        "num_ids": 82
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]\n",
        "num_ids": 25
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if not numbers:\n        return None\n    numbers.sort()\n    return numbers[1]\n",
        "num_ids": 26
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if not numbers:\n        raise ValueError('Cannot compute the second smallest value of an empty list')\n    smallest = min(numbers)\n    second_smallest = None\n    for num in numbers:\n        if num!= smallest and (second_smallest is None or num < second_smallest):\n            second_smallest = num\n    return second_smallest\n",
        "num_ids": 89
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]\n",
        "num_ids": 25
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if not numbers:\n        return\n    numbers = list(set(numbers))\n    numbers.sort()\n    return numbers[1]\n",
        "num_ids": 37
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] < numbers[smallest_index]:\n            smallest_index = i\n    return smallest_index\n",
        "num_ids": 54
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if not numbers:\n        return None\n    \n    if len(numbers) == 1:\n        return numbers[0]\n    \n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]\n",
        "num_ids": 57
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    curr_min = None\n    second_min = None\n    \n    for i in range(len(numbers)):\n        if curr_min is None:\n            curr_min = numbers[i]\n            second_min = curr_min\n        elif second_min is None:\n            second_min = curr_min\n            curr_min = numbers[i]\n        elif numbers[i] < curr_min:\n            second_min = curr_min\n            curr_min = numbers[i]\n        elif numbers[i] < second_min:\n            second_min = numbers[i]\n    \n    return second_min\n",
        "num_ids": 177
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    # This is the regular expression to match a sequence of characters\n    # that are 'a' followed by one or more characters that are 'b'.\n    # The first group matches the first 'a' in the string.\n    pattern = re.compile(r\"(?P<first_a>a)b+\")\n",
        "num_ids": 76
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab+'\n    if re.match(pattern, text):\n        return \"Match 1\"\n    return \"Not a match\"\n",
        "num_ids": 37
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.match(r'ab*', text)\n    if match:\n        return True\n    else:\n        return False\n    \ndef text_match_zero_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-4.php\n    '''\n    match = re.match(r'ab?', text)\n    if match:\n        return True\n    else:\n        return False\n    \ndef text_match_zero_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-5.php\n    '''\n    match = re.match(r'ab+', text)\n    if match:\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.match(r'a(.*)b', text)\n    if match:\n        print(match.group())\n    else:\n        print('none')\n",
        "num_ids": 43
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.search(r'a(.*?)b',text):\n        return re.search(r'a(.*?)b',text).group(1)\n    else:\n        return None\ndef text_match_zero_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-4.php\n    '''\n    if re.search(r'a(.*?)b',text):\n        return re.search(r'a(.*?)b',text).group(1)\n    elif re.search(r'a(.*)b',text):\n        return re.search(r'a(.*?)b',text).group(1)\n    else:\n        return None\ndef text_match_zero_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-5.php\n    '''\n    if re.search(r'a(.*)b',text):\n        return re.search(r'a(.*)b',text).group(1)\n    else:\n        return None\ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-6.php\n    '''\n    if re.search(r'a(.*)b',text):\n        return re.search(r'a(.*)b',text).group(1)\n    else:\n        return None\ndef text_match_at_least_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by at least one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-7.php\n    '''\n    if re.search(r'a(.*)b',text):\n        return re.search(r'a(.*)b',text).group(1)\n    else:\n        return None\ndef text_match_at_least_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by at least one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-8.php\n    '''\n    if re.search(r'a(.*)b',text):\n        return re.search(r'a(.*)b',text).group(1)\n    else:\n        return None\ndef text_match_at_most_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by at most one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-9.php\n    '''\n    if re.search(r'a(.*)b',text):\n        return re.search(r'a(.*)b',text).group(1)\n    else:\n        return None\ndef text_match_exactly_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by exactly one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-10.php\n    '''\n    if re.search(r'a(.*)b',text):\n        return re.search(r'a(.*)b',text).group(1)\n    else:\n        return None\ndef text_match_exactly_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by exactly zero 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-11.php\n    '''\n    if re.search(r'a(.*)b',text):\n        return re.search(r'a(.*)b',text).group(1)\n    else:\n        return None\ndef text_match_anything(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything (including an empty string). https://www.w3resource.com/python-exercises/re/python-re-exercise-12.php\n    '''\n    if re.search(r'a(.*)b',text):\n        return re.search(r'a(.*)b',text).group(1)\n    else:\n        return None\ndef text_match_empty(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by empty string. https://www.w3resource.com/python-exercises/re/python-re-exercise-13.php\n    '''\n    if re.search(r'a(.*)b',text):\n        return re.search(r'a(.*)b',text).group(1)\n    else:\n        return None\ndef text_match_dot(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-14.php\n    '''\n    if re.search(r'a(.*)b',text):\n        return re.search(r'a(.*)b',text).group(1)\n    else:\n        return None\ndef text_match_not_dot(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything except a 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-15.php\n    '''\n    if re.search(r'a(.*)b',text):\n        return re.search(r'a(.*)b',text).group(1)\n    else:\n        return None\ndef text_match_not_empty(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by something other than an empty string. https://www.w3resource.com/python-exercises/re/python-re-exercise-16.php\n    '''\n    if re.search(r'a(.*)b',text):\n        return re.search(r'a(.*)b',text).group(1)\n    else:\n        return None\ndef text_match_end_with(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-17.php\n    '''\n    if re.search(r'a(.*)b$',text):\n        return re.search(r'a(.*)b$',text).group(1)\n    else:\n        return None\ndef text_match_end_with_no_word(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything that is not a word. https://www.w3resource.com/python-exercises/re/python-re-exercise-18.php\n    '''\n    if re.search(r'a(.*)b',text):\n        return re.search(r'a(.*)b',text).group(1)\n    else:\n        return None\ndef text_match_end_with_one_of(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-19.php\n    '''\n    if re.search(r'a(.*)b',text):\n        return re.search(r'a(.*)b',text).group(1",
        "num_ids": 38
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # \\b    Matches the empty word boundary 'b'\n    # \\B    Matches the non-empty word boundary 'b'\n    # \\w    Matches 'a' along with the rest of the word. '\\w' is equivalent to '[a-zA-Z0-9_]'\n    # \\W    Matches the non-word character. '\\W' is equivalent to '[^a-zA-Z0-9_]'\n    pattern = re.compile(r'\\ba*b\\b')\n    if pattern.search(text) is not None:\n        print(\"Found match: {}\".format(pattern.search(text).group()))\n    else:\n        print(\"No match found\")\n",
        "num_ids": 169
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'(?<=\\b)a(?=\\s*\\b)*', text)\n    return match!= None\n",
        "num_ids": 39
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    p = re.compile(r\"(ab+|b*)\")\n    m = p.search(text)\n    return m\n",
        "num_ids": 33
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'\\ba+?\\b', text)\n    if match:\n        print(match.group())\n    else:\n        print('Not found')\n",
        "num_ids": 45
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search(\"a.+b\",text)\n",
        "num_ids": 16
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n",
        "num_ids": 64
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i][::-1] == test_list[j] and i < j:\n                count += 1\n    return count\n",
        "num_ids": 69
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Using dictionary for counting reverse pairs\n    dictionary = {}\n    for string in test_list:\n        # if reverse of string is present in the dictionary then increment the count\n        if string[::-1] in dictionary:\n            dictionary[string[::-1]] += 1\n        else:\n            # else append the string to the dictionary\n            dictionary[string] = 1\n",
        "num_ids": 90
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n",
        "num_ids": 68
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pairs = 0\n    for i in range(0, len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                pairs += 1\n    return pairs\n",
        "num_ids": 76
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pairs = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i < j and test_list[i] == test_list[j][::-1]:\n                pairs += 1\n    return pairs\n",
        "num_ids": 70
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    result = []\n    for string in test_list:\n        result.append(string[::-1])\n    return result\n",
        "num_ids": 32
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] == test_list[len(test_list)-1-j]:\n                count +=1\n    print count\n",
        "num_ids": 68
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for word1 in test_list:\n        for word2 in test_list:\n            if word1 == word2[::-1]:\n                count += 1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                return test_list[i], test_list[j]\n",
        "num_ids": 65
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    tup_list = list()\n    dict_1 = {}\n    for i in list1:\n        l = list(i)\n        tup_list.append(tuple(l))\n    for i in tup_list:\n        if i in dict_1:\n            dict_1[i] = dict_1[i]+1\n        else:\n            dict_1[i] = 1\n    return dict_1\n",
        "num_ids": 103
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result = {}\n    for sublist in list1:\n        for item in sublist:\n            result[item] = result.get(item, 0) + 1\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return {tuple(list1[i:i+2]) for i in range(len(list1))}\n",
        "num_ids": 29
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dictionary = {}\n    for l in list1:\n        t = tuple(l)\n        if t not in dictionary:\n            dictionary[t] = 1\n        else:\n            dictionary[t] += 1\n    return dictionary\n",
        "num_ids": 58
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = dict()\n    for i in list1:\n        for j in i:\n            d.setdefault(j, 0)\n            d[j] += 1\n    return d\n",
        "num_ids": 46
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict = {}\n    for i in list1:\n        if tuple(i) not in dict.keys():\n            dict[tuple(i)] = [i]\n        else:\n            dict[tuple(i)].append(i)\n    return dict\n    \n    \ndef string_to_dict(string):\n    dict = {}\n    \n    for letter in string:\n        if letter in dict.keys():\n            dict[letter] += 1\n        else:\n            dict[letter] = 1\n    return dict\n",
        "num_ids": 123
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list_dict = {}\n    for i in list1:\n        list_dict[tuple(i)] = list_dict.get(tuple(i),0) + 1\n    return list_dict\n",
        "num_ids": 50
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for i in list1:\n        if tuple(i) not in sublists.keys():\n            sublists[tuple(i)] = 1\n        else:\n            sublists[tuple(i)] += 1\n    return sublists\n",
        "num_ids": 63
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict = {}\n    for each in list1:\n        #print each\n        #print type(each)\n        tuple1 = tuple(each)\n        #print type(tuple1)\n        if tuple1 in dict:\n            dict[tuple1] += 1\n        else:\n            dict[tuple1] = 1\n    return dict\n",
        "num_ids": 84
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict1 = {}\n    for sublist in list1:\n        for item in sublist:\n            if item not in dict1.keys():\n                dict1[item] = [sublist]\n            else:\n                dict1[item].append(sublist)\n    return dict1\n",
        "num_ids": 69
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # A decimal number can be split into three parts: int, decimal_part, and exponent.\n    # Given a string containing a decimal number with a precision of 2, the number of characters in the string can be calculated from the number of characters after the decimal point.\n    # The first character is an optional sign, then the int part, and the exponent part. \n    # Since the exponent part cannot be less than -1, the exponent part cannot be less than 1.\n    # If the exponent part is 0, the int part can be any number but -1.\n    # If the exponent part is 1, the int part is the sign of the number. \n    # If the int part is 0, the number is 0. \n    # Otherwise, the number is positive, and the sign is +. \n    # The exponent part can be any positive number that is less than the precision of the number.\n    # Time - O(n)\n    # Space - O(n)\n    # edge cases - float can be 2*precision digits\n    if num == '':\n        return False\n    sign = 1\n    if num[0] == '-':\n        sign = -1\n        num = num[1:]\n    if num[0] == '+':\n        num = num[1:]\n    if num[0] == '0':\n        return True\n    if num == '.':\n        return False\n    decimal_part = num[num.index('.') + 1:]\n    if len(decimal_part) > 2:\n        return False\n    int_part = num[:num.index('.')]\n    if len(int_part) == 0:\n        int_part = '0'\n    int_part = int_part[::-1]\n    exponent_part = num[num.index('.') + 1:]\n    if exponent_part[0] == '0' and len(exponent_part) > 1:\n        return False\n    # test for int part\n    if int_part[0] == '0':\n        return False\n    if int_part[-1] == '0' and len(int_part) > 1:\n        return False\n    # test for exponent part\n    if int_part[0]!= '0' and int_part[-1]!= '0':\n        return False\n    if int_part[0] == '0' and int_part[-1] == '0':\n        return True\n    if int_part[0] == '0' and len(int_part) == 1:\n        return False\n    if int_part[0] == '+' and int_part[-1]!= '0':\n        return False\n    if int_part[0] == '-' and int_part[-1]!= '0':\n        return False\n    if int_part[0]!= '-' and int_part[0]!= '+' and int_part[-1] == '0':\n        return False\n    # test for exponent part\n    if int_part[0] == '-' and len(int_part) > 1:\n        return False\n    if int_part[-1] == '1':\n        return False\n    if int_part[0] == '+' and len(int_part) > 1:\n        return False\n    if int_part[0] == '-' and len(int_part) > 1:\n        return False\n    if int_part[0]!= '-' and int_part[0]!= '+' and int_part[-1]!= '1':\n        return False\n    if int_part[0] == '+' and int_part[-1] == '1':\n        return False\n    if int_part[0] == '-' and int_part[-1] == '1':\n        return False\n    if int_part[0]!= '+' and int_part[0]!= '-' and int_part[-1] == '1':\n        return False\n    # test for int part\n    if int_part[0] == '-' and int_part[-1]!= '1':\n        return False\n    if int_part[0] == '+' and int_part[-1]!= '1':\n        return False\n    if int_part[0]!= '+' and int_part[0]!= '-' and int_part[-1]!= '1':\n        return False\n    if int_part[0] == '-' and int_part[-1] == '1':\n        return False\n    if int_part[0] == '+' and int_part[-1] == '1':\n        return False\n    # test for decimal part\n    if len(decimal_part) == 0:\n        return True\n    if len(decimal_part) > 2:\n        return False\n    if len(decimal_part) == 1:\n        if decimal_part[0] == '0' and len(decimal_part) == 1:\n            return True\n        if decimal_part[0] == '+' and len(decimal_part) == 1:\n            return True\n        if decimal_part[0] == '-' and len(decimal_part) == 1:\n            return True\n        if decimal_part[0]!= '+' and decimal_part[0]!= '-' and len(decimal_part) == 1:\n            return False\n    if decimal_part[0] == '+' and len(decimal_part) == 1:\n        return True\n    if decimal_part[0] == '-' and len(decimal_part) == 1:\n        return True\n    if decimal_part[0]!= '+' and decimal_part[0]!= '-' and len(decimal_part) == 1:\n        return False\n    if len(decimal_part) == 2:\n        if decimal_part[0] == '0' and decimal_part[1] == '0' and len(decimal_part) == 2:\n            return True\n    return True\n",
        "num_ids": 1434
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return re.match('^[-+]?\\d*\\.\\d*$', num) is not None\n    # return True if re.match('^[-+]?\\d*\\.\\d*$', num) is not None else False\n",
        "num_ids": 59
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if not isinstance(num, (int, float)):\n        return False\n    if num == 0:\n        return True\n    if num < 0:\n        return False\n    return len(str(num)) < 2\n",
        "num_ids": 54
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if type(num)!= str:\n        return False\n    if num.isnumeric():\n        return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except:\n        return False\n    else:\n        return True\n",
        "num_ids": 28
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    precision = 2\n    if num.count('.') > 1:\n        return False\n    try:\n        num = float(num)\n        return True\n    except ValueError:\n        return False\n    except TypeError:\n        return False\n    except:\n        return False\n    else:\n        return False\n    finally:\n        return False\n",
        "num_ids": 85
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    is_num = False\n    if '.' in num:\n        num_split = num.split('.')\n        if len(num_split) == 2 and len(num_split[1]) < 2:\n            is_num = True\n    return is_num\n",
        "num_ids": 65
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    n = len(num)\n    if n < 2:\n        return False\n    if num[0] == '+' or num[0] == '-':\n        return False\n    for i in range(1, n):\n        if num[i]!= '0' and num[i]!= '1':\n            return False\n    return True\n",
        "num_ids": 86
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if len(num) == 0:\n        return False\n    return num.count('.') == 1 and num.replace('.', '', 1).isdigit()\n",
        "num_ids": 42
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(arr) == len(set(arr))\n",
        "num_ids": 16
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    d = {}\n    for i in arr:\n        if i not in d:\n            d[i] = 1\n        else:\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in range(0,len(arr)):\n        for j in range(0,len(arr)):\n            if arr[i]==arr[j] and i!=j:\n                return False\n    return True\n    \n",
        "num_ids": 58
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr = sorted(arr)\n    for i in range(0,len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return False\n    return True\n    \ndef print_pattern(size):\n    '''\n    Write a python function to print a pattern of \"*\" with given number of rows and columns.\n    '''\n    for i in range(1,size+1):\n        for j in range(1,size+1):\n            if j < size:\n                print(\"*\",end=\"\")\n            else:\n                print(\"*\",end=\"\\n\")\n    print()\n    \ndef in_order_traversal(node):\n    '''\n    Write a python function to print the in order traversal of a given binary tree.\n    '''\n    if node == None:\n        return\n    in_order_traversal(node.left)\n    print(node.data,end=\" \")\n    in_order_traversal(node.right)\n    \ndef pre_order_traversal(node):\n    '''\n    Write a python function to print the pre order traversal of a given binary tree.\n    '''\n    if node == None:\n        return\n    print(node.data,end=\" \")\n    pre_order_traversal(node.left)\n    pre_order_traversal(node.right)\n    \ndef post_order_traversal(node):\n    '''\n    Write a python function to print the post order traversal of a given binary tree.\n    '''\n    if node == None:\n        return\n    post_order_traversal(node.left)\n    post_order_traversal(node.right)\n    print(node.data,end=\" \")\n    \ndef sorted_array_to_BST(arr):\n    '''\n    Write a python function to create a balanced BST from given array in O(n) time.\n    '''\n    if len(arr) == 0:\n        return None\n    mid = len(arr)//2\n    root = Node(arr[mid])\n    root.left = sorted_array_to_BST(arr[:mid])\n    root.right = sorted_array_to_BST(arr[mid+1:])\n    return root\n    \ndef reverse_list(node):\n    '''\n    Write a python function to reverse a linked list in O(n) time.\n    '''\n    previous = None\n    current = node\n    while current:\n        next = current.next\n        current.next = previous\n        previous = current\n        current = next\n    return previous\n    \ndef check_balanced(node):\n    '''\n    Write a python function to determine if a binary tree is balanced or not.\n    '''\n    if node == None:\n        return True\n    if abs(get_depth(node.left) - get_depth(node.right)) > 1:\n        return False\n    return check_balanced(node.left) and check_balanced(node.right)\n    \ndef get_depth(node):\n    '''\n    Write a python function to get the depth of a given binary tree.\n    '''\n    if node == None:\n        return 0\n    return max(get_depth(node.left),get_depth(node.right)) + 1\n    \ndef k_closest_nodes(node,k):\n    '''\n    Write a python function to find k closest nodes to a given node in a binary tree.\n    '''\n    if node == None:\n        return\n    if k == 1:\n        return node\n    elif k > 1:\n        k_closest_nodes(node.left,k-1)\n        k_closest_nodes(node.right,k-1)\n    \ndef to_mirror_tree(root):\n    '''\n    Write a python function to convert a tree into mirror tree.\n    '''\n    if root == None:\n        return\n    to_mirror_tree(root.left)\n    to_mirror_tree(root.right)\n    if root.left:\n        root.left.right = root\n    if root.right:\n        root.right.left = root\n    \ndef print_spiral_tree(node):\n    '''\n    Write a python function to print the spiral traversal of a given binary tree.\n    '''\n    if node == None:\n        return\n    print(node.data,end=\" \")\n    if node.left:\n        print_spiral_tree(node.left)\n    if node.right:\n        print_spiral_tree(node.right)\n    if node.left and node.right:\n        print_spiral_tree(node.right)\n        print_spiral_tree(node.left)\n    \ndef print_zigzag_tree(node):\n    '''\n    Write a python function to print the zigzag traversal of a given binary tree.\n    '''\n    if node == None:\n        return\n    if node.left:\n        print_zigzag_tree(node.left)\n    if node.right:\n        print_zigzag_tree(node.right)\n    print(node.data,end=\" \")\n    if node.right:\n        print_zigzag_tree(node.right)\n    if node.left:\n        print_zigzag_tree(node.left)\n    \ndef print_left_view_tree(node):\n    '''\n    Write a python function to print the left view of a given binary tree.\n    '''\n    if node == None:\n        return\n    if node.left:\n        print(node.data,end=\" \")\n    print_left_view_tree(node.left)\n    print_left_view_tree(node.right)\n    \ndef print_right_view_tree(node):\n    '''\n    Write a python function to print the right view of a given binary tree.\n    '''\n    if node == None:\n        return\n    if node.right:\n        print(node.data,end=\" \")\n    print_right_view_tree(node.left)\n    print_right_view_tree(node.right)\n    \ndef print_left_right_view_tree(node):\n    '''\n    Write a python function to print the left view of a given binary tree.\n    '''\n    if node == None:\n        return\n    if node.left:\n        print(node.data,end=\" \")\n    print_left_view_tree(node.left)\n    print_right_view_tree(node.right)\n    \ndef print_bottom_view_tree(node):\n    '''\n    Write a python function to print the bottom view of a given binary tree.\n    '''\n    if node == None:\n        return\n    stack = []\n    m = {}\n    h = get_height(node)\n    for i in range(1,h+1):\n        stack.append(node)\n        node = node.left\n    while len(stack)!= 0:\n        node = stack.pop()\n        if node.data not in m:\n            m[node.data] = True\n        if node.right:\n            stack.append(node.right)\n        if node.left:\n            stack.append(node.left)\n    for i in range(1,h+1):\n        print(m[i],end=\" \")\n    \ndef get_height(node):\n    '''\n    Write a python function to get the height of a given binary tree.\n    '''\n    if node == None:\n        return 0\n    return max(get_height(node.left),get_height(node.right)) + 1\n    \ndef get_all_paths(node,path):\n    '''\n    Write a python function to get all possible paths from the root to a given node in a binary tree.\n    '''\n    if node == None:\n        return\n    path.append(node.data)\n    if node.left == None and node.right == None:\n        print(path)\n    get_all_paths(node.left,path)\n    get_all_paths(node.right,path)\n    \ndef find_path(node,target):\n    '''\n    Write a python function to find the path from root to the target node in a binary tree.\n    '''\n    if node == None:\n        return\n    if node.data == target",
        "num_ids": 19
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    a=set(arr)\n    if len(a) == len(arr):\n        print \"List is Unique\"\n    else:\n        print \"List is Not Unique\"\n",
        "num_ids": 43
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    d = {}\n    for i in arr:\n        if i in d:\n            return False\n        else:\n            d[i] = 1\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(arr) == len(set(arr))\n",
        "num_ids": 16
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    elem = None\n    for i in arr:\n        if elem == i:\n            return False\n        else:\n            elem = i\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        return True\n    else:\n        for i in range(1,len(arr)):\n            if arr[0] == arr[i]:\n                return False\n        return True\n",
        "num_ids": 69
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)==1:\n        return True\n    else:\n        arr=sorted(arr)\n        if arr[0]==arr[1]:\n            return False\n        else:\n            return True\ndef sum_even_and_odd(arr):\n    '''\n    Write a python function to find sum of even and odd numbers in a list of numbers\n    '''\n    even=0\n    odd=0\n    for i in arr:\n        if i%2==0:\n            even=even+i\n        else:\n            odd=odd+i\n    return even,odd\ndef find_missing_elements(arr1,arr2):\n    '''\n    Write a python function to find all the missing elements of two lists and return a list of missing elements.\n    '''\n    arr3=[]\n    for i in arr1:\n        if i not in arr2:\n            arr3.append(i)\n    return arr3\ndef main():\n    '''\n    Write a python function to find common elements in two lists\n    '''\n    arr1=[1,2,3,5,7]\n    arr2=[1,2,4,5,8,9]\n    print(unique_Element(arr1))\n    print(unique_Element(arr2))\n    print(sum_even_and_odd(arr1))\n    print(sum_even_and_odd(arr2))\n    print(find_missing_elements(arr1,arr2))\nif __name__=='__main__':\n    main()",
        "num_ids": 117
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        print(\"Month number: %s\"%(monthnum3))\n        print(\"Number of days: 30\")\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        print(\"Month number: %s\"%(monthnum3))\n        print(\"Number of days: 31\")\n    else:\n        print(\"Month number: %s\"%(monthnum3))\n        print(\"Number of days: 28\")\n",
        "num_ids": 157
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in range(1,13):\n        return True\n    return False\n",
        "num_ids": 23
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    global month_day_number\n    if monthnum3 in month_day_number:\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        if ((year % 4 == 0) and (year % 100!= 0)) or (year % 400 == 0):\n            print '29 days'\n        else:\n            print '28 days'\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        print '30 days'\n    else:\n        print '31 days'\n",
        "num_ids": 102
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return 30\n    else:\n        return 31\n",
        "num_ids": 36
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 12:\n        return 30\n    elif monthnum3 < 12:\n        return 30\n    else:\n        return 0\n",
        "num_ids": 37
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [3,4,5,6,7,8,9,10,11,12]:\n        return 30\n    else:\n        return 31\n",
        "num_ids": 42
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in (4,6,9,11):\n        return True\n    else:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum3 in [4,6,9,11]:\n        return False\n    else:\n        return \"Invalid Month Number\"\n",
        "num_ids": 61
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in (1, 3, 5, 7, 8, 10, 12):\n        return True\n    elif monthnum3 == 2:\n        if check_leapyear_number(year):\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 71
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    res = arr[1]-arr[0]\n    for i in range(1,n):\n        if arr[i]-arr[i-1] < res:\n            res = arr[i]-arr[i-1]\n    return res\n",
        "num_ids": 65
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n==1:\n        return 0\n    max_element=arr[0]\n    min_element=arr[1]\n    arr.sort()\n    i=2\n    while i<n:\n        if arr[i]-arr[i-1] < min_element-max_element:\n            min_element=arr[i]-arr[i-1]\n        if arr[i]-max_element < min_element-arr[i]:\n            min_element=arr[i]-max_element\n        max_element=arr[i]\n        i+=1\n    return min_element\n",
        "num_ids": 142
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n < 3:\n        return None\n    arr = sorted(arr)\n    result = arr[1] - arr[0]\n    for i in range(2, n):\n        result = min(result, arr[i] - arr[i-1])\n    return result\n",
        "num_ids": 68
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr = sorted(arr) # sort the array\n    min_diff = arr[n-1] - arr[0] # Initialize min_diff as a big number\n    for i in range(n-1): # Iterate over the array\n        min_diff = min(min_diff, arr[i+1] - arr[i]) # Find the min diff between two adjacent elements\n    return min_diff\n",
        "num_ids": 96
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(1,n):\n        if arr[i] - arr[i-1] < min_diff:\n            min_diff = arr[i] - arr[i-1]\n    return min_diff\n",
        "num_ids": 76
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    diff = sys.maxsize\n",
        "num_ids": 10
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    res = arr[-1] - arr[0]\n    for i in range(1, n):\n        res = min(res, arr[i] - arr[i - 1])\n    return res\n",
        "num_ids": 56
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # if n is 2, then there is no point in doing further computations. \n    if n==2: \n        return arr[0],arr[1]\n",
        "num_ids": 41
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[1]-arr[0]\n    \n    for i in range(n-1):\n        for j in range(i+1, n):\n            min_diff = min(min_diff, arr[j]-arr[i])\n",
        "num_ids": 62
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # sort the array first\n    arr.sort()\n    # iterate through the array\n    for i in range(1,n):\n        # keep the minimum difference\n        min_diff = arr[i]-arr[i-1]\n        # if the difference is less than the current min, then update the min\n        if min_diff < min_diff:\n            min_diff = min_diff\n",
        "num_ids": 94
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n",
        "num_ids": 33
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    import string\n    number = 0\n    for i in str:\n        if i in string.digits:\n            number += 1\n    return number\ndef number_word(str):\n    '''\n    Write a python function to count number of words in a given string.\n    '''\n    import string\n    number = 0\n    for i in str.split():\n        if i not in string.digits:\n            number += 1\n    return number\ndef number_char(str):\n    '''\n    Write a python function to count number of characters in a given string.\n    '''\n    import string\n    number = 0\n    for i in str:\n        if i not in string.digits:\n            number += 1\n    return number\ndef count_word(str):\n    '''\n    Write a python function to count number of words in a given string.\n    '''\n    import re\n    count = 0\n    list_of_words = re.findall(r'\\w+', str)\n    return len(list_of_words)\ndef count_char(str):\n    '''\n    Write a python function to count number of characters in a given string.\n    '''\n    import re\n    count = 0\n    list_of_char = re.findall(r'\\S', str)\n    return len(list_of_char)\ndef count_digit(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    import re\n    count = 0\n    list_of_digit = re.findall(r'\\d', str)\n    return len(list_of_digit)\ndef count_lower(str):\n    '''\n    Write a python function to count number of lowercase letters in a given string.\n    '''\n    import re\n    count = 0\n    list_of_lower = re.findall(r'[a-z]', str)\n    return len(list_of_lower)\ndef count_upper(str):\n    '''\n    Write a python function to count number of uppercase letters in a given string.\n    '''\n    import re\n    count = 0\n    list_of_upper = re.findall(r'[A-Z]', str)\n    return len(list_of_upper)\ndef find_item(item, list):\n    '''\n    Write a python function to find an item in a list, return the index number if found,\n    return -1 if not found.\n    '''\n    import string\n    if item in list:\n        index = list.index(item)\n        return index\n    else:\n        return -1\ndef find_item_count(item, list):\n    '''\n    Write a python function to find an item in a list, return the count if found,\n    return 0 if not found.\n    '''\n    import string\n    if item in list:\n        number = 0\n        for i in list:\n            if i == item:\n                number += 1\n        return number\n    else:\n        return 0\ndef find_item_index(item, list):\n    '''\n    Write a python function to find an item in a list, return the index number if found,\n    return -1 if not found.\n    '''\n    import string\n    if item in list:\n        index = 0\n        for i in list:\n            if i == item:\n                return index\n            else:\n                index += 1\n    else:\n        return -1\ndef find_item_count(item, list):\n    '''\n    Write a python function to find an item in a list, return the count if found,\n    return 0 if not found.\n    '''\n    import string\n    if item in list:\n        number = 0\n        for i in list:\n            if i == item:\n                number += 1\n        return number\n    else:\n        return 0\ndef find_item_index(item, list):\n    '''\n    Write a python function to find an item in a list, return the index number if found,\n    return -1 if not found.\n    '''\n    import string\n    if item in list:\n        index = 0\n        for i in list:\n            if i == item:\n                return index\n            else:\n                index += 1\n    else:\n        return -1\ndef find_item_count(item, list):\n    '''\n    Write a python function to find an item in a list, return the count if found,\n    return 0 if not found.\n    '''\n    import string\n    if item in list:\n        number = 0\n        for i in list:\n            if i == item:\n                number += 1\n        return number\n    else:\n        return 0\ndef word_split(str):\n    '''\n    Write a python function to split a string into a list of words based on space delimiter.\n    '''\n    import string\n    return str.split()\ndef word_split(str):\n    '''\n    Write a python function to split a string into a list of words based on space delimiter.\n    '''\n    import string\n    return str.split()\ndef word_split(str):\n    '''\n    Write a python function to split a string into a list of words based on space delimiter.\n    '''\n    import string\n    return str.split()\ndef word_split(str):\n    '''\n    Write a python function to split a string into a list of words based on space delimiter.\n    '''\n    import string\n    return str.split()\ndef word_split(str):\n    '''\n    Write a python function to split a string into a list of words based on space delimiter.\n    '''\n    import string\n    return str.split()\ndef word_split(str):\n    '''\n    Write a python function to split a string into a list of words based on space delimiter.\n    '''\n    import string\n    return str.split()\ndef word_split(str):\n    '''\n    Write a python function to split a string into a list of words based on space delimiter.\n    '''\n    import string\n    return str.split()\ndef word_split(str):\n    '''\n    Write a python function to split a string into a list of words based on space delimiter.\n    '''\n    import string\n    return str.split()\ndef word_split(str):\n    '''\n    Write a python function to split a string into a list of words based on space delimiter.\n    '''\n    import string\n    return str.split()\ndef word_split(str):\n    '''\n    Write a python function to split a string into a list of words based on space delimiter.\n    '''\n    import string\n    return str.split()\ndef word_split(str):\n    '''\n    Write a python function to split a string into a list of words based on space delimiter.\n    '''\n    import string\n    return str.split()\ndef word_split(str):\n    '''\n    Write a python function to split a string into a list of words based on space delimiter.\n    '''\n    import string\n    return str.split()\ndef word_split(str):\n    '''\n    Write a python function to split a string into a list of words based on space delimiter.\n    '''\n    import string\n    return str.split()\ndef word_split(str):\n    '''\n    Write a python function to split a string into a list of words based on space delimiter.\n    '''\n    import string\n    return str.split()\ndef word_split(str):\n    '''\n    Write a python function to split a string into a list of words based on space delimiter.\n    '''\n    import string\n    return str.split()\ndef word_split(str):\n    '''\n    Write a python function to split a string into a list of words based on space delimiter.\n    '''\n    import string\n    return str.split()\ndef word_split(str):\n    '''\n    Write a python function to split a string into a list of words based on space delimiter.\n    '''\n    import string\n    return str.split()\ndef word_split(str):\n    '''\n    Write a python function to split a string into a list of words based on space delimiter.\n    '''\n    import string\n    return str.split()\ndef word_split(str):\n    '''\n    Write a python function to split a string into a list of words based on space delimiter.\n    ''",
        "num_ids": 25
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr+=1\n    return ctr\n",
        "num_ids": 33
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n    ",
        "num_ids": 10
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum([1 for i in str if i.isdigit()])\n",
        "num_ids": 20
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    length=len(str)\n    count=0\n    for i in range(length):\n        if str[i]>='0' and str[i]<='9':\n            count+=1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n",
        "num_ids": 33
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    n = 0\n    for i in str:\n        if i.isdigit():\n            n += 1\n    return n\n    \ndef has_number(str):\n    '''\n    Write a python function to check if a string has a number in it.\n    '''\n    for i in str:\n        if i.isdigit():\n            return True\n    return False\n    \ndef find_length(str):\n    '''\n    Write a python function to find the length of the longest substring without repeating characters.\n    '''\n    n = len(str)\n    if n == 0:\n        return 0\n    i = 0\n    j = 0\n    maxlen = 0\n    temp = str[0]\n    while i < n:\n        if str[i] == temp:\n            j += 1\n            i += 1\n        else:\n            if maxlen < j:\n                maxlen = j\n                temp = str[i]\n            else:\n                temp = str[i]\n                j = 1\n                i += 1\n    if maxlen < j:\n        maxlen = j\n    return maxlen\n    \ndef find_repetition(str):\n    '''\n    Write a python function to find the length of the longest substring without repeating characters.\n    '''\n    n = len(str)\n    if n == 0:\n        return 0\n    i = 0\n    j = 0\n    maxlen = 0\n    temp = str[0]\n    while i < n:\n        if str[i] == temp:\n            j += 1\n            i += 1\n        else:\n            if maxlen < j:\n                maxlen = j\n                temp = str[i]\n            else:\n                temp = str[i]\n                j = 1\n                i += 1\n    if maxlen < j:\n        maxlen = j\n    return maxlen\n    \ndef max_area(height):\n    '''\n    Write a python function to find the maximum area under a histogram with n non-negative bars.\n    '''\n    maxarea = 0\n    n = len(height)\n    for i in range(n):\n        maxarea = max(maxarea, min(height[i:n])*(n-i))\n    return maxarea\n    \ndef max_area_2(height):\n    '''\n    Write a python function to find the maximum area under a histogram with n non-negative bars.\n    '''\n    n = len(height)\n    maxarea = 0\n    left = [0 for i in range(n)]\n    right = [0 for i in range(n)]\n    left[0] = height[0]\n    for i in range(1,n):\n        left[i] = max(left[i-1], height[i])\n    right[n-1] = height[n-1]\n    for i in range(n-2,-1,-1):\n        right[i] = max(right[i+1], height[i])\n    for i in range(n):\n        maxarea = max(maxarea, (i+1)*min(left[i], right[i]))\n    return maxarea\n    \ndef find_max_subarray(arr):\n    '''\n    Write a python function to find the contiguous subarray within an array (containing at least one number) which has the largest sum.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    start = 0\n    end = 0\n    s = 0\n    for i in range(1, len(arr)):\n        s = max(arr[i], max_ending_here + arr[i])\n        if s > max_so_far:\n            max_so_far = s\n            start = i-1\n            end = i\n    return max_so_far, arr[start:end+1]\n    \ndef find_max_subarray_2(arr):\n    '''\n    Write a python function to find the contiguous subarray within an array (containing at least one number) which has the largest sum.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    start = 0\n    end = 0\n    s = 0\n    for i in range(1, len(arr)):\n        s = max(arr[i], max_ending_here + arr[i])\n        if s > max_so_far:\n            max_so_far = s\n            start = i-1\n            end = i\n    return max_so_far, arr[start:end+1]\n    \ndef max_len_substr(str):\n    '''\n    Write a python function to find the length of the longest substring T that contains at most 2 distinct characters.\n    '''\n    n = len(str)\n    table = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        table[i][i] = 1\n    maxlen = 1\n    start = 0\n    for i in range(n):\n        for j in range(i, n):\n            if i == j:\n                table[i][j] = 1\n            elif str[i] == str[j]:\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                table[i][j] = max(table[i+1][j], table[i][j-1])\n            if table[i][j] > maxlen:\n                maxlen = table[i][j]\n                start = i\n    return maxlen\n    \ndef max_len_substr_2(str):\n    '''\n    Write a python function to find the length of the longest substring T that contains at most 2 distinct characters.\n    '''\n    n = len(str)\n    table = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        table[i][i] = 1\n    maxlen = 1\n    start = 0\n    for i in range(n):\n        for j in range(i, n):\n            if i == j:\n                table[i][j] = 1\n            elif str[i] == str[j]:\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                table[i][j] = max(table[i+1][j], table[i][j-1])\n            if table[i][j] > maxlen:\n                maxlen = table[i][j]\n                start = i\n    return maxlen\n    \ndef longest_palindrome(s):\n    '''\n    Write a python function to find the longest palindromic substring in a given string.\n    '''\n    n = len(s)\n    if n == 0:\n        return \"\"\n    table = [[0 for i in range(n)] for j in range(n)]\n    maxlen = 1\n    start = 0\n    i = 0\n    while i < n:\n        table[i][i] = 1\n        i += 1\n    while i < n:\n        table[i][i] = 1\n        i += 1\n    while i < n:\n        j = 0\n        while j <= i:\n            if j == i:\n                table[i][j] = 1\n            else:\n                table[i][j] = (s[i] == s[j]) and table[i-1][j+1]\n            if table[i][j] and j+1-i+1 > maxlen:\n                maxlen = j+1-i+1\n                start = i - maxlen/2\n            j += 1\n        i += 1\n    return s[start:start+maxlen]\n    \ndef longest_palindrome_2(s):\n    '''\n    Write a python function to find the longest palindromic substring in a given string.\n    '''\n    n = len(s)\n    if n == 0:\n        return \"\"\n    table = [[0 for i in range(n)] for j in range(n)]\n    maxlen = 1\n    start = 0\n    i = 0\n    while i < n:\n        table[i][i] = 1\n        i += 1\n    while i < n:\n        table[i][i] = 1\n        i += 1\n    while i < n:\n        j = 0\n        while j <= i:\n            if j == i:\n                table[i][",
        "num_ids": 132
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(c.isdigit() for c in str)\n",
        "num_ids": 18
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    sieve = [True] * (n+1) \n    sieve[0] = sieve[1] = False\n    for i in range(2, int(math.sqrt(n)) + 1): \n        if sieve[i]: \n            for j in range(i * i, n+1, i): \n                sieve[j] = False\n    return [i for i in range(n+1) if sieve[i]]\n",
        "num_ids": 110
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0:\n        return 1\n    n_minus1 = is_polite(n-1)\n    if n%2 == 0:\n        return n_minus1 + (n_minus1 % 10)\n    else:\n        return n_minus1 + (9 - n_minus1%10)\ndef spiral(n):\n    '''\n    Given an int n, find the nth spiral number. For example, spiral(6) = 13\n    '''\n    #spiral(1) = 1, spiral(2) = 4, spiral(3) = 9, spiral(4) = 16, spiral(5) = 25, spiral(6) = 34\n    #spiral(7) = 41, spiral(8) = 64, spiral(9) = 89, spiral(10) = 106, spiral(11) = 129, spiral(12) = 144, spiral(13) = 169\n    #spiral(14) = 196, spiral(15) = 225, spiral(16) = 256, spiral(17) = 289, spiral(18) = 314, spiral(19) = 349, spiral(20) = 376, spiral(21) = 399, spiral(22) = 416, spiral(23) = 449, spiral(24) = 476, spiral(25) = 505\n    #spiral(26) = 534, spiral(27) = 559, spiral(28) = 586, spiral(29) = 613, spiral(30) = 638, spiral(31) = 653, spiral(32) = 668, spiral(33) = 683, spiral(34) = 718, spiral(35) = 741, spiral(36) = 756, spiral(37) = 769, spiral(38) = 784, spiral(39) = 819, spiral(40) = 844, spiral(41) = 859, spiral(42) = 874, spiral(43) = 899, spiral(44) = 924, spiral(45) = 949, spiral(46) = 966, spiral(47) = 979, spiral(48) = 994\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    a = spiral(n-1)\n    b = a + 2\n    if b%10 == 1:\n        return a+1\n    else:\n        return b\ndef distinct_prime_factors(n):\n    '''\n    Given an integer n, find the total number of distinct prime factors of n. For example, distinct_prime_factors(90) = 2\n    '''\n    #90 = 3 * 3 = 9 * 3 = 27\n    #90 = 3 * 5 = 15 * 5 = 60\n    #90 = 3 * 5 * 7 = 21 * 5 * 7 = 252\n    #90 = 3 * 5 * 7 * 11 = 21 * 5 * 7 * 11 = 552\n    #90 = 3 * 5 * 7 * 11 * 13 = 21 * 5 * 7 * 11 * 13 = 1158\n    #90 = 3 * 5 * 7 * 11 * 13 * 17 = 21 * 5 * 7 * 11 * 13 * 17 = 30240\n    #90 = 3 * 5 * 7 * 11 * 13 * 17 * 19 = 21 * 5 * 7 * 11 * 13 * 17 * 19 = 57376\n    #90 = 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 = 21 * 5 * 7 * 11 * 13 * 17 * 19 * 23 = 166656\n    #90 = 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 = 21 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 = 669120\n    #90 = 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 = 21 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 = 336464\n    #90 = 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 = 21 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 = 559680\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n%2 == 0:\n        return 2 + distinct_prime_factors(n/2)\n    else:\n        return 2 + distinct_prime_factors(n-1)\ndef factorial(n):\n    '''\n    Find the factorial of n. For example, factorial(5) = 120\n    '''\n    #Factorial of 5 = 5 * 4 * 3 * 2 * 1 = 120\n    #Factorial of 4 = 4 * 3 * 2 * 1 = 24\n    #Factorial of 3 = 3 * 2 * 1 = 6\n    #Factorial of 2 = 2 * 1 = 2\n    #Factorial of 1 = 1 = 1\n    #Factorial of 0 = 1\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\ndef fibonacci(n):\n    '''\n    Given a positive integer n, find nth fibonacci number. For example, fibonacci(5) = 3, fibonacci(7) = 13, fibonacci(8) = 21, fibonacci(9) = 34, fibonacci(10) = 55, fibonacci(11) = 89, fibonacci(12) = 144, fibonacci(13) = 233, fibonacci(14) = 377, fibonacci(15) = 610, fibonacci(16) = 987, fibonacci(17) = 1597, fibonacci(18) = 2584, fibonacci(19) = 4181, fibonacci(20) = 6765, fibonacci(21) = 10946, fibonacci(22) = 17711, fibonacci(23) = 28657, fibonacci(24) = 46368, fibonacci(25) = 75025, fibonacci(26) = 121393, fibonacci(27) = 196418, fibonacci(28) = 317811, fibonacci(29) = 514229, fibonacci(30) = 832040\n    '''\n    #Fibonacci numbers: 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040\n    #Fibonacci numbers: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = fibonacci(n-1)\n        b = fibonacci(n-2)\n        return a + b\ndef pascal_triangle(n):\n    '''\n    Given a positive integer n, find nth pascal number. For example, pascal_triangle(5) = [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n    '''\n    #Pascal Triangle: 1\n    #Pascal Triangle: 1 1\n    #Pascal Triangle: 1 2 1\n    #Pascal Triangle: 1 3 3 1\n    #Pascal Triangle: 1 4 6 4 1\n    #Pascal Triangle: 1 5 10 10 5 1\n    #Pascal Triangle: 1 6 15 20 15 6 1\n    #Pascal Triangle: 1 7 21 35 35 21 7 1\n    #Pascal Triangle: 1 8 28 56 70 56 28 8 1\n    #Pascal Triangle: 1 9 36 84 120 90 36 9 1\n    #Pascal Triangle: 1 10 45 120 120 45 10 1\n    if n == 0:\n        return 1\n    else:\n        return pascal_triangle(n-1) + [0]\ndef palindrome_products(n):\n    '''\n    Given a positive integer n, find all pairs of integers whose product is palindromic. For example, palindrome_products(10) = [(10, 22), (22, 10)]\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 1\n    if n == 2: \n        return 2\n    else: \n        return (2 + (n-2) * (2 - 1))\n",
        "num_ids": 48
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n%2==1: return False\n    num=0\n    for i in range(1,n//2+1):\n        if n%i==0:\n            num+=i\n    return num==n\n",
        "num_ids": 53
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_polite(n): \n        '''\n        Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n        '''\n        def is_polite(n): \n            '''\n            Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n            '''\n            def is_polite(n): \n                '''\n                Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n                '''\n                if n == 0: \n                    return 0\n                if n == 1: \n                    return 1\n                else: \n                    return is_polite(n-1) + is_polite(n-2) \n",
        "num_ids": 54
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_count = 0\n    nth_polite_number = 0\n    limit = n\n    while polite_count < limit: \n        nth_polite_number += 1\n        if is_polite_number(nth_polite_number): \n            polite_count += 1\n    return nth_polite_number \n",
        "num_ids": 85
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_numbers = [1,2,3]\n    counter = 1\n    while len(polite_numbers) < n:\n        for i in range(1,7):\n            if counter % i == 0:\n                if i not in polite_numbers:\n                    polite_numbers.append(i)\n        counter += 1\n    return polite_numbers[n-1]\n",
        "num_ids": 96
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    res = [1]\n    for i in range(n):\n        res.append(res[i]*(n-i))\n    return res[n]\n",
        "num_ids": 41
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def gen(a,b): \n        while True: \n            yield a \n            a,b = b%a, a \n    \n    num = gen(2,n-1) \n    while num.next(): \n        if is_pol(num.next()): \n            return num.next() \n",
        "num_ids": 80
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 3\n    else:\n        return 1+(1+n-1)*n/2\n    \ndef is_polite_to_any_precision(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 3\n    else:\n        return 1+(1+n-1)*n/2\n",
        "num_ids": 55
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1) - 1)]\n",
        "num_ids": 31
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    results = []\n    for i in range(len(l1) - 1):\n        results.append([l1[i], l1[i + 1]])\n    return results\n",
        "num_ids": 45
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    ans = []\n    i = 0\n    while i < len(l1):\n        pair = (l1[i], l1[i+1])\n        ans.append(pair)\n        i+=1\n    return ans\n",
        "num_ids": 56
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1)==0:\n        return []\n    elif len(l1)==1:\n        return [[l1[0],l1[0]]]\n    else:\n        pairs = []\n        for i in range(len(l1)-1):\n            pairs.append([l1[i],l1[i+1]])\n        return pairs\n",
        "num_ids": 92
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [l1[i:i+2] for i in range(len(l1)-1)]\n",
        "num_ids": 27
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    r = []\n    for i in range(len(l1)-1):\n        r.append((l1[i], l1[i+1]))\n    return r\n",
        "num_ids": 44
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    ret = []\n    for i in range(len(l1)-1):\n        ret.append((l1[i], l1[i+1]))\n    return ret\n",
        "num_ids": 59
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return list(zip(l1, l1[1:]))\n",
        "num_ids": 18
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i],l1[i+1]) for i in range(len(l1)-1)]\n",
        "num_ids": 30
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)):\n        if i+1 < len(l1):\n            pairs.append((l1[i], l1[i+1]))\n    return pairs\n",
        "num_ids": 57
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    res = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                res += 1\n    return res\n",
        "num_ids": 59
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] + arr[j] == sum):\n                pairs_count += 1\n    return pairs_count\n",
        "num_ids": 70
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if arr == None or len(arr) == 0:\n        return 0\n    \n    map = {}\n    for i in range(len(arr)):\n        if arr[i] in map:\n            map[arr[i]].append(i)\n        else:\n            map[arr[i]] = [i]\n    pairs = 0\n    for i in range(len(arr)):\n        if sum-arr[i] in map:\n            pairs += len(map[sum-arr[i]])\n    return pairs\n",
        "num_ids": 128
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    dict = {}\n    for i in arr:\n        if i in dict.keys():\n            dict[i] += 1\n        else:\n            dict[i] = 1\n",
        "num_ids": 43
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if sum < 0:\n        return 0\n    elif len(arr) == 1:\n        if sum == arr[0]:\n            return 1\n        else:\n            return 0\n    else:\n        return arr[0] + get_pairs_count(arr[1:], sum-arr[0])\n",
        "num_ids": 75
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if len(arr) < 2:\n        return 0\n    n = len(arr)\n    result = 0\n    hash_map = {}\n    for i in xrange(n):\n        num = arr[i]\n        if num in hash_map:\n            hash_map[num] += 1\n        else:\n            hash_map[num] = 1\n",
        "num_ids": 87
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    d = {}\n    for i in arr:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    count = 0\n    for j in d:\n        if (sum - j) in d:\n            count += d[j] * d[sum - j]\n    return count\n",
        "num_ids": 83
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if arr == []:\n        return 0\n    count = 0\n    for i in range(0,len(arr)):\n        if sum-arr[i] in arr:\n            count += 1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n",
        "num_ids": 39
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    l = []\n    for x in li1:\n        if x not in li2:\n            l.append(x)\n    return l\n",
        "num_ids": 36
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n",
        "num_ids": 39
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff=[]\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff\n    \ndef unique(list1):\n    '''\n    Write a python function to get the unique values of a list.\n    '''\n    unique_list = []\n    for x in list1:\n        if x not in unique_list:\n            unique_list.append(x)\n    return unique_list\n    \ndef Intersect(li1,li2):\n    '''\n    Write a python function to get the intersection between two lists.\n    '''\n    inter = []\n    for x in li1:\n        if x in li2:\n            inter.append(x)\n    return inter\n",
        "num_ids": 35
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1)-set(li2)))\n",
        "num_ids": 18
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n",
        "num_ids": 39
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1) - set(li2)))\n",
        "num_ids": 19
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n    \ndef Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n",
        "num_ids": 17
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1)-set(li2)))\n",
        "num_ids": 18
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return(list(set(li1)-set(li2)))\n",
        "num_ids": 18
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum(x**4 for x in range(n) if x%2!= 0)\n",
        "num_ids": 25
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0 \n    for i in range(1, n+1) : \n        if (i%2 == 1) : \n            total = total + (i*i*i*i) \n    return total\n",
        "num_ids": 55
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    s = 1\n    for i in range(1, n + 1):\n        if not i%2 : \n            s += i**4\n    return s\n",
        "num_ids": 40
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1) :\n        if i%2!= 0 :\n            sum += i**4\n    return sum\n",
        "num_ids": 42
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # your code here\n    return sum([i**4 for i in range(1, n+1) if i%2])\n",
        "num_ids": 32
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if not isinstance(n, int) or n < 0 :\n        raise ValueError(\"Enter a positive integer\")\n    return sum(x**4 for x in range(1, n+1, 2))\n",
        "num_ids": 50
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    nums = range(1,n+1,2)\n    return sum(n**4 for n in nums)\n",
        "num_ids": 31
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n < 1 :\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    \n    total = 0\n    \n    for i in range(1, n + 1) :\n        if i % 2!= 0 :\n            total = total + (i * i * i * i)\n    \n    return total\n    \n    \ndef find_lowest_perfect_square(n) : \n    '''\n    Write a python function to find the lowest perfect square of number n.\n    '''\n    \n    lowest = n\n    \n    while (lowest * lowest) < n :\n        lowest = lowest + 1\n    \n    return lowest\n    \n",
        "num_ids": 40
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # initializing a variable to store the result\n    total = 0\n    for num in range(1, n+1, 2) : \n        total = total + num ** 4\n    return total\n",
        "num_ids": 48
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # Handle None Expression\n    if exp is None:\n        return False\n",
        "num_ids": 19
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for ch in exp:\n        if ch == '(':\n            stack.append('(')\n        elif ch == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    if not stack:\n        return True\n    return False\ndef scc_tree(graph, root):\n    visited = []\n    def dfs(root):\n        if root in visited:\n            return\n        visited.append(root)\n        for neighbour in graph[root]:\n            dfs(neighbour)\n    dfs(root)\n    return visited\ndef find_connected_components(graph):\n    visited = []\n    count = 0\n    for i in range(len(graph)):\n        if i not in visited:\n            dfs(i, visited)\n            count += 1\n    return count\ndef topological_sort_using_dfs(graph, visited, stack):\n    visited.add(graph[0])\n    for neighbour in graph[0]:\n        if neighbour not in visited:\n            topological_sort_using_dfs(graph, visited, stack)\n    stack.append(graph[0])\n",
        "num_ids": 279
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    s = deque()\n    for c in exp:\n        if c == '(':\n            s.append(c)\n        elif c == ')':\n            if len(s) == 0:\n                return False\n            else:\n                s.pop()\n    return len(s) == 0\n",
        "num_ids": 73
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for ch in exp:\n        if ch in ['(', '{', '[']:\n            stack.append(ch)\n        elif ch in [')', '}', ']']:\n            if not stack:\n                return False\n            else:\n                if ch == ')' and stack.pop()!= '(':\n                    return False\n                elif ch == '}' and stack.pop()!= '{':\n                    return False\n                elif ch == ']' and stack.pop()!= '[':\n                    return False\n    if not stack:\n        return True\n    else:\n        return False\n",
        "num_ids": 149
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if exp==\"\":\n        return True\n    stack=[]\n    for i in range(len(exp)):\n        if exp[i] in \"({[\":\n            stack.append(exp[i])\n        elif exp[i]==\")\" and len(stack)>0:\n            if stack.pop()==\"(\":\n                pass\n            else:\n                return False\n        elif exp[i]==\"]\" and len(stack)>0:\n            if stack.pop()==\"[\":\n                pass\n            else:\n                return False\n        elif exp[i]==\"}\" and len(stack)>0:\n            if stack.pop()==\"{\":\n                pass\n            else:\n                return False\n    if len(stack)>0:\n        return False\n    else:\n        return True\n",
        "num_ids": 195
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for char in exp:\n        if char in ['(','{','[']:\n            stack.append(char)\n        else:\n            if not stack or stack.pop()!= char_map[char]:\n                return False\n",
        "num_ids": 60
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    parenthesis_stack = deque()\n    opening_brackets = ['(', '{', '[']\n    closing_brackets = [')', '}', ']']\n",
        "num_ids": 45
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for c in exp:\n        if c in '{[(':\n            stack.append(c)\n        else:\n            if not stack:\n                return False\n            else:\n                top = stack.pop()\n                if (top == '(' and c!= ')') or (top == '[' and c!= ']') or (top == '{' and c!= '}'):\n                    return False\n    return True\n",
        "num_ids": 111
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in [\"(\", \"{\", \"[\"]:\n            stack.append(char)\n        else:\n            if len(stack)==0:\n                return False\n            popped_char = stack.pop()\n            if char == \")\":\n                if popped_char!=\"(\":\n                    return False\n            elif char == \"}\":\n                if popped_char!=\"{\":\n                    return False\n            elif char == \"]\":\n                if popped_char!=\"[\":\n                    return False\n    if len(stack)==0:\n        return True\n    return False\n",
        "num_ids": 152
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    '''\n    1) The condition that the right parenthesis is closed must be checked at every step of the recursive call\n    2) The count of the left parenthesis in the expression must be the same as the count of the right parenthesis\n    3) The condition that the left parenthesis is open is checked in the main recursive call\n    4) The count of the left parenthesis in the expression must be the same as the count of the right parenthesis\n    5) The condition that the left parenthesis is closed is checked in the main recursive call\n    '''\n    if len(exp) == 0:\n        return True\n    stack = deque()\n    for c in exp:\n        if c in [\"(\", \"{\", \"[\"]:\n            stack.append(c)\n        elif c in [\")\", \"}\", \"]\"]:\n            if not stack:\n                return False\n            elif c == \")\" and stack[-1]!= \"(\":\n                return False\n            elif c == \"}\" and stack[-1]!= \"{\":\n                return False\n            elif c == \"]\" and stack[-1]!= \"[\":\n                return False\n            else:\n                stack.pop()\n    return not stack\n",
        "num_ids": 157
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    split_str = re.findall(r\"\\w+\", test_str)\n    if len(split_str) == 0:\n        return \"There is no word of length %d\" % K\n    else:\n        return''.join([word for word in split_str if len(word)!= K])\n",
        "num_ids": 75
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return \"\".join(test_str.split(\" \")[K:])\n",
        "num_ids": 20
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return''.join(test_str.split()[K:])\n",
        "num_ids": 18
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    word_list = test_str.split(' ')\n    k_list = []\n",
        "num_ids": 23
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if len(test_str) == 0 or K < 0 or K > 26:\n        return test_str\n    elif len(test_str) < K:\n        return test_str\n    else:\n        return remove_length(test_str[1:], K) + test_str[0] + remove_length(test_str[1:], K-1)\n",
        "num_ids": 90
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if len(test_str) <= K:\n        return test_str\n    \n    words = test_str.split(' ')\n    res = []\n    for word in words:\n        if len(word) == K:\n            res.append(word)\n    return''.join(res)\n",
        "num_ids": 72
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # maintain a sliding window of size K\n    # move left by 1 letter at a time and maintain a set of words in sliding window\n    # if word is in set, remove it\n    # return a list of words\n    sliding_window = []\n    for i in xrange(len(test_str)):\n        if len(sliding_window) < K:\n            sliding_window.append(test_str[i])\n        elif len(sliding_window) == K:\n            if test_str[i] not in sliding_window:\n                sliding_window.append(test_str[i])\n            else:\n                sliding_window.remove(test_str[i])\n        if len(sliding_window) == K:\n            # if word is in set, remove it\n            if test_str[i-K+1:i+1] in sliding_window:\n                sliding_window.remove(test_str[i-K+1:i+1])\n        # print sliding_window\n    return sliding_window\n",
        "num_ids": 247
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for i in range(len(words)-1, -1, -1):\n        if len(words[i]) == K:\n            del words[i]\n    return''.join(words)\n",
        "num_ids": 58
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    l = len(test_str)\n    \n    # There are maximum (l - K) words of length K in a string.\n    n = l - K\n    \n    # To iterate the string in reverse order,\n    # we can use slice notation\n    # to go from string's end to beginning\n    # and then reverse it.\n    return test_str[:n][::-1] + test_str[n:]\n",
        "num_ids": 104
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_list=pattern.split('|')\n    matches = [len(re.findall(r'(?=('+pattern_list[0]+'))',text))]\n    for i in range(1,len(pattern_list)):\n        matches.append(len(re.findall(r'(?=(?&'+pattern_list[i]+'))',text)))\n    if all(m == 0 for m in matches):\n        return None\n    else:\n        return matches\n",
        "num_ids": 121
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    count = 0\n    substring_start_index = 0\n    while substring_start_index < len(text):\n        substring_end_index = text.find(pattern,substring_start_index)\n        if substring_end_index!= -1:\n            count += 1\n            substring_start_index = substring_end_index + 1\n        else:\n            break\n    return count\n",
        "num_ids": 100
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    m = re.search(pattern,text)\n    if m:\n        start = m.start()\n        end = m.end()\n        return start,end\n    return None\n",
        "num_ids": 45
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_len = len(pattern)\n    len_of_text = len(text)\n    if pattern_len > len_of_text:\n        return None\n",
        "num_ids": 41
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if not text or not pattern:\n        return None\n    indexes = []\n    index = 0\n    text_len = len(text)\n    pattern_len = len(pattern)\n    while index<text_len:\n        if text[index:index+pattern_len]==pattern:\n            indexes.append(index)\n            index+=pattern_len\n        else:\n            index+=1\n    return indexes\n",
        "num_ids": 100
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pos = -1\n    occurance = 0\n    while True:\n        pos = text.find(pattern,pos+1)\n        if pos == -1:\n            break\n        occurance += 1\n    return occurance\n",
        "num_ids": 55
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    s=text\n    p=pattern\n    n=len(s)\n    m=len(p)\n    c=0\n    k=0\n    while n>m:\n        if s[0:m]==p:\n            k=k+1\n            c=c+1\n            n=n-m\n        else:\n            n=n-1\n    if k>0:\n        return(k)\n    else:\n        return None\n",
        "num_ids": 110
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    for match in re.finditer(pattern,text):\n        print match.start(),match.end(),match.group()\n",
        "num_ids": 31
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #print(len(text),len(pattern))\n    if len(text)!=len(pattern):\n        return None\n    else:\n        for i in range(0,len(text)):\n            print('text:',text[i:i+len(pattern)])\n            if text[i:i+len(pattern)] == pattern:\n                #print('i:',i)\n                return i\n",
        "num_ids": 97
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurrence=re.search(pattern,text)\n    if occurrence:\n        print('occurance:',occurrence.start())\n        print('position:',occurrence.end())\n        print('string:',occurrence.group())\n    else:\n        print('Not Found')\n",
        "num_ids": 68
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(nums[i] % 2 for i in range(1, len(nums), 2))\n",
        "num_ids": 28
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # for i in range(len(nums)):\n    #     if (i % 2 == 1) and (nums[i] % 2 == 1):\n    #         return False\n    # return True\n    return all(num % 2 == 1 for num in nums[1::2])\n",
        "num_ids": 71
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    l = len(nums)\n    for i in range(1,l,2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 1 and i % 2 == 1:\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all([nums[i] % 2 == 1 for i in range(1, len(nums), 2)])\n",
        "num_ids": 31
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(x%2!=0 for x in nums[1::2])\n",
        "num_ids": 23
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i]%2!= 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    res = []\n    for i in range(1,len(nums),2):\n        if nums[i]%2==1:\n            res.append(nums[i])\n    return res\n",
        "num_ids": 51
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for num in nums:\n        if num%2!= 0:\n            return False\n    return True\n",
        "num_ids": 28
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_cnt = 0\n    for i in range(len(test_str)):\n        if test_str[i] in ['a', 'e', 'i', 'o', 'u']:\n            if i+1 < len(test_str) and test_str[i+1] in ['a', 'e', 'i', 'o', 'u']:\n                vowel_cnt += 1\n            elif i-1 >= 0 and test_str[i-1] in ['a', 'e', 'i', 'o', 'u']:\n                vowel_cnt += 1\n    return vowel_cnt\n",
        "num_ids": 153
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    counter = 0\n    for i in range(len(test_str)):\n        if test_str[i] in ['a','e','i','o','u']:\n            if i+1 < len(test_str):\n                if test_str[i+1] in ['a','e','i','o','u']:\n                    counter +=1\n    return counter\n",
        "num_ids": 89
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    result = 0\n    for i in range(1,len(test_str)):\n        if test_str[i-1] in 'aeiouAEIOU':\n            if test_str[i] in 'aeiouAEIOU':\n                result += 1\n    return result\n",
        "num_ids": 70
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a','e','i','o','u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "num_ids": 73
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a','e','i','o','u']\n    vowel_count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            vowel_count += 1\n    return vowel_count\n",
        "num_ids": 83
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    vowels = {'a','e','i','o','u','A','E','I','O','U'}\n    for i in range(0,len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "num_ids": 87
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    if test_str == '':\n        return 0\n",
        "num_ids": 15
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    counter = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if i+1 < len(test_str):\n                if test_str[i+1] in vowels:\n                    continue\n                else:\n                    counter += 1\n            else:\n                continue\n    return counter\n",
        "num_ids": 123
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # get the length of the string\n    len_str = len(test_str)\n    vowels = 0\n",
        "num_ids": 30
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        # print i\n        if test_str[i-1] in 'aeiou' and test_str[i] in 'aeiou':\n            count += 1\n    return count\n",
        "num_ids": 65
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum([x for x in arr if arr.count(x)==1])\n",
        "num_ids": 22
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum([x for x in arr if arr.count(x)==1])\n",
        "num_ids": 22
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    m = {}\n    res = 0\n    for i in arr:\n        if i in m:\n            m[i] += 1\n        else:\n            m[i] = 1\n    for i in m:\n        if m[i] == 1:\n            res += i\n    return res\n",
        "num_ids": 72
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    def find_sum(arr): \n    #Code\n    #First, Find the sum of all elements\n    #Second, Find the sum of the non-repeated elements\n    #Third, Find the sum of the non-repeated elements\n    #Fourth, Find the sum of the non-repeated elements\n    #Fifth, Find the sum of the non-repeated elements\n    #Sixth, Find the sum of the non-repeated elements\n    #Seventh, Find the sum of the non-repeated elements\n    #Eighth, Find the sum of the non-repeated elements\n    #Ninth, Find the sum of the non-repeated elements\n    #Tenth, Find the sum of the non-repeated elements\n    #Eleventh, Find the sum of the non-repeated elements\n    #Twelfth, Find the sum of the non-repeated elements\n    #Thirteenth, Find the sum of the non-repeated elements\n    #Fourteenth, Find the sum of the non-repeated elements\n    #Fifteenth, Find the sum of the non-repeated elements\n    #Sixteenth, Find the sum of the non-repeated elements\n    #Seventeenth, Find the sum of the non-repeated elements\n    #Eighteenth, Find the sum of the non-repeated elements\n    #Nineteenth, Find the sum of the non-repeated elements\n    #Twentieth, Find the sum of the non-repeated elements\n    #Eleventieth, Find the sum of the non-repeated elements\n    #Twenty-first, Find the sum of the non-repeated elements\n    #Twenty-second, Find the sum of the non-repeated elements\n    #Twenty-third, Find the sum of the non-repeated elements\n    #Twenty-fourth, Find the sum of the non-repeated elements\n    #Twenty-fifth, Find the sum of the non-repeated elements\n    #Twenty-sixth, Find the sum of the non-repeated elements\n    #Twenty-seventh, Find the sum of the non-repeated elements\n    #Twenty-eighth, Find the sum of the non-repeated elements\n    #Twenty-ninth, Find the sum of the non-repeated elements\n    #Thirtieth, Find the sum of the non-repeated elements\n    #Thirtieth, Find the sum of the non-repeated elements\n    #Thirty-first, Find the sum of the non-repeated elements\n    #Thirty-second, Find the sum of the non-repeated elements\n    #Thirty-third, Find the sum of the non-repeated elements\n    #Thirty-fourth, Find the sum of the non-repeated elements\n    #Thirty-fifth, Find the sum of the non-repeated elements\n    #Thirty-sixth, Find the sum of the non-repeated elements\n    #Thirty-seventh, Find the sum of the non-repeated elements\n    #Thirty-eighth, Find the sum of the non-repeated elements\n    #Thirty-ninth, Find the sum of the non-repeated elements\n    #Fourty-first, Find the sum of the non-repeated elements\n    #Fourty-second, Find the sum of the non-repeated elements\n    #Fourty-third, Find the sum of the non-repeated elements\n    #Fourty-fourth, Find the sum of the non-repeated elements\n    #Fourty-fifth, Find the sum of the non-repeated elements\n    #Fourty-sixth, Find the sum of the non-repeated elements\n    #Fourty-seventh, Find the sum of the non-repeated elements\n    #Fourty-eighth, Find the sum of the non-repeated elements\n    #Fourty-ninth, Find the sum of the non-repeated elements\n    #Fifty-first, Find the sum of the non-repeated elements\n    #Fifty-second, Find the sum of the non-repeated elements\n    #Fifty-third, Find the sum of the non-repeated elements\n    #Fifty-fourth, Find the sum of the non-repeated elements\n    #Fifty-fifth, Find the sum of the non-repeated elements\n    #Fifty-sixth, Find the sum of the non-repeated elements\n    #Fifty-seventh, Find the sum of the non-repeated elements\n    #Fifty-eighth, Find the sum of the non-repeated elements\n    #Fifty-ninth, Find the sum of the non-repeated elements\n    #Sixty-first, Find the sum of the non-repeated elements\n    #Sixty-second, Find the sum of the non-repeated elements\n    #Sixty-third, Find the sum of the non-repeated elements\n    #Sixty-fourth, Find the sum of the non-repeated elements\n    #Sixty-fifth, Find the sum of the non-repeated elements\n    #Sixty-sixth, Find the sum of the non-repeated elements\n    #Sixty-seventh, Find the sum of the non-repeated elements\n    #Sixty-eighth, Find the sum of the non-repeated elements\n    #Sixty-ninth, Find the sum of the non-repeated elements\n    #Seventy-first, Find the sum of the non-repeated elements\n    #Seventy-second, Find the sum of the non-repeated elements\n    #Seventy-third, Find the sum of the non-repeated elements\n    #Seventy-fourth, Find the sum of the non-repeated elements\n    #Seventy-fifth, Find the sum of the non-repeated elements\n    #Seventy-sixth, Find the sum of the non-repeated elements\n    #Seventy-seventh, Find the sum of the non-repeated elements\n    #Seventy-eighth, Find the sum of the non-repeated elements\n    #Seventy-ninth, Find the sum of the non-repeated elements\n    #Eighty-first, Find the sum of the non-repeated elements\n    #Eighty-second, Find the sum of the non-repeated elements\n    #Eighty-third, Find the sum of the non-repeated elements\n    #Eighty-fourth, Find the sum of the non-repeated elements\n    #Eighty-fifth, Find the sum of the non-repeated elements\n    #Eighty-sixth, Find the sum of the non-repeated elements\n    #Eighty-seventh, Find the sum of the non-repeated elements\n    #Eighty-eighth, Find the sum of the non-repeated elements\n    #Eighty-ninth, Find the sum of the non-repeated elements\n    #Ninety-first, Find the sum of the non-repeated elements\n    #Ninety-second, Find the sum of the non-repeated elements\n    #Ninety-third, Find the sum of the non-repeated elements\n    #Ninety-fourth, Find the sum of the non-repeated elements\n    #Ninety-fifth, Find the sum of the non-repeated elements\n    #Ninety-sixth, Find the sum of the non-repeated elements\n    #Ninety-seventh, Find the sum of the non-repeated elements\n    #Ninety-eighth, Find the sum of the non-repeated elements\n    #Ninety-ninth, Find the sum of the non-repeated elements\n    #Add all the elements\n    total = sum(arr)\n    #Create a counter to get the sum of each element\n    element_sum = 0\n    for element in arr:\n        element_sum += element\n    #Print the total of all the elements\n    print(\"The sum of all the elements is: %s\" % total)\n    #Print the sum of all the non-repeated elements\n    print(\"The sum of all the non-repeated elements is: %s\" % element_sum)\n    #Create a counter to get the sum of each element\n    element_sum = 0\n    for element in arr:\n        element_sum += element\n    #Print the total of all the elements\n    print(\"The sum of all the elements is: %s\" % total)\n    #Print the sum of all the non-repeated elements\n    print(\"The sum of all the non-repeated elements is: %s\" % element_sum)\n    #Create a counter to get the sum of each element\n    element_sum = 0\n    for element in arr:\n        element_sum += element\n    #Print the total of all the elements\n    print(\"The sum of all the elements is: %s\" % total)\n    #Print the sum of all the non-repeated elements\n    print(\"The sum of all the non-repeated elements is: %s",
        "num_ids": 2009
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                break\n        else:\n            sum += arr[i]\n    return sum\n",
        "num_ids": 68
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum([i for i in arr if arr.count(i) == 1])\n",
        "num_ids": 22
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    non_repeated_elements = []\n    for element in arr:\n        if element not in non_repeated_elements:\n            non_repeated_elements.append(element)\n    return sum(non_repeated_elements)\n",
        "num_ids": 61
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    x = set(arr)\n    return sum(x)\n",
        "num_ids": 17
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n",
        "num_ids": 11
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    no_repeated_list = []\n    arr_sum = 0\n    for elem in arr:\n        if elem not in no_repeated_list:\n            no_repeated_list.append(elem)\n    for elem in no_repeated_list:\n        arr_sum = arr_sum + elem\n    return arr_sum\n",
        "num_ids": 86
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(list1):\n        # Put list elements together\n        result.append([list(g)])\n",
        "num_ids": 38
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    k = groupby(list1)\n    for g in k:\n        lst = list(g[1])\n        if len(lst) > 1:\n            for i in range(len(lst)-1):\n                yield lst[i],lst[i+1]\n            yield lst[-1],lst[0]\n        else:\n            yield lst[0],lst[0]\n",
        "num_ids": 104
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # for i, j in groupby(list1):\n    #     if len(list(j))>1:\n    #         print(list(j),len(list(j)))\n    # print(list1)\n    return [[a]*len(list(b)) for a,b in groupby(list1)]\n",
        "num_ids": 78
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # insert list1.sort()\n    if not list1:\n        return []\n    else:\n        list2 = [list(g) for k, g in groupby(sorted(list1))]\n        return [x for sublist in list2 for x in sublist]\n",
        "num_ids": 68
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    groups = groupby(list1)\n    for i, v in groups:\n        if i == 1:\n            list1 = list(v)\n    return list1\n",
        "num_ids": 42
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # group consecutive duplicates\n    for k, g in groupby(list1):\n        n = len(list(g))\n        if n>1:\n            list1[list1.index(k)] = [k]*n\n    return list1\n",
        "num_ids": 62
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    n=len(list1)\n    list2=[]\n    for i in range(n):\n        k=list1[i]\n        if i<n-1 and list1[i+1]==k:\n            list2.append(k)\n        else:\n            list2.append(k)\n            list2.append(k)\n    return list2\ndef find_most_frequent(List):\n    '''\n    Write a function to find the most frequent element in a list.\n    '''\n    d={}\n    for i in List:\n        d[i]=d.get(i,0)+1\n    max=0\n    keymax=None\n    for i in d:\n        if d[i]>max:\n            max=d[i]\n            keymax=i\n    return keymax\ndef find_element_duplicates(list2):\n    '''\n    Write a function to find all the elements that appear more than once in a list.\n    '''\n    duplicates=[]\n    for i in list2:\n        if list2.count(i)>1:\n            if i not in duplicates:\n                duplicates.append(i)\n    return duplicates\ndef print_unique_characters(list3):\n    '''\n    Write a function to find and print the unique characters of a string.\n    '''\n    result=[]\n    for i in list3:\n        if i not in result:\n            result.append(i)\n    return result\ndef remove_duplicates(list3):\n    '''\n    Write a function to remove duplicates from a given list.\n    '''\n    for i in list3:\n        if list3.count(i)>1:\n            list3.remove(i)\n    return list3\ndef sort_a_list(list4):\n    '''\n    Write a function to sort a list by the frequency of its elements.\n    '''\n    d={}\n    for i in list4:\n        d[i]=list4.count(i)\n    return sorted(d,key=d.get,reverse=True)\ndef find_maximum_and_minimum(list5):\n    '''\n    Write a function to find the maximum and minimum elements of a list.\n    '''\n    return max(list5),min(list5)\ndef find_common_elements(list6,list7):\n    '''\n    Write a function to find common elements between two lists.\n    '''\n    d={}\n    for i in list6:\n        d[i]=list6.count(i)\n    for i in list7:\n        if list7.count(i)>0 and d.get(i,0)>0:\n            d[i]-=1\n    return [x for x in d if d[x]>0]\ndef remove_common_elements(list8,list9):\n    '''\n    Write a function to remove common elements between two lists.\n    '''\n    for i in list8:\n        if list8.count(i)>1:\n            list8.remove(i)\n    for i in list9:\n        if list9.count(i)>1:\n            list9.remove(i)\n    return list8,list9\ndef common_elements(list10,list11):\n    '''\n    Write a function to find common elements between two lists.\n    '''\n    d={}\n    for i in list10:\n        d[i]=list10.count(i)\n    for i in list11:\n        if list11.count(i)>0 and d.get(i,0)>0:\n            d[i]-=1\n    return [x for x in d if d[x]>0]\ndef remove_duplicates_of_a_list(list12):\n    '''\n    Write a function to remove duplicates of a given list.\n    '''\n    for i in list12:\n        if list12.count(i)>1:\n            list12.remove(i)\n    return list12\ndef rotate_list(list13,n):\n    '''\n    Write a function to rotate a list.\n    '''\n    list14=[]\n    for i in range(n,len(list13)):\n        list14.append(list13[i])\n    for i in range(0,n):\n        list14.append(list13[i])\n    return list14\ndef is_rotated_list(list15,list16):\n    '''\n    Write a function to check whether two lists are equal when both the lists are rotated by the same number of times.\n    '''\n    if len(list15)!=len(list16):\n        return False\n    for i in range(0,len(list15)):\n        if list15[i]!=list16[len(list15)-1-i]:\n            return False\n    return True\ndef find_all_rotations(list17):\n    '''\n    Write a function to find all the rotations of a given list.\n    '''\n    return [list17[i:]+list17[:i] for i in range(len(list17))]\ndef find_rotation(list18,element):\n    '''\n    Write a function to find the index at which a given element is found in a list.\n    '''\n    if len(list18)==0:\n        return -1\n    if element==list18[0]:\n        return 0\n    return find_rotation(list18[1:],element)\n    #else:\n    #    return -1\ndef rearrange_digits(list19):\n    '''\n    Write a function to rearrange a given list of digits so that they form consecutive numbers.\n    '''\n    if len(list19)==0:\n        return []\n    if len(list19)==1:\n        return list19\n    list20=list(list19)\n    list21=[]\n    for i in range(len(list19)-1):\n        list21.append(list19[i+1])\n        list21.append(list19[i])\n    if list19[-1]>list19[-2]:\n        list21.append(list19[0])\n    else:\n        list21.append(list19[-1])\n    return list21\ndef sort_list_by_frequency(list22):\n    '''\n    Write a function to sort a list by frequency of elements.\n    '''\n    d={}\n    for i in list22:\n        d[i]=list22.count(i)\n    return sorted(d,key=d.get,reverse=True)\ndef sort_list_by_frequency_2(list23):\n    '''\n    Write a function to sort a list by frequency of elements.\n    '''\n    d={}\n    for i in list23:\n        d[i]=list23.count(i)\n    return sorted(d,key=d.get)\ndef sort_list_by_frequency_3(list24):\n    '''\n    Write a function to sort a list by frequency of elements.\n    '''\n    d={}\n    for i in list24:\n        d[i]=list24.count(i)\n    return sorted(d,key=d.get,reverse=True)\ndef sort_list_by_frequency_4(list25):\n    '''\n    Write a function to sort a list by frequency of elements.\n    '''\n    d={}\n    for i in list25:\n        d[i]=list25.count(i)\n    return sorted(d,key=d.get)\ndef sort_list_by_frequency_5(list26):\n    '''\n    Write a function to sort a list by frequency of elements.\n    '''\n    d={}\n    for i in list26:\n        d[i]=list26.count(i)\n    return sorted(d,key=d.get)\ndef sort_list_by_frequency_6(list27):\n    '''\n    Write a function to sort a list by frequency of elements.\n    '''\n    d={}\n    for i in list27:\n        d[i]=list27.count(i)\n    return sorted(d,key=d.get,reverse=True)\ndef sort_list_by_frequency_7(list28):\n    '''\n    Write a function to sort a lis",
        "num_ids": 11
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if len(list1) < 2:\n        return list1\n    list2 = []\n    key = lambda i: i[0]\n    for key, group in groupby(list1, key):\n        list2.append([key]+list(group))\n    return list2\n",
        "num_ids": 68
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    l1=[]\n    for i,j in groupby(list1):\n        l1.append([x for x in j])\n    return l1\ndef print_pairs_sum_equal(arr):\n    '''\n    Write a function to print all pairs with sum equal to a given number.\n    '''\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]+arr[j]==arr[j]+arr[i]:\n                print(arr[i],arr[j])\ndef print_pairs_sum_equal_2(arr):\n    '''\n    Write a function to print all pairs with sum equal to a given number.\n    '''\n    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i]+arr[i+1]==arr[i+1]+arr[i]:\n            print(arr[i],arr[i+1])\ndef sum_of_all_primes(n):\n    '''\n    Write a function to generate and print all prime numbers in an interval.\n    '''\n    arr=[]\n    for i in range(n):\n        arr.append(i)\n    arr.sort()\n    l=len(arr)\n    for i in range(1,l):\n        if arr[i]!=0:\n            for j in range(i,l,arr[i]):\n                arr[j]=0\n    for i in range(l):\n        if arr[i]!=0:\n            print(arr[i])\ndef print_pattern(n):\n    '''\n    Write a function to print all non-negative integers of size n and with digits 0,1,2,3,5.\n    '''\n    arr=[]\n    for i in range(n):\n        arr.append(i)\n    arr.sort()\n    l=len(arr)\n    for i in range(l):\n        if arr[i]%5!=0:\n            print(arr[i])\ndef print_even_fibonacci(n):\n    '''\n    Write a function to print all even Fibonacci numbers in a given range.\n    '''\n    f=1\n    s=2\n    for i in range(n):\n        f,s=s,f+s\n        if f%2==0:\n            print(f)\ndef print_all_digits(n):\n    '''\n    Write a function to print all digits in a number.\n    '''\n    arr=[]\n    while n!=0:\n        arr.append(n%10)\n        n=n//10\n    for i in arr:\n        print(i)\ndef check_binary_string(str1):\n    '''\n    Write a function to check if a binary string is a palindrome or not.\n    '''\n    l1=len(str1)\n    l2=len(str1)-1\n    if l1==l2:\n        for i in range(l1//2):\n            if str1[i]!=str1[l2-i]:\n                return False\n        return True\n    else:\n        return False\ndef remove_duplicates(list1):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    l1=[]\n    for i in list1:\n        if i not in l1:\n            l1.append(i)\n    return l1\ndef print_nth_row_of_pascal(n):\n    '''\n    Write a function to print the nth row of the pascal triangle.\n    '''\n    arr=[1]\n    for i in range(n):\n        temp=[]\n        for j in range(len(arr)):\n            if j==0:\n                temp.append(arr[j])\n            elif j==len(arr)-1:\n                temp.append(arr[j-1])\n            else:\n                temp.append(arr[j-1]+arr[j])\n        arr=temp\n    for i in arr:\n        print(i,end=\" \")\n    print()\ndef print_nth_row_of_pascal_2(n):\n    '''\n    Write a function to print the nth row of the pascal triangle.\n    '''\n    arr=[1]\n    for i in range(n):\n        temp=[]\n        for j in range(len(arr)):\n            if j==0:\n                temp.append(arr[j])\n            elif j==len(arr)-1:\n                temp.append(arr[j-1])\n            else:\n                temp.append(arr[j-1]+arr[j])\n        arr=temp\n    for i in arr:\n        print(i,end=\" \")\n    print()\ndef is_leap_year(year):\n    '''\n    Write a function to check if a year is a leap year.\n    '''\n    if year%4==0 and year%100!=0:\n        return True\n    elif year%400==0:\n        return True\n    return False\ndef print_divisors(n):\n    '''\n    Write a function to print all the divisors of a given number.\n    '''\n    for i in range(1,n+1):\n        if n%i==0:\n            print(i)\ndef find_permutation(str1,str2):\n    '''\n    Write a function to check if a string is a permutation of a given string.\n    '''\n    if len(str1)!=len(str2):\n        return False\n    else:\n        str1=list(str1)\n        str2=list(str2)\n        l1=[]\n        for i in str1:\n            l1.append(str1.count(i))\n        for i in str2:\n            if str2.count(i) not in l1:\n                return False\n        return True\ndef print_permutation(str1,str2):\n    '''\n    Write a function to print all the permutations of a given string.\n    '''\n    if len(str1)!=len(str2):\n        return\n    else:\n        str1=list(str1)\n        str2=list(str2)\n        l1=[]\n        for i in str1:\n            l1.append(str1.count(i))\n        for i in str2:\n            if str2.count(i) not in l1:\n                return\n        l1=[]\n        for i in range(len(str2)):\n            l1.append([])\n        for i in range(len(str2)):\n            for j in str1:\n                if str2[i]==j:\n                    l1[i].append(j)\n        for i in l1:\n            print(i)\ndef factorial(n):\n    '''\n    Write a function to return the factorial of a given number.\n    '''\n    f=1\n    for i in range(n):\n        f=f*(i+1)\n    return f\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if n%2==0 and n!=2:\n        return False\n    for i in range(3,n,2):\n        if n%i==0:\n            return False\n    return True\ndef is_rotated_string(str1,str2):\n    '''\n    Write a function to check if a string is a rotated string of another string.\n    '''\n    if len(str1)!=len(str2):\n        return False\n    else:\n        l1=list(str1)\n        l2=list(str2)\n        l1.sort()\n        l2.sort()\n        for i in range(len(str1)):\n            if l1[i]!=l2[i]:\n                return False\n        return True\ndef is_rotated_string_2(str1,str2):\n    '''\n    Write a function to check if a string is a rotated string of another string.\n    '''\n    if len(str1)!=len(str2):\n        return False\n    else:\n        l1=list(str1)\n        l2=list(str",
        "num_ids": 41
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # for k, g in groupby(list1):\n    #     print k, len(list(g))\n    # return map(list, groupby(list1))\n    return [list(g) for k, g in groupby(list1)]\n",
        "num_ids": 62
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # the key is a tuple, and the value is the number of occurrences\n    dict1 = {}\n    for lst in list1:\n        list_t = tuple(lst)\n        dict1.setdefault(list_t, 0)\n        dict1[list_t] += 1\n    return dict1\n",
        "num_ids": 75
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for elem in list1:\n        if elem not in counts:\n            counts[elem] = 1\n        else:\n            counts[elem] += 1\n    return counts\n",
        "num_ids": 54
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    s = []\n    for i in list1:\n        if isinstance(i, list):\n            s.append(tuple(i))\n    if s == []:\n        return {}\n    else:\n        return {s[x]: list1.count(s[x]) for x in range(0, len(s))}\n",
        "num_ids": 80
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    # your code here\n    \n    list2 = []\n    for i in list1:\n        list2 += [i]\n    \n    dict1 = {}\n    for i in range(len(list2)):\n        if not list2[i] in dict1:\n            dict1[list2[i]] = 1\n        else:\n            dict1[list2[i]] += 1\n    \n    return dict1\n",
        "num_ids": 103
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return {i:list1.count(i) for i in list1}\n",
        "num_ids": 21
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    pass\n    output = {}\n    for x in range(len(list1)):\n        key = tuple(list1[x])\n        if key in output:\n            output[key] += 1\n        else:\n            output[key] = 1\n    return output\n",
        "num_ids": 65
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for i in range(len(list1)):\n        list2 = list1[i]\n        if list2 not in count_dict.keys():\n            count_dict[tuple(list2)] = 0\n        count_dict[tuple(list2)] += 1\n    return count_dict\n",
        "num_ids": 79
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dic = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in dic:\n            dic[sublist_tuple] = 1\n        else:\n            dic[sublist_tuple] += 1\n    return dic\n",
        "num_ids": 78
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for list1 in list1:\n        tup = tuple(list1)\n        counts[tup] = counts.get(tup,0) + 1\n    return counts\nprint unique_sublists([[1,2], [2,3], [3,4], [4,5]])\n",
        "num_ids": 79
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict1 = {}\n    for i in range(len(list1)):\n        tuple1 = tuple(list1[i])\n        if tuple1 in dict1:\n            dict1[tuple1] += 1\n        else:\n            dict1[tuple1] = 1\n    return dict1\n",
        "num_ids": 74
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    output = []\n    for tup in test_list:\n        if len(tup) == 2:\n            output.append(tup)\n    \n    output = list(combinations(test_list,2))\n",
        "num_ids": 56
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # getting list of tuples\n    result = list()\n    for sublist in test_list:\n        sublist = sorted(sublist)\n        if sublist not in result:\n            result.append(sublist)\n    # getting sum of tuples\n    for each_tuple in result:\n        sum_of_tuple = sum(each_tuple)\n        # getting all combinations of sum\n        temp = list()\n        for sublist in test_list:\n            sublist = sorted(sublist)\n            if sum_of_tuple == sum(sublist):\n                temp.append(sublist)\n        # getting combinations\n        temp = list(combinations(temp, len(each_tuple)))\n        for each_combination in temp:\n            if each_combination not in result:\n                result.append(each_combination)\n    return result\n",
        "num_ids": 205
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    output = []\n    for i in range(1, len(test_list)+1):\n        temp = list(combinations(test_list, i))\n        for j in temp:\n            if sum(j) == 100:\n                output.append(j)\n    return output\n",
        "num_ids": 68
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sums_of_numbers = []\n    for sublist in test_list:\n        sublist = [x for x in sublist]\n        if (len(sublist) == 1):\n            sums_of_numbers.append(sum(sublist))\n        else:\n            for subset in combinations(sublist, 2):\n                sums_of_numbers.append(sum(subset))\n",
        "num_ids": 98
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combo_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            summation = sum(test_list[i]) + sum(test_list[j])\n            combo_list.append((test_list[i], test_list[j], summation))\n    return combo_list\n",
        "num_ids": 95
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_list = []\n    tuple_list = [tuple(l) for l in test_list]\n    for k in range(len(test_list)):\n        for i in range(k,len(test_list)):\n            for l in combinations(tuple_list,k+1):\n                comb_list.append(sum(l[j] for j in range(k+1)))\n    return comb_list\n",
        "num_ids": 104
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    count = 0\n    for i in range(1, len(test_list)+1):\n        count += len(combinations(test_list, i))\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for tup in test_list:\n        for i in range(len(test_list)):\n            if i > 0:\n                comb = combinations(tup, i)\n                comb_list = list(comb)\n                for c in comb_list:\n                    print(c)\n",
        "num_ids": 69
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list.sort()\n    final_list=[]\n    for i in range(len(test_list)):\n        comb=combinations(test_list,i)\n        for j in comb:\n            sum=0\n            for k in j:\n                sum+=k\n            if sum==0:\n                final_list.append(j)\n    return final_list\n",
        "num_ids": 91
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #all possible pair sums\n    total = sum(test_list)\n    length = len(test_list)\n    pairs = list(combinations(test_list, 2))\n    return pairs\n    \ndef find_fraction(tot, test_list):\n    for a,b in test_list:\n        if a+b == tot:\n            return a,b\n",
        "num_ids": 91
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1) :\n        if n % i == 0 : \n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisor = 2\n    count = 0\n    while divisor <= math.sqrt(n):\n        if n % divisor == 0:\n            count += 2\n        divisor += 1\n    if n == 1:\n        count -= 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False\ndef sum_of_factors(n) : \n    '''\n    Write a python function to return the sum of the divisors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    divisor = 2\n    sum = 1\n    while divisor <= math.sqrt(n):\n        if n % divisor == 0:\n            sum = sum + divisor\n        divisor += 1\n    return sum\ndef distinct_divisors(n) : \n    '''\n    Write a python function to return the sum of the distinct divisors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    divisor = 2\n    sum = 1\n    distinct_divisors = 1\n    while divisor <= math.sqrt(n):\n        if n % divisor == 0:\n            sum = sum + sum_of_factors(divisor)\n            if sum > distinct_divisors :\n                distinct_divisors = sum\n        divisor += 1\n    return distinct_divisors\ndef is_perfect_square(n) : \n    '''\n    Write a python function to return True if the number is a perfect square. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    divisor = 2\n    while divisor <= math.sqrt(n):\n        if n % divisor == 0:\n            return False\n        divisor += 1\n    return True\ndef is_prime(n) : \n    '''\n    Write a python function to return True if the number is prime. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    divisor = 2\n    while divisor <= math.sqrt(n):\n        if n % divisor == 0:\n            return False\n        divisor += 1\n    return True\ndef is_perfect_number(n) : \n    '''\n    Write a python function to return True if the number is perfect. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    sum = n\n    temp = 0\n    while temp < sum :\n        temp += distinct_divisors(temp)\n    return sum == temp\ndef is_abundant(n) : \n    '''\n    Write a python function to return True if the number is abundant. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    sum = n\n    temp = 0\n    while temp < sum :\n        temp += sum_of_factors(temp)\n    return sum > temp\ndef is_abundant_not(n) : \n    '''\n    Write a python function to return True if the number is abundant. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    sum = n\n    temp = 0\n    while temp < sum :\n        temp += sum_of_factors(temp)\n    return sum < temp\ndef is_abundant_not_number(n) : \n    '''\n    Write a python function to return True if the number is abundant. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    sum = n\n    temp = 0\n    while temp < sum :\n        temp += sum_of_factors(temp)\n    return sum < temp\ndef is_abundant_number(n) : \n    '''\n    Write a python function to return True if the number is abundant. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    sum = n\n    temp = 0\n    while temp < sum :\n        temp += sum_of_factors(temp)\n    return sum > temp\ndef is_abundant_number_not(n) : \n    '''\n    Write a python function to return True if the number is abundant. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    sum = n\n    temp = 0\n    while temp < sum :\n        temp += sum_of_factors(temp)\n    return sum > temp\ndef is_abundant_number_not_number(n) : \n    '''\n    Write a python function to return True if the number is abundant. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    sum = n\n    temp = 0\n    while temp < sum :\n        temp += sum_of_factors(temp)\n    return sum > temp\ndef is_abundant_number_is_not(n) : \n    '''\n    Write a python function to return True if the number is abundant. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    sum = n\n    temp = 0\n    while temp < sum :\n        temp += sum_of_factors(temp)\n    return sum < temp\ndef is_abundant_number_is(n) : \n    '''\n    Write a python function to return True if the number is abundant. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    sum = n\n    temp = 0\n    while temp < sum :\n        temp += sum_of_factors(temp)\n    return sum < temp\ndef is_abundant_number_not_number(n) : \n    '''\n    Write a python function to return True if the number is abundant. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    sum = n\n    temp = 0\n    while temp < sum :\n        temp += sum_of_factors(temp)\n    return sum < temp\ndef is_abundant_number_not_number(n) : \n    '''\n    Write a python function to return True if the number is abundant. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    sum = n\n    temp = 0\n    while temp < sum :\n        temp += sum_of_factors(temp)\n    return sum > temp\ndef is_abundant_number_is_not(n) : \n    '''\n    Write a python function to return True if the number is abundant. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    sum = n\n    temp = 0\n    while temp < sum :\n        temp += sum_of_factors(temp)\n    return sum < temp\ndef is_abundant_number_is(n) : \n    '''\n    Write a python function to return True if the number is abundant. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    sum = n\n    temp = 0\n    while temp < sum :\n        temp += sum_of_factors(temp)\n    return sum > temp\ndef is_abundant_number_not",
        "num_ids": 48
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    i = 1\n    while i <= n :\n        if n % i == 0 :\n            divisors += 1\n        i += 1\n    return divisors % 2 == 0\n",
        "num_ids": 52
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 0 :\n        return 0\n    else :\n        n= int(n)\n        count = 0\n        for i in range(1, int(math.sqrt(n)) + 1) :\n            if (n % i == 0) :\n                count = count + 2\n        if (n == 1) :\n            count = 1\n        return count\n",
        "num_ids": 88
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divs = {}\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i == 0:\n            divs[i] = divs.get(i,0) + 1\n            if n/i!= i:\n                divs[n/i] = divs.get(n/i,0) + 1\n    count = 0\n    for k,v in divs.items():\n        if v%2 == 1:\n            count += 1\n    return count\ndef sum_prime_divisors(n):\n    '''\n    Write a python function to check whether the sum of the prime divisors is equal to the number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    divs = []\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            divs.append(i)\n            if n/i!= i:\n                divs.append(n/i)\n    return sum(divs)\ndef count_lower_case(s):\n    '''\n    Write a python function to count the number of lower case characters. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    count = 0\n    for i in s:\n        if i.islower():\n            count += 1\n    return count\ndef is_pangram(s):\n    '''\n    Write a python function to check whether the given string is a pangram. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for i in alphabet:\n        if i not in s:\n            return False\n    return True\ndef swap_nodes(root, k):\n    '''\n    Write a python function to swap two nodes in a binary tree. https://www.w3resource.com/python-exercises/data-structures-and-algorithms-in-python/python-recursion-3-recursive-methods-in-python.php\n    '''\n    if k > root.data and root.right:\n        swap_nodes(root.right, k)\n    elif k < root.data and root.left:\n        swap_nodes(root.left, k)\n    else:\n        temp = root.data\n        root.data = k\n        k = temp\ndef right_side_view(root):\n    '''\n    Write a python function to right side view of a binary tree. https://www.w3resource.com/python-exercises/data-structures-and-algorithms-in-python/python-recursion-3-recursive-methods-in-python.php\n    '''\n    h = []\n    if root:\n        h.append(root)\n    while h:\n        temp = h[-1]\n        if temp.left:\n            h.append(temp.left)\n        elif temp.right:\n            h.append(temp.right)\n        else:\n            print(temp.data)\n            h.pop()\ndef balanced_bst(root):\n    '''\n    Write a python function to check if the given tree is balanced or not. https://www.w3resource.com/python-exercises/data-structures-and-algorithms-in-python/python-recursion-3-recursive-methods-in-python.php\n    '''\n    def check_balanced(root):\n        if root.left:\n            left = check_balanced(root.left)\n            if left == -1:\n                return -1\n        if root.right:\n            right = check_balanced(root.right)\n            if right == -1:\n                return -1\n        if abs(left-right) > 1:\n            return -1\n        else:\n            return max(left,right) + 1\n    return check_balanced(root)!= -1\ndef count_leaf_nodes(root):\n    '''\n    Write a python function to count the number of leaf nodes in a tree. https://www.w3resource.com/python-exercises/data-structures-and-algorithms-in-python/python-recursion-3-recursive-methods-in-python.php\n    '''\n    def check_leaf(root):\n        if root.left:\n            check_leaf(root.left)\n        elif root.right:\n            check_leaf(root.right)\n        else:\n            leaf_count[0] += 1\n    leaf_count = [0]\n    check_leaf(root)\n    return leaf_count[0]\ndef count_unival_trees(root):\n    '''\n    Write a python function to count the number of unival trees in a given tree. https://www.w3resource.com/python-exercises/data-structures-and-algorithms-in-python/python-recursion-3-recursive-methods-in-python.php\n    '''\n    def check_unival(root, is_unival):\n        if root == None:\n            return True\n        if is_unival:\n            if root.left and root.right:\n                if root.left.data!= root.right.data:\n                    return False\n            elif root.left or root.right:\n                return False\n            else:\n                return True\n        else:\n            return False\n    def count_unival_trees_helper(root, is_unival):\n        if root == None:\n            return 0\n        count = 0\n        if check_unival(root, is_unival):\n            count += 1\n        count += count_unival_trees_helper(root.left, is_unival)\n        count += count_unival_trees_helper(root.right, is_unival)\n        return count\n    return count_unival_trees_helper(root, True)\ndef count_nodes(root):\n    '''\n    Write a python function to count the number of nodes in a given tree. https://www.w3resource.com/python-exercises/data-structures-and-algorithms-in-python/python-recursion-3-recursive-methods-in-python.php\n    '''\n    if root == None:\n        return 0\n    return 1 + count_nodes(root.left) + count_nodes(root.right)\ndef find_maximum_in_bst(root):\n    '''\n    Write a python function to find the maximum value in a given binary tree. https://www.w3resource.com/python-exercises/data-structures-and-algorithms-in-python/python-recursion-3-recursive-methods-in-python.php\n    '''\n    def check_maximum(root):\n        if root == None:\n            return None\n        if root.right:\n            return check_maximum(root.right)\n        return root.data\n    return check_maximum(root)\ndef deepest_node(root):\n    '''\n    Write a python function to find the deepest node in a given binary tree. https://www.w3resource.com/python-exercises/data-structures-and-algorithms-in-python/python-recursion-3-recursive-methods-in-python.php\n    '''\n    def check_deepest(root):\n        if root == None:\n            return None\n        if root.left:\n            l_depth = check_deepest(root.left)\n        else:\n            l_depth = 0\n        if root.right:\n            r_depth = check_deepest(root.right)\n        else:\n            r_depth = 0\n        if l_depth > r_depth:\n            return l_depth + 1\n        else:\n            return r_depth + 1\n    return check_deepest(root)\ndef lca(root, a, b):\n    '''\n    Write a python function to find the lowest common ancestor in a given binar",
        "num_ids": 18
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 1 \n    for i in range(2, int(math.sqrt(n))+1) : \n        if n%i == 0 : \n            divisors+=1 \n            if i!= n/i : \n                divisors+=1 \n    return divisors \ndef is_perfect(n) : \n    '''\n    Write a python function to check whether the number is perfect or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    sum = 0 \n    for i in range(1, n) : \n        if n%i == 0 : \n            sum+=i \n    if sum == n : \n        return True \n    return False \ndef is_pandigital(n) : \n    '''\n    Write a python function to check whether the number is pandigital or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-36.php\n    '''\n    l = [0,0,0,0,0,0,0,0,0,0] \n    for i in range(1,len(str(n))) : \n        x = int(str(n)[i-1]) \n        if x > 9 : \n            x = ord(x) - ord('0') \n        if l[x] == 1 : \n            return False \n        l[x] = 1 \n    return True \ndef is_armstrong(n) : \n    '''\n    Write a python function to check whether the number is armstrong or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-38.php\n    '''\n    sum = 0 \n    temp = n \n    while temp > 0 : \n        digit = temp % 10 \n        sum+=digit**3 \n        temp//=10 \n    if n == sum : \n        return True \n    return False \ndef is_palindrome(n) : \n    '''\n    Write a python function to check whether the number is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-43.php\n    '''\n    temp = n \n    rev = 0 \n    while n > 0 : \n        rev*=10 \n        rev+=n%10 \n        n//=10 \n    if rev == temp : \n        return True \n    return False \ndef is_binary(n) : \n    '''\n    Write a python function to check whether the number is binary or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-47.php\n    '''\n    if n == 0 : \n        return True \n    return False \ndef is_factorial(n) : \n    '''\n    Write a python function to check whether the number is factorial or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-49.php\n    '''\n    if n == 1 : \n        return True \n    return False \ndef is_prime(n) : \n    '''\n    Write a python function to check whether the number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-50.php\n    '''\n    if n == 1 or n == 0 : \n        return False \n    for i in range(2, int(math.sqrt(n))+1) : \n        if n%i == 0 : \n            return False \n    return True \ndef is_rotational_prime(n) : \n    '''\n    Write a python function to check whether the number is rotational prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-52.php\n    '''\n    if is_prime(n) : \n        num = str(n) \n        length = len(num) \n        for i in range(length) : \n            if num[i]!= num[length-i-1] : \n                return False \n        return True \n    return False \ndef is_rotational_prime_fast(n) : \n    '''\n    Write a python function to check whether the number is rotational prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-52.php\n    '''\n    if is_prime(n) : \n        n_str = str(n) \n        l = len(n_str) \n        for i in range(l) : \n            if n_str[i:] + n_str[:i]!= n_str : \n                return False \n        return True \n    return False \ndef is_rotational_prime_fast_2(n) : \n    '''\n    Write a python function to check whether the number is rotational prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-52.php\n    '''\n    if is_prime(n) : \n        n_str = str(n) \n        l = len(n_str) \n        for i in range(1,l) : \n            if n_str[i:] + n_str[:i]!= n_str : \n                return False \n        return True \n    return False \ndef is_factor(n) : \n    '''\n    Write a python function to check whether the number is factor or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-54.php\n    '''\n    for i in range(2, int(math.sqrt(n))+1) : \n        if n%i == 0 : \n            return True \n    return False \ndef is_abundant(n) : \n    '''\n    Write a python function to check whether the number is abundant or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-56.php\n    '''\n    sum = 0 \n    for i in range(1, n) : \n        if n%i == 0 : \n            sum+=i \n    if sum > n : \n        return True \n    return False \ndef is_abundant_2(n) : \n    '''\n    Write a python function to check whether the number is abundant or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-56.php\n    '''\n    s = 0 \n    for i in range(1, int(math.sqrt(n))+1) : \n        if n%i == 0 : \n            s+=i + n//i\n    return s > n \ndef is_abundant_3(n) : \n    '''\n    Write a python function to check whether the number is abundant or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-56.php\n    '''\n    s = 0 \n    for i in range(1, int(math.sqrt(n))+1) : \n        if n%i == 0 : \n            s+=i + n//i\n    return s > n \ndef is_abundant_4(n) : \n    '''\n    Write a python function to check whether the number is abundant or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-56.php\n    '''\n    s = 0 \n    for i in range(1, int(math.sqrt(n))+1) : \n        if n%i == 0 : \n            s+=i + n//i\n    return s > n \ndef is_abundant_5(n) : ",
        "num_ids": 70
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 1\n    i = 1\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            divisors += 2\n        i += 1\n    if divisors % 2 == 0:\n        return True\n    else :\n        return False\ndef prime(n):\n    '''\n    Write a python function to check whether the number is prime. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    #prime numbers are greater than 1\n    if n < 2:\n        return False\n    #check divisibility by numbers from 2 to sqrt(n)\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef sum_digits(n) : \n    '''\n    Write a python function to check whether the sum of digits is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    sum = 0\n    while n > 0:\n        #print(n%10)\n        sum += n % 10\n        n = n // 10\n    if sum % 2 == 0:\n        return True\n    else:\n        return False\ndef num_to_list(num):\n    '''\n    Write a python function to convert a given number to a list of its digits. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    digits = []\n    while num > 0:\n        digits.append(num % 10)\n        num = num // 10\n    return digits\ndef list_to_num(digits):\n    '''\n    Write a python function to convert a given list of digits to a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    num = 0\n    #print(digits)\n    for i in range(len(digits)):\n        #print(digits[i])\n        num = num * 10 + digits[i]\n    return num\ndef remove_duplicates(arr):\n    '''\n    Write a python function to remove duplicates from a given list. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    return set(arr)\ndef list_to_str(list):\n    '''\n    Write a python function to convert a given list to a string. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    str = \"\"\n    for i in range(len(list)):\n        str += str(list[i])\n    return str\ndef str_to_list(str):\n    '''\n    Write a python function to convert a given string to a list. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    list = []\n    for i in range(len(str)):\n        list.append(str[i])\n    return list\ndef is_palindrome(num):\n    '''\n    Write a python function to check whether a given number is a palindrome. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    str = \"\"\n    while num > 0:\n        str += str(num % 10)\n        num = num // 10\n    return str == str[::-1]\ndef power(x,y):\n    '''\n    Write a python function to calculate the power of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    return x**y\ndef is_power(x,y):\n    '''\n    Write a python function to check whether a number is a power of another number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    if x == y or y == 1:\n        return True\n    elif x < y:\n        return False\n    else:\n        return (x % y) == 0\ndef sum_of_digits(n):\n    '''\n    Write a python function to check whether the sum of digits is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-35.php\n    '''\n    return sum(num_to_list(n)) % 2 == 0\ndef is_armstrong(n):\n    '''\n    Write a python function to check whether a given number is an armstrong number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-36.php\n    '''\n    #print(n)\n    sum = 0\n    num = n\n    while n > 0:\n        #print(n%10)\n        sum += power(n%10,len(str(n)))\n        n = n // 10\n    #print(sum)\n    if sum == num:\n        return True\n    else:\n        return False\ndef is_perfect_square(n):\n    '''\n    Write a python function to check whether a given number is a perfect square. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-37.php\n    '''\n    #perfect squares are the squares where the square of the integer part is equal to the integer part\n    for i in range(int(math.sqrt(n)),0,-1):\n        if math.sqrt(n) == i**2:\n            return True\n    return False\ndef reverse_string(str):\n    '''\n    Write a python function to reverse a given string. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-38.php\n    '''\n    return str[::-1]\ndef is_reverse(str1,str2):\n    '''\n    Write a python function to check whether a given string is a reverse of another string. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-39.php\n    '''\n    #reversing the string\n    #str1[::-1]\n    #print(str1)\n    #print(str2)\n    #print(str1[::-1] == str2)\n    return str1[::-1] == str2\ndef is_factorial(n):\n    '''\n    Write a python function to check whether a given number is a factorial. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-40.php\n    '''\n    #factorial numbers are numbers that can be written as the product of n-1 numbers\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    else:\n        return (n % 2 == 0 and is_factorial(n - 2)) or is_factorial(n - 1)\ndef is_binomial(n,k):\n    '''\n    Write a python function to check whether a given number is a binomial coefficient. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-41.php\n    '''\n    if k > n:\n        return False\n    k = min(k,n - k)\n    return math.factorial(n) // math.factorial(n - k) // math.factorial(k)\ndef is_pandigital(num,base=1):\n    '''\n    Write a python function to check whether a given number is pandigital. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-42.php\n    '''\n    #convert the number to a string and filter ou",
        "num_ids": 15
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, n + 1) :\n        if n % i == 0 :\n            divisors += 1\n    return divisors % 2 == 0\n    \ndef sum_divisors(n) :\n    '''\n    Write a python function to return the sum of divisors of the given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    sum = 0\n    for i in range(1, n) :\n        if n % i == 0 :\n            sum += i\n    return sum\n",
        "num_ids": 37
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    div = 0\n    for i in range(1, n + 1): \n        if n % i == 0: \n            div += 1\n    if div % 2 == 0: \n        return True\n    else: \n        return False\n",
        "num_ids": 59
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1:\n        return False\n    divisors = [1]\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.extend([i, n/i])\n    divisors.append(n)\n    return len(divisors) % 2 == 0\ndef isPrime(n) :\n    '''\n    Write a python function to check whether the number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    if n == 2 :\n        return True\n    elif n > 2 and n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef fibonacci(n):\n    '''\n    Write a python function to find the nth value of the fibonacci series. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    a, b = 0, 1\n    while n > 0:\n        a, b = b, a + b\n        n -= 1\n    return a\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\ndef isEven(n) : \n    '''\n    Write a python function to check whether the number is even or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    return n % 2 == 0\ndef isOdd(n) : \n    '''\n    Write a python function to check whether the number is odd or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    return n % 2 == 1\ndef isPrime(n) :\n    '''\n    Write a python function to check whether the number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    if n == 2 :\n        return True\n    elif n > 2 and n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef isPrime(n):\n    '''\n    Write a python function to check whether the number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    if n == 2 :\n        return True\n    elif n > 2 and n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef digit_count(n) :\n    '''\n    Write a python function to count the number of digits in a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    count = 0\n    while n > 0:\n        n //= 10\n        count += 1\n    return count\ndef add_digits(n) :\n    '''\n    Write a python function to add the digits of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    count = 0\n    while n > 0:\n        n //= 10\n        count += 1\n    return count\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1:\n        return False\n    divisors = [1]\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.extend([i, n/i])\n    divisors.append(n)\n    return len(divisors) % 2 == 0\ndef isPrime(n) :\n    '''\n    Write a python function to check whether the number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    if n == 2 :\n        return True\n    elif n > 2 and n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef fibonacci(n):\n    '''\n    Write a python function to find the nth value of the fibonacci series. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    a, b = 0, 1\n    while n > 0:\n        a, b = b, a + b\n        n -= 1\n    return a\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\ndef isEven(n) : \n    '''\n    Write a python function to check whether the number is even or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    return n % 2 == 0\ndef isOdd(n) : \n    '''\n    Write a python function to check whether the number is odd or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    return n % 2 == 1\ndef isPrime(n):\n    '''\n    Write a python function to check whether the number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    if n == 2 :\n        return True\n    elif n > 2 and n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef isPrime(n):\n    '''\n    Write a python function to check whether the number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    if n == 2 :\n        return True\n    elif n > 2 and n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef add_digits(n) :\n    '''\n    Write a python function to add the digits of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    count = 0\n    while n > 0:\n        n //= 10\n        count += 1\n    return count\ndef count_divisors(n) : \n    '''\n    Write ",
        "num_ids": 5
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # print arr\n    # print len(arr)\n    return sum(arr)\n",
        "num_ids": 22
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if not arr:\n        return 0\n    else:\n        return sum(arr)\n",
        "num_ids": 23
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    summ = arr[0]\n    for i in range(1, len(arr)):\n        if i % 2!= 0:\n            summ = summ + arr[i]\n    return summ\n",
        "num_ids": 64
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # pass array here\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr),2):\n            if j <= len(arr)-1:\n                result = result + sum(arr[i:j])\n    return result\n",
        "num_ids": 69
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum([arr[i] for i in range(1,len(arr),2)])\n",
        "num_ids": 25
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        sum = 0\n        for i in range(len(arr)):\n            sum += arr[i]\n        return sum\n",
        "num_ids": 67
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    '''\n    solution 1: use prefix sum\n    '''\n    prefix_sum = [0]\n    prefix_sum += arr\n    for i in range(2, len(prefix_sum)):\n        prefix_sum[i] += prefix_sum[i-1]\n    sum_odd = 0\n    for i in range(1, len(prefix_sum), 2):\n        sum_odd += prefix_sum[i] - prefix_sum[i-1]\n    return sum_odd\n",
        "num_ids": 102
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr), 2):\n            total_sum += sum(arr[i:j])\n    return total_sum\n",
        "num_ids": 56
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr), 2):\n            if len(arr[i:j+1]) % 2!= 0:\n                sum += sum(arr[i:j+1])\n    return sum\n",
        "num_ids": 71
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # variable to store the sum of subarrays\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr), 2):\n            sum += sum(arr[i:j+1])\n",
        "num_ids": 60
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    diff = cmax-cmin\n    if cmax == cmin:\n        h = 0\n    elif cmax == r:\n        h = (60 * ((g-b)/diff) + 360) % 360\n    elif cmax == g:\n        h = (60 * ((b-r)/diff) + 120) % 360\n    elif cmax == b:\n        h = (60 * ((r-g)/diff) + 240) % 360\n    if cmax == 0:\n        s = 0\n    else:\n        s = (diff/cmax)\n    v = cmax\n    return h, s, v\n",
        "num_ids": 201
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n",
        "num_ids": 196
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r/255.0\n    g = g/255.0\n    b = b/255.0\n    minimum = min(r, g, b)\n    maximum = max(r, g, b)\n    delta = maximum - minimum\n    if delta == 0:\n        hue = 0\n    elif maximum == r:\n        hue = (g - b) / delta % 6\n    elif maximum == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue *= 60\n    if hue < 0:\n        hue += 360\n    if maximum == 0:\n        saturation = 0\n    else:\n        saturation = delta / maximum\n    return hue, saturation, maximum\n    \ndef hue_to_rgb(hue, saturation, maximum):\n    '''\n    Write a function to convert hue to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    hue *= 6\n    i = int(hue)\n    p = hue - i\n    if i == 0:\n        r = maximum\n        g = maximum\n        b = maximum\n    elif i == 1:\n        r = maximum - (maximum - minimum) * p\n        g = maximum\n        b = maximum - (maximum - minimum) * p\n    elif i == 2:\n        r = maximum - (maximum - minimum) * p\n        g = maximum\n        b = maximum - (maximum - minimum) * p\n    elif i == 3:\n        r = maximum\n        g = maximum - (maximum - minimum) * p\n        b = maximum - (maximum - minimum) * p\n    elif i == 4:\n        r = maximum - (maximum - minimum) * p\n        g = maximum\n        b = maximum\n    elif i == 5:\n        r = maximum\n        g = maximum\n        b = maximum - (maximum - minimum) * p\n    return r, g, b\n    \ndef get_pixel(image, x, y):\n    '''\n    Write a function to extract the pixel information of image at x, y\n    '''\n    image_x = x - image.x\n    image_y = y - image.y\n    if image_x < 0 or image_x > image.width or image_y < 0 or image_y > image.height:\n        return None\n    return image.get_pixel(image_x, image_y)\n    \ndef get_color(image, x, y):\n    '''\n    Write a function to extract the color information of image at x, y\n    '''\n    pixel = get_pixel(image, x, y)\n    if not pixel:\n        return None\n    return pixel.red, pixel.green, pixel.blue\n    \ndef set_color(image, x, y, red, green, blue):\n    '''\n    Write a function to set the color information of image at x, y\n    '''\n    pixel = get_pixel(image, x, y)\n    pixel.red = red\n    pixel.green = green\n    pixel.blue = blue\n    image.update_pixel(x, y, pixel)\n    \ndef load_image(filename):\n    '''\n    Write a function to load an image from the file named filename\n    '''\n    image = Image()\n    image.load_image(filename)\n    return image\n    \ndef draw_image(image, x, y, width, height, color):\n    '''\n    Write a function to draw an image at x, y with width, height and color\n    '''\n    image.draw_image(x, y, width, height, color)\n    \ndef draw_line(image, x1, y1, x2, y2, color):\n    '''\n    Write a function to draw a line from (x1, y1) to (x2, y2) with color\n    '''\n    image.draw_line(x1, y1, x2, y2, color)\n    \ndef fill_image(image, color):\n    '''\n    Write a function to fill the image with color\n    '''\n    image.fill_image(color)\n    \ndef copy_image(image):\n    '''\n    Write a function to copy an image to the clipboard\n    '''\n    image.copy_image()\n    \ndef save_image(image, filename):\n    '''\n    Write a function to save the image to a file with the name filename\n    '''\n    image.save_image(filename)\n    \ndef image_add(image1, image2):\n    '''\n    Write a function to add two images together\n    '''\n    new_image = Image()\n    new_image.width = image1.width\n    new_image.height = image1.height\n    new_image.pixels = []\n    for y in range(image1.height):\n        for x in range(image1.width):\n            r1, g1, b1 = get_color(image1, x, y)\n            r2, g2, b2 = get_color(image2, x, y)\n            r = r1 + r2\n            g = g1 + g2\n            b = b1 + b2\n            red, green, blue = hue_to_rgb(r, g, b)\n            set_color(new_image, x, y, red, green, blue)\n    return new_image\n    \ndef image_subtract(image1, image2):\n    '''\n    Write a function to subtract two images\n    '''\n    new_image = Image()\n    new_image.width = image1.width\n    new_image.height = image1.height\n    new_image.pixels = []\n    for y in range(image1.height):\n        for x in range(image1.width):\n            r1, g1, b1 = get_color(image1, x, y)\n            r2, g2, b2 = get_color(image2, x, y)\n            r = r1 - r2\n            g = g1 - g2\n            b = b1 - b2\n            red, green, blue = hue_to_rgb(r, g, b)\n            set_color(new_image, x, y, red, green, blue)\n    return new_image\n    \ndef image_multiply(image1, image2):\n    '''\n    Write a function to multiply two images\n    '''\n    new_image = Image()\n    new_image.width = image1.width\n    new_image.height = image1.height\n    new_image.pixels = []\n    for y in range(image1.height):\n        for x in range(image1.width):\n            r1, g1, b1 = get_color(image1, x, y)\n            r2, g2, b2 = get_color(image2, x, y)\n            r = r1 * r2\n            g = g1 * g2\n            b = b1 * b2\n            red, green, blue = hue_to_rgb(r, g, b)\n            set_color(new_image, x, y, red, green, blue)\n    return new_image\n    \ndef image_scale(image, factor):\n    '''\n    Write a function to scale an image by factor\n    '''\n    new_image = Image()\n    new_image.width = image.width * factor\n    new_image.height = image.height * factor\n    new_image.pixels = []\n    for y in range(image.height):\n        for x in range(image.width):\n            r, g, b = get_color(image, x, y)\n            red, green, blue = hue_to_rgb(r, g, b)\n            set_color(new_image, x * factor, y * factor, red, green, blue)\n    return new_image\n    \ndef image_flip_vertically(image):\n    '''\n    Write a function to flip the image vertically\n    '''\n    new_image = Image()\n    new_image.width = image.width\n    new_image.height = image.height\n    new_image.pixels = []\n    for y i",
        "num_ids": 46
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (g-b)/df\n    elif mx == g:\n        h = 2 + (b-r)/df\n    else:\n        h = 4 + (r-g)/df\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    return h*360, s*100, v*100\n",
        "num_ids": 173
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    maximum = max(r, g, b)\n    minimum = min(r, g, b)\n    delta = maximum - minimum\n    v = maximum\n    if delta == 0:\n        h = 0\n    elif delta == maximum:\n        h = 60 * ((g - b) / delta % 6)\n    elif delta == minimum:\n        h = 60 * ((b - r) / delta + 2)\n    else:\n        h = 60 * ((g - b) / delta + 4)\n    if maximum == r:\n        s = delta / v\n    else:\n        s = delta / v\n    if maximum == g:\n        s = delta / v\n    else:\n        s = delta / v\n    h = h % 360\n    return h, s, v\n",
        "num_ids": 184
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    Max = max(r, g, b)\n    Min = min(r, g, b)\n    delta = Max - Min\n    hue = 0\n    if (Max == r and g >= b):\n        hue = (60 * ((g - b) / delta))\n    elif (Max == r and g < b):\n        hue = (60 * ((b - g) / delta)) + 360\n    elif (Max == g):\n        hue = (60 * ((b - r) / delta)) + 120\n    elif (Max == b):\n        hue = (60 * ((r - g) / delta)) + 240\n",
        "num_ids": 153
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    high = max(r, g, b)\n    low = min(r, g, b)\n    # print high, low\n    v = high\n    d = high - low\n    if high == low:\n        h = 0\n    elif high == r:\n        h = (60 * ((g-b)/d) + 360) % 360\n    elif high == g:\n        h = (60 * ((b-r)/d) + 120) % 360\n    elif high == b:\n        h = (60 * ((r-g)/d) + 240) % 360\n    if high == 0:\n        s = 0\n    else:\n        s = d / v\n    return (h, s, v)\n",
        "num_ids": 195
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if (r,g,b) == (0,0,0):\n        return 0,0,0\n    \n    max_ = max(r,g,b)\n    min_ = min(r,g,b)\n    diff = max_ - min_\n",
        "num_ids": 65
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    R = float(r)/255\n    G = float(g)/255\n    B = float(b)/255\n    C_max = max(R, G, B)\n    C_min = min(R, G, B)\n    delta = C_max - C_min\n    H = 0\n    if delta==0:\n        H = 0\n    elif C_max==R:\n        H = 60 * (((G-B)/delta)%6)\n    elif C_max==G:\n        H = 60 * (((B-R)/delta) + 2)\n    elif C_max==B:\n        H = 60 * (((R-G)/delta) + 4)\n    if C_max == 0:\n        S = 0\n    else:\n        S = delta/C_max\n    V = C_max\n    return [int(H), int(S*100), int(V*100)]\n",
        "num_ids": 224
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return (0.0, 0.0, v)\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return (h, s, v)\n",
        "num_ids": 200
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_prod = 1\n    odd_prod = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_prod *= num\n        else:\n            odd_prod *= num\n    return [even_prod, odd_prod]\n",
        "num_ids": 71
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    list_final = []\n    product = 0\n    for i in range(len(list1)):\n        if (list1[i]%2==0):\n            product = product*list1[i]\n        else:\n            product = product/list1[i]\n    list_final.append(product)\n    return list_final\n",
        "num_ids": 83
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even=1\n    odd=1\n    for i in list1:\n        if i%2==0:\n            even*=i\n        else:\n            odd*=i\n    print(even,odd)\n",
        "num_ids": 53
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n    for element in list1:\n        if element%2==0:\n            even *= element\n        else:\n            odd *= element\n    return [even, odd]\n",
        "num_ids": 53
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for number in list1:\n        if number % 2 == 0:\n            even_list.append(number)\n        else:\n            odd_list.append(number)\n    return (even_list[0]*odd_list[0], even_list[1]*odd_list[1])\n",
        "num_ids": 87
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    result = []\n    for i in range(0, len(list1), 2):\n        result.append(list1[i]*list1[i+1])\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n    for x in list1:\n        if x % 2 == 0:\n            even = even * x\n        else:\n            odd = odd * x\n    return [even, odd]\n",
        "num_ids": 55
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    list2=[]\n    for i in list1:\n        if i%2==0:\n            list2.append(i)\n    if len(list2)==0:\n        return 0\n    else:\n        return product(list2)\n",
        "num_ids": 61
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 1\n    odd_num = 1\n",
        "num_ids": 16
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple([int(i) for i in test_str[1:-1].split(',')])\n",
        "num_ids": 27
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.replace(')', '')\n    test_str = test_str.replace('(', '')\n    test_str = test_str.split(',')\n    test_str = tuple(map(int, test_str))\n    return test_str\n",
        "num_ids": 70
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Please write your code here\n    temp_lst = []\n    for i in test_str:\n        if i == ',':\n            break\n        temp_lst.append(i)\n    return tuple(int(i) for i in temp_lst)\n",
        "num_ids": 66
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    temp_l = test_str.split('-')\n    temp_l = [int(x) for x in temp_l]\n    return tuple(temp_l)\n",
        "num_ids": 43
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_list = [int(i) for i in test_str.split()]\n    return tuple(int_list)\n",
        "num_ids": 32
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return list(map(int,test_str.replace(',',' ').split()))\n",
        "num_ids": 24
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    num = [int(i) for i in test_str[1:-1].split(',')]\n    return tuple(num)\n",
        "num_ids": 34
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str[1:-1].split(',')))\n",
        "num_ids": 23
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    temp_list = test_str.split(',')\n    return int(temp_list[0]), int(temp_list[1])\n",
        "num_ids": 35
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return eval(test_str)\n",
        "num_ids": 11
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if a[-1] < x:\n        return len(a)\n    \n    pos = bisect.bisect_right(a, x)\n    if a[pos - 1]!= x:\n        return pos\n    else:\n        return pos - 1\n",
        "num_ids": 65
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    #Insertion in increasing order\n    '''\n    if len(a) == 0:\n        a.append(x)\n        return 0\n    #If x is greater than all the elements in a\n    if x > a[-1]:\n        a.append(x)\n        return len(a) - 1\n    #If x is smaller than the largest element in a\n    if x < a[0]:\n        a.insert(0,x)\n        return 0\n    #Else\n    #Find the largest element in a smaller than x\n    n = len(a)\n    i = bisect.bisect_left(a, x)\n    #If the smallest element in a[:i] is greater than x\n    if a[i] > x:\n        a.insert(i, x)\n        return i\n    #Else\n    #Find the smallest element in a[i:]\n    j = bisect.bisect_right(a, x)\n    #If the largest element in a[j:] is greater than x\n    if a[j] > x:\n        a.insert(j, x)\n        return j\n    #Else\n    #Insert x between a[i-1] and a[j]\n    a.insert(i,x)\n    return i\n    '''\n    #Insertion in decreasing order\n    '''\n    if len(a) == 0:\n        a.append(x)\n        return 0\n    #If x is greater than all the elements in a\n    if x > a[-1]:\n        a.append(x)\n        return len(a) - 1\n    #If x is smaller than the largest element in a\n    if x < a[0]:\n        a.insert(0,x)\n        return 0\n    #Else\n    #Find the smallest element in a[:i]\n    n = len(a)\n    i = bisect.bisect_left(a, x)\n    #If the largest element in a[:i] is greater than x\n    if a[i] > x:\n        a.insert(i, x)\n        return i\n    #Else\n    #Find the smallest element in a[i:]\n    j = bisect.bisect_right(a, x)\n    #If the smallest element in a[i:] is greater than x\n    if a[j] > x:\n        a.insert(j, x)\n        return j\n    #Else\n    #Insert x between a[i-1] and a[j]\n    a.insert(i,x)\n    return i\n",
        "num_ids": 289
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n",
        "num_ids": 22
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if a[-1] < x:\n        return len(a)\n    if a[0] > x:\n        return 0\n    l = 0\n    r = len(a) - 1\n    while l <= r:\n        m = (l + r) // 2\n        if a[m] < x:\n            l = m + 1\n        else:\n            r = m - 1\n    return l\n",
        "num_ids": 99
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = 0\n    for i in range(len(a)):\n        if a[i] >= x:\n            return i\n    return len(a)\n",
        "num_ids": 40
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    a = sorted(a)\n    for i in range(len(a)):\n        if a[i] <= x:\n            return i\n    return len(a)\n",
        "num_ids": 43
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = len(a)\n    left_idx = bisect.bisect_left(a, x)\n    right_idx = bisect.bisect_right(a, x)\n    if right_idx == l:\n        return right_idx\n    elif left_idx < right_idx:\n        return right_idx\n    else:\n        return right_idx + 1\n",
        "num_ids": 99
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    bisect.insort(a, x)\n    return a.index(x)\n",
        "num_ids": 23
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n",
        "num_ids": 22
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect(a, x)\n",
        "num_ids": 15
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"(a)(b){3}\")\n    return pattern.search(text)\n",
        "num_ids": 29
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.match(r'a\\b{3}\\b', text)\n",
        "num_ids": 21
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pass\n    pattern = re.compile(r'.*(ab{3})')\n    pattern2 = re.compile(r'a*b')\n    pattern3 = re.compile(r'(a*b)')\n    pattern4 = re.compile(r'a*b{3}')\n    pattern5 = re.compile(r'a*b{3}?')\n    pattern6 = re.compile(r'(ab)+')\n    pattern7 = re.compile(r'(ab)+?')\n    pattern8 = re.compile(r'(ab)*')\n    pattern9 = re.compile(r'(ab)*?')\n    pattern10 = re.compile(r'(ab)*?{2,3}')\n    pattern11 = re.compile(r'(ab)*?{3,4}?')\n    pattern12 = re.compile(r'(ab)*?{3,4}?')\n    pattern13 = re.compile(r'(ab)*?{4,5}?')\n    pattern14 = re.compile(r'(ab)*?{4,5}?')\n    pattern15 = re.compile(r'(ab)*?{4,}?')\n    pattern16 = re.compile(r'(ab)*?{1,4}?')\n    pattern17 = re.compile(r'(ab)*?{1,4}?')\n    pattern18 = re.compile(r'(ab)*?{1,4}?')\n    pattern19 = re.compile(r'(ab)*?{1,4}?')\n    pattern20 = re.compile(r'(ab)*?{1,4}?')\n    pattern21 = re.compile(r'(ab)*?{1,4}?')\n    pattern22 = re.compile(r'(ab)*?{1,4}?')\n    pattern23 = re.compile(r'(ab)*?{1,4}?')\n    pattern24 = re.compile(r'(ab)*?{1,4}?')\n    pattern25 = re.compile(r'(ab)*?{1,4}?')\n    pattern26 = re.compile(r'(ab)*?{1,4}?')\n    pattern27 = re.compile(r'(ab)*?{1,4}?')\n    pattern28 = re.compile(r'(ab)*?{1,4}?')\n    pattern29 = re.compile(r'(ab)*?{1,4}?')\n    pattern30 = re.compile(r'(ab)*?{1,4}?')\n    pattern31 = re.compile(r'(ab)*?{1,4}?')\n    pattern32 = re.compile(r'(ab)*?{1,4}?')\n    pattern33 = re.compile(r'(ab)*?{1,4}?')\n    pattern34 = re.compile(r'(ab)*?{1,4}?')\n    pattern35 = re.compile(r'(ab)*?{1,4}?')\n    pattern36 = re.compile(r'(ab)*?{1,4}?')\n    pattern37 = re.compile(r'(ab)*?{1,4}?')\n    pattern38 = re.compile(r'(ab)*?{1,4}?')\n    pattern39 = re.compile(r'(ab)*?{1,4}?')\n    pattern40 = re.compile(r'(ab)*?{1,4}?')\n    pattern41 = re.compile(r'(ab)*?{1,4}?')\n    pattern42 = re.compile(r'(ab)*?{1,4}?')\n    pattern43 = re.compile(r'(ab)*?{1,4}?')\n    pattern44 = re.compile(r'(ab)*?{1,4}?')\n    pattern45 = re.compile(r'(ab)*?{1,4}?')\n    pattern46 = re.compile(r'(ab)*?{1,4}?')\n    pattern47 = re.compile(r'(ab)*?{1,4}?')\n    pattern48 = re.compile(r'(ab)*?{1,4}?')\n    pattern49 = re.compile(r'(ab)*?{1,4}?')\n    pattern50 = re.compile(r'(ab)*?{1,4}?')\n    pattern51 = re.compile(r'(ab)*?{1,4}?')\n    pattern52 = re.compile(r'(ab)*?{1,4}?')\n    pattern53 = re.compile(r'(ab)*?{1,4}?')\n    pattern54 = re.compile(r'(ab)*?{1,4}?')\n    pattern55 = re.compile(r'(ab)*?{1,4}?')\n    pattern56 = re.compile(r'(ab)*?{1,4}?')\n    pattern57 = re.compile(r'(ab)*?{1,4}?')\n    pattern58 = re.compile(r'(ab)*?{1,4}?')\n    pattern59 = re.compile(r'(ab)*?{1,4}?')\n    pattern60 = re.compile(r'(ab)*?{1,4}?')\n    pattern61 = re.compile(r'(ab)*?{1,4}?')\n    pattern62 = re.compile(r'(ab)*?{1,4}?')\n    pattern63 = re.compile(r'(ab)*?{1,4}?')\n    pattern64 = re.compile(r'(ab)*?{1,4}?')\n    pattern65 = re.compile(r'(ab)*?{1,4}?')\n    pattern66 = re.compile(r'(ab)*?{1,4}?')\n    pattern67 = re.compile(r'(ab)*?{1,4}?')\n    pattern68 = re.compile(r'(ab)*?{1,4}?')\n    pattern69 = re.compile(r'(ab)*?{1,4}?')\n    pattern70 = re.compile(r'(ab)*?{1,4}?')\n    pattern71 = re.compile(r'(ab)*?{1,4}?')\n    pattern72 = re.compile(r'(ab)*?{1,4}?')\n    pattern73 = re.compile(r'(ab)*?{1,4}?')\n    pattern74 = re.compile(r'(ab)*?{1,4}?')\n    pattern75 = re.compile(r'(ab)*?{1,4}?')\n    pattern76 = re.compile(r'(ab)*?{1,4}?')\n    pattern77 = re.compile(r'(ab)*?{1,4}?')\n    pattern78 = re.compile(r'(ab)*?{1,4}?')\n    pattern79 = re.compile(r'(ab)*?{1,4}?')\n    pattern80 = re.compile(r'(ab)*?{1,4}?')\n    pattern81 = re.compile(r'(ab)*?{1,4}?')\n    pattern82 = re.compile(r'(ab)*?{1,4}?')\n    pattern83 = re.compile(r'(ab)*?{1,4}?')\n    pattern84 = re.compile(r'(ab)*?{1,4}?')\n    pattern85 = re.compile(r'(ab)*?{1,4}?')\n    pattern86 = re.compile(r'(ab)*?{1,4}?')\n    pattern87 = re.compile(r'(ab)*?{1,4}?')\n    pattern88 = re.compile(r'(ab)*?{1,4}?')\n    pattern89 = re.compile(r'(ab)*?{1,4}?')\n    pattern90 = re.compile(",
        "num_ids": 2009
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = 'ab{3}'\n    match = re.search(pattern, text)\n    if match:\n        print(match.group())\n    else:\n        print('No match found')\n",
        "num_ids": 49
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\n",
        "num_ids": 37
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(.*?)b{3}'\n    result = re.search(pattern, text)\n    return result.group(1)\n",
        "num_ids": 38
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.search('ab{3}', text)\n    return match\n",
        "num_ids": 21
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"\\Aa(.{3})b\\Z\")\n    match = pattern.search(text)\n    if match:\n        print(\"%s is a match!\" % match.group(1))\n    else:\n        print(\"%s is no match!\" % text)\n",
        "num_ids": 74
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pat = re.compile(r'a{3}b')\n    return pat.search(text)\n",
        "num_ids": 28
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"a(.*)b(.*)b\")\n    match = pattern.match(text)\n    return match.group()\n",
        "num_ids": 40
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple\n",
        "num_ids": 25
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return test_list + tuple(test_str)\n",
        "num_ids": 15
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + test_str)\n    \ndef new_dict(test_list):\n    '''\n    Write a function to create a new dictionary from the given list.\n    '''\n    return dict(zip(test_list, test_list))\n    \ndef new_set(test_list):\n    '''\n    Write a function to create a new set from the given list.\n    '''\n    return set(test_list)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    return list(test_list + test_str)\n    \ndef new_list(test_list",
        "num_ids": 25
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = test_str.split(',')\n    for i in range(len(new_list)):\n        new_list[i] = int(new_list[i])\n    new_tuple = tuple(new_list)\n    return new_tuple\n",
        "num_ids": 67
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # empty string\n    if test_str == '':\n        return []\n    # check if the input is a tuple\n    if isinstance(test_list, tuple):\n        return test_list\n",
        "num_ids": 48
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_str = ''.join(test_str)\n    #test_list = []\n    # for x in test_str:\n    #     test_list.append(x)\n    return tuple(test_list)\n    ",
        "num_ids": 56
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_list[:], test_str)\n",
        "num_ids": 16
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str) + tuple(test_list)\n",
        "num_ids": 18
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # convert the string to a list\n    list_temp = list(test_str)\n    # use the built in enumerate() function to traverse through the list\n    for i, ch in enumerate(list_temp):\n        # if the character is in the list\n        if ch in test_list:\n            # replace the character with an empty string\n            list_temp[i] = ''\n    # convert the list back to a string\n    tup = ''.join(list_temp)\n    # return the tuple\n    return tup\n",
        "num_ids": 126
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return [num for i,num in enumerate(nums) if not i%2 and num%2 == 0]\n",
        "num_ids": 30
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(num % 2 == 0 for num in nums[::2])\n",
        "num_ids": 21
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    assert isinstance(nums, list)\n    return all([nums[i]%2==0 for i in range(0, len(nums), 2)])\n",
        "num_ids": 42
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    n = len(nums)\n    return all(nums[i] % 2 == 0 for i in range(0, n, 2))\n",
        "num_ids": 36
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if nums == []:\n        return False\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return True\n    return False\n",
        "num_ids": 39
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in xrange(0,len(nums),2):\n        if (nums[i] % 2) == 0:\n            pass\n        else:\n            return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if nums[i]%2!=0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(i%2==0 for i in nums)\n",
        "num_ids": 18
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # We need to get rid of tuples within the tuple.\n    test_list = list(test_tup)\n    # Now we have to remove the items that are tuples.\n    for x in test_list:\n        # If we don't have any tuples in the list.\n        if not isinstance(x, tuple):\n            continue\n        # Otherwise, we want to remove the tuples.\n        else:\n            test_list.remove(x)\n    # After we finish removing the tuples, we want to get rid of the\n    # tuples themselves.\n    test_tup = tuple(test_list)\n    return test_tup\n",
        "num_ids": 155
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # 1st solution\n    # if len(test_tup)==1:\n    #     return test_tup\n    # else:\n    #     if isinstance(test_tup[0], tuple):\n    #         return remove_nested(test_tup[0]) + remove_nested(test_tup[1:])\n    #     else:\n    #         return test_tup[:1] + remove_nested(test_tup[1:])\n    # \n    # # 2nd solution\n    # return test_tup[0] if isinstance(test_tup[0], tuple) else test_tup[1:]\n    \n    # 3rd solution\n    if len(test_tup)==1:\n        return test_tup\n    elif isinstance(test_tup[0], tuple):\n        return remove_nested(test_tup[0]) + remove_nested(test_tup[1:])\n    else:\n        return test_tup[:1] + remove_nested(test_tup[1:])\n",
        "num_ids": 262
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(filter(lambda x: x!= tuple(), test_tup))\n",
        "num_ids": 22
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if len(test_tup) == 0:\n        return tuple()\n",
        "num_ids": 20
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_list = list(test_tup)\n    for idx,tup in enumerate(test_list):\n        if isinstance(tup,tuple):\n            test_list[idx] = tuple([x for x in tup if x!= test_list[idx]])\n    return tuple(test_list)\n",
        "num_ids": 82
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(item for item in test_tup if item not in NESTED)\n    \ndef remove_nested_2(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(item for item in test_tup if item not in NESTED_2)\n    \ndef get_remaining_items(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(item for item in test_tup if item not in MATCHED)\n",
        "num_ids": 23
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return remove_nested_v1(test_tup)\n",
        "num_ids": 18
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for i in test_tup:\n        if type(i) == tuple:\n            test_tup = remove_nested(i)\n    return test_tup\n",
        "num_ids": 43
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for ele in test_tup:\n        if isinstance(ele, tuple):\n            ele = remove_nested(ele)\n        new_list.append(ele)\n    return tuple(new_list)\n",
        "num_ids": 59
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    def remove(test_tup):\n        if isinstance(test_tup, tuple):\n            return tuple(remove(e) for e in test_tup)\n        return test_tup\n    return remove(test_tup)\n",
        "num_ids": 59
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)): \n        if type(input_list[i]) == list:\n            count += 1\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item,list):\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    length = len(input_list)\n    #while length > 1:\n    #    print(input_list[length-1])\n    #    length-=1\n    return len(input_list)\n    \ndef test_count_list():\n    assert count_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 3\n    assert count_list([]) == 1\n    assert count_list([[], [], []]) == 3\n    assert count_list([[1, 2, 3], [], []]) == 2\n    assert count_list([[1], [2], [3], [], [], [], []]) == 2\n    assert count_list([[], [1, 2, 3], [], []]) == 2\n    assert count_list([[], [], [1, 2, 3], [], []]) == 2\n    assert count_list([[], [], [], [1, 2, 3], [], []]) == 2\n",
        "num_ids": 241
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == type([]):\n            count += 1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if input_list == []:\n        return 0\n    else:\n        return 1 + count_list(input_list[1:])\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n",
        "num_ids": 11
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if input_list == []:\n        return 0\n    elif type(input_list[0]) == list:\n        return 1 + count_list(input_list[0])\n    else:\n        return 1\n",
        "num_ids": 53
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    total = 0\n    for i in range(input_list):\n        total = total + 1\n    return total\n",
        "num_ids": 29
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count\n    \n    \ndef merge_list(input_list): \n    '''\n    Write a python function to merge 2 sorted lists.\n    '''\n    sorted_list = []\n    while input_list:\n        sorted_list.append(input_list[0])\n        input_list = input_list[1:]\n        sorted_list.sort()\n    return sorted_list\n",
        "num_ids": 59
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count=0\n    for i in range(1,len(input_list)):\n        if type(input_list[i]) == list:\n            count+=1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr)-1\n    while i>0:\n        if x<arr[i]:\n            return i\n        i-=1\n    return -1\n",
        "num_ids": 42
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    last_index = len(arr)-1\n    start = 0\n    end = last_index\n    \n    while(start<=end):\n        mid = (start+end)//2\n        if arr[mid]==x:\n            if mid==last_index:\n                return mid\n            elif arr[mid+1]>arr[mid]:\n                return mid\n            else:\n                start = mid+1\n        elif arr[mid]<x:\n            start = mid+1\n        else:\n            end = mid-1\n    \n    return -1\n    \ndef first(arr,x):\n    '''\n    Write a python function to find the first position of an element in a sorted array.\n    '''\n    first_index = 0\n    start = 0\n    end = len(arr)-1\n    \n    while(start<=end):\n        mid = (start+end)//2\n        if arr[mid]==x:\n            if mid==0:\n                return mid\n            elif arr[mid-1]<arr[mid]:\n                return mid\n            else:\n                end = mid-1\n        elif arr[mid]<x:\n            start = mid+1\n        else:\n            end = mid-1\n    \n    return -1\n    \ndef median(arr):\n    '''\n    Write a python function to find the median of a sorted array.\n    '''\n    if len(arr)%2==0:\n        return (arr[len(arr)//2]+arr[len(arr)//2-1])/2\n    else:\n        return arr[len(arr)//2]\n",
        "num_ids": 56
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    def binarySearch(arr, x, lower, upper):\n        #lower = 0\n        #upper = len(arr) - 1\n",
        "num_ids": 33
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    try:\n        return arr.index(x)\n    except ValueError:\n        return None\n",
        "num_ids": 25
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    else:\n        return arr[len(arr)-1]\n    \ndef getminmax(arr):\n    '''\n    Write a python function to find the minimum and maximum elements of a list\n    '''\n    if len(arr)==0:\n        return (-1,-1)\n    else:\n        min_val=arr[0]\n        max_val=arr[0]\n        for i in range(1,len(arr)):\n            if arr[i]<min_val:\n                min_val=arr[i]\n            elif arr[i]>max_val:\n                max_val=arr[i]\n        return (min_val,max_val)\n    \ndef binarySearch(arr,target):\n    '''\n    Write a python function to find the position of a target element in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    else:\n        low=0\n        high=len(arr)-1\n        mid=0\n        while low<=high:\n            mid=int((low+high)/2)\n            if target==arr[mid]:\n                return mid\n            elif target<arr[mid]:\n                high=mid-1\n            else:\n                low=mid+1\n        return -1\n    \ndef binsearch_recursive(arr,target,low,high):\n    '''\n    Write a python function to find the position of a target element in a sorted array using recursion.\n    '''\n    if len(arr)==0:\n        return -1\n    else:\n        mid=int((low+high)/2)\n        if target==arr[mid]:\n            return mid\n        elif target<arr[mid]:\n            return binsearch_recursive(arr,target,low,mid-1)\n        else:\n            return binsearch_recursive(arr,target,mid+1,high)\n",
        "num_ids": 98
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr==[]:\n        return None\n    l=len(arr)\n    for i in xrange(l-1,-1,-1):\n        if arr[i]==x:\n            return i\n    return None\n    \ndef test_last():\n    assert last([1,2,3,4,5],5)==4\n    assert last([1,2,3,4,5],3)==3\n    assert last([1,2,3,4,5],6)==None\n    assert last([1,2,3,4,5],0)==0\n    assert last([1,2,3,4,5],-1)==5\n",
        "num_ids": 159
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return len(arr)-1\n",
        "num_ids": 10
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n=len(arr)\n    if x not in arr:\n        return -1\n    else:\n        return n-arr[::-1].index(x)\n",
        "num_ids": 42
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    first = 0\n    last = len(arr)-1\n    while first<=last:\n        mid = (first+last)//2\n        if arr[mid] == x:\n            last = mid -1\n        elif arr[mid] > x:\n            last = mid -1\n        else:\n            first = mid +1\n    return last\n    \ndef BinarySearch(arr,x):\n    '''\n    Write a python function to search for an element in a sorted array using a binary search.\n    '''\n    first = 0\n    last = len(arr)-1\n    while first<=last:\n        mid = (first+last)//2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            last = mid -1\n        else:\n            first = mid +1\n    return -1\n",
        "num_ids": 83
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr[0]<=x and arr[-1]>=x:\n        for i in range(len(arr)-1):\n            if arr[i]<=x and arr[i+1]>=x:\n                return i\n    else:\n        return -1\ndef binary_search(arr,x):\n    '''\n    Write a python function to search an element in a sorted array.\n    '''\n    left=0\n    right=len(arr)-1\n    while left<=right:\n        mid=(left+right)//2\n        if arr[mid]==x:\n            return mid\n        elif arr[mid]<x:\n            left=mid+1\n        else:\n            right=mid-1\n    return -1\ndef find_min(arr,left,right):\n    '''\n    Write a python function to find the minimum value in a sub array.\n    '''\n    min=arr[0]\n    for i in range(left,right+1):\n        if min>arr[i]:\n            min=arr[i]\n    return min\ndef insert_sort(arr):\n    '''\n    Write a python function to sort an array using insertion sort.\n    '''\n    for i in range(1,len(arr)):\n        key=arr[i]\n        j=i-1\n        while j>=0 and key<arr[j]:\n            arr[j+1]=arr[j]\n            j-=1\n        arr[j+1]=key\ndef merge_sort(arr):\n    '''\n    Write a python function to sort an array using merge sort.\n    '''\n    if len(arr)<=1:\n        return arr\n    else:\n        mid=len(arr)//2\n        left=merge_sort(arr[:mid])\n        right=merge_sort(arr[mid:])\n        i=0\n        j=0\n        arr_sorted=[]\n        while i<len(left) and j<len(right):\n            if left[i]<=right[j]:\n                arr_sorted.append(left[i])\n                i+=1\n            else:\n                arr_sorted.append(right[j])\n                j+=1\n        arr_sorted+=left[i:]\n        arr_sorted+=right[j:]\n    return arr_sorted\ndef quick_sort(arr):\n    '''\n    Write a python function to sort an array using quick sort.\n    '''\n    def _quick_sort(arr,left,right):\n        if left>=right:\n            return\n        mid=(left+right)//2\n        pivot=arr[mid]\n        i=left\n        j=right\n        while i<j:\n            while i<j and arr[j]>=pivot:\n                j-=1\n            while i<j and arr[i]<=pivot:\n                i+=1\n            if i<j:\n                arr[i],arr[j]=arr[j],arr[i]\n        arr[i],arr[mid]=arr[mid],arr[i]\n        _quick_sort(arr,left,i-1)\n        _quick_sort(arr,j+1,right)\n    _quick_sort(arr,0,len(arr)-1)\ndef heapify(arr,size,i):\n    '''\n    Write a python function to heapify an array.\n    '''\n    l=2*i+1\n    r=2*i+2\n    largest=i\n    if l<size and arr[i]<arr[l]:\n        largest=l\n    if r<size and arr[largest]<arr[r]:\n        largest=r\n    if largest!=i:\n        arr[largest],arr[i]=arr[i],arr[largest]\n        heapify(arr,size,largest)\ndef heap_sort(arr):\n    '''\n    Write a python function to sort an array using heap sort.\n    '''\n    size=len(arr)\n    for i in range(size//2-1,-1,-1):\n        heapify(arr,size,i)\n    for i in range(size-1,0,-1):\n        arr[i],arr[0]=arr[0],arr[i]\n        heapify(arr,i,0)\ndef main():\n    arr=[1,4,5,2,3,6,7]\n    # print(last(arr,2))\n    # print(binary_search(arr,5))\n    # print(find_min(arr,0,len(arr)-1))\n    # print(merge_sort(arr))\n    # print(quick_sort(arr))\n    # arr=[1,4,5,2,3,6,7]\n    # insert_sort(arr)\n    # print(arr)\n    # arr=[1,4,5,2,3,6,7]\n    # heap_sort(arr)\n    # print(arr)\n    # arr=[1,4,5,2,3,6,7]\n    # heapify(arr,len(arr),1)\n    # print(arr)\n    # arr=[1,4,5,2,3,6,7]\n    # heapify(arr,len(arr),0)\n    # print(arr)\n    arr=[12,11,13,5,6,7,2,4,3]\n    heap_sort(arr)\n    print(arr)\n",
        "num_ids": 359
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r\"^a.*b$\")\n    if pattern.match(text):\n        return True\n    else:\n        return False\n",
        "num_ids": 40
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search('^a.*b$',text)\n",
        "num_ids": 17
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    #return True if re.search('a.*b$', text) else False\n    return bool(re.search('a.*b$', text))\n",
        "num_ids": 37
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    if re.match(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
        "num_ids": 44
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text = re.search(r'[a-z]+b', text)\n    print text.group(0) if text else 'Nothing found'\n",
        "num_ids": 37
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # pattern = '^a.*b$'\n    # pattern = '^[a-z]+b$'\n    pattern = '^[a-z]+b$'\n    if re.match(pattern, text):\n        return True\n    return False\n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'\n    # else:\n    #     print 'not match'\n    #     \n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'\n    # else:\n    #     print 'not match'\n    #     \n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'\n    # else:\n    #     print 'not match'\n    #     \n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'\n    # else:\n    #     print 'not match'\n    #     \n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'\n    # else:\n    #     print 'not match'\n    #     \n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'\n    # else:\n    #     print 'not match'\n    #     \n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'\n    # else:\n    #     print 'not match'\n    #     \n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'\n    # else:\n    #     print 'not match'\n    #     \n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'\n    # else:\n    #     print 'not match'\n    #     \n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'\n    # else:\n    #     print 'not match'\n    #     \n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'\n    # else:\n    #     print 'not match'\n    #     \n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'\n    # else:\n    #     print 'not match'\n    #     \n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'\n    # else:\n    #     print 'not match'\n    #     \n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'\n    # else:\n    #     print 'not match'\n    #     \n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'\n    # else:\n    #     print 'not match'\n    #     \n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'\n    # else:\n    #     print 'not match'\n    #     \n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'\n    # else:\n    #     print 'not match'\n    #     \n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'\n    # else:\n    #     print 'not match'\n    #     \n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'\n    # else:\n    #     print 'not match'\n    #     \n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'\n    # else:\n    #     print 'not match'\n    #     \n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'\n    # else:\n    #     print 'not match'\n    #     \n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'\n    # else:\n    #     print 'not match'\n    #     \n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'\n    # else:\n    #     print 'not match'\n    #     \n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'\n    # else:\n    #     print 'not match'\n    #     \n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'\n    # else:\n    #     print 'not match'\n    #     \n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'\n    # else:\n    #     print 'not match'\n    #     \n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'\n    # else:\n    #     print 'not match'\n    #     \n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'\n    # else:\n    #     print 'not match'\n    #     \n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'\n    # else:\n    #     print 'not match'\n    #     \n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'\n    # else:\n    #     print 'not match'\n    #     \n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'\n    # else:\n    #     print 'not match'\n    #     \n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'\n    # else:\n    #     print 'not match'\n    #     \n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'\n    # else:\n    #     print 'not match'\n    #     \n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'\n    # else:\n    #     print 'not match'\n    #     \n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'\n    # else:\n    #     print 'not match'\n    #     \n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'\n    # else:\n    #     print 'not match'\n    #     \n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print'match'",
        "num_ids": 1893
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.+b$'\n    if re.match(pattern,text):\n        return True\n    return False\n",
        "num_ids": 34
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        print match.group()\n    else:\n        print None\n",
        "num_ids": 45
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    #solution:\n    return re.compile(r'ab').search(text)\n    \n    \ndef test_text_starta_endb():\n    assert text_starta_endb('abcdef') == None\n    assert text_starta_endb('abcba') == None\n    assert text_starta_endb('abcabc') == None\n    assert text_starta_endb('abcabcab') == None\n    assert text_starta_endb('aabcabcab') == None\n    assert text_starta_endb('abcabcabc') == None\n    assert text_starta_endb('abcabcabab') == None\n    assert text_starta_endb('abcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcab') == None\n    assert text_starta_endb('abcabcabcabcabcab') == None\n    assert text_starta_endb('abcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcab') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabcabcabc') == None\n    \ndef text_starta_endb_sub(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b', but\n    where the 'a' is not at the start of the string.\n    '''\n    #solution:\n    return re.compile(r'(?<!^a).ab').search(text)\n    \ndef test_text_starta_endb_sub():\n    assert text_starta_endb_sub('abcdef') == None\n    assert text_starta_endb_sub('abcba') == None\n    assert text_starta_endb_sub('abcabc') == None\n    assert text_starta_endb_sub('abcabcab') == None\n    assert text_starta_endb_sub('aabcabcab') == None\n    assert text_starta_endb_sub('abcabcabc') == None\n    assert text_starta_endb_sub('abcabcabab') == None\n    assert text_starta_endb_sub('abcabcabcabc') == None\n    assert text_starta_endb_sub('abcabcabcabcab') == None\n    assert text_starta_endb_sub('abcabcabcabcabcab') == None\n    assert text_starta_endb_sub('abcabcabcabcabcabc') == None\n    assert text_starta_endb_sub('abcabcabcabcabcabcab') == None\n    assert text_starta_endb_sub('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb_sub('abcabcabcabcabcabcabcabc') == None\n    assert text_starta_endb_sub('abcabcabcabcabcabcabcabc') == None\n    assert text_starta_endb_sub('abcabcabcabcabcabcabcabc') == None\n    assert text_starta_endb_sub('abcabcabcabcabcabcabcabc') == None\n    assert text_starta_endb_sub('abcabcabcabcabcabcabcabc') == None\n    assert text_starta_endb_sub('abcabcabcabcabcabcabcabc') == None\n    \ndef text_starta_endb_sub_sub(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b', but\n    where the 'a' is not at the start of the string. \n    The function should work similarly to the previous function, but it is a little more\n    complex because the 'a' is not included in the group defined by the regex.\n    '''\n    #solution:\n    return re.compile(r'(?<!^a)(?<!^b).ab').search(text)\n    \ndef test_text_starta_endb_sub_sub():\n    assert text_starta_endb_sub_sub('abcdef') == None\n    assert text_starta_endb_sub_sub('abcba') == None\n    assert text_starta_endb_sub_sub('abcabc') == None\n    assert text_starta_endb_sub_sub('abcabcab') == None\n    assert text_starta_endb_sub_sub('aabcabcab') == None\n    assert text_starta_endb_sub_sub('abcabcabc') == None\n    assert text_starta_endb_sub_sub('abcabcabab') == None\n    assert text_starta_endb_sub_sub('abcabcabcabc') == None\n    assert text_starta_endb_sub_sub('abcabcabcabcab') == None\n    assert text_starta_endb_sub_sub('abcabcabcabcabcab') == None\n    assert text_starta_endb_sub_sub('abcabcabcabcabcabc') == None\n    assert text_starta_endb_sub_sub('abcabcabcabcabcabcab') == None\n    assert text_starta_endb_sub_sub('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb_sub_sub('abcabcabcabcabcabcabcabc') == None\n    assert text_starta_endb_sub_sub('abcabcabcabcabcabcabcabc') == None\n    assert text_starta_endb_sub_sub('abcabcabcabcabcabcabcabc') == None\n    assert text_starta_endb_sub_sub('abcabcabcabcabcabcabcabc') == None\n    assert text_starta_endb_sub_sub('abcabcabcabcabcabcabcabc') == None\n    \ndef text_starta_endb_sub_sub_sub(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b', but\n    where the 'a' is not at the start of the string. \n    The function should work similarly to the previous function, but it is a little more\n    complex because the 'a' is not included in the group defined by the regex. \n    The function is a bit more complex than the previous two examples because the previous function\n    did not work with multiple subgroups.\n    '''\n    #solution:\n    return re.compile(r'(?<!^a)(?<!^b)(?<!^c).ab').search(text)\n    \ndef test_text_starta_endb_sub_sub_sub():\n    assert text_starta_endb_sub_sub_sub('abcdef') == None\n    assert text_starta_endb_sub_sub_sub('abcba') == None\n    assert text_starta_endb_sub_sub_sub('abcabc') == None\n    assert text_starta_endb_sub_sub_sub('abcabcab') == None\n    assert text_starta_endb_sub_sub_sub('aabcabcab') == None\n    assert text_starta_endb_sub_sub_sub('abcabcabc') == None\n    assert text_starta_endb_sub_sub_sub('abcabcabab') == None\n    assert text_starta_endb_sub_sub_sub('abcabcabcabc') == None\n    assert text_starta_endb_sub_sub_sub('abcabcabcabcab') == None\n    assert text_starta_endb_sub_sub_sub('abcabcabcabcabcab') == None\n    assert text_starta_endb_sub_sub_sub('abcabcabcabcabcabc') == None\n    assert text_starta_endb_sub_sub_sub('abcabcabcabcabcabcab') == None\n    assert text_starta_endb_sub_sub_sub('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb_sub_sub_sub('abcabcabcabcabcabcabcabc') == None\n    assert tex",
        "num_ids": 409
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pat = 'a.*b$'\n    match = re.search(pat,text)\n    if match:\n        print match.group()\n    else:\n        print 'Not found'\n",
        "num_ids": 47
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n",
        "num_ids": 11
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    #Initialize the sum variable\n    sum = 0\n",
        "num_ids": 15
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict.keys():\n        sum += dict[key]\n    return sum\n",
        "num_ids": 28
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict.keys():\n        sum = sum + dict[key]\n    return sum\n",
        "num_ids": 30
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum = sum + dict[key]\n    return sum\n",
        "num_ids": 28
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    s = 0\n    for key, value in dict.items():\n        s += value\n    return s\n",
        "num_ids": 27
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += i\n    return sum\n",
        "num_ids": 23
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total = total + dict[key]\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for k, v in dict.items():\n        sum += v\n    return sum\n",
        "num_ids": 27
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict:\n        total += dict[i]\n    return total\n",
        "num_ids": 26
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    res = 0\n    for i in range(l,r+1):\n        if i%2!=0:\n            res += i\n    return res\n",
        "num_ids": 39
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l,r = n[0],n[1]\n    return sum([x for x in range(l,r+1) if x % 2!= 0])\n",
        "num_ids": 41
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(range(l, r+1, 2))\n    \n    \n    \n    ",
        "num_ids": 24
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    result = sum([i for i in range(l, r+1) if i%2==1])\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n > 0:\n        if n % 2 == 1:\n            return n + sum_odd(n-1)\n        else:\n            return sum_odd(n-1)\n    else:\n        return 0\n",
        "num_ids": 54
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(x for x in range(l,r+1) if x%2!=0)\n",
        "num_ids": 27
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n < 1:\n        return 0\n    else:\n        if n%2 == 1:\n            return n + sum_odd(n-1)\n        else:\n            return sum_odd(n-1)\n",
        "num_ids": 54
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum=0\n    for i in range(n,0,-2):\n        sum+=i\n    return sum\n    \ndef sum_even(n):\n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    sum=0\n    for i in range(n,0,-2):\n        sum+=i\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    \n    n = int(n)\n    return n*(n+1)/2\n",
        "num_ids": 23
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(x for x in range(l, r+1) if x%2!=0)\ndef is_palindrome(n): \n    '''\n    Write a python function to check if the given number is palindrome or not.\n    '''\n    return str(n) == str(n)[::-1]\ndef is_pandigital(n):\n    '''\n    Write a python function to check if the given number is pandigital or not.\n    '''\n    return str(n) == ''.join(sorted(str(n))) and len(str(n)) == 9\ndef count_digit(n, d): \n    '''\n    Write a python function to find the count of digits of a given number.\n    '''\n    return str(n).count(d)\ndef all_permutations(string):\n    '''\n    Write a python function to print all permutations of a given string.\n    '''\n    l = len(string)\n    print ''.join(i for i in itertools.permutations(string))\ndef permutations_without_duplicates(string):\n    '''\n    Write a python function to print all permutations of a given string with duplicates removed.\n    '''\n    return ''.join(set(itertools.permutations(string)))\ndef all_anagrams(string): \n    '''\n    Write a python function to print all anagrams of a given string.\n    '''\n    return ''.join(sorted(set(string)))\ndef search_in_rotated_sorted_array(n, arr):\n    '''\n    Write a python function to search a given number in a rotated sorted array.\n    '''\n    l = 0\n    r = len(arr)-1\n    while l <= r: \n        mid = (l+r) // 2\n        if arr[mid] == n: \n            return mid\n        if arr[l] <= arr[mid]: \n            if arr[l] <= n <= arr[mid]: \n                r = mid - 1\n            else: \n                l = mid + 1\n        else: \n            if arr[mid] <= n <= arr[r]: \n                l = mid + 1\n            else: \n                r = mid - 1\n    return -1\ndef partition(arr, low, high): \n    '''\n    Write a python function to partition the given array.\n    '''\n    i = (low-1)\n    pivot = arr[high]\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i = i+1\n            arr[i], arr[j] = arr[j], arr[i]\n    arr[i+1], arr[high] = arr[high], arr[i+1]\n    return (i+1)\ndef quick_sort(arr, low, high):\n    '''\n    Write a python function to sort the given array using quick sort.\n    '''\n    if low < high:\n        pi = partition(arr, low, high)\n        quick_sort(arr, low, pi-1)\n        quick_sort(arr, pi+1, high)\n    return arr\ndef palindrome_number(n):\n    '''\n    Write a python function to check if the given number is a palindrome or not.\n    '''\n    return str(n) == str(n)[::-1]\ndef two_sum(arr, target):\n    '''\n    Write a python function to return the sum of two elements in the given array which forms the target sum.\n    '''\n    l = len(arr)\n    for i in range(l):\n        for j in range(i+1, l):\n            if arr[i] + arr[j] == target:\n                return (arr[i], arr[j])\n    return None\ndef find_missing_number(arr):\n    '''\n    Write a python function to find the missing number in an array.\n    '''\n    l = len(arr)\n    total = (l*(l+1)) // 2\n    for i in range(l):\n        total = total - arr[i]\n    return total\ndef remove_duplicates(arr):\n    '''\n    Write a python function to remove duplicates from the given array.\n    '''\n    return list(set(arr))\ndef make_alternating_string(string):\n    '''\n    Write a python function to return the alternating string of a given string.\n    '''\n    if len(string)%2 == 0: \n        return string[:len(string)//2] + string[len(string)//2:]\n    return string[:len(string)//2] + string[len(string)//2+1:]\ndef search_binary_tree(root, key):\n    '''\n    Write a python function to search for the given key in a binary search tree.\n    '''\n    if root is None:\n        return None\n    if root.key == key: \n        return root\n    elif key < root.key:\n        return search_binary_tree(root.left, key)\n    else: \n        return search_binary_tree(root.right, key)\ndef find_maximum_and_minimum(arr):\n    '''\n    Write a python function to return the minimum and maximum elements of a given array.\n    '''\n    l = len(arr)\n    if l == 0: \n        return None\n    elif l == 1: \n        return (arr[0], arr[0])\n    else:\n        mid = l//2\n        minimum = min(arr[0], arr[mid])\n        maximum = max(arr[0], arr[mid])\n        if mid-1 >= 0:\n            minimum = min(minimum, arr[mid-1])\n        if mid+1 <= l-1:\n            maximum = max(maximum, arr[mid+1])\n        return (minimum, maximum)\ndef max_of_three_numbers(n1, n2, n3):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return max(n1, n2, n3)\ndef is_power_of_two(n):\n    '''\n    Write a python function to check if the given number is power of 2 or not.\n    '''\n    return n!= 0 and n & (n-1) == 0\ndef is_power_of_three(n):\n    '''\n    Write a python function to check if the given number is power of three or not.\n    '''\n    return n!= 0 and n % 3 == 0\ndef find_middle_element(arr):\n    '''\n    Write a python function to find the middle element of the given array.\n    '''\n    l = len(arr)\n    if l % 2 == 0: \n        return (arr[l//2], arr[l//2])\n    return (arr[l//2+1], arr[l//2])\ndef sum_of_digits(n):\n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    return sum(int(d) for d in str(n))\ndef find_max_consecutive_ones(arr):\n    '''\n    Write a python function to find the maximum consecutive 1s in the given array.\n    '''\n    l = len(arr)\n    count = 0\n    max_count = 0\n    for i in range(l):\n        if arr[i] == 1:\n            count += 1\n        else:\n            count = 0\n        max_count = max(max_count, count)\n    return max_count\ndef find_max_consecutive_ones_2d(arr):\n    '''\n    Write a python function to find the maximum consecutive 1s in the given 2D array.\n    '''\n    l = len(arr)\n    r = len(arr[0])\n    count = 0\n    max_count = 0\n    for i in range(l):\n        for j in range(r):\n            if arr[i][j] == 1:\n                count += 1\n            else:\n                count = 0\n            max_count = max(max_count, count)\n    return max_count\ndef get_word_list(string):\n    '''\n    Write a python function to get the word list from a given string.\n    '''\n    return string.replace(' ', '-')\nde",
        "num_ids": 14
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n    \n",
        "num_ids": 11
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return arr[0] + _sum(arr[1:]) if arr else 0\n",
        "num_ids": 22
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] + _sum(arr[1:])\n",
        "num_ids": 36
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n",
        "num_ids": 23
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    def mask(bit):\n        return (1 << bit) - 1\n    mask = mask(d)\n    return (n << d) | (n >> (32 - d)) & mask\n",
        "num_ids": 46
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n<<d|n>>(32-d)\n    \ndef left_rotate_32(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n<<d|n>>(32-d)\n    \ndef right_rotate(n,d):\n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n>>d|n<<(32-d)\n    \ndef right_rotate_32(n,d):\n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n>>d|n<<(32-d)\n    \ndef add_32(a,b):\n    '''\n    Add two 32 bit numbers a and b, return the result as a 32 bit number. We assume that the numbers are 32 bit.\n    '''\n    return (a+b)%(2**32)\n    \ndef add(a,b):\n    '''\n    Add two number a and b, return the result as a number.\n    '''\n    return (a+b)%(2**32)\n",
        "num_ids": 16
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff\n",
        "num_ids": 24
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n<<d)|((n&0xffffffff)>>(32-d))\n",
        "num_ids": 24
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))\n",
        "num_ids": 19
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32-d))\n",
        "num_ids": 19
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    l=[]\n    #print(bin(n))\n    for i in range(32):\n        if i<=d:\n            l.append(n&1)\n            n=n>>1\n            #print(bin(n))\n        else:\n            l.append(0)\n        #print(l)\n    return l\ndef right_rotate(n,d):   \n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    l=[]\n    #print(bin(n))\n    for i in range(32):\n        if i>=d:\n            l.append(n&1)\n            n=n>>1\n            #print(bin(n))\n        else:\n            l.append(0)\n        #print(l)\n    return l\ndef fun1(t,k,key):\n    if t==0:\n        return (right_rotate(key[0],k),right_rotate(key[1],k),right_rotate(key[2],k),right_rotate(key[3],k))\n    elif t==1:\n        return (right_rotate(key[1],k),right_rotate(key[2],k),right_rotate(key[3],k),right_rotate(key[0],k))\n    elif t==2:\n        return (right_rotate(key[2],k),right_rotate(key[3],k),right_rotate(key[0],k),right_rotate(key[1],k))\n    elif t==3:\n        return (right_rotate(key[3],k),right_rotate(key[0],k),right_rotate(key[1],k),right_rotate(key[2],k))\ndef fun2(t,k,key):\n    if t==0:\n        return (right_rotate(key[0],k),right_rotate(key[1],k),right_rotate(key[2],k),right_rotate(key[3],k))\n    elif t==1:\n        return (right_rotate(key[1],k),right_rotate(key[2],k),right_rotate(key[3],k),right_rotate(key[0],k))\n    elif t==2:\n        return (right_rotate(key[2],k),right_rotate(key[3],k),right_rotate(key[0],k),right_rotate(key[1],k))\n    elif t==3:\n        return (right_rotate(key[3],k),right_rotate(key[0],k),right_rotate(key[1],k),right_rotate(key[2],k))\ndef fun3(t,k,key):\n    if t==0:\n        return (right_rotate(key[0],k),right_rotate(key[1],k),right_rotate(key[2],k),right_rotate(key[3],k))\n    elif t==1:\n        return (right_rotate(key[1],k),right_rotate(key[2],k),right_rotate(key[3],k),right_rotate(key[0],k))\n    elif t==2:\n        return (right_rotate(key[2],k),right_rotate(key[3],k),right_rotate(key[0],k),right_rotate(key[1],k))\n    elif t==3:\n        return (right_rotate(key[3],k),right_rotate(key[0],k),right_rotate(key[1],k),right_rotate(key[2],k))\ndef fun4(t,k,key):\n    if t==0:\n        return (right_rotate(key[0],k),right_rotate(key[1],k),right_rotate(key[2],k),right_rotate(key[3],k))\n    elif t==1:\n        return (right_rotate(key[1],k),right_rotate(key[2],k),right_rotate(key[3],k),right_rotate(key[0],k))\n    elif t==2:\n        return (right_rotate(key[2],k),right_rotate(key[3],k),right_rotate(key[0],k),right_rotate(key[1],k))\n    elif t==3:\n        return (right_rotate(key[3],k),right_rotate(key[0],k),right_rotate(key[1],k),right_rotate(key[2],k))\ndef fun5(t,k,key):\n    if t==0:\n        return (right_rotate(key[0],k),right_rotate(key[1],k),right_rotate(key[2],k),right_rotate(key[3],k))\n    elif t==1:\n        return (right_rotate(key[1],k),right_rotate(key[2],k),right_rotate(key[3],k),right_rotate(key[0],k))\n    elif t==2:\n        return (right_rotate(key[2],k),right_rotate(key[3],k),right_rotate(key[0],k),right_rotate(key[1],k))\n    elif t==3:\n        return (right_rotate(key[3],k),right_rotate(key[0],k),right_rotate(key[1],k),right_rotate(key[2],k))\ndef fun6(t,k,key):\n    if t==0:\n        return (right_rotate(key[0],k),right_rotate(key[1],k),right_rotate(key[2],k),right_rotate(key[3],k))\n    elif t==1:\n        return (right_rotate(key[1],k),right_rotate(key[2],k),right_rotate(key[3],k),right_rotate(key[0],k))\n    elif t==2:\n        return (right_rotate(key[2],k),right_rotate(key[3],k),right_rotate(key[0],k),right_rotate(key[1],k))\n    elif t==3:\n        return (right_rotate(key[3],k),right_rotate(key[0],k),right_rotate(key[1],k),right_rotate(key[2],k))\ndef fun7(t,k,key):\n    if t==0:\n        return (right_rotate(key[0],k),right_rotate(key[1],k),right_rotate(key[2],k),right_rotate(key[3],k))\n    elif t==1:\n        return (right_rotate(key[1],k),right_rotate(key[2],k),right_rotate(key[3],k),right_rotate(key[0],k))\n    elif t==2:\n        return (right_rotate(key[2],k),right_rotate(key[3],k),right_rotate(key[0],k),right_rotate(key[1],k))\n    elif t==3:\n        return (right_rotate(key[3],k),right_rotate(key[0],k),right_rotate(key[1],k),right_rotate(key[2],k))\ndef fun8(t,k,key):\n    if t==0:\n        return (right_rotate(key[0],k),right_rotate(key[1],k),right_rotate(key[2],k),right_rotate(key[3],k))\n    elif t==1:\n        return (right_rotate(key[1],k),right_rotate(key[2],k),right_rotate(key[3],k),right_rotate(key[0],k))\n    elif t==2:\n        return (right_rotate(key[2],k),right_rotate(key[3],k),right_ro",
        "num_ids": 1878
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d = d % 32\n    return (n << d | n >> (32 - d)) & 0xffffffff\n",
        "num_ids": 29
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d)|(n >> (32-d))\n    \ndef right_rotate(n,d):  \n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n >> d)|(n << (32-d))\n    \ndef f(x,y,z):  \n    '''\n    Write a function that accepts three numbers as input and returns the sum of each two inputs.\n    '''\n    return x+y+z\n",
        "num_ids": 10
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    if d == 32:\n        return n\n    d = d%32\n    return ( (n << d) | (n >> (32 - d)) ) & mask\n",
        "num_ids": 49
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s', '', text)\n",
        "num_ids": 16
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','',text)\n",
        "num_ids": 16
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "num_ids": 19
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\"\\s+\",\"\",text)\n",
        "num_ids": 16
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return ''.join(text.split())\n",
        "num_ids": 13
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('[\\s]+', '', text)\n",
        "num_ids": 18
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(\"\\s+\",\"\",text)\n    return text\ndef word_count(str1):\n    '''\n    Write a function that counts how many times a letter occurs in a string.\n    '''\n    d = {}\n    for c in str1:\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n    return d\n",
        "num_ids": 46
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # result = re.sub(' ', '', text)\n    # result = re.sub('\\n', '', text)\n    # result = re.sub('\\r', '', text)\n    # result = re.sub('\\t', '', text)\n    result = re.sub('\\s', '', text)\n    return result\n",
        "num_ids": 83
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    #remove spaces from the beginning\n    while text[0] == \" \":\n        text = text[1:]\n    #remove spaces from the end\n    while text[-1] == \" \":\n        text = text[:-1]\n    #remove all spaces\n    text = text.replace(\" \", \"\")\n    return text\ndef count_and_replace(text, to_replace, replacement):\n    '''\n    Write a function to replace a string with another string while preserving the number of characters.\n    '''\n    #replace the string to be replaced with the replacement string\n    text = text.replace(to_replace, replacement)\n    #return the text with the replaced string\n    return text\ndef remove_duplicates(text):\n    '''\n    Write a function to remove all duplicates from a string.\n    '''\n    text = \"\".join(text.split())\n    return text\ndef find_duplicate(text):\n    '''\n    Write a function to find a duplicate character in a string.\n    '''\n    text = text.replace(\" \", \"\")\n    text = remove_duplicates(text)\n    #returns the first index of a duplicate character\n    index = text.find(text[0])\n    return index\ndef find_and_replace(text, to_replace, replacement):\n    '''\n    Write a function to replace the first instance of a string with another string while preserving the number of characters.\n    '''\n    #replace the first instance of the string to be replaced with the replacement string\n    text = text.replace(to_replace, replacement, 1)\n    #return the text with the replaced string\n    return text\ndef split_into_groups(text, length):\n    '''\n    Write a function to split a string into groups of a specified length.\n    '''\n    groups = []\n    for i in range(0, len(text), length):\n        groups.append(text[i:i+length])\n    return groups\ndef permute(text, length):\n    '''\n    Write a function to permute a string of characters into a string of characters of specified length.\n    '''\n    text = text.replace(\" \", \"\")\n    text = remove_duplicates(text)\n    permutations = []\n    for i in range(len(text), 0, -1):\n        permutations.extend(split_into_groups(text, i))\n    return permutations\ndef find_and_replace_all(text, to_replace, replacement):\n    '''\n    Write a function to replace all instances of a string with another string while preserving the number of characters.\n    '''\n    #replace all instances of the string to be replaced with the replacement string\n    text = text.replace(to_replace, replacement)\n    #return the text with the replaced string\n    return text\ndef find_and_replace_all_2(text, to_replace, replacement):\n    '''\n    Write a function to replace all instances of a string with another string while preserving the number of characters.\n    '''\n    #replace all instances of the string to be replaced with the replacement string\n    text = text.replace(to_replace, replacement)\n    #return the text with the replaced string\n    return text\ndef count_and_replace_all(text, to_replace, replacement):\n    '''\n    Write a function to replace a string with another string while preserving the number of characters.\n    '''\n    #replace the string to be replaced with the replacement string\n    text = text.replace(to_replace, replacement)\n    #return the text with the replaced string\n    return text\ndef replace_first(text, to_replace, replacement):\n    '''\n    Write a function to replace the first instance of a string with another string while preserving the number of characters.\n    '''\n    #replace the first instance of the string to be replaced with the replacement string\n    text = text.replace(to_replace, replacement, 1)\n    #return the text with the replaced string\n    return text\ndef delete_first(text, length):\n    '''\n    Write a function to delete the first n characters of a string.\n    '''\n    text = text[length:]\n    return text\ndef replace_last(text, to_replace, replacement):\n    '''\n    Write a function to replace the last instance of a string with another string while preserving the number of characters.\n    '''\n    #replace the last instance of the string to be replaced with the replacement string\n    text = text.replace(to_replace, replacement, 1)\n    #return the text with the replaced string\n    return text\ndef delete_last(text, length):\n    '''\n    Write a function to delete the last n characters of a string.\n    '''\n    text = text[:-length]\n    return text\ndef reverse(text):\n    '''\n    Write a function to reverse a string.\n    '''\n    text = \"\".join(reversed(text))\n    return text\ndef is_palindrome(text):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    #if the string is the same forwards and backwards, return true\n    if text == text[::-1]:\n        return True\n    else:\n        return False\ndef is_anagram(text1, text2):\n    '''\n    Write a function to check if two strings are anagrams.\n    '''\n    #if the lengths of the strings are not equal, return false\n    if len(text1)!= len(text2):\n        return False\n    #if the characters are not the same, return false\n    if sorted(text1)!= sorted(text2):\n        return False\n    #if the strings are anagrams, return true\n    return True\ndef find_anagrams(text, candidates):\n    '''\n    Write a function to find all the anagrams of a string in a given list.\n    '''\n    #for each candidate, check if it is anagram of the text\n    for candidate in candidates:\n        if is_anagram(text, candidate):\n            #return the candidate if it is anagram\n            return candidate\n    #return empty string if no anagram is found\n    return \"\"\ndef find_permutation(text, candidate):\n    '''\n    Write a function to find all the permutations of a string in a given list.\n    '''\n    #if the lengths of the strings are not equal, return false\n    if len(text)!= len(candidate):\n        return False\n    #if the characters are not the same, return false\n    if sorted(text)!= sorted(candidate):\n        return False\n    #if the strings are permutations, return true\n    return True\ndef find_permutations(text, candidates):\n    '''\n    Write a function to find all the permutations of a string in a given list.\n    '''\n    #for each candidate, check if it is permutation of the text\n    for candidate in candidates:\n        if find_permutation(text, candidate):\n            #return the candidate if it is permutation\n            return candidate\n    #return empty string if no permutation is found\n    return \"\"\ndef is_valid_parenthesis(text):\n    '''\n    Write a function to check if a string is a valid parenthesis.\n    '''\n    #if the string is not balanced, return false\n    if len(text) % 2!= 0:\n        return False\n    #if the stack is empty, the string is balanced\n    if len(text) == 0:\n        return True\n    #if the last character is not a parenthesis, return false\n    if text[-1]!= \")\":\n        return False\n    #if the last character is a parenthesis, check if the last character is not a parenthesis\n    if text[-2]!= \"(\":\n        return False\n    #if the last two characters are not a parenthesis, check if the last two characters are not a parenthesis\n    if text[-3]!= \"(\":\n        return False\n    #if the last three characters are not a parenthesis, check if the last three characters are not a parenthesis\n    if text[-4]!= \"(\":\n        return False\n    #if the last four characters are not a parenthesis, check if the last four characters are not a parenthesis\n    if text[-5]!= \"(\":\n        return False\n    #if the last five characters are not a parenthesis, check if the last five characters are not a parenthesis\n    if text[-6]!= \"(\":\n        return False\n    #if the last six characters are not a parenthesis, check if the last six characters are not a parenthesi",
        "num_ids": 317
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','',text)\n",
        "num_ids": 18
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    \n    count = 0\n    if x == y and x == z:\n        count = 3\n    elif x == y or x == z or y == z:\n        count = 2\n    return count\n    \nprint(test_three_equal(1,1,1))\nprint(test_three_equal(1,2,3))\nprint(test_three_equal(3,3,3))",
        "num_ids": 96
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    if x == y or y == z or z == x:\n        return 2\n    return 0\n",
        "num_ids": 38
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    counter = 0\n    for i in x,y,z:\n        if i == i:\n            counter += 1\n    return counter\n",
        "num_ids": 34
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    else:\n        return 0\n",
        "num_ids": 23
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in x,y,z:\n        if i == x:\n            count += 1\n    print count\n",
        "num_ids": 34
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x,y):\n        if i == z:\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in [x,y,z]:\n        if i == x:\n            count +=1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and y==z\n",
        "num_ids": 12
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) == 0:\n        return 0\n    low = 0\n    high = len(arr) - 1\n    mid = 0\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] > arr[mid+1]:\n            return mid + 1\n        if arr[mid] < arr[high]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return 0\n",
        "num_ids": 108
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) == 0:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    start = 0\n    end = len(arr) - 1\n",
        "num_ids": 17
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        j = i\n        while j > 0 and arr[j] < arr[(j-1)%n]:\n            count += 1\n            j = (j-1)%n\n    return count\n",
        "num_ids": 71
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = start + (end - start) / 2\n        if arr[mid] <= arr[mid + 1]:\n            return mid\n        elif arr[mid] > arr[0]:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n",
        "num_ids": 96
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    for i in range(1, len(arr)):\n        if arr[i-1] > arr[i]:\n            return i\n",
        "num_ids": 34
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    def sort_helper(arr, low, high):\n        if high <= low:\n            return 0\n        if arr[low] > arr[high]:\n            temp = arr[low]\n            arr[low] = arr[high]\n            arr[high] = temp\n        mid = int((low + high)/2)\n        rotations = sort_helper(arr, low, mid) + sort_helper(arr, mid+1, high)\n        i, j = low, mid+1\n        # count no. of times we swap the array element in the first loop\n        for k in range(low, high+1):\n            if i > mid:\n                arr[k] = arr[j]\n                j += 1\n            elif j > high:\n                arr[k] = arr[i]\n                i += 1\n            elif arr[i] > arr[j]:\n                arr[k] = arr[j]\n                j += 1\n            else:\n                arr[k] = arr[i]\n                i += 1\n        return rotations\n    return sort_helper(arr, 0, len(arr)-1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1979
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    start = 0\n    end = len(arr)-1\n    while start<=end:\n        if arr[start]==arr[end]:\n            start+=1\n            end-=1\n        elif arr[start]<arr[end]:\n            return start\n        else:\n            return end\n",
        "num_ids": 72
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    rotations = 0\n    for i in range(len(arr)):\n        if arr[i] < arr[(i+1) % len(arr)]:\n            rotations += 1\n    return rotations\n",
        "num_ids": 52
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr)==1:\n        return 0\n    low=0\n    high=len(arr)-1\n    mid=0\n    if arr[low]<arr[high]:\n        return 0\n    else:\n        while low<high:\n            mid=(low+high)//2\n            if arr[mid]>arr[high]:\n                low=mid+1\n            elif arr[mid]<arr[low]:\n                high=mid\n            else:\n                if arr[mid]==arr[low]:\n                    low=low+1\n                else:\n                    high=mid\n        return low\n",
        "num_ids": 145
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    i = 1\n    while i*i < n :\n        if i*i == n :\n            return True\n        i = i + 1\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt = n ** 0.5\n    return int(sqrt) == sqrt\n",
        "num_ids": 23
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return (n**0.5) == (int(n**0.5))\n",
        "num_ids": 22
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 :\n        return True\n    if n <= 0 :\n        return False\n    start = 0\n    end = n - 1\n    while start <= end :\n        mid = (start + end) // 2\n        num = mid * mid\n        if num == n :\n            return True\n        elif num < n :\n            start = mid + 1\n        else :\n            end = mid - 1\n    return False\n",
        "num_ids": 102
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n < 0) :\n        return False\n",
        "num_ids": 15
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return sqrt(n) == int(sqrt(n))\n",
        "num_ids": 18
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    r = n ** 0.5\n    return (r - int(r) == 0)\n",
        "num_ids": 24
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt = n ** 0.5\n    return sqrt == int(sqrt)\n",
        "num_ids": 23
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n==1) :\n        return True\n    if (n<0) :\n        return False\n    sqrt = n\n    while (sqrt*sqrt<n) :\n        sqrt = sqrt+1\n    if (sqrt*sqrt==n) :\n        return True\n    else :\n        return False\n",
        "num_ids": 81
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return (n == int(math.sqrt(n)) ** 2)\n",
        "num_ids": 20
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    temp = 1\n    for i in arr:\n        temp = temp * i\n    if temp % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 42
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    \n    \n    return sum(arr) % 2 == 0\n    \n    \n    \ndef product_except_self(arr): \n    '''\n    Write a function that takes a list of integers and returns the product of all the \n    elements except the element at each index.\n    '''\n    \n    \n    \n    \n    prod = 1\n    for i in xrange(len(arr)): \n        prod *= arr[i]\n    \n    output = []\n    for i in xrange(len(arr)): \n        output.append(prod / arr[i])\n    \n    return output\n    \n    \n    \n    \ndef median_of_medians(arr): \n    '''\n    Write a function that takes a list of numbers and returns the median of the list.\n    '''\n    \n    \n    \n    \n    return sorted(arr)[len(arr) / 2]\n    \n    \n    \n    \ndef palindromes(arr): \n    '''\n    Write a function that takes a list of strings and returns the list with all the strings\n    that are palindromes\n    '''\n    \n    \n    \n    \n    return [x for x in arr if x == x[::-1]]\n    \n    \n    \n    \ndef largest_sum_in_matrix(matrix): \n    '''\n    Write a function that takes a 2-dimensional list of integers and returns the sum of the largest sum of each column.\n    '''\n    \n    \n    \n    \n    \n    return sum(sorted(map(sum, matrix))[-3:])\n    \n    \n    \n    \ndef swap_columns(matrix): \n    '''\n    Write a function that takes a 2-dimensional list of integers and returns the matrix after columns have been swapped.\n    '''\n    \n    \n    \n    \n    return [list(x) for x in zip(*matrix)]\n    \n    \n    \n    \ndef even_palindrome(number): \n    '''\n    Write a function that takes a number and returns whether it is a palindrome even or odd.\n    '''\n    \n    \n    \n    \n    return str(number) == str(number)[::-1]\n    \n    \n    \n    \ndef largest_palindrome(num): \n    '''\n    Write a function that takes a list of numbers and returns the largest palindrome made from the product of two numbers from the list.\n    '''\n    \n    \n    \n    \n    return max([x * y for x in num for y in num if str(x * y) == str(x * y)[::-1]])\n    \n    \n    \n    \ndef length_of_longest_substring(arr, k): \n    '''\n    Write a function that takes a string and a number and returns the length of the longest substring that does not contain more than k distinct characters.\n    '''\n    \n    \n    \n    \n    \n    return len(max(group(arr, k), key=len))\n    \n    \n    \n    \ndef shuffle_string(string): \n    '''\n    Write a function that takes a string and returns a shuffled string with all the letters in a different order.\n    '''\n    \n    \n    \n    \n    return ''.join([s[i] for i in random.sample(xrange(len(string)), len(string))])\n    \n    \n    \n    \n    \ndef rotate_array(arr, n): \n    '''\n    Write a function that takes a list and a number and returns the rotated list with the new number at the first index.\n    '''\n    \n    \n    \n    \n    return arr[n:] + arr[:n]\n    \n    \n    \n    \ndef largest_sum_of_rotated_array(arr): \n    '''\n    Write a function that takes a list of numbers and returns the sum of the largest sum of any contiguous subarray.\n    '''\n    \n    \n    \n    \n    \n    return sum(sorted(arr)[-3:])\n    \n    \n    \n    \n    \ndef shuffle_the_matrix(matrix): \n    '''\n    Write a function that takes a 2-dimensional list and returns the matrix after rows and columns have been swapped.\n    '''\n    \n    \n    \n    \n    return [[matrix[j][i] for j in xrange(len(matrix))] for i in xrange(len(matrix[0]))]\n    \n    \n    \n    \n    \ndef inversion_in_array(arr): \n    '''\n    Write a function that takes a list and returns the number of inversions in the list.\n    '''\n    \n    \n    \n    \n    return sum([1 for i in xrange(len(arr)) if arr[i] > arr[arr[i]]])\n    \n    \n    \n    \n    \ndef max_number_of_consecutive_ones(arr): \n    '''\n    Write a function that takes a list of integers and returns the maximum number of consecutive 1s.\n    '''\n    \n    \n    \n    \n    return max(map(lambda x: x.count(1), arr))\n    \n    \n    \n    \n    \ndef sum_of_unique_digits(num): \n    '''\n    Write a function that takes a number and returns the sum of the sum of each digit in the number.\n    '''\n    \n    \n    \n    \n    return sum(int(x) for x in str(num))\n    \n    \n    \n    \n    \ndef kth_missing_number(arr, k): \n    '''\n    Write a function that takes a list of numbers and returns the number that is missing from the list.\n    '''\n    \n    \n    \n    \n    return random.sample(xrange(max(arr) + 1), k)\n    \n    \n    \n    \n    \ndef sum_of_products(arr): \n    '''\n    Write a function that takes a list of integers and returns the sum of the products of all the integers in the list.\n    '''\n    \n    \n    \n    \n    \n    return sum([i * arr[i] for i in xrange(len(arr))])\n    \n    \n    \n    \n    \ndef count_distinct_elements(arr): \n    '''\n    Write a function that takes a list of integers and returns the number of distinct integers.\n    '''\n    \n    \n    \n    \n    return len(set(arr))\n    \n    \n    \n    \n    \ndef largest_common_substring(arr): \n    '''\n    Write a function that takes a list of strings and returns the longest common substring among all the strings in the list.\n    '''\n    \n    \n    \n    \n    return max([max(x[i:j+1] for j in xrange(len(x))) for i in xrange(len(x[0])) for x in arr])\n    \n    \n    \n    \n    \ndef insert_elements_into_sorted_array(arr, val, n): \n    '''\n    Write a function that takes a list, a number and a number and returns a sorted list with the number of elements between the numbers inserted in the list.\n    '''\n    \n    \n    \n    \n    return sorted(arr[:val] + [n] + arr[val:])\n    \n    \n    \n    \n    \ndef reverse_of_a_number(num): \n    '''\n    Write a function that takes a number and returns the reverse of that number.\n    '''\n    \n    \n    \n    \n    return int(str(num)[::-1])\n    \n    \n    \n    \n    \ndef two_sums_1(arr, target): \n    '''\n    Write a function that takes a list of numbers and returns the two numbers that sum to a target number.\n    '''\n    \n    \n    \n    \n    \n    return [x for x in arr if target - x in arr]\n    \n    \n    \n    \n    \ndef two_sums_2(arr, target): \n    '''\n    Write a function that takes a list of numbers and returns the two numbers that sum to a target number.\n    '''\n    \n    \n    \n    \n    \n    for i in xrange(len(arr)): \n        for j in xrange(i + 1, len(arr)): \n            if arr[",
        "num_ids": 48
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    arr.sort()\n    print(arr)\n    total = 1\n    for i in arr:\n        total = total * i\n    if total % 2 == 0:\n        return True\n    else:\n        return False\n    \nif __name__ == \"__main__\":\n    arr = [5, 2, 3, 4, 8]\n    print(is_product_even(arr)",
        "num_ids": 93
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product = product * i\n",
        "num_ids": 21
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Approach: we can multiply all the items of the list and check for modulus.\n    # Time complexity: O(n)\n    # Space complexity: O(1)\n    return reduce(lambda x,y:x*y, arr) % 2 == 0\n",
        "num_ids": 62
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in range(0, len(arr)):\n        product = product * arr[i]\n    return True if product % 2 == 0 else False\n",
        "num_ids": 43
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for elem in arr:\n        product = product*elem\n",
        "num_ids": 23
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return True\n",
        "num_ids": 16
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    def product(arr): \n        return reduce(lambda x, y: x * y, arr)\n",
        "num_ids": 26
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return reduce(lambda x, y: x * y, arr) % 2 == 0\n",
        "num_ids": 22
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    m = []\n    if lists == []:\n        return m\n    for l in lists:\n        if sum(l) == max([sum(l) for l in lists]):\n            m.append(l)\n    return m\n",
        "num_ids": 57
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return []\n    lists.sort(key=sum)\n    return lists[-1]\n",
        "num_ids": 34
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    def sub_max_sum_list(lists):\n        '''\n        This function returns the list in a list of lists whose sum of elements is the highest.\n        '''\n        if len(lists) == 0:\n            return []\n        elif len(lists) == 1:\n            return lists[0]\n        else:\n            max_list = max_sum_list(lists[1:])\n            return [max(lists[0],max_list)] + sub_max_sum_list(lists[1:])\n    return max_sum_list(lists)\n",
        "num_ids": 94
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for list in lists:\n        if sum(list) > max_sum:\n            max_sum = sum(list)\n            max_list = list\n    return max_list\n",
        "num_ids": 58
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    l = len(lists)\n    l = len(lists[0])\n    for i in range(0,l):\n        maximum = lists[0][i]\n        for j in range(0,l):\n            maximum = max(maximum,lists[j][i])\n        print maximum\n        \ndef max_sum_sublist(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    l = len(lists)\n    l = len(lists[0])\n    for i in range(0,l):\n        maximum = lists[0][i]\n        for j in range(0,l):\n            if(i == j):\n                continue\n            else:\n                maximum = max(maximum,lists[j][i])\n        print maximum\n        \ndef max_sum_diagonally(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    l = len(lists)\n    l = len(lists[0])\n    for i in range(0,l):\n        maximum = lists[i][i]\n        for j in range(0,l):\n            if(i == j):\n                continue\n            else:\n                maximum = max(maximum,lists[i][j])\n        print maximum\n        \ndef max_sum_matrix(matrix):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    l = len(matrix)\n    l = len(matrix[0])\n    for i in range(0,l):\n        maximum = matrix[i][0]\n        for j in range(0,l):\n            if(i == j):\n                continue\n            else:\n                maximum = max(maximum,matrix[i][j])\n        print maximum\n        \ndef max_sum_rectangle(matrix):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    l = len(matrix)\n    l = len(matrix[0])\n    maximum = matrix[0][0]\n    for i in range(0,l):\n        for j in range(0,l):\n            maximum = max(maximum,matrix[i][j])\n    print maximum\n    \ndef max_sum_triangle(matrix):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    l = len(matrix)\n    l = len(matrix[0])\n    for i in range(0,l):\n        maximum = matrix[i][i]\n        for j in range(0,l):\n            if(i == j):\n                continue\n            else:\n                maximum = max(maximum,matrix[i][j])\n        print maximum\n        \ndef max_sum_triangle_top_down(matrix):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    l = len(matrix)\n    l = len(matrix[0])\n    for i in range(0,l):\n        for j in range(i+1):\n            maximum = matrix[i][j]\n            if(i < j):\n                maximum = max(maximum,matrix[i][j])\n            elif(i == j):\n                continue\n            else:\n                maximum = max(maximum,matrix[i][j])\n        print maximum\n        \ndef max_sum_triangle_bottom_up(matrix):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    l = len(matrix)\n    l = len(matrix[0])\n    for i in range(l-1,-1,-1):\n        for j in range(0,i+1):\n            maximum = matrix[j][i]\n            if(i > j):\n                maximum = max(maximum,matrix[j][i])\n            elif(i == j):\n                continue\n            else:\n                maximum = max(maximum,matrix[j][i])\n        print maximum\n        \ndef max_sum_triangle_reverse(matrix):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    l = len(matrix)\n    l = len(matrix[0])\n    for i in range(l-1,-1,-1):\n        for j in range(i+1):\n            maximum = matrix[j][i]\n            if(i > j):\n                maximum = max(maximum,matrix[j][i])\n            elif(i == j):\n                continue\n            else:\n                maximum = max(maximum,matrix[j][i])\n        print maximum\n        \ndef max_sum_triangle_reverse_top_down(matrix):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    l = len(matrix)\n    l = len(matrix[0])\n    for i in range(l-1,-1,-1):\n        for j in range(i+1):\n            maximum = matrix[j][i]\n            if(i > j):\n                maximum = max(maximum,matrix[j][i])\n            elif(i == j):\n                continue\n            else:\n                maximum = max(maximum,matrix[j][i])\n        print maximum\n        \ndef max_sum_triangle_reverse_bottom_up(matrix):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    l = len(matrix)\n    l = len(matrix[0])\n    for i in range(l-1,-1,-1):\n        for j in range(i+1):\n            maximum = matrix[j][i]\n            if(i > j):\n                maximum = max(maximum,matrix[j][i])\n            elif(i == j):\n                continue\n            else:\n                maximum = max(maximum,matrix[j][i])\n        print maximum\n        \ndef max_sum_triangle_reverse_top_down_1(matrix):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    l = len(matrix)\n    l = len(matrix[0])\n    for i in range(l-1,-1,-1):\n        maximum = matrix[i][i]\n        for j in range(i+1):\n            if(i > j):\n                maximum = max(maximum,matrix[i][j])\n            elif(i == j):\n                continue\n            else:\n                maximum = max(maximum,matrix[i][j])\n        print maximum\n        \ndef max_sum_triangle_reverse_bottom_up_1(matrix):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    l = len(matrix)\n    l = len(matrix[0])\n    for i in range(l-1,-1,-1):\n        maximum = matrix[i][i]\n        for j in range(i+1):\n            if(i > j):\n                maximum = max(maximum,matrix[i][j])\n            elif(i == j):\n                continue\n            else:\n                maximum = max(maximum,matrix[i][j])\n        print maximum\n        \ndef max_sum_triangle_reverse_top_down_2(matrix):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    l = len(matrix)\n    l = len(matrix[0])\n    for i in range(l-1,-1,-1):\n        maximum = matrix[i][i]\n        for j in range(i+1):\n            maximum = max(maximum,matrix[j][i])\n        print maximum\n        \ndef max_sum_triangle_reverse_bottom_up_2(matrix):\n    '''\n    Write a function that returns the list in a list of lists whose sum of element",
        "num_ids": 19
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max = 0\n    list_index = 0\n    for list in lists:\n        list_sum = sum(list)\n        if list_sum > max:\n            max = list_sum\n            list_index = lists.index(list)\n    return lists[list_index]\n",
        "num_ids": 68
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if lists == []:\n        return []\n    sums = []\n    for i in range(len(lists)):\n        if i == 0:\n            sums.append(lists[0])\n        else:\n            sums.append(max(sums[i-1] + lists[i], lists[i]))\n    return sums\n",
        "num_ids": 83
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # max_sum = -float('inf')\n    # max_sum_list = []\n    # for i in lists:\n    #     total = sum(i)\n    #     if total > max_sum:\n    #         max_sum = total\n    #         max_sum_list = i\n    # return max_sum_list\n    # return max([sum(i) for i in lists])\n    return max([sum(i) for i in lists])\n",
        "num_ids": 111
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    # first find the sum of each list\n    sums = []\n    for l in lists:\n        sums.append(sum(l))\n    \n    # then find the max sum\n    max_sum = max(sums)\n    \n    # then find the list index of the max sum\n    i = sums.index(max_sum)\n    \n    # return the list\n    return lists[i]\n    \ndef max_sum_list2(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    # first find the max sum\n    max_sum = max(sum(l) for l in lists)\n    \n    # now find the list index of the max sum\n    i = [sum(l) for l in lists].index(max_sum)\n    \n    # return the list\n    return lists[i]\n    \ndef max_sum_list3(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    # first find the max sum\n    max_sum = max(sum(l) for l in lists)\n    \n    # now find the list index of the max sum\n    i = sum(l).index(max_sum)\n    \n    # return the list\n    return lists[i]\n    \ndef main():\n    \n    print(max_sum_list([[1,2,3], [3,2,1]]))\n    print(max_sum_list2([[1,2,3], [3,2,1]]))\n    print(max_sum_list3([[1,2,3], [3,2,1]]))\n    \nmain(",
        "num_ids": 161
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return max(lists, key=sum)\n",
        "num_ids": 13
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    i = 0\n    while i < len(test_str):\n        j = i\n        count = 1\n        while j < len(test_str) - 1:\n            if test_str[j] == test_str[j + 1]:\n                count += 1\n                j += 1\n            else:\n                break\n        if count > max_run:\n            max_run = count\n        i += 1\n    return max_run\n",
        "num_ids": 111
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    def count_uppercase(str):\n        c = 0\n        for ch in str:\n            if ch.isupper():\n                c += 1\n        return c\n",
        "num_ids": 42
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 1\n    max_run = 1\n    for i in range(1, len(test_str)):\n        if test_str[i] == test_str[i - 1]:\n            count += 1\n        else:\n            count = 1\n        if count > max_run:\n            max_run = count\n",
        "num_ids": 78
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    m = 0\n    for i in range(len(test_str)):\n        current_char = test_str[i]\n        if current_char.isupper():\n            count = 0\n            for j in range(i,len(test_str)):\n                if current_char == test_str[j]:\n                    count += 1\n                else:\n                    break\n            if count > m:\n                m = count\n    return m\n    \nprint(max_run_uppercase('AaBbCc')) #3\nprint(max_run_uppercase('Hello world')) #12\nprint(max_run_uppercase('aabbbccc')) #3\nprint(max_run_uppercase('ddjklsjdslkfj')) #0\n",
        "num_ids": 190
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str) == 0:\n        return 0\n",
        "num_ids": 18
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i] >= 'A' and test_str[i] <= 'Z':\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    if current_run > max_run:\n        max_run = current_run\n    return max_run\n",
        "num_ids": 118
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_uppercase = 0\n    curr_uppercase = 0\n    for char in test_str:\n        if char.isupper():\n            curr_uppercase += 1\n        else:\n            curr_uppercase = 0\n        max_uppercase = max(curr_uppercase, max_uppercase)\n    return max_uppercase\n",
        "num_ids": 93
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_length = 0\n    current_length = 0\n    for char in test_str:\n        if char.isupper():\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    return max_length\n",
        "num_ids": 73
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run = 0\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            run = max(run,count)\n            count = 0\n    return max(run,count)\n",
        "num_ids": 71
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str)==0:\n        return 0\n    upper_count=0\n    max_run=0\n    for i in test_str:\n        if i.isupper():\n            upper_count+=1\n        else:\n            upper_count=0\n        max_run=max(max_run,upper_count)\n    return max_run\n",
        "num_ids": 89
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n",
        "num_ids": 24
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for x in nums:\n        if x%2==1:\n            return x\n    return None\n",
        "num_ids": 27
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n",
        "num_ids": 28
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for x in nums:\n        if x%2!= 0:\n            return x\n",
        "num_ids": 24
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!= 0:\n            return i\n    return \"No odd number found\"\n",
        "num_ids": 33
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\n",
        "num_ids": 27
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n    return None\n",
        "num_ids": 28
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2!=0:\n            return nums[i]\n    return -1\n",
        "num_ids": 42
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n    return None\n",
        "num_ids": 41
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for item in nums:\n        if item % 2 == 1:\n            return item\n",
        "num_ids": 23
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    sorted_test_tup = sorted(test_tup, key=lambda x: x[1])\n    # print(sorted_test_tup)\n    for i in range(K):\n        if sorted_test_tup[i][0] in read_dict:\n            return False\n    return True\n",
        "num_ids": 77
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    ret_val = None\n    if len(test_tup) < K:\n        ret_val = False\n    else:\n        ret_val = True\n    return ret_val\n",
        "num_ids": 46
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[1][0] not in K:\n        print('False')\n    elif test_tup[1][1] not in K:\n        print('False')\n    else:\n        print('True')\n",
        "num_ids": 57
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    result = False\n    if test_tup[0] == K[0]:\n        result = True\n    elif test_tup[1] == K[1]:\n        result = True\n    elif test_tup[2] == K[2]:\n        result = True\n    elif test_tup[3] == K[3]:\n        result = True\n    return result\n",
        "num_ids": 94
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return (test_tup[K]=='K')\n",
        "num_ids": 17
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    print(\"Checking if tuples contain K in the tuple\", test_tup)\n    print(str(len(test_tup)) + \" TUPLES FOUND\")\n    if(len(test_tup) == K):\n        print(\"Tuples have exactly K\", test_tup)\n    else:\n        print(\"Tuples don't have exactly K\", test_tup)\n",
        "num_ids": 94
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if not len(test_tup) == K:\n        return False\n    else:\n        return True\n",
        "num_ids": 28
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    s = set()\n    for x in test_tup:\n        if x in s:\n            return True\n        else:\n            s.add(x)\n    if len(s) == K:\n        return True\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for index, word in enumerate(test_tup):\n        if index == K:\n            return True\n    return False\n",
        "num_ids": 32
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    tup = test_tup[0]\n    if len(tup)==K:\n        return True\n    else:\n        return False\n",
        "num_ids": 37
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for tup in zip(test_tup1, test_tup2):\n        if tup[0] >= tup[1]:\n            return False\n    return True\n",
        "num_ids": 68
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] < test_tup2[0] and test_tup1[1] < test_tup2[1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return [x < y for x,y in zip(test_tup1, test_tup2)]\n",
        "num_ids": 28
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    \n    # check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    for idx, val in enumerate(test_tup1):\n        if val <= test_tup2[idx]:\n            pass\n        else:\n            return False\n    return True\n",
        "num_ids": 71
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Your code here\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True\n    pass\n",
        "num_ids": 79
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    first = test_tup1\n    second = test_tup2\n    if len(first)!= len(second):\n        return False\n    else:\n        for i in range(0, len(first)):\n            if second[i] > first[i]:\n                return False\n    return True\n",
        "num_ids": 74
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for x, y in zip(test_tup1, test_tup2):\n        if x < y:\n            return True\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for idx in range(len(test_tup1)):\n        if test_tup2[idx] > test_tup1[idx]:\n            return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    return True\n",
        "num_ids": 70
    }
]